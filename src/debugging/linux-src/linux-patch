diff -uNr linux-3.8.2/arch/x86/include/asm/page_64_types.h linux-3.8.2_custom/arch/x86/include/asm/page_64_types.h
--- linux-3.8.2/arch/x86/include/asm/page_64_types.h	2013-03-03 17:04:08.000000000 -0500
+++ linux-3.8.2_custom/arch/x86/include/asm/page_64_types.h	2013-05-16 13:02:31.739225984 -0400
@@ -1,7 +1,7 @@
 #ifndef _ASM_X86_PAGE_64_DEFS_H
 #define _ASM_X86_PAGE_64_DEFS_H
 
-#define THREAD_SIZE_ORDER	1
+#define THREAD_SIZE_ORDER	2
 #define THREAD_SIZE  (PAGE_SIZE << THREAD_SIZE_ORDER)
 #define CURRENT_MASK (~(THREAD_SIZE - 1))
 
diff -uNr linux-3.8.2/arch/x86/include/asm/thread_info.h linux-3.8.2_custom/arch/x86/include/asm/thread_info.h
--- linux-3.8.2/arch/x86/include/asm/thread_info.h	2013-03-03 17:04:08.000000000 -0500
+++ linux-3.8.2_custom/arch/x86/include/asm/thread_info.h	2013-05-16 12:58:33.311217523 -0400
@@ -23,7 +23,35 @@
 #include <asm/ftrace.h>
 #include <linux/atomic.h>
 
+typedef struct {
+    unsigned long int error_code;
+    unsigned char* xip;
+    unsigned long int cs;
+    unsigned long int xflags;
+    unsigned long int xsp;
+    unsigned long int ss;
+} interrupt_stack_frame;
+
+struct client_extension {
+
+    /* stack of raw module addresses for returns from module-to-kernel calls
+     * and interrupts within modules. */
+    void *return_address_stack[8];
+    unsigned return_stack_size;
+
+    /* kernel address for call/return exits */
+    void *exit_address;
+
+    /* interrupt handlers */
+    void (*iret_handler)(void);
+
+    /* pending interrupt stack frame */
+    interrupt_stack_frame pending;
+//    unsigned long int spill_slot[16];
+};
+
 struct thread_info {
+	unsigned long int	spill_slot[4];
 	struct task_struct	*task;		/* main task structure */
 	struct exec_domain	*exec_domain;	/* execution domain */
 	__u32			flags;		/* low level flags */
@@ -42,10 +70,12 @@
 #endif
 	unsigned int		sig_on_uaccess_error:1;
 	unsigned int		uaccess_err:1;	/* uaccess failed */
+	struct client_extension client_data;
 };
 
 #define INIT_THREAD_INFO(tsk)			\
 {						\
+	.spill_slot	= {0, 0, 0, 0},		\
 	.task		= &tsk,			\
 	.exec_domain	= &default_exec_domain,	\
 	.flags		= 0,			\
@@ -55,6 +85,20 @@
 	.restart_block = {			\
 		.fn = do_no_restart_syscall,	\
 	},					\
+	.client_data	= {	\
+			.return_address_stack = {0,},	\
+			.return_stack_size	= 0,	\
+			.exit_address = 0, 	\
+			.iret_handler = 0,	\
+			.pending	= {	\
+					.error_code = 0,	\
+					.xip	= 0,	\
+					.cs		= 0,	\
+					.xflags	= 0,	\
+					.xsp 	= 0,	\
+					.ss		= 0,	\
+			},	\
+		},	\
 }
 
 #define init_thread_info	(init_thread_union.thread_info)
diff -uNr linux-3.8.2/arch/x86/kernel/cpu/common.c linux-3.8.2_custom/arch/x86/kernel/cpu/common.c
--- linux-3.8.2/arch/x86/kernel/cpu/common.c	2013-03-03 17:04:08.000000000 -0500
+++ linux-3.8.2_custom/arch/x86/kernel/cpu/common.c	2013-05-16 12:59:02.707218566 -0400
@@ -44,6 +44,12 @@
 
 #include "cpu.h"
 
+struct dynamorio_page {
+	char padding[PAGE_SIZE];
+} __attribute__((packed));
+DEFINE_PER_CPU_PAGE_ALIGNED(struct dynamorio_page, dynamorio_page);
+EXPORT_PER_CPU_SYMBOL_GPL(dynamorio_page);
+
 /* all of these masks are initialized in setup_cpu_local_masks() */
 cpumask_var_t cpu_initialized_mask;
 cpumask_var_t cpu_callout_mask;
@@ -1354,3 +1360,4 @@
 	fpu_init();
 }
 #endif
+
diff -uNr linux-3.8.2/scripts/Makefile.build linux-3.8.2_custom/scripts/Makefile.build
--- linux-3.8.2/scripts/Makefile.build	2013-03-03 17:04:08.000000000 -0500
+++ linux-3.8.2_custom/scripts/Makefile.build	2013-05-16 13:12:03.275246267 -0400
@@ -19,8 +19,8 @@
 subdir-y :=
 subdir-m :=
 EXTRA_AFLAGS   :=
-EXTRA_CFLAGS   :=
-EXTRA_CPPFLAGS :=
+EXTRA_CFLAGS   := -Wno-unused-but-set-variable
+EXTRA_CPPFLAGS := -Wno-unused-but-set-variable
 EXTRA_LDFLAGS  :=
 asflags-y  :=
 ccflags-y  :=
@@ -197,6 +197,12 @@
 $(multi-objs-y:.o=.s)   : modname = $(modname-multi)
 $(multi-objs-y:.o=.lst) : modname = $(modname-multi)
 
+quiet_cmd_cc_s_c = CXX $(quiet_modtag)  $@
+cmd_cc_s_c       = $(CXX) -std=c++0x $(c_flags) -fverbose-asm -S -o $@ $<
+
+$(obj)/%.s: $(src)/%.cc FORCE
+	$(call if_changed_dep,cc_s_c)
+
 quiet_cmd_cc_s_c = CC $(quiet_modtag)  $@
 cmd_cc_s_c       = $(CC) $(c_flags) -fverbose-asm -S -o $@ $<
 
@@ -229,9 +235,11 @@
 # (See cmd_cc_o_c + relevant part of rule_cc_o_c)
 
 quiet_cmd_cc_o_c = CC $(quiet_modtag)  $@
+quiet_cmd_cpp_o_c = CPP $(quiet_modtag)  $@
 
 ifndef CONFIG_MODVERSIONS
 cmd_cc_o_c = $(CC) $(c_flags) -c -o $@ $<
+cmd_cpp_o_c = g++ -std=c++0x $(c_flags) -c -o $@ $<
 
 else
 # When module versioning is enabled the following steps are executed:
@@ -258,6 +266,18 @@
 	else									\
 		mv -f $(@D)/.tmp_$(@F) $@;					\
 	fi;
+
+cmd_modversions_cpp =								\
+	if $(OBJDUMP) -h $(@D)/.tmp_$(@F) | grep -q __ksymtab; then		\
+		$(call cmd_gensymtypes_cpp, $(KBUILD_SYMTYPES),$(@:.o=.symtypes))		\
+		    > $(@D)/.tmp_$(@F:.o=.ver);					\
+										\
+		$(LD) $(LDFLAGS) -r -o $@ $(@D)/.tmp_$(@F) 			\
+			-T $(@D)/.tmp_$(@F:.o=.ver);				\
+		rm -f $(@D)/.tmp_$(@F) $(@D)/.tmp_$(@F:.o=.ver);		\
+	else									\
+		mv -f $(@D)/.tmp_$(@F) $@;					\
+	fi;
 endif
 
 ifdef CONFIG_FTRACE_MCOUNT_RECORD
@@ -282,12 +302,23 @@
 	"$(OBJDUMP)" "$(OBJCOPY)" "$(CC) $(KBUILD_CFLAGS)" \
 	"$(LD)" "$(NM)" "$(RM)" "$(MV)" \
 	"$(if $(part-of-module),1,0)" "$(@)";
+sub_cmd_record_mcount_cpp = set -e ; perl $(srctree)/scripts/recordmcount.pl "$(ARCH)" \
+	"$(if $(CONFIG_CPU_BIG_ENDIAN),big,little)" \
+	"$(if $(CONFIG_64BIT),64,32)" \
+	"$(OBJDUMP)" "$(OBJCOPY)" "$(CXX) $(KBUILD_CFLAGS)" \
+	"$(LD)" "$(NM)" "$(RM)" "$(MV)" \
+	"$(if $(part-of-module),1,0)" "$(@)";
 recordmcount_source := $(srctree)/scripts/recordmcount.pl
 endif
 cmd_record_mcount = 						\
 	if [ "$(findstring -pg,$(_c_flags))" = "-pg" ]; then	\
 		$(sub_cmd_record_mcount)			\
 	fi;
+cmd_record_mcount =                                             \
+        if [ "$(findstring -pg,$(_c_flags))" = "-pg" ]; then    \
+                $(sub_cmd_record_mcount)                    \
+        fi;
+
 endif
 
 define rule_cc_o_c
@@ -306,7 +337,11 @@
 $(obj)/%.o: $(src)/%.c $(recordmcount_source) FORCE
 	$(call cmd,force_checksrc)
 	$(call if_changed_rule,cc_o_c)
-
+	
+# Built-in and composite module parts; C++
+$(obj)/%.oo: $(src)/%.cc
+	$(call if_changed_rule,cpp_o_c)
+	
 # Single-part modules are special since we need to mark them in $(MODVERDIR)
 
 $(single-used-m): $(obj)/%.o: $(src)/%.c $(recordmcount_source) FORCE
@@ -421,10 +456,13 @@
 #    <composite-object>-objs := <list of .o files>
 #  or
 #    <composite-object>-y    := <list of .o files>
+
+FILTER_OUT = $(foreach v,$(2),$(if $(findstring $(1),$(v)),,$(v)))
+
 link_multi_deps =                     \
 $(filter $(addprefix $(obj)/,         \
 $($(subst $(obj)/,,$(@:.o=-objs)))    \
-$($(subst $(obj)/,,$(@:.o=-y)))), $^)
+$($(subst $(obj)/,,$(@:.o=-y)))), $(call FILTER_OUT,.cc,$^))
  
 quiet_cmd_link_multi-y = LD      $@
 cmd_link_multi-y = $(LD) $(ld_flags) -r -o $@ $(link_multi_deps) $(cmd_secanalysis)
@@ -439,6 +477,10 @@
 $(multi-used-y) : %.o: $(multi-objs-y) FORCE
 	$(call if_changed,link_multi-y)
 
+# filter C vs. C++ files
+
+cpp-multi-objs-m = $(call FILTER_OUT,.o, $(multi-objs-m))
+
 $(multi-used-m) : %.o: $(multi-objs-m) FORCE
 	$(call if_changed,link_multi-m)
 	@{ echo $(@:.o=.ko); echo $(link_multi_deps); } > $(MODVERDIR)/$(@F:.o=.mod)
@@ -472,6 +514,7 @@
   include $(cmd_files)
 endif
 
+
 # Declare the contents of the .PHONY variable as phony.  We keep that
 # information in a variable se we can use it in if_changed and friends.
 
