#ifndef CFI_ALIAS_OVERLAYS
#define CFI_ALIAS_OVERLAYS
struct FIELD_fs_excl { };
struct FIELD_ptl { };
struct FIELD_partial { };
struct FIELD_writepage { };
struct FIELD_local_df { };
struct FIELD_si_errno { };
struct FIELD_j_committing_transaction { };
struct FIELD_wait_start { };
struct FIELD_dqi_maxilimit { };
struct FIELD_i_rdev { };
struct FIELD_ndo_stop { };
struct FIELD_maj_flt { };
struct FIELD_prefix { };
struct FIELD_bd_contains { };
struct FIELD_bdev_try_to_free_page { };
struct FIELD_reclaim_state { };
struct FIELD_i_security { };
struct FIELD_pids { };
struct FIELD_b_bh { };
struct FIELD_children { };
struct FIELD_rtnl_link_ops { };
struct FIELD_s_wait_unfrozen { };
struct FIELD_platform_data { };
struct FIELD_cpu_slab { };
struct FIELD_wait_max { };
struct FIELD_i_bytes { };
struct FIELD_nr_wakeups_affine { };
struct FIELD_page_tree { };
struct FIELD_to { };
struct FIELD_tail { };
struct FIELD_set_msglevel { };
struct FIELD_s_time_gran { };
struct FIELD_sriov { };
struct FIELD_link_mode { };
struct FIELD_d_lock { };
struct FIELD_j_wbufsize { };
struct FIELD_nway_reset { };
struct FIELD_supported { };
struct FIELD_dqptr_sem { };
struct FIELD_e_tag { };
struct FIELD_bus_list { };
struct FIELD_trace_overrun { };
struct FIELD_iopl { };
struct FIELD_xmit_lock_owner { };
struct FIELD_saved_cap_space { };
struct FIELD_s_blocksize_bits { };
struct FIELD_thread_group { };
struct FIELD_lru { };
struct FIELD_dma_parms { };
struct FIELD_notifier_mask { };
struct FIELD_utime { };
struct FIELD_aio_read { };
struct FIELD_gso_max_size { };
struct FIELD_last_wakeup { };
struct FIELD_s_dev { };
struct FIELD_rx_bytes { };
struct FIELD_get_link { };
struct FIELD_numa_node { };
struct FIELD_nivcsw { };
struct FIELD_list { };
struct FIELD_sched_class { };
struct FIELD_d_u { };
struct FIELD_p { };
struct FIELD_res_attr_wc { };
struct FIELD_dqi_maxblimit { };
struct FIELD_bd_fsfreeze_count { };
struct FIELD_d_lru { };
struct FIELD_b_bdev { };
struct FIELD_runtime_error { };
struct FIELD_vfork_done { };
struct FIELD_error_code { };
struct FIELD_avg_running { };
struct FIELD_req_cons { };
struct FIELD_subsystem_device { };
struct FIELD_s_need_sync { };
struct FIELD_tx_queue_len { };
struct FIELD_umount_begin { };
struct FIELD_a_refcount { };
struct FIELD_nr_migrations { };
struct FIELD_mknod { };
struct FIELD_i_mmap_nonlinear { };
struct FIELD_prev_sum_exec_runtime { };
struct FIELD_gtime { };
struct FIELD_set_wol { };
struct FIELD_subordinate { };
struct FIELD_flash_device { };
struct FIELD_bus_id { };
struct FIELD_dma_mask { };
struct FIELD_ctor { };
struct FIELD_mem_start { };
struct FIELD_index { };
struct FIELD_ack_interrupt { };
struct FIELD_addr { };
struct FIELD_j_tail_sequence { };
struct FIELD_debugreg3 { };
struct FIELD_clear_child_tid { };
struct FIELD_start_pid { };
struct FIELD_nrpages { };
struct FIELD_segment_boundary_mask { };
struct FIELD_releasepage { };
struct FIELD_set_ufo { };
struct FIELD_d_inode { };
struct FIELD_run { };
struct FIELD_j_last { };
struct FIELD_debugreg6 { };
struct FIELD_nr_wakeups_idle { };
struct FIELD_truesize { };
struct FIELD_journal { };
struct FIELD_debugreg7 { };
struct FIELD_phy_queue { };
struct FIELD_cr2 { };
struct FIELD_full { };
struct FIELD_hash { };
struct FIELD_pi_state_cache { };
struct FIELD_migratepage { };
struct FIELD_uevent { };
struct FIELD_s_type { };
struct FIELD_len { };
struct FIELD_fpu_counter { };
struct FIELD_objects { };
struct FIELD_splice_read { };
struct FIELD_groups { };
struct FIELD_xstate { };
struct FIELD_get_xquota { };
struct FIELD_set_dqblk { };
struct FIELD_quota_write { };
struct FIELD_s_instances { };
struct FIELD_error_state { };
struct FIELD_total_objects { };
struct FIELD_no_msi { };
struct FIELD_state_saved { };
struct FIELD_i_fop { };
struct FIELD_trace_recursion { };
struct FIELD_shift { };
struct FIELD_macvlan_port { };
struct FIELD_ndo_fcoe_enable { };
struct FIELD_drv { };
struct FIELD_mac_header { };
struct FIELD_multicast { };
struct FIELD_advertising { };
struct FIELD_task_list { };
struct FIELD_bd_list { };
struct FIELD_set_eeprom { };
struct FIELD_j_barrier { };
struct FIELD_d_time { };
struct FIELD_set_priv_flags { };
struct FIELD_state_initialized { };
struct FIELD_thaw_noirq { };
struct FIELD_s_op { };
struct FIELD_reset_fn { };
struct FIELD_in_iowait { };
struct FIELD_s_users { };
struct FIELD_is_busmaster { };
struct FIELD_nr_forced2_migrations { };
struct FIELD_j_private { };
struct FIELD_s_blocksize { };
struct FIELD_inv_weight { };
struct FIELD_client_data { };
struct FIELD_resume_noirq { };
struct FIELD_get_ringparam { };
struct FIELD_ndo_set_mac_address { };
struct FIELD_si_signo { };
struct FIELD_d_mounted { };
struct FIELD_files { };
struct FIELD_pkt_type { };
struct FIELD_operstate { };
struct FIELD_force_media { };
struct FIELD_from { };
struct FIELD_aio_write { };
struct FIELD_s_list { };
struct FIELD_runtime_suspend { };
struct FIELD_get_ufo { };
struct FIELD_next { };
struct FIELD_truncate_range { };
struct FIELD_cpus_allowed { };
struct FIELD_s_dentry_lru { };
struct FIELD_nr_migrations_cold { };
struct FIELD_fallocate { };
struct FIELD_prev { };
struct FIELD_type { };
struct FIELD_rtort_pipe_count { };
struct FIELD_latency_record_count { };
struct FIELD_mm { };
struct FIELD_objsize { };
struct FIELD_default_timer_slack_ns { };
struct FIELD_i_ino { };
struct FIELD_config_aneg { };
struct FIELD_ndo_set_multicast_list { };
struct FIELD_ndo_init { };
struct FIELD_in_execve { };
struct FIELD_dq_op { };
struct FIELD_vpd { };
struct FIELD_sum_exec_runtime { };
struct FIELD_iif { };
struct FIELD_phy_mask { };
struct FIELD_multifunction { };
struct FIELD_notifier_data { };
struct FIELD_rx_dropped { };
struct FIELD_dcbnl_ops { };
struct FIELD_wait_lock { };
struct FIELD_ipvs_property { };
struct FIELD_exit_address { };
struct FIELD_avl { };
struct FIELD_thread { };
struct FIELD_s_feature_incompat { };
struct FIELD_pi_blocked_on { };
struct FIELD_procent { };
struct FIELD_read_status { };
struct FIELD_work { };
struct FIELD_dev { };
struct FIELD_tv_nsec { };
struct FIELD_network_header { };
struct FIELD_pcie_type { };
struct FIELD_tx_heartbeat_errors { };
struct FIELD_debugreg1 { };
struct FIELD_s_magic { };
struct FIELD_block_max { };
struct FIELD_s_anon { };
struct FIELD_i_gid { };
struct FIELD_data_len { };
struct FIELD_normal_prio { };
struct FIELD_min_flt { };
struct FIELD_local_node { };
struct FIELD_get_tx_csum { };
struct FIELD_lock { };
struct FIELD_i_mutex { };
struct FIELD_b_tnext { };
struct FIELD_attached_dev { };
struct FIELD_acpi_handle { };
struct FIELD_s_umount_key { };
struct FIELD_error_detected { };
struct FIELD_procdir { };
struct FIELD_ml_priv { };
struct FIELD_tx_window_errors { };
struct FIELD_csum { };
struct FIELD_delete_inode { };
struct FIELD_h_magic { };
struct FIELD_last_queued { };
struct FIELD_addr_list_lock { };
struct FIELD_s_nr_users { };
struct FIELD_gro_count { };
struct FIELD_req_prod { };
struct FIELD_run_delay { };
struct FIELD_parent_exec_id { };
struct FIELD_end { };
struct FIELD_pi_state_list { };
struct FIELD_writeback_index { };
struct FIELD_j_blocksize { };
struct FIELD_get { };
struct FIELD_ndo_neigh_setup { };
struct FIELD_proc_handler { };
struct FIELD_i_bdev { };
struct FIELD_write { };
struct FIELD_fh_to_parent { };
struct FIELD_strategy { };
struct FIELD_exec_max { };
struct FIELD_s_umount { };
struct FIELD_netdev_ops { };
struct FIELD_sync_fs { };
struct FIELD_class1 { };
struct FIELD_nsproxy { };
struct FIELD_dev_flags { };
struct FIELD_fs { };
struct FIELD_tc_verd { };
struct FIELD_j_checkpoint_mutex { };
struct FIELD_sp0 { };
struct FIELD_max { };
struct FIELD_encode_fh { };
struct FIELD_rx_missed_errors { };
struct FIELD_mapping { };
struct FIELD_j_max_transaction_buffers { };
struct FIELD_index_hlist { };
struct FIELD_timer_expires { };
struct FIELD_mmio_enabled { };
struct FIELD_bd_block_size { };
struct FIELD_s_uuid { };
struct FIELD_unlink { };
struct FIELD_data { };
struct FIELD_notifier { };
struct FIELD_d_alias { };
struct FIELD_a { };
struct FIELD_phys_id { };
struct FIELD_ari_enabled { };
struct FIELD_atalk_ptr { };
struct FIELD_ss { };
struct FIELD_i_list { };
struct FIELD_counter { };
struct FIELD_get_unmapped_area { };
struct FIELD_refcnt { };
struct FIELD_sk { };
struct FIELD_mark { };
struct FIELD_d_sb { };
struct FIELD_put_link { };
struct FIELD_devt { };
struct FIELD_i_mtime { };
struct FIELD_tx_compressed { };
struct FIELD_se { };
struct FIELD_sd { };
struct FIELD_bd_invalidated { };
struct FIELD_get_xstate { };
struct FIELD_bd_fsfreeze_mutex { };
struct FIELD_sysfs_groups { };
struct FIELD_sysenter_return { };
struct FIELD_nr_wakeups_migrate { };
struct FIELD_s_options { };
struct FIELD_ndo_set_rx_mode { };
struct FIELD_exit_code { };
struct FIELD_poll_list { };
struct FIELD_rtort_rcu { };
struct FIELD_ndo_start_xmit { };
struct FIELD_ndo_get_stats { };
struct FIELD_d_count { };
struct FIELD_no_d1d2 { };
struct FIELD_link_count { };
struct FIELD_quota_off { };
struct FIELD_b_triggers { };
struct FIELD_exit_signal { };
struct FIELD_bd_holder { };
struct FIELD_i_lock { };
struct FIELD_duplex { };
struct FIELD_exec_domain { };
struct FIELD_write_end { };
struct FIELD_ds { };
struct FIELD_get_sset_count { };
struct FIELD_rsp_prod { };
struct FIELD_get_stats_count { };
struct FIELD_show_options { };
struct FIELD_limit_mask { };
struct FIELD_policy { };
struct FIELD_last_siginfo { };
struct FIELD_iowait_count { };
struct FIELD_cred { };
struct FIELD_pending { };
struct FIELD_count { };
struct FIELD_j_uuid { };
struct FIELD_bkl_count { };
struct FIELD_bd_super { };
struct FIELD_assoc_mapping { };
struct FIELD_index_bits { };
struct FIELD_primary { };
struct FIELD_tls_array { };
struct FIELD_last_rx { };
struct FIELD_dirty_inode { };
struct FIELD_i_mapping { };
struct FIELD_nr_failed_migrations_hot { };
struct FIELD_rx_frame_errors { };
struct FIELD_alloc_dquot { };
struct FIELD_dqi_igrace { };
struct FIELD_transparent { };
struct FIELD_direct_IO { };
struct FIELD_name { };
struct FIELD_i_fsnotify_mark_entries { };
struct FIELD_drop { };
struct FIELD_l { };
struct FIELD_ndo_fcoe_ddp_done { };
struct FIELD_tstamp { };
struct FIELD_real_start_time { };
struct FIELD_group_leader { };
struct FIELD_token { };
struct FIELD_i_flock { };
struct FIELD_mode { };
struct FIELD_timeout { };
struct FIELD_spill_slot { };
struct FIELD_i_mutex_dir_key { };
struct FIELD_sendpage { };
struct FIELD_nr_failed_migrations_running { };
struct FIELD_start_comm { };
struct FIELD_mac_len { };
struct FIELD_self_test { };
struct FIELD_broken_parity_status { };
struct FIELD_j_maxlen { };
struct FIELD_weight { };
struct FIELD_nr_wakeups_remote { };
struct FIELD_arg0 { };
struct FIELD_arg1 { };
struct FIELD_ip_ptr { };
struct FIELD_sighand { };
struct FIELD_uevent_suppress { };
struct FIELD_private_lock { };
struct FIELD_splice_pipe { };
struct FIELD_get_info { };
struct FIELD_bd_holders { };
struct FIELD_name_hlist { };
struct FIELD_d_op { };
struct FIELD_physfn { };
struct FIELD_real_blocked { };
struct FIELD_claim_space { };
struct FIELD_event { };
struct FIELD_st_name { };
struct FIELD_sched_reset_on_fork { };
struct FIELD_rt { };
struct FIELD_base0 { };
struct FIELD_i_writecount { };
struct FIELD_dqio_mutex { };
struct FIELD_start_time { };
struct FIELD_cred_guard_mutex { };
struct FIELD_timer_slack_ns { };
struct FIELD_otherend_watch { };
struct FIELD_uaccess_err { };
struct FIELD_qproc { };
struct FIELD_b_assoc_map { };
struct FIELD_req { };
struct FIELD_s_export_op { };
struct FIELD_ioac { };
struct FIELD_collisions { };
struct FIELD_i_mmap_lock { };
struct FIELD_j_commit_sequence { };
struct FIELD_fsindex { };
struct FIELD_ndo_uninit { };
struct FIELD_get_dqblk { };
struct FIELD_archdata { };
struct FIELD_state_add_uevent_sent { };
struct FIELD_set_page_dirty { };
struct FIELD__tx { };
struct FIELD_j_errno { };
struct FIELD_link_reset { };
struct FIELD_e_id { };
struct FIELD_rx_length_errors { };
struct FIELD_a_ops { };
struct FIELD_resume { };
struct FIELD_driver { };
struct FIELD_nr_failed_migrations_affine { };
struct FIELD_ifalias { };
struct FIELD_transfer { };
struct FIELD_free { };
struct FIELD_getxattr { };
struct FIELD_ifindex { };
struct FIELD_base { };
struct FIELD_bd_disk { };
struct FIELD_initialize { };
struct FIELD_nanosleep { };
struct FIELD_mdio_write { };
struct FIELD_dpl { };
struct FIELD_b_assoc_buffers { };
struct FIELD_g { };
struct FIELD_is_virtfn { };
struct FIELD_set_tx_csum { };
struct FIELD_ioctl { };
struct FIELD_timer { };
struct FIELD_link_watch_next { };
struct FIELD_procname { };
struct FIELD_b_committed_data { };
struct FIELD_ats { };
struct FIELD_trap_no { };
struct FIELD_get_eeprom_len { };
struct FIELD_get_regs { };
struct FIELD_adjust_state { };
struct FIELD_subsystem_vendor { };
struct FIELD_first { };
struct FIELD_mc_list { };
struct FIELD_info { };
struct FIELD_suspend { };
struct FIELD_features { };
struct FIELD_vlan_features { };
struct FIELD_fclone { };
struct FIELD_number { };
struct FIELD_b_frozen_data { };
struct FIELD_s_dquot { };
struct FIELD_j_transaction_sequence { };
struct FIELD_done { };
struct FIELD_devres_head { };
struct FIELD_kobj { };
struct FIELD_ptrace_entry { };
struct FIELD_owner { };
struct FIELD_set_coalesce { };
struct FIELD_open { };
struct FIELD_quota_read { };
struct FIELD_size { };
struct FIELD_dqi_dirty_list { };
struct FIELD_mdio_lock { };
struct FIELD_s_active { };
struct FIELD_bts { };
struct FIELD_flock { };
struct FIELD_listxattr { };
struct FIELD_bd_mutex { };
struct FIELD_st_value { };
struct FIELD_mkdir { };
struct FIELD_last_arrival { };
struct FIELD_vlan_tci { };
struct FIELD__sifields { };
struct FIELD_priority { };
struct FIELD_dev_list { };
struct FIELD_i_hash { };
struct FIELD_master { };
struct FIELD_fn { };
struct FIELD_sival_ptr { };
struct FIELD_is_ready { };
struct FIELD__xmit_lock { };
struct FIELD_bits { };
struct FIELD_ndo_do_ioctl { };
struct FIELD_sleep_max { };
struct FIELD_plist { };
struct FIELD_thaw { };
struct FIELD_is_pcie { };
struct FIELD_b_page { };
struct FIELD_state_queue { };
struct FIELD_s_errno { };
struct FIELD_addr_limit { };
struct FIELD_get_pauseparam { };
struct FIELD_broadcast { };
struct FIELD_ethtool_ops { };
struct FIELD_dqi_priv { };
struct FIELD_gsindex { };
struct FIELD_d_iname { };
struct FIELD_devicetype { };
struct FIELD_wchar { };
struct FIELD_b_cpnext { };
struct FIELD_rsp { };
struct FIELD_get_eeprom { };
struct FIELD_real_cred { };
struct FIELD_i_acl { };
struct FIELD_msi_enabled { };
struct FIELD_show_stats { };
struct FIELD_get_regs_len { };
struct FIELD_b { };
struct FIELD_nohdr { };
struct FIELD_setattr { };
struct FIELD_freeze_noirq { };
struct FIELD__mapcount { };
struct FIELD_ip_summed { };
struct FIELD_default_intensity { };
struct FIELD_j_wbuf { };
struct FIELD_reg_num_mask { };
struct FIELD_i_op { };
struct FIELD_rb_parent_color { };
struct FIELD_debugreg2 { };
struct FIELD_rb_right { };
struct FIELD_perf_event_ctxp { };
struct FIELD_rx_queue { };
struct FIELD_wait_list { };
struct FIELD_bd_holder_list { };
struct FIELD_result { };
struct FIELD_bridge { };
struct FIELD_sp { };
struct FIELD_j_running_transaction { };
struct FIELD_queue_mapping { };
struct FIELD_ndo_select_queue { };
struct FIELD_i_devices { };
struct FIELD_arg { };
struct FIELD_qdisc_sleeping { };
struct FIELD_fcoe_ddp_xid { };
struct FIELD_h_blocktype { };
struct FIELD_raw { };
struct FIELD_write_inode { };
struct FIELD_s_sequence { };
struct FIELD_kref { };
struct FIELD_static_prio { };
struct FIELD_slab { };
struct FIELD_hdr_len { };
struct FIELD_addr_len { };
struct FIELD_j_commit_interval { };
struct FIELD_sync_page { };
struct FIELD_replacement_session_keyring { };
struct FIELD_ktype { };
struct FIELD_callback { };
struct FIELD_get_flags { };
struct FIELD_self { };
struct FIELD_s_max_transaction { };
struct FIELD_set_settings { };
struct FIELD_hdr_type { };
struct FIELD_phy_uid_mask { };
struct FIELD_set_rxnfc { };
struct FIELD_i_pipe { };
struct FIELD_get_parent { };
struct FIELD_nr_partial { };
struct FIELD_rtort_free { };
struct FIELD_xip { };
struct FIELD_io_bitmap_max { };
struct FIELD_d_hash { };
struct FIELD_begin { };
struct FIELD_id_table { };
struct FIELD_i_state { };
struct FIELD_expires { };
struct FIELD_mark_dirty { };
struct FIELD_set_ringparam { };
struct FIELD_comm { };
struct FIELD_b_cp_transaction { };
struct FIELD_b_blocknr { };
struct FIELD_i_count { };
struct FIELD_device { };
struct FIELD_rcu { };
struct FIELD_i_alloc_sem { };
struct FIELD_pages { };
struct FIELD_get_ethtool_stats { };
struct FIELD_j_fs_dev { };
struct FIELD_si_code { };
struct FIELD_j_head { };
struct FIELD_st_shndx { };
struct FIELD_rom_attr { };
struct FIELD_trans_start { };
struct FIELD_sessionid { };
struct FIELD_ftrace_timestamp { };
struct FIELD_sum_sleep_runtime { };
struct FIELD_b_next_transaction { };
struct FIELD_ctl_name { };
struct FIELD_destroy_inode { };
struct FIELD_link { };
struct FIELD_rtort_mbtest { };
struct FIELD_j_wait_transaction_locked { };
struct FIELD_tx_global_lock { };
struct FIELD_header_ops { };
struct FIELD_tracing_graph_pause { };
struct FIELD_quota_sync { };
struct FIELD_vruntime { };
struct FIELD_prio { };
struct FIELD_prio_list { };
struct FIELD_probe { };
struct FIELD_s_vfs_rename_mutex { };
struct FIELD_padded { };
struct FIELD_s_subtype { };
struct FIELD_poweroff { };
struct FIELD_threadfn { };
struct FIELD_s_mode { };
struct FIELD_remount_fs { };
struct FIELD_ret_stack { };
struct FIELD_priv { };
struct FIELD_slot { };
struct FIELD_wireless_handlers { };
struct FIELD_pause { };
struct FIELD_release_dquot { };
struct FIELD_acct_rss_mem1 { };
struct FIELD_should_wakeup { };
struct FIELD_j_checkpoint_transactions { };
struct FIELD_res_attr { };
struct FIELD_st_info { };
struct FIELD_b_frozen_triggers { };
struct FIELD_state { };
struct FIELD_err_handler { };
struct FIELD_error_remove_page { };
struct FIELD_j_wait_done_commit { };
struct FIELD_exit_state { };
struct FIELD_power_state { };
struct FIELD_j_flags { };
struct FIELD_fasync { };
struct FIELD___val { };
struct FIELD_personality { };
struct FIELD_d_name { };
struct FIELD_runtime_idle { };
struct FIELD_rx_packets { };
struct FIELD_kick_battery { };
struct FIELD_compat_ioctl { };
struct FIELD_acquire_dquot { };
struct FIELD_class_ele { };
struct FIELD_pprev { };
struct FIELD_read_otherend_details { };
struct FIELD_s_inodes { };
struct FIELD_autoneg { };
struct FIELD_max_intensity { };
struct FIELD_perf_event_mutex { };
struct FIELD_get_sb { };
struct FIELD_freeze_fs { };
struct FIELD_needed_headroom { };
struct FIELD_b_data { };
struct FIELD_seccomp { };
struct FIELD_dirtied_when { };
struct FIELD_i_blkbits { };
struct FIELD_otherend { };
struct FIELD_secondary { };
struct FIELD_splice_write { };
struct FIELD_wait_sum { };
struct FIELD_sas_ss_sp { };
struct FIELD_resource { };
struct FIELD_i_atime { };
struct FIELD_usersp { };
struct FIELD_run_list { };
struct FIELD_remove { };
struct FIELD_iret_handler { };
struct FIELD_supports_gmii { };
struct FIELD_base1 { };
struct FIELD_todo_list { };
struct FIELD_n_node { };
struct FIELD_otherend_id { };
struct FIELD_rx_errors { };
struct FIELD_statfs { };
struct FIELD_release { };
struct FIELD_x { };
struct FIELD_wireless_data { };
struct FIELD_rchar { };
struct FIELD_self_exec_id { };
struct FIELD_perm_addr { };
struct FIELD_suppress_bind_attrs { };
struct FIELD_backing_dev_info { };
struct FIELD_set { };
struct FIELD_state_in_sysfs { };
struct FIELD_ndo_vlan_rx_register { };
struct FIELD_backtrace { };
struct FIELD_freeze { };
struct FIELD_release_rsv { };
struct FIELD_csum_offset { };
struct FIELD_i_ctime { };
struct FIELD_init_name { };
struct FIELD_llseek { };
struct FIELD_set_rx_csum { };
struct FIELD_sem { };
struct FIELD_state_remove_uevent_sent { };
struct FIELD_irqaction { };
struct FIELD_sas_ss_size { };
struct FIELD_rb_left { };
struct FIELD_stats { };
struct FIELD_phy_id_mask { };
struct FIELD_i_default_acl { };
struct FIELD_irq { };
struct FIELD_unfreeze_fs { };
struct FIELD_ax25_ptr { };
struct FIELD_ndo_poll_controller { };
struct FIELD_ndo_tx_timeout { };
struct FIELD_btrace_seq { };
struct FIELD_st_size { };
struct FIELD_s_mtd { };
struct FIELD_blocked { };
struct FIELD_return_stack_size { };
struct FIELD_legacy_io { };
struct FIELD_promiscuity { };
struct FIELD_io_bitmap_ptr { };
struct FIELD_parent { };
struct FIELD_i_uid { };
struct FIELD_set_pauseparam { };
struct FIELD_i_mmap_writable { };
struct FIELD_write_begin { };
struct FIELD_time_slice { };
struct FIELD_stack_canary { };
struct FIELD_poll_lock { };
struct FIELD_dqi_fmt_id { };
struct FIELD_stime { };
struct FIELD_key { };
struct FIELD_interface { };
struct FIELD_ndo_change_rx_flags { };
struct FIELD_xflags { };
struct FIELD_dqonoff_mutex { };
struct FIELD_prev_utime { };
struct FIELD_lock_depth { };
struct FIELD_msi_list { };
struct FIELD_i_generation { };
struct FIELD_dqi_flags { };
struct FIELD_readpages { };
struct FIELD_disable_depth { };
struct FIELD_deferred_resume { };
struct FIELD_loginuid { };
struct FIELD_real_num_tx_queues { };
struct FIELD_is_physfn { };
struct FIELD_j_average_commit_time { };
struct FIELD_perf_event_list { };
struct FIELD_a_count { };
struct FIELD_s_root { };
struct FIELD_wakeup_prepared { };
struct FIELD_i_mmap { };
struct FIELD_nr_forced_migrations { };
struct FIELD_clear_inode { };
struct FIELD_garp_port { };
struct FIELD_load { };
struct FIELD_cfs_rq { };
struct FIELD_prio_tree_node { };
struct FIELD_free_inode { };
struct FIELD_if_port { };
struct FIELD_d_flags { };
struct FIELD_cb { };
struct FIELD_nr_wakeups_local { };
struct FIELD_pos { };
struct FIELD_height { };
struct FIELD_mempolicy { };
struct FIELD_gro_list { };
struct FIELD_written { };
struct FIELD_latency_record { };
struct FIELD_shutdown { };
struct FIELD_mc_count { };
struct FIELD_idle_notification { };
struct FIELD_slots { };
struct FIELD_poll { };
struct FIELD_ptraced { };
struct FIELD_j_wait_checkpoint { };
struct FIELD_ip6_ptr { };
struct FIELD_s_bdi { };
struct FIELD_stimescaled { };
struct FIELD_pin { };
struct FIELD_b_tprev { };
struct FIELD_is_hotplug_bridge { };
struct FIELD_tgid { };
struct FIELD_s_start { };
struct FIELD_create { };
struct FIELD_i_nlink { };
struct FIELD_needed_tailroom { };
struct FIELD_destructor { };
struct FIELD_get_rxnfc { };
struct FIELD_get_priv_flags { };
struct FIELD_mems_allowed { };
struct FIELD_i_private { };
struct FIELD_s_lock_key { };
struct FIELD_total_link_count { };
struct FIELD_wait { };
struct FIELD_fs_supers { };
struct FIELD_self_test_count { };
struct FIELD_pm { };
struct FIELD_dma_ops { };
struct FIELD_limit0 { };
struct FIELD_dma_pools { };
struct FIELD_il_next { };
struct FIELD_real_parent { };
struct FIELD_nr_wakeups_affine_attempts { };
struct FIELD_interrupts { };
struct FIELD_dynids { };
struct FIELD_get_strings { };
struct FIELD_phy_uid { };
struct FIELD_check_acl { };
struct FIELD_d_subdirs { };
struct FIELD_j_state_lock { };
struct FIELD_allocflags { };
struct FIELD_func { };
struct FIELD_child { };
struct FIELD_invalidatepage { };
struct FIELD_i_version { };
struct FIELD_b_private { };
struct FIELD_otherend_changed { };
struct FIELD_block_ucfg_access { };
struct FIELD_s_padding { };
struct FIELD_legacy_mem { };
struct FIELD_write_bytes { };
struct FIELD_unlocked_ioctl { };
struct FIELD_alloc_inode { };
struct FIELD_n_ref { };
struct FIELD_get_coalesce { };
struct FIELD_s_flags { };
struct FIELD_b_count { };
struct FIELD_align { };
struct FIELD_set_sg { };
struct FIELD_read_bytes { };
struct FIELD_nf_trace { };
struct FIELD_ds_ctx { };
struct FIELD_nr_wakeups { };
struct FIELD_d_parent { };
struct FIELD_s_count { };
struct FIELD_bd_openers { };
struct FIELD_j_sb_buffer { };
struct FIELD_error { };
struct FIELD_bd_private { };
struct FIELD_enable_cnt { };
struct FIELD_ignore_children { };
struct FIELD_rename { };
struct FIELD_dev_id { };
struct FIELD_on_rq { };
struct FIELD_st_other { };
struct FIELD_pdeath_signal { };
struct FIELD_reg_state { };
struct FIELD_seg { };
struct FIELD_cgroups { };
struct FIELD_devres_lock { };
struct FIELD_napi_list { };
struct FIELD_is_added { };
struct FIELD_bd_part_count { };
struct FIELD_freelist { };
struct FIELD_cancelled_write_bytes { };
struct FIELD_n_klist { };
struct FIELD_id { };
struct FIELD_cfg_size { };
struct FIELD_ndo_fcoe_disable { };
struct FIELD_j_commit_timer { };
struct FIELD_write_dquot { };
struct FIELD_base_addr { };
struct FIELD_is_partially_uptodate { };
struct FIELD_tx_carrier_errors { };
struct FIELD_br_port { };
struct FIELD_poweroff_noirq { };
struct FIELD_s { };
struct FIELD_node_list { };
struct FIELD_b_cpprev { };
struct FIELD_cpu_timers { };
struct FIELD_rsp_cons { };
struct FIELD_b_end_io { };
struct FIELD_min_partial { };
struct FIELD_i_mutex_key { };
struct FIELD_acct_timexpd { };
struct FIELD_i_data { };
struct FIELD_restore_noirq { };
struct FIELD_can_wakeup { };
struct FIELD_events { };
struct FIELD_cs { };
struct FIELD_setxattr { };
struct FIELD_status { };
struct FIELD_s_feature_compat { };
struct FIELD_compat_robust_list { };
struct FIELD_watchdog_timeo { };
struct FIELD_nodename { };
struct FIELD_io_context { };
struct FIELD_s_dirt { };
struct FIELD_runtime_resume { };
struct FIELD_rom_base_reg { };
struct FIELD_list_lock { };
struct FIELD_nvcsw { };
struct FIELD_start_runtime { };
struct FIELD_avg_overlap { };
struct FIELD_j_free { };
struct FIELD_pme_support { };
struct FIELD_tx_bytes { };
struct FIELD_watchdog_timer { };
struct FIELD_free_space { };
struct FIELD_ndo_validate_addr { };
struct FIELD_follow_link { };
struct FIELD_task { };
struct FIELD_get_wol { };
struct FIELD_nfctinfo { };
struct FIELD_inuse { };
struct FIELD_s_frozen { };
struct FIELD_min { };
struct FIELD_write_super { };
struct FIELD_ndo_change_mtu { };
struct FIELD_flags { };
struct FIELD_aio_fsync { };
struct FIELD_entry { };
struct FIELD_dn_ptr { };
struct FIELD_i_sb { };
struct FIELD_check_flags { };
struct FIELD_dsa_ptr { };
struct FIELD_restore { };
struct FIELD_return_address_stack { };
struct FIELD_protocol { };
struct FIELD_bd_dev { };
struct FIELD_npinfo { };
struct FIELD_private_data { };
struct FIELD_i_size { };
struct FIELD_tasks { };
struct FIELD_alloc_lock { };
struct FIELD_adjust_link { };
struct FIELD_speed { };
struct FIELD_my_q { };
struct FIELD_s_dynsuper { };
struct FIELD_msix_enabled { };
struct FIELD_last_switch_count { };
struct FIELD_did_interrupt { };
struct FIELD_s_fs_info { };
struct FIELD_s_qcop { };
struct FIELD_dqi_format { };
struct FIELD_j_blk_offset { };
struct FIELD_mmap { };
struct FIELD_saved_sigmask { };
struct FIELD_j_task { };
struct FIELD_dev_addrs { };
struct FIELD_syscr { };
struct FIELD_set_flags { };
struct FIELD_skb { };
struct FIELD_usage { };
struct FIELD_lookup { };
struct FIELD_gs { };
struct FIELD_get_xip_mem { };
struct FIELD_get_settings { };
struct FIELD_needs_freset { };
struct FIELD_rom_attr_enabled { };
struct FIELD_i_mode { };
struct FIELD_vendor { };
struct FIELD_ops { };
struct FIELD_read { };
struct FIELD_bio_list { };
struct FIELD_i_cdev { };
struct FIELD_nr_wakeups_passive { };
struct FIELD_period { };
struct FIELD_nr_slabs { };
struct FIELD_bio_tail { };
struct FIELD_writepages { };
struct FIELD_acct_vm_mem1 { };
struct FIELD_cputime_expires { };
struct FIELD_destroy_dquot { };
struct FIELD_cg_list { };
struct FIELD_num_tx_queues { };
struct FIELD_peeked { };
struct FIELD_knode_class { };
struct FIELD_get_drvinfo { };
struct FIELD_d { };
struct FIELD_launder_page { };
struct FIELD_xsp { };
struct FIELD_wait_queue { };
struct FIELD_fsync { };
struct FIELD_tx_errors { };
struct FIELD_tv64 { };
struct FIELD_signal { };
struct FIELD_csum_start { };
struct FIELD_e_perm { };
struct FIELD_h_sequence { };
struct FIELD_get_name { };
struct FIELD_tx_fifo_errors { };
struct FIELD_avg_wakeup { };
struct FIELD_bd_part { };
struct FIELD_i_sb_list { };
struct FIELD_dqi_bgrace { };
struct FIELD_rt_rq { };
struct FIELD_journal_info { };
struct FIELD_gflags { };
struct FIELD_i_fsnotify_mask { };
struct FIELD_config_init { };
struct FIELD_bd_inodes { };
struct FIELD_slice_max { };
struct FIELD_back { };
struct FIELD_readdir { };
struct FIELD_readpage { };
struct FIELD_j_commit_request { };
struct FIELD_j_format_version { };
struct FIELD_utimescaled { };
struct FIELD_exec_start { };
struct FIELD_rx_over_errors { };
struct FIELD_tc_index { };
struct FIELD_flush { };
struct FIELD_debugctlmsr { };
struct FIELD_s_xattr { };
struct FIELD_i_lock_key { };
struct FIELD_i_dentry { };
struct FIELD_set_xquota { };
struct FIELD_b_this_page { };
struct FIELD_s_header { };
struct FIELD_suspend_late { };
struct FIELD_inotify_watches { };
struct FIELD_j_wait_logspace { };
struct FIELD_s_id { };
struct FIELD_set_bl_intensity { };
struct FIELD_audit_context { };
struct FIELD_fh_to_dentry { };
struct FIELD_setlease { };
struct FIELD_pcount { };
struct FIELD_raw_lock { };
struct FIELD_child_count { };
struct FIELD_pi_lock { };
struct FIELD_pattern { };
struct FIELD_ndo_set_config { };
struct FIELD_tx_packets { };
struct FIELD_j_superblock { };
struct FIELD_tx_dropped { };
struct FIELD_b_modified { };
struct FIELD_ndo_fcoe_ddp_setup { };
struct FIELD_power { };
struct FIELD_quota_on { };
struct FIELD_poll_owner { };
struct FIELD_s_max_trans_data { };
struct FIELD_sival_int { };
struct FIELD_symlink { };
struct FIELD_tree_lock { };
struct FIELD_host { };
struct FIELD_offset { };
struct FIELD_suspend_noirq { };
struct FIELD_rx_crc_errors { };
struct FIELD_phy_id { };
struct FIELD_oo { };
struct FIELD_dirties { };
struct FIELD_sysdata { };
struct FIELD_get_reserved_space { };
struct FIELD_curr_ret_stack { };
struct FIELD_futex { };
struct FIELD_pi_waiters { };
struct FIELD_ids { };
struct FIELD_write_info { };
struct FIELD_suspend_timer { };
struct FIELD_maxlen { };
struct FIELD_allmulti { };
struct FIELD_coherent_dma_mask { };
struct FIELD_asym_pause { };
struct FIELD_is_managed { };
struct FIELD_readlink { };
struct FIELD_permission { };
struct FIELD_truncate_count { };
struct FIELD_ptrace_message { };
struct FIELD_getattr { };
struct FIELD_secmark { };
struct FIELD_link_timeout { };
struct FIELD_dma_mem { };
struct FIELD_down { };
struct FIELD_i_alloc_sem_key { };
struct FIELD_first_page { };
struct FIELD_resume_early { };
struct FIELD_d2_support { };
struct FIELD__skb_dst { };
struct FIELD_slot_reset { };
struct FIELD_b_jlist { };
struct FIELD_mdio_read { };
struct FIELD_did_exec { };
struct FIELD_get_rx_csum { };
struct FIELD_j_wait_commit { };
struct FIELD_ndo_open { };
struct FIELD_rx_compressed { };
struct FIELD_prepare { };
struct FIELD_s_maxlen { };
struct FIELD_max_segment_size { };
struct FIELD_kset { };
struct FIELD_removexattr { };
struct FIELD_full_duplex { };
struct FIELD_irq_disable { };
struct FIELD_j_revoke_lock { };
struct FIELD_robust_list { };
struct FIELD_set_tso { };
struct FIELD_start { };
struct FIELD_j_wait_updates { };
struct FIELD_b_transaction { };
struct FIELD_rmdir { };
struct FIELD_usage_count { };
struct FIELD_slock { };
struct FIELD_nr_cpus_allowed { };
struct FIELD_reserve_space { };
struct FIELD_j_revoke { };
struct FIELD_arg2 { };
struct FIELD_i_blocks { };
struct FIELD_runtime_status { };
struct FIELD_function { };
struct FIELD_wait_count { };
struct FIELD_head { };
struct FIELD_arg3 { };
struct FIELD_complete { };
struct FIELD_s_feature_ro_compat { };
struct FIELD_bus { };
struct FIELD_refcount { };
struct FIELD_current_state { };
struct FIELD_b_jcount { };
struct FIELD_cloned { };
struct FIELD_base2 { };
struct FIELD_dev_addr { };
struct FIELD_j_dev { };
struct FIELD_get_tso { };
struct FIELD_ptrace { };
struct FIELD_d_fsdata { };
struct FIELD_sysvsem { };
struct FIELD_syscw { };
struct FIELD_inotify_mutex { };
struct FIELD_start_site { };
struct FIELD_priv_flags { };
struct FIELD_j_tail { };
struct FIELD_reset { };
struct FIELD_dma { };
struct FIELD_stack { };
struct FIELD_iowait_sum { };
struct FIELD_j_first { };
struct FIELD_restart_block { };
struct FIELD_debugreg0 { };
struct FIELD_devices { };
struct FIELD_mtu { };
struct FIELD_s_first { };
struct FIELD_i_flags { };
struct FIELD_rnode { };
struct FIELD_limit { };
struct FIELD_set_child_tid { };
struct FIELD_group_node { };
struct FIELD_i_dquot { };
struct FIELD_drop_inode { };
struct FIELD_uc { };
struct FIELD_d1_support { };
struct FIELD_s_files { };
struct FIELD_private_list { };
struct FIELD_b_state { };
struct FIELD_uc_promisc { };
struct FIELD_devfn { };
struct FIELD_request { };
struct FIELD_put_super { };
struct FIELD_pid { };
struct FIELD_ndo_vlan_rx_add_vid { };
struct FIELD_sibling { };
struct FIELD_ieee80211_ptr { };
struct FIELD_alloc_space { };
struct FIELD_pm_cap { };
struct FIELD_trace { };
struct FIELD_hard_header_len { };
struct FIELD_ndo_vlan_rx_kill_vid { };
struct FIELD_tv_sec { };
struct FIELD_s_security { };
struct FIELD_tx_aborted_errors { };
struct FIELD_fiemap { };
struct FIELD_s_bdev { };
struct FIELD_config_intr { };
struct FIELD_run_node { };
struct FIELD_bus_flags { };
struct FIELD_s_nr_dentry_unused { };
struct FIELD_j_revoke_table { };
struct FIELD_mutex_acquired { };
struct FIELD_scm_work_list { };
struct FIELD_kill_sb { };
struct FIELD_request_pending { };
struct FIELD_extra1 { };
struct FIELD_extra2 { };
struct FIELD_setting { };
struct FIELD_bmap { };
struct FIELD_es { };
struct FIELD_mod_name { };
struct FIELD_block_start { };
struct FIELD_j_list_lock { };
struct FIELD_preempt_notifiers { };
struct FIELD_j_barrier_count { };
struct FIELD_revision { };
struct FIELD_node { };
struct FIELD_active_mm { };
struct FIELD_bd_inode { };
struct FIELD_users { };
struct FIELD_truncate { };
struct FIELD_j_last_sync_writer { };
struct FIELD_cpuset_mem_spread_rotor { };
struct FIELD_set_xstate { };
struct FIELD_time { };
struct FIELD_sched_info { };
struct FIELD_s_maxbytes { };
struct FIELD_ec_ptr { };
struct FIELD_irq_reroute_variant { };
struct FIELD_transport_header { };
struct FIELD_s_lock { };
struct FIELD_get_msglevel { };
struct FIELD_remote_node_defrag_ratio { };
struct FIELD_iflink { };
struct FIELD_undo_list { };
struct FIELD_fs_flags { };
struct FIELD__count { };
struct FIELD_qdisc { };
struct FIELD_nr_wakeups_sync { };
struct FIELD_preempt_count { };
struct FIELD_b_size { };
struct FIELD_j_inode { };
struct FIELD_rt_priority { };
struct FIELD_saved_config_space { };
struct FIELD_rx_fifo_errors { };
struct FIELD_pushable_tasks { };
struct FIELD_bridge_ctl { };
struct FIELD_prev_stime { };
struct FIELD_sleep_start { };
struct FIELD_set_info { };
struct FIELD_phy_map { };
struct FIELD_mem_end { };
struct FIELD_gfp_mask { };
struct FIELD_cpu { };
struct FIELD_get_sg { };
template <bool I>
struct alias_dispatch<I, struct sched_info> {
    enum { TYPE_SIZE = sizeof(struct sched_info) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct sched_info *struct_addr_(((struct sched_info *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct sched_info, FIELD_pcount>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct sched_info, FIELD_run_delay>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct sched_info, FIELD_last_arrival>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct sched_info, FIELD_last_queued>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
            watch_read<struct sched_info, FIELD_bkl_count>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct sched_info *struct_addr_(((struct sched_info *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct sched_info, FIELD_pcount>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct sched_info, FIELD_run_delay>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct sched_info, FIELD_last_arrival>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct sched_info, FIELD_last_queued>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
            watch_write<struct sched_info, FIELD_bkl_count>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, rwlock_t> {
    enum { TYPE_SIZE = sizeof(rwlock_t) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        rwlock_t *struct_addr_(((rwlock_t *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<rwlock_t, FIELD_raw_lock>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        rwlock_t *struct_addr_(((rwlock_t *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<rwlock_t, FIELD_raw_lock>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct restart_block> {
    enum { TYPE_SIZE = sizeof(struct restart_block) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct restart_block *struct_addr_(((struct restart_block *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct restart_block, FIELD_fn>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct restart_block, FIELD_futex>::on(entry_, struct_addr_);
            watch_read<struct restart_block, FIELD_arg0>::on(entry_, struct_addr_);
            watch_read<struct restart_block, FIELD_nanosleep>::on(entry_, struct_addr_);
            watch_read<struct restart_block, FIELD_poll>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct restart_block, FIELD_futex>::on(entry_, struct_addr_);
            watch_read<struct restart_block, FIELD_nanosleep>::on(entry_, struct_addr_);
            watch_read<struct restart_block, FIELD_poll>::on(entry_, struct_addr_);
            watch_read<struct restart_block, FIELD_arg1>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct restart_block, FIELD_futex>::on(entry_, struct_addr_);
            watch_read<struct restart_block, FIELD_nanosleep>::on(entry_, struct_addr_);
            watch_read<struct restart_block, FIELD_poll>::on(entry_, struct_addr_);
            watch_read<struct restart_block, FIELD_arg2>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct restart_block, FIELD_futex>::on(entry_, struct_addr_);
            watch_read<struct restart_block, FIELD_nanosleep>::on(entry_, struct_addr_);
            watch_read<struct restart_block, FIELD_poll>::on(entry_, struct_addr_);
            watch_read<struct restart_block, FIELD_arg3>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct restart_block, FIELD_futex>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct restart_block *struct_addr_(((struct restart_block *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct restart_block, FIELD_fn>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct restart_block, FIELD_futex>::on(entry_, struct_addr_, val_);
            watch_write<struct restart_block, FIELD_arg0>::on(entry_, struct_addr_, val_);
            watch_write<struct restart_block, FIELD_nanosleep>::on(entry_, struct_addr_, val_);
            watch_write<struct restart_block, FIELD_poll>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct restart_block, FIELD_futex>::on(entry_, struct_addr_, val_);
            watch_write<struct restart_block, FIELD_nanosleep>::on(entry_, struct_addr_, val_);
            watch_write<struct restart_block, FIELD_poll>::on(entry_, struct_addr_, val_);
            watch_write<struct restart_block, FIELD_arg1>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct restart_block, FIELD_futex>::on(entry_, struct_addr_, val_);
            watch_write<struct restart_block, FIELD_nanosleep>::on(entry_, struct_addr_, val_);
            watch_write<struct restart_block, FIELD_poll>::on(entry_, struct_addr_, val_);
            watch_write<struct restart_block, FIELD_arg2>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct restart_block, FIELD_futex>::on(entry_, struct_addr_, val_);
            watch_write<struct restart_block, FIELD_nanosleep>::on(entry_, struct_addr_, val_);
            watch_write<struct restart_block, FIELD_poll>::on(entry_, struct_addr_, val_);
            watch_write<struct restart_block, FIELD_arg3>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct restart_block, FIELD_futex>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct task_cputime> {
    enum { TYPE_SIZE = sizeof(struct task_cputime) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct task_cputime *struct_addr_(((struct task_cputime *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct task_cputime, FIELD_utime>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct task_cputime, FIELD_stime>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct task_cputime, FIELD_sum_exec_runtime>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct task_cputime *struct_addr_(((struct task_cputime *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct task_cputime, FIELD_utime>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct task_cputime, FIELD_stime>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct task_cputime, FIELD_sum_exec_runtime>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct phy_fixup> {
    enum { TYPE_SIZE = sizeof(struct phy_fixup) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct phy_fixup *struct_addr_(((struct phy_fixup *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct phy_fixup, FIELD_list>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
            watch_read<struct phy_fixup, FIELD_bus_id>::on(entry_, struct_addr_);
            break;
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct phy_fixup, FIELD_phy_uid>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
            watch_read<struct phy_fixup, FIELD_phy_uid_mask>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct phy_fixup, FIELD_run>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct phy_fixup *struct_addr_(((struct phy_fixup *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct phy_fixup, FIELD_list>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
            watch_write<struct phy_fixup, FIELD_bus_id>::on(entry_, struct_addr_, val_);
            break;
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct phy_fixup, FIELD_phy_uid>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
            watch_write<struct phy_fixup, FIELD_phy_uid_mask>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct phy_fixup, FIELD_run>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct radix_tree_root> {
    enum { TYPE_SIZE = sizeof(struct radix_tree_root) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct radix_tree_root *struct_addr_(((struct radix_tree_root *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct radix_tree_root, FIELD_height>::on(entry_, struct_addr_);
            break;
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct radix_tree_root, FIELD_gfp_mask>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct radix_tree_root, FIELD_rnode>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct radix_tree_root *struct_addr_(((struct radix_tree_root *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct radix_tree_root, FIELD_height>::on(entry_, struct_addr_, val_);
            break;
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct radix_tree_root, FIELD_gfp_mask>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct radix_tree_root, FIELD_rnode>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct generic_type> {
    enum { TYPE_SIZE = sizeof(struct generic_type) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct generic_type *struct_addr_(((struct generic_type *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct generic_type, FIELD_type>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_read<struct generic_type, FIELD_mode>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct generic_type *struct_addr_(((struct generic_type *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct generic_type, FIELD_type>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_write<struct generic_type, FIELD_mode>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct page> {
    enum { TYPE_SIZE = sizeof(struct page) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct page *struct_addr_(((struct page *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct page, FIELD_flags>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_read<struct page, FIELD__count>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct page, FIELD_mapping>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct page, FIELD_lru>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct page *struct_addr_(((struct page *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct page, FIELD_flags>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_write<struct page, FIELD__count>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct page, FIELD_mapping>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct page, FIELD_lru>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, atomic64_t> {
    enum { TYPE_SIZE = sizeof(atomic64_t) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        atomic64_t *struct_addr_(((atomic64_t *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<atomic64_t, FIELD_counter>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        atomic64_t *struct_addr_(((atomic64_t *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<atomic64_t, FIELD_counter>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct netdev_hw_addr_list> {
    enum { TYPE_SIZE = sizeof(struct netdev_hw_addr_list) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct netdev_hw_addr_list *struct_addr_(((struct netdev_hw_addr_list *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct netdev_hw_addr_list, FIELD_list>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
            watch_read<struct netdev_hw_addr_list, FIELD_count>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct netdev_hw_addr_list *struct_addr_(((struct netdev_hw_addr_list *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct netdev_hw_addr_list, FIELD_list>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
            watch_write<struct netdev_hw_addr_list, FIELD_count>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct firmware> {
    enum { TYPE_SIZE = sizeof(struct firmware) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct firmware *struct_addr_(((struct firmware *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct firmware, FIELD_size>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct firmware, FIELD_data>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct firmware, FIELD_pages>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct firmware *struct_addr_(((struct firmware *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct firmware, FIELD_size>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct firmware, FIELD_data>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct firmware, FIELD_pages>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct xattr_handler> {
    enum { TYPE_SIZE = sizeof(struct xattr_handler) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct xattr_handler *struct_addr_(((struct xattr_handler *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct xattr_handler, FIELD_prefix>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct xattr_handler, FIELD_list>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct xattr_handler, FIELD_get>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct xattr_handler, FIELD_set>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct xattr_handler *struct_addr_(((struct xattr_handler *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct xattr_handler, FIELD_prefix>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct xattr_handler, FIELD_list>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct xattr_handler, FIELD_get>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct xattr_handler, FIELD_set>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct timer_list> {
    enum { TYPE_SIZE = sizeof(struct timer_list) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct timer_list *struct_addr_(((struct timer_list *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct timer_list, FIELD_entry>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct timer_list, FIELD_expires>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct timer_list, FIELD_function>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct timer_list, FIELD_data>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct timer_list, FIELD_base>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct timer_list, FIELD_start_site>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct timer_list, FIELD_start_comm>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
            watch_read<struct timer_list, FIELD_start_pid>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct timer_list *struct_addr_(((struct timer_list *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct timer_list, FIELD_entry>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct timer_list, FIELD_expires>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct timer_list, FIELD_function>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct timer_list, FIELD_data>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct timer_list, FIELD_base>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct timer_list, FIELD_start_site>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct timer_list, FIELD_start_comm>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
            watch_write<struct timer_list, FIELD_start_pid>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct super_block> {
    enum { TYPE_SIZE = sizeof(struct super_block) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct super_block *struct_addr_(((struct super_block *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct super_block, FIELD_s_list>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct super_block, FIELD_s_dev>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct super_block, FIELD_s_blocksize>::on(entry_, struct_addr_);
            break;
        case 32: 
            watch_read<struct super_block, FIELD_s_blocksize_bits>::on(entry_, struct_addr_);
            break;
        case 33: 
            watch_read<struct super_block, FIELD_s_dirt>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct super_block, FIELD_s_maxbytes>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct super_block, FIELD_s_type>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct super_block, FIELD_s_op>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct super_block, FIELD_dq_op>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct super_block, FIELD_s_qcop>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct super_block, FIELD_s_export_op>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct super_block, FIELD_s_flags>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_read<struct super_block, FIELD_s_magic>::on(entry_, struct_addr_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_read<struct super_block, FIELD_s_root>::on(entry_, struct_addr_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_read<struct super_block, FIELD_s_umount>::on(entry_, struct_addr_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
            watch_read<struct super_block, FIELD_s_lock>::on(entry_, struct_addr_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
            watch_read<struct super_block, FIELD_s_count>::on(entry_, struct_addr_);
            break;
        case 180: 
        case 181: 
        case 182: 
        case 183: 
            watch_read<struct super_block, FIELD_s_need_sync>::on(entry_, struct_addr_);
            break;
        case 184: 
        case 185: 
        case 186: 
        case 187: 
            watch_read<struct super_block, FIELD_s_active>::on(entry_, struct_addr_);
            break;
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
            watch_read<struct super_block, FIELD_s_security>::on(entry_, struct_addr_);
            break;
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
            watch_read<struct super_block, FIELD_s_xattr>::on(entry_, struct_addr_);
            break;
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
            watch_read<struct super_block, FIELD_s_inodes>::on(entry_, struct_addr_);
            break;
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
            watch_read<struct super_block, FIELD_s_anon>::on(entry_, struct_addr_);
            break;
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
            watch_read<struct super_block, FIELD_s_files>::on(entry_, struct_addr_);
            break;
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
            watch_read<struct super_block, FIELD_s_dentry_lru>::on(entry_, struct_addr_);
            break;
        case 264: 
        case 265: 
        case 266: 
        case 267: 
            watch_read<struct super_block, FIELD_s_nr_dentry_unused>::on(entry_, struct_addr_);
            break;
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
            watch_read<struct super_block, FIELD_s_bdev>::on(entry_, struct_addr_);
            break;
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
            watch_read<struct super_block, FIELD_s_bdi>::on(entry_, struct_addr_);
            break;
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
            watch_read<struct super_block, FIELD_s_mtd>::on(entry_, struct_addr_);
            break;
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
            watch_read<struct super_block, FIELD_s_instances>::on(entry_, struct_addr_);
            break;
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
        case 528: 
        case 529: 
        case 530: 
        case 531: 
        case 532: 
        case 533: 
        case 534: 
        case 535: 
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
        case 544: 
        case 545: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
        case 552: 
        case 553: 
        case 554: 
        case 555: 
        case 556: 
        case 557: 
        case 558: 
        case 559: 
        case 560: 
        case 561: 
        case 562: 
        case 563: 
        case 564: 
        case 565: 
        case 566: 
        case 567: 
        case 568: 
        case 569: 
        case 570: 
        case 571: 
        case 572: 
        case 573: 
        case 574: 
        case 575: 
        case 576: 
        case 577: 
        case 578: 
        case 579: 
        case 580: 
        case 581: 
        case 582: 
        case 583: 
        case 584: 
        case 585: 
        case 586: 
        case 587: 
        case 588: 
        case 589: 
        case 590: 
        case 591: 
            watch_read<struct super_block, FIELD_s_dquot>::on(entry_, struct_addr_);
            break;
        case 592: 
        case 593: 
        case 594: 
        case 595: 
            watch_read<struct super_block, FIELD_s_frozen>::on(entry_, struct_addr_);
            break;
        case 600: 
        case 601: 
        case 602: 
        case 603: 
        case 604: 
        case 605: 
        case 606: 
        case 607: 
        case 608: 
        case 609: 
        case 610: 
        case 611: 
        case 612: 
        case 613: 
        case 614: 
        case 615: 
        case 616: 
        case 617: 
        case 618: 
        case 619: 
        case 620: 
        case 621: 
        case 622: 
        case 623: 
            watch_read<struct super_block, FIELD_s_wait_unfrozen>::on(entry_, struct_addr_);
            break;
        case 624: 
        case 625: 
        case 626: 
        case 627: 
        case 628: 
        case 629: 
        case 630: 
        case 631: 
        case 632: 
        case 633: 
        case 634: 
        case 635: 
        case 636: 
        case 637: 
        case 638: 
        case 639: 
        case 640: 
        case 641: 
        case 642: 
        case 643: 
        case 644: 
        case 645: 
        case 646: 
        case 647: 
        case 648: 
        case 649: 
        case 650: 
        case 651: 
        case 652: 
        case 653: 
        case 654: 
        case 655: 
            watch_read<struct super_block, FIELD_s_id>::on(entry_, struct_addr_);
            break;
        case 656: 
        case 657: 
        case 658: 
        case 659: 
        case 660: 
        case 661: 
        case 662: 
        case 663: 
            watch_read<struct super_block, FIELD_s_fs_info>::on(entry_, struct_addr_);
            break;
        case 664: 
        case 665: 
        case 666: 
        case 667: 
            watch_read<struct super_block, FIELD_s_mode>::on(entry_, struct_addr_);
            break;
        case 672: 
        case 673: 
        case 674: 
        case 675: 
        case 676: 
        case 677: 
        case 678: 
        case 679: 
        case 680: 
        case 681: 
        case 682: 
        case 683: 
        case 684: 
        case 685: 
        case 686: 
        case 687: 
        case 688: 
        case 689: 
        case 690: 
        case 691: 
        case 692: 
        case 693: 
        case 694: 
        case 695: 
        case 696: 
        case 697: 
        case 698: 
        case 699: 
        case 700: 
        case 701: 
        case 702: 
        case 703: 
            watch_read<struct super_block, FIELD_s_vfs_rename_mutex>::on(entry_, struct_addr_);
            break;
        case 704: 
        case 705: 
        case 706: 
        case 707: 
            watch_read<struct super_block, FIELD_s_time_gran>::on(entry_, struct_addr_);
            break;
        case 712: 
        case 713: 
        case 714: 
        case 715: 
        case 716: 
        case 717: 
        case 718: 
        case 719: 
            watch_read<struct super_block, FIELD_s_subtype>::on(entry_, struct_addr_);
            break;
        case 720: 
        case 721: 
        case 722: 
        case 723: 
        case 724: 
        case 725: 
        case 726: 
        case 727: 
            watch_read<struct super_block, FIELD_s_options>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct super_block *struct_addr_(((struct super_block *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct super_block, FIELD_s_list>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct super_block, FIELD_s_dev>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct super_block, FIELD_s_blocksize>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
            watch_write<struct super_block, FIELD_s_blocksize_bits>::on(entry_, struct_addr_, val_);
            break;
        case 33: 
            watch_write<struct super_block, FIELD_s_dirt>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct super_block, FIELD_s_maxbytes>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct super_block, FIELD_s_type>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct super_block, FIELD_s_op>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct super_block, FIELD_dq_op>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct super_block, FIELD_s_qcop>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct super_block, FIELD_s_export_op>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct super_block, FIELD_s_flags>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_write<struct super_block, FIELD_s_magic>::on(entry_, struct_addr_, val_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_write<struct super_block, FIELD_s_root>::on(entry_, struct_addr_, val_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_write<struct super_block, FIELD_s_umount>::on(entry_, struct_addr_, val_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
            watch_write<struct super_block, FIELD_s_lock>::on(entry_, struct_addr_, val_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
            watch_write<struct super_block, FIELD_s_count>::on(entry_, struct_addr_, val_);
            break;
        case 180: 
        case 181: 
        case 182: 
        case 183: 
            watch_write<struct super_block, FIELD_s_need_sync>::on(entry_, struct_addr_, val_);
            break;
        case 184: 
        case 185: 
        case 186: 
        case 187: 
            watch_write<struct super_block, FIELD_s_active>::on(entry_, struct_addr_, val_);
            break;
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
            watch_write<struct super_block, FIELD_s_security>::on(entry_, struct_addr_, val_);
            break;
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
            watch_write<struct super_block, FIELD_s_xattr>::on(entry_, struct_addr_, val_);
            break;
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
            watch_write<struct super_block, FIELD_s_inodes>::on(entry_, struct_addr_, val_);
            break;
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
            watch_write<struct super_block, FIELD_s_anon>::on(entry_, struct_addr_, val_);
            break;
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
            watch_write<struct super_block, FIELD_s_files>::on(entry_, struct_addr_, val_);
            break;
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
            watch_write<struct super_block, FIELD_s_dentry_lru>::on(entry_, struct_addr_, val_);
            break;
        case 264: 
        case 265: 
        case 266: 
        case 267: 
            watch_write<struct super_block, FIELD_s_nr_dentry_unused>::on(entry_, struct_addr_, val_);
            break;
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
            watch_write<struct super_block, FIELD_s_bdev>::on(entry_, struct_addr_, val_);
            break;
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
            watch_write<struct super_block, FIELD_s_bdi>::on(entry_, struct_addr_, val_);
            break;
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
            watch_write<struct super_block, FIELD_s_mtd>::on(entry_, struct_addr_, val_);
            break;
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
            watch_write<struct super_block, FIELD_s_instances>::on(entry_, struct_addr_, val_);
            break;
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
        case 528: 
        case 529: 
        case 530: 
        case 531: 
        case 532: 
        case 533: 
        case 534: 
        case 535: 
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
        case 544: 
        case 545: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
        case 552: 
        case 553: 
        case 554: 
        case 555: 
        case 556: 
        case 557: 
        case 558: 
        case 559: 
        case 560: 
        case 561: 
        case 562: 
        case 563: 
        case 564: 
        case 565: 
        case 566: 
        case 567: 
        case 568: 
        case 569: 
        case 570: 
        case 571: 
        case 572: 
        case 573: 
        case 574: 
        case 575: 
        case 576: 
        case 577: 
        case 578: 
        case 579: 
        case 580: 
        case 581: 
        case 582: 
        case 583: 
        case 584: 
        case 585: 
        case 586: 
        case 587: 
        case 588: 
        case 589: 
        case 590: 
        case 591: 
            watch_write<struct super_block, FIELD_s_dquot>::on(entry_, struct_addr_, val_);
            break;
        case 592: 
        case 593: 
        case 594: 
        case 595: 
            watch_write<struct super_block, FIELD_s_frozen>::on(entry_, struct_addr_, val_);
            break;
        case 600: 
        case 601: 
        case 602: 
        case 603: 
        case 604: 
        case 605: 
        case 606: 
        case 607: 
        case 608: 
        case 609: 
        case 610: 
        case 611: 
        case 612: 
        case 613: 
        case 614: 
        case 615: 
        case 616: 
        case 617: 
        case 618: 
        case 619: 
        case 620: 
        case 621: 
        case 622: 
        case 623: 
            watch_write<struct super_block, FIELD_s_wait_unfrozen>::on(entry_, struct_addr_, val_);
            break;
        case 624: 
        case 625: 
        case 626: 
        case 627: 
        case 628: 
        case 629: 
        case 630: 
        case 631: 
        case 632: 
        case 633: 
        case 634: 
        case 635: 
        case 636: 
        case 637: 
        case 638: 
        case 639: 
        case 640: 
        case 641: 
        case 642: 
        case 643: 
        case 644: 
        case 645: 
        case 646: 
        case 647: 
        case 648: 
        case 649: 
        case 650: 
        case 651: 
        case 652: 
        case 653: 
        case 654: 
        case 655: 
            watch_write<struct super_block, FIELD_s_id>::on(entry_, struct_addr_, val_);
            break;
        case 656: 
        case 657: 
        case 658: 
        case 659: 
        case 660: 
        case 661: 
        case 662: 
        case 663: 
            watch_write<struct super_block, FIELD_s_fs_info>::on(entry_, struct_addr_, val_);
            break;
        case 664: 
        case 665: 
        case 666: 
        case 667: 
            watch_write<struct super_block, FIELD_s_mode>::on(entry_, struct_addr_, val_);
            break;
        case 672: 
        case 673: 
        case 674: 
        case 675: 
        case 676: 
        case 677: 
        case 678: 
        case 679: 
        case 680: 
        case 681: 
        case 682: 
        case 683: 
        case 684: 
        case 685: 
        case 686: 
        case 687: 
        case 688: 
        case 689: 
        case 690: 
        case 691: 
        case 692: 
        case 693: 
        case 694: 
        case 695: 
        case 696: 
        case 697: 
        case 698: 
        case 699: 
        case 700: 
        case 701: 
        case 702: 
        case 703: 
            watch_write<struct super_block, FIELD_s_vfs_rename_mutex>::on(entry_, struct_addr_, val_);
            break;
        case 704: 
        case 705: 
        case 706: 
        case 707: 
            watch_write<struct super_block, FIELD_s_time_gran>::on(entry_, struct_addr_, val_);
            break;
        case 712: 
        case 713: 
        case 714: 
        case 715: 
        case 716: 
        case 717: 
        case 718: 
        case 719: 
            watch_write<struct super_block, FIELD_s_subtype>::on(entry_, struct_addr_, val_);
            break;
        case 720: 
        case 721: 
        case 722: 
        case 723: 
        case 724: 
        case 725: 
        case 726: 
        case 727: 
            watch_write<struct super_block, FIELD_s_options>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct kobject> {
    enum { TYPE_SIZE = sizeof(struct kobject) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct kobject *struct_addr_(((struct kobject *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct kobject, FIELD_name>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct kobject, FIELD_entry>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct kobject, FIELD_parent>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct kobject, FIELD_kset>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct kobject, FIELD_ktype>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct kobject, FIELD_sd>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
            watch_read<struct kobject, FIELD_kref>::on(entry_, struct_addr_);
            break;
        case 60: 
            watch_read<struct kobject, FIELD_state_initialized>::on(entry_, struct_addr_);
            watch_read<struct kobject, FIELD_state_in_sysfs>::on(entry_, struct_addr_);
            watch_read<struct kobject, FIELD_state_add_uevent_sent>::on(entry_, struct_addr_);
            watch_read<struct kobject, FIELD_state_remove_uevent_sent>::on(entry_, struct_addr_);
            watch_read<struct kobject, FIELD_uevent_suppress>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct kobject *struct_addr_(((struct kobject *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct kobject, FIELD_name>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct kobject, FIELD_entry>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct kobject, FIELD_parent>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct kobject, FIELD_kset>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct kobject, FIELD_ktype>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct kobject, FIELD_sd>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
            watch_write<struct kobject, FIELD_kref>::on(entry_, struct_addr_, val_);
            break;
        case 60: 
            watch_write<struct kobject, FIELD_state_initialized>::on(entry_, struct_addr_, val_);
            watch_write<struct kobject, FIELD_state_in_sysfs>::on(entry_, struct_addr_, val_);
            watch_write<struct kobject, FIELD_state_add_uevent_sent>::on(entry_, struct_addr_, val_);
            watch_write<struct kobject, FIELD_state_remove_uevent_sent>::on(entry_, struct_addr_, val_);
            watch_write<struct kobject, FIELD_uevent_suppress>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct poll_table_struct> {
    enum { TYPE_SIZE = sizeof(struct poll_table_struct) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct poll_table_struct *struct_addr_(((struct poll_table_struct *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct poll_table_struct, FIELD_qproc>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct poll_table_struct, FIELD_key>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct poll_table_struct *struct_addr_(((struct poll_table_struct *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct poll_table_struct, FIELD_qproc>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct poll_table_struct, FIELD_key>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct inode> {
    enum { TYPE_SIZE = sizeof(struct inode) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct inode *struct_addr_(((struct inode *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct inode, FIELD_i_hash>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct inode, FIELD_i_list>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct inode, FIELD_i_sb_list>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct inode, FIELD_i_dentry>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct inode, FIELD_i_ino>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
            watch_read<struct inode, FIELD_i_count>::on(entry_, struct_addr_);
            break;
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct inode, FIELD_i_nlink>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
            watch_read<struct inode, FIELD_i_uid>::on(entry_, struct_addr_);
            break;
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct inode, FIELD_i_gid>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct inode, FIELD_i_rdev>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_read<struct inode, FIELD_i_version>::on(entry_, struct_addr_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_read<struct inode, FIELD_i_size>::on(entry_, struct_addr_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_read<struct inode, FIELD_i_atime>::on(entry_, struct_addr_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_read<struct inode, FIELD_i_mtime>::on(entry_, struct_addr_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
            watch_read<struct inode, FIELD_i_ctime>::on(entry_, struct_addr_);
            break;
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
            watch_read<struct inode, FIELD_i_blocks>::on(entry_, struct_addr_);
            break;
        case 168: 
        case 169: 
        case 170: 
        case 171: 
            watch_read<struct inode, FIELD_i_blkbits>::on(entry_, struct_addr_);
            break;
        case 172: 
        case 173: 
            watch_read<struct inode, FIELD_i_bytes>::on(entry_, struct_addr_);
            break;
        case 174: 
        case 175: 
            watch_read<struct inode, FIELD_i_mode>::on(entry_, struct_addr_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
            watch_read<struct inode, FIELD_i_lock>::on(entry_, struct_addr_);
            break;
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
            watch_read<struct inode, FIELD_i_mutex>::on(entry_, struct_addr_);
            break;
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
            watch_read<struct inode, FIELD_i_alloc_sem>::on(entry_, struct_addr_);
            break;
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
            watch_read<struct inode, FIELD_i_op>::on(entry_, struct_addr_);
            break;
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
            watch_read<struct inode, FIELD_i_fop>::on(entry_, struct_addr_);
            break;
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
            watch_read<struct inode, FIELD_i_sb>::on(entry_, struct_addr_);
            break;
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
            watch_read<struct inode, FIELD_i_flock>::on(entry_, struct_addr_);
            break;
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
            watch_read<struct inode, FIELD_i_mapping>::on(entry_, struct_addr_);
            break;
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
            watch_read<struct inode, FIELD_i_data>::on(entry_, struct_addr_);
            break;
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
            watch_read<struct inode, FIELD_i_dquot>::on(entry_, struct_addr_);
            break;
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
            watch_read<struct inode, FIELD_i_devices>::on(entry_, struct_addr_);
            break;
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
            watch_read<struct inode, FIELD_i_bdev>::on(entry_, struct_addr_);
            watch_read<struct inode, FIELD_i_pipe>::on(entry_, struct_addr_);
            watch_read<struct inode, FIELD_i_cdev>::on(entry_, struct_addr_);
            break;
        case 472: 
        case 473: 
        case 474: 
        case 475: 
            watch_read<struct inode, FIELD_i_generation>::on(entry_, struct_addr_);
            break;
        case 476: 
        case 477: 
        case 478: 
        case 479: 
            watch_read<struct inode, FIELD_i_fsnotify_mask>::on(entry_, struct_addr_);
            break;
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
            watch_read<struct inode, FIELD_i_fsnotify_mark_entries>::on(entry_, struct_addr_);
            break;
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
            watch_read<struct inode, FIELD_inotify_watches>::on(entry_, struct_addr_);
            break;
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
        case 528: 
        case 529: 
        case 530: 
        case 531: 
        case 532: 
        case 533: 
        case 534: 
        case 535: 
            watch_read<struct inode, FIELD_inotify_mutex>::on(entry_, struct_addr_);
            break;
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
            watch_read<struct inode, FIELD_i_state>::on(entry_, struct_addr_);
            break;
        case 544: 
        case 545: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
            watch_read<struct inode, FIELD_dirtied_when>::on(entry_, struct_addr_);
            break;
        case 552: 
        case 553: 
        case 554: 
        case 555: 
            watch_read<struct inode, FIELD_i_flags>::on(entry_, struct_addr_);
            break;
        case 556: 
        case 557: 
        case 558: 
        case 559: 
            watch_read<struct inode, FIELD_i_writecount>::on(entry_, struct_addr_);
            break;
        case 560: 
        case 561: 
        case 562: 
        case 563: 
        case 564: 
        case 565: 
        case 566: 
        case 567: 
            watch_read<struct inode, FIELD_i_security>::on(entry_, struct_addr_);
            break;
        case 568: 
        case 569: 
        case 570: 
        case 571: 
        case 572: 
        case 573: 
        case 574: 
        case 575: 
            watch_read<struct inode, FIELD_i_acl>::on(entry_, struct_addr_);
            break;
        case 576: 
        case 577: 
        case 578: 
        case 579: 
        case 580: 
        case 581: 
        case 582: 
        case 583: 
            watch_read<struct inode, FIELD_i_default_acl>::on(entry_, struct_addr_);
            break;
        case 584: 
        case 585: 
        case 586: 
        case 587: 
        case 588: 
        case 589: 
        case 590: 
        case 591: 
            watch_read<struct inode, FIELD_i_private>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct inode *struct_addr_(((struct inode *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct inode, FIELD_i_hash>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct inode, FIELD_i_list>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct inode, FIELD_i_sb_list>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct inode, FIELD_i_dentry>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct inode, FIELD_i_ino>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
            watch_write<struct inode, FIELD_i_count>::on(entry_, struct_addr_, val_);
            break;
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct inode, FIELD_i_nlink>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
            watch_write<struct inode, FIELD_i_uid>::on(entry_, struct_addr_, val_);
            break;
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct inode, FIELD_i_gid>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct inode, FIELD_i_rdev>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_write<struct inode, FIELD_i_version>::on(entry_, struct_addr_, val_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_write<struct inode, FIELD_i_size>::on(entry_, struct_addr_, val_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_write<struct inode, FIELD_i_atime>::on(entry_, struct_addr_, val_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_write<struct inode, FIELD_i_mtime>::on(entry_, struct_addr_, val_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
            watch_write<struct inode, FIELD_i_ctime>::on(entry_, struct_addr_, val_);
            break;
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
            watch_write<struct inode, FIELD_i_blocks>::on(entry_, struct_addr_, val_);
            break;
        case 168: 
        case 169: 
        case 170: 
        case 171: 
            watch_write<struct inode, FIELD_i_blkbits>::on(entry_, struct_addr_, val_);
            break;
        case 172: 
        case 173: 
            watch_write<struct inode, FIELD_i_bytes>::on(entry_, struct_addr_, val_);
            break;
        case 174: 
        case 175: 
            watch_write<struct inode, FIELD_i_mode>::on(entry_, struct_addr_, val_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
            watch_write<struct inode, FIELD_i_lock>::on(entry_, struct_addr_, val_);
            break;
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
            watch_write<struct inode, FIELD_i_mutex>::on(entry_, struct_addr_, val_);
            break;
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
            watch_write<struct inode, FIELD_i_alloc_sem>::on(entry_, struct_addr_, val_);
            break;
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
            watch_write<struct inode, FIELD_i_op>::on(entry_, struct_addr_, val_);
            break;
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
            watch_write<struct inode, FIELD_i_fop>::on(entry_, struct_addr_, val_);
            break;
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
            watch_write<struct inode, FIELD_i_sb>::on(entry_, struct_addr_, val_);
            break;
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
            watch_write<struct inode, FIELD_i_flock>::on(entry_, struct_addr_, val_);
            break;
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
            watch_write<struct inode, FIELD_i_mapping>::on(entry_, struct_addr_, val_);
            break;
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
            watch_write<struct inode, FIELD_i_data>::on(entry_, struct_addr_, val_);
            break;
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
            watch_write<struct inode, FIELD_i_dquot>::on(entry_, struct_addr_, val_);
            break;
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
            watch_write<struct inode, FIELD_i_devices>::on(entry_, struct_addr_, val_);
            break;
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
            watch_write<struct inode, FIELD_i_bdev>::on(entry_, struct_addr_, val_);
            watch_write<struct inode, FIELD_i_pipe>::on(entry_, struct_addr_, val_);
            watch_write<struct inode, FIELD_i_cdev>::on(entry_, struct_addr_, val_);
            break;
        case 472: 
        case 473: 
        case 474: 
        case 475: 
            watch_write<struct inode, FIELD_i_generation>::on(entry_, struct_addr_, val_);
            break;
        case 476: 
        case 477: 
        case 478: 
        case 479: 
            watch_write<struct inode, FIELD_i_fsnotify_mask>::on(entry_, struct_addr_, val_);
            break;
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
            watch_write<struct inode, FIELD_i_fsnotify_mark_entries>::on(entry_, struct_addr_, val_);
            break;
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
            watch_write<struct inode, FIELD_inotify_watches>::on(entry_, struct_addr_, val_);
            break;
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
        case 528: 
        case 529: 
        case 530: 
        case 531: 
        case 532: 
        case 533: 
        case 534: 
        case 535: 
            watch_write<struct inode, FIELD_inotify_mutex>::on(entry_, struct_addr_, val_);
            break;
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
            watch_write<struct inode, FIELD_i_state>::on(entry_, struct_addr_, val_);
            break;
        case 544: 
        case 545: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
            watch_write<struct inode, FIELD_dirtied_when>::on(entry_, struct_addr_, val_);
            break;
        case 552: 
        case 553: 
        case 554: 
        case 555: 
            watch_write<struct inode, FIELD_i_flags>::on(entry_, struct_addr_, val_);
            break;
        case 556: 
        case 557: 
        case 558: 
        case 559: 
            watch_write<struct inode, FIELD_i_writecount>::on(entry_, struct_addr_, val_);
            break;
        case 560: 
        case 561: 
        case 562: 
        case 563: 
        case 564: 
        case 565: 
        case 566: 
        case 567: 
            watch_write<struct inode, FIELD_i_security>::on(entry_, struct_addr_, val_);
            break;
        case 568: 
        case 569: 
        case 570: 
        case 571: 
        case 572: 
        case 573: 
        case 574: 
        case 575: 
            watch_write<struct inode, FIELD_i_acl>::on(entry_, struct_addr_, val_);
            break;
        case 576: 
        case 577: 
        case 578: 
        case 579: 
        case 580: 
        case 581: 
        case 582: 
        case 583: 
            watch_write<struct inode, FIELD_i_default_acl>::on(entry_, struct_addr_, val_);
            break;
        case 584: 
        case 585: 
        case 586: 
        case 587: 
        case 588: 
        case 589: 
        case 590: 
        case 591: 
            watch_write<struct inode, FIELD_i_private>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct netdev_queue> {
    enum { TYPE_SIZE = sizeof(struct netdev_queue) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct netdev_queue *struct_addr_(((struct netdev_queue *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct netdev_queue, FIELD_dev>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct netdev_queue, FIELD_qdisc>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct netdev_queue, FIELD_state>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct netdev_queue, FIELD_qdisc_sleeping>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
            watch_read<struct netdev_queue, FIELD__xmit_lock>::on(entry_, struct_addr_);
            break;
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct netdev_queue, FIELD_xmit_lock_owner>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct netdev_queue, FIELD_trans_start>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct netdev_queue, FIELD_tx_bytes>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct netdev_queue, FIELD_tx_packets>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_read<struct netdev_queue, FIELD_tx_dropped>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct netdev_queue *struct_addr_(((struct netdev_queue *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct netdev_queue, FIELD_dev>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct netdev_queue, FIELD_qdisc>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct netdev_queue, FIELD_state>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct netdev_queue, FIELD_qdisc_sleeping>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
            watch_write<struct netdev_queue, FIELD__xmit_lock>::on(entry_, struct_addr_, val_);
            break;
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct netdev_queue, FIELD_xmit_lock_owner>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct netdev_queue, FIELD_trans_start>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct netdev_queue, FIELD_tx_bytes>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct netdev_queue, FIELD_tx_packets>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_write<struct netdev_queue, FIELD_tx_dropped>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct journal_s> {
    enum { TYPE_SIZE = sizeof(struct journal_s) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct journal_s *struct_addr_(((struct journal_s *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct journal_s, FIELD_j_flags>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_read<struct journal_s, FIELD_j_errno>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct journal_s, FIELD_j_sb_buffer>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct journal_s, FIELD_j_superblock>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
            watch_read<struct journal_s, FIELD_j_format_version>::on(entry_, struct_addr_);
            break;
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct journal_s, FIELD_j_state_lock>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
            watch_read<struct journal_s, FIELD_j_barrier_count>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct journal_s, FIELD_j_barrier>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct journal_s, FIELD_j_running_transaction>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct journal_s, FIELD_j_committing_transaction>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_read<struct journal_s, FIELD_j_checkpoint_transactions>::on(entry_, struct_addr_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_read<struct journal_s, FIELD_j_wait_transaction_locked>::on(entry_, struct_addr_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_read<struct journal_s, FIELD_j_wait_logspace>::on(entry_, struct_addr_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
            watch_read<struct journal_s, FIELD_j_wait_done_commit>::on(entry_, struct_addr_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
            watch_read<struct journal_s, FIELD_j_wait_checkpoint>::on(entry_, struct_addr_);
            break;
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
            watch_read<struct journal_s, FIELD_j_wait_commit>::on(entry_, struct_addr_);
            break;
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
            watch_read<struct journal_s, FIELD_j_wait_updates>::on(entry_, struct_addr_);
            break;
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
            watch_read<struct journal_s, FIELD_j_checkpoint_mutex>::on(entry_, struct_addr_);
            break;
        case 280: 
        case 281: 
        case 282: 
        case 283: 
            watch_read<struct journal_s, FIELD_j_head>::on(entry_, struct_addr_);
            break;
        case 284: 
        case 285: 
        case 286: 
        case 287: 
            watch_read<struct journal_s, FIELD_j_tail>::on(entry_, struct_addr_);
            break;
        case 288: 
        case 289: 
        case 290: 
        case 291: 
            watch_read<struct journal_s, FIELD_j_free>::on(entry_, struct_addr_);
            break;
        case 292: 
        case 293: 
        case 294: 
        case 295: 
            watch_read<struct journal_s, FIELD_j_first>::on(entry_, struct_addr_);
            break;
        case 296: 
        case 297: 
        case 298: 
        case 299: 
            watch_read<struct journal_s, FIELD_j_last>::on(entry_, struct_addr_);
            break;
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
            watch_read<struct journal_s, FIELD_j_dev>::on(entry_, struct_addr_);
            break;
        case 312: 
        case 313: 
        case 314: 
        case 315: 
            watch_read<struct journal_s, FIELD_j_blocksize>::on(entry_, struct_addr_);
            break;
        case 316: 
        case 317: 
        case 318: 
        case 319: 
            watch_read<struct journal_s, FIELD_j_blk_offset>::on(entry_, struct_addr_);
            break;
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
            watch_read<struct journal_s, FIELD_j_fs_dev>::on(entry_, struct_addr_);
            break;
        case 328: 
        case 329: 
        case 330: 
        case 331: 
            watch_read<struct journal_s, FIELD_j_maxlen>::on(entry_, struct_addr_);
            break;
        case 332: 
        case 333: 
        case 334: 
        case 335: 
            watch_read<struct journal_s, FIELD_j_list_lock>::on(entry_, struct_addr_);
            break;
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
            watch_read<struct journal_s, FIELD_j_inode>::on(entry_, struct_addr_);
            break;
        case 344: 
        case 345: 
        case 346: 
        case 347: 
            watch_read<struct journal_s, FIELD_j_tail_sequence>::on(entry_, struct_addr_);
            break;
        case 348: 
        case 349: 
        case 350: 
        case 351: 
            watch_read<struct journal_s, FIELD_j_transaction_sequence>::on(entry_, struct_addr_);
            break;
        case 352: 
        case 353: 
        case 354: 
        case 355: 
            watch_read<struct journal_s, FIELD_j_commit_sequence>::on(entry_, struct_addr_);
            break;
        case 356: 
        case 357: 
        case 358: 
        case 359: 
            watch_read<struct journal_s, FIELD_j_commit_request>::on(entry_, struct_addr_);
            break;
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
            watch_read<struct journal_s, FIELD_j_uuid>::on(entry_, struct_addr_);
            break;
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
            watch_read<struct journal_s, FIELD_j_task>::on(entry_, struct_addr_);
            break;
        case 384: 
        case 385: 
        case 386: 
        case 387: 
            watch_read<struct journal_s, FIELD_j_max_transaction_buffers>::on(entry_, struct_addr_);
            break;
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
            watch_read<struct journal_s, FIELD_j_commit_interval>::on(entry_, struct_addr_);
            break;
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
            watch_read<struct journal_s, FIELD_j_commit_timer>::on(entry_, struct_addr_);
            break;
        case 480: 
        case 481: 
        case 482: 
        case 483: 
            watch_read<struct journal_s, FIELD_j_revoke_lock>::on(entry_, struct_addr_);
            break;
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
            watch_read<struct journal_s, FIELD_j_revoke>::on(entry_, struct_addr_);
            break;
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
            watch_read<struct journal_s, FIELD_j_revoke_table>::on(entry_, struct_addr_);
            break;
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
            watch_read<struct journal_s, FIELD_j_wbuf>::on(entry_, struct_addr_);
            break;
        case 520: 
        case 521: 
        case 522: 
        case 523: 
            watch_read<struct journal_s, FIELD_j_wbufsize>::on(entry_, struct_addr_);
            break;
        case 524: 
        case 525: 
        case 526: 
        case 527: 
            watch_read<struct journal_s, FIELD_j_last_sync_writer>::on(entry_, struct_addr_);
            break;
        case 528: 
        case 529: 
        case 530: 
        case 531: 
        case 532: 
        case 533: 
        case 534: 
        case 535: 
            watch_read<struct journal_s, FIELD_j_average_commit_time>::on(entry_, struct_addr_);
            break;
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
            watch_read<struct journal_s, FIELD_j_private>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct journal_s *struct_addr_(((struct journal_s *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct journal_s, FIELD_j_flags>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_write<struct journal_s, FIELD_j_errno>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct journal_s, FIELD_j_sb_buffer>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct journal_s, FIELD_j_superblock>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
            watch_write<struct journal_s, FIELD_j_format_version>::on(entry_, struct_addr_, val_);
            break;
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct journal_s, FIELD_j_state_lock>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
            watch_write<struct journal_s, FIELD_j_barrier_count>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct journal_s, FIELD_j_barrier>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct journal_s, FIELD_j_running_transaction>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct journal_s, FIELD_j_committing_transaction>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_write<struct journal_s, FIELD_j_checkpoint_transactions>::on(entry_, struct_addr_, val_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_write<struct journal_s, FIELD_j_wait_transaction_locked>::on(entry_, struct_addr_, val_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_write<struct journal_s, FIELD_j_wait_logspace>::on(entry_, struct_addr_, val_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
            watch_write<struct journal_s, FIELD_j_wait_done_commit>::on(entry_, struct_addr_, val_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
            watch_write<struct journal_s, FIELD_j_wait_checkpoint>::on(entry_, struct_addr_, val_);
            break;
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
            watch_write<struct journal_s, FIELD_j_wait_commit>::on(entry_, struct_addr_, val_);
            break;
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
            watch_write<struct journal_s, FIELD_j_wait_updates>::on(entry_, struct_addr_, val_);
            break;
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
            watch_write<struct journal_s, FIELD_j_checkpoint_mutex>::on(entry_, struct_addr_, val_);
            break;
        case 280: 
        case 281: 
        case 282: 
        case 283: 
            watch_write<struct journal_s, FIELD_j_head>::on(entry_, struct_addr_, val_);
            break;
        case 284: 
        case 285: 
        case 286: 
        case 287: 
            watch_write<struct journal_s, FIELD_j_tail>::on(entry_, struct_addr_, val_);
            break;
        case 288: 
        case 289: 
        case 290: 
        case 291: 
            watch_write<struct journal_s, FIELD_j_free>::on(entry_, struct_addr_, val_);
            break;
        case 292: 
        case 293: 
        case 294: 
        case 295: 
            watch_write<struct journal_s, FIELD_j_first>::on(entry_, struct_addr_, val_);
            break;
        case 296: 
        case 297: 
        case 298: 
        case 299: 
            watch_write<struct journal_s, FIELD_j_last>::on(entry_, struct_addr_, val_);
            break;
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
            watch_write<struct journal_s, FIELD_j_dev>::on(entry_, struct_addr_, val_);
            break;
        case 312: 
        case 313: 
        case 314: 
        case 315: 
            watch_write<struct journal_s, FIELD_j_blocksize>::on(entry_, struct_addr_, val_);
            break;
        case 316: 
        case 317: 
        case 318: 
        case 319: 
            watch_write<struct journal_s, FIELD_j_blk_offset>::on(entry_, struct_addr_, val_);
            break;
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
            watch_write<struct journal_s, FIELD_j_fs_dev>::on(entry_, struct_addr_, val_);
            break;
        case 328: 
        case 329: 
        case 330: 
        case 331: 
            watch_write<struct journal_s, FIELD_j_maxlen>::on(entry_, struct_addr_, val_);
            break;
        case 332: 
        case 333: 
        case 334: 
        case 335: 
            watch_write<struct journal_s, FIELD_j_list_lock>::on(entry_, struct_addr_, val_);
            break;
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
            watch_write<struct journal_s, FIELD_j_inode>::on(entry_, struct_addr_, val_);
            break;
        case 344: 
        case 345: 
        case 346: 
        case 347: 
            watch_write<struct journal_s, FIELD_j_tail_sequence>::on(entry_, struct_addr_, val_);
            break;
        case 348: 
        case 349: 
        case 350: 
        case 351: 
            watch_write<struct journal_s, FIELD_j_transaction_sequence>::on(entry_, struct_addr_, val_);
            break;
        case 352: 
        case 353: 
        case 354: 
        case 355: 
            watch_write<struct journal_s, FIELD_j_commit_sequence>::on(entry_, struct_addr_, val_);
            break;
        case 356: 
        case 357: 
        case 358: 
        case 359: 
            watch_write<struct journal_s, FIELD_j_commit_request>::on(entry_, struct_addr_, val_);
            break;
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
            watch_write<struct journal_s, FIELD_j_uuid>::on(entry_, struct_addr_, val_);
            break;
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
            watch_write<struct journal_s, FIELD_j_task>::on(entry_, struct_addr_, val_);
            break;
        case 384: 
        case 385: 
        case 386: 
        case 387: 
            watch_write<struct journal_s, FIELD_j_max_transaction_buffers>::on(entry_, struct_addr_, val_);
            break;
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
            watch_write<struct journal_s, FIELD_j_commit_interval>::on(entry_, struct_addr_, val_);
            break;
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
            watch_write<struct journal_s, FIELD_j_commit_timer>::on(entry_, struct_addr_, val_);
            break;
        case 480: 
        case 481: 
        case 482: 
        case 483: 
            watch_write<struct journal_s, FIELD_j_revoke_lock>::on(entry_, struct_addr_, val_);
            break;
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
            watch_write<struct journal_s, FIELD_j_revoke>::on(entry_, struct_addr_, val_);
            break;
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
            watch_write<struct journal_s, FIELD_j_revoke_table>::on(entry_, struct_addr_, val_);
            break;
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
            watch_write<struct journal_s, FIELD_j_wbuf>::on(entry_, struct_addr_, val_);
            break;
        case 520: 
        case 521: 
        case 522: 
        case 523: 
            watch_write<struct journal_s, FIELD_j_wbufsize>::on(entry_, struct_addr_, val_);
            break;
        case 524: 
        case 525: 
        case 526: 
        case 527: 
            watch_write<struct journal_s, FIELD_j_last_sync_writer>::on(entry_, struct_addr_, val_);
            break;
        case 528: 
        case 529: 
        case 530: 
        case 531: 
        case 532: 
        case 533: 
        case 534: 
        case 535: 
            watch_write<struct journal_s, FIELD_j_average_commit_time>::on(entry_, struct_addr_, val_);
            break;
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
            watch_write<struct journal_s, FIELD_j_private>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct ethtool_ops> {
    enum { TYPE_SIZE = sizeof(struct ethtool_ops) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct ethtool_ops *struct_addr_(((struct ethtool_ops *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct ethtool_ops, FIELD_get_settings>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct ethtool_ops, FIELD_set_settings>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct ethtool_ops, FIELD_get_drvinfo>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct ethtool_ops, FIELD_get_regs_len>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct ethtool_ops, FIELD_get_regs>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct ethtool_ops, FIELD_get_wol>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct ethtool_ops, FIELD_set_wol>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct ethtool_ops, FIELD_get_msglevel>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct ethtool_ops, FIELD_set_msglevel>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct ethtool_ops, FIELD_nway_reset>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct ethtool_ops, FIELD_get_link>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct ethtool_ops, FIELD_get_eeprom_len>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_read<struct ethtool_ops, FIELD_get_eeprom>::on(entry_, struct_addr_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_read<struct ethtool_ops, FIELD_set_eeprom>::on(entry_, struct_addr_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_read<struct ethtool_ops, FIELD_get_coalesce>::on(entry_, struct_addr_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_read<struct ethtool_ops, FIELD_set_coalesce>::on(entry_, struct_addr_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_read<struct ethtool_ops, FIELD_get_ringparam>::on(entry_, struct_addr_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_read<struct ethtool_ops, FIELD_set_ringparam>::on(entry_, struct_addr_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_read<struct ethtool_ops, FIELD_get_pauseparam>::on(entry_, struct_addr_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
            watch_read<struct ethtool_ops, FIELD_set_pauseparam>::on(entry_, struct_addr_);
            break;
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
            watch_read<struct ethtool_ops, FIELD_get_rx_csum>::on(entry_, struct_addr_);
            break;
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
            watch_read<struct ethtool_ops, FIELD_set_rx_csum>::on(entry_, struct_addr_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
            watch_read<struct ethtool_ops, FIELD_get_tx_csum>::on(entry_, struct_addr_);
            break;
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
            watch_read<struct ethtool_ops, FIELD_set_tx_csum>::on(entry_, struct_addr_);
            break;
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
            watch_read<struct ethtool_ops, FIELD_get_sg>::on(entry_, struct_addr_);
            break;
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
            watch_read<struct ethtool_ops, FIELD_set_sg>::on(entry_, struct_addr_);
            break;
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
            watch_read<struct ethtool_ops, FIELD_get_tso>::on(entry_, struct_addr_);
            break;
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
            watch_read<struct ethtool_ops, FIELD_set_tso>::on(entry_, struct_addr_);
            break;
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
            watch_read<struct ethtool_ops, FIELD_self_test>::on(entry_, struct_addr_);
            break;
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
            watch_read<struct ethtool_ops, FIELD_get_strings>::on(entry_, struct_addr_);
            break;
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
            watch_read<struct ethtool_ops, FIELD_phys_id>::on(entry_, struct_addr_);
            break;
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
            watch_read<struct ethtool_ops, FIELD_get_ethtool_stats>::on(entry_, struct_addr_);
            break;
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
            watch_read<struct ethtool_ops, FIELD_begin>::on(entry_, struct_addr_);
            break;
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
            watch_read<struct ethtool_ops, FIELD_complete>::on(entry_, struct_addr_);
            break;
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
            watch_read<struct ethtool_ops, FIELD_get_ufo>::on(entry_, struct_addr_);
            break;
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
            watch_read<struct ethtool_ops, FIELD_set_ufo>::on(entry_, struct_addr_);
            break;
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
            watch_read<struct ethtool_ops, FIELD_get_flags>::on(entry_, struct_addr_);
            break;
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
            watch_read<struct ethtool_ops, FIELD_set_flags>::on(entry_, struct_addr_);
            break;
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
            watch_read<struct ethtool_ops, FIELD_get_priv_flags>::on(entry_, struct_addr_);
            break;
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
            watch_read<struct ethtool_ops, FIELD_set_priv_flags>::on(entry_, struct_addr_);
            break;
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
            watch_read<struct ethtool_ops, FIELD_get_sset_count>::on(entry_, struct_addr_);
            break;
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
            watch_read<struct ethtool_ops, FIELD_self_test_count>::on(entry_, struct_addr_);
            break;
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
            watch_read<struct ethtool_ops, FIELD_get_stats_count>::on(entry_, struct_addr_);
            break;
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
            watch_read<struct ethtool_ops, FIELD_get_rxnfc>::on(entry_, struct_addr_);
            break;
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
            watch_read<struct ethtool_ops, FIELD_set_rxnfc>::on(entry_, struct_addr_);
            break;
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
            watch_read<struct ethtool_ops, FIELD_flash_device>::on(entry_, struct_addr_);
            break;
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
            watch_read<struct ethtool_ops, FIELD_reset>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct ethtool_ops *struct_addr_(((struct ethtool_ops *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct ethtool_ops, FIELD_get_settings>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct ethtool_ops, FIELD_set_settings>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct ethtool_ops, FIELD_get_drvinfo>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct ethtool_ops, FIELD_get_regs_len>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct ethtool_ops, FIELD_get_regs>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct ethtool_ops, FIELD_get_wol>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct ethtool_ops, FIELD_set_wol>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct ethtool_ops, FIELD_get_msglevel>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct ethtool_ops, FIELD_set_msglevel>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct ethtool_ops, FIELD_nway_reset>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct ethtool_ops, FIELD_get_link>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct ethtool_ops, FIELD_get_eeprom_len>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_write<struct ethtool_ops, FIELD_get_eeprom>::on(entry_, struct_addr_, val_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_write<struct ethtool_ops, FIELD_set_eeprom>::on(entry_, struct_addr_, val_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_write<struct ethtool_ops, FIELD_get_coalesce>::on(entry_, struct_addr_, val_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_write<struct ethtool_ops, FIELD_set_coalesce>::on(entry_, struct_addr_, val_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_write<struct ethtool_ops, FIELD_get_ringparam>::on(entry_, struct_addr_, val_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_write<struct ethtool_ops, FIELD_set_ringparam>::on(entry_, struct_addr_, val_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_write<struct ethtool_ops, FIELD_get_pauseparam>::on(entry_, struct_addr_, val_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
            watch_write<struct ethtool_ops, FIELD_set_pauseparam>::on(entry_, struct_addr_, val_);
            break;
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
            watch_write<struct ethtool_ops, FIELD_get_rx_csum>::on(entry_, struct_addr_, val_);
            break;
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
            watch_write<struct ethtool_ops, FIELD_set_rx_csum>::on(entry_, struct_addr_, val_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
            watch_write<struct ethtool_ops, FIELD_get_tx_csum>::on(entry_, struct_addr_, val_);
            break;
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
            watch_write<struct ethtool_ops, FIELD_set_tx_csum>::on(entry_, struct_addr_, val_);
            break;
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
            watch_write<struct ethtool_ops, FIELD_get_sg>::on(entry_, struct_addr_, val_);
            break;
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
            watch_write<struct ethtool_ops, FIELD_set_sg>::on(entry_, struct_addr_, val_);
            break;
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
            watch_write<struct ethtool_ops, FIELD_get_tso>::on(entry_, struct_addr_, val_);
            break;
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
            watch_write<struct ethtool_ops, FIELD_set_tso>::on(entry_, struct_addr_, val_);
            break;
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
            watch_write<struct ethtool_ops, FIELD_self_test>::on(entry_, struct_addr_, val_);
            break;
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
            watch_write<struct ethtool_ops, FIELD_get_strings>::on(entry_, struct_addr_, val_);
            break;
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
            watch_write<struct ethtool_ops, FIELD_phys_id>::on(entry_, struct_addr_, val_);
            break;
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
            watch_write<struct ethtool_ops, FIELD_get_ethtool_stats>::on(entry_, struct_addr_, val_);
            break;
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
            watch_write<struct ethtool_ops, FIELD_begin>::on(entry_, struct_addr_, val_);
            break;
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
            watch_write<struct ethtool_ops, FIELD_complete>::on(entry_, struct_addr_, val_);
            break;
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
            watch_write<struct ethtool_ops, FIELD_get_ufo>::on(entry_, struct_addr_, val_);
            break;
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
            watch_write<struct ethtool_ops, FIELD_set_ufo>::on(entry_, struct_addr_, val_);
            break;
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
            watch_write<struct ethtool_ops, FIELD_get_flags>::on(entry_, struct_addr_, val_);
            break;
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
            watch_write<struct ethtool_ops, FIELD_set_flags>::on(entry_, struct_addr_, val_);
            break;
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
            watch_write<struct ethtool_ops, FIELD_get_priv_flags>::on(entry_, struct_addr_, val_);
            break;
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
            watch_write<struct ethtool_ops, FIELD_set_priv_flags>::on(entry_, struct_addr_, val_);
            break;
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
            watch_write<struct ethtool_ops, FIELD_get_sset_count>::on(entry_, struct_addr_, val_);
            break;
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
            watch_write<struct ethtool_ops, FIELD_self_test_count>::on(entry_, struct_addr_, val_);
            break;
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
            watch_write<struct ethtool_ops, FIELD_get_stats_count>::on(entry_, struct_addr_, val_);
            break;
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
            watch_write<struct ethtool_ops, FIELD_get_rxnfc>::on(entry_, struct_addr_, val_);
            break;
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
            watch_write<struct ethtool_ops, FIELD_set_rxnfc>::on(entry_, struct_addr_, val_);
            break;
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
            watch_write<struct ethtool_ops, FIELD_flash_device>::on(entry_, struct_addr_, val_);
            break;
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
            watch_write<struct ethtool_ops, FIELD_reset>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct phy_setting> {
    enum { TYPE_SIZE = sizeof(struct phy_setting) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct phy_setting *struct_addr_(((struct phy_setting *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct phy_setting, FIELD_speed>::on(entry_, struct_addr_);
            break;
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct phy_setting, FIELD_duplex>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_read<struct phy_setting, FIELD_setting>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct phy_setting *struct_addr_(((struct phy_setting *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct phy_setting, FIELD_speed>::on(entry_, struct_addr_, val_);
            break;
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct phy_setting, FIELD_duplex>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_write<struct phy_setting, FIELD_setting>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, __sigset_t> {
    enum { TYPE_SIZE = sizeof(__sigset_t) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        __sigset_t *struct_addr_(((__sigset_t *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_read<__sigset_t, FIELD___val>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        __sigset_t *struct_addr_(((__sigset_t *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_write<__sigset_t, FIELD___val>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct hlist_head> {
    enum { TYPE_SIZE = sizeof(struct hlist_head) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct hlist_head *struct_addr_(((struct hlist_head *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct hlist_head, FIELD_first>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct hlist_head *struct_addr_(((struct hlist_head *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct hlist_head, FIELD_first>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct posix_acl_entry> {
    enum { TYPE_SIZE = sizeof(struct posix_acl_entry) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct posix_acl_entry *struct_addr_(((struct posix_acl_entry *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
            watch_read<struct posix_acl_entry, FIELD_e_tag>::on(entry_, struct_addr_);
            break;
        case 2: 
        case 3: 
            watch_read<struct posix_acl_entry, FIELD_e_perm>::on(entry_, struct_addr_);
            break;
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct posix_acl_entry, FIELD_e_id>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct posix_acl_entry *struct_addr_(((struct posix_acl_entry *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
            watch_write<struct posix_acl_entry, FIELD_e_tag>::on(entry_, struct_addr_, val_);
            break;
        case 2: 
        case 3: 
            watch_write<struct posix_acl_entry, FIELD_e_perm>::on(entry_, struct_addr_, val_);
            break;
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct posix_acl_entry, FIELD_e_id>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct pci_dev> {
    enum { TYPE_SIZE = sizeof(struct pci_dev) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct pci_dev *struct_addr_(((struct pci_dev *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct pci_dev, FIELD_bus_list>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct pci_dev, FIELD_bus>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct pci_dev, FIELD_subordinate>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct pci_dev, FIELD_sysdata>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct pci_dev, FIELD_procent>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct pci_dev, FIELD_slot>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
            watch_read<struct pci_dev, FIELD_devfn>::on(entry_, struct_addr_);
            break;
        case 60: 
        case 61: 
            watch_read<struct pci_dev, FIELD_vendor>::on(entry_, struct_addr_);
            break;
        case 62: 
        case 63: 
            watch_read<struct pci_dev, FIELD_device>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
            watch_read<struct pci_dev, FIELD_subsystem_vendor>::on(entry_, struct_addr_);
            break;
        case 66: 
        case 67: 
            watch_read<struct pci_dev, FIELD_subsystem_device>::on(entry_, struct_addr_);
            break;
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct pci_dev, FIELD_class_ele>::on(entry_, struct_addr_);
            break;
        case 72: 
            watch_read<struct pci_dev, FIELD_revision>::on(entry_, struct_addr_);
            break;
        case 73: 
            watch_read<struct pci_dev, FIELD_hdr_type>::on(entry_, struct_addr_);
            break;
        case 74: 
            watch_read<struct pci_dev, FIELD_pcie_type>::on(entry_, struct_addr_);
            break;
        case 75: 
            watch_read<struct pci_dev, FIELD_rom_base_reg>::on(entry_, struct_addr_);
            break;
        case 76: 
            watch_read<struct pci_dev, FIELD_pin>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct pci_dev, FIELD_driver>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct pci_dev, FIELD_dma_mask>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_read<struct pci_dev, FIELD_dma_parms>::on(entry_, struct_addr_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
            watch_read<struct pci_dev, FIELD_current_state>::on(entry_, struct_addr_);
            break;
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_read<struct pci_dev, FIELD_pm_cap>::on(entry_, struct_addr_);
            break;
        case 120: 
            watch_read<struct pci_dev, FIELD_pme_support>::on(entry_, struct_addr_);
            watch_read<struct pci_dev, FIELD_d1_support>::on(entry_, struct_addr_);
            watch_read<struct pci_dev, FIELD_d2_support>::on(entry_, struct_addr_);
            watch_read<struct pci_dev, FIELD_no_d1d2>::on(entry_, struct_addr_);
            break;
        case 121: 
            watch_read<struct pci_dev, FIELD_wakeup_prepared>::on(entry_, struct_addr_);
            break;
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_read<struct pci_dev, FIELD_error_state>::on(entry_, struct_addr_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
        case 528: 
        case 529: 
        case 530: 
        case 531: 
        case 532: 
        case 533: 
        case 534: 
        case 535: 
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
        case 544: 
        case 545: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
        case 552: 
        case 553: 
        case 554: 
        case 555: 
        case 556: 
        case 557: 
        case 558: 
        case 559: 
        case 560: 
        case 561: 
        case 562: 
        case 563: 
        case 564: 
        case 565: 
        case 566: 
        case 567: 
        case 568: 
        case 569: 
        case 570: 
        case 571: 
        case 572: 
        case 573: 
        case 574: 
        case 575: 
        case 576: 
        case 577: 
        case 578: 
        case 579: 
        case 580: 
        case 581: 
        case 582: 
        case 583: 
        case 584: 
        case 585: 
        case 586: 
        case 587: 
        case 588: 
        case 589: 
        case 590: 
        case 591: 
        case 592: 
        case 593: 
        case 594: 
        case 595: 
        case 596: 
        case 597: 
        case 598: 
        case 599: 
        case 600: 
        case 601: 
        case 602: 
        case 603: 
        case 604: 
        case 605: 
        case 606: 
        case 607: 
        case 608: 
        case 609: 
        case 610: 
        case 611: 
        case 612: 
        case 613: 
        case 614: 
        case 615: 
        case 616: 
        case 617: 
        case 618: 
        case 619: 
        case 620: 
        case 621: 
        case 622: 
        case 623: 
        case 624: 
        case 625: 
        case 626: 
        case 627: 
        case 628: 
        case 629: 
        case 630: 
        case 631: 
        case 632: 
        case 633: 
        case 634: 
        case 635: 
        case 636: 
        case 637: 
        case 638: 
        case 639: 
            watch_read<struct pci_dev, FIELD_dev>::on(entry_, struct_addr_);
            break;
        case 640: 
        case 641: 
        case 642: 
        case 643: 
            watch_read<struct pci_dev, FIELD_cfg_size>::on(entry_, struct_addr_);
            break;
        case 644: 
        case 645: 
        case 646: 
        case 647: 
            watch_read<struct pci_dev, FIELD_irq>::on(entry_, struct_addr_);
            break;
        case 648: 
        case 649: 
        case 650: 
        case 651: 
        case 652: 
        case 653: 
        case 654: 
        case 655: 
        case 656: 
        case 657: 
        case 658: 
        case 659: 
        case 660: 
        case 661: 
        case 662: 
        case 663: 
        case 664: 
        case 665: 
        case 666: 
        case 667: 
        case 668: 
        case 669: 
        case 670: 
        case 671: 
        case 672: 
        case 673: 
        case 674: 
        case 675: 
        case 676: 
        case 677: 
        case 678: 
        case 679: 
        case 680: 
        case 681: 
        case 682: 
        case 683: 
        case 684: 
        case 685: 
        case 686: 
        case 687: 
        case 688: 
        case 689: 
        case 690: 
        case 691: 
        case 692: 
        case 693: 
        case 694: 
        case 695: 
        case 696: 
        case 697: 
        case 698: 
        case 699: 
        case 700: 
        case 701: 
        case 702: 
        case 703: 
        case 704: 
        case 705: 
        case 706: 
        case 707: 
        case 708: 
        case 709: 
        case 710: 
        case 711: 
        case 712: 
        case 713: 
        case 714: 
        case 715: 
        case 716: 
        case 717: 
        case 718: 
        case 719: 
        case 720: 
        case 721: 
        case 722: 
        case 723: 
        case 724: 
        case 725: 
        case 726: 
        case 727: 
        case 728: 
        case 729: 
        case 730: 
        case 731: 
        case 732: 
        case 733: 
        case 734: 
        case 735: 
        case 736: 
        case 737: 
        case 738: 
        case 739: 
        case 740: 
        case 741: 
        case 742: 
        case 743: 
        case 744: 
        case 745: 
        case 746: 
        case 747: 
        case 748: 
        case 749: 
        case 750: 
        case 751: 
        case 752: 
        case 753: 
        case 754: 
        case 755: 
        case 756: 
        case 757: 
        case 758: 
        case 759: 
        case 760: 
        case 761: 
        case 762: 
        case 763: 
        case 764: 
        case 765: 
        case 766: 
        case 767: 
        case 768: 
        case 769: 
        case 770: 
        case 771: 
        case 772: 
        case 773: 
        case 774: 
        case 775: 
        case 776: 
        case 777: 
        case 778: 
        case 779: 
        case 780: 
        case 781: 
        case 782: 
        case 783: 
        case 784: 
        case 785: 
        case 786: 
        case 787: 
        case 788: 
        case 789: 
        case 790: 
        case 791: 
        case 792: 
        case 793: 
        case 794: 
        case 795: 
        case 796: 
        case 797: 
        case 798: 
        case 799: 
        case 800: 
        case 801: 
        case 802: 
        case 803: 
        case 804: 
        case 805: 
        case 806: 
        case 807: 
        case 808: 
        case 809: 
        case 810: 
        case 811: 
        case 812: 
        case 813: 
        case 814: 
        case 815: 
        case 816: 
        case 817: 
        case 818: 
        case 819: 
        case 820: 
        case 821: 
        case 822: 
        case 823: 
        case 824: 
        case 825: 
        case 826: 
        case 827: 
        case 828: 
        case 829: 
        case 830: 
        case 831: 
        case 832: 
        case 833: 
        case 834: 
        case 835: 
        case 836: 
        case 837: 
        case 838: 
        case 839: 
        case 840: 
        case 841: 
        case 842: 
        case 843: 
        case 844: 
        case 845: 
        case 846: 
        case 847: 
        case 848: 
        case 849: 
        case 850: 
        case 851: 
        case 852: 
        case 853: 
        case 854: 
        case 855: 
        case 856: 
        case 857: 
        case 858: 
        case 859: 
        case 860: 
        case 861: 
        case 862: 
        case 863: 
        case 864: 
        case 865: 
        case 866: 
        case 867: 
        case 868: 
        case 869: 
        case 870: 
        case 871: 
        case 872: 
        case 873: 
        case 874: 
        case 875: 
        case 876: 
        case 877: 
        case 878: 
        case 879: 
        case 880: 
        case 881: 
        case 882: 
        case 883: 
        case 884: 
        case 885: 
        case 886: 
        case 887: 
        case 888: 
        case 889: 
        case 890: 
        case 891: 
        case 892: 
        case 893: 
        case 894: 
        case 895: 
        case 896: 
        case 897: 
        case 898: 
        case 899: 
        case 900: 
        case 901: 
        case 902: 
        case 903: 
        case 904: 
        case 905: 
        case 906: 
        case 907: 
        case 908: 
        case 909: 
        case 910: 
        case 911: 
        case 912: 
        case 913: 
        case 914: 
        case 915: 
        case 916: 
        case 917: 
        case 918: 
        case 919: 
        case 920: 
        case 921: 
        case 922: 
        case 923: 
        case 924: 
        case 925: 
        case 926: 
        case 927: 
        case 928: 
        case 929: 
        case 930: 
        case 931: 
        case 932: 
        case 933: 
        case 934: 
        case 935: 
        case 936: 
        case 937: 
        case 938: 
        case 939: 
        case 940: 
        case 941: 
        case 942: 
        case 943: 
        case 944: 
        case 945: 
        case 946: 
        case 947: 
        case 948: 
        case 949: 
        case 950: 
        case 951: 
        case 952: 
        case 953: 
        case 954: 
        case 955: 
        case 956: 
        case 957: 
        case 958: 
        case 959: 
        case 960: 
        case 961: 
        case 962: 
        case 963: 
        case 964: 
        case 965: 
        case 966: 
        case 967: 
        case 968: 
        case 969: 
        case 970: 
        case 971: 
        case 972: 
        case 973: 
        case 974: 
        case 975: 
        case 976: 
        case 977: 
        case 978: 
        case 979: 
        case 980: 
        case 981: 
        case 982: 
        case 983: 
        case 984: 
        case 985: 
        case 986: 
        case 987: 
        case 988: 
        case 989: 
        case 990: 
        case 991: 
        case 992: 
        case 993: 
        case 994: 
        case 995: 
        case 996: 
        case 997: 
        case 998: 
        case 999: 
        case 1000: 
        case 1001: 
        case 1002: 
        case 1003: 
        case 1004: 
        case 1005: 
        case 1006: 
        case 1007: 
        case 1008: 
        case 1009: 
        case 1010: 
        case 1011: 
        case 1012: 
        case 1013: 
        case 1014: 
        case 1015: 
        case 1016: 
        case 1017: 
        case 1018: 
        case 1019: 
        case 1020: 
        case 1021: 
        case 1022: 
        case 1023: 
        case 1024: 
        case 1025: 
        case 1026: 
        case 1027: 
        case 1028: 
        case 1029: 
        case 1030: 
        case 1031: 
        case 1032: 
        case 1033: 
        case 1034: 
        case 1035: 
        case 1036: 
        case 1037: 
        case 1038: 
        case 1039: 
        case 1040: 
        case 1041: 
        case 1042: 
        case 1043: 
        case 1044: 
        case 1045: 
        case 1046: 
        case 1047: 
        case 1048: 
        case 1049: 
        case 1050: 
        case 1051: 
        case 1052: 
        case 1053: 
        case 1054: 
        case 1055: 
        case 1056: 
        case 1057: 
        case 1058: 
        case 1059: 
        case 1060: 
        case 1061: 
        case 1062: 
        case 1063: 
        case 1064: 
        case 1065: 
        case 1066: 
        case 1067: 
        case 1068: 
        case 1069: 
        case 1070: 
        case 1071: 
        case 1072: 
        case 1073: 
        case 1074: 
        case 1075: 
        case 1076: 
        case 1077: 
        case 1078: 
        case 1079: 
        case 1080: 
        case 1081: 
        case 1082: 
        case 1083: 
        case 1084: 
        case 1085: 
        case 1086: 
        case 1087: 
        case 1088: 
        case 1089: 
        case 1090: 
        case 1091: 
        case 1092: 
        case 1093: 
        case 1094: 
        case 1095: 
        case 1096: 
        case 1097: 
        case 1098: 
        case 1099: 
        case 1100: 
        case 1101: 
        case 1102: 
        case 1103: 
        case 1104: 
        case 1105: 
        case 1106: 
        case 1107: 
        case 1108: 
        case 1109: 
        case 1110: 
        case 1111: 
        case 1112: 
        case 1113: 
        case 1114: 
        case 1115: 
        case 1116: 
        case 1117: 
        case 1118: 
        case 1119: 
        case 1120: 
        case 1121: 
        case 1122: 
        case 1123: 
        case 1124: 
        case 1125: 
        case 1126: 
        case 1127: 
        case 1128: 
        case 1129: 
        case 1130: 
        case 1131: 
        case 1132: 
        case 1133: 
        case 1134: 
        case 1135: 
        case 1136: 
        case 1137: 
        case 1138: 
        case 1139: 
        case 1140: 
        case 1141: 
        case 1142: 
        case 1143: 
        case 1144: 
        case 1145: 
        case 1146: 
        case 1147: 
        case 1148: 
        case 1149: 
        case 1150: 
        case 1151: 
        case 1152: 
        case 1153: 
        case 1154: 
        case 1155: 
        case 1156: 
        case 1157: 
        case 1158: 
        case 1159: 
        case 1160: 
        case 1161: 
        case 1162: 
        case 1163: 
        case 1164: 
        case 1165: 
        case 1166: 
        case 1167: 
        case 1168: 
        case 1169: 
        case 1170: 
        case 1171: 
        case 1172: 
        case 1173: 
        case 1174: 
        case 1175: 
        case 1176: 
        case 1177: 
        case 1178: 
        case 1179: 
        case 1180: 
        case 1181: 
        case 1182: 
        case 1183: 
        case 1184: 
        case 1185: 
        case 1186: 
        case 1187: 
        case 1188: 
        case 1189: 
        case 1190: 
        case 1191: 
        case 1192: 
        case 1193: 
        case 1194: 
        case 1195: 
        case 1196: 
        case 1197: 
        case 1198: 
        case 1199: 
        case 1200: 
        case 1201: 
        case 1202: 
        case 1203: 
        case 1204: 
        case 1205: 
        case 1206: 
        case 1207: 
        case 1208: 
        case 1209: 
        case 1210: 
        case 1211: 
        case 1212: 
        case 1213: 
        case 1214: 
        case 1215: 
        case 1216: 
        case 1217: 
        case 1218: 
        case 1219: 
        case 1220: 
        case 1221: 
        case 1222: 
        case 1223: 
        case 1224: 
        case 1225: 
        case 1226: 
        case 1227: 
        case 1228: 
        case 1229: 
        case 1230: 
        case 1231: 
        case 1232: 
        case 1233: 
        case 1234: 
        case 1235: 
        case 1236: 
        case 1237: 
        case 1238: 
        case 1239: 
        case 1240: 
        case 1241: 
        case 1242: 
        case 1243: 
        case 1244: 
        case 1245: 
        case 1246: 
        case 1247: 
        case 1248: 
        case 1249: 
        case 1250: 
        case 1251: 
        case 1252: 
        case 1253: 
        case 1254: 
        case 1255: 
        case 1256: 
        case 1257: 
        case 1258: 
        case 1259: 
        case 1260: 
        case 1261: 
        case 1262: 
        case 1263: 
        case 1264: 
        case 1265: 
        case 1266: 
        case 1267: 
        case 1268: 
        case 1269: 
        case 1270: 
        case 1271: 
        case 1272: 
        case 1273: 
        case 1274: 
        case 1275: 
        case 1276: 
        case 1277: 
        case 1278: 
        case 1279: 
        case 1280: 
        case 1281: 
        case 1282: 
        case 1283: 
        case 1284: 
        case 1285: 
        case 1286: 
        case 1287: 
        case 1288: 
        case 1289: 
        case 1290: 
        case 1291: 
        case 1292: 
        case 1293: 
        case 1294: 
        case 1295: 
        case 1296: 
        case 1297: 
        case 1298: 
        case 1299: 
        case 1300: 
        case 1301: 
        case 1302: 
        case 1303: 
        case 1304: 
        case 1305: 
        case 1306: 
        case 1307: 
        case 1308: 
        case 1309: 
        case 1310: 
        case 1311: 
        case 1312: 
        case 1313: 
        case 1314: 
        case 1315: 
        case 1316: 
        case 1317: 
        case 1318: 
        case 1319: 
        case 1320: 
        case 1321: 
        case 1322: 
        case 1323: 
        case 1324: 
        case 1325: 
        case 1326: 
        case 1327: 
        case 1328: 
        case 1329: 
        case 1330: 
        case 1331: 
        case 1332: 
        case 1333: 
        case 1334: 
        case 1335: 
        case 1336: 
        case 1337: 
        case 1338: 
        case 1339: 
        case 1340: 
        case 1341: 
        case 1342: 
        case 1343: 
        case 1344: 
        case 1345: 
        case 1346: 
        case 1347: 
        case 1348: 
        case 1349: 
        case 1350: 
        case 1351: 
        case 1352: 
        case 1353: 
        case 1354: 
        case 1355: 
        case 1356: 
        case 1357: 
        case 1358: 
        case 1359: 
        case 1360: 
        case 1361: 
        case 1362: 
        case 1363: 
        case 1364: 
        case 1365: 
        case 1366: 
        case 1367: 
        case 1368: 
        case 1369: 
        case 1370: 
        case 1371: 
        case 1372: 
        case 1373: 
        case 1374: 
        case 1375: 
        case 1376: 
        case 1377: 
        case 1378: 
        case 1379: 
        case 1380: 
        case 1381: 
        case 1382: 
        case 1383: 
        case 1384: 
        case 1385: 
        case 1386: 
        case 1387: 
        case 1388: 
        case 1389: 
        case 1390: 
        case 1391: 
        case 1392: 
        case 1393: 
        case 1394: 
        case 1395: 
        case 1396: 
        case 1397: 
        case 1398: 
        case 1399: 
        case 1400: 
        case 1401: 
        case 1402: 
        case 1403: 
        case 1404: 
        case 1405: 
        case 1406: 
        case 1407: 
        case 1408: 
        case 1409: 
        case 1410: 
        case 1411: 
        case 1412: 
        case 1413: 
        case 1414: 
        case 1415: 
        case 1416: 
        case 1417: 
        case 1418: 
        case 1419: 
        case 1420: 
        case 1421: 
        case 1422: 
        case 1423: 
        case 1424: 
        case 1425: 
        case 1426: 
        case 1427: 
        case 1428: 
        case 1429: 
        case 1430: 
        case 1431: 
        case 1432: 
        case 1433: 
        case 1434: 
        case 1435: 
        case 1436: 
        case 1437: 
        case 1438: 
        case 1439: 
        case 1440: 
        case 1441: 
        case 1442: 
        case 1443: 
        case 1444: 
        case 1445: 
        case 1446: 
        case 1447: 
        case 1448: 
        case 1449: 
        case 1450: 
        case 1451: 
        case 1452: 
        case 1453: 
        case 1454: 
        case 1455: 
        case 1456: 
        case 1457: 
        case 1458: 
        case 1459: 
        case 1460: 
        case 1461: 
        case 1462: 
        case 1463: 
        case 1464: 
        case 1465: 
        case 1466: 
        case 1467: 
        case 1468: 
        case 1469: 
        case 1470: 
        case 1471: 
        case 1472: 
        case 1473: 
        case 1474: 
        case 1475: 
        case 1476: 
        case 1477: 
        case 1478: 
        case 1479: 
        case 1480: 
        case 1481: 
        case 1482: 
        case 1483: 
        case 1484: 
        case 1485: 
        case 1486: 
        case 1487: 
        case 1488: 
        case 1489: 
        case 1490: 
        case 1491: 
        case 1492: 
        case 1493: 
        case 1494: 
        case 1495: 
        case 1496: 
        case 1497: 
        case 1498: 
        case 1499: 
        case 1500: 
        case 1501: 
        case 1502: 
        case 1503: 
        case 1504: 
        case 1505: 
        case 1506: 
        case 1507: 
        case 1508: 
        case 1509: 
        case 1510: 
        case 1511: 
        case 1512: 
        case 1513: 
        case 1514: 
        case 1515: 
        case 1516: 
        case 1517: 
        case 1518: 
        case 1519: 
        case 1520: 
        case 1521: 
        case 1522: 
        case 1523: 
        case 1524: 
        case 1525: 
        case 1526: 
        case 1527: 
        case 1528: 
        case 1529: 
        case 1530: 
        case 1531: 
        case 1532: 
        case 1533: 
        case 1534: 
        case 1535: 
        case 1536: 
        case 1537: 
        case 1538: 
        case 1539: 
        case 1540: 
        case 1541: 
        case 1542: 
        case 1543: 
        case 1544: 
        case 1545: 
        case 1546: 
        case 1547: 
        case 1548: 
        case 1549: 
        case 1550: 
        case 1551: 
        case 1552: 
        case 1553: 
        case 1554: 
        case 1555: 
        case 1556: 
        case 1557: 
        case 1558: 
        case 1559: 
        case 1560: 
        case 1561: 
        case 1562: 
        case 1563: 
        case 1564: 
        case 1565: 
        case 1566: 
        case 1567: 
        case 1568: 
        case 1569: 
        case 1570: 
        case 1571: 
        case 1572: 
        case 1573: 
        case 1574: 
        case 1575: 
        case 1576: 
        case 1577: 
        case 1578: 
        case 1579: 
        case 1580: 
        case 1581: 
        case 1582: 
        case 1583: 
        case 1584: 
        case 1585: 
        case 1586: 
        case 1587: 
        case 1588: 
        case 1589: 
        case 1590: 
        case 1591: 
        case 1592: 
        case 1593: 
        case 1594: 
        case 1595: 
        case 1596: 
        case 1597: 
        case 1598: 
        case 1599: 
        case 1600: 
        case 1601: 
        case 1602: 
        case 1603: 
        case 1604: 
        case 1605: 
        case 1606: 
        case 1607: 
        case 1608: 
        case 1609: 
        case 1610: 
        case 1611: 
        case 1612: 
        case 1613: 
        case 1614: 
        case 1615: 
        case 1616: 
        case 1617: 
        case 1618: 
        case 1619: 
        case 1620: 
        case 1621: 
        case 1622: 
        case 1623: 
        case 1624: 
        case 1625: 
        case 1626: 
        case 1627: 
        case 1628: 
        case 1629: 
        case 1630: 
        case 1631: 
        case 1632: 
        case 1633: 
        case 1634: 
        case 1635: 
        case 1636: 
        case 1637: 
        case 1638: 
        case 1639: 
        case 1640: 
        case 1641: 
        case 1642: 
        case 1643: 
        case 1644: 
        case 1645: 
        case 1646: 
        case 1647: 
        case 1648: 
        case 1649: 
        case 1650: 
        case 1651: 
        case 1652: 
        case 1653: 
        case 1654: 
        case 1655: 
            watch_read<struct pci_dev, FIELD_resource>::on(entry_, struct_addr_);
            break;
        case 1656: 
            watch_read<struct pci_dev, FIELD_transparent>::on(entry_, struct_addr_);
            watch_read<struct pci_dev, FIELD_multifunction>::on(entry_, struct_addr_);
            watch_read<struct pci_dev, FIELD_is_added>::on(entry_, struct_addr_);
            watch_read<struct pci_dev, FIELD_is_busmaster>::on(entry_, struct_addr_);
            watch_read<struct pci_dev, FIELD_no_msi>::on(entry_, struct_addr_);
            watch_read<struct pci_dev, FIELD_block_ucfg_access>::on(entry_, struct_addr_);
            watch_read<struct pci_dev, FIELD_broken_parity_status>::on(entry_, struct_addr_);
            watch_read<struct pci_dev, FIELD_irq_reroute_variant>::on(entry_, struct_addr_);
            break;
        case 1657: 
            watch_read<struct pci_dev, FIELD_irq_reroute_variant>::on(entry_, struct_addr_);
            watch_read<struct pci_dev, FIELD_msi_enabled>::on(entry_, struct_addr_);
            watch_read<struct pci_dev, FIELD_msix_enabled>::on(entry_, struct_addr_);
            watch_read<struct pci_dev, FIELD_ari_enabled>::on(entry_, struct_addr_);
            watch_read<struct pci_dev, FIELD_is_managed>::on(entry_, struct_addr_);
            watch_read<struct pci_dev, FIELD_is_pcie>::on(entry_, struct_addr_);
            watch_read<struct pci_dev, FIELD_needs_freset>::on(entry_, struct_addr_);
            watch_read<struct pci_dev, FIELD_state_saved>::on(entry_, struct_addr_);
            break;
        case 1658: 
            watch_read<struct pci_dev, FIELD_is_physfn>::on(entry_, struct_addr_);
            watch_read<struct pci_dev, FIELD_is_virtfn>::on(entry_, struct_addr_);
            watch_read<struct pci_dev, FIELD_reset_fn>::on(entry_, struct_addr_);
            watch_read<struct pci_dev, FIELD_is_hotplug_bridge>::on(entry_, struct_addr_);
            break;
        case 1660: 
        case 1661: 
            watch_read<struct pci_dev, FIELD_dev_flags>::on(entry_, struct_addr_);
            break;
        case 1664: 
        case 1665: 
        case 1666: 
        case 1667: 
            watch_read<struct pci_dev, FIELD_enable_cnt>::on(entry_, struct_addr_);
            break;
        case 1668: 
        case 1669: 
        case 1670: 
        case 1671: 
        case 1672: 
        case 1673: 
        case 1674: 
        case 1675: 
        case 1676: 
        case 1677: 
        case 1678: 
        case 1679: 
        case 1680: 
        case 1681: 
        case 1682: 
        case 1683: 
        case 1684: 
        case 1685: 
        case 1686: 
        case 1687: 
        case 1688: 
        case 1689: 
        case 1690: 
        case 1691: 
        case 1692: 
        case 1693: 
        case 1694: 
        case 1695: 
        case 1696: 
        case 1697: 
        case 1698: 
        case 1699: 
        case 1700: 
        case 1701: 
        case 1702: 
        case 1703: 
        case 1704: 
        case 1705: 
        case 1706: 
        case 1707: 
        case 1708: 
        case 1709: 
        case 1710: 
        case 1711: 
        case 1712: 
        case 1713: 
        case 1714: 
        case 1715: 
        case 1716: 
        case 1717: 
        case 1718: 
        case 1719: 
        case 1720: 
        case 1721: 
        case 1722: 
        case 1723: 
        case 1724: 
        case 1725: 
        case 1726: 
        case 1727: 
        case 1728: 
        case 1729: 
        case 1730: 
        case 1731: 
            watch_read<struct pci_dev, FIELD_saved_config_space>::on(entry_, struct_addr_);
            break;
        case 1736: 
        case 1737: 
        case 1738: 
        case 1739: 
        case 1740: 
        case 1741: 
        case 1742: 
        case 1743: 
            watch_read<struct pci_dev, FIELD_saved_cap_space>::on(entry_, struct_addr_);
            break;
        case 1744: 
        case 1745: 
        case 1746: 
        case 1747: 
        case 1748: 
        case 1749: 
        case 1750: 
        case 1751: 
            watch_read<struct pci_dev, FIELD_rom_attr>::on(entry_, struct_addr_);
            break;
        case 1752: 
        case 1753: 
        case 1754: 
        case 1755: 
            watch_read<struct pci_dev, FIELD_rom_attr_enabled>::on(entry_, struct_addr_);
            break;
        case 1760: 
        case 1761: 
        case 1762: 
        case 1763: 
        case 1764: 
        case 1765: 
        case 1766: 
        case 1767: 
        case 1768: 
        case 1769: 
        case 1770: 
        case 1771: 
        case 1772: 
        case 1773: 
        case 1774: 
        case 1775: 
        case 1776: 
        case 1777: 
        case 1778: 
        case 1779: 
        case 1780: 
        case 1781: 
        case 1782: 
        case 1783: 
        case 1784: 
        case 1785: 
        case 1786: 
        case 1787: 
        case 1788: 
        case 1789: 
        case 1790: 
        case 1791: 
        case 1792: 
        case 1793: 
        case 1794: 
        case 1795: 
        case 1796: 
        case 1797: 
        case 1798: 
        case 1799: 
        case 1800: 
        case 1801: 
        case 1802: 
        case 1803: 
        case 1804: 
        case 1805: 
        case 1806: 
        case 1807: 
        case 1808: 
        case 1809: 
        case 1810: 
        case 1811: 
        case 1812: 
        case 1813: 
        case 1814: 
        case 1815: 
        case 1816: 
        case 1817: 
        case 1818: 
        case 1819: 
        case 1820: 
        case 1821: 
        case 1822: 
        case 1823: 
        case 1824: 
        case 1825: 
        case 1826: 
        case 1827: 
        case 1828: 
        case 1829: 
        case 1830: 
        case 1831: 
        case 1832: 
        case 1833: 
        case 1834: 
        case 1835: 
        case 1836: 
        case 1837: 
        case 1838: 
        case 1839: 
        case 1840: 
        case 1841: 
        case 1842: 
        case 1843: 
        case 1844: 
        case 1845: 
        case 1846: 
        case 1847: 
        case 1848: 
        case 1849: 
        case 1850: 
        case 1851: 
        case 1852: 
        case 1853: 
        case 1854: 
        case 1855: 
        case 1856: 
        case 1857: 
        case 1858: 
        case 1859: 
        case 1860: 
        case 1861: 
        case 1862: 
        case 1863: 
        case 1864: 
        case 1865: 
        case 1866: 
        case 1867: 
        case 1868: 
        case 1869: 
        case 1870: 
        case 1871: 
        case 1872: 
        case 1873: 
        case 1874: 
        case 1875: 
        case 1876: 
        case 1877: 
        case 1878: 
        case 1879: 
        case 1880: 
        case 1881: 
        case 1882: 
        case 1883: 
        case 1884: 
        case 1885: 
        case 1886: 
        case 1887: 
        case 1888: 
        case 1889: 
        case 1890: 
        case 1891: 
        case 1892: 
        case 1893: 
        case 1894: 
        case 1895: 
        case 1896: 
        case 1897: 
        case 1898: 
        case 1899: 
        case 1900: 
        case 1901: 
        case 1902: 
        case 1903: 
            watch_read<struct pci_dev, FIELD_res_attr>::on(entry_, struct_addr_);
            break;
        case 1904: 
        case 1905: 
        case 1906: 
        case 1907: 
        case 1908: 
        case 1909: 
        case 1910: 
        case 1911: 
        case 1912: 
        case 1913: 
        case 1914: 
        case 1915: 
        case 1916: 
        case 1917: 
        case 1918: 
        case 1919: 
        case 1920: 
        case 1921: 
        case 1922: 
        case 1923: 
        case 1924: 
        case 1925: 
        case 1926: 
        case 1927: 
        case 1928: 
        case 1929: 
        case 1930: 
        case 1931: 
        case 1932: 
        case 1933: 
        case 1934: 
        case 1935: 
        case 1936: 
        case 1937: 
        case 1938: 
        case 1939: 
        case 1940: 
        case 1941: 
        case 1942: 
        case 1943: 
        case 1944: 
        case 1945: 
        case 1946: 
        case 1947: 
        case 1948: 
        case 1949: 
        case 1950: 
        case 1951: 
        case 1952: 
        case 1953: 
        case 1954: 
        case 1955: 
        case 1956: 
        case 1957: 
        case 1958: 
        case 1959: 
        case 1960: 
        case 1961: 
        case 1962: 
        case 1963: 
        case 1964: 
        case 1965: 
        case 1966: 
        case 1967: 
        case 1968: 
        case 1969: 
        case 1970: 
        case 1971: 
        case 1972: 
        case 1973: 
        case 1974: 
        case 1975: 
        case 1976: 
        case 1977: 
        case 1978: 
        case 1979: 
        case 1980: 
        case 1981: 
        case 1982: 
        case 1983: 
        case 1984: 
        case 1985: 
        case 1986: 
        case 1987: 
        case 1988: 
        case 1989: 
        case 1990: 
        case 1991: 
        case 1992: 
        case 1993: 
        case 1994: 
        case 1995: 
        case 1996: 
        case 1997: 
        case 1998: 
        case 1999: 
        case 2000: 
        case 2001: 
        case 2002: 
        case 2003: 
        case 2004: 
        case 2005: 
        case 2006: 
        case 2007: 
        case 2008: 
        case 2009: 
        case 2010: 
        case 2011: 
        case 2012: 
        case 2013: 
        case 2014: 
        case 2015: 
        case 2016: 
        case 2017: 
        case 2018: 
        case 2019: 
        case 2020: 
        case 2021: 
        case 2022: 
        case 2023: 
        case 2024: 
        case 2025: 
        case 2026: 
        case 2027: 
        case 2028: 
        case 2029: 
        case 2030: 
        case 2031: 
        case 2032: 
        case 2033: 
        case 2034: 
        case 2035: 
        case 2036: 
        case 2037: 
        case 2038: 
        case 2039: 
        case 2040: 
        case 2041: 
        case 2042: 
        case 2043: 
        case 2044: 
        case 2045: 
        case 2046: 
        case 2047: 
            watch_read<struct pci_dev, FIELD_res_attr_wc>::on(entry_, struct_addr_);
            break;
        case 2048: 
        case 2049: 
        case 2050: 
        case 2051: 
        case 2052: 
        case 2053: 
        case 2054: 
        case 2055: 
        case 2056: 
        case 2057: 
        case 2058: 
        case 2059: 
        case 2060: 
        case 2061: 
        case 2062: 
        case 2063: 
            watch_read<struct pci_dev, FIELD_msi_list>::on(entry_, struct_addr_);
            break;
        case 2064: 
        case 2065: 
        case 2066: 
        case 2067: 
        case 2068: 
        case 2069: 
        case 2070: 
        case 2071: 
            watch_read<struct pci_dev, FIELD_vpd>::on(entry_, struct_addr_);
            break;
        case 2072: 
        case 2073: 
        case 2074: 
        case 2075: 
        case 2076: 
        case 2077: 
        case 2078: 
        case 2079: 
            watch_read<struct pci_dev, FIELD_sriov>::on(entry_, struct_addr_);
            watch_read<struct pci_dev, FIELD_physfn>::on(entry_, struct_addr_);
            break;
        case 2080: 
        case 2081: 
        case 2082: 
        case 2083: 
        case 2084: 
        case 2085: 
        case 2086: 
        case 2087: 
            watch_read<struct pci_dev, FIELD_ats>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct pci_dev *struct_addr_(((struct pci_dev *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct pci_dev, FIELD_bus_list>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct pci_dev, FIELD_bus>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct pci_dev, FIELD_subordinate>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct pci_dev, FIELD_sysdata>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct pci_dev, FIELD_procent>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct pci_dev, FIELD_slot>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
            watch_write<struct pci_dev, FIELD_devfn>::on(entry_, struct_addr_, val_);
            break;
        case 60: 
        case 61: 
            watch_write<struct pci_dev, FIELD_vendor>::on(entry_, struct_addr_, val_);
            break;
        case 62: 
        case 63: 
            watch_write<struct pci_dev, FIELD_device>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
            watch_write<struct pci_dev, FIELD_subsystem_vendor>::on(entry_, struct_addr_, val_);
            break;
        case 66: 
        case 67: 
            watch_write<struct pci_dev, FIELD_subsystem_device>::on(entry_, struct_addr_, val_);
            break;
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct pci_dev, FIELD_class_ele>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
            watch_write<struct pci_dev, FIELD_revision>::on(entry_, struct_addr_, val_);
            break;
        case 73: 
            watch_write<struct pci_dev, FIELD_hdr_type>::on(entry_, struct_addr_, val_);
            break;
        case 74: 
            watch_write<struct pci_dev, FIELD_pcie_type>::on(entry_, struct_addr_, val_);
            break;
        case 75: 
            watch_write<struct pci_dev, FIELD_rom_base_reg>::on(entry_, struct_addr_, val_);
            break;
        case 76: 
            watch_write<struct pci_dev, FIELD_pin>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct pci_dev, FIELD_driver>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct pci_dev, FIELD_dma_mask>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_write<struct pci_dev, FIELD_dma_parms>::on(entry_, struct_addr_, val_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
            watch_write<struct pci_dev, FIELD_current_state>::on(entry_, struct_addr_, val_);
            break;
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_write<struct pci_dev, FIELD_pm_cap>::on(entry_, struct_addr_, val_);
            break;
        case 120: 
            watch_write<struct pci_dev, FIELD_pme_support>::on(entry_, struct_addr_, val_);
            watch_write<struct pci_dev, FIELD_d1_support>::on(entry_, struct_addr_, val_);
            watch_write<struct pci_dev, FIELD_d2_support>::on(entry_, struct_addr_, val_);
            watch_write<struct pci_dev, FIELD_no_d1d2>::on(entry_, struct_addr_, val_);
            break;
        case 121: 
            watch_write<struct pci_dev, FIELD_wakeup_prepared>::on(entry_, struct_addr_, val_);
            break;
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_write<struct pci_dev, FIELD_error_state>::on(entry_, struct_addr_, val_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
        case 528: 
        case 529: 
        case 530: 
        case 531: 
        case 532: 
        case 533: 
        case 534: 
        case 535: 
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
        case 544: 
        case 545: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
        case 552: 
        case 553: 
        case 554: 
        case 555: 
        case 556: 
        case 557: 
        case 558: 
        case 559: 
        case 560: 
        case 561: 
        case 562: 
        case 563: 
        case 564: 
        case 565: 
        case 566: 
        case 567: 
        case 568: 
        case 569: 
        case 570: 
        case 571: 
        case 572: 
        case 573: 
        case 574: 
        case 575: 
        case 576: 
        case 577: 
        case 578: 
        case 579: 
        case 580: 
        case 581: 
        case 582: 
        case 583: 
        case 584: 
        case 585: 
        case 586: 
        case 587: 
        case 588: 
        case 589: 
        case 590: 
        case 591: 
        case 592: 
        case 593: 
        case 594: 
        case 595: 
        case 596: 
        case 597: 
        case 598: 
        case 599: 
        case 600: 
        case 601: 
        case 602: 
        case 603: 
        case 604: 
        case 605: 
        case 606: 
        case 607: 
        case 608: 
        case 609: 
        case 610: 
        case 611: 
        case 612: 
        case 613: 
        case 614: 
        case 615: 
        case 616: 
        case 617: 
        case 618: 
        case 619: 
        case 620: 
        case 621: 
        case 622: 
        case 623: 
        case 624: 
        case 625: 
        case 626: 
        case 627: 
        case 628: 
        case 629: 
        case 630: 
        case 631: 
        case 632: 
        case 633: 
        case 634: 
        case 635: 
        case 636: 
        case 637: 
        case 638: 
        case 639: 
            watch_write<struct pci_dev, FIELD_dev>::on(entry_, struct_addr_, val_);
            break;
        case 640: 
        case 641: 
        case 642: 
        case 643: 
            watch_write<struct pci_dev, FIELD_cfg_size>::on(entry_, struct_addr_, val_);
            break;
        case 644: 
        case 645: 
        case 646: 
        case 647: 
            watch_write<struct pci_dev, FIELD_irq>::on(entry_, struct_addr_, val_);
            break;
        case 648: 
        case 649: 
        case 650: 
        case 651: 
        case 652: 
        case 653: 
        case 654: 
        case 655: 
        case 656: 
        case 657: 
        case 658: 
        case 659: 
        case 660: 
        case 661: 
        case 662: 
        case 663: 
        case 664: 
        case 665: 
        case 666: 
        case 667: 
        case 668: 
        case 669: 
        case 670: 
        case 671: 
        case 672: 
        case 673: 
        case 674: 
        case 675: 
        case 676: 
        case 677: 
        case 678: 
        case 679: 
        case 680: 
        case 681: 
        case 682: 
        case 683: 
        case 684: 
        case 685: 
        case 686: 
        case 687: 
        case 688: 
        case 689: 
        case 690: 
        case 691: 
        case 692: 
        case 693: 
        case 694: 
        case 695: 
        case 696: 
        case 697: 
        case 698: 
        case 699: 
        case 700: 
        case 701: 
        case 702: 
        case 703: 
        case 704: 
        case 705: 
        case 706: 
        case 707: 
        case 708: 
        case 709: 
        case 710: 
        case 711: 
        case 712: 
        case 713: 
        case 714: 
        case 715: 
        case 716: 
        case 717: 
        case 718: 
        case 719: 
        case 720: 
        case 721: 
        case 722: 
        case 723: 
        case 724: 
        case 725: 
        case 726: 
        case 727: 
        case 728: 
        case 729: 
        case 730: 
        case 731: 
        case 732: 
        case 733: 
        case 734: 
        case 735: 
        case 736: 
        case 737: 
        case 738: 
        case 739: 
        case 740: 
        case 741: 
        case 742: 
        case 743: 
        case 744: 
        case 745: 
        case 746: 
        case 747: 
        case 748: 
        case 749: 
        case 750: 
        case 751: 
        case 752: 
        case 753: 
        case 754: 
        case 755: 
        case 756: 
        case 757: 
        case 758: 
        case 759: 
        case 760: 
        case 761: 
        case 762: 
        case 763: 
        case 764: 
        case 765: 
        case 766: 
        case 767: 
        case 768: 
        case 769: 
        case 770: 
        case 771: 
        case 772: 
        case 773: 
        case 774: 
        case 775: 
        case 776: 
        case 777: 
        case 778: 
        case 779: 
        case 780: 
        case 781: 
        case 782: 
        case 783: 
        case 784: 
        case 785: 
        case 786: 
        case 787: 
        case 788: 
        case 789: 
        case 790: 
        case 791: 
        case 792: 
        case 793: 
        case 794: 
        case 795: 
        case 796: 
        case 797: 
        case 798: 
        case 799: 
        case 800: 
        case 801: 
        case 802: 
        case 803: 
        case 804: 
        case 805: 
        case 806: 
        case 807: 
        case 808: 
        case 809: 
        case 810: 
        case 811: 
        case 812: 
        case 813: 
        case 814: 
        case 815: 
        case 816: 
        case 817: 
        case 818: 
        case 819: 
        case 820: 
        case 821: 
        case 822: 
        case 823: 
        case 824: 
        case 825: 
        case 826: 
        case 827: 
        case 828: 
        case 829: 
        case 830: 
        case 831: 
        case 832: 
        case 833: 
        case 834: 
        case 835: 
        case 836: 
        case 837: 
        case 838: 
        case 839: 
        case 840: 
        case 841: 
        case 842: 
        case 843: 
        case 844: 
        case 845: 
        case 846: 
        case 847: 
        case 848: 
        case 849: 
        case 850: 
        case 851: 
        case 852: 
        case 853: 
        case 854: 
        case 855: 
        case 856: 
        case 857: 
        case 858: 
        case 859: 
        case 860: 
        case 861: 
        case 862: 
        case 863: 
        case 864: 
        case 865: 
        case 866: 
        case 867: 
        case 868: 
        case 869: 
        case 870: 
        case 871: 
        case 872: 
        case 873: 
        case 874: 
        case 875: 
        case 876: 
        case 877: 
        case 878: 
        case 879: 
        case 880: 
        case 881: 
        case 882: 
        case 883: 
        case 884: 
        case 885: 
        case 886: 
        case 887: 
        case 888: 
        case 889: 
        case 890: 
        case 891: 
        case 892: 
        case 893: 
        case 894: 
        case 895: 
        case 896: 
        case 897: 
        case 898: 
        case 899: 
        case 900: 
        case 901: 
        case 902: 
        case 903: 
        case 904: 
        case 905: 
        case 906: 
        case 907: 
        case 908: 
        case 909: 
        case 910: 
        case 911: 
        case 912: 
        case 913: 
        case 914: 
        case 915: 
        case 916: 
        case 917: 
        case 918: 
        case 919: 
        case 920: 
        case 921: 
        case 922: 
        case 923: 
        case 924: 
        case 925: 
        case 926: 
        case 927: 
        case 928: 
        case 929: 
        case 930: 
        case 931: 
        case 932: 
        case 933: 
        case 934: 
        case 935: 
        case 936: 
        case 937: 
        case 938: 
        case 939: 
        case 940: 
        case 941: 
        case 942: 
        case 943: 
        case 944: 
        case 945: 
        case 946: 
        case 947: 
        case 948: 
        case 949: 
        case 950: 
        case 951: 
        case 952: 
        case 953: 
        case 954: 
        case 955: 
        case 956: 
        case 957: 
        case 958: 
        case 959: 
        case 960: 
        case 961: 
        case 962: 
        case 963: 
        case 964: 
        case 965: 
        case 966: 
        case 967: 
        case 968: 
        case 969: 
        case 970: 
        case 971: 
        case 972: 
        case 973: 
        case 974: 
        case 975: 
        case 976: 
        case 977: 
        case 978: 
        case 979: 
        case 980: 
        case 981: 
        case 982: 
        case 983: 
        case 984: 
        case 985: 
        case 986: 
        case 987: 
        case 988: 
        case 989: 
        case 990: 
        case 991: 
        case 992: 
        case 993: 
        case 994: 
        case 995: 
        case 996: 
        case 997: 
        case 998: 
        case 999: 
        case 1000: 
        case 1001: 
        case 1002: 
        case 1003: 
        case 1004: 
        case 1005: 
        case 1006: 
        case 1007: 
        case 1008: 
        case 1009: 
        case 1010: 
        case 1011: 
        case 1012: 
        case 1013: 
        case 1014: 
        case 1015: 
        case 1016: 
        case 1017: 
        case 1018: 
        case 1019: 
        case 1020: 
        case 1021: 
        case 1022: 
        case 1023: 
        case 1024: 
        case 1025: 
        case 1026: 
        case 1027: 
        case 1028: 
        case 1029: 
        case 1030: 
        case 1031: 
        case 1032: 
        case 1033: 
        case 1034: 
        case 1035: 
        case 1036: 
        case 1037: 
        case 1038: 
        case 1039: 
        case 1040: 
        case 1041: 
        case 1042: 
        case 1043: 
        case 1044: 
        case 1045: 
        case 1046: 
        case 1047: 
        case 1048: 
        case 1049: 
        case 1050: 
        case 1051: 
        case 1052: 
        case 1053: 
        case 1054: 
        case 1055: 
        case 1056: 
        case 1057: 
        case 1058: 
        case 1059: 
        case 1060: 
        case 1061: 
        case 1062: 
        case 1063: 
        case 1064: 
        case 1065: 
        case 1066: 
        case 1067: 
        case 1068: 
        case 1069: 
        case 1070: 
        case 1071: 
        case 1072: 
        case 1073: 
        case 1074: 
        case 1075: 
        case 1076: 
        case 1077: 
        case 1078: 
        case 1079: 
        case 1080: 
        case 1081: 
        case 1082: 
        case 1083: 
        case 1084: 
        case 1085: 
        case 1086: 
        case 1087: 
        case 1088: 
        case 1089: 
        case 1090: 
        case 1091: 
        case 1092: 
        case 1093: 
        case 1094: 
        case 1095: 
        case 1096: 
        case 1097: 
        case 1098: 
        case 1099: 
        case 1100: 
        case 1101: 
        case 1102: 
        case 1103: 
        case 1104: 
        case 1105: 
        case 1106: 
        case 1107: 
        case 1108: 
        case 1109: 
        case 1110: 
        case 1111: 
        case 1112: 
        case 1113: 
        case 1114: 
        case 1115: 
        case 1116: 
        case 1117: 
        case 1118: 
        case 1119: 
        case 1120: 
        case 1121: 
        case 1122: 
        case 1123: 
        case 1124: 
        case 1125: 
        case 1126: 
        case 1127: 
        case 1128: 
        case 1129: 
        case 1130: 
        case 1131: 
        case 1132: 
        case 1133: 
        case 1134: 
        case 1135: 
        case 1136: 
        case 1137: 
        case 1138: 
        case 1139: 
        case 1140: 
        case 1141: 
        case 1142: 
        case 1143: 
        case 1144: 
        case 1145: 
        case 1146: 
        case 1147: 
        case 1148: 
        case 1149: 
        case 1150: 
        case 1151: 
        case 1152: 
        case 1153: 
        case 1154: 
        case 1155: 
        case 1156: 
        case 1157: 
        case 1158: 
        case 1159: 
        case 1160: 
        case 1161: 
        case 1162: 
        case 1163: 
        case 1164: 
        case 1165: 
        case 1166: 
        case 1167: 
        case 1168: 
        case 1169: 
        case 1170: 
        case 1171: 
        case 1172: 
        case 1173: 
        case 1174: 
        case 1175: 
        case 1176: 
        case 1177: 
        case 1178: 
        case 1179: 
        case 1180: 
        case 1181: 
        case 1182: 
        case 1183: 
        case 1184: 
        case 1185: 
        case 1186: 
        case 1187: 
        case 1188: 
        case 1189: 
        case 1190: 
        case 1191: 
        case 1192: 
        case 1193: 
        case 1194: 
        case 1195: 
        case 1196: 
        case 1197: 
        case 1198: 
        case 1199: 
        case 1200: 
        case 1201: 
        case 1202: 
        case 1203: 
        case 1204: 
        case 1205: 
        case 1206: 
        case 1207: 
        case 1208: 
        case 1209: 
        case 1210: 
        case 1211: 
        case 1212: 
        case 1213: 
        case 1214: 
        case 1215: 
        case 1216: 
        case 1217: 
        case 1218: 
        case 1219: 
        case 1220: 
        case 1221: 
        case 1222: 
        case 1223: 
        case 1224: 
        case 1225: 
        case 1226: 
        case 1227: 
        case 1228: 
        case 1229: 
        case 1230: 
        case 1231: 
        case 1232: 
        case 1233: 
        case 1234: 
        case 1235: 
        case 1236: 
        case 1237: 
        case 1238: 
        case 1239: 
        case 1240: 
        case 1241: 
        case 1242: 
        case 1243: 
        case 1244: 
        case 1245: 
        case 1246: 
        case 1247: 
        case 1248: 
        case 1249: 
        case 1250: 
        case 1251: 
        case 1252: 
        case 1253: 
        case 1254: 
        case 1255: 
        case 1256: 
        case 1257: 
        case 1258: 
        case 1259: 
        case 1260: 
        case 1261: 
        case 1262: 
        case 1263: 
        case 1264: 
        case 1265: 
        case 1266: 
        case 1267: 
        case 1268: 
        case 1269: 
        case 1270: 
        case 1271: 
        case 1272: 
        case 1273: 
        case 1274: 
        case 1275: 
        case 1276: 
        case 1277: 
        case 1278: 
        case 1279: 
        case 1280: 
        case 1281: 
        case 1282: 
        case 1283: 
        case 1284: 
        case 1285: 
        case 1286: 
        case 1287: 
        case 1288: 
        case 1289: 
        case 1290: 
        case 1291: 
        case 1292: 
        case 1293: 
        case 1294: 
        case 1295: 
        case 1296: 
        case 1297: 
        case 1298: 
        case 1299: 
        case 1300: 
        case 1301: 
        case 1302: 
        case 1303: 
        case 1304: 
        case 1305: 
        case 1306: 
        case 1307: 
        case 1308: 
        case 1309: 
        case 1310: 
        case 1311: 
        case 1312: 
        case 1313: 
        case 1314: 
        case 1315: 
        case 1316: 
        case 1317: 
        case 1318: 
        case 1319: 
        case 1320: 
        case 1321: 
        case 1322: 
        case 1323: 
        case 1324: 
        case 1325: 
        case 1326: 
        case 1327: 
        case 1328: 
        case 1329: 
        case 1330: 
        case 1331: 
        case 1332: 
        case 1333: 
        case 1334: 
        case 1335: 
        case 1336: 
        case 1337: 
        case 1338: 
        case 1339: 
        case 1340: 
        case 1341: 
        case 1342: 
        case 1343: 
        case 1344: 
        case 1345: 
        case 1346: 
        case 1347: 
        case 1348: 
        case 1349: 
        case 1350: 
        case 1351: 
        case 1352: 
        case 1353: 
        case 1354: 
        case 1355: 
        case 1356: 
        case 1357: 
        case 1358: 
        case 1359: 
        case 1360: 
        case 1361: 
        case 1362: 
        case 1363: 
        case 1364: 
        case 1365: 
        case 1366: 
        case 1367: 
        case 1368: 
        case 1369: 
        case 1370: 
        case 1371: 
        case 1372: 
        case 1373: 
        case 1374: 
        case 1375: 
        case 1376: 
        case 1377: 
        case 1378: 
        case 1379: 
        case 1380: 
        case 1381: 
        case 1382: 
        case 1383: 
        case 1384: 
        case 1385: 
        case 1386: 
        case 1387: 
        case 1388: 
        case 1389: 
        case 1390: 
        case 1391: 
        case 1392: 
        case 1393: 
        case 1394: 
        case 1395: 
        case 1396: 
        case 1397: 
        case 1398: 
        case 1399: 
        case 1400: 
        case 1401: 
        case 1402: 
        case 1403: 
        case 1404: 
        case 1405: 
        case 1406: 
        case 1407: 
        case 1408: 
        case 1409: 
        case 1410: 
        case 1411: 
        case 1412: 
        case 1413: 
        case 1414: 
        case 1415: 
        case 1416: 
        case 1417: 
        case 1418: 
        case 1419: 
        case 1420: 
        case 1421: 
        case 1422: 
        case 1423: 
        case 1424: 
        case 1425: 
        case 1426: 
        case 1427: 
        case 1428: 
        case 1429: 
        case 1430: 
        case 1431: 
        case 1432: 
        case 1433: 
        case 1434: 
        case 1435: 
        case 1436: 
        case 1437: 
        case 1438: 
        case 1439: 
        case 1440: 
        case 1441: 
        case 1442: 
        case 1443: 
        case 1444: 
        case 1445: 
        case 1446: 
        case 1447: 
        case 1448: 
        case 1449: 
        case 1450: 
        case 1451: 
        case 1452: 
        case 1453: 
        case 1454: 
        case 1455: 
        case 1456: 
        case 1457: 
        case 1458: 
        case 1459: 
        case 1460: 
        case 1461: 
        case 1462: 
        case 1463: 
        case 1464: 
        case 1465: 
        case 1466: 
        case 1467: 
        case 1468: 
        case 1469: 
        case 1470: 
        case 1471: 
        case 1472: 
        case 1473: 
        case 1474: 
        case 1475: 
        case 1476: 
        case 1477: 
        case 1478: 
        case 1479: 
        case 1480: 
        case 1481: 
        case 1482: 
        case 1483: 
        case 1484: 
        case 1485: 
        case 1486: 
        case 1487: 
        case 1488: 
        case 1489: 
        case 1490: 
        case 1491: 
        case 1492: 
        case 1493: 
        case 1494: 
        case 1495: 
        case 1496: 
        case 1497: 
        case 1498: 
        case 1499: 
        case 1500: 
        case 1501: 
        case 1502: 
        case 1503: 
        case 1504: 
        case 1505: 
        case 1506: 
        case 1507: 
        case 1508: 
        case 1509: 
        case 1510: 
        case 1511: 
        case 1512: 
        case 1513: 
        case 1514: 
        case 1515: 
        case 1516: 
        case 1517: 
        case 1518: 
        case 1519: 
        case 1520: 
        case 1521: 
        case 1522: 
        case 1523: 
        case 1524: 
        case 1525: 
        case 1526: 
        case 1527: 
        case 1528: 
        case 1529: 
        case 1530: 
        case 1531: 
        case 1532: 
        case 1533: 
        case 1534: 
        case 1535: 
        case 1536: 
        case 1537: 
        case 1538: 
        case 1539: 
        case 1540: 
        case 1541: 
        case 1542: 
        case 1543: 
        case 1544: 
        case 1545: 
        case 1546: 
        case 1547: 
        case 1548: 
        case 1549: 
        case 1550: 
        case 1551: 
        case 1552: 
        case 1553: 
        case 1554: 
        case 1555: 
        case 1556: 
        case 1557: 
        case 1558: 
        case 1559: 
        case 1560: 
        case 1561: 
        case 1562: 
        case 1563: 
        case 1564: 
        case 1565: 
        case 1566: 
        case 1567: 
        case 1568: 
        case 1569: 
        case 1570: 
        case 1571: 
        case 1572: 
        case 1573: 
        case 1574: 
        case 1575: 
        case 1576: 
        case 1577: 
        case 1578: 
        case 1579: 
        case 1580: 
        case 1581: 
        case 1582: 
        case 1583: 
        case 1584: 
        case 1585: 
        case 1586: 
        case 1587: 
        case 1588: 
        case 1589: 
        case 1590: 
        case 1591: 
        case 1592: 
        case 1593: 
        case 1594: 
        case 1595: 
        case 1596: 
        case 1597: 
        case 1598: 
        case 1599: 
        case 1600: 
        case 1601: 
        case 1602: 
        case 1603: 
        case 1604: 
        case 1605: 
        case 1606: 
        case 1607: 
        case 1608: 
        case 1609: 
        case 1610: 
        case 1611: 
        case 1612: 
        case 1613: 
        case 1614: 
        case 1615: 
        case 1616: 
        case 1617: 
        case 1618: 
        case 1619: 
        case 1620: 
        case 1621: 
        case 1622: 
        case 1623: 
        case 1624: 
        case 1625: 
        case 1626: 
        case 1627: 
        case 1628: 
        case 1629: 
        case 1630: 
        case 1631: 
        case 1632: 
        case 1633: 
        case 1634: 
        case 1635: 
        case 1636: 
        case 1637: 
        case 1638: 
        case 1639: 
        case 1640: 
        case 1641: 
        case 1642: 
        case 1643: 
        case 1644: 
        case 1645: 
        case 1646: 
        case 1647: 
        case 1648: 
        case 1649: 
        case 1650: 
        case 1651: 
        case 1652: 
        case 1653: 
        case 1654: 
        case 1655: 
            watch_write<struct pci_dev, FIELD_resource>::on(entry_, struct_addr_, val_);
            break;
        case 1656: 
            watch_write<struct pci_dev, FIELD_transparent>::on(entry_, struct_addr_, val_);
            watch_write<struct pci_dev, FIELD_multifunction>::on(entry_, struct_addr_, val_);
            watch_write<struct pci_dev, FIELD_is_added>::on(entry_, struct_addr_, val_);
            watch_write<struct pci_dev, FIELD_is_busmaster>::on(entry_, struct_addr_, val_);
            watch_write<struct pci_dev, FIELD_no_msi>::on(entry_, struct_addr_, val_);
            watch_write<struct pci_dev, FIELD_block_ucfg_access>::on(entry_, struct_addr_, val_);
            watch_write<struct pci_dev, FIELD_broken_parity_status>::on(entry_, struct_addr_, val_);
            watch_write<struct pci_dev, FIELD_irq_reroute_variant>::on(entry_, struct_addr_, val_);
            break;
        case 1657: 
            watch_write<struct pci_dev, FIELD_irq_reroute_variant>::on(entry_, struct_addr_, val_);
            watch_write<struct pci_dev, FIELD_msi_enabled>::on(entry_, struct_addr_, val_);
            watch_write<struct pci_dev, FIELD_msix_enabled>::on(entry_, struct_addr_, val_);
            watch_write<struct pci_dev, FIELD_ari_enabled>::on(entry_, struct_addr_, val_);
            watch_write<struct pci_dev, FIELD_is_managed>::on(entry_, struct_addr_, val_);
            watch_write<struct pci_dev, FIELD_is_pcie>::on(entry_, struct_addr_, val_);
            watch_write<struct pci_dev, FIELD_needs_freset>::on(entry_, struct_addr_, val_);
            watch_write<struct pci_dev, FIELD_state_saved>::on(entry_, struct_addr_, val_);
            break;
        case 1658: 
            watch_write<struct pci_dev, FIELD_is_physfn>::on(entry_, struct_addr_, val_);
            watch_write<struct pci_dev, FIELD_is_virtfn>::on(entry_, struct_addr_, val_);
            watch_write<struct pci_dev, FIELD_reset_fn>::on(entry_, struct_addr_, val_);
            watch_write<struct pci_dev, FIELD_is_hotplug_bridge>::on(entry_, struct_addr_, val_);
            break;
        case 1660: 
        case 1661: 
            watch_write<struct pci_dev, FIELD_dev_flags>::on(entry_, struct_addr_, val_);
            break;
        case 1664: 
        case 1665: 
        case 1666: 
        case 1667: 
            watch_write<struct pci_dev, FIELD_enable_cnt>::on(entry_, struct_addr_, val_);
            break;
        case 1668: 
        case 1669: 
        case 1670: 
        case 1671: 
        case 1672: 
        case 1673: 
        case 1674: 
        case 1675: 
        case 1676: 
        case 1677: 
        case 1678: 
        case 1679: 
        case 1680: 
        case 1681: 
        case 1682: 
        case 1683: 
        case 1684: 
        case 1685: 
        case 1686: 
        case 1687: 
        case 1688: 
        case 1689: 
        case 1690: 
        case 1691: 
        case 1692: 
        case 1693: 
        case 1694: 
        case 1695: 
        case 1696: 
        case 1697: 
        case 1698: 
        case 1699: 
        case 1700: 
        case 1701: 
        case 1702: 
        case 1703: 
        case 1704: 
        case 1705: 
        case 1706: 
        case 1707: 
        case 1708: 
        case 1709: 
        case 1710: 
        case 1711: 
        case 1712: 
        case 1713: 
        case 1714: 
        case 1715: 
        case 1716: 
        case 1717: 
        case 1718: 
        case 1719: 
        case 1720: 
        case 1721: 
        case 1722: 
        case 1723: 
        case 1724: 
        case 1725: 
        case 1726: 
        case 1727: 
        case 1728: 
        case 1729: 
        case 1730: 
        case 1731: 
            watch_write<struct pci_dev, FIELD_saved_config_space>::on(entry_, struct_addr_, val_);
            break;
        case 1736: 
        case 1737: 
        case 1738: 
        case 1739: 
        case 1740: 
        case 1741: 
        case 1742: 
        case 1743: 
            watch_write<struct pci_dev, FIELD_saved_cap_space>::on(entry_, struct_addr_, val_);
            break;
        case 1744: 
        case 1745: 
        case 1746: 
        case 1747: 
        case 1748: 
        case 1749: 
        case 1750: 
        case 1751: 
            watch_write<struct pci_dev, FIELD_rom_attr>::on(entry_, struct_addr_, val_);
            break;
        case 1752: 
        case 1753: 
        case 1754: 
        case 1755: 
            watch_write<struct pci_dev, FIELD_rom_attr_enabled>::on(entry_, struct_addr_, val_);
            break;
        case 1760: 
        case 1761: 
        case 1762: 
        case 1763: 
        case 1764: 
        case 1765: 
        case 1766: 
        case 1767: 
        case 1768: 
        case 1769: 
        case 1770: 
        case 1771: 
        case 1772: 
        case 1773: 
        case 1774: 
        case 1775: 
        case 1776: 
        case 1777: 
        case 1778: 
        case 1779: 
        case 1780: 
        case 1781: 
        case 1782: 
        case 1783: 
        case 1784: 
        case 1785: 
        case 1786: 
        case 1787: 
        case 1788: 
        case 1789: 
        case 1790: 
        case 1791: 
        case 1792: 
        case 1793: 
        case 1794: 
        case 1795: 
        case 1796: 
        case 1797: 
        case 1798: 
        case 1799: 
        case 1800: 
        case 1801: 
        case 1802: 
        case 1803: 
        case 1804: 
        case 1805: 
        case 1806: 
        case 1807: 
        case 1808: 
        case 1809: 
        case 1810: 
        case 1811: 
        case 1812: 
        case 1813: 
        case 1814: 
        case 1815: 
        case 1816: 
        case 1817: 
        case 1818: 
        case 1819: 
        case 1820: 
        case 1821: 
        case 1822: 
        case 1823: 
        case 1824: 
        case 1825: 
        case 1826: 
        case 1827: 
        case 1828: 
        case 1829: 
        case 1830: 
        case 1831: 
        case 1832: 
        case 1833: 
        case 1834: 
        case 1835: 
        case 1836: 
        case 1837: 
        case 1838: 
        case 1839: 
        case 1840: 
        case 1841: 
        case 1842: 
        case 1843: 
        case 1844: 
        case 1845: 
        case 1846: 
        case 1847: 
        case 1848: 
        case 1849: 
        case 1850: 
        case 1851: 
        case 1852: 
        case 1853: 
        case 1854: 
        case 1855: 
        case 1856: 
        case 1857: 
        case 1858: 
        case 1859: 
        case 1860: 
        case 1861: 
        case 1862: 
        case 1863: 
        case 1864: 
        case 1865: 
        case 1866: 
        case 1867: 
        case 1868: 
        case 1869: 
        case 1870: 
        case 1871: 
        case 1872: 
        case 1873: 
        case 1874: 
        case 1875: 
        case 1876: 
        case 1877: 
        case 1878: 
        case 1879: 
        case 1880: 
        case 1881: 
        case 1882: 
        case 1883: 
        case 1884: 
        case 1885: 
        case 1886: 
        case 1887: 
        case 1888: 
        case 1889: 
        case 1890: 
        case 1891: 
        case 1892: 
        case 1893: 
        case 1894: 
        case 1895: 
        case 1896: 
        case 1897: 
        case 1898: 
        case 1899: 
        case 1900: 
        case 1901: 
        case 1902: 
        case 1903: 
            watch_write<struct pci_dev, FIELD_res_attr>::on(entry_, struct_addr_, val_);
            break;
        case 1904: 
        case 1905: 
        case 1906: 
        case 1907: 
        case 1908: 
        case 1909: 
        case 1910: 
        case 1911: 
        case 1912: 
        case 1913: 
        case 1914: 
        case 1915: 
        case 1916: 
        case 1917: 
        case 1918: 
        case 1919: 
        case 1920: 
        case 1921: 
        case 1922: 
        case 1923: 
        case 1924: 
        case 1925: 
        case 1926: 
        case 1927: 
        case 1928: 
        case 1929: 
        case 1930: 
        case 1931: 
        case 1932: 
        case 1933: 
        case 1934: 
        case 1935: 
        case 1936: 
        case 1937: 
        case 1938: 
        case 1939: 
        case 1940: 
        case 1941: 
        case 1942: 
        case 1943: 
        case 1944: 
        case 1945: 
        case 1946: 
        case 1947: 
        case 1948: 
        case 1949: 
        case 1950: 
        case 1951: 
        case 1952: 
        case 1953: 
        case 1954: 
        case 1955: 
        case 1956: 
        case 1957: 
        case 1958: 
        case 1959: 
        case 1960: 
        case 1961: 
        case 1962: 
        case 1963: 
        case 1964: 
        case 1965: 
        case 1966: 
        case 1967: 
        case 1968: 
        case 1969: 
        case 1970: 
        case 1971: 
        case 1972: 
        case 1973: 
        case 1974: 
        case 1975: 
        case 1976: 
        case 1977: 
        case 1978: 
        case 1979: 
        case 1980: 
        case 1981: 
        case 1982: 
        case 1983: 
        case 1984: 
        case 1985: 
        case 1986: 
        case 1987: 
        case 1988: 
        case 1989: 
        case 1990: 
        case 1991: 
        case 1992: 
        case 1993: 
        case 1994: 
        case 1995: 
        case 1996: 
        case 1997: 
        case 1998: 
        case 1999: 
        case 2000: 
        case 2001: 
        case 2002: 
        case 2003: 
        case 2004: 
        case 2005: 
        case 2006: 
        case 2007: 
        case 2008: 
        case 2009: 
        case 2010: 
        case 2011: 
        case 2012: 
        case 2013: 
        case 2014: 
        case 2015: 
        case 2016: 
        case 2017: 
        case 2018: 
        case 2019: 
        case 2020: 
        case 2021: 
        case 2022: 
        case 2023: 
        case 2024: 
        case 2025: 
        case 2026: 
        case 2027: 
        case 2028: 
        case 2029: 
        case 2030: 
        case 2031: 
        case 2032: 
        case 2033: 
        case 2034: 
        case 2035: 
        case 2036: 
        case 2037: 
        case 2038: 
        case 2039: 
        case 2040: 
        case 2041: 
        case 2042: 
        case 2043: 
        case 2044: 
        case 2045: 
        case 2046: 
        case 2047: 
            watch_write<struct pci_dev, FIELD_res_attr_wc>::on(entry_, struct_addr_, val_);
            break;
        case 2048: 
        case 2049: 
        case 2050: 
        case 2051: 
        case 2052: 
        case 2053: 
        case 2054: 
        case 2055: 
        case 2056: 
        case 2057: 
        case 2058: 
        case 2059: 
        case 2060: 
        case 2061: 
        case 2062: 
        case 2063: 
            watch_write<struct pci_dev, FIELD_msi_list>::on(entry_, struct_addr_, val_);
            break;
        case 2064: 
        case 2065: 
        case 2066: 
        case 2067: 
        case 2068: 
        case 2069: 
        case 2070: 
        case 2071: 
            watch_write<struct pci_dev, FIELD_vpd>::on(entry_, struct_addr_, val_);
            break;
        case 2072: 
        case 2073: 
        case 2074: 
        case 2075: 
        case 2076: 
        case 2077: 
        case 2078: 
        case 2079: 
            watch_write<struct pci_dev, FIELD_sriov>::on(entry_, struct_addr_, val_);
            watch_write<struct pci_dev, FIELD_physfn>::on(entry_, struct_addr_, val_);
            break;
        case 2080: 
        case 2081: 
        case 2082: 
        case 2083: 
        case 2084: 
        case 2085: 
        case 2086: 
        case 2087: 
            watch_write<struct pci_dev, FIELD_ats>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct prio_tree_root> {
    enum { TYPE_SIZE = sizeof(struct prio_tree_root) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct prio_tree_root *struct_addr_(((struct prio_tree_root *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct prio_tree_root, FIELD_prio_tree_node>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
            watch_read<struct prio_tree_root, FIELD_index_bits>::on(entry_, struct_addr_);
            break;
        case 10: 
        case 11: 
            watch_read<struct prio_tree_root, FIELD_raw>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct prio_tree_root *struct_addr_(((struct prio_tree_root *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct prio_tree_root, FIELD_prio_tree_node>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
            watch_write<struct prio_tree_root, FIELD_index_bits>::on(entry_, struct_addr_, val_);
            break;
        case 10: 
        case 11: 
            watch_write<struct prio_tree_root, FIELD_raw>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct task_struct> {
    enum { TYPE_SIZE = sizeof(struct task_struct) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct task_struct *struct_addr_(((struct task_struct *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct task_struct, FIELD_state>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct task_struct, FIELD_stack>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
            watch_read<struct task_struct, FIELD_usage>::on(entry_, struct_addr_);
            break;
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct task_struct, FIELD_flags>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
            watch_read<struct task_struct, FIELD_ptrace>::on(entry_, struct_addr_);
            break;
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct task_struct, FIELD_lock_depth>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
            watch_read<struct task_struct, FIELD_prio>::on(entry_, struct_addr_);
            break;
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct task_struct, FIELD_static_prio>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
            watch_read<struct task_struct, FIELD_normal_prio>::on(entry_, struct_addr_);
            break;
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct task_struct, FIELD_rt_priority>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct task_struct, FIELD_sched_class>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
            watch_read<struct task_struct, FIELD_se>::on(entry_, struct_addr_);
            break;
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
            watch_read<struct task_struct, FIELD_rt>::on(entry_, struct_addr_);
            break;
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
            watch_read<struct task_struct, FIELD_preempt_notifiers>::on(entry_, struct_addr_);
            break;
        case 520: 
            watch_read<struct task_struct, FIELD_fpu_counter>::on(entry_, struct_addr_);
            break;
        case 524: 
        case 525: 
        case 526: 
        case 527: 
            watch_read<struct task_struct, FIELD_btrace_seq>::on(entry_, struct_addr_);
            break;
        case 528: 
        case 529: 
        case 530: 
        case 531: 
            watch_read<struct task_struct, FIELD_policy>::on(entry_, struct_addr_);
            break;
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
            watch_read<struct task_struct, FIELD_cpus_allowed>::on(entry_, struct_addr_);
            break;
        case 544: 
        case 545: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
        case 552: 
        case 553: 
        case 554: 
        case 555: 
        case 556: 
        case 557: 
        case 558: 
        case 559: 
        case 560: 
        case 561: 
        case 562: 
        case 563: 
        case 564: 
        case 565: 
        case 566: 
        case 567: 
        case 568: 
        case 569: 
        case 570: 
        case 571: 
        case 572: 
        case 573: 
        case 574: 
        case 575: 
        case 576: 
        case 577: 
        case 578: 
        case 579: 
        case 580: 
        case 581: 
        case 582: 
        case 583: 
            watch_read<struct task_struct, FIELD_sched_info>::on(entry_, struct_addr_);
            break;
        case 584: 
        case 585: 
        case 586: 
        case 587: 
        case 588: 
        case 589: 
        case 590: 
        case 591: 
        case 592: 
        case 593: 
        case 594: 
        case 595: 
        case 596: 
        case 597: 
        case 598: 
        case 599: 
            watch_read<struct task_struct, FIELD_tasks>::on(entry_, struct_addr_);
            break;
        case 600: 
        case 601: 
        case 602: 
        case 603: 
        case 604: 
        case 605: 
        case 606: 
        case 607: 
        case 608: 
        case 609: 
        case 610: 
        case 611: 
        case 612: 
        case 613: 
        case 614: 
        case 615: 
        case 616: 
        case 617: 
        case 618: 
        case 619: 
        case 620: 
        case 621: 
        case 622: 
        case 623: 
        case 624: 
        case 625: 
        case 626: 
        case 627: 
        case 628: 
        case 629: 
        case 630: 
        case 631: 
        case 632: 
        case 633: 
        case 634: 
        case 635: 
        case 636: 
        case 637: 
        case 638: 
        case 639: 
            watch_read<struct task_struct, FIELD_pushable_tasks>::on(entry_, struct_addr_);
            break;
        case 640: 
        case 641: 
        case 642: 
        case 643: 
        case 644: 
        case 645: 
        case 646: 
        case 647: 
            watch_read<struct task_struct, FIELD_mm>::on(entry_, struct_addr_);
            break;
        case 648: 
        case 649: 
        case 650: 
        case 651: 
        case 652: 
        case 653: 
        case 654: 
        case 655: 
            watch_read<struct task_struct, FIELD_active_mm>::on(entry_, struct_addr_);
            break;
        case 656: 
        case 657: 
        case 658: 
        case 659: 
            watch_read<struct task_struct, FIELD_exit_state>::on(entry_, struct_addr_);
            break;
        case 660: 
        case 661: 
        case 662: 
        case 663: 
            watch_read<struct task_struct, FIELD_exit_code>::on(entry_, struct_addr_);
            break;
        case 664: 
        case 665: 
        case 666: 
        case 667: 
            watch_read<struct task_struct, FIELD_exit_signal>::on(entry_, struct_addr_);
            break;
        case 668: 
        case 669: 
        case 670: 
        case 671: 
            watch_read<struct task_struct, FIELD_pdeath_signal>::on(entry_, struct_addr_);
            break;
        case 672: 
        case 673: 
        case 674: 
        case 675: 
            watch_read<struct task_struct, FIELD_personality>::on(entry_, struct_addr_);
            break;
        case 676: 
            watch_read<struct task_struct, FIELD_did_exec>::on(entry_, struct_addr_);
            watch_read<struct task_struct, FIELD_in_execve>::on(entry_, struct_addr_);
            watch_read<struct task_struct, FIELD_in_iowait>::on(entry_, struct_addr_);
            watch_read<struct task_struct, FIELD_sched_reset_on_fork>::on(entry_, struct_addr_);
            break;
        case 680: 
        case 681: 
        case 682: 
        case 683: 
            watch_read<struct task_struct, FIELD_pid>::on(entry_, struct_addr_);
            break;
        case 684: 
        case 685: 
        case 686: 
        case 687: 
            watch_read<struct task_struct, FIELD_tgid>::on(entry_, struct_addr_);
            break;
        case 688: 
        case 689: 
        case 690: 
        case 691: 
        case 692: 
        case 693: 
        case 694: 
        case 695: 
            watch_read<struct task_struct, FIELD_stack_canary>::on(entry_, struct_addr_);
            break;
        case 696: 
        case 697: 
        case 698: 
        case 699: 
        case 700: 
        case 701: 
        case 702: 
        case 703: 
            watch_read<struct task_struct, FIELD_real_parent>::on(entry_, struct_addr_);
            break;
        case 704: 
        case 705: 
        case 706: 
        case 707: 
        case 708: 
        case 709: 
        case 710: 
        case 711: 
            watch_read<struct task_struct, FIELD_parent>::on(entry_, struct_addr_);
            break;
        case 712: 
        case 713: 
        case 714: 
        case 715: 
        case 716: 
        case 717: 
        case 718: 
        case 719: 
        case 720: 
        case 721: 
        case 722: 
        case 723: 
        case 724: 
        case 725: 
        case 726: 
        case 727: 
            watch_read<struct task_struct, FIELD_children>::on(entry_, struct_addr_);
            break;
        case 728: 
        case 729: 
        case 730: 
        case 731: 
        case 732: 
        case 733: 
        case 734: 
        case 735: 
        case 736: 
        case 737: 
        case 738: 
        case 739: 
        case 740: 
        case 741: 
        case 742: 
        case 743: 
            watch_read<struct task_struct, FIELD_sibling>::on(entry_, struct_addr_);
            break;
        case 744: 
        case 745: 
        case 746: 
        case 747: 
        case 748: 
        case 749: 
        case 750: 
        case 751: 
            watch_read<struct task_struct, FIELD_group_leader>::on(entry_, struct_addr_);
            break;
        case 752: 
        case 753: 
        case 754: 
        case 755: 
        case 756: 
        case 757: 
        case 758: 
        case 759: 
        case 760: 
        case 761: 
        case 762: 
        case 763: 
        case 764: 
        case 765: 
        case 766: 
        case 767: 
            watch_read<struct task_struct, FIELD_ptraced>::on(entry_, struct_addr_);
            break;
        case 768: 
        case 769: 
        case 770: 
        case 771: 
        case 772: 
        case 773: 
        case 774: 
        case 775: 
        case 776: 
        case 777: 
        case 778: 
        case 779: 
        case 780: 
        case 781: 
        case 782: 
        case 783: 
            watch_read<struct task_struct, FIELD_ptrace_entry>::on(entry_, struct_addr_);
            break;
        case 784: 
        case 785: 
        case 786: 
        case 787: 
        case 788: 
        case 789: 
        case 790: 
        case 791: 
            watch_read<struct task_struct, FIELD_bts>::on(entry_, struct_addr_);
            break;
        case 792: 
        case 793: 
        case 794: 
        case 795: 
        case 796: 
        case 797: 
        case 798: 
        case 799: 
        case 800: 
        case 801: 
        case 802: 
        case 803: 
        case 804: 
        case 805: 
        case 806: 
        case 807: 
        case 808: 
        case 809: 
        case 810: 
        case 811: 
        case 812: 
        case 813: 
        case 814: 
        case 815: 
        case 816: 
        case 817: 
        case 818: 
        case 819: 
        case 820: 
        case 821: 
        case 822: 
        case 823: 
        case 824: 
        case 825: 
        case 826: 
        case 827: 
        case 828: 
        case 829: 
        case 830: 
        case 831: 
        case 832: 
        case 833: 
        case 834: 
        case 835: 
        case 836: 
        case 837: 
        case 838: 
        case 839: 
        case 840: 
        case 841: 
        case 842: 
        case 843: 
        case 844: 
        case 845: 
        case 846: 
        case 847: 
        case 848: 
        case 849: 
        case 850: 
        case 851: 
        case 852: 
        case 853: 
        case 854: 
        case 855: 
        case 856: 
        case 857: 
        case 858: 
        case 859: 
        case 860: 
        case 861: 
        case 862: 
        case 863: 
            watch_read<struct task_struct, FIELD_pids>::on(entry_, struct_addr_);
            break;
        case 864: 
        case 865: 
        case 866: 
        case 867: 
        case 868: 
        case 869: 
        case 870: 
        case 871: 
        case 872: 
        case 873: 
        case 874: 
        case 875: 
        case 876: 
        case 877: 
        case 878: 
        case 879: 
            watch_read<struct task_struct, FIELD_thread_group>::on(entry_, struct_addr_);
            break;
        case 880: 
        case 881: 
        case 882: 
        case 883: 
        case 884: 
        case 885: 
        case 886: 
        case 887: 
            watch_read<struct task_struct, FIELD_vfork_done>::on(entry_, struct_addr_);
            break;
        case 888: 
        case 889: 
        case 890: 
        case 891: 
        case 892: 
        case 893: 
        case 894: 
        case 895: 
            watch_read<struct task_struct, FIELD_set_child_tid>::on(entry_, struct_addr_);
            break;
        case 896: 
        case 897: 
        case 898: 
        case 899: 
        case 900: 
        case 901: 
        case 902: 
        case 903: 
            watch_read<struct task_struct, FIELD_clear_child_tid>::on(entry_, struct_addr_);
            break;
        case 904: 
        case 905: 
        case 906: 
        case 907: 
        case 908: 
        case 909: 
        case 910: 
        case 911: 
            watch_read<struct task_struct, FIELD_utime>::on(entry_, struct_addr_);
            break;
        case 912: 
        case 913: 
        case 914: 
        case 915: 
        case 916: 
        case 917: 
        case 918: 
        case 919: 
            watch_read<struct task_struct, FIELD_stime>::on(entry_, struct_addr_);
            break;
        case 920: 
        case 921: 
        case 922: 
        case 923: 
        case 924: 
        case 925: 
        case 926: 
        case 927: 
            watch_read<struct task_struct, FIELD_utimescaled>::on(entry_, struct_addr_);
            break;
        case 928: 
        case 929: 
        case 930: 
        case 931: 
        case 932: 
        case 933: 
        case 934: 
        case 935: 
            watch_read<struct task_struct, FIELD_stimescaled>::on(entry_, struct_addr_);
            break;
        case 936: 
        case 937: 
        case 938: 
        case 939: 
        case 940: 
        case 941: 
        case 942: 
        case 943: 
            watch_read<struct task_struct, FIELD_gtime>::on(entry_, struct_addr_);
            break;
        case 944: 
        case 945: 
        case 946: 
        case 947: 
        case 948: 
        case 949: 
        case 950: 
        case 951: 
            watch_read<struct task_struct, FIELD_prev_utime>::on(entry_, struct_addr_);
            break;
        case 952: 
        case 953: 
        case 954: 
        case 955: 
        case 956: 
        case 957: 
        case 958: 
        case 959: 
            watch_read<struct task_struct, FIELD_prev_stime>::on(entry_, struct_addr_);
            break;
        case 960: 
        case 961: 
        case 962: 
        case 963: 
        case 964: 
        case 965: 
        case 966: 
        case 967: 
            watch_read<struct task_struct, FIELD_nvcsw>::on(entry_, struct_addr_);
            break;
        case 968: 
        case 969: 
        case 970: 
        case 971: 
        case 972: 
        case 973: 
        case 974: 
        case 975: 
            watch_read<struct task_struct, FIELD_nivcsw>::on(entry_, struct_addr_);
            break;
        case 976: 
        case 977: 
        case 978: 
        case 979: 
        case 980: 
        case 981: 
        case 982: 
        case 983: 
        case 984: 
        case 985: 
        case 986: 
        case 987: 
        case 988: 
        case 989: 
        case 990: 
        case 991: 
            watch_read<struct task_struct, FIELD_start_time>::on(entry_, struct_addr_);
            break;
        case 992: 
        case 993: 
        case 994: 
        case 995: 
        case 996: 
        case 997: 
        case 998: 
        case 999: 
        case 1000: 
        case 1001: 
        case 1002: 
        case 1003: 
        case 1004: 
        case 1005: 
        case 1006: 
        case 1007: 
            watch_read<struct task_struct, FIELD_real_start_time>::on(entry_, struct_addr_);
            break;
        case 1008: 
        case 1009: 
        case 1010: 
        case 1011: 
        case 1012: 
        case 1013: 
        case 1014: 
        case 1015: 
            watch_read<struct task_struct, FIELD_min_flt>::on(entry_, struct_addr_);
            break;
        case 1016: 
        case 1017: 
        case 1018: 
        case 1019: 
        case 1020: 
        case 1021: 
        case 1022: 
        case 1023: 
            watch_read<struct task_struct, FIELD_maj_flt>::on(entry_, struct_addr_);
            break;
        case 1024: 
        case 1025: 
        case 1026: 
        case 1027: 
        case 1028: 
        case 1029: 
        case 1030: 
        case 1031: 
        case 1032: 
        case 1033: 
        case 1034: 
        case 1035: 
        case 1036: 
        case 1037: 
        case 1038: 
        case 1039: 
        case 1040: 
        case 1041: 
        case 1042: 
        case 1043: 
        case 1044: 
        case 1045: 
        case 1046: 
        case 1047: 
            watch_read<struct task_struct, FIELD_cputime_expires>::on(entry_, struct_addr_);
            break;
        case 1048: 
        case 1049: 
        case 1050: 
        case 1051: 
        case 1052: 
        case 1053: 
        case 1054: 
        case 1055: 
        case 1056: 
        case 1057: 
        case 1058: 
        case 1059: 
        case 1060: 
        case 1061: 
        case 1062: 
        case 1063: 
        case 1064: 
        case 1065: 
        case 1066: 
        case 1067: 
        case 1068: 
        case 1069: 
        case 1070: 
        case 1071: 
        case 1072: 
        case 1073: 
        case 1074: 
        case 1075: 
        case 1076: 
        case 1077: 
        case 1078: 
        case 1079: 
        case 1080: 
        case 1081: 
        case 1082: 
        case 1083: 
        case 1084: 
        case 1085: 
        case 1086: 
        case 1087: 
        case 1088: 
        case 1089: 
        case 1090: 
        case 1091: 
        case 1092: 
        case 1093: 
        case 1094: 
        case 1095: 
            watch_read<struct task_struct, FIELD_cpu_timers>::on(entry_, struct_addr_);
            break;
        case 1096: 
        case 1097: 
        case 1098: 
        case 1099: 
        case 1100: 
        case 1101: 
        case 1102: 
        case 1103: 
            watch_read<struct task_struct, FIELD_real_cred>::on(entry_, struct_addr_);
            break;
        case 1104: 
        case 1105: 
        case 1106: 
        case 1107: 
        case 1108: 
        case 1109: 
        case 1110: 
        case 1111: 
            watch_read<struct task_struct, FIELD_cred>::on(entry_, struct_addr_);
            break;
        case 1112: 
        case 1113: 
        case 1114: 
        case 1115: 
        case 1116: 
        case 1117: 
        case 1118: 
        case 1119: 
        case 1120: 
        case 1121: 
        case 1122: 
        case 1123: 
        case 1124: 
        case 1125: 
        case 1126: 
        case 1127: 
        case 1128: 
        case 1129: 
        case 1130: 
        case 1131: 
        case 1132: 
        case 1133: 
        case 1134: 
        case 1135: 
        case 1136: 
        case 1137: 
        case 1138: 
        case 1139: 
        case 1140: 
        case 1141: 
        case 1142: 
        case 1143: 
            watch_read<struct task_struct, FIELD_cred_guard_mutex>::on(entry_, struct_addr_);
            break;
        case 1144: 
        case 1145: 
        case 1146: 
        case 1147: 
        case 1148: 
        case 1149: 
        case 1150: 
        case 1151: 
            watch_read<struct task_struct, FIELD_replacement_session_keyring>::on(entry_, struct_addr_);
            break;
        case 1152: 
        case 1153: 
        case 1154: 
        case 1155: 
        case 1156: 
        case 1157: 
        case 1158: 
        case 1159: 
        case 1160: 
        case 1161: 
        case 1162: 
        case 1163: 
        case 1164: 
        case 1165: 
        case 1166: 
        case 1167: 
            watch_read<struct task_struct, FIELD_comm>::on(entry_, struct_addr_);
            break;
        case 1168: 
        case 1169: 
        case 1170: 
        case 1171: 
            watch_read<struct task_struct, FIELD_link_count>::on(entry_, struct_addr_);
            break;
        case 1172: 
        case 1173: 
        case 1174: 
        case 1175: 
            watch_read<struct task_struct, FIELD_total_link_count>::on(entry_, struct_addr_);
            break;
        case 1176: 
        case 1177: 
        case 1178: 
        case 1179: 
        case 1180: 
        case 1181: 
        case 1182: 
        case 1183: 
            watch_read<struct task_struct, FIELD_sysvsem>::on(entry_, struct_addr_);
            break;
        case 1184: 
        case 1185: 
        case 1186: 
        case 1187: 
        case 1188: 
        case 1189: 
        case 1190: 
        case 1191: 
            watch_read<struct task_struct, FIELD_last_switch_count>::on(entry_, struct_addr_);
            break;
        case 1192: 
        case 1193: 
        case 1194: 
        case 1195: 
        case 1196: 
        case 1197: 
        case 1198: 
        case 1199: 
        case 1200: 
        case 1201: 
        case 1202: 
        case 1203: 
        case 1204: 
        case 1205: 
        case 1206: 
        case 1207: 
        case 1208: 
        case 1209: 
        case 1210: 
        case 1211: 
        case 1212: 
        case 1213: 
        case 1214: 
        case 1215: 
        case 1216: 
        case 1217: 
        case 1218: 
        case 1219: 
        case 1220: 
        case 1221: 
        case 1222: 
        case 1223: 
        case 1224: 
        case 1225: 
        case 1226: 
        case 1227: 
        case 1228: 
        case 1229: 
        case 1230: 
        case 1231: 
        case 1232: 
        case 1233: 
        case 1234: 
        case 1235: 
        case 1236: 
        case 1237: 
        case 1238: 
        case 1239: 
        case 1240: 
        case 1241: 
        case 1242: 
        case 1243: 
        case 1244: 
        case 1245: 
        case 1246: 
        case 1247: 
        case 1248: 
        case 1249: 
        case 1250: 
        case 1251: 
        case 1252: 
        case 1253: 
        case 1254: 
        case 1255: 
        case 1256: 
        case 1257: 
        case 1258: 
        case 1259: 
        case 1260: 
        case 1261: 
        case 1262: 
        case 1263: 
        case 1264: 
        case 1265: 
        case 1266: 
        case 1267: 
        case 1268: 
        case 1269: 
        case 1270: 
        case 1271: 
        case 1272: 
        case 1273: 
        case 1274: 
        case 1275: 
        case 1276: 
        case 1277: 
        case 1278: 
        case 1279: 
        case 1280: 
        case 1281: 
        case 1282: 
        case 1283: 
        case 1284: 
        case 1285: 
        case 1286: 
        case 1287: 
        case 1288: 
        case 1289: 
        case 1290: 
        case 1291: 
        case 1292: 
        case 1293: 
        case 1294: 
        case 1295: 
        case 1296: 
        case 1297: 
        case 1298: 
        case 1299: 
        case 1300: 
        case 1301: 
        case 1302: 
        case 1303: 
        case 1304: 
        case 1305: 
        case 1306: 
        case 1307: 
        case 1308: 
        case 1309: 
        case 1310: 
        case 1311: 
        case 1312: 
        case 1313: 
        case 1314: 
        case 1315: 
        case 1316: 
        case 1317: 
        case 1318: 
        case 1319: 
        case 1320: 
        case 1321: 
        case 1322: 
        case 1323: 
        case 1324: 
        case 1325: 
        case 1326: 
        case 1327: 
        case 1328: 
        case 1329: 
        case 1330: 
        case 1331: 
        case 1332: 
        case 1333: 
        case 1334: 
        case 1335: 
        case 1336: 
        case 1337: 
        case 1338: 
        case 1339: 
        case 1340: 
        case 1341: 
        case 1342: 
        case 1343: 
        case 1344: 
        case 1345: 
        case 1346: 
        case 1347: 
        case 1348: 
        case 1349: 
        case 1350: 
        case 1351: 
        case 1352: 
        case 1353: 
        case 1354: 
        case 1355: 
        case 1356: 
        case 1357: 
        case 1358: 
        case 1359: 
        case 1360: 
        case 1361: 
        case 1362: 
        case 1363: 
        case 1364: 
        case 1365: 
        case 1366: 
        case 1367: 
        case 1368: 
        case 1369: 
        case 1370: 
        case 1371: 
        case 1372: 
        case 1373: 
        case 1374: 
        case 1375: 
        case 1376: 
        case 1377: 
        case 1378: 
        case 1379: 
        case 1380: 
        case 1381: 
        case 1382: 
        case 1383: 
            watch_read<struct task_struct, FIELD_thread>::on(entry_, struct_addr_);
            break;
        case 1384: 
        case 1385: 
        case 1386: 
        case 1387: 
        case 1388: 
        case 1389: 
        case 1390: 
        case 1391: 
            watch_read<struct task_struct, FIELD_fs>::on(entry_, struct_addr_);
            break;
        case 1392: 
        case 1393: 
        case 1394: 
        case 1395: 
        case 1396: 
        case 1397: 
        case 1398: 
        case 1399: 
            watch_read<struct task_struct, FIELD_files>::on(entry_, struct_addr_);
            break;
        case 1400: 
        case 1401: 
        case 1402: 
        case 1403: 
        case 1404: 
        case 1405: 
        case 1406: 
        case 1407: 
            watch_read<struct task_struct, FIELD_nsproxy>::on(entry_, struct_addr_);
            break;
        case 1408: 
        case 1409: 
        case 1410: 
        case 1411: 
        case 1412: 
        case 1413: 
        case 1414: 
        case 1415: 
            watch_read<struct task_struct, FIELD_signal>::on(entry_, struct_addr_);
            break;
        case 1416: 
        case 1417: 
        case 1418: 
        case 1419: 
        case 1420: 
        case 1421: 
        case 1422: 
        case 1423: 
            watch_read<struct task_struct, FIELD_sighand>::on(entry_, struct_addr_);
            break;
        case 1424: 
        case 1425: 
        case 1426: 
        case 1427: 
        case 1428: 
        case 1429: 
        case 1430: 
        case 1431: 
        case 1432: 
        case 1433: 
        case 1434: 
        case 1435: 
        case 1436: 
        case 1437: 
        case 1438: 
        case 1439: 
        case 1440: 
        case 1441: 
        case 1442: 
        case 1443: 
        case 1444: 
        case 1445: 
        case 1446: 
        case 1447: 
        case 1448: 
        case 1449: 
        case 1450: 
        case 1451: 
        case 1452: 
        case 1453: 
        case 1454: 
        case 1455: 
        case 1456: 
        case 1457: 
        case 1458: 
        case 1459: 
        case 1460: 
        case 1461: 
        case 1462: 
        case 1463: 
        case 1464: 
        case 1465: 
        case 1466: 
        case 1467: 
        case 1468: 
        case 1469: 
        case 1470: 
        case 1471: 
        case 1472: 
        case 1473: 
        case 1474: 
        case 1475: 
        case 1476: 
        case 1477: 
        case 1478: 
        case 1479: 
        case 1480: 
        case 1481: 
        case 1482: 
        case 1483: 
        case 1484: 
        case 1485: 
        case 1486: 
        case 1487: 
        case 1488: 
        case 1489: 
        case 1490: 
        case 1491: 
        case 1492: 
        case 1493: 
        case 1494: 
        case 1495: 
        case 1496: 
        case 1497: 
        case 1498: 
        case 1499: 
        case 1500: 
        case 1501: 
        case 1502: 
        case 1503: 
        case 1504: 
        case 1505: 
        case 1506: 
        case 1507: 
        case 1508: 
        case 1509: 
        case 1510: 
        case 1511: 
        case 1512: 
        case 1513: 
        case 1514: 
        case 1515: 
        case 1516: 
        case 1517: 
        case 1518: 
        case 1519: 
        case 1520: 
        case 1521: 
        case 1522: 
        case 1523: 
        case 1524: 
        case 1525: 
        case 1526: 
        case 1527: 
        case 1528: 
        case 1529: 
        case 1530: 
        case 1531: 
        case 1532: 
        case 1533: 
        case 1534: 
        case 1535: 
        case 1536: 
        case 1537: 
        case 1538: 
        case 1539: 
        case 1540: 
        case 1541: 
        case 1542: 
        case 1543: 
        case 1544: 
        case 1545: 
        case 1546: 
        case 1547: 
        case 1548: 
        case 1549: 
        case 1550: 
        case 1551: 
            watch_read<struct task_struct, FIELD_blocked>::on(entry_, struct_addr_);
            break;
        case 1552: 
        case 1553: 
        case 1554: 
        case 1555: 
        case 1556: 
        case 1557: 
        case 1558: 
        case 1559: 
        case 1560: 
        case 1561: 
        case 1562: 
        case 1563: 
        case 1564: 
        case 1565: 
        case 1566: 
        case 1567: 
        case 1568: 
        case 1569: 
        case 1570: 
        case 1571: 
        case 1572: 
        case 1573: 
        case 1574: 
        case 1575: 
        case 1576: 
        case 1577: 
        case 1578: 
        case 1579: 
        case 1580: 
        case 1581: 
        case 1582: 
        case 1583: 
        case 1584: 
        case 1585: 
        case 1586: 
        case 1587: 
        case 1588: 
        case 1589: 
        case 1590: 
        case 1591: 
        case 1592: 
        case 1593: 
        case 1594: 
        case 1595: 
        case 1596: 
        case 1597: 
        case 1598: 
        case 1599: 
        case 1600: 
        case 1601: 
        case 1602: 
        case 1603: 
        case 1604: 
        case 1605: 
        case 1606: 
        case 1607: 
        case 1608: 
        case 1609: 
        case 1610: 
        case 1611: 
        case 1612: 
        case 1613: 
        case 1614: 
        case 1615: 
        case 1616: 
        case 1617: 
        case 1618: 
        case 1619: 
        case 1620: 
        case 1621: 
        case 1622: 
        case 1623: 
        case 1624: 
        case 1625: 
        case 1626: 
        case 1627: 
        case 1628: 
        case 1629: 
        case 1630: 
        case 1631: 
        case 1632: 
        case 1633: 
        case 1634: 
        case 1635: 
        case 1636: 
        case 1637: 
        case 1638: 
        case 1639: 
        case 1640: 
        case 1641: 
        case 1642: 
        case 1643: 
        case 1644: 
        case 1645: 
        case 1646: 
        case 1647: 
        case 1648: 
        case 1649: 
        case 1650: 
        case 1651: 
        case 1652: 
        case 1653: 
        case 1654: 
        case 1655: 
        case 1656: 
        case 1657: 
        case 1658: 
        case 1659: 
        case 1660: 
        case 1661: 
        case 1662: 
        case 1663: 
        case 1664: 
        case 1665: 
        case 1666: 
        case 1667: 
        case 1668: 
        case 1669: 
        case 1670: 
        case 1671: 
        case 1672: 
        case 1673: 
        case 1674: 
        case 1675: 
        case 1676: 
        case 1677: 
        case 1678: 
        case 1679: 
            watch_read<struct task_struct, FIELD_real_blocked>::on(entry_, struct_addr_);
            break;
        case 1680: 
        case 1681: 
        case 1682: 
        case 1683: 
        case 1684: 
        case 1685: 
        case 1686: 
        case 1687: 
        case 1688: 
        case 1689: 
        case 1690: 
        case 1691: 
        case 1692: 
        case 1693: 
        case 1694: 
        case 1695: 
        case 1696: 
        case 1697: 
        case 1698: 
        case 1699: 
        case 1700: 
        case 1701: 
        case 1702: 
        case 1703: 
        case 1704: 
        case 1705: 
        case 1706: 
        case 1707: 
        case 1708: 
        case 1709: 
        case 1710: 
        case 1711: 
        case 1712: 
        case 1713: 
        case 1714: 
        case 1715: 
        case 1716: 
        case 1717: 
        case 1718: 
        case 1719: 
        case 1720: 
        case 1721: 
        case 1722: 
        case 1723: 
        case 1724: 
        case 1725: 
        case 1726: 
        case 1727: 
        case 1728: 
        case 1729: 
        case 1730: 
        case 1731: 
        case 1732: 
        case 1733: 
        case 1734: 
        case 1735: 
        case 1736: 
        case 1737: 
        case 1738: 
        case 1739: 
        case 1740: 
        case 1741: 
        case 1742: 
        case 1743: 
        case 1744: 
        case 1745: 
        case 1746: 
        case 1747: 
        case 1748: 
        case 1749: 
        case 1750: 
        case 1751: 
        case 1752: 
        case 1753: 
        case 1754: 
        case 1755: 
        case 1756: 
        case 1757: 
        case 1758: 
        case 1759: 
        case 1760: 
        case 1761: 
        case 1762: 
        case 1763: 
        case 1764: 
        case 1765: 
        case 1766: 
        case 1767: 
        case 1768: 
        case 1769: 
        case 1770: 
        case 1771: 
        case 1772: 
        case 1773: 
        case 1774: 
        case 1775: 
        case 1776: 
        case 1777: 
        case 1778: 
        case 1779: 
        case 1780: 
        case 1781: 
        case 1782: 
        case 1783: 
        case 1784: 
        case 1785: 
        case 1786: 
        case 1787: 
        case 1788: 
        case 1789: 
        case 1790: 
        case 1791: 
        case 1792: 
        case 1793: 
        case 1794: 
        case 1795: 
        case 1796: 
        case 1797: 
        case 1798: 
        case 1799: 
        case 1800: 
        case 1801: 
        case 1802: 
        case 1803: 
        case 1804: 
        case 1805: 
        case 1806: 
        case 1807: 
            watch_read<struct task_struct, FIELD_saved_sigmask>::on(entry_, struct_addr_);
            break;
        case 1808: 
        case 1809: 
        case 1810: 
        case 1811: 
        case 1812: 
        case 1813: 
        case 1814: 
        case 1815: 
        case 1816: 
        case 1817: 
        case 1818: 
        case 1819: 
        case 1820: 
        case 1821: 
        case 1822: 
        case 1823: 
        case 1824: 
        case 1825: 
        case 1826: 
        case 1827: 
        case 1828: 
        case 1829: 
        case 1830: 
        case 1831: 
        case 1832: 
        case 1833: 
        case 1834: 
        case 1835: 
        case 1836: 
        case 1837: 
        case 1838: 
        case 1839: 
        case 1840: 
        case 1841: 
        case 1842: 
        case 1843: 
        case 1844: 
        case 1845: 
        case 1846: 
        case 1847: 
        case 1848: 
        case 1849: 
        case 1850: 
        case 1851: 
        case 1852: 
        case 1853: 
        case 1854: 
        case 1855: 
        case 1856: 
        case 1857: 
        case 1858: 
        case 1859: 
        case 1860: 
        case 1861: 
        case 1862: 
        case 1863: 
        case 1864: 
        case 1865: 
        case 1866: 
        case 1867: 
        case 1868: 
        case 1869: 
        case 1870: 
        case 1871: 
        case 1872: 
        case 1873: 
        case 1874: 
        case 1875: 
        case 1876: 
        case 1877: 
        case 1878: 
        case 1879: 
        case 1880: 
        case 1881: 
        case 1882: 
        case 1883: 
        case 1884: 
        case 1885: 
        case 1886: 
        case 1887: 
        case 1888: 
        case 1889: 
        case 1890: 
        case 1891: 
        case 1892: 
        case 1893: 
        case 1894: 
        case 1895: 
        case 1896: 
        case 1897: 
        case 1898: 
        case 1899: 
        case 1900: 
        case 1901: 
        case 1902: 
        case 1903: 
        case 1904: 
        case 1905: 
        case 1906: 
        case 1907: 
        case 1908: 
        case 1909: 
        case 1910: 
        case 1911: 
        case 1912: 
        case 1913: 
        case 1914: 
        case 1915: 
        case 1916: 
        case 1917: 
        case 1918: 
        case 1919: 
        case 1920: 
        case 1921: 
        case 1922: 
        case 1923: 
        case 1924: 
        case 1925: 
        case 1926: 
        case 1927: 
        case 1928: 
        case 1929: 
        case 1930: 
        case 1931: 
        case 1932: 
        case 1933: 
        case 1934: 
        case 1935: 
        case 1936: 
        case 1937: 
        case 1938: 
        case 1939: 
        case 1940: 
        case 1941: 
        case 1942: 
        case 1943: 
        case 1944: 
        case 1945: 
        case 1946: 
        case 1947: 
        case 1948: 
        case 1949: 
        case 1950: 
        case 1951: 
            watch_read<struct task_struct, FIELD_pending>::on(entry_, struct_addr_);
            break;
        case 1952: 
        case 1953: 
        case 1954: 
        case 1955: 
        case 1956: 
        case 1957: 
        case 1958: 
        case 1959: 
            watch_read<struct task_struct, FIELD_sas_ss_sp>::on(entry_, struct_addr_);
            break;
        case 1960: 
        case 1961: 
        case 1962: 
        case 1963: 
        case 1964: 
        case 1965: 
        case 1966: 
        case 1967: 
            watch_read<struct task_struct, FIELD_sas_ss_size>::on(entry_, struct_addr_);
            break;
        case 1968: 
        case 1969: 
        case 1970: 
        case 1971: 
        case 1972: 
        case 1973: 
        case 1974: 
        case 1975: 
            watch_read<struct task_struct, FIELD_notifier>::on(entry_, struct_addr_);
            break;
        case 1976: 
        case 1977: 
        case 1978: 
        case 1979: 
        case 1980: 
        case 1981: 
        case 1982: 
        case 1983: 
            watch_read<struct task_struct, FIELD_notifier_data>::on(entry_, struct_addr_);
            break;
        case 1984: 
        case 1985: 
        case 1986: 
        case 1987: 
        case 1988: 
        case 1989: 
        case 1990: 
        case 1991: 
            watch_read<struct task_struct, FIELD_notifier_mask>::on(entry_, struct_addr_);
            break;
        case 1992: 
        case 1993: 
        case 1994: 
        case 1995: 
        case 1996: 
        case 1997: 
        case 1998: 
        case 1999: 
            watch_read<struct task_struct, FIELD_audit_context>::on(entry_, struct_addr_);
            break;
        case 2000: 
        case 2001: 
        case 2002: 
        case 2003: 
            watch_read<struct task_struct, FIELD_loginuid>::on(entry_, struct_addr_);
            break;
        case 2004: 
        case 2005: 
        case 2006: 
        case 2007: 
            watch_read<struct task_struct, FIELD_sessionid>::on(entry_, struct_addr_);
            break;
        case 2008: 
        case 2009: 
        case 2010: 
        case 2011: 
            watch_read<struct task_struct, FIELD_seccomp>::on(entry_, struct_addr_);
            break;
        case 2012: 
        case 2013: 
        case 2014: 
        case 2015: 
            watch_read<struct task_struct, FIELD_parent_exec_id>::on(entry_, struct_addr_);
            break;
        case 2016: 
        case 2017: 
        case 2018: 
        case 2019: 
            watch_read<struct task_struct, FIELD_self_exec_id>::on(entry_, struct_addr_);
            break;
        case 2020: 
        case 2021: 
        case 2022: 
        case 2023: 
            watch_read<struct task_struct, FIELD_alloc_lock>::on(entry_, struct_addr_);
            break;
        case 2024: 
        case 2025: 
        case 2026: 
        case 2027: 
        case 2028: 
        case 2029: 
        case 2030: 
        case 2031: 
            watch_read<struct task_struct, FIELD_irqaction>::on(entry_, struct_addr_);
            break;
        case 2032: 
        case 2033: 
        case 2034: 
        case 2035: 
            watch_read<struct task_struct, FIELD_pi_lock>::on(entry_, struct_addr_);
            break;
        case 2040: 
        case 2041: 
        case 2042: 
        case 2043: 
        case 2044: 
        case 2045: 
        case 2046: 
        case 2047: 
        case 2048: 
        case 2049: 
        case 2050: 
        case 2051: 
        case 2052: 
        case 2053: 
        case 2054: 
        case 2055: 
        case 2056: 
        case 2057: 
        case 2058: 
        case 2059: 
        case 2060: 
        case 2061: 
        case 2062: 
        case 2063: 
        case 2064: 
        case 2065: 
        case 2066: 
        case 2067: 
        case 2068: 
        case 2069: 
        case 2070: 
        case 2071: 
            watch_read<struct task_struct, FIELD_pi_waiters>::on(entry_, struct_addr_);
            break;
        case 2072: 
        case 2073: 
        case 2074: 
        case 2075: 
        case 2076: 
        case 2077: 
        case 2078: 
        case 2079: 
            watch_read<struct task_struct, FIELD_pi_blocked_on>::on(entry_, struct_addr_);
            break;
        case 2080: 
        case 2081: 
        case 2082: 
        case 2083: 
        case 2084: 
        case 2085: 
        case 2086: 
        case 2087: 
            watch_read<struct task_struct, FIELD_journal_info>::on(entry_, struct_addr_);
            break;
        case 2088: 
        case 2089: 
        case 2090: 
        case 2091: 
        case 2092: 
        case 2093: 
        case 2094: 
        case 2095: 
            watch_read<struct task_struct, FIELD_bio_list>::on(entry_, struct_addr_);
            break;
        case 2096: 
        case 2097: 
        case 2098: 
        case 2099: 
        case 2100: 
        case 2101: 
        case 2102: 
        case 2103: 
            watch_read<struct task_struct, FIELD_bio_tail>::on(entry_, struct_addr_);
            break;
        case 2104: 
        case 2105: 
        case 2106: 
        case 2107: 
        case 2108: 
        case 2109: 
        case 2110: 
        case 2111: 
            watch_read<struct task_struct, FIELD_reclaim_state>::on(entry_, struct_addr_);
            break;
        case 2112: 
        case 2113: 
        case 2114: 
        case 2115: 
        case 2116: 
        case 2117: 
        case 2118: 
        case 2119: 
            watch_read<struct task_struct, FIELD_backing_dev_info>::on(entry_, struct_addr_);
            break;
        case 2120: 
        case 2121: 
        case 2122: 
        case 2123: 
        case 2124: 
        case 2125: 
        case 2126: 
        case 2127: 
            watch_read<struct task_struct, FIELD_io_context>::on(entry_, struct_addr_);
            break;
        case 2128: 
        case 2129: 
        case 2130: 
        case 2131: 
        case 2132: 
        case 2133: 
        case 2134: 
        case 2135: 
            watch_read<struct task_struct, FIELD_ptrace_message>::on(entry_, struct_addr_);
            break;
        case 2136: 
        case 2137: 
        case 2138: 
        case 2139: 
        case 2140: 
        case 2141: 
        case 2142: 
        case 2143: 
            watch_read<struct task_struct, FIELD_last_siginfo>::on(entry_, struct_addr_);
            break;
        case 2144: 
        case 2145: 
        case 2146: 
        case 2147: 
        case 2148: 
        case 2149: 
        case 2150: 
        case 2151: 
        case 2152: 
        case 2153: 
        case 2154: 
        case 2155: 
        case 2156: 
        case 2157: 
        case 2158: 
        case 2159: 
        case 2160: 
        case 2161: 
        case 2162: 
        case 2163: 
        case 2164: 
        case 2165: 
        case 2166: 
        case 2167: 
        case 2168: 
        case 2169: 
        case 2170: 
        case 2171: 
        case 2172: 
        case 2173: 
        case 2174: 
        case 2175: 
        case 2176: 
        case 2177: 
        case 2178: 
        case 2179: 
        case 2180: 
        case 2181: 
        case 2182: 
        case 2183: 
        case 2184: 
        case 2185: 
        case 2186: 
        case 2187: 
        case 2188: 
        case 2189: 
        case 2190: 
        case 2191: 
        case 2192: 
        case 2193: 
        case 2194: 
        case 2195: 
        case 2196: 
        case 2197: 
        case 2198: 
        case 2199: 
            watch_read<struct task_struct, FIELD_ioac>::on(entry_, struct_addr_);
            break;
        case 2200: 
        case 2201: 
        case 2202: 
        case 2203: 
        case 2204: 
        case 2205: 
        case 2206: 
        case 2207: 
            watch_read<struct task_struct, FIELD_acct_rss_mem1>::on(entry_, struct_addr_);
            break;
        case 2208: 
        case 2209: 
        case 2210: 
        case 2211: 
        case 2212: 
        case 2213: 
        case 2214: 
        case 2215: 
            watch_read<struct task_struct, FIELD_acct_vm_mem1>::on(entry_, struct_addr_);
            break;
        case 2216: 
        case 2217: 
        case 2218: 
        case 2219: 
        case 2220: 
        case 2221: 
        case 2222: 
        case 2223: 
            watch_read<struct task_struct, FIELD_acct_timexpd>::on(entry_, struct_addr_);
            break;
        case 2224: 
        case 2225: 
        case 2226: 
        case 2227: 
        case 2228: 
        case 2229: 
        case 2230: 
        case 2231: 
            watch_read<struct task_struct, FIELD_mems_allowed>::on(entry_, struct_addr_);
            break;
        case 2232: 
        case 2233: 
        case 2234: 
        case 2235: 
            watch_read<struct task_struct, FIELD_cpuset_mem_spread_rotor>::on(entry_, struct_addr_);
            break;
        case 2240: 
        case 2241: 
        case 2242: 
        case 2243: 
        case 2244: 
        case 2245: 
        case 2246: 
        case 2247: 
            watch_read<struct task_struct, FIELD_cgroups>::on(entry_, struct_addr_);
            break;
        case 2248: 
        case 2249: 
        case 2250: 
        case 2251: 
        case 2252: 
        case 2253: 
        case 2254: 
        case 2255: 
        case 2256: 
        case 2257: 
        case 2258: 
        case 2259: 
        case 2260: 
        case 2261: 
        case 2262: 
        case 2263: 
            watch_read<struct task_struct, FIELD_cg_list>::on(entry_, struct_addr_);
            break;
        case 2264: 
        case 2265: 
        case 2266: 
        case 2267: 
        case 2268: 
        case 2269: 
        case 2270: 
        case 2271: 
            watch_read<struct task_struct, FIELD_robust_list>::on(entry_, struct_addr_);
            break;
        case 2272: 
        case 2273: 
        case 2274: 
        case 2275: 
        case 2276: 
        case 2277: 
        case 2278: 
        case 2279: 
            watch_read<struct task_struct, FIELD_compat_robust_list>::on(entry_, struct_addr_);
            break;
        case 2280: 
        case 2281: 
        case 2282: 
        case 2283: 
        case 2284: 
        case 2285: 
        case 2286: 
        case 2287: 
        case 2288: 
        case 2289: 
        case 2290: 
        case 2291: 
        case 2292: 
        case 2293: 
        case 2294: 
        case 2295: 
            watch_read<struct task_struct, FIELD_pi_state_list>::on(entry_, struct_addr_);
            break;
        case 2296: 
        case 2297: 
        case 2298: 
        case 2299: 
        case 2300: 
        case 2301: 
        case 2302: 
        case 2303: 
            watch_read<struct task_struct, FIELD_pi_state_cache>::on(entry_, struct_addr_);
            break;
        case 2304: 
        case 2305: 
        case 2306: 
        case 2307: 
        case 2308: 
        case 2309: 
        case 2310: 
        case 2311: 
            watch_read<struct task_struct, FIELD_perf_event_ctxp>::on(entry_, struct_addr_);
            break;
        case 2312: 
        case 2313: 
        case 2314: 
        case 2315: 
        case 2316: 
        case 2317: 
        case 2318: 
        case 2319: 
        case 2320: 
        case 2321: 
        case 2322: 
        case 2323: 
        case 2324: 
        case 2325: 
        case 2326: 
        case 2327: 
        case 2328: 
        case 2329: 
        case 2330: 
        case 2331: 
        case 2332: 
        case 2333: 
        case 2334: 
        case 2335: 
        case 2336: 
        case 2337: 
        case 2338: 
        case 2339: 
        case 2340: 
        case 2341: 
        case 2342: 
        case 2343: 
            watch_read<struct task_struct, FIELD_perf_event_mutex>::on(entry_, struct_addr_);
            break;
        case 2344: 
        case 2345: 
        case 2346: 
        case 2347: 
        case 2348: 
        case 2349: 
        case 2350: 
        case 2351: 
        case 2352: 
        case 2353: 
        case 2354: 
        case 2355: 
        case 2356: 
        case 2357: 
        case 2358: 
        case 2359: 
            watch_read<struct task_struct, FIELD_perf_event_list>::on(entry_, struct_addr_);
            break;
        case 2360: 
        case 2361: 
        case 2362: 
        case 2363: 
        case 2364: 
        case 2365: 
        case 2366: 
        case 2367: 
            watch_read<struct task_struct, FIELD_mempolicy>::on(entry_, struct_addr_);
            break;
        case 2368: 
        case 2369: 
            watch_read<struct task_struct, FIELD_il_next>::on(entry_, struct_addr_);
            break;
        case 2372: 
        case 2373: 
        case 2374: 
        case 2375: 
            watch_read<struct task_struct, FIELD_fs_excl>::on(entry_, struct_addr_);
            break;
        case 2376: 
        case 2377: 
        case 2378: 
        case 2379: 
        case 2380: 
        case 2381: 
        case 2382: 
        case 2383: 
        case 2384: 
        case 2385: 
        case 2386: 
        case 2387: 
        case 2388: 
        case 2389: 
        case 2390: 
        case 2391: 
            watch_read<struct task_struct, FIELD_rcu>::on(entry_, struct_addr_);
            break;
        case 2392: 
        case 2393: 
        case 2394: 
        case 2395: 
        case 2396: 
        case 2397: 
        case 2398: 
        case 2399: 
            watch_read<struct task_struct, FIELD_splice_pipe>::on(entry_, struct_addr_);
            break;
        case 2400: 
        case 2401: 
        case 2402: 
        case 2403: 
        case 2404: 
        case 2405: 
        case 2406: 
        case 2407: 
        case 2408: 
        case 2409: 
        case 2410: 
        case 2411: 
        case 2412: 
        case 2413: 
        case 2414: 
        case 2415: 
        case 2416: 
        case 2417: 
        case 2418: 
        case 2419: 
        case 2420: 
        case 2421: 
        case 2422: 
        case 2423: 
            watch_read<struct task_struct, FIELD_dirties>::on(entry_, struct_addr_);
            break;
        case 2424: 
        case 2425: 
        case 2426: 
        case 2427: 
            watch_read<struct task_struct, FIELD_latency_record_count>::on(entry_, struct_addr_);
            break;
        case 2432: 
        case 2433: 
        case 2434: 
        case 2435: 
        case 2436: 
        case 2437: 
        case 2438: 
        case 2439: 
        case 2440: 
        case 2441: 
        case 2442: 
        case 2443: 
        case 2444: 
        case 2445: 
        case 2446: 
        case 2447: 
        case 2448: 
        case 2449: 
        case 2450: 
        case 2451: 
        case 2452: 
        case 2453: 
        case 2454: 
        case 2455: 
        case 2456: 
        case 2457: 
        case 2458: 
        case 2459: 
        case 2460: 
        case 2461: 
        case 2462: 
        case 2463: 
        case 2464: 
        case 2465: 
        case 2466: 
        case 2467: 
        case 2468: 
        case 2469: 
        case 2470: 
        case 2471: 
        case 2472: 
        case 2473: 
        case 2474: 
        case 2475: 
        case 2476: 
        case 2477: 
        case 2478: 
        case 2479: 
        case 2480: 
        case 2481: 
        case 2482: 
        case 2483: 
        case 2484: 
        case 2485: 
        case 2486: 
        case 2487: 
        case 2488: 
        case 2489: 
        case 2490: 
        case 2491: 
        case 2492: 
        case 2493: 
        case 2494: 
        case 2495: 
        case 2496: 
        case 2497: 
        case 2498: 
        case 2499: 
        case 2500: 
        case 2501: 
        case 2502: 
        case 2503: 
        case 2504: 
        case 2505: 
        case 2506: 
        case 2507: 
        case 2508: 
        case 2509: 
        case 2510: 
        case 2511: 
        case 2512: 
        case 2513: 
        case 2514: 
        case 2515: 
        case 2516: 
        case 2517: 
        case 2518: 
        case 2519: 
        case 2520: 
        case 2521: 
        case 2522: 
        case 2523: 
        case 2524: 
        case 2525: 
        case 2526: 
        case 2527: 
        case 2528: 
        case 2529: 
        case 2530: 
        case 2531: 
        case 2532: 
        case 2533: 
        case 2534: 
        case 2535: 
        case 2536: 
        case 2537: 
        case 2538: 
        case 2539: 
        case 2540: 
        case 2541: 
        case 2542: 
        case 2543: 
        case 2544: 
        case 2545: 
        case 2546: 
        case 2547: 
        case 2548: 
        case 2549: 
        case 2550: 
        case 2551: 
        case 2552: 
        case 2553: 
        case 2554: 
        case 2555: 
        case 2556: 
        case 2557: 
        case 2558: 
        case 2559: 
        case 2560: 
        case 2561: 
        case 2562: 
        case 2563: 
        case 2564: 
        case 2565: 
        case 2566: 
        case 2567: 
        case 2568: 
        case 2569: 
        case 2570: 
        case 2571: 
        case 2572: 
        case 2573: 
        case 2574: 
        case 2575: 
        case 2576: 
        case 2577: 
        case 2578: 
        case 2579: 
        case 2580: 
        case 2581: 
        case 2582: 
        case 2583: 
        case 2584: 
        case 2585: 
        case 2586: 
        case 2587: 
        case 2588: 
        case 2589: 
        case 2590: 
        case 2591: 
        case 2592: 
        case 2593: 
        case 2594: 
        case 2595: 
        case 2596: 
        case 2597: 
        case 2598: 
        case 2599: 
        case 2600: 
        case 2601: 
        case 2602: 
        case 2603: 
        case 2604: 
        case 2605: 
        case 2606: 
        case 2607: 
        case 2608: 
        case 2609: 
        case 2610: 
        case 2611: 
        case 2612: 
        case 2613: 
        case 2614: 
        case 2615: 
        case 2616: 
        case 2617: 
        case 2618: 
        case 2619: 
        case 2620: 
        case 2621: 
        case 2622: 
        case 2623: 
        case 2624: 
        case 2625: 
        case 2626: 
        case 2627: 
        case 2628: 
        case 2629: 
        case 2630: 
        case 2631: 
        case 2632: 
        case 2633: 
        case 2634: 
        case 2635: 
        case 2636: 
        case 2637: 
        case 2638: 
        case 2639: 
        case 2640: 
        case 2641: 
        case 2642: 
        case 2643: 
        case 2644: 
        case 2645: 
        case 2646: 
        case 2647: 
        case 2648: 
        case 2649: 
        case 2650: 
        case 2651: 
        case 2652: 
        case 2653: 
        case 2654: 
        case 2655: 
        case 2656: 
        case 2657: 
        case 2658: 
        case 2659: 
        case 2660: 
        case 2661: 
        case 2662: 
        case 2663: 
        case 2664: 
        case 2665: 
        case 2666: 
        case 2667: 
        case 2668: 
        case 2669: 
        case 2670: 
        case 2671: 
        case 2672: 
        case 2673: 
        case 2674: 
        case 2675: 
        case 2676: 
        case 2677: 
        case 2678: 
        case 2679: 
        case 2680: 
        case 2681: 
        case 2682: 
        case 2683: 
        case 2684: 
        case 2685: 
        case 2686: 
        case 2687: 
        case 2688: 
        case 2689: 
        case 2690: 
        case 2691: 
        case 2692: 
        case 2693: 
        case 2694: 
        case 2695: 
        case 2696: 
        case 2697: 
        case 2698: 
        case 2699: 
        case 2700: 
        case 2701: 
        case 2702: 
        case 2703: 
        case 2704: 
        case 2705: 
        case 2706: 
        case 2707: 
        case 2708: 
        case 2709: 
        case 2710: 
        case 2711: 
        case 2712: 
        case 2713: 
        case 2714: 
        case 2715: 
        case 2716: 
        case 2717: 
        case 2718: 
        case 2719: 
        case 2720: 
        case 2721: 
        case 2722: 
        case 2723: 
        case 2724: 
        case 2725: 
        case 2726: 
        case 2727: 
        case 2728: 
        case 2729: 
        case 2730: 
        case 2731: 
        case 2732: 
        case 2733: 
        case 2734: 
        case 2735: 
        case 2736: 
        case 2737: 
        case 2738: 
        case 2739: 
        case 2740: 
        case 2741: 
        case 2742: 
        case 2743: 
        case 2744: 
        case 2745: 
        case 2746: 
        case 2747: 
        case 2748: 
        case 2749: 
        case 2750: 
        case 2751: 
        case 2752: 
        case 2753: 
        case 2754: 
        case 2755: 
        case 2756: 
        case 2757: 
        case 2758: 
        case 2759: 
        case 2760: 
        case 2761: 
        case 2762: 
        case 2763: 
        case 2764: 
        case 2765: 
        case 2766: 
        case 2767: 
        case 2768: 
        case 2769: 
        case 2770: 
        case 2771: 
        case 2772: 
        case 2773: 
        case 2774: 
        case 2775: 
        case 2776: 
        case 2777: 
        case 2778: 
        case 2779: 
        case 2780: 
        case 2781: 
        case 2782: 
        case 2783: 
        case 2784: 
        case 2785: 
        case 2786: 
        case 2787: 
        case 2788: 
        case 2789: 
        case 2790: 
        case 2791: 
        case 2792: 
        case 2793: 
        case 2794: 
        case 2795: 
        case 2796: 
        case 2797: 
        case 2798: 
        case 2799: 
        case 2800: 
        case 2801: 
        case 2802: 
        case 2803: 
        case 2804: 
        case 2805: 
        case 2806: 
        case 2807: 
        case 2808: 
        case 2809: 
        case 2810: 
        case 2811: 
        case 2812: 
        case 2813: 
        case 2814: 
        case 2815: 
        case 2816: 
        case 2817: 
        case 2818: 
        case 2819: 
        case 2820: 
        case 2821: 
        case 2822: 
        case 2823: 
        case 2824: 
        case 2825: 
        case 2826: 
        case 2827: 
        case 2828: 
        case 2829: 
        case 2830: 
        case 2831: 
        case 2832: 
        case 2833: 
        case 2834: 
        case 2835: 
        case 2836: 
        case 2837: 
        case 2838: 
        case 2839: 
        case 2840: 
        case 2841: 
        case 2842: 
        case 2843: 
        case 2844: 
        case 2845: 
        case 2846: 
        case 2847: 
        case 2848: 
        case 2849: 
        case 2850: 
        case 2851: 
        case 2852: 
        case 2853: 
        case 2854: 
        case 2855: 
        case 2856: 
        case 2857: 
        case 2858: 
        case 2859: 
        case 2860: 
        case 2861: 
        case 2862: 
        case 2863: 
        case 2864: 
        case 2865: 
        case 2866: 
        case 2867: 
        case 2868: 
        case 2869: 
        case 2870: 
        case 2871: 
        case 2872: 
        case 2873: 
        case 2874: 
        case 2875: 
        case 2876: 
        case 2877: 
        case 2878: 
        case 2879: 
        case 2880: 
        case 2881: 
        case 2882: 
        case 2883: 
        case 2884: 
        case 2885: 
        case 2886: 
        case 2887: 
        case 2888: 
        case 2889: 
        case 2890: 
        case 2891: 
        case 2892: 
        case 2893: 
        case 2894: 
        case 2895: 
        case 2896: 
        case 2897: 
        case 2898: 
        case 2899: 
        case 2900: 
        case 2901: 
        case 2902: 
        case 2903: 
        case 2904: 
        case 2905: 
        case 2906: 
        case 2907: 
        case 2908: 
        case 2909: 
        case 2910: 
        case 2911: 
        case 2912: 
        case 2913: 
        case 2914: 
        case 2915: 
        case 2916: 
        case 2917: 
        case 2918: 
        case 2919: 
        case 2920: 
        case 2921: 
        case 2922: 
        case 2923: 
        case 2924: 
        case 2925: 
        case 2926: 
        case 2927: 
        case 2928: 
        case 2929: 
        case 2930: 
        case 2931: 
        case 2932: 
        case 2933: 
        case 2934: 
        case 2935: 
        case 2936: 
        case 2937: 
        case 2938: 
        case 2939: 
        case 2940: 
        case 2941: 
        case 2942: 
        case 2943: 
        case 2944: 
        case 2945: 
        case 2946: 
        case 2947: 
        case 2948: 
        case 2949: 
        case 2950: 
        case 2951: 
        case 2952: 
        case 2953: 
        case 2954: 
        case 2955: 
        case 2956: 
        case 2957: 
        case 2958: 
        case 2959: 
        case 2960: 
        case 2961: 
        case 2962: 
        case 2963: 
        case 2964: 
        case 2965: 
        case 2966: 
        case 2967: 
        case 2968: 
        case 2969: 
        case 2970: 
        case 2971: 
        case 2972: 
        case 2973: 
        case 2974: 
        case 2975: 
        case 2976: 
        case 2977: 
        case 2978: 
        case 2979: 
        case 2980: 
        case 2981: 
        case 2982: 
        case 2983: 
        case 2984: 
        case 2985: 
        case 2986: 
        case 2987: 
        case 2988: 
        case 2989: 
        case 2990: 
        case 2991: 
        case 2992: 
        case 2993: 
        case 2994: 
        case 2995: 
        case 2996: 
        case 2997: 
        case 2998: 
        case 2999: 
        case 3000: 
        case 3001: 
        case 3002: 
        case 3003: 
        case 3004: 
        case 3005: 
        case 3006: 
        case 3007: 
        case 3008: 
        case 3009: 
        case 3010: 
        case 3011: 
        case 3012: 
        case 3013: 
        case 3014: 
        case 3015: 
        case 3016: 
        case 3017: 
        case 3018: 
        case 3019: 
        case 3020: 
        case 3021: 
        case 3022: 
        case 3023: 
        case 3024: 
        case 3025: 
        case 3026: 
        case 3027: 
        case 3028: 
        case 3029: 
        case 3030: 
        case 3031: 
        case 3032: 
        case 3033: 
        case 3034: 
        case 3035: 
        case 3036: 
        case 3037: 
        case 3038: 
        case 3039: 
        case 3040: 
        case 3041: 
        case 3042: 
        case 3043: 
        case 3044: 
        case 3045: 
        case 3046: 
        case 3047: 
        case 3048: 
        case 3049: 
        case 3050: 
        case 3051: 
        case 3052: 
        case 3053: 
        case 3054: 
        case 3055: 
        case 3056: 
        case 3057: 
        case 3058: 
        case 3059: 
        case 3060: 
        case 3061: 
        case 3062: 
        case 3063: 
        case 3064: 
        case 3065: 
        case 3066: 
        case 3067: 
        case 3068: 
        case 3069: 
        case 3070: 
        case 3071: 
        case 3072: 
        case 3073: 
        case 3074: 
        case 3075: 
        case 3076: 
        case 3077: 
        case 3078: 
        case 3079: 
        case 3080: 
        case 3081: 
        case 3082: 
        case 3083: 
        case 3084: 
        case 3085: 
        case 3086: 
        case 3087: 
        case 3088: 
        case 3089: 
        case 3090: 
        case 3091: 
        case 3092: 
        case 3093: 
        case 3094: 
        case 3095: 
        case 3096: 
        case 3097: 
        case 3098: 
        case 3099: 
        case 3100: 
        case 3101: 
        case 3102: 
        case 3103: 
        case 3104: 
        case 3105: 
        case 3106: 
        case 3107: 
        case 3108: 
        case 3109: 
        case 3110: 
        case 3111: 
        case 3112: 
        case 3113: 
        case 3114: 
        case 3115: 
        case 3116: 
        case 3117: 
        case 3118: 
        case 3119: 
        case 3120: 
        case 3121: 
        case 3122: 
        case 3123: 
        case 3124: 
        case 3125: 
        case 3126: 
        case 3127: 
        case 3128: 
        case 3129: 
        case 3130: 
        case 3131: 
        case 3132: 
        case 3133: 
        case 3134: 
        case 3135: 
        case 3136: 
        case 3137: 
        case 3138: 
        case 3139: 
        case 3140: 
        case 3141: 
        case 3142: 
        case 3143: 
        case 3144: 
        case 3145: 
        case 3146: 
        case 3147: 
        case 3148: 
        case 3149: 
        case 3150: 
        case 3151: 
        case 3152: 
        case 3153: 
        case 3154: 
        case 3155: 
        case 3156: 
        case 3157: 
        case 3158: 
        case 3159: 
        case 3160: 
        case 3161: 
        case 3162: 
        case 3163: 
        case 3164: 
        case 3165: 
        case 3166: 
        case 3167: 
        case 3168: 
        case 3169: 
        case 3170: 
        case 3171: 
        case 3172: 
        case 3173: 
        case 3174: 
        case 3175: 
        case 3176: 
        case 3177: 
        case 3178: 
        case 3179: 
        case 3180: 
        case 3181: 
        case 3182: 
        case 3183: 
        case 3184: 
        case 3185: 
        case 3186: 
        case 3187: 
        case 3188: 
        case 3189: 
        case 3190: 
        case 3191: 
        case 3192: 
        case 3193: 
        case 3194: 
        case 3195: 
        case 3196: 
        case 3197: 
        case 3198: 
        case 3199: 
        case 3200: 
        case 3201: 
        case 3202: 
        case 3203: 
        case 3204: 
        case 3205: 
        case 3206: 
        case 3207: 
        case 3208: 
        case 3209: 
        case 3210: 
        case 3211: 
        case 3212: 
        case 3213: 
        case 3214: 
        case 3215: 
        case 3216: 
        case 3217: 
        case 3218: 
        case 3219: 
        case 3220: 
        case 3221: 
        case 3222: 
        case 3223: 
        case 3224: 
        case 3225: 
        case 3226: 
        case 3227: 
        case 3228: 
        case 3229: 
        case 3230: 
        case 3231: 
        case 3232: 
        case 3233: 
        case 3234: 
        case 3235: 
        case 3236: 
        case 3237: 
        case 3238: 
        case 3239: 
        case 3240: 
        case 3241: 
        case 3242: 
        case 3243: 
        case 3244: 
        case 3245: 
        case 3246: 
        case 3247: 
        case 3248: 
        case 3249: 
        case 3250: 
        case 3251: 
        case 3252: 
        case 3253: 
        case 3254: 
        case 3255: 
        case 3256: 
        case 3257: 
        case 3258: 
        case 3259: 
        case 3260: 
        case 3261: 
        case 3262: 
        case 3263: 
        case 3264: 
        case 3265: 
        case 3266: 
        case 3267: 
        case 3268: 
        case 3269: 
        case 3270: 
        case 3271: 
        case 3272: 
        case 3273: 
        case 3274: 
        case 3275: 
        case 3276: 
        case 3277: 
        case 3278: 
        case 3279: 
        case 3280: 
        case 3281: 
        case 3282: 
        case 3283: 
        case 3284: 
        case 3285: 
        case 3286: 
        case 3287: 
        case 3288: 
        case 3289: 
        case 3290: 
        case 3291: 
        case 3292: 
        case 3293: 
        case 3294: 
        case 3295: 
        case 3296: 
        case 3297: 
        case 3298: 
        case 3299: 
        case 3300: 
        case 3301: 
        case 3302: 
        case 3303: 
        case 3304: 
        case 3305: 
        case 3306: 
        case 3307: 
        case 3308: 
        case 3309: 
        case 3310: 
        case 3311: 
        case 3312: 
        case 3313: 
        case 3314: 
        case 3315: 
        case 3316: 
        case 3317: 
        case 3318: 
        case 3319: 
        case 3320: 
        case 3321: 
        case 3322: 
        case 3323: 
        case 3324: 
        case 3325: 
        case 3326: 
        case 3327: 
        case 3328: 
        case 3329: 
        case 3330: 
        case 3331: 
        case 3332: 
        case 3333: 
        case 3334: 
        case 3335: 
        case 3336: 
        case 3337: 
        case 3338: 
        case 3339: 
        case 3340: 
        case 3341: 
        case 3342: 
        case 3343: 
        case 3344: 
        case 3345: 
        case 3346: 
        case 3347: 
        case 3348: 
        case 3349: 
        case 3350: 
        case 3351: 
        case 3352: 
        case 3353: 
        case 3354: 
        case 3355: 
        case 3356: 
        case 3357: 
        case 3358: 
        case 3359: 
        case 3360: 
        case 3361: 
        case 3362: 
        case 3363: 
        case 3364: 
        case 3365: 
        case 3366: 
        case 3367: 
        case 3368: 
        case 3369: 
        case 3370: 
        case 3371: 
        case 3372: 
        case 3373: 
        case 3374: 
        case 3375: 
        case 3376: 
        case 3377: 
        case 3378: 
        case 3379: 
        case 3380: 
        case 3381: 
        case 3382: 
        case 3383: 
        case 3384: 
        case 3385: 
        case 3386: 
        case 3387: 
        case 3388: 
        case 3389: 
        case 3390: 
        case 3391: 
        case 3392: 
        case 3393: 
        case 3394: 
        case 3395: 
        case 3396: 
        case 3397: 
        case 3398: 
        case 3399: 
        case 3400: 
        case 3401: 
        case 3402: 
        case 3403: 
        case 3404: 
        case 3405: 
        case 3406: 
        case 3407: 
        case 3408: 
        case 3409: 
        case 3410: 
        case 3411: 
        case 3412: 
        case 3413: 
        case 3414: 
        case 3415: 
        case 3416: 
        case 3417: 
        case 3418: 
        case 3419: 
        case 3420: 
        case 3421: 
        case 3422: 
        case 3423: 
        case 3424: 
        case 3425: 
        case 3426: 
        case 3427: 
        case 3428: 
        case 3429: 
        case 3430: 
        case 3431: 
        case 3432: 
        case 3433: 
        case 3434: 
        case 3435: 
        case 3436: 
        case 3437: 
        case 3438: 
        case 3439: 
        case 3440: 
        case 3441: 
        case 3442: 
        case 3443: 
        case 3444: 
        case 3445: 
        case 3446: 
        case 3447: 
        case 3448: 
        case 3449: 
        case 3450: 
        case 3451: 
        case 3452: 
        case 3453: 
        case 3454: 
        case 3455: 
        case 3456: 
        case 3457: 
        case 3458: 
        case 3459: 
        case 3460: 
        case 3461: 
        case 3462: 
        case 3463: 
        case 3464: 
        case 3465: 
        case 3466: 
        case 3467: 
        case 3468: 
        case 3469: 
        case 3470: 
        case 3471: 
        case 3472: 
        case 3473: 
        case 3474: 
        case 3475: 
        case 3476: 
        case 3477: 
        case 3478: 
        case 3479: 
        case 3480: 
        case 3481: 
        case 3482: 
        case 3483: 
        case 3484: 
        case 3485: 
        case 3486: 
        case 3487: 
        case 3488: 
        case 3489: 
        case 3490: 
        case 3491: 
        case 3492: 
        case 3493: 
        case 3494: 
        case 3495: 
        case 3496: 
        case 3497: 
        case 3498: 
        case 3499: 
        case 3500: 
        case 3501: 
        case 3502: 
        case 3503: 
        case 3504: 
        case 3505: 
        case 3506: 
        case 3507: 
        case 3508: 
        case 3509: 
        case 3510: 
        case 3511: 
        case 3512: 
        case 3513: 
        case 3514: 
        case 3515: 
        case 3516: 
        case 3517: 
        case 3518: 
        case 3519: 
        case 3520: 
        case 3521: 
        case 3522: 
        case 3523: 
        case 3524: 
        case 3525: 
        case 3526: 
        case 3527: 
        case 3528: 
        case 3529: 
        case 3530: 
        case 3531: 
        case 3532: 
        case 3533: 
        case 3534: 
        case 3535: 
        case 3536: 
        case 3537: 
        case 3538: 
        case 3539: 
        case 3540: 
        case 3541: 
        case 3542: 
        case 3543: 
        case 3544: 
        case 3545: 
        case 3546: 
        case 3547: 
        case 3548: 
        case 3549: 
        case 3550: 
        case 3551: 
        case 3552: 
        case 3553: 
        case 3554: 
        case 3555: 
        case 3556: 
        case 3557: 
        case 3558: 
        case 3559: 
        case 3560: 
        case 3561: 
        case 3562: 
        case 3563: 
        case 3564: 
        case 3565: 
        case 3566: 
        case 3567: 
        case 3568: 
        case 3569: 
        case 3570: 
        case 3571: 
        case 3572: 
        case 3573: 
        case 3574: 
        case 3575: 
        case 3576: 
        case 3577: 
        case 3578: 
        case 3579: 
        case 3580: 
        case 3581: 
        case 3582: 
        case 3583: 
        case 3584: 
        case 3585: 
        case 3586: 
        case 3587: 
        case 3588: 
        case 3589: 
        case 3590: 
        case 3591: 
        case 3592: 
        case 3593: 
        case 3594: 
        case 3595: 
        case 3596: 
        case 3597: 
        case 3598: 
        case 3599: 
        case 3600: 
        case 3601: 
        case 3602: 
        case 3603: 
        case 3604: 
        case 3605: 
        case 3606: 
        case 3607: 
        case 3608: 
        case 3609: 
        case 3610: 
        case 3611: 
        case 3612: 
        case 3613: 
        case 3614: 
        case 3615: 
        case 3616: 
        case 3617: 
        case 3618: 
        case 3619: 
        case 3620: 
        case 3621: 
        case 3622: 
        case 3623: 
        case 3624: 
        case 3625: 
        case 3626: 
        case 3627: 
        case 3628: 
        case 3629: 
        case 3630: 
        case 3631: 
        case 3632: 
        case 3633: 
        case 3634: 
        case 3635: 
        case 3636: 
        case 3637: 
        case 3638: 
        case 3639: 
        case 3640: 
        case 3641: 
        case 3642: 
        case 3643: 
        case 3644: 
        case 3645: 
        case 3646: 
        case 3647: 
        case 3648: 
        case 3649: 
        case 3650: 
        case 3651: 
        case 3652: 
        case 3653: 
        case 3654: 
        case 3655: 
        case 3656: 
        case 3657: 
        case 3658: 
        case 3659: 
        case 3660: 
        case 3661: 
        case 3662: 
        case 3663: 
        case 3664: 
        case 3665: 
        case 3666: 
        case 3667: 
        case 3668: 
        case 3669: 
        case 3670: 
        case 3671: 
        case 3672: 
        case 3673: 
        case 3674: 
        case 3675: 
        case 3676: 
        case 3677: 
        case 3678: 
        case 3679: 
        case 3680: 
        case 3681: 
        case 3682: 
        case 3683: 
        case 3684: 
        case 3685: 
        case 3686: 
        case 3687: 
        case 3688: 
        case 3689: 
        case 3690: 
        case 3691: 
        case 3692: 
        case 3693: 
        case 3694: 
        case 3695: 
        case 3696: 
        case 3697: 
        case 3698: 
        case 3699: 
        case 3700: 
        case 3701: 
        case 3702: 
        case 3703: 
        case 3704: 
        case 3705: 
        case 3706: 
        case 3707: 
        case 3708: 
        case 3709: 
        case 3710: 
        case 3711: 
        case 3712: 
        case 3713: 
        case 3714: 
        case 3715: 
        case 3716: 
        case 3717: 
        case 3718: 
        case 3719: 
        case 3720: 
        case 3721: 
        case 3722: 
        case 3723: 
        case 3724: 
        case 3725: 
        case 3726: 
        case 3727: 
        case 3728: 
        case 3729: 
        case 3730: 
        case 3731: 
        case 3732: 
        case 3733: 
        case 3734: 
        case 3735: 
        case 3736: 
        case 3737: 
        case 3738: 
        case 3739: 
        case 3740: 
        case 3741: 
        case 3742: 
        case 3743: 
        case 3744: 
        case 3745: 
        case 3746: 
        case 3747: 
        case 3748: 
        case 3749: 
        case 3750: 
        case 3751: 
        case 3752: 
        case 3753: 
        case 3754: 
        case 3755: 
        case 3756: 
        case 3757: 
        case 3758: 
        case 3759: 
        case 3760: 
        case 3761: 
        case 3762: 
        case 3763: 
        case 3764: 
        case 3765: 
        case 3766: 
        case 3767: 
        case 3768: 
        case 3769: 
        case 3770: 
        case 3771: 
        case 3772: 
        case 3773: 
        case 3774: 
        case 3775: 
        case 3776: 
        case 3777: 
        case 3778: 
        case 3779: 
        case 3780: 
        case 3781: 
        case 3782: 
        case 3783: 
        case 3784: 
        case 3785: 
        case 3786: 
        case 3787: 
        case 3788: 
        case 3789: 
        case 3790: 
        case 3791: 
        case 3792: 
        case 3793: 
        case 3794: 
        case 3795: 
        case 3796: 
        case 3797: 
        case 3798: 
        case 3799: 
        case 3800: 
        case 3801: 
        case 3802: 
        case 3803: 
        case 3804: 
        case 3805: 
        case 3806: 
        case 3807: 
        case 3808: 
        case 3809: 
        case 3810: 
        case 3811: 
        case 3812: 
        case 3813: 
        case 3814: 
        case 3815: 
        case 3816: 
        case 3817: 
        case 3818: 
        case 3819: 
        case 3820: 
        case 3821: 
        case 3822: 
        case 3823: 
        case 3824: 
        case 3825: 
        case 3826: 
        case 3827: 
        case 3828: 
        case 3829: 
        case 3830: 
        case 3831: 
        case 3832: 
        case 3833: 
        case 3834: 
        case 3835: 
        case 3836: 
        case 3837: 
        case 3838: 
        case 3839: 
        case 3840: 
        case 3841: 
        case 3842: 
        case 3843: 
        case 3844: 
        case 3845: 
        case 3846: 
        case 3847: 
        case 3848: 
        case 3849: 
        case 3850: 
        case 3851: 
        case 3852: 
        case 3853: 
        case 3854: 
        case 3855: 
        case 3856: 
        case 3857: 
        case 3858: 
        case 3859: 
        case 3860: 
        case 3861: 
        case 3862: 
        case 3863: 
        case 3864: 
        case 3865: 
        case 3866: 
        case 3867: 
        case 3868: 
        case 3869: 
        case 3870: 
        case 3871: 
        case 3872: 
        case 3873: 
        case 3874: 
        case 3875: 
        case 3876: 
        case 3877: 
        case 3878: 
        case 3879: 
        case 3880: 
        case 3881: 
        case 3882: 
        case 3883: 
        case 3884: 
        case 3885: 
        case 3886: 
        case 3887: 
        case 3888: 
        case 3889: 
        case 3890: 
        case 3891: 
        case 3892: 
        case 3893: 
        case 3894: 
        case 3895: 
        case 3896: 
        case 3897: 
        case 3898: 
        case 3899: 
        case 3900: 
        case 3901: 
        case 3902: 
        case 3903: 
        case 3904: 
        case 3905: 
        case 3906: 
        case 3907: 
        case 3908: 
        case 3909: 
        case 3910: 
        case 3911: 
        case 3912: 
        case 3913: 
        case 3914: 
        case 3915: 
        case 3916: 
        case 3917: 
        case 3918: 
        case 3919: 
        case 3920: 
        case 3921: 
        case 3922: 
        case 3923: 
        case 3924: 
        case 3925: 
        case 3926: 
        case 3927: 
        case 3928: 
        case 3929: 
        case 3930: 
        case 3931: 
        case 3932: 
        case 3933: 
        case 3934: 
        case 3935: 
        case 3936: 
        case 3937: 
        case 3938: 
        case 3939: 
        case 3940: 
        case 3941: 
        case 3942: 
        case 3943: 
        case 3944: 
        case 3945: 
        case 3946: 
        case 3947: 
        case 3948: 
        case 3949: 
        case 3950: 
        case 3951: 
        case 3952: 
        case 3953: 
        case 3954: 
        case 3955: 
        case 3956: 
        case 3957: 
        case 3958: 
        case 3959: 
        case 3960: 
        case 3961: 
        case 3962: 
        case 3963: 
        case 3964: 
        case 3965: 
        case 3966: 
        case 3967: 
        case 3968: 
        case 3969: 
        case 3970: 
        case 3971: 
        case 3972: 
        case 3973: 
        case 3974: 
        case 3975: 
        case 3976: 
        case 3977: 
        case 3978: 
        case 3979: 
        case 3980: 
        case 3981: 
        case 3982: 
        case 3983: 
        case 3984: 
        case 3985: 
        case 3986: 
        case 3987: 
        case 3988: 
        case 3989: 
        case 3990: 
        case 3991: 
        case 3992: 
        case 3993: 
        case 3994: 
        case 3995: 
        case 3996: 
        case 3997: 
        case 3998: 
        case 3999: 
        case 4000: 
        case 4001: 
        case 4002: 
        case 4003: 
        case 4004: 
        case 4005: 
        case 4006: 
        case 4007: 
        case 4008: 
        case 4009: 
        case 4010: 
        case 4011: 
        case 4012: 
        case 4013: 
        case 4014: 
        case 4015: 
        case 4016: 
        case 4017: 
        case 4018: 
        case 4019: 
        case 4020: 
        case 4021: 
        case 4022: 
        case 4023: 
        case 4024: 
        case 4025: 
        case 4026: 
        case 4027: 
        case 4028: 
        case 4029: 
        case 4030: 
        case 4031: 
        case 4032: 
        case 4033: 
        case 4034: 
        case 4035: 
        case 4036: 
        case 4037: 
        case 4038: 
        case 4039: 
        case 4040: 
        case 4041: 
        case 4042: 
        case 4043: 
        case 4044: 
        case 4045: 
        case 4046: 
        case 4047: 
        case 4048: 
        case 4049: 
        case 4050: 
        case 4051: 
        case 4052: 
        case 4053: 
        case 4054: 
        case 4055: 
        case 4056: 
        case 4057: 
        case 4058: 
        case 4059: 
        case 4060: 
        case 4061: 
        case 4062: 
        case 4063: 
        case 4064: 
        case 4065: 
        case 4066: 
        case 4067: 
        case 4068: 
        case 4069: 
        case 4070: 
        case 4071: 
        case 4072: 
        case 4073: 
        case 4074: 
        case 4075: 
        case 4076: 
        case 4077: 
        case 4078: 
        case 4079: 
        case 4080: 
        case 4081: 
        case 4082: 
        case 4083: 
        case 4084: 
        case 4085: 
        case 4086: 
        case 4087: 
        case 4088: 
        case 4089: 
        case 4090: 
        case 4091: 
        case 4092: 
        case 4093: 
        case 4094: 
        case 4095: 
        case 4096: 
        case 4097: 
        case 4098: 
        case 4099: 
        case 4100: 
        case 4101: 
        case 4102: 
        case 4103: 
        case 4104: 
        case 4105: 
        case 4106: 
        case 4107: 
        case 4108: 
        case 4109: 
        case 4110: 
        case 4111: 
        case 4112: 
        case 4113: 
        case 4114: 
        case 4115: 
        case 4116: 
        case 4117: 
        case 4118: 
        case 4119: 
        case 4120: 
        case 4121: 
        case 4122: 
        case 4123: 
        case 4124: 
        case 4125: 
        case 4126: 
        case 4127: 
        case 4128: 
        case 4129: 
        case 4130: 
        case 4131: 
        case 4132: 
        case 4133: 
        case 4134: 
        case 4135: 
        case 4136: 
        case 4137: 
        case 4138: 
        case 4139: 
        case 4140: 
        case 4141: 
        case 4142: 
        case 4143: 
        case 4144: 
        case 4145: 
        case 4146: 
        case 4147: 
        case 4148: 
        case 4149: 
        case 4150: 
        case 4151: 
        case 4152: 
        case 4153: 
        case 4154: 
        case 4155: 
        case 4156: 
        case 4157: 
        case 4158: 
        case 4159: 
        case 4160: 
        case 4161: 
        case 4162: 
        case 4163: 
        case 4164: 
        case 4165: 
        case 4166: 
        case 4167: 
        case 4168: 
        case 4169: 
        case 4170: 
        case 4171: 
        case 4172: 
        case 4173: 
        case 4174: 
        case 4175: 
        case 4176: 
        case 4177: 
        case 4178: 
        case 4179: 
        case 4180: 
        case 4181: 
        case 4182: 
        case 4183: 
        case 4184: 
        case 4185: 
        case 4186: 
        case 4187: 
        case 4188: 
        case 4189: 
        case 4190: 
        case 4191: 
        case 4192: 
        case 4193: 
        case 4194: 
        case 4195: 
        case 4196: 
        case 4197: 
        case 4198: 
        case 4199: 
        case 4200: 
        case 4201: 
        case 4202: 
        case 4203: 
        case 4204: 
        case 4205: 
        case 4206: 
        case 4207: 
        case 4208: 
        case 4209: 
        case 4210: 
        case 4211: 
        case 4212: 
        case 4213: 
        case 4214: 
        case 4215: 
        case 4216: 
        case 4217: 
        case 4218: 
        case 4219: 
        case 4220: 
        case 4221: 
        case 4222: 
        case 4223: 
        case 4224: 
        case 4225: 
        case 4226: 
        case 4227: 
        case 4228: 
        case 4229: 
        case 4230: 
        case 4231: 
        case 4232: 
        case 4233: 
        case 4234: 
        case 4235: 
        case 4236: 
        case 4237: 
        case 4238: 
        case 4239: 
        case 4240: 
        case 4241: 
        case 4242: 
        case 4243: 
        case 4244: 
        case 4245: 
        case 4246: 
        case 4247: 
        case 4248: 
        case 4249: 
        case 4250: 
        case 4251: 
        case 4252: 
        case 4253: 
        case 4254: 
        case 4255: 
        case 4256: 
        case 4257: 
        case 4258: 
        case 4259: 
        case 4260: 
        case 4261: 
        case 4262: 
        case 4263: 
        case 4264: 
        case 4265: 
        case 4266: 
        case 4267: 
        case 4268: 
        case 4269: 
        case 4270: 
        case 4271: 
        case 4272: 
        case 4273: 
        case 4274: 
        case 4275: 
        case 4276: 
        case 4277: 
        case 4278: 
        case 4279: 
        case 4280: 
        case 4281: 
        case 4282: 
        case 4283: 
        case 4284: 
        case 4285: 
        case 4286: 
        case 4287: 
        case 4288: 
        case 4289: 
        case 4290: 
        case 4291: 
        case 4292: 
        case 4293: 
        case 4294: 
        case 4295: 
        case 4296: 
        case 4297: 
        case 4298: 
        case 4299: 
        case 4300: 
        case 4301: 
        case 4302: 
        case 4303: 
        case 4304: 
        case 4305: 
        case 4306: 
        case 4307: 
        case 4308: 
        case 4309: 
        case 4310: 
        case 4311: 
        case 4312: 
        case 4313: 
        case 4314: 
        case 4315: 
        case 4316: 
        case 4317: 
        case 4318: 
        case 4319: 
        case 4320: 
        case 4321: 
        case 4322: 
        case 4323: 
        case 4324: 
        case 4325: 
        case 4326: 
        case 4327: 
        case 4328: 
        case 4329: 
        case 4330: 
        case 4331: 
        case 4332: 
        case 4333: 
        case 4334: 
        case 4335: 
        case 4336: 
        case 4337: 
        case 4338: 
        case 4339: 
        case 4340: 
        case 4341: 
        case 4342: 
        case 4343: 
        case 4344: 
        case 4345: 
        case 4346: 
        case 4347: 
        case 4348: 
        case 4349: 
        case 4350: 
        case 4351: 
        case 4352: 
        case 4353: 
        case 4354: 
        case 4355: 
        case 4356: 
        case 4357: 
        case 4358: 
        case 4359: 
        case 4360: 
        case 4361: 
        case 4362: 
        case 4363: 
        case 4364: 
        case 4365: 
        case 4366: 
        case 4367: 
        case 4368: 
        case 4369: 
        case 4370: 
        case 4371: 
        case 4372: 
        case 4373: 
        case 4374: 
        case 4375: 
        case 4376: 
        case 4377: 
        case 4378: 
        case 4379: 
        case 4380: 
        case 4381: 
        case 4382: 
        case 4383: 
        case 4384: 
        case 4385: 
        case 4386: 
        case 4387: 
        case 4388: 
        case 4389: 
        case 4390: 
        case 4391: 
        case 4392: 
        case 4393: 
        case 4394: 
        case 4395: 
        case 4396: 
        case 4397: 
        case 4398: 
        case 4399: 
        case 4400: 
        case 4401: 
        case 4402: 
        case 4403: 
        case 4404: 
        case 4405: 
        case 4406: 
        case 4407: 
        case 4408: 
        case 4409: 
        case 4410: 
        case 4411: 
        case 4412: 
        case 4413: 
        case 4414: 
        case 4415: 
        case 4416: 
        case 4417: 
        case 4418: 
        case 4419: 
        case 4420: 
        case 4421: 
        case 4422: 
        case 4423: 
        case 4424: 
        case 4425: 
        case 4426: 
        case 4427: 
        case 4428: 
        case 4429: 
        case 4430: 
        case 4431: 
        case 4432: 
        case 4433: 
        case 4434: 
        case 4435: 
        case 4436: 
        case 4437: 
        case 4438: 
        case 4439: 
        case 4440: 
        case 4441: 
        case 4442: 
        case 4443: 
        case 4444: 
        case 4445: 
        case 4446: 
        case 4447: 
        case 4448: 
        case 4449: 
        case 4450: 
        case 4451: 
        case 4452: 
        case 4453: 
        case 4454: 
        case 4455: 
        case 4456: 
        case 4457: 
        case 4458: 
        case 4459: 
        case 4460: 
        case 4461: 
        case 4462: 
        case 4463: 
        case 4464: 
        case 4465: 
        case 4466: 
        case 4467: 
        case 4468: 
        case 4469: 
        case 4470: 
        case 4471: 
        case 4472: 
        case 4473: 
        case 4474: 
        case 4475: 
        case 4476: 
        case 4477: 
        case 4478: 
        case 4479: 
        case 4480: 
        case 4481: 
        case 4482: 
        case 4483: 
        case 4484: 
        case 4485: 
        case 4486: 
        case 4487: 
        case 4488: 
        case 4489: 
        case 4490: 
        case 4491: 
        case 4492: 
        case 4493: 
        case 4494: 
        case 4495: 
        case 4496: 
        case 4497: 
        case 4498: 
        case 4499: 
        case 4500: 
        case 4501: 
        case 4502: 
        case 4503: 
        case 4504: 
        case 4505: 
        case 4506: 
        case 4507: 
        case 4508: 
        case 4509: 
        case 4510: 
        case 4511: 
        case 4512: 
        case 4513: 
        case 4514: 
        case 4515: 
        case 4516: 
        case 4517: 
        case 4518: 
        case 4519: 
        case 4520: 
        case 4521: 
        case 4522: 
        case 4523: 
        case 4524: 
        case 4525: 
        case 4526: 
        case 4527: 
        case 4528: 
        case 4529: 
        case 4530: 
        case 4531: 
        case 4532: 
        case 4533: 
        case 4534: 
        case 4535: 
        case 4536: 
        case 4537: 
        case 4538: 
        case 4539: 
        case 4540: 
        case 4541: 
        case 4542: 
        case 4543: 
        case 4544: 
        case 4545: 
        case 4546: 
        case 4547: 
        case 4548: 
        case 4549: 
        case 4550: 
        case 4551: 
        case 4552: 
        case 4553: 
        case 4554: 
        case 4555: 
        case 4556: 
        case 4557: 
        case 4558: 
        case 4559: 
        case 4560: 
        case 4561: 
        case 4562: 
        case 4563: 
        case 4564: 
        case 4565: 
        case 4566: 
        case 4567: 
        case 4568: 
        case 4569: 
        case 4570: 
        case 4571: 
        case 4572: 
        case 4573: 
        case 4574: 
        case 4575: 
        case 4576: 
        case 4577: 
        case 4578: 
        case 4579: 
        case 4580: 
        case 4581: 
        case 4582: 
        case 4583: 
        case 4584: 
        case 4585: 
        case 4586: 
        case 4587: 
        case 4588: 
        case 4589: 
        case 4590: 
        case 4591: 
        case 4592: 
        case 4593: 
        case 4594: 
        case 4595: 
        case 4596: 
        case 4597: 
        case 4598: 
        case 4599: 
        case 4600: 
        case 4601: 
        case 4602: 
        case 4603: 
        case 4604: 
        case 4605: 
        case 4606: 
        case 4607: 
        case 4608: 
        case 4609: 
        case 4610: 
        case 4611: 
        case 4612: 
        case 4613: 
        case 4614: 
        case 4615: 
        case 4616: 
        case 4617: 
        case 4618: 
        case 4619: 
        case 4620: 
        case 4621: 
        case 4622: 
        case 4623: 
        case 4624: 
        case 4625: 
        case 4626: 
        case 4627: 
        case 4628: 
        case 4629: 
        case 4630: 
        case 4631: 
        case 4632: 
        case 4633: 
        case 4634: 
        case 4635: 
        case 4636: 
        case 4637: 
        case 4638: 
        case 4639: 
        case 4640: 
        case 4641: 
        case 4642: 
        case 4643: 
        case 4644: 
        case 4645: 
        case 4646: 
        case 4647: 
        case 4648: 
        case 4649: 
        case 4650: 
        case 4651: 
        case 4652: 
        case 4653: 
        case 4654: 
        case 4655: 
        case 4656: 
        case 4657: 
        case 4658: 
        case 4659: 
        case 4660: 
        case 4661: 
        case 4662: 
        case 4663: 
        case 4664: 
        case 4665: 
        case 4666: 
        case 4667: 
        case 4668: 
        case 4669: 
        case 4670: 
        case 4671: 
        case 4672: 
        case 4673: 
        case 4674: 
        case 4675: 
        case 4676: 
        case 4677: 
        case 4678: 
        case 4679: 
        case 4680: 
        case 4681: 
        case 4682: 
        case 4683: 
        case 4684: 
        case 4685: 
        case 4686: 
        case 4687: 
        case 4688: 
        case 4689: 
        case 4690: 
        case 4691: 
        case 4692: 
        case 4693: 
        case 4694: 
        case 4695: 
        case 4696: 
        case 4697: 
        case 4698: 
        case 4699: 
        case 4700: 
        case 4701: 
        case 4702: 
        case 4703: 
        case 4704: 
        case 4705: 
        case 4706: 
        case 4707: 
        case 4708: 
        case 4709: 
        case 4710: 
        case 4711: 
        case 4712: 
        case 4713: 
        case 4714: 
        case 4715: 
        case 4716: 
        case 4717: 
        case 4718: 
        case 4719: 
        case 4720: 
        case 4721: 
        case 4722: 
        case 4723: 
        case 4724: 
        case 4725: 
        case 4726: 
        case 4727: 
        case 4728: 
        case 4729: 
        case 4730: 
        case 4731: 
        case 4732: 
        case 4733: 
        case 4734: 
        case 4735: 
        case 4736: 
        case 4737: 
        case 4738: 
        case 4739: 
        case 4740: 
        case 4741: 
        case 4742: 
        case 4743: 
        case 4744: 
        case 4745: 
        case 4746: 
        case 4747: 
        case 4748: 
        case 4749: 
        case 4750: 
        case 4751: 
        case 4752: 
        case 4753: 
        case 4754: 
        case 4755: 
        case 4756: 
        case 4757: 
        case 4758: 
        case 4759: 
        case 4760: 
        case 4761: 
        case 4762: 
        case 4763: 
        case 4764: 
        case 4765: 
        case 4766: 
        case 4767: 
        case 4768: 
        case 4769: 
        case 4770: 
        case 4771: 
        case 4772: 
        case 4773: 
        case 4774: 
        case 4775: 
        case 4776: 
        case 4777: 
        case 4778: 
        case 4779: 
        case 4780: 
        case 4781: 
        case 4782: 
        case 4783: 
        case 4784: 
        case 4785: 
        case 4786: 
        case 4787: 
        case 4788: 
        case 4789: 
        case 4790: 
        case 4791: 
        case 4792: 
        case 4793: 
        case 4794: 
        case 4795: 
        case 4796: 
        case 4797: 
        case 4798: 
        case 4799: 
        case 4800: 
        case 4801: 
        case 4802: 
        case 4803: 
        case 4804: 
        case 4805: 
        case 4806: 
        case 4807: 
        case 4808: 
        case 4809: 
        case 4810: 
        case 4811: 
        case 4812: 
        case 4813: 
        case 4814: 
        case 4815: 
        case 4816: 
        case 4817: 
        case 4818: 
        case 4819: 
        case 4820: 
        case 4821: 
        case 4822: 
        case 4823: 
        case 4824: 
        case 4825: 
        case 4826: 
        case 4827: 
        case 4828: 
        case 4829: 
        case 4830: 
        case 4831: 
        case 4832: 
        case 4833: 
        case 4834: 
        case 4835: 
        case 4836: 
        case 4837: 
        case 4838: 
        case 4839: 
        case 4840: 
        case 4841: 
        case 4842: 
        case 4843: 
        case 4844: 
        case 4845: 
        case 4846: 
        case 4847: 
        case 4848: 
        case 4849: 
        case 4850: 
        case 4851: 
        case 4852: 
        case 4853: 
        case 4854: 
        case 4855: 
        case 4856: 
        case 4857: 
        case 4858: 
        case 4859: 
        case 4860: 
        case 4861: 
        case 4862: 
        case 4863: 
        case 4864: 
        case 4865: 
        case 4866: 
        case 4867: 
        case 4868: 
        case 4869: 
        case 4870: 
        case 4871: 
        case 4872: 
        case 4873: 
        case 4874: 
        case 4875: 
        case 4876: 
        case 4877: 
        case 4878: 
        case 4879: 
        case 4880: 
        case 4881: 
        case 4882: 
        case 4883: 
        case 4884: 
        case 4885: 
        case 4886: 
        case 4887: 
        case 4888: 
        case 4889: 
        case 4890: 
        case 4891: 
        case 4892: 
        case 4893: 
        case 4894: 
        case 4895: 
        case 4896: 
        case 4897: 
        case 4898: 
        case 4899: 
        case 4900: 
        case 4901: 
        case 4902: 
        case 4903: 
        case 4904: 
        case 4905: 
        case 4906: 
        case 4907: 
        case 4908: 
        case 4909: 
        case 4910: 
        case 4911: 
        case 4912: 
        case 4913: 
        case 4914: 
        case 4915: 
        case 4916: 
        case 4917: 
        case 4918: 
        case 4919: 
        case 4920: 
        case 4921: 
        case 4922: 
        case 4923: 
        case 4924: 
        case 4925: 
        case 4926: 
        case 4927: 
        case 4928: 
        case 4929: 
        case 4930: 
        case 4931: 
        case 4932: 
        case 4933: 
        case 4934: 
        case 4935: 
        case 4936: 
        case 4937: 
        case 4938: 
        case 4939: 
        case 4940: 
        case 4941: 
        case 4942: 
        case 4943: 
        case 4944: 
        case 4945: 
        case 4946: 
        case 4947: 
        case 4948: 
        case 4949: 
        case 4950: 
        case 4951: 
        case 4952: 
        case 4953: 
        case 4954: 
        case 4955: 
        case 4956: 
        case 4957: 
        case 4958: 
        case 4959: 
        case 4960: 
        case 4961: 
        case 4962: 
        case 4963: 
        case 4964: 
        case 4965: 
        case 4966: 
        case 4967: 
        case 4968: 
        case 4969: 
        case 4970: 
        case 4971: 
        case 4972: 
        case 4973: 
        case 4974: 
        case 4975: 
        case 4976: 
        case 4977: 
        case 4978: 
        case 4979: 
        case 4980: 
        case 4981: 
        case 4982: 
        case 4983: 
        case 4984: 
        case 4985: 
        case 4986: 
        case 4987: 
        case 4988: 
        case 4989: 
        case 4990: 
        case 4991: 
        case 4992: 
        case 4993: 
        case 4994: 
        case 4995: 
        case 4996: 
        case 4997: 
        case 4998: 
        case 4999: 
        case 5000: 
        case 5001: 
        case 5002: 
        case 5003: 
        case 5004: 
        case 5005: 
        case 5006: 
        case 5007: 
        case 5008: 
        case 5009: 
        case 5010: 
        case 5011: 
        case 5012: 
        case 5013: 
        case 5014: 
        case 5015: 
        case 5016: 
        case 5017: 
        case 5018: 
        case 5019: 
        case 5020: 
        case 5021: 
        case 5022: 
        case 5023: 
        case 5024: 
        case 5025: 
        case 5026: 
        case 5027: 
        case 5028: 
        case 5029: 
        case 5030: 
        case 5031: 
        case 5032: 
        case 5033: 
        case 5034: 
        case 5035: 
        case 5036: 
        case 5037: 
        case 5038: 
        case 5039: 
        case 5040: 
        case 5041: 
        case 5042: 
        case 5043: 
        case 5044: 
        case 5045: 
        case 5046: 
        case 5047: 
        case 5048: 
        case 5049: 
        case 5050: 
        case 5051: 
        case 5052: 
        case 5053: 
        case 5054: 
        case 5055: 
        case 5056: 
        case 5057: 
        case 5058: 
        case 5059: 
        case 5060: 
        case 5061: 
        case 5062: 
        case 5063: 
        case 5064: 
        case 5065: 
        case 5066: 
        case 5067: 
        case 5068: 
        case 5069: 
        case 5070: 
        case 5071: 
        case 5072: 
        case 5073: 
        case 5074: 
        case 5075: 
        case 5076: 
        case 5077: 
        case 5078: 
        case 5079: 
        case 5080: 
        case 5081: 
        case 5082: 
        case 5083: 
        case 5084: 
        case 5085: 
        case 5086: 
        case 5087: 
        case 5088: 
        case 5089: 
        case 5090: 
        case 5091: 
        case 5092: 
        case 5093: 
        case 5094: 
        case 5095: 
        case 5096: 
        case 5097: 
        case 5098: 
        case 5099: 
        case 5100: 
        case 5101: 
        case 5102: 
        case 5103: 
        case 5104: 
        case 5105: 
        case 5106: 
        case 5107: 
        case 5108: 
        case 5109: 
        case 5110: 
        case 5111: 
        case 5112: 
        case 5113: 
        case 5114: 
        case 5115: 
        case 5116: 
        case 5117: 
        case 5118: 
        case 5119: 
        case 5120: 
        case 5121: 
        case 5122: 
        case 5123: 
        case 5124: 
        case 5125: 
        case 5126: 
        case 5127: 
        case 5128: 
        case 5129: 
        case 5130: 
        case 5131: 
        case 5132: 
        case 5133: 
        case 5134: 
        case 5135: 
        case 5136: 
        case 5137: 
        case 5138: 
        case 5139: 
        case 5140: 
        case 5141: 
        case 5142: 
        case 5143: 
        case 5144: 
        case 5145: 
        case 5146: 
        case 5147: 
        case 5148: 
        case 5149: 
        case 5150: 
        case 5151: 
        case 5152: 
        case 5153: 
        case 5154: 
        case 5155: 
        case 5156: 
        case 5157: 
        case 5158: 
        case 5159: 
        case 5160: 
        case 5161: 
        case 5162: 
        case 5163: 
        case 5164: 
        case 5165: 
        case 5166: 
        case 5167: 
        case 5168: 
        case 5169: 
        case 5170: 
        case 5171: 
        case 5172: 
        case 5173: 
        case 5174: 
        case 5175: 
        case 5176: 
        case 5177: 
        case 5178: 
        case 5179: 
        case 5180: 
        case 5181: 
        case 5182: 
        case 5183: 
        case 5184: 
        case 5185: 
        case 5186: 
        case 5187: 
        case 5188: 
        case 5189: 
        case 5190: 
        case 5191: 
        case 5192: 
        case 5193: 
        case 5194: 
        case 5195: 
        case 5196: 
        case 5197: 
        case 5198: 
        case 5199: 
        case 5200: 
        case 5201: 
        case 5202: 
        case 5203: 
        case 5204: 
        case 5205: 
        case 5206: 
        case 5207: 
        case 5208: 
        case 5209: 
        case 5210: 
        case 5211: 
        case 5212: 
        case 5213: 
        case 5214: 
        case 5215: 
        case 5216: 
        case 5217: 
        case 5218: 
        case 5219: 
        case 5220: 
        case 5221: 
        case 5222: 
        case 5223: 
        case 5224: 
        case 5225: 
        case 5226: 
        case 5227: 
        case 5228: 
        case 5229: 
        case 5230: 
        case 5231: 
        case 5232: 
        case 5233: 
        case 5234: 
        case 5235: 
        case 5236: 
        case 5237: 
        case 5238: 
        case 5239: 
        case 5240: 
        case 5241: 
        case 5242: 
        case 5243: 
        case 5244: 
        case 5245: 
        case 5246: 
        case 5247: 
        case 5248: 
        case 5249: 
        case 5250: 
        case 5251: 
        case 5252: 
        case 5253: 
        case 5254: 
        case 5255: 
        case 5256: 
        case 5257: 
        case 5258: 
        case 5259: 
        case 5260: 
        case 5261: 
        case 5262: 
        case 5263: 
        case 5264: 
        case 5265: 
        case 5266: 
        case 5267: 
        case 5268: 
        case 5269: 
        case 5270: 
        case 5271: 
        case 5272: 
        case 5273: 
        case 5274: 
        case 5275: 
        case 5276: 
        case 5277: 
        case 5278: 
        case 5279: 
        case 5280: 
        case 5281: 
        case 5282: 
        case 5283: 
        case 5284: 
        case 5285: 
        case 5286: 
        case 5287: 
        case 5288: 
        case 5289: 
        case 5290: 
        case 5291: 
        case 5292: 
        case 5293: 
        case 5294: 
        case 5295: 
        case 5296: 
        case 5297: 
        case 5298: 
        case 5299: 
        case 5300: 
        case 5301: 
        case 5302: 
        case 5303: 
        case 5304: 
        case 5305: 
        case 5306: 
        case 5307: 
        case 5308: 
        case 5309: 
        case 5310: 
        case 5311: 
        case 5312: 
        case 5313: 
        case 5314: 
        case 5315: 
        case 5316: 
        case 5317: 
        case 5318: 
        case 5319: 
        case 5320: 
        case 5321: 
        case 5322: 
        case 5323: 
        case 5324: 
        case 5325: 
        case 5326: 
        case 5327: 
        case 5328: 
        case 5329: 
        case 5330: 
        case 5331: 
        case 5332: 
        case 5333: 
        case 5334: 
        case 5335: 
        case 5336: 
        case 5337: 
        case 5338: 
        case 5339: 
        case 5340: 
        case 5341: 
        case 5342: 
        case 5343: 
        case 5344: 
        case 5345: 
        case 5346: 
        case 5347: 
        case 5348: 
        case 5349: 
        case 5350: 
        case 5351: 
        case 5352: 
        case 5353: 
        case 5354: 
        case 5355: 
        case 5356: 
        case 5357: 
        case 5358: 
        case 5359: 
        case 5360: 
        case 5361: 
        case 5362: 
        case 5363: 
        case 5364: 
        case 5365: 
        case 5366: 
        case 5367: 
        case 5368: 
        case 5369: 
        case 5370: 
        case 5371: 
        case 5372: 
        case 5373: 
        case 5374: 
        case 5375: 
        case 5376: 
        case 5377: 
        case 5378: 
        case 5379: 
        case 5380: 
        case 5381: 
        case 5382: 
        case 5383: 
        case 5384: 
        case 5385: 
        case 5386: 
        case 5387: 
        case 5388: 
        case 5389: 
        case 5390: 
        case 5391: 
        case 5392: 
        case 5393: 
        case 5394: 
        case 5395: 
        case 5396: 
        case 5397: 
        case 5398: 
        case 5399: 
        case 5400: 
        case 5401: 
        case 5402: 
        case 5403: 
        case 5404: 
        case 5405: 
        case 5406: 
        case 5407: 
        case 5408: 
        case 5409: 
        case 5410: 
        case 5411: 
        case 5412: 
        case 5413: 
        case 5414: 
        case 5415: 
        case 5416: 
        case 5417: 
        case 5418: 
        case 5419: 
        case 5420: 
        case 5421: 
        case 5422: 
        case 5423: 
        case 5424: 
        case 5425: 
        case 5426: 
        case 5427: 
        case 5428: 
        case 5429: 
        case 5430: 
        case 5431: 
        case 5432: 
        case 5433: 
        case 5434: 
        case 5435: 
        case 5436: 
        case 5437: 
        case 5438: 
        case 5439: 
        case 5440: 
        case 5441: 
        case 5442: 
        case 5443: 
        case 5444: 
        case 5445: 
        case 5446: 
        case 5447: 
        case 5448: 
        case 5449: 
        case 5450: 
        case 5451: 
        case 5452: 
        case 5453: 
        case 5454: 
        case 5455: 
        case 5456: 
        case 5457: 
        case 5458: 
        case 5459: 
        case 5460: 
        case 5461: 
        case 5462: 
        case 5463: 
        case 5464: 
        case 5465: 
        case 5466: 
        case 5467: 
        case 5468: 
        case 5469: 
        case 5470: 
        case 5471: 
        case 5472: 
        case 5473: 
        case 5474: 
        case 5475: 
        case 5476: 
        case 5477: 
        case 5478: 
        case 5479: 
        case 5480: 
        case 5481: 
        case 5482: 
        case 5483: 
        case 5484: 
        case 5485: 
        case 5486: 
        case 5487: 
        case 5488: 
        case 5489: 
        case 5490: 
        case 5491: 
        case 5492: 
        case 5493: 
        case 5494: 
        case 5495: 
        case 5496: 
        case 5497: 
        case 5498: 
        case 5499: 
        case 5500: 
        case 5501: 
        case 5502: 
        case 5503: 
        case 5504: 
        case 5505: 
        case 5506: 
        case 5507: 
        case 5508: 
        case 5509: 
        case 5510: 
        case 5511: 
        case 5512: 
        case 5513: 
        case 5514: 
        case 5515: 
        case 5516: 
        case 5517: 
        case 5518: 
        case 5519: 
        case 5520: 
        case 5521: 
        case 5522: 
        case 5523: 
        case 5524: 
        case 5525: 
        case 5526: 
        case 5527: 
        case 5528: 
        case 5529: 
        case 5530: 
        case 5531: 
        case 5532: 
        case 5533: 
        case 5534: 
        case 5535: 
        case 5536: 
        case 5537: 
        case 5538: 
        case 5539: 
        case 5540: 
        case 5541: 
        case 5542: 
        case 5543: 
        case 5544: 
        case 5545: 
        case 5546: 
        case 5547: 
        case 5548: 
        case 5549: 
        case 5550: 
        case 5551: 
        case 5552: 
        case 5553: 
        case 5554: 
        case 5555: 
        case 5556: 
        case 5557: 
        case 5558: 
        case 5559: 
        case 5560: 
        case 5561: 
        case 5562: 
        case 5563: 
        case 5564: 
        case 5565: 
        case 5566: 
        case 5567: 
        case 5568: 
        case 5569: 
        case 5570: 
        case 5571: 
        case 5572: 
        case 5573: 
        case 5574: 
        case 5575: 
        case 5576: 
        case 5577: 
        case 5578: 
        case 5579: 
        case 5580: 
        case 5581: 
        case 5582: 
        case 5583: 
        case 5584: 
        case 5585: 
        case 5586: 
        case 5587: 
        case 5588: 
        case 5589: 
        case 5590: 
        case 5591: 
        case 5592: 
        case 5593: 
        case 5594: 
        case 5595: 
        case 5596: 
        case 5597: 
        case 5598: 
        case 5599: 
        case 5600: 
        case 5601: 
        case 5602: 
        case 5603: 
        case 5604: 
        case 5605: 
        case 5606: 
        case 5607: 
        case 5608: 
        case 5609: 
        case 5610: 
        case 5611: 
        case 5612: 
        case 5613: 
        case 5614: 
        case 5615: 
        case 5616: 
        case 5617: 
        case 5618: 
        case 5619: 
        case 5620: 
        case 5621: 
        case 5622: 
        case 5623: 
        case 5624: 
        case 5625: 
        case 5626: 
        case 5627: 
        case 5628: 
        case 5629: 
        case 5630: 
        case 5631: 
        case 5632: 
        case 5633: 
        case 5634: 
        case 5635: 
        case 5636: 
        case 5637: 
        case 5638: 
        case 5639: 
        case 5640: 
        case 5641: 
        case 5642: 
        case 5643: 
        case 5644: 
        case 5645: 
        case 5646: 
        case 5647: 
        case 5648: 
        case 5649: 
        case 5650: 
        case 5651: 
        case 5652: 
        case 5653: 
        case 5654: 
        case 5655: 
        case 5656: 
        case 5657: 
        case 5658: 
        case 5659: 
        case 5660: 
        case 5661: 
        case 5662: 
        case 5663: 
        case 5664: 
        case 5665: 
        case 5666: 
        case 5667: 
        case 5668: 
        case 5669: 
        case 5670: 
        case 5671: 
        case 5672: 
        case 5673: 
        case 5674: 
        case 5675: 
        case 5676: 
        case 5677: 
        case 5678: 
        case 5679: 
        case 5680: 
        case 5681: 
        case 5682: 
        case 5683: 
        case 5684: 
        case 5685: 
        case 5686: 
        case 5687: 
        case 5688: 
        case 5689: 
        case 5690: 
        case 5691: 
        case 5692: 
        case 5693: 
        case 5694: 
        case 5695: 
        case 5696: 
        case 5697: 
        case 5698: 
        case 5699: 
        case 5700: 
        case 5701: 
        case 5702: 
        case 5703: 
        case 5704: 
        case 5705: 
        case 5706: 
        case 5707: 
        case 5708: 
        case 5709: 
        case 5710: 
        case 5711: 
        case 5712: 
        case 5713: 
        case 5714: 
        case 5715: 
        case 5716: 
        case 5717: 
        case 5718: 
        case 5719: 
        case 5720: 
        case 5721: 
        case 5722: 
        case 5723: 
        case 5724: 
        case 5725: 
        case 5726: 
        case 5727: 
        case 5728: 
        case 5729: 
        case 5730: 
        case 5731: 
        case 5732: 
        case 5733: 
        case 5734: 
        case 5735: 
        case 5736: 
        case 5737: 
        case 5738: 
        case 5739: 
        case 5740: 
        case 5741: 
        case 5742: 
        case 5743: 
        case 5744: 
        case 5745: 
        case 5746: 
        case 5747: 
        case 5748: 
        case 5749: 
        case 5750: 
        case 5751: 
        case 5752: 
        case 5753: 
        case 5754: 
        case 5755: 
        case 5756: 
        case 5757: 
        case 5758: 
        case 5759: 
        case 5760: 
        case 5761: 
        case 5762: 
        case 5763: 
        case 5764: 
        case 5765: 
        case 5766: 
        case 5767: 
        case 5768: 
        case 5769: 
        case 5770: 
        case 5771: 
        case 5772: 
        case 5773: 
        case 5774: 
        case 5775: 
        case 5776: 
        case 5777: 
        case 5778: 
        case 5779: 
        case 5780: 
        case 5781: 
        case 5782: 
        case 5783: 
        case 5784: 
        case 5785: 
        case 5786: 
        case 5787: 
        case 5788: 
        case 5789: 
        case 5790: 
        case 5791: 
        case 5792: 
        case 5793: 
        case 5794: 
        case 5795: 
        case 5796: 
        case 5797: 
        case 5798: 
        case 5799: 
        case 5800: 
        case 5801: 
        case 5802: 
        case 5803: 
        case 5804: 
        case 5805: 
        case 5806: 
        case 5807: 
        case 5808: 
        case 5809: 
        case 5810: 
        case 5811: 
        case 5812: 
        case 5813: 
        case 5814: 
        case 5815: 
        case 5816: 
        case 5817: 
        case 5818: 
        case 5819: 
        case 5820: 
        case 5821: 
        case 5822: 
        case 5823: 
        case 5824: 
        case 5825: 
        case 5826: 
        case 5827: 
        case 5828: 
        case 5829: 
        case 5830: 
        case 5831: 
        case 5832: 
        case 5833: 
        case 5834: 
        case 5835: 
        case 5836: 
        case 5837: 
        case 5838: 
        case 5839: 
        case 5840: 
        case 5841: 
        case 5842: 
        case 5843: 
        case 5844: 
        case 5845: 
        case 5846: 
        case 5847: 
        case 5848: 
        case 5849: 
        case 5850: 
        case 5851: 
        case 5852: 
        case 5853: 
        case 5854: 
        case 5855: 
        case 5856: 
        case 5857: 
        case 5858: 
        case 5859: 
        case 5860: 
        case 5861: 
        case 5862: 
        case 5863: 
        case 5864: 
        case 5865: 
        case 5866: 
        case 5867: 
        case 5868: 
        case 5869: 
        case 5870: 
        case 5871: 
        case 5872: 
        case 5873: 
        case 5874: 
        case 5875: 
        case 5876: 
        case 5877: 
        case 5878: 
        case 5879: 
        case 5880: 
        case 5881: 
        case 5882: 
        case 5883: 
        case 5884: 
        case 5885: 
        case 5886: 
        case 5887: 
        case 5888: 
        case 5889: 
        case 5890: 
        case 5891: 
        case 5892: 
        case 5893: 
        case 5894: 
        case 5895: 
        case 5896: 
        case 5897: 
        case 5898: 
        case 5899: 
        case 5900: 
        case 5901: 
        case 5902: 
        case 5903: 
        case 5904: 
        case 5905: 
        case 5906: 
        case 5907: 
        case 5908: 
        case 5909: 
        case 5910: 
        case 5911: 
        case 5912: 
        case 5913: 
        case 5914: 
        case 5915: 
        case 5916: 
        case 5917: 
        case 5918: 
        case 5919: 
        case 5920: 
        case 5921: 
        case 5922: 
        case 5923: 
        case 5924: 
        case 5925: 
        case 5926: 
        case 5927: 
        case 5928: 
        case 5929: 
        case 5930: 
        case 5931: 
        case 5932: 
        case 5933: 
        case 5934: 
        case 5935: 
        case 5936: 
        case 5937: 
        case 5938: 
        case 5939: 
        case 5940: 
        case 5941: 
        case 5942: 
        case 5943: 
        case 5944: 
        case 5945: 
        case 5946: 
        case 5947: 
        case 5948: 
        case 5949: 
        case 5950: 
        case 5951: 
        case 5952: 
        case 5953: 
        case 5954: 
        case 5955: 
        case 5956: 
        case 5957: 
        case 5958: 
        case 5959: 
        case 5960: 
        case 5961: 
        case 5962: 
        case 5963: 
        case 5964: 
        case 5965: 
        case 5966: 
        case 5967: 
        case 5968: 
        case 5969: 
        case 5970: 
        case 5971: 
        case 5972: 
        case 5973: 
        case 5974: 
        case 5975: 
        case 5976: 
        case 5977: 
        case 5978: 
        case 5979: 
        case 5980: 
        case 5981: 
        case 5982: 
        case 5983: 
        case 5984: 
        case 5985: 
        case 5986: 
        case 5987: 
        case 5988: 
        case 5989: 
        case 5990: 
        case 5991: 
        case 5992: 
        case 5993: 
        case 5994: 
        case 5995: 
        case 5996: 
        case 5997: 
        case 5998: 
        case 5999: 
        case 6000: 
        case 6001: 
        case 6002: 
        case 6003: 
        case 6004: 
        case 6005: 
        case 6006: 
        case 6007: 
        case 6008: 
        case 6009: 
        case 6010: 
        case 6011: 
        case 6012: 
        case 6013: 
        case 6014: 
        case 6015: 
        case 6016: 
        case 6017: 
        case 6018: 
        case 6019: 
        case 6020: 
        case 6021: 
        case 6022: 
        case 6023: 
        case 6024: 
        case 6025: 
        case 6026: 
        case 6027: 
        case 6028: 
        case 6029: 
        case 6030: 
        case 6031: 
        case 6032: 
        case 6033: 
        case 6034: 
        case 6035: 
        case 6036: 
        case 6037: 
        case 6038: 
        case 6039: 
        case 6040: 
        case 6041: 
        case 6042: 
        case 6043: 
        case 6044: 
        case 6045: 
        case 6046: 
        case 6047: 
        case 6048: 
        case 6049: 
        case 6050: 
        case 6051: 
        case 6052: 
        case 6053: 
        case 6054: 
        case 6055: 
        case 6056: 
        case 6057: 
        case 6058: 
        case 6059: 
        case 6060: 
        case 6061: 
        case 6062: 
        case 6063: 
        case 6064: 
        case 6065: 
        case 6066: 
        case 6067: 
        case 6068: 
        case 6069: 
        case 6070: 
        case 6071: 
        case 6072: 
        case 6073: 
        case 6074: 
        case 6075: 
        case 6076: 
        case 6077: 
        case 6078: 
        case 6079: 
        case 6080: 
        case 6081: 
        case 6082: 
        case 6083: 
        case 6084: 
        case 6085: 
        case 6086: 
        case 6087: 
        case 6088: 
        case 6089: 
        case 6090: 
        case 6091: 
        case 6092: 
        case 6093: 
        case 6094: 
        case 6095: 
        case 6096: 
        case 6097: 
        case 6098: 
        case 6099: 
        case 6100: 
        case 6101: 
        case 6102: 
        case 6103: 
        case 6104: 
        case 6105: 
        case 6106: 
        case 6107: 
        case 6108: 
        case 6109: 
        case 6110: 
        case 6111: 
        case 6112: 
        case 6113: 
        case 6114: 
        case 6115: 
        case 6116: 
        case 6117: 
        case 6118: 
        case 6119: 
        case 6120: 
        case 6121: 
        case 6122: 
        case 6123: 
        case 6124: 
        case 6125: 
        case 6126: 
        case 6127: 
        case 6128: 
        case 6129: 
        case 6130: 
        case 6131: 
        case 6132: 
        case 6133: 
        case 6134: 
        case 6135: 
        case 6136: 
        case 6137: 
        case 6138: 
        case 6139: 
        case 6140: 
        case 6141: 
        case 6142: 
        case 6143: 
        case 6144: 
        case 6145: 
        case 6146: 
        case 6147: 
        case 6148: 
        case 6149: 
        case 6150: 
        case 6151: 
        case 6152: 
        case 6153: 
        case 6154: 
        case 6155: 
        case 6156: 
        case 6157: 
        case 6158: 
        case 6159: 
        case 6160: 
        case 6161: 
        case 6162: 
        case 6163: 
        case 6164: 
        case 6165: 
        case 6166: 
        case 6167: 
        case 6168: 
        case 6169: 
        case 6170: 
        case 6171: 
        case 6172: 
        case 6173: 
        case 6174: 
        case 6175: 
        case 6176: 
        case 6177: 
        case 6178: 
        case 6179: 
        case 6180: 
        case 6181: 
        case 6182: 
        case 6183: 
        case 6184: 
        case 6185: 
        case 6186: 
        case 6187: 
        case 6188: 
        case 6189: 
        case 6190: 
        case 6191: 
        case 6192: 
        case 6193: 
        case 6194: 
        case 6195: 
        case 6196: 
        case 6197: 
        case 6198: 
        case 6199: 
        case 6200: 
        case 6201: 
        case 6202: 
        case 6203: 
        case 6204: 
        case 6205: 
        case 6206: 
        case 6207: 
        case 6208: 
        case 6209: 
        case 6210: 
        case 6211: 
        case 6212: 
        case 6213: 
        case 6214: 
        case 6215: 
        case 6216: 
        case 6217: 
        case 6218: 
        case 6219: 
        case 6220: 
        case 6221: 
        case 6222: 
        case 6223: 
        case 6224: 
        case 6225: 
        case 6226: 
        case 6227: 
        case 6228: 
        case 6229: 
        case 6230: 
        case 6231: 
        case 6232: 
        case 6233: 
        case 6234: 
        case 6235: 
        case 6236: 
        case 6237: 
        case 6238: 
        case 6239: 
        case 6240: 
        case 6241: 
        case 6242: 
        case 6243: 
        case 6244: 
        case 6245: 
        case 6246: 
        case 6247: 
        case 6248: 
        case 6249: 
        case 6250: 
        case 6251: 
        case 6252: 
        case 6253: 
        case 6254: 
        case 6255: 
        case 6256: 
        case 6257: 
        case 6258: 
        case 6259: 
        case 6260: 
        case 6261: 
        case 6262: 
        case 6263: 
        case 6264: 
        case 6265: 
        case 6266: 
        case 6267: 
        case 6268: 
        case 6269: 
        case 6270: 
        case 6271: 
            watch_read<struct task_struct, FIELD_latency_record>::on(entry_, struct_addr_);
            break;
        case 6272: 
        case 6273: 
        case 6274: 
        case 6275: 
        case 6276: 
        case 6277: 
        case 6278: 
        case 6279: 
            watch_read<struct task_struct, FIELD_timer_slack_ns>::on(entry_, struct_addr_);
            break;
        case 6280: 
        case 6281: 
        case 6282: 
        case 6283: 
        case 6284: 
        case 6285: 
        case 6286: 
        case 6287: 
            watch_read<struct task_struct, FIELD_default_timer_slack_ns>::on(entry_, struct_addr_);
            break;
        case 6288: 
        case 6289: 
        case 6290: 
        case 6291: 
        case 6292: 
        case 6293: 
        case 6294: 
        case 6295: 
            watch_read<struct task_struct, FIELD_scm_work_list>::on(entry_, struct_addr_);
            break;
        case 6296: 
        case 6297: 
        case 6298: 
        case 6299: 
            watch_read<struct task_struct, FIELD_curr_ret_stack>::on(entry_, struct_addr_);
            break;
        case 6304: 
        case 6305: 
        case 6306: 
        case 6307: 
        case 6308: 
        case 6309: 
        case 6310: 
        case 6311: 
            watch_read<struct task_struct, FIELD_ret_stack>::on(entry_, struct_addr_);
            break;
        case 6312: 
        case 6313: 
        case 6314: 
        case 6315: 
        case 6316: 
        case 6317: 
        case 6318: 
        case 6319: 
            watch_read<struct task_struct, FIELD_ftrace_timestamp>::on(entry_, struct_addr_);
            break;
        case 6320: 
        case 6321: 
        case 6322: 
        case 6323: 
            watch_read<struct task_struct, FIELD_trace_overrun>::on(entry_, struct_addr_);
            break;
        case 6324: 
        case 6325: 
        case 6326: 
        case 6327: 
            watch_read<struct task_struct, FIELD_tracing_graph_pause>::on(entry_, struct_addr_);
            break;
        case 6328: 
        case 6329: 
        case 6330: 
        case 6331: 
        case 6332: 
        case 6333: 
        case 6334: 
        case 6335: 
            watch_read<struct task_struct, FIELD_trace>::on(entry_, struct_addr_);
            break;
        case 6336: 
        case 6337: 
        case 6338: 
        case 6339: 
        case 6340: 
        case 6341: 
        case 6342: 
        case 6343: 
            watch_read<struct task_struct, FIELD_trace_recursion>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct task_struct *struct_addr_(((struct task_struct *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct task_struct, FIELD_state>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct task_struct, FIELD_stack>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
            watch_write<struct task_struct, FIELD_usage>::on(entry_, struct_addr_, val_);
            break;
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct task_struct, FIELD_flags>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
            watch_write<struct task_struct, FIELD_ptrace>::on(entry_, struct_addr_, val_);
            break;
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct task_struct, FIELD_lock_depth>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
            watch_write<struct task_struct, FIELD_prio>::on(entry_, struct_addr_, val_);
            break;
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct task_struct, FIELD_static_prio>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
            watch_write<struct task_struct, FIELD_normal_prio>::on(entry_, struct_addr_, val_);
            break;
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct task_struct, FIELD_rt_priority>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct task_struct, FIELD_sched_class>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
            watch_write<struct task_struct, FIELD_se>::on(entry_, struct_addr_, val_);
            break;
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
            watch_write<struct task_struct, FIELD_rt>::on(entry_, struct_addr_, val_);
            break;
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
            watch_write<struct task_struct, FIELD_preempt_notifiers>::on(entry_, struct_addr_, val_);
            break;
        case 520: 
            watch_write<struct task_struct, FIELD_fpu_counter>::on(entry_, struct_addr_, val_);
            break;
        case 524: 
        case 525: 
        case 526: 
        case 527: 
            watch_write<struct task_struct, FIELD_btrace_seq>::on(entry_, struct_addr_, val_);
            break;
        case 528: 
        case 529: 
        case 530: 
        case 531: 
            watch_write<struct task_struct, FIELD_policy>::on(entry_, struct_addr_, val_);
            break;
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
            watch_write<struct task_struct, FIELD_cpus_allowed>::on(entry_, struct_addr_, val_);
            break;
        case 544: 
        case 545: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
        case 552: 
        case 553: 
        case 554: 
        case 555: 
        case 556: 
        case 557: 
        case 558: 
        case 559: 
        case 560: 
        case 561: 
        case 562: 
        case 563: 
        case 564: 
        case 565: 
        case 566: 
        case 567: 
        case 568: 
        case 569: 
        case 570: 
        case 571: 
        case 572: 
        case 573: 
        case 574: 
        case 575: 
        case 576: 
        case 577: 
        case 578: 
        case 579: 
        case 580: 
        case 581: 
        case 582: 
        case 583: 
            watch_write<struct task_struct, FIELD_sched_info>::on(entry_, struct_addr_, val_);
            break;
        case 584: 
        case 585: 
        case 586: 
        case 587: 
        case 588: 
        case 589: 
        case 590: 
        case 591: 
        case 592: 
        case 593: 
        case 594: 
        case 595: 
        case 596: 
        case 597: 
        case 598: 
        case 599: 
            watch_write<struct task_struct, FIELD_tasks>::on(entry_, struct_addr_, val_);
            break;
        case 600: 
        case 601: 
        case 602: 
        case 603: 
        case 604: 
        case 605: 
        case 606: 
        case 607: 
        case 608: 
        case 609: 
        case 610: 
        case 611: 
        case 612: 
        case 613: 
        case 614: 
        case 615: 
        case 616: 
        case 617: 
        case 618: 
        case 619: 
        case 620: 
        case 621: 
        case 622: 
        case 623: 
        case 624: 
        case 625: 
        case 626: 
        case 627: 
        case 628: 
        case 629: 
        case 630: 
        case 631: 
        case 632: 
        case 633: 
        case 634: 
        case 635: 
        case 636: 
        case 637: 
        case 638: 
        case 639: 
            watch_write<struct task_struct, FIELD_pushable_tasks>::on(entry_, struct_addr_, val_);
            break;
        case 640: 
        case 641: 
        case 642: 
        case 643: 
        case 644: 
        case 645: 
        case 646: 
        case 647: 
            watch_write<struct task_struct, FIELD_mm>::on(entry_, struct_addr_, val_);
            break;
        case 648: 
        case 649: 
        case 650: 
        case 651: 
        case 652: 
        case 653: 
        case 654: 
        case 655: 
            watch_write<struct task_struct, FIELD_active_mm>::on(entry_, struct_addr_, val_);
            break;
        case 656: 
        case 657: 
        case 658: 
        case 659: 
            watch_write<struct task_struct, FIELD_exit_state>::on(entry_, struct_addr_, val_);
            break;
        case 660: 
        case 661: 
        case 662: 
        case 663: 
            watch_write<struct task_struct, FIELD_exit_code>::on(entry_, struct_addr_, val_);
            break;
        case 664: 
        case 665: 
        case 666: 
        case 667: 
            watch_write<struct task_struct, FIELD_exit_signal>::on(entry_, struct_addr_, val_);
            break;
        case 668: 
        case 669: 
        case 670: 
        case 671: 
            watch_write<struct task_struct, FIELD_pdeath_signal>::on(entry_, struct_addr_, val_);
            break;
        case 672: 
        case 673: 
        case 674: 
        case 675: 
            watch_write<struct task_struct, FIELD_personality>::on(entry_, struct_addr_, val_);
            break;
        case 676: 
            watch_write<struct task_struct, FIELD_did_exec>::on(entry_, struct_addr_, val_);
            watch_write<struct task_struct, FIELD_in_execve>::on(entry_, struct_addr_, val_);
            watch_write<struct task_struct, FIELD_in_iowait>::on(entry_, struct_addr_, val_);
            watch_write<struct task_struct, FIELD_sched_reset_on_fork>::on(entry_, struct_addr_, val_);
            break;
        case 680: 
        case 681: 
        case 682: 
        case 683: 
            watch_write<struct task_struct, FIELD_pid>::on(entry_, struct_addr_, val_);
            break;
        case 684: 
        case 685: 
        case 686: 
        case 687: 
            watch_write<struct task_struct, FIELD_tgid>::on(entry_, struct_addr_, val_);
            break;
        case 688: 
        case 689: 
        case 690: 
        case 691: 
        case 692: 
        case 693: 
        case 694: 
        case 695: 
            watch_write<struct task_struct, FIELD_stack_canary>::on(entry_, struct_addr_, val_);
            break;
        case 696: 
        case 697: 
        case 698: 
        case 699: 
        case 700: 
        case 701: 
        case 702: 
        case 703: 
            watch_write<struct task_struct, FIELD_real_parent>::on(entry_, struct_addr_, val_);
            break;
        case 704: 
        case 705: 
        case 706: 
        case 707: 
        case 708: 
        case 709: 
        case 710: 
        case 711: 
            watch_write<struct task_struct, FIELD_parent>::on(entry_, struct_addr_, val_);
            break;
        case 712: 
        case 713: 
        case 714: 
        case 715: 
        case 716: 
        case 717: 
        case 718: 
        case 719: 
        case 720: 
        case 721: 
        case 722: 
        case 723: 
        case 724: 
        case 725: 
        case 726: 
        case 727: 
            watch_write<struct task_struct, FIELD_children>::on(entry_, struct_addr_, val_);
            break;
        case 728: 
        case 729: 
        case 730: 
        case 731: 
        case 732: 
        case 733: 
        case 734: 
        case 735: 
        case 736: 
        case 737: 
        case 738: 
        case 739: 
        case 740: 
        case 741: 
        case 742: 
        case 743: 
            watch_write<struct task_struct, FIELD_sibling>::on(entry_, struct_addr_, val_);
            break;
        case 744: 
        case 745: 
        case 746: 
        case 747: 
        case 748: 
        case 749: 
        case 750: 
        case 751: 
            watch_write<struct task_struct, FIELD_group_leader>::on(entry_, struct_addr_, val_);
            break;
        case 752: 
        case 753: 
        case 754: 
        case 755: 
        case 756: 
        case 757: 
        case 758: 
        case 759: 
        case 760: 
        case 761: 
        case 762: 
        case 763: 
        case 764: 
        case 765: 
        case 766: 
        case 767: 
            watch_write<struct task_struct, FIELD_ptraced>::on(entry_, struct_addr_, val_);
            break;
        case 768: 
        case 769: 
        case 770: 
        case 771: 
        case 772: 
        case 773: 
        case 774: 
        case 775: 
        case 776: 
        case 777: 
        case 778: 
        case 779: 
        case 780: 
        case 781: 
        case 782: 
        case 783: 
            watch_write<struct task_struct, FIELD_ptrace_entry>::on(entry_, struct_addr_, val_);
            break;
        case 784: 
        case 785: 
        case 786: 
        case 787: 
        case 788: 
        case 789: 
        case 790: 
        case 791: 
            watch_write<struct task_struct, FIELD_bts>::on(entry_, struct_addr_, val_);
            break;
        case 792: 
        case 793: 
        case 794: 
        case 795: 
        case 796: 
        case 797: 
        case 798: 
        case 799: 
        case 800: 
        case 801: 
        case 802: 
        case 803: 
        case 804: 
        case 805: 
        case 806: 
        case 807: 
        case 808: 
        case 809: 
        case 810: 
        case 811: 
        case 812: 
        case 813: 
        case 814: 
        case 815: 
        case 816: 
        case 817: 
        case 818: 
        case 819: 
        case 820: 
        case 821: 
        case 822: 
        case 823: 
        case 824: 
        case 825: 
        case 826: 
        case 827: 
        case 828: 
        case 829: 
        case 830: 
        case 831: 
        case 832: 
        case 833: 
        case 834: 
        case 835: 
        case 836: 
        case 837: 
        case 838: 
        case 839: 
        case 840: 
        case 841: 
        case 842: 
        case 843: 
        case 844: 
        case 845: 
        case 846: 
        case 847: 
        case 848: 
        case 849: 
        case 850: 
        case 851: 
        case 852: 
        case 853: 
        case 854: 
        case 855: 
        case 856: 
        case 857: 
        case 858: 
        case 859: 
        case 860: 
        case 861: 
        case 862: 
        case 863: 
            watch_write<struct task_struct, FIELD_pids>::on(entry_, struct_addr_, val_);
            break;
        case 864: 
        case 865: 
        case 866: 
        case 867: 
        case 868: 
        case 869: 
        case 870: 
        case 871: 
        case 872: 
        case 873: 
        case 874: 
        case 875: 
        case 876: 
        case 877: 
        case 878: 
        case 879: 
            watch_write<struct task_struct, FIELD_thread_group>::on(entry_, struct_addr_, val_);
            break;
        case 880: 
        case 881: 
        case 882: 
        case 883: 
        case 884: 
        case 885: 
        case 886: 
        case 887: 
            watch_write<struct task_struct, FIELD_vfork_done>::on(entry_, struct_addr_, val_);
            break;
        case 888: 
        case 889: 
        case 890: 
        case 891: 
        case 892: 
        case 893: 
        case 894: 
        case 895: 
            watch_write<struct task_struct, FIELD_set_child_tid>::on(entry_, struct_addr_, val_);
            break;
        case 896: 
        case 897: 
        case 898: 
        case 899: 
        case 900: 
        case 901: 
        case 902: 
        case 903: 
            watch_write<struct task_struct, FIELD_clear_child_tid>::on(entry_, struct_addr_, val_);
            break;
        case 904: 
        case 905: 
        case 906: 
        case 907: 
        case 908: 
        case 909: 
        case 910: 
        case 911: 
            watch_write<struct task_struct, FIELD_utime>::on(entry_, struct_addr_, val_);
            break;
        case 912: 
        case 913: 
        case 914: 
        case 915: 
        case 916: 
        case 917: 
        case 918: 
        case 919: 
            watch_write<struct task_struct, FIELD_stime>::on(entry_, struct_addr_, val_);
            break;
        case 920: 
        case 921: 
        case 922: 
        case 923: 
        case 924: 
        case 925: 
        case 926: 
        case 927: 
            watch_write<struct task_struct, FIELD_utimescaled>::on(entry_, struct_addr_, val_);
            break;
        case 928: 
        case 929: 
        case 930: 
        case 931: 
        case 932: 
        case 933: 
        case 934: 
        case 935: 
            watch_write<struct task_struct, FIELD_stimescaled>::on(entry_, struct_addr_, val_);
            break;
        case 936: 
        case 937: 
        case 938: 
        case 939: 
        case 940: 
        case 941: 
        case 942: 
        case 943: 
            watch_write<struct task_struct, FIELD_gtime>::on(entry_, struct_addr_, val_);
            break;
        case 944: 
        case 945: 
        case 946: 
        case 947: 
        case 948: 
        case 949: 
        case 950: 
        case 951: 
            watch_write<struct task_struct, FIELD_prev_utime>::on(entry_, struct_addr_, val_);
            break;
        case 952: 
        case 953: 
        case 954: 
        case 955: 
        case 956: 
        case 957: 
        case 958: 
        case 959: 
            watch_write<struct task_struct, FIELD_prev_stime>::on(entry_, struct_addr_, val_);
            break;
        case 960: 
        case 961: 
        case 962: 
        case 963: 
        case 964: 
        case 965: 
        case 966: 
        case 967: 
            watch_write<struct task_struct, FIELD_nvcsw>::on(entry_, struct_addr_, val_);
            break;
        case 968: 
        case 969: 
        case 970: 
        case 971: 
        case 972: 
        case 973: 
        case 974: 
        case 975: 
            watch_write<struct task_struct, FIELD_nivcsw>::on(entry_, struct_addr_, val_);
            break;
        case 976: 
        case 977: 
        case 978: 
        case 979: 
        case 980: 
        case 981: 
        case 982: 
        case 983: 
        case 984: 
        case 985: 
        case 986: 
        case 987: 
        case 988: 
        case 989: 
        case 990: 
        case 991: 
            watch_write<struct task_struct, FIELD_start_time>::on(entry_, struct_addr_, val_);
            break;
        case 992: 
        case 993: 
        case 994: 
        case 995: 
        case 996: 
        case 997: 
        case 998: 
        case 999: 
        case 1000: 
        case 1001: 
        case 1002: 
        case 1003: 
        case 1004: 
        case 1005: 
        case 1006: 
        case 1007: 
            watch_write<struct task_struct, FIELD_real_start_time>::on(entry_, struct_addr_, val_);
            break;
        case 1008: 
        case 1009: 
        case 1010: 
        case 1011: 
        case 1012: 
        case 1013: 
        case 1014: 
        case 1015: 
            watch_write<struct task_struct, FIELD_min_flt>::on(entry_, struct_addr_, val_);
            break;
        case 1016: 
        case 1017: 
        case 1018: 
        case 1019: 
        case 1020: 
        case 1021: 
        case 1022: 
        case 1023: 
            watch_write<struct task_struct, FIELD_maj_flt>::on(entry_, struct_addr_, val_);
            break;
        case 1024: 
        case 1025: 
        case 1026: 
        case 1027: 
        case 1028: 
        case 1029: 
        case 1030: 
        case 1031: 
        case 1032: 
        case 1033: 
        case 1034: 
        case 1035: 
        case 1036: 
        case 1037: 
        case 1038: 
        case 1039: 
        case 1040: 
        case 1041: 
        case 1042: 
        case 1043: 
        case 1044: 
        case 1045: 
        case 1046: 
        case 1047: 
            watch_write<struct task_struct, FIELD_cputime_expires>::on(entry_, struct_addr_, val_);
            break;
        case 1048: 
        case 1049: 
        case 1050: 
        case 1051: 
        case 1052: 
        case 1053: 
        case 1054: 
        case 1055: 
        case 1056: 
        case 1057: 
        case 1058: 
        case 1059: 
        case 1060: 
        case 1061: 
        case 1062: 
        case 1063: 
        case 1064: 
        case 1065: 
        case 1066: 
        case 1067: 
        case 1068: 
        case 1069: 
        case 1070: 
        case 1071: 
        case 1072: 
        case 1073: 
        case 1074: 
        case 1075: 
        case 1076: 
        case 1077: 
        case 1078: 
        case 1079: 
        case 1080: 
        case 1081: 
        case 1082: 
        case 1083: 
        case 1084: 
        case 1085: 
        case 1086: 
        case 1087: 
        case 1088: 
        case 1089: 
        case 1090: 
        case 1091: 
        case 1092: 
        case 1093: 
        case 1094: 
        case 1095: 
            watch_write<struct task_struct, FIELD_cpu_timers>::on(entry_, struct_addr_, val_);
            break;
        case 1096: 
        case 1097: 
        case 1098: 
        case 1099: 
        case 1100: 
        case 1101: 
        case 1102: 
        case 1103: 
            watch_write<struct task_struct, FIELD_real_cred>::on(entry_, struct_addr_, val_);
            break;
        case 1104: 
        case 1105: 
        case 1106: 
        case 1107: 
        case 1108: 
        case 1109: 
        case 1110: 
        case 1111: 
            watch_write<struct task_struct, FIELD_cred>::on(entry_, struct_addr_, val_);
            break;
        case 1112: 
        case 1113: 
        case 1114: 
        case 1115: 
        case 1116: 
        case 1117: 
        case 1118: 
        case 1119: 
        case 1120: 
        case 1121: 
        case 1122: 
        case 1123: 
        case 1124: 
        case 1125: 
        case 1126: 
        case 1127: 
        case 1128: 
        case 1129: 
        case 1130: 
        case 1131: 
        case 1132: 
        case 1133: 
        case 1134: 
        case 1135: 
        case 1136: 
        case 1137: 
        case 1138: 
        case 1139: 
        case 1140: 
        case 1141: 
        case 1142: 
        case 1143: 
            watch_write<struct task_struct, FIELD_cred_guard_mutex>::on(entry_, struct_addr_, val_);
            break;
        case 1144: 
        case 1145: 
        case 1146: 
        case 1147: 
        case 1148: 
        case 1149: 
        case 1150: 
        case 1151: 
            watch_write<struct task_struct, FIELD_replacement_session_keyring>::on(entry_, struct_addr_, val_);
            break;
        case 1152: 
        case 1153: 
        case 1154: 
        case 1155: 
        case 1156: 
        case 1157: 
        case 1158: 
        case 1159: 
        case 1160: 
        case 1161: 
        case 1162: 
        case 1163: 
        case 1164: 
        case 1165: 
        case 1166: 
        case 1167: 
            watch_write<struct task_struct, FIELD_comm>::on(entry_, struct_addr_, val_);
            break;
        case 1168: 
        case 1169: 
        case 1170: 
        case 1171: 
            watch_write<struct task_struct, FIELD_link_count>::on(entry_, struct_addr_, val_);
            break;
        case 1172: 
        case 1173: 
        case 1174: 
        case 1175: 
            watch_write<struct task_struct, FIELD_total_link_count>::on(entry_, struct_addr_, val_);
            break;
        case 1176: 
        case 1177: 
        case 1178: 
        case 1179: 
        case 1180: 
        case 1181: 
        case 1182: 
        case 1183: 
            watch_write<struct task_struct, FIELD_sysvsem>::on(entry_, struct_addr_, val_);
            break;
        case 1184: 
        case 1185: 
        case 1186: 
        case 1187: 
        case 1188: 
        case 1189: 
        case 1190: 
        case 1191: 
            watch_write<struct task_struct, FIELD_last_switch_count>::on(entry_, struct_addr_, val_);
            break;
        case 1192: 
        case 1193: 
        case 1194: 
        case 1195: 
        case 1196: 
        case 1197: 
        case 1198: 
        case 1199: 
        case 1200: 
        case 1201: 
        case 1202: 
        case 1203: 
        case 1204: 
        case 1205: 
        case 1206: 
        case 1207: 
        case 1208: 
        case 1209: 
        case 1210: 
        case 1211: 
        case 1212: 
        case 1213: 
        case 1214: 
        case 1215: 
        case 1216: 
        case 1217: 
        case 1218: 
        case 1219: 
        case 1220: 
        case 1221: 
        case 1222: 
        case 1223: 
        case 1224: 
        case 1225: 
        case 1226: 
        case 1227: 
        case 1228: 
        case 1229: 
        case 1230: 
        case 1231: 
        case 1232: 
        case 1233: 
        case 1234: 
        case 1235: 
        case 1236: 
        case 1237: 
        case 1238: 
        case 1239: 
        case 1240: 
        case 1241: 
        case 1242: 
        case 1243: 
        case 1244: 
        case 1245: 
        case 1246: 
        case 1247: 
        case 1248: 
        case 1249: 
        case 1250: 
        case 1251: 
        case 1252: 
        case 1253: 
        case 1254: 
        case 1255: 
        case 1256: 
        case 1257: 
        case 1258: 
        case 1259: 
        case 1260: 
        case 1261: 
        case 1262: 
        case 1263: 
        case 1264: 
        case 1265: 
        case 1266: 
        case 1267: 
        case 1268: 
        case 1269: 
        case 1270: 
        case 1271: 
        case 1272: 
        case 1273: 
        case 1274: 
        case 1275: 
        case 1276: 
        case 1277: 
        case 1278: 
        case 1279: 
        case 1280: 
        case 1281: 
        case 1282: 
        case 1283: 
        case 1284: 
        case 1285: 
        case 1286: 
        case 1287: 
        case 1288: 
        case 1289: 
        case 1290: 
        case 1291: 
        case 1292: 
        case 1293: 
        case 1294: 
        case 1295: 
        case 1296: 
        case 1297: 
        case 1298: 
        case 1299: 
        case 1300: 
        case 1301: 
        case 1302: 
        case 1303: 
        case 1304: 
        case 1305: 
        case 1306: 
        case 1307: 
        case 1308: 
        case 1309: 
        case 1310: 
        case 1311: 
        case 1312: 
        case 1313: 
        case 1314: 
        case 1315: 
        case 1316: 
        case 1317: 
        case 1318: 
        case 1319: 
        case 1320: 
        case 1321: 
        case 1322: 
        case 1323: 
        case 1324: 
        case 1325: 
        case 1326: 
        case 1327: 
        case 1328: 
        case 1329: 
        case 1330: 
        case 1331: 
        case 1332: 
        case 1333: 
        case 1334: 
        case 1335: 
        case 1336: 
        case 1337: 
        case 1338: 
        case 1339: 
        case 1340: 
        case 1341: 
        case 1342: 
        case 1343: 
        case 1344: 
        case 1345: 
        case 1346: 
        case 1347: 
        case 1348: 
        case 1349: 
        case 1350: 
        case 1351: 
        case 1352: 
        case 1353: 
        case 1354: 
        case 1355: 
        case 1356: 
        case 1357: 
        case 1358: 
        case 1359: 
        case 1360: 
        case 1361: 
        case 1362: 
        case 1363: 
        case 1364: 
        case 1365: 
        case 1366: 
        case 1367: 
        case 1368: 
        case 1369: 
        case 1370: 
        case 1371: 
        case 1372: 
        case 1373: 
        case 1374: 
        case 1375: 
        case 1376: 
        case 1377: 
        case 1378: 
        case 1379: 
        case 1380: 
        case 1381: 
        case 1382: 
        case 1383: 
            watch_write<struct task_struct, FIELD_thread>::on(entry_, struct_addr_, val_);
            break;
        case 1384: 
        case 1385: 
        case 1386: 
        case 1387: 
        case 1388: 
        case 1389: 
        case 1390: 
        case 1391: 
            watch_write<struct task_struct, FIELD_fs>::on(entry_, struct_addr_, val_);
            break;
        case 1392: 
        case 1393: 
        case 1394: 
        case 1395: 
        case 1396: 
        case 1397: 
        case 1398: 
        case 1399: 
            watch_write<struct task_struct, FIELD_files>::on(entry_, struct_addr_, val_);
            break;
        case 1400: 
        case 1401: 
        case 1402: 
        case 1403: 
        case 1404: 
        case 1405: 
        case 1406: 
        case 1407: 
            watch_write<struct task_struct, FIELD_nsproxy>::on(entry_, struct_addr_, val_);
            break;
        case 1408: 
        case 1409: 
        case 1410: 
        case 1411: 
        case 1412: 
        case 1413: 
        case 1414: 
        case 1415: 
            watch_write<struct task_struct, FIELD_signal>::on(entry_, struct_addr_, val_);
            break;
        case 1416: 
        case 1417: 
        case 1418: 
        case 1419: 
        case 1420: 
        case 1421: 
        case 1422: 
        case 1423: 
            watch_write<struct task_struct, FIELD_sighand>::on(entry_, struct_addr_, val_);
            break;
        case 1424: 
        case 1425: 
        case 1426: 
        case 1427: 
        case 1428: 
        case 1429: 
        case 1430: 
        case 1431: 
        case 1432: 
        case 1433: 
        case 1434: 
        case 1435: 
        case 1436: 
        case 1437: 
        case 1438: 
        case 1439: 
        case 1440: 
        case 1441: 
        case 1442: 
        case 1443: 
        case 1444: 
        case 1445: 
        case 1446: 
        case 1447: 
        case 1448: 
        case 1449: 
        case 1450: 
        case 1451: 
        case 1452: 
        case 1453: 
        case 1454: 
        case 1455: 
        case 1456: 
        case 1457: 
        case 1458: 
        case 1459: 
        case 1460: 
        case 1461: 
        case 1462: 
        case 1463: 
        case 1464: 
        case 1465: 
        case 1466: 
        case 1467: 
        case 1468: 
        case 1469: 
        case 1470: 
        case 1471: 
        case 1472: 
        case 1473: 
        case 1474: 
        case 1475: 
        case 1476: 
        case 1477: 
        case 1478: 
        case 1479: 
        case 1480: 
        case 1481: 
        case 1482: 
        case 1483: 
        case 1484: 
        case 1485: 
        case 1486: 
        case 1487: 
        case 1488: 
        case 1489: 
        case 1490: 
        case 1491: 
        case 1492: 
        case 1493: 
        case 1494: 
        case 1495: 
        case 1496: 
        case 1497: 
        case 1498: 
        case 1499: 
        case 1500: 
        case 1501: 
        case 1502: 
        case 1503: 
        case 1504: 
        case 1505: 
        case 1506: 
        case 1507: 
        case 1508: 
        case 1509: 
        case 1510: 
        case 1511: 
        case 1512: 
        case 1513: 
        case 1514: 
        case 1515: 
        case 1516: 
        case 1517: 
        case 1518: 
        case 1519: 
        case 1520: 
        case 1521: 
        case 1522: 
        case 1523: 
        case 1524: 
        case 1525: 
        case 1526: 
        case 1527: 
        case 1528: 
        case 1529: 
        case 1530: 
        case 1531: 
        case 1532: 
        case 1533: 
        case 1534: 
        case 1535: 
        case 1536: 
        case 1537: 
        case 1538: 
        case 1539: 
        case 1540: 
        case 1541: 
        case 1542: 
        case 1543: 
        case 1544: 
        case 1545: 
        case 1546: 
        case 1547: 
        case 1548: 
        case 1549: 
        case 1550: 
        case 1551: 
            watch_write<struct task_struct, FIELD_blocked>::on(entry_, struct_addr_, val_);
            break;
        case 1552: 
        case 1553: 
        case 1554: 
        case 1555: 
        case 1556: 
        case 1557: 
        case 1558: 
        case 1559: 
        case 1560: 
        case 1561: 
        case 1562: 
        case 1563: 
        case 1564: 
        case 1565: 
        case 1566: 
        case 1567: 
        case 1568: 
        case 1569: 
        case 1570: 
        case 1571: 
        case 1572: 
        case 1573: 
        case 1574: 
        case 1575: 
        case 1576: 
        case 1577: 
        case 1578: 
        case 1579: 
        case 1580: 
        case 1581: 
        case 1582: 
        case 1583: 
        case 1584: 
        case 1585: 
        case 1586: 
        case 1587: 
        case 1588: 
        case 1589: 
        case 1590: 
        case 1591: 
        case 1592: 
        case 1593: 
        case 1594: 
        case 1595: 
        case 1596: 
        case 1597: 
        case 1598: 
        case 1599: 
        case 1600: 
        case 1601: 
        case 1602: 
        case 1603: 
        case 1604: 
        case 1605: 
        case 1606: 
        case 1607: 
        case 1608: 
        case 1609: 
        case 1610: 
        case 1611: 
        case 1612: 
        case 1613: 
        case 1614: 
        case 1615: 
        case 1616: 
        case 1617: 
        case 1618: 
        case 1619: 
        case 1620: 
        case 1621: 
        case 1622: 
        case 1623: 
        case 1624: 
        case 1625: 
        case 1626: 
        case 1627: 
        case 1628: 
        case 1629: 
        case 1630: 
        case 1631: 
        case 1632: 
        case 1633: 
        case 1634: 
        case 1635: 
        case 1636: 
        case 1637: 
        case 1638: 
        case 1639: 
        case 1640: 
        case 1641: 
        case 1642: 
        case 1643: 
        case 1644: 
        case 1645: 
        case 1646: 
        case 1647: 
        case 1648: 
        case 1649: 
        case 1650: 
        case 1651: 
        case 1652: 
        case 1653: 
        case 1654: 
        case 1655: 
        case 1656: 
        case 1657: 
        case 1658: 
        case 1659: 
        case 1660: 
        case 1661: 
        case 1662: 
        case 1663: 
        case 1664: 
        case 1665: 
        case 1666: 
        case 1667: 
        case 1668: 
        case 1669: 
        case 1670: 
        case 1671: 
        case 1672: 
        case 1673: 
        case 1674: 
        case 1675: 
        case 1676: 
        case 1677: 
        case 1678: 
        case 1679: 
            watch_write<struct task_struct, FIELD_real_blocked>::on(entry_, struct_addr_, val_);
            break;
        case 1680: 
        case 1681: 
        case 1682: 
        case 1683: 
        case 1684: 
        case 1685: 
        case 1686: 
        case 1687: 
        case 1688: 
        case 1689: 
        case 1690: 
        case 1691: 
        case 1692: 
        case 1693: 
        case 1694: 
        case 1695: 
        case 1696: 
        case 1697: 
        case 1698: 
        case 1699: 
        case 1700: 
        case 1701: 
        case 1702: 
        case 1703: 
        case 1704: 
        case 1705: 
        case 1706: 
        case 1707: 
        case 1708: 
        case 1709: 
        case 1710: 
        case 1711: 
        case 1712: 
        case 1713: 
        case 1714: 
        case 1715: 
        case 1716: 
        case 1717: 
        case 1718: 
        case 1719: 
        case 1720: 
        case 1721: 
        case 1722: 
        case 1723: 
        case 1724: 
        case 1725: 
        case 1726: 
        case 1727: 
        case 1728: 
        case 1729: 
        case 1730: 
        case 1731: 
        case 1732: 
        case 1733: 
        case 1734: 
        case 1735: 
        case 1736: 
        case 1737: 
        case 1738: 
        case 1739: 
        case 1740: 
        case 1741: 
        case 1742: 
        case 1743: 
        case 1744: 
        case 1745: 
        case 1746: 
        case 1747: 
        case 1748: 
        case 1749: 
        case 1750: 
        case 1751: 
        case 1752: 
        case 1753: 
        case 1754: 
        case 1755: 
        case 1756: 
        case 1757: 
        case 1758: 
        case 1759: 
        case 1760: 
        case 1761: 
        case 1762: 
        case 1763: 
        case 1764: 
        case 1765: 
        case 1766: 
        case 1767: 
        case 1768: 
        case 1769: 
        case 1770: 
        case 1771: 
        case 1772: 
        case 1773: 
        case 1774: 
        case 1775: 
        case 1776: 
        case 1777: 
        case 1778: 
        case 1779: 
        case 1780: 
        case 1781: 
        case 1782: 
        case 1783: 
        case 1784: 
        case 1785: 
        case 1786: 
        case 1787: 
        case 1788: 
        case 1789: 
        case 1790: 
        case 1791: 
        case 1792: 
        case 1793: 
        case 1794: 
        case 1795: 
        case 1796: 
        case 1797: 
        case 1798: 
        case 1799: 
        case 1800: 
        case 1801: 
        case 1802: 
        case 1803: 
        case 1804: 
        case 1805: 
        case 1806: 
        case 1807: 
            watch_write<struct task_struct, FIELD_saved_sigmask>::on(entry_, struct_addr_, val_);
            break;
        case 1808: 
        case 1809: 
        case 1810: 
        case 1811: 
        case 1812: 
        case 1813: 
        case 1814: 
        case 1815: 
        case 1816: 
        case 1817: 
        case 1818: 
        case 1819: 
        case 1820: 
        case 1821: 
        case 1822: 
        case 1823: 
        case 1824: 
        case 1825: 
        case 1826: 
        case 1827: 
        case 1828: 
        case 1829: 
        case 1830: 
        case 1831: 
        case 1832: 
        case 1833: 
        case 1834: 
        case 1835: 
        case 1836: 
        case 1837: 
        case 1838: 
        case 1839: 
        case 1840: 
        case 1841: 
        case 1842: 
        case 1843: 
        case 1844: 
        case 1845: 
        case 1846: 
        case 1847: 
        case 1848: 
        case 1849: 
        case 1850: 
        case 1851: 
        case 1852: 
        case 1853: 
        case 1854: 
        case 1855: 
        case 1856: 
        case 1857: 
        case 1858: 
        case 1859: 
        case 1860: 
        case 1861: 
        case 1862: 
        case 1863: 
        case 1864: 
        case 1865: 
        case 1866: 
        case 1867: 
        case 1868: 
        case 1869: 
        case 1870: 
        case 1871: 
        case 1872: 
        case 1873: 
        case 1874: 
        case 1875: 
        case 1876: 
        case 1877: 
        case 1878: 
        case 1879: 
        case 1880: 
        case 1881: 
        case 1882: 
        case 1883: 
        case 1884: 
        case 1885: 
        case 1886: 
        case 1887: 
        case 1888: 
        case 1889: 
        case 1890: 
        case 1891: 
        case 1892: 
        case 1893: 
        case 1894: 
        case 1895: 
        case 1896: 
        case 1897: 
        case 1898: 
        case 1899: 
        case 1900: 
        case 1901: 
        case 1902: 
        case 1903: 
        case 1904: 
        case 1905: 
        case 1906: 
        case 1907: 
        case 1908: 
        case 1909: 
        case 1910: 
        case 1911: 
        case 1912: 
        case 1913: 
        case 1914: 
        case 1915: 
        case 1916: 
        case 1917: 
        case 1918: 
        case 1919: 
        case 1920: 
        case 1921: 
        case 1922: 
        case 1923: 
        case 1924: 
        case 1925: 
        case 1926: 
        case 1927: 
        case 1928: 
        case 1929: 
        case 1930: 
        case 1931: 
        case 1932: 
        case 1933: 
        case 1934: 
        case 1935: 
        case 1936: 
        case 1937: 
        case 1938: 
        case 1939: 
        case 1940: 
        case 1941: 
        case 1942: 
        case 1943: 
        case 1944: 
        case 1945: 
        case 1946: 
        case 1947: 
        case 1948: 
        case 1949: 
        case 1950: 
        case 1951: 
            watch_write<struct task_struct, FIELD_pending>::on(entry_, struct_addr_, val_);
            break;
        case 1952: 
        case 1953: 
        case 1954: 
        case 1955: 
        case 1956: 
        case 1957: 
        case 1958: 
        case 1959: 
            watch_write<struct task_struct, FIELD_sas_ss_sp>::on(entry_, struct_addr_, val_);
            break;
        case 1960: 
        case 1961: 
        case 1962: 
        case 1963: 
        case 1964: 
        case 1965: 
        case 1966: 
        case 1967: 
            watch_write<struct task_struct, FIELD_sas_ss_size>::on(entry_, struct_addr_, val_);
            break;
        case 1968: 
        case 1969: 
        case 1970: 
        case 1971: 
        case 1972: 
        case 1973: 
        case 1974: 
        case 1975: 
            watch_write<struct task_struct, FIELD_notifier>::on(entry_, struct_addr_, val_);
            break;
        case 1976: 
        case 1977: 
        case 1978: 
        case 1979: 
        case 1980: 
        case 1981: 
        case 1982: 
        case 1983: 
            watch_write<struct task_struct, FIELD_notifier_data>::on(entry_, struct_addr_, val_);
            break;
        case 1984: 
        case 1985: 
        case 1986: 
        case 1987: 
        case 1988: 
        case 1989: 
        case 1990: 
        case 1991: 
            watch_write<struct task_struct, FIELD_notifier_mask>::on(entry_, struct_addr_, val_);
            break;
        case 1992: 
        case 1993: 
        case 1994: 
        case 1995: 
        case 1996: 
        case 1997: 
        case 1998: 
        case 1999: 
            watch_write<struct task_struct, FIELD_audit_context>::on(entry_, struct_addr_, val_);
            break;
        case 2000: 
        case 2001: 
        case 2002: 
        case 2003: 
            watch_write<struct task_struct, FIELD_loginuid>::on(entry_, struct_addr_, val_);
            break;
        case 2004: 
        case 2005: 
        case 2006: 
        case 2007: 
            watch_write<struct task_struct, FIELD_sessionid>::on(entry_, struct_addr_, val_);
            break;
        case 2008: 
        case 2009: 
        case 2010: 
        case 2011: 
            watch_write<struct task_struct, FIELD_seccomp>::on(entry_, struct_addr_, val_);
            break;
        case 2012: 
        case 2013: 
        case 2014: 
        case 2015: 
            watch_write<struct task_struct, FIELD_parent_exec_id>::on(entry_, struct_addr_, val_);
            break;
        case 2016: 
        case 2017: 
        case 2018: 
        case 2019: 
            watch_write<struct task_struct, FIELD_self_exec_id>::on(entry_, struct_addr_, val_);
            break;
        case 2020: 
        case 2021: 
        case 2022: 
        case 2023: 
            watch_write<struct task_struct, FIELD_alloc_lock>::on(entry_, struct_addr_, val_);
            break;
        case 2024: 
        case 2025: 
        case 2026: 
        case 2027: 
        case 2028: 
        case 2029: 
        case 2030: 
        case 2031: 
            watch_write<struct task_struct, FIELD_irqaction>::on(entry_, struct_addr_, val_);
            break;
        case 2032: 
        case 2033: 
        case 2034: 
        case 2035: 
            watch_write<struct task_struct, FIELD_pi_lock>::on(entry_, struct_addr_, val_);
            break;
        case 2040: 
        case 2041: 
        case 2042: 
        case 2043: 
        case 2044: 
        case 2045: 
        case 2046: 
        case 2047: 
        case 2048: 
        case 2049: 
        case 2050: 
        case 2051: 
        case 2052: 
        case 2053: 
        case 2054: 
        case 2055: 
        case 2056: 
        case 2057: 
        case 2058: 
        case 2059: 
        case 2060: 
        case 2061: 
        case 2062: 
        case 2063: 
        case 2064: 
        case 2065: 
        case 2066: 
        case 2067: 
        case 2068: 
        case 2069: 
        case 2070: 
        case 2071: 
            watch_write<struct task_struct, FIELD_pi_waiters>::on(entry_, struct_addr_, val_);
            break;
        case 2072: 
        case 2073: 
        case 2074: 
        case 2075: 
        case 2076: 
        case 2077: 
        case 2078: 
        case 2079: 
            watch_write<struct task_struct, FIELD_pi_blocked_on>::on(entry_, struct_addr_, val_);
            break;
        case 2080: 
        case 2081: 
        case 2082: 
        case 2083: 
        case 2084: 
        case 2085: 
        case 2086: 
        case 2087: 
            watch_write<struct task_struct, FIELD_journal_info>::on(entry_, struct_addr_, val_);
            break;
        case 2088: 
        case 2089: 
        case 2090: 
        case 2091: 
        case 2092: 
        case 2093: 
        case 2094: 
        case 2095: 
            watch_write<struct task_struct, FIELD_bio_list>::on(entry_, struct_addr_, val_);
            break;
        case 2096: 
        case 2097: 
        case 2098: 
        case 2099: 
        case 2100: 
        case 2101: 
        case 2102: 
        case 2103: 
            watch_write<struct task_struct, FIELD_bio_tail>::on(entry_, struct_addr_, val_);
            break;
        case 2104: 
        case 2105: 
        case 2106: 
        case 2107: 
        case 2108: 
        case 2109: 
        case 2110: 
        case 2111: 
            watch_write<struct task_struct, FIELD_reclaim_state>::on(entry_, struct_addr_, val_);
            break;
        case 2112: 
        case 2113: 
        case 2114: 
        case 2115: 
        case 2116: 
        case 2117: 
        case 2118: 
        case 2119: 
            watch_write<struct task_struct, FIELD_backing_dev_info>::on(entry_, struct_addr_, val_);
            break;
        case 2120: 
        case 2121: 
        case 2122: 
        case 2123: 
        case 2124: 
        case 2125: 
        case 2126: 
        case 2127: 
            watch_write<struct task_struct, FIELD_io_context>::on(entry_, struct_addr_, val_);
            break;
        case 2128: 
        case 2129: 
        case 2130: 
        case 2131: 
        case 2132: 
        case 2133: 
        case 2134: 
        case 2135: 
            watch_write<struct task_struct, FIELD_ptrace_message>::on(entry_, struct_addr_, val_);
            break;
        case 2136: 
        case 2137: 
        case 2138: 
        case 2139: 
        case 2140: 
        case 2141: 
        case 2142: 
        case 2143: 
            watch_write<struct task_struct, FIELD_last_siginfo>::on(entry_, struct_addr_, val_);
            break;
        case 2144: 
        case 2145: 
        case 2146: 
        case 2147: 
        case 2148: 
        case 2149: 
        case 2150: 
        case 2151: 
        case 2152: 
        case 2153: 
        case 2154: 
        case 2155: 
        case 2156: 
        case 2157: 
        case 2158: 
        case 2159: 
        case 2160: 
        case 2161: 
        case 2162: 
        case 2163: 
        case 2164: 
        case 2165: 
        case 2166: 
        case 2167: 
        case 2168: 
        case 2169: 
        case 2170: 
        case 2171: 
        case 2172: 
        case 2173: 
        case 2174: 
        case 2175: 
        case 2176: 
        case 2177: 
        case 2178: 
        case 2179: 
        case 2180: 
        case 2181: 
        case 2182: 
        case 2183: 
        case 2184: 
        case 2185: 
        case 2186: 
        case 2187: 
        case 2188: 
        case 2189: 
        case 2190: 
        case 2191: 
        case 2192: 
        case 2193: 
        case 2194: 
        case 2195: 
        case 2196: 
        case 2197: 
        case 2198: 
        case 2199: 
            watch_write<struct task_struct, FIELD_ioac>::on(entry_, struct_addr_, val_);
            break;
        case 2200: 
        case 2201: 
        case 2202: 
        case 2203: 
        case 2204: 
        case 2205: 
        case 2206: 
        case 2207: 
            watch_write<struct task_struct, FIELD_acct_rss_mem1>::on(entry_, struct_addr_, val_);
            break;
        case 2208: 
        case 2209: 
        case 2210: 
        case 2211: 
        case 2212: 
        case 2213: 
        case 2214: 
        case 2215: 
            watch_write<struct task_struct, FIELD_acct_vm_mem1>::on(entry_, struct_addr_, val_);
            break;
        case 2216: 
        case 2217: 
        case 2218: 
        case 2219: 
        case 2220: 
        case 2221: 
        case 2222: 
        case 2223: 
            watch_write<struct task_struct, FIELD_acct_timexpd>::on(entry_, struct_addr_, val_);
            break;
        case 2224: 
        case 2225: 
        case 2226: 
        case 2227: 
        case 2228: 
        case 2229: 
        case 2230: 
        case 2231: 
            watch_write<struct task_struct, FIELD_mems_allowed>::on(entry_, struct_addr_, val_);
            break;
        case 2232: 
        case 2233: 
        case 2234: 
        case 2235: 
            watch_write<struct task_struct, FIELD_cpuset_mem_spread_rotor>::on(entry_, struct_addr_, val_);
            break;
        case 2240: 
        case 2241: 
        case 2242: 
        case 2243: 
        case 2244: 
        case 2245: 
        case 2246: 
        case 2247: 
            watch_write<struct task_struct, FIELD_cgroups>::on(entry_, struct_addr_, val_);
            break;
        case 2248: 
        case 2249: 
        case 2250: 
        case 2251: 
        case 2252: 
        case 2253: 
        case 2254: 
        case 2255: 
        case 2256: 
        case 2257: 
        case 2258: 
        case 2259: 
        case 2260: 
        case 2261: 
        case 2262: 
        case 2263: 
            watch_write<struct task_struct, FIELD_cg_list>::on(entry_, struct_addr_, val_);
            break;
        case 2264: 
        case 2265: 
        case 2266: 
        case 2267: 
        case 2268: 
        case 2269: 
        case 2270: 
        case 2271: 
            watch_write<struct task_struct, FIELD_robust_list>::on(entry_, struct_addr_, val_);
            break;
        case 2272: 
        case 2273: 
        case 2274: 
        case 2275: 
        case 2276: 
        case 2277: 
        case 2278: 
        case 2279: 
            watch_write<struct task_struct, FIELD_compat_robust_list>::on(entry_, struct_addr_, val_);
            break;
        case 2280: 
        case 2281: 
        case 2282: 
        case 2283: 
        case 2284: 
        case 2285: 
        case 2286: 
        case 2287: 
        case 2288: 
        case 2289: 
        case 2290: 
        case 2291: 
        case 2292: 
        case 2293: 
        case 2294: 
        case 2295: 
            watch_write<struct task_struct, FIELD_pi_state_list>::on(entry_, struct_addr_, val_);
            break;
        case 2296: 
        case 2297: 
        case 2298: 
        case 2299: 
        case 2300: 
        case 2301: 
        case 2302: 
        case 2303: 
            watch_write<struct task_struct, FIELD_pi_state_cache>::on(entry_, struct_addr_, val_);
            break;
        case 2304: 
        case 2305: 
        case 2306: 
        case 2307: 
        case 2308: 
        case 2309: 
        case 2310: 
        case 2311: 
            watch_write<struct task_struct, FIELD_perf_event_ctxp>::on(entry_, struct_addr_, val_);
            break;
        case 2312: 
        case 2313: 
        case 2314: 
        case 2315: 
        case 2316: 
        case 2317: 
        case 2318: 
        case 2319: 
        case 2320: 
        case 2321: 
        case 2322: 
        case 2323: 
        case 2324: 
        case 2325: 
        case 2326: 
        case 2327: 
        case 2328: 
        case 2329: 
        case 2330: 
        case 2331: 
        case 2332: 
        case 2333: 
        case 2334: 
        case 2335: 
        case 2336: 
        case 2337: 
        case 2338: 
        case 2339: 
        case 2340: 
        case 2341: 
        case 2342: 
        case 2343: 
            watch_write<struct task_struct, FIELD_perf_event_mutex>::on(entry_, struct_addr_, val_);
            break;
        case 2344: 
        case 2345: 
        case 2346: 
        case 2347: 
        case 2348: 
        case 2349: 
        case 2350: 
        case 2351: 
        case 2352: 
        case 2353: 
        case 2354: 
        case 2355: 
        case 2356: 
        case 2357: 
        case 2358: 
        case 2359: 
            watch_write<struct task_struct, FIELD_perf_event_list>::on(entry_, struct_addr_, val_);
            break;
        case 2360: 
        case 2361: 
        case 2362: 
        case 2363: 
        case 2364: 
        case 2365: 
        case 2366: 
        case 2367: 
            watch_write<struct task_struct, FIELD_mempolicy>::on(entry_, struct_addr_, val_);
            break;
        case 2368: 
        case 2369: 
            watch_write<struct task_struct, FIELD_il_next>::on(entry_, struct_addr_, val_);
            break;
        case 2372: 
        case 2373: 
        case 2374: 
        case 2375: 
            watch_write<struct task_struct, FIELD_fs_excl>::on(entry_, struct_addr_, val_);
            break;
        case 2376: 
        case 2377: 
        case 2378: 
        case 2379: 
        case 2380: 
        case 2381: 
        case 2382: 
        case 2383: 
        case 2384: 
        case 2385: 
        case 2386: 
        case 2387: 
        case 2388: 
        case 2389: 
        case 2390: 
        case 2391: 
            watch_write<struct task_struct, FIELD_rcu>::on(entry_, struct_addr_, val_);
            break;
        case 2392: 
        case 2393: 
        case 2394: 
        case 2395: 
        case 2396: 
        case 2397: 
        case 2398: 
        case 2399: 
            watch_write<struct task_struct, FIELD_splice_pipe>::on(entry_, struct_addr_, val_);
            break;
        case 2400: 
        case 2401: 
        case 2402: 
        case 2403: 
        case 2404: 
        case 2405: 
        case 2406: 
        case 2407: 
        case 2408: 
        case 2409: 
        case 2410: 
        case 2411: 
        case 2412: 
        case 2413: 
        case 2414: 
        case 2415: 
        case 2416: 
        case 2417: 
        case 2418: 
        case 2419: 
        case 2420: 
        case 2421: 
        case 2422: 
        case 2423: 
            watch_write<struct task_struct, FIELD_dirties>::on(entry_, struct_addr_, val_);
            break;
        case 2424: 
        case 2425: 
        case 2426: 
        case 2427: 
            watch_write<struct task_struct, FIELD_latency_record_count>::on(entry_, struct_addr_, val_);
            break;
        case 2432: 
        case 2433: 
        case 2434: 
        case 2435: 
        case 2436: 
        case 2437: 
        case 2438: 
        case 2439: 
        case 2440: 
        case 2441: 
        case 2442: 
        case 2443: 
        case 2444: 
        case 2445: 
        case 2446: 
        case 2447: 
        case 2448: 
        case 2449: 
        case 2450: 
        case 2451: 
        case 2452: 
        case 2453: 
        case 2454: 
        case 2455: 
        case 2456: 
        case 2457: 
        case 2458: 
        case 2459: 
        case 2460: 
        case 2461: 
        case 2462: 
        case 2463: 
        case 2464: 
        case 2465: 
        case 2466: 
        case 2467: 
        case 2468: 
        case 2469: 
        case 2470: 
        case 2471: 
        case 2472: 
        case 2473: 
        case 2474: 
        case 2475: 
        case 2476: 
        case 2477: 
        case 2478: 
        case 2479: 
        case 2480: 
        case 2481: 
        case 2482: 
        case 2483: 
        case 2484: 
        case 2485: 
        case 2486: 
        case 2487: 
        case 2488: 
        case 2489: 
        case 2490: 
        case 2491: 
        case 2492: 
        case 2493: 
        case 2494: 
        case 2495: 
        case 2496: 
        case 2497: 
        case 2498: 
        case 2499: 
        case 2500: 
        case 2501: 
        case 2502: 
        case 2503: 
        case 2504: 
        case 2505: 
        case 2506: 
        case 2507: 
        case 2508: 
        case 2509: 
        case 2510: 
        case 2511: 
        case 2512: 
        case 2513: 
        case 2514: 
        case 2515: 
        case 2516: 
        case 2517: 
        case 2518: 
        case 2519: 
        case 2520: 
        case 2521: 
        case 2522: 
        case 2523: 
        case 2524: 
        case 2525: 
        case 2526: 
        case 2527: 
        case 2528: 
        case 2529: 
        case 2530: 
        case 2531: 
        case 2532: 
        case 2533: 
        case 2534: 
        case 2535: 
        case 2536: 
        case 2537: 
        case 2538: 
        case 2539: 
        case 2540: 
        case 2541: 
        case 2542: 
        case 2543: 
        case 2544: 
        case 2545: 
        case 2546: 
        case 2547: 
        case 2548: 
        case 2549: 
        case 2550: 
        case 2551: 
        case 2552: 
        case 2553: 
        case 2554: 
        case 2555: 
        case 2556: 
        case 2557: 
        case 2558: 
        case 2559: 
        case 2560: 
        case 2561: 
        case 2562: 
        case 2563: 
        case 2564: 
        case 2565: 
        case 2566: 
        case 2567: 
        case 2568: 
        case 2569: 
        case 2570: 
        case 2571: 
        case 2572: 
        case 2573: 
        case 2574: 
        case 2575: 
        case 2576: 
        case 2577: 
        case 2578: 
        case 2579: 
        case 2580: 
        case 2581: 
        case 2582: 
        case 2583: 
        case 2584: 
        case 2585: 
        case 2586: 
        case 2587: 
        case 2588: 
        case 2589: 
        case 2590: 
        case 2591: 
        case 2592: 
        case 2593: 
        case 2594: 
        case 2595: 
        case 2596: 
        case 2597: 
        case 2598: 
        case 2599: 
        case 2600: 
        case 2601: 
        case 2602: 
        case 2603: 
        case 2604: 
        case 2605: 
        case 2606: 
        case 2607: 
        case 2608: 
        case 2609: 
        case 2610: 
        case 2611: 
        case 2612: 
        case 2613: 
        case 2614: 
        case 2615: 
        case 2616: 
        case 2617: 
        case 2618: 
        case 2619: 
        case 2620: 
        case 2621: 
        case 2622: 
        case 2623: 
        case 2624: 
        case 2625: 
        case 2626: 
        case 2627: 
        case 2628: 
        case 2629: 
        case 2630: 
        case 2631: 
        case 2632: 
        case 2633: 
        case 2634: 
        case 2635: 
        case 2636: 
        case 2637: 
        case 2638: 
        case 2639: 
        case 2640: 
        case 2641: 
        case 2642: 
        case 2643: 
        case 2644: 
        case 2645: 
        case 2646: 
        case 2647: 
        case 2648: 
        case 2649: 
        case 2650: 
        case 2651: 
        case 2652: 
        case 2653: 
        case 2654: 
        case 2655: 
        case 2656: 
        case 2657: 
        case 2658: 
        case 2659: 
        case 2660: 
        case 2661: 
        case 2662: 
        case 2663: 
        case 2664: 
        case 2665: 
        case 2666: 
        case 2667: 
        case 2668: 
        case 2669: 
        case 2670: 
        case 2671: 
        case 2672: 
        case 2673: 
        case 2674: 
        case 2675: 
        case 2676: 
        case 2677: 
        case 2678: 
        case 2679: 
        case 2680: 
        case 2681: 
        case 2682: 
        case 2683: 
        case 2684: 
        case 2685: 
        case 2686: 
        case 2687: 
        case 2688: 
        case 2689: 
        case 2690: 
        case 2691: 
        case 2692: 
        case 2693: 
        case 2694: 
        case 2695: 
        case 2696: 
        case 2697: 
        case 2698: 
        case 2699: 
        case 2700: 
        case 2701: 
        case 2702: 
        case 2703: 
        case 2704: 
        case 2705: 
        case 2706: 
        case 2707: 
        case 2708: 
        case 2709: 
        case 2710: 
        case 2711: 
        case 2712: 
        case 2713: 
        case 2714: 
        case 2715: 
        case 2716: 
        case 2717: 
        case 2718: 
        case 2719: 
        case 2720: 
        case 2721: 
        case 2722: 
        case 2723: 
        case 2724: 
        case 2725: 
        case 2726: 
        case 2727: 
        case 2728: 
        case 2729: 
        case 2730: 
        case 2731: 
        case 2732: 
        case 2733: 
        case 2734: 
        case 2735: 
        case 2736: 
        case 2737: 
        case 2738: 
        case 2739: 
        case 2740: 
        case 2741: 
        case 2742: 
        case 2743: 
        case 2744: 
        case 2745: 
        case 2746: 
        case 2747: 
        case 2748: 
        case 2749: 
        case 2750: 
        case 2751: 
        case 2752: 
        case 2753: 
        case 2754: 
        case 2755: 
        case 2756: 
        case 2757: 
        case 2758: 
        case 2759: 
        case 2760: 
        case 2761: 
        case 2762: 
        case 2763: 
        case 2764: 
        case 2765: 
        case 2766: 
        case 2767: 
        case 2768: 
        case 2769: 
        case 2770: 
        case 2771: 
        case 2772: 
        case 2773: 
        case 2774: 
        case 2775: 
        case 2776: 
        case 2777: 
        case 2778: 
        case 2779: 
        case 2780: 
        case 2781: 
        case 2782: 
        case 2783: 
        case 2784: 
        case 2785: 
        case 2786: 
        case 2787: 
        case 2788: 
        case 2789: 
        case 2790: 
        case 2791: 
        case 2792: 
        case 2793: 
        case 2794: 
        case 2795: 
        case 2796: 
        case 2797: 
        case 2798: 
        case 2799: 
        case 2800: 
        case 2801: 
        case 2802: 
        case 2803: 
        case 2804: 
        case 2805: 
        case 2806: 
        case 2807: 
        case 2808: 
        case 2809: 
        case 2810: 
        case 2811: 
        case 2812: 
        case 2813: 
        case 2814: 
        case 2815: 
        case 2816: 
        case 2817: 
        case 2818: 
        case 2819: 
        case 2820: 
        case 2821: 
        case 2822: 
        case 2823: 
        case 2824: 
        case 2825: 
        case 2826: 
        case 2827: 
        case 2828: 
        case 2829: 
        case 2830: 
        case 2831: 
        case 2832: 
        case 2833: 
        case 2834: 
        case 2835: 
        case 2836: 
        case 2837: 
        case 2838: 
        case 2839: 
        case 2840: 
        case 2841: 
        case 2842: 
        case 2843: 
        case 2844: 
        case 2845: 
        case 2846: 
        case 2847: 
        case 2848: 
        case 2849: 
        case 2850: 
        case 2851: 
        case 2852: 
        case 2853: 
        case 2854: 
        case 2855: 
        case 2856: 
        case 2857: 
        case 2858: 
        case 2859: 
        case 2860: 
        case 2861: 
        case 2862: 
        case 2863: 
        case 2864: 
        case 2865: 
        case 2866: 
        case 2867: 
        case 2868: 
        case 2869: 
        case 2870: 
        case 2871: 
        case 2872: 
        case 2873: 
        case 2874: 
        case 2875: 
        case 2876: 
        case 2877: 
        case 2878: 
        case 2879: 
        case 2880: 
        case 2881: 
        case 2882: 
        case 2883: 
        case 2884: 
        case 2885: 
        case 2886: 
        case 2887: 
        case 2888: 
        case 2889: 
        case 2890: 
        case 2891: 
        case 2892: 
        case 2893: 
        case 2894: 
        case 2895: 
        case 2896: 
        case 2897: 
        case 2898: 
        case 2899: 
        case 2900: 
        case 2901: 
        case 2902: 
        case 2903: 
        case 2904: 
        case 2905: 
        case 2906: 
        case 2907: 
        case 2908: 
        case 2909: 
        case 2910: 
        case 2911: 
        case 2912: 
        case 2913: 
        case 2914: 
        case 2915: 
        case 2916: 
        case 2917: 
        case 2918: 
        case 2919: 
        case 2920: 
        case 2921: 
        case 2922: 
        case 2923: 
        case 2924: 
        case 2925: 
        case 2926: 
        case 2927: 
        case 2928: 
        case 2929: 
        case 2930: 
        case 2931: 
        case 2932: 
        case 2933: 
        case 2934: 
        case 2935: 
        case 2936: 
        case 2937: 
        case 2938: 
        case 2939: 
        case 2940: 
        case 2941: 
        case 2942: 
        case 2943: 
        case 2944: 
        case 2945: 
        case 2946: 
        case 2947: 
        case 2948: 
        case 2949: 
        case 2950: 
        case 2951: 
        case 2952: 
        case 2953: 
        case 2954: 
        case 2955: 
        case 2956: 
        case 2957: 
        case 2958: 
        case 2959: 
        case 2960: 
        case 2961: 
        case 2962: 
        case 2963: 
        case 2964: 
        case 2965: 
        case 2966: 
        case 2967: 
        case 2968: 
        case 2969: 
        case 2970: 
        case 2971: 
        case 2972: 
        case 2973: 
        case 2974: 
        case 2975: 
        case 2976: 
        case 2977: 
        case 2978: 
        case 2979: 
        case 2980: 
        case 2981: 
        case 2982: 
        case 2983: 
        case 2984: 
        case 2985: 
        case 2986: 
        case 2987: 
        case 2988: 
        case 2989: 
        case 2990: 
        case 2991: 
        case 2992: 
        case 2993: 
        case 2994: 
        case 2995: 
        case 2996: 
        case 2997: 
        case 2998: 
        case 2999: 
        case 3000: 
        case 3001: 
        case 3002: 
        case 3003: 
        case 3004: 
        case 3005: 
        case 3006: 
        case 3007: 
        case 3008: 
        case 3009: 
        case 3010: 
        case 3011: 
        case 3012: 
        case 3013: 
        case 3014: 
        case 3015: 
        case 3016: 
        case 3017: 
        case 3018: 
        case 3019: 
        case 3020: 
        case 3021: 
        case 3022: 
        case 3023: 
        case 3024: 
        case 3025: 
        case 3026: 
        case 3027: 
        case 3028: 
        case 3029: 
        case 3030: 
        case 3031: 
        case 3032: 
        case 3033: 
        case 3034: 
        case 3035: 
        case 3036: 
        case 3037: 
        case 3038: 
        case 3039: 
        case 3040: 
        case 3041: 
        case 3042: 
        case 3043: 
        case 3044: 
        case 3045: 
        case 3046: 
        case 3047: 
        case 3048: 
        case 3049: 
        case 3050: 
        case 3051: 
        case 3052: 
        case 3053: 
        case 3054: 
        case 3055: 
        case 3056: 
        case 3057: 
        case 3058: 
        case 3059: 
        case 3060: 
        case 3061: 
        case 3062: 
        case 3063: 
        case 3064: 
        case 3065: 
        case 3066: 
        case 3067: 
        case 3068: 
        case 3069: 
        case 3070: 
        case 3071: 
        case 3072: 
        case 3073: 
        case 3074: 
        case 3075: 
        case 3076: 
        case 3077: 
        case 3078: 
        case 3079: 
        case 3080: 
        case 3081: 
        case 3082: 
        case 3083: 
        case 3084: 
        case 3085: 
        case 3086: 
        case 3087: 
        case 3088: 
        case 3089: 
        case 3090: 
        case 3091: 
        case 3092: 
        case 3093: 
        case 3094: 
        case 3095: 
        case 3096: 
        case 3097: 
        case 3098: 
        case 3099: 
        case 3100: 
        case 3101: 
        case 3102: 
        case 3103: 
        case 3104: 
        case 3105: 
        case 3106: 
        case 3107: 
        case 3108: 
        case 3109: 
        case 3110: 
        case 3111: 
        case 3112: 
        case 3113: 
        case 3114: 
        case 3115: 
        case 3116: 
        case 3117: 
        case 3118: 
        case 3119: 
        case 3120: 
        case 3121: 
        case 3122: 
        case 3123: 
        case 3124: 
        case 3125: 
        case 3126: 
        case 3127: 
        case 3128: 
        case 3129: 
        case 3130: 
        case 3131: 
        case 3132: 
        case 3133: 
        case 3134: 
        case 3135: 
        case 3136: 
        case 3137: 
        case 3138: 
        case 3139: 
        case 3140: 
        case 3141: 
        case 3142: 
        case 3143: 
        case 3144: 
        case 3145: 
        case 3146: 
        case 3147: 
        case 3148: 
        case 3149: 
        case 3150: 
        case 3151: 
        case 3152: 
        case 3153: 
        case 3154: 
        case 3155: 
        case 3156: 
        case 3157: 
        case 3158: 
        case 3159: 
        case 3160: 
        case 3161: 
        case 3162: 
        case 3163: 
        case 3164: 
        case 3165: 
        case 3166: 
        case 3167: 
        case 3168: 
        case 3169: 
        case 3170: 
        case 3171: 
        case 3172: 
        case 3173: 
        case 3174: 
        case 3175: 
        case 3176: 
        case 3177: 
        case 3178: 
        case 3179: 
        case 3180: 
        case 3181: 
        case 3182: 
        case 3183: 
        case 3184: 
        case 3185: 
        case 3186: 
        case 3187: 
        case 3188: 
        case 3189: 
        case 3190: 
        case 3191: 
        case 3192: 
        case 3193: 
        case 3194: 
        case 3195: 
        case 3196: 
        case 3197: 
        case 3198: 
        case 3199: 
        case 3200: 
        case 3201: 
        case 3202: 
        case 3203: 
        case 3204: 
        case 3205: 
        case 3206: 
        case 3207: 
        case 3208: 
        case 3209: 
        case 3210: 
        case 3211: 
        case 3212: 
        case 3213: 
        case 3214: 
        case 3215: 
        case 3216: 
        case 3217: 
        case 3218: 
        case 3219: 
        case 3220: 
        case 3221: 
        case 3222: 
        case 3223: 
        case 3224: 
        case 3225: 
        case 3226: 
        case 3227: 
        case 3228: 
        case 3229: 
        case 3230: 
        case 3231: 
        case 3232: 
        case 3233: 
        case 3234: 
        case 3235: 
        case 3236: 
        case 3237: 
        case 3238: 
        case 3239: 
        case 3240: 
        case 3241: 
        case 3242: 
        case 3243: 
        case 3244: 
        case 3245: 
        case 3246: 
        case 3247: 
        case 3248: 
        case 3249: 
        case 3250: 
        case 3251: 
        case 3252: 
        case 3253: 
        case 3254: 
        case 3255: 
        case 3256: 
        case 3257: 
        case 3258: 
        case 3259: 
        case 3260: 
        case 3261: 
        case 3262: 
        case 3263: 
        case 3264: 
        case 3265: 
        case 3266: 
        case 3267: 
        case 3268: 
        case 3269: 
        case 3270: 
        case 3271: 
        case 3272: 
        case 3273: 
        case 3274: 
        case 3275: 
        case 3276: 
        case 3277: 
        case 3278: 
        case 3279: 
        case 3280: 
        case 3281: 
        case 3282: 
        case 3283: 
        case 3284: 
        case 3285: 
        case 3286: 
        case 3287: 
        case 3288: 
        case 3289: 
        case 3290: 
        case 3291: 
        case 3292: 
        case 3293: 
        case 3294: 
        case 3295: 
        case 3296: 
        case 3297: 
        case 3298: 
        case 3299: 
        case 3300: 
        case 3301: 
        case 3302: 
        case 3303: 
        case 3304: 
        case 3305: 
        case 3306: 
        case 3307: 
        case 3308: 
        case 3309: 
        case 3310: 
        case 3311: 
        case 3312: 
        case 3313: 
        case 3314: 
        case 3315: 
        case 3316: 
        case 3317: 
        case 3318: 
        case 3319: 
        case 3320: 
        case 3321: 
        case 3322: 
        case 3323: 
        case 3324: 
        case 3325: 
        case 3326: 
        case 3327: 
        case 3328: 
        case 3329: 
        case 3330: 
        case 3331: 
        case 3332: 
        case 3333: 
        case 3334: 
        case 3335: 
        case 3336: 
        case 3337: 
        case 3338: 
        case 3339: 
        case 3340: 
        case 3341: 
        case 3342: 
        case 3343: 
        case 3344: 
        case 3345: 
        case 3346: 
        case 3347: 
        case 3348: 
        case 3349: 
        case 3350: 
        case 3351: 
        case 3352: 
        case 3353: 
        case 3354: 
        case 3355: 
        case 3356: 
        case 3357: 
        case 3358: 
        case 3359: 
        case 3360: 
        case 3361: 
        case 3362: 
        case 3363: 
        case 3364: 
        case 3365: 
        case 3366: 
        case 3367: 
        case 3368: 
        case 3369: 
        case 3370: 
        case 3371: 
        case 3372: 
        case 3373: 
        case 3374: 
        case 3375: 
        case 3376: 
        case 3377: 
        case 3378: 
        case 3379: 
        case 3380: 
        case 3381: 
        case 3382: 
        case 3383: 
        case 3384: 
        case 3385: 
        case 3386: 
        case 3387: 
        case 3388: 
        case 3389: 
        case 3390: 
        case 3391: 
        case 3392: 
        case 3393: 
        case 3394: 
        case 3395: 
        case 3396: 
        case 3397: 
        case 3398: 
        case 3399: 
        case 3400: 
        case 3401: 
        case 3402: 
        case 3403: 
        case 3404: 
        case 3405: 
        case 3406: 
        case 3407: 
        case 3408: 
        case 3409: 
        case 3410: 
        case 3411: 
        case 3412: 
        case 3413: 
        case 3414: 
        case 3415: 
        case 3416: 
        case 3417: 
        case 3418: 
        case 3419: 
        case 3420: 
        case 3421: 
        case 3422: 
        case 3423: 
        case 3424: 
        case 3425: 
        case 3426: 
        case 3427: 
        case 3428: 
        case 3429: 
        case 3430: 
        case 3431: 
        case 3432: 
        case 3433: 
        case 3434: 
        case 3435: 
        case 3436: 
        case 3437: 
        case 3438: 
        case 3439: 
        case 3440: 
        case 3441: 
        case 3442: 
        case 3443: 
        case 3444: 
        case 3445: 
        case 3446: 
        case 3447: 
        case 3448: 
        case 3449: 
        case 3450: 
        case 3451: 
        case 3452: 
        case 3453: 
        case 3454: 
        case 3455: 
        case 3456: 
        case 3457: 
        case 3458: 
        case 3459: 
        case 3460: 
        case 3461: 
        case 3462: 
        case 3463: 
        case 3464: 
        case 3465: 
        case 3466: 
        case 3467: 
        case 3468: 
        case 3469: 
        case 3470: 
        case 3471: 
        case 3472: 
        case 3473: 
        case 3474: 
        case 3475: 
        case 3476: 
        case 3477: 
        case 3478: 
        case 3479: 
        case 3480: 
        case 3481: 
        case 3482: 
        case 3483: 
        case 3484: 
        case 3485: 
        case 3486: 
        case 3487: 
        case 3488: 
        case 3489: 
        case 3490: 
        case 3491: 
        case 3492: 
        case 3493: 
        case 3494: 
        case 3495: 
        case 3496: 
        case 3497: 
        case 3498: 
        case 3499: 
        case 3500: 
        case 3501: 
        case 3502: 
        case 3503: 
        case 3504: 
        case 3505: 
        case 3506: 
        case 3507: 
        case 3508: 
        case 3509: 
        case 3510: 
        case 3511: 
        case 3512: 
        case 3513: 
        case 3514: 
        case 3515: 
        case 3516: 
        case 3517: 
        case 3518: 
        case 3519: 
        case 3520: 
        case 3521: 
        case 3522: 
        case 3523: 
        case 3524: 
        case 3525: 
        case 3526: 
        case 3527: 
        case 3528: 
        case 3529: 
        case 3530: 
        case 3531: 
        case 3532: 
        case 3533: 
        case 3534: 
        case 3535: 
        case 3536: 
        case 3537: 
        case 3538: 
        case 3539: 
        case 3540: 
        case 3541: 
        case 3542: 
        case 3543: 
        case 3544: 
        case 3545: 
        case 3546: 
        case 3547: 
        case 3548: 
        case 3549: 
        case 3550: 
        case 3551: 
        case 3552: 
        case 3553: 
        case 3554: 
        case 3555: 
        case 3556: 
        case 3557: 
        case 3558: 
        case 3559: 
        case 3560: 
        case 3561: 
        case 3562: 
        case 3563: 
        case 3564: 
        case 3565: 
        case 3566: 
        case 3567: 
        case 3568: 
        case 3569: 
        case 3570: 
        case 3571: 
        case 3572: 
        case 3573: 
        case 3574: 
        case 3575: 
        case 3576: 
        case 3577: 
        case 3578: 
        case 3579: 
        case 3580: 
        case 3581: 
        case 3582: 
        case 3583: 
        case 3584: 
        case 3585: 
        case 3586: 
        case 3587: 
        case 3588: 
        case 3589: 
        case 3590: 
        case 3591: 
        case 3592: 
        case 3593: 
        case 3594: 
        case 3595: 
        case 3596: 
        case 3597: 
        case 3598: 
        case 3599: 
        case 3600: 
        case 3601: 
        case 3602: 
        case 3603: 
        case 3604: 
        case 3605: 
        case 3606: 
        case 3607: 
        case 3608: 
        case 3609: 
        case 3610: 
        case 3611: 
        case 3612: 
        case 3613: 
        case 3614: 
        case 3615: 
        case 3616: 
        case 3617: 
        case 3618: 
        case 3619: 
        case 3620: 
        case 3621: 
        case 3622: 
        case 3623: 
        case 3624: 
        case 3625: 
        case 3626: 
        case 3627: 
        case 3628: 
        case 3629: 
        case 3630: 
        case 3631: 
        case 3632: 
        case 3633: 
        case 3634: 
        case 3635: 
        case 3636: 
        case 3637: 
        case 3638: 
        case 3639: 
        case 3640: 
        case 3641: 
        case 3642: 
        case 3643: 
        case 3644: 
        case 3645: 
        case 3646: 
        case 3647: 
        case 3648: 
        case 3649: 
        case 3650: 
        case 3651: 
        case 3652: 
        case 3653: 
        case 3654: 
        case 3655: 
        case 3656: 
        case 3657: 
        case 3658: 
        case 3659: 
        case 3660: 
        case 3661: 
        case 3662: 
        case 3663: 
        case 3664: 
        case 3665: 
        case 3666: 
        case 3667: 
        case 3668: 
        case 3669: 
        case 3670: 
        case 3671: 
        case 3672: 
        case 3673: 
        case 3674: 
        case 3675: 
        case 3676: 
        case 3677: 
        case 3678: 
        case 3679: 
        case 3680: 
        case 3681: 
        case 3682: 
        case 3683: 
        case 3684: 
        case 3685: 
        case 3686: 
        case 3687: 
        case 3688: 
        case 3689: 
        case 3690: 
        case 3691: 
        case 3692: 
        case 3693: 
        case 3694: 
        case 3695: 
        case 3696: 
        case 3697: 
        case 3698: 
        case 3699: 
        case 3700: 
        case 3701: 
        case 3702: 
        case 3703: 
        case 3704: 
        case 3705: 
        case 3706: 
        case 3707: 
        case 3708: 
        case 3709: 
        case 3710: 
        case 3711: 
        case 3712: 
        case 3713: 
        case 3714: 
        case 3715: 
        case 3716: 
        case 3717: 
        case 3718: 
        case 3719: 
        case 3720: 
        case 3721: 
        case 3722: 
        case 3723: 
        case 3724: 
        case 3725: 
        case 3726: 
        case 3727: 
        case 3728: 
        case 3729: 
        case 3730: 
        case 3731: 
        case 3732: 
        case 3733: 
        case 3734: 
        case 3735: 
        case 3736: 
        case 3737: 
        case 3738: 
        case 3739: 
        case 3740: 
        case 3741: 
        case 3742: 
        case 3743: 
        case 3744: 
        case 3745: 
        case 3746: 
        case 3747: 
        case 3748: 
        case 3749: 
        case 3750: 
        case 3751: 
        case 3752: 
        case 3753: 
        case 3754: 
        case 3755: 
        case 3756: 
        case 3757: 
        case 3758: 
        case 3759: 
        case 3760: 
        case 3761: 
        case 3762: 
        case 3763: 
        case 3764: 
        case 3765: 
        case 3766: 
        case 3767: 
        case 3768: 
        case 3769: 
        case 3770: 
        case 3771: 
        case 3772: 
        case 3773: 
        case 3774: 
        case 3775: 
        case 3776: 
        case 3777: 
        case 3778: 
        case 3779: 
        case 3780: 
        case 3781: 
        case 3782: 
        case 3783: 
        case 3784: 
        case 3785: 
        case 3786: 
        case 3787: 
        case 3788: 
        case 3789: 
        case 3790: 
        case 3791: 
        case 3792: 
        case 3793: 
        case 3794: 
        case 3795: 
        case 3796: 
        case 3797: 
        case 3798: 
        case 3799: 
        case 3800: 
        case 3801: 
        case 3802: 
        case 3803: 
        case 3804: 
        case 3805: 
        case 3806: 
        case 3807: 
        case 3808: 
        case 3809: 
        case 3810: 
        case 3811: 
        case 3812: 
        case 3813: 
        case 3814: 
        case 3815: 
        case 3816: 
        case 3817: 
        case 3818: 
        case 3819: 
        case 3820: 
        case 3821: 
        case 3822: 
        case 3823: 
        case 3824: 
        case 3825: 
        case 3826: 
        case 3827: 
        case 3828: 
        case 3829: 
        case 3830: 
        case 3831: 
        case 3832: 
        case 3833: 
        case 3834: 
        case 3835: 
        case 3836: 
        case 3837: 
        case 3838: 
        case 3839: 
        case 3840: 
        case 3841: 
        case 3842: 
        case 3843: 
        case 3844: 
        case 3845: 
        case 3846: 
        case 3847: 
        case 3848: 
        case 3849: 
        case 3850: 
        case 3851: 
        case 3852: 
        case 3853: 
        case 3854: 
        case 3855: 
        case 3856: 
        case 3857: 
        case 3858: 
        case 3859: 
        case 3860: 
        case 3861: 
        case 3862: 
        case 3863: 
        case 3864: 
        case 3865: 
        case 3866: 
        case 3867: 
        case 3868: 
        case 3869: 
        case 3870: 
        case 3871: 
        case 3872: 
        case 3873: 
        case 3874: 
        case 3875: 
        case 3876: 
        case 3877: 
        case 3878: 
        case 3879: 
        case 3880: 
        case 3881: 
        case 3882: 
        case 3883: 
        case 3884: 
        case 3885: 
        case 3886: 
        case 3887: 
        case 3888: 
        case 3889: 
        case 3890: 
        case 3891: 
        case 3892: 
        case 3893: 
        case 3894: 
        case 3895: 
        case 3896: 
        case 3897: 
        case 3898: 
        case 3899: 
        case 3900: 
        case 3901: 
        case 3902: 
        case 3903: 
        case 3904: 
        case 3905: 
        case 3906: 
        case 3907: 
        case 3908: 
        case 3909: 
        case 3910: 
        case 3911: 
        case 3912: 
        case 3913: 
        case 3914: 
        case 3915: 
        case 3916: 
        case 3917: 
        case 3918: 
        case 3919: 
        case 3920: 
        case 3921: 
        case 3922: 
        case 3923: 
        case 3924: 
        case 3925: 
        case 3926: 
        case 3927: 
        case 3928: 
        case 3929: 
        case 3930: 
        case 3931: 
        case 3932: 
        case 3933: 
        case 3934: 
        case 3935: 
        case 3936: 
        case 3937: 
        case 3938: 
        case 3939: 
        case 3940: 
        case 3941: 
        case 3942: 
        case 3943: 
        case 3944: 
        case 3945: 
        case 3946: 
        case 3947: 
        case 3948: 
        case 3949: 
        case 3950: 
        case 3951: 
        case 3952: 
        case 3953: 
        case 3954: 
        case 3955: 
        case 3956: 
        case 3957: 
        case 3958: 
        case 3959: 
        case 3960: 
        case 3961: 
        case 3962: 
        case 3963: 
        case 3964: 
        case 3965: 
        case 3966: 
        case 3967: 
        case 3968: 
        case 3969: 
        case 3970: 
        case 3971: 
        case 3972: 
        case 3973: 
        case 3974: 
        case 3975: 
        case 3976: 
        case 3977: 
        case 3978: 
        case 3979: 
        case 3980: 
        case 3981: 
        case 3982: 
        case 3983: 
        case 3984: 
        case 3985: 
        case 3986: 
        case 3987: 
        case 3988: 
        case 3989: 
        case 3990: 
        case 3991: 
        case 3992: 
        case 3993: 
        case 3994: 
        case 3995: 
        case 3996: 
        case 3997: 
        case 3998: 
        case 3999: 
        case 4000: 
        case 4001: 
        case 4002: 
        case 4003: 
        case 4004: 
        case 4005: 
        case 4006: 
        case 4007: 
        case 4008: 
        case 4009: 
        case 4010: 
        case 4011: 
        case 4012: 
        case 4013: 
        case 4014: 
        case 4015: 
        case 4016: 
        case 4017: 
        case 4018: 
        case 4019: 
        case 4020: 
        case 4021: 
        case 4022: 
        case 4023: 
        case 4024: 
        case 4025: 
        case 4026: 
        case 4027: 
        case 4028: 
        case 4029: 
        case 4030: 
        case 4031: 
        case 4032: 
        case 4033: 
        case 4034: 
        case 4035: 
        case 4036: 
        case 4037: 
        case 4038: 
        case 4039: 
        case 4040: 
        case 4041: 
        case 4042: 
        case 4043: 
        case 4044: 
        case 4045: 
        case 4046: 
        case 4047: 
        case 4048: 
        case 4049: 
        case 4050: 
        case 4051: 
        case 4052: 
        case 4053: 
        case 4054: 
        case 4055: 
        case 4056: 
        case 4057: 
        case 4058: 
        case 4059: 
        case 4060: 
        case 4061: 
        case 4062: 
        case 4063: 
        case 4064: 
        case 4065: 
        case 4066: 
        case 4067: 
        case 4068: 
        case 4069: 
        case 4070: 
        case 4071: 
        case 4072: 
        case 4073: 
        case 4074: 
        case 4075: 
        case 4076: 
        case 4077: 
        case 4078: 
        case 4079: 
        case 4080: 
        case 4081: 
        case 4082: 
        case 4083: 
        case 4084: 
        case 4085: 
        case 4086: 
        case 4087: 
        case 4088: 
        case 4089: 
        case 4090: 
        case 4091: 
        case 4092: 
        case 4093: 
        case 4094: 
        case 4095: 
        case 4096: 
        case 4097: 
        case 4098: 
        case 4099: 
        case 4100: 
        case 4101: 
        case 4102: 
        case 4103: 
        case 4104: 
        case 4105: 
        case 4106: 
        case 4107: 
        case 4108: 
        case 4109: 
        case 4110: 
        case 4111: 
        case 4112: 
        case 4113: 
        case 4114: 
        case 4115: 
        case 4116: 
        case 4117: 
        case 4118: 
        case 4119: 
        case 4120: 
        case 4121: 
        case 4122: 
        case 4123: 
        case 4124: 
        case 4125: 
        case 4126: 
        case 4127: 
        case 4128: 
        case 4129: 
        case 4130: 
        case 4131: 
        case 4132: 
        case 4133: 
        case 4134: 
        case 4135: 
        case 4136: 
        case 4137: 
        case 4138: 
        case 4139: 
        case 4140: 
        case 4141: 
        case 4142: 
        case 4143: 
        case 4144: 
        case 4145: 
        case 4146: 
        case 4147: 
        case 4148: 
        case 4149: 
        case 4150: 
        case 4151: 
        case 4152: 
        case 4153: 
        case 4154: 
        case 4155: 
        case 4156: 
        case 4157: 
        case 4158: 
        case 4159: 
        case 4160: 
        case 4161: 
        case 4162: 
        case 4163: 
        case 4164: 
        case 4165: 
        case 4166: 
        case 4167: 
        case 4168: 
        case 4169: 
        case 4170: 
        case 4171: 
        case 4172: 
        case 4173: 
        case 4174: 
        case 4175: 
        case 4176: 
        case 4177: 
        case 4178: 
        case 4179: 
        case 4180: 
        case 4181: 
        case 4182: 
        case 4183: 
        case 4184: 
        case 4185: 
        case 4186: 
        case 4187: 
        case 4188: 
        case 4189: 
        case 4190: 
        case 4191: 
        case 4192: 
        case 4193: 
        case 4194: 
        case 4195: 
        case 4196: 
        case 4197: 
        case 4198: 
        case 4199: 
        case 4200: 
        case 4201: 
        case 4202: 
        case 4203: 
        case 4204: 
        case 4205: 
        case 4206: 
        case 4207: 
        case 4208: 
        case 4209: 
        case 4210: 
        case 4211: 
        case 4212: 
        case 4213: 
        case 4214: 
        case 4215: 
        case 4216: 
        case 4217: 
        case 4218: 
        case 4219: 
        case 4220: 
        case 4221: 
        case 4222: 
        case 4223: 
        case 4224: 
        case 4225: 
        case 4226: 
        case 4227: 
        case 4228: 
        case 4229: 
        case 4230: 
        case 4231: 
        case 4232: 
        case 4233: 
        case 4234: 
        case 4235: 
        case 4236: 
        case 4237: 
        case 4238: 
        case 4239: 
        case 4240: 
        case 4241: 
        case 4242: 
        case 4243: 
        case 4244: 
        case 4245: 
        case 4246: 
        case 4247: 
        case 4248: 
        case 4249: 
        case 4250: 
        case 4251: 
        case 4252: 
        case 4253: 
        case 4254: 
        case 4255: 
        case 4256: 
        case 4257: 
        case 4258: 
        case 4259: 
        case 4260: 
        case 4261: 
        case 4262: 
        case 4263: 
        case 4264: 
        case 4265: 
        case 4266: 
        case 4267: 
        case 4268: 
        case 4269: 
        case 4270: 
        case 4271: 
        case 4272: 
        case 4273: 
        case 4274: 
        case 4275: 
        case 4276: 
        case 4277: 
        case 4278: 
        case 4279: 
        case 4280: 
        case 4281: 
        case 4282: 
        case 4283: 
        case 4284: 
        case 4285: 
        case 4286: 
        case 4287: 
        case 4288: 
        case 4289: 
        case 4290: 
        case 4291: 
        case 4292: 
        case 4293: 
        case 4294: 
        case 4295: 
        case 4296: 
        case 4297: 
        case 4298: 
        case 4299: 
        case 4300: 
        case 4301: 
        case 4302: 
        case 4303: 
        case 4304: 
        case 4305: 
        case 4306: 
        case 4307: 
        case 4308: 
        case 4309: 
        case 4310: 
        case 4311: 
        case 4312: 
        case 4313: 
        case 4314: 
        case 4315: 
        case 4316: 
        case 4317: 
        case 4318: 
        case 4319: 
        case 4320: 
        case 4321: 
        case 4322: 
        case 4323: 
        case 4324: 
        case 4325: 
        case 4326: 
        case 4327: 
        case 4328: 
        case 4329: 
        case 4330: 
        case 4331: 
        case 4332: 
        case 4333: 
        case 4334: 
        case 4335: 
        case 4336: 
        case 4337: 
        case 4338: 
        case 4339: 
        case 4340: 
        case 4341: 
        case 4342: 
        case 4343: 
        case 4344: 
        case 4345: 
        case 4346: 
        case 4347: 
        case 4348: 
        case 4349: 
        case 4350: 
        case 4351: 
        case 4352: 
        case 4353: 
        case 4354: 
        case 4355: 
        case 4356: 
        case 4357: 
        case 4358: 
        case 4359: 
        case 4360: 
        case 4361: 
        case 4362: 
        case 4363: 
        case 4364: 
        case 4365: 
        case 4366: 
        case 4367: 
        case 4368: 
        case 4369: 
        case 4370: 
        case 4371: 
        case 4372: 
        case 4373: 
        case 4374: 
        case 4375: 
        case 4376: 
        case 4377: 
        case 4378: 
        case 4379: 
        case 4380: 
        case 4381: 
        case 4382: 
        case 4383: 
        case 4384: 
        case 4385: 
        case 4386: 
        case 4387: 
        case 4388: 
        case 4389: 
        case 4390: 
        case 4391: 
        case 4392: 
        case 4393: 
        case 4394: 
        case 4395: 
        case 4396: 
        case 4397: 
        case 4398: 
        case 4399: 
        case 4400: 
        case 4401: 
        case 4402: 
        case 4403: 
        case 4404: 
        case 4405: 
        case 4406: 
        case 4407: 
        case 4408: 
        case 4409: 
        case 4410: 
        case 4411: 
        case 4412: 
        case 4413: 
        case 4414: 
        case 4415: 
        case 4416: 
        case 4417: 
        case 4418: 
        case 4419: 
        case 4420: 
        case 4421: 
        case 4422: 
        case 4423: 
        case 4424: 
        case 4425: 
        case 4426: 
        case 4427: 
        case 4428: 
        case 4429: 
        case 4430: 
        case 4431: 
        case 4432: 
        case 4433: 
        case 4434: 
        case 4435: 
        case 4436: 
        case 4437: 
        case 4438: 
        case 4439: 
        case 4440: 
        case 4441: 
        case 4442: 
        case 4443: 
        case 4444: 
        case 4445: 
        case 4446: 
        case 4447: 
        case 4448: 
        case 4449: 
        case 4450: 
        case 4451: 
        case 4452: 
        case 4453: 
        case 4454: 
        case 4455: 
        case 4456: 
        case 4457: 
        case 4458: 
        case 4459: 
        case 4460: 
        case 4461: 
        case 4462: 
        case 4463: 
        case 4464: 
        case 4465: 
        case 4466: 
        case 4467: 
        case 4468: 
        case 4469: 
        case 4470: 
        case 4471: 
        case 4472: 
        case 4473: 
        case 4474: 
        case 4475: 
        case 4476: 
        case 4477: 
        case 4478: 
        case 4479: 
        case 4480: 
        case 4481: 
        case 4482: 
        case 4483: 
        case 4484: 
        case 4485: 
        case 4486: 
        case 4487: 
        case 4488: 
        case 4489: 
        case 4490: 
        case 4491: 
        case 4492: 
        case 4493: 
        case 4494: 
        case 4495: 
        case 4496: 
        case 4497: 
        case 4498: 
        case 4499: 
        case 4500: 
        case 4501: 
        case 4502: 
        case 4503: 
        case 4504: 
        case 4505: 
        case 4506: 
        case 4507: 
        case 4508: 
        case 4509: 
        case 4510: 
        case 4511: 
        case 4512: 
        case 4513: 
        case 4514: 
        case 4515: 
        case 4516: 
        case 4517: 
        case 4518: 
        case 4519: 
        case 4520: 
        case 4521: 
        case 4522: 
        case 4523: 
        case 4524: 
        case 4525: 
        case 4526: 
        case 4527: 
        case 4528: 
        case 4529: 
        case 4530: 
        case 4531: 
        case 4532: 
        case 4533: 
        case 4534: 
        case 4535: 
        case 4536: 
        case 4537: 
        case 4538: 
        case 4539: 
        case 4540: 
        case 4541: 
        case 4542: 
        case 4543: 
        case 4544: 
        case 4545: 
        case 4546: 
        case 4547: 
        case 4548: 
        case 4549: 
        case 4550: 
        case 4551: 
        case 4552: 
        case 4553: 
        case 4554: 
        case 4555: 
        case 4556: 
        case 4557: 
        case 4558: 
        case 4559: 
        case 4560: 
        case 4561: 
        case 4562: 
        case 4563: 
        case 4564: 
        case 4565: 
        case 4566: 
        case 4567: 
        case 4568: 
        case 4569: 
        case 4570: 
        case 4571: 
        case 4572: 
        case 4573: 
        case 4574: 
        case 4575: 
        case 4576: 
        case 4577: 
        case 4578: 
        case 4579: 
        case 4580: 
        case 4581: 
        case 4582: 
        case 4583: 
        case 4584: 
        case 4585: 
        case 4586: 
        case 4587: 
        case 4588: 
        case 4589: 
        case 4590: 
        case 4591: 
        case 4592: 
        case 4593: 
        case 4594: 
        case 4595: 
        case 4596: 
        case 4597: 
        case 4598: 
        case 4599: 
        case 4600: 
        case 4601: 
        case 4602: 
        case 4603: 
        case 4604: 
        case 4605: 
        case 4606: 
        case 4607: 
        case 4608: 
        case 4609: 
        case 4610: 
        case 4611: 
        case 4612: 
        case 4613: 
        case 4614: 
        case 4615: 
        case 4616: 
        case 4617: 
        case 4618: 
        case 4619: 
        case 4620: 
        case 4621: 
        case 4622: 
        case 4623: 
        case 4624: 
        case 4625: 
        case 4626: 
        case 4627: 
        case 4628: 
        case 4629: 
        case 4630: 
        case 4631: 
        case 4632: 
        case 4633: 
        case 4634: 
        case 4635: 
        case 4636: 
        case 4637: 
        case 4638: 
        case 4639: 
        case 4640: 
        case 4641: 
        case 4642: 
        case 4643: 
        case 4644: 
        case 4645: 
        case 4646: 
        case 4647: 
        case 4648: 
        case 4649: 
        case 4650: 
        case 4651: 
        case 4652: 
        case 4653: 
        case 4654: 
        case 4655: 
        case 4656: 
        case 4657: 
        case 4658: 
        case 4659: 
        case 4660: 
        case 4661: 
        case 4662: 
        case 4663: 
        case 4664: 
        case 4665: 
        case 4666: 
        case 4667: 
        case 4668: 
        case 4669: 
        case 4670: 
        case 4671: 
        case 4672: 
        case 4673: 
        case 4674: 
        case 4675: 
        case 4676: 
        case 4677: 
        case 4678: 
        case 4679: 
        case 4680: 
        case 4681: 
        case 4682: 
        case 4683: 
        case 4684: 
        case 4685: 
        case 4686: 
        case 4687: 
        case 4688: 
        case 4689: 
        case 4690: 
        case 4691: 
        case 4692: 
        case 4693: 
        case 4694: 
        case 4695: 
        case 4696: 
        case 4697: 
        case 4698: 
        case 4699: 
        case 4700: 
        case 4701: 
        case 4702: 
        case 4703: 
        case 4704: 
        case 4705: 
        case 4706: 
        case 4707: 
        case 4708: 
        case 4709: 
        case 4710: 
        case 4711: 
        case 4712: 
        case 4713: 
        case 4714: 
        case 4715: 
        case 4716: 
        case 4717: 
        case 4718: 
        case 4719: 
        case 4720: 
        case 4721: 
        case 4722: 
        case 4723: 
        case 4724: 
        case 4725: 
        case 4726: 
        case 4727: 
        case 4728: 
        case 4729: 
        case 4730: 
        case 4731: 
        case 4732: 
        case 4733: 
        case 4734: 
        case 4735: 
        case 4736: 
        case 4737: 
        case 4738: 
        case 4739: 
        case 4740: 
        case 4741: 
        case 4742: 
        case 4743: 
        case 4744: 
        case 4745: 
        case 4746: 
        case 4747: 
        case 4748: 
        case 4749: 
        case 4750: 
        case 4751: 
        case 4752: 
        case 4753: 
        case 4754: 
        case 4755: 
        case 4756: 
        case 4757: 
        case 4758: 
        case 4759: 
        case 4760: 
        case 4761: 
        case 4762: 
        case 4763: 
        case 4764: 
        case 4765: 
        case 4766: 
        case 4767: 
        case 4768: 
        case 4769: 
        case 4770: 
        case 4771: 
        case 4772: 
        case 4773: 
        case 4774: 
        case 4775: 
        case 4776: 
        case 4777: 
        case 4778: 
        case 4779: 
        case 4780: 
        case 4781: 
        case 4782: 
        case 4783: 
        case 4784: 
        case 4785: 
        case 4786: 
        case 4787: 
        case 4788: 
        case 4789: 
        case 4790: 
        case 4791: 
        case 4792: 
        case 4793: 
        case 4794: 
        case 4795: 
        case 4796: 
        case 4797: 
        case 4798: 
        case 4799: 
        case 4800: 
        case 4801: 
        case 4802: 
        case 4803: 
        case 4804: 
        case 4805: 
        case 4806: 
        case 4807: 
        case 4808: 
        case 4809: 
        case 4810: 
        case 4811: 
        case 4812: 
        case 4813: 
        case 4814: 
        case 4815: 
        case 4816: 
        case 4817: 
        case 4818: 
        case 4819: 
        case 4820: 
        case 4821: 
        case 4822: 
        case 4823: 
        case 4824: 
        case 4825: 
        case 4826: 
        case 4827: 
        case 4828: 
        case 4829: 
        case 4830: 
        case 4831: 
        case 4832: 
        case 4833: 
        case 4834: 
        case 4835: 
        case 4836: 
        case 4837: 
        case 4838: 
        case 4839: 
        case 4840: 
        case 4841: 
        case 4842: 
        case 4843: 
        case 4844: 
        case 4845: 
        case 4846: 
        case 4847: 
        case 4848: 
        case 4849: 
        case 4850: 
        case 4851: 
        case 4852: 
        case 4853: 
        case 4854: 
        case 4855: 
        case 4856: 
        case 4857: 
        case 4858: 
        case 4859: 
        case 4860: 
        case 4861: 
        case 4862: 
        case 4863: 
        case 4864: 
        case 4865: 
        case 4866: 
        case 4867: 
        case 4868: 
        case 4869: 
        case 4870: 
        case 4871: 
        case 4872: 
        case 4873: 
        case 4874: 
        case 4875: 
        case 4876: 
        case 4877: 
        case 4878: 
        case 4879: 
        case 4880: 
        case 4881: 
        case 4882: 
        case 4883: 
        case 4884: 
        case 4885: 
        case 4886: 
        case 4887: 
        case 4888: 
        case 4889: 
        case 4890: 
        case 4891: 
        case 4892: 
        case 4893: 
        case 4894: 
        case 4895: 
        case 4896: 
        case 4897: 
        case 4898: 
        case 4899: 
        case 4900: 
        case 4901: 
        case 4902: 
        case 4903: 
        case 4904: 
        case 4905: 
        case 4906: 
        case 4907: 
        case 4908: 
        case 4909: 
        case 4910: 
        case 4911: 
        case 4912: 
        case 4913: 
        case 4914: 
        case 4915: 
        case 4916: 
        case 4917: 
        case 4918: 
        case 4919: 
        case 4920: 
        case 4921: 
        case 4922: 
        case 4923: 
        case 4924: 
        case 4925: 
        case 4926: 
        case 4927: 
        case 4928: 
        case 4929: 
        case 4930: 
        case 4931: 
        case 4932: 
        case 4933: 
        case 4934: 
        case 4935: 
        case 4936: 
        case 4937: 
        case 4938: 
        case 4939: 
        case 4940: 
        case 4941: 
        case 4942: 
        case 4943: 
        case 4944: 
        case 4945: 
        case 4946: 
        case 4947: 
        case 4948: 
        case 4949: 
        case 4950: 
        case 4951: 
        case 4952: 
        case 4953: 
        case 4954: 
        case 4955: 
        case 4956: 
        case 4957: 
        case 4958: 
        case 4959: 
        case 4960: 
        case 4961: 
        case 4962: 
        case 4963: 
        case 4964: 
        case 4965: 
        case 4966: 
        case 4967: 
        case 4968: 
        case 4969: 
        case 4970: 
        case 4971: 
        case 4972: 
        case 4973: 
        case 4974: 
        case 4975: 
        case 4976: 
        case 4977: 
        case 4978: 
        case 4979: 
        case 4980: 
        case 4981: 
        case 4982: 
        case 4983: 
        case 4984: 
        case 4985: 
        case 4986: 
        case 4987: 
        case 4988: 
        case 4989: 
        case 4990: 
        case 4991: 
        case 4992: 
        case 4993: 
        case 4994: 
        case 4995: 
        case 4996: 
        case 4997: 
        case 4998: 
        case 4999: 
        case 5000: 
        case 5001: 
        case 5002: 
        case 5003: 
        case 5004: 
        case 5005: 
        case 5006: 
        case 5007: 
        case 5008: 
        case 5009: 
        case 5010: 
        case 5011: 
        case 5012: 
        case 5013: 
        case 5014: 
        case 5015: 
        case 5016: 
        case 5017: 
        case 5018: 
        case 5019: 
        case 5020: 
        case 5021: 
        case 5022: 
        case 5023: 
        case 5024: 
        case 5025: 
        case 5026: 
        case 5027: 
        case 5028: 
        case 5029: 
        case 5030: 
        case 5031: 
        case 5032: 
        case 5033: 
        case 5034: 
        case 5035: 
        case 5036: 
        case 5037: 
        case 5038: 
        case 5039: 
        case 5040: 
        case 5041: 
        case 5042: 
        case 5043: 
        case 5044: 
        case 5045: 
        case 5046: 
        case 5047: 
        case 5048: 
        case 5049: 
        case 5050: 
        case 5051: 
        case 5052: 
        case 5053: 
        case 5054: 
        case 5055: 
        case 5056: 
        case 5057: 
        case 5058: 
        case 5059: 
        case 5060: 
        case 5061: 
        case 5062: 
        case 5063: 
        case 5064: 
        case 5065: 
        case 5066: 
        case 5067: 
        case 5068: 
        case 5069: 
        case 5070: 
        case 5071: 
        case 5072: 
        case 5073: 
        case 5074: 
        case 5075: 
        case 5076: 
        case 5077: 
        case 5078: 
        case 5079: 
        case 5080: 
        case 5081: 
        case 5082: 
        case 5083: 
        case 5084: 
        case 5085: 
        case 5086: 
        case 5087: 
        case 5088: 
        case 5089: 
        case 5090: 
        case 5091: 
        case 5092: 
        case 5093: 
        case 5094: 
        case 5095: 
        case 5096: 
        case 5097: 
        case 5098: 
        case 5099: 
        case 5100: 
        case 5101: 
        case 5102: 
        case 5103: 
        case 5104: 
        case 5105: 
        case 5106: 
        case 5107: 
        case 5108: 
        case 5109: 
        case 5110: 
        case 5111: 
        case 5112: 
        case 5113: 
        case 5114: 
        case 5115: 
        case 5116: 
        case 5117: 
        case 5118: 
        case 5119: 
        case 5120: 
        case 5121: 
        case 5122: 
        case 5123: 
        case 5124: 
        case 5125: 
        case 5126: 
        case 5127: 
        case 5128: 
        case 5129: 
        case 5130: 
        case 5131: 
        case 5132: 
        case 5133: 
        case 5134: 
        case 5135: 
        case 5136: 
        case 5137: 
        case 5138: 
        case 5139: 
        case 5140: 
        case 5141: 
        case 5142: 
        case 5143: 
        case 5144: 
        case 5145: 
        case 5146: 
        case 5147: 
        case 5148: 
        case 5149: 
        case 5150: 
        case 5151: 
        case 5152: 
        case 5153: 
        case 5154: 
        case 5155: 
        case 5156: 
        case 5157: 
        case 5158: 
        case 5159: 
        case 5160: 
        case 5161: 
        case 5162: 
        case 5163: 
        case 5164: 
        case 5165: 
        case 5166: 
        case 5167: 
        case 5168: 
        case 5169: 
        case 5170: 
        case 5171: 
        case 5172: 
        case 5173: 
        case 5174: 
        case 5175: 
        case 5176: 
        case 5177: 
        case 5178: 
        case 5179: 
        case 5180: 
        case 5181: 
        case 5182: 
        case 5183: 
        case 5184: 
        case 5185: 
        case 5186: 
        case 5187: 
        case 5188: 
        case 5189: 
        case 5190: 
        case 5191: 
        case 5192: 
        case 5193: 
        case 5194: 
        case 5195: 
        case 5196: 
        case 5197: 
        case 5198: 
        case 5199: 
        case 5200: 
        case 5201: 
        case 5202: 
        case 5203: 
        case 5204: 
        case 5205: 
        case 5206: 
        case 5207: 
        case 5208: 
        case 5209: 
        case 5210: 
        case 5211: 
        case 5212: 
        case 5213: 
        case 5214: 
        case 5215: 
        case 5216: 
        case 5217: 
        case 5218: 
        case 5219: 
        case 5220: 
        case 5221: 
        case 5222: 
        case 5223: 
        case 5224: 
        case 5225: 
        case 5226: 
        case 5227: 
        case 5228: 
        case 5229: 
        case 5230: 
        case 5231: 
        case 5232: 
        case 5233: 
        case 5234: 
        case 5235: 
        case 5236: 
        case 5237: 
        case 5238: 
        case 5239: 
        case 5240: 
        case 5241: 
        case 5242: 
        case 5243: 
        case 5244: 
        case 5245: 
        case 5246: 
        case 5247: 
        case 5248: 
        case 5249: 
        case 5250: 
        case 5251: 
        case 5252: 
        case 5253: 
        case 5254: 
        case 5255: 
        case 5256: 
        case 5257: 
        case 5258: 
        case 5259: 
        case 5260: 
        case 5261: 
        case 5262: 
        case 5263: 
        case 5264: 
        case 5265: 
        case 5266: 
        case 5267: 
        case 5268: 
        case 5269: 
        case 5270: 
        case 5271: 
        case 5272: 
        case 5273: 
        case 5274: 
        case 5275: 
        case 5276: 
        case 5277: 
        case 5278: 
        case 5279: 
        case 5280: 
        case 5281: 
        case 5282: 
        case 5283: 
        case 5284: 
        case 5285: 
        case 5286: 
        case 5287: 
        case 5288: 
        case 5289: 
        case 5290: 
        case 5291: 
        case 5292: 
        case 5293: 
        case 5294: 
        case 5295: 
        case 5296: 
        case 5297: 
        case 5298: 
        case 5299: 
        case 5300: 
        case 5301: 
        case 5302: 
        case 5303: 
        case 5304: 
        case 5305: 
        case 5306: 
        case 5307: 
        case 5308: 
        case 5309: 
        case 5310: 
        case 5311: 
        case 5312: 
        case 5313: 
        case 5314: 
        case 5315: 
        case 5316: 
        case 5317: 
        case 5318: 
        case 5319: 
        case 5320: 
        case 5321: 
        case 5322: 
        case 5323: 
        case 5324: 
        case 5325: 
        case 5326: 
        case 5327: 
        case 5328: 
        case 5329: 
        case 5330: 
        case 5331: 
        case 5332: 
        case 5333: 
        case 5334: 
        case 5335: 
        case 5336: 
        case 5337: 
        case 5338: 
        case 5339: 
        case 5340: 
        case 5341: 
        case 5342: 
        case 5343: 
        case 5344: 
        case 5345: 
        case 5346: 
        case 5347: 
        case 5348: 
        case 5349: 
        case 5350: 
        case 5351: 
        case 5352: 
        case 5353: 
        case 5354: 
        case 5355: 
        case 5356: 
        case 5357: 
        case 5358: 
        case 5359: 
        case 5360: 
        case 5361: 
        case 5362: 
        case 5363: 
        case 5364: 
        case 5365: 
        case 5366: 
        case 5367: 
        case 5368: 
        case 5369: 
        case 5370: 
        case 5371: 
        case 5372: 
        case 5373: 
        case 5374: 
        case 5375: 
        case 5376: 
        case 5377: 
        case 5378: 
        case 5379: 
        case 5380: 
        case 5381: 
        case 5382: 
        case 5383: 
        case 5384: 
        case 5385: 
        case 5386: 
        case 5387: 
        case 5388: 
        case 5389: 
        case 5390: 
        case 5391: 
        case 5392: 
        case 5393: 
        case 5394: 
        case 5395: 
        case 5396: 
        case 5397: 
        case 5398: 
        case 5399: 
        case 5400: 
        case 5401: 
        case 5402: 
        case 5403: 
        case 5404: 
        case 5405: 
        case 5406: 
        case 5407: 
        case 5408: 
        case 5409: 
        case 5410: 
        case 5411: 
        case 5412: 
        case 5413: 
        case 5414: 
        case 5415: 
        case 5416: 
        case 5417: 
        case 5418: 
        case 5419: 
        case 5420: 
        case 5421: 
        case 5422: 
        case 5423: 
        case 5424: 
        case 5425: 
        case 5426: 
        case 5427: 
        case 5428: 
        case 5429: 
        case 5430: 
        case 5431: 
        case 5432: 
        case 5433: 
        case 5434: 
        case 5435: 
        case 5436: 
        case 5437: 
        case 5438: 
        case 5439: 
        case 5440: 
        case 5441: 
        case 5442: 
        case 5443: 
        case 5444: 
        case 5445: 
        case 5446: 
        case 5447: 
        case 5448: 
        case 5449: 
        case 5450: 
        case 5451: 
        case 5452: 
        case 5453: 
        case 5454: 
        case 5455: 
        case 5456: 
        case 5457: 
        case 5458: 
        case 5459: 
        case 5460: 
        case 5461: 
        case 5462: 
        case 5463: 
        case 5464: 
        case 5465: 
        case 5466: 
        case 5467: 
        case 5468: 
        case 5469: 
        case 5470: 
        case 5471: 
        case 5472: 
        case 5473: 
        case 5474: 
        case 5475: 
        case 5476: 
        case 5477: 
        case 5478: 
        case 5479: 
        case 5480: 
        case 5481: 
        case 5482: 
        case 5483: 
        case 5484: 
        case 5485: 
        case 5486: 
        case 5487: 
        case 5488: 
        case 5489: 
        case 5490: 
        case 5491: 
        case 5492: 
        case 5493: 
        case 5494: 
        case 5495: 
        case 5496: 
        case 5497: 
        case 5498: 
        case 5499: 
        case 5500: 
        case 5501: 
        case 5502: 
        case 5503: 
        case 5504: 
        case 5505: 
        case 5506: 
        case 5507: 
        case 5508: 
        case 5509: 
        case 5510: 
        case 5511: 
        case 5512: 
        case 5513: 
        case 5514: 
        case 5515: 
        case 5516: 
        case 5517: 
        case 5518: 
        case 5519: 
        case 5520: 
        case 5521: 
        case 5522: 
        case 5523: 
        case 5524: 
        case 5525: 
        case 5526: 
        case 5527: 
        case 5528: 
        case 5529: 
        case 5530: 
        case 5531: 
        case 5532: 
        case 5533: 
        case 5534: 
        case 5535: 
        case 5536: 
        case 5537: 
        case 5538: 
        case 5539: 
        case 5540: 
        case 5541: 
        case 5542: 
        case 5543: 
        case 5544: 
        case 5545: 
        case 5546: 
        case 5547: 
        case 5548: 
        case 5549: 
        case 5550: 
        case 5551: 
        case 5552: 
        case 5553: 
        case 5554: 
        case 5555: 
        case 5556: 
        case 5557: 
        case 5558: 
        case 5559: 
        case 5560: 
        case 5561: 
        case 5562: 
        case 5563: 
        case 5564: 
        case 5565: 
        case 5566: 
        case 5567: 
        case 5568: 
        case 5569: 
        case 5570: 
        case 5571: 
        case 5572: 
        case 5573: 
        case 5574: 
        case 5575: 
        case 5576: 
        case 5577: 
        case 5578: 
        case 5579: 
        case 5580: 
        case 5581: 
        case 5582: 
        case 5583: 
        case 5584: 
        case 5585: 
        case 5586: 
        case 5587: 
        case 5588: 
        case 5589: 
        case 5590: 
        case 5591: 
        case 5592: 
        case 5593: 
        case 5594: 
        case 5595: 
        case 5596: 
        case 5597: 
        case 5598: 
        case 5599: 
        case 5600: 
        case 5601: 
        case 5602: 
        case 5603: 
        case 5604: 
        case 5605: 
        case 5606: 
        case 5607: 
        case 5608: 
        case 5609: 
        case 5610: 
        case 5611: 
        case 5612: 
        case 5613: 
        case 5614: 
        case 5615: 
        case 5616: 
        case 5617: 
        case 5618: 
        case 5619: 
        case 5620: 
        case 5621: 
        case 5622: 
        case 5623: 
        case 5624: 
        case 5625: 
        case 5626: 
        case 5627: 
        case 5628: 
        case 5629: 
        case 5630: 
        case 5631: 
        case 5632: 
        case 5633: 
        case 5634: 
        case 5635: 
        case 5636: 
        case 5637: 
        case 5638: 
        case 5639: 
        case 5640: 
        case 5641: 
        case 5642: 
        case 5643: 
        case 5644: 
        case 5645: 
        case 5646: 
        case 5647: 
        case 5648: 
        case 5649: 
        case 5650: 
        case 5651: 
        case 5652: 
        case 5653: 
        case 5654: 
        case 5655: 
        case 5656: 
        case 5657: 
        case 5658: 
        case 5659: 
        case 5660: 
        case 5661: 
        case 5662: 
        case 5663: 
        case 5664: 
        case 5665: 
        case 5666: 
        case 5667: 
        case 5668: 
        case 5669: 
        case 5670: 
        case 5671: 
        case 5672: 
        case 5673: 
        case 5674: 
        case 5675: 
        case 5676: 
        case 5677: 
        case 5678: 
        case 5679: 
        case 5680: 
        case 5681: 
        case 5682: 
        case 5683: 
        case 5684: 
        case 5685: 
        case 5686: 
        case 5687: 
        case 5688: 
        case 5689: 
        case 5690: 
        case 5691: 
        case 5692: 
        case 5693: 
        case 5694: 
        case 5695: 
        case 5696: 
        case 5697: 
        case 5698: 
        case 5699: 
        case 5700: 
        case 5701: 
        case 5702: 
        case 5703: 
        case 5704: 
        case 5705: 
        case 5706: 
        case 5707: 
        case 5708: 
        case 5709: 
        case 5710: 
        case 5711: 
        case 5712: 
        case 5713: 
        case 5714: 
        case 5715: 
        case 5716: 
        case 5717: 
        case 5718: 
        case 5719: 
        case 5720: 
        case 5721: 
        case 5722: 
        case 5723: 
        case 5724: 
        case 5725: 
        case 5726: 
        case 5727: 
        case 5728: 
        case 5729: 
        case 5730: 
        case 5731: 
        case 5732: 
        case 5733: 
        case 5734: 
        case 5735: 
        case 5736: 
        case 5737: 
        case 5738: 
        case 5739: 
        case 5740: 
        case 5741: 
        case 5742: 
        case 5743: 
        case 5744: 
        case 5745: 
        case 5746: 
        case 5747: 
        case 5748: 
        case 5749: 
        case 5750: 
        case 5751: 
        case 5752: 
        case 5753: 
        case 5754: 
        case 5755: 
        case 5756: 
        case 5757: 
        case 5758: 
        case 5759: 
        case 5760: 
        case 5761: 
        case 5762: 
        case 5763: 
        case 5764: 
        case 5765: 
        case 5766: 
        case 5767: 
        case 5768: 
        case 5769: 
        case 5770: 
        case 5771: 
        case 5772: 
        case 5773: 
        case 5774: 
        case 5775: 
        case 5776: 
        case 5777: 
        case 5778: 
        case 5779: 
        case 5780: 
        case 5781: 
        case 5782: 
        case 5783: 
        case 5784: 
        case 5785: 
        case 5786: 
        case 5787: 
        case 5788: 
        case 5789: 
        case 5790: 
        case 5791: 
        case 5792: 
        case 5793: 
        case 5794: 
        case 5795: 
        case 5796: 
        case 5797: 
        case 5798: 
        case 5799: 
        case 5800: 
        case 5801: 
        case 5802: 
        case 5803: 
        case 5804: 
        case 5805: 
        case 5806: 
        case 5807: 
        case 5808: 
        case 5809: 
        case 5810: 
        case 5811: 
        case 5812: 
        case 5813: 
        case 5814: 
        case 5815: 
        case 5816: 
        case 5817: 
        case 5818: 
        case 5819: 
        case 5820: 
        case 5821: 
        case 5822: 
        case 5823: 
        case 5824: 
        case 5825: 
        case 5826: 
        case 5827: 
        case 5828: 
        case 5829: 
        case 5830: 
        case 5831: 
        case 5832: 
        case 5833: 
        case 5834: 
        case 5835: 
        case 5836: 
        case 5837: 
        case 5838: 
        case 5839: 
        case 5840: 
        case 5841: 
        case 5842: 
        case 5843: 
        case 5844: 
        case 5845: 
        case 5846: 
        case 5847: 
        case 5848: 
        case 5849: 
        case 5850: 
        case 5851: 
        case 5852: 
        case 5853: 
        case 5854: 
        case 5855: 
        case 5856: 
        case 5857: 
        case 5858: 
        case 5859: 
        case 5860: 
        case 5861: 
        case 5862: 
        case 5863: 
        case 5864: 
        case 5865: 
        case 5866: 
        case 5867: 
        case 5868: 
        case 5869: 
        case 5870: 
        case 5871: 
        case 5872: 
        case 5873: 
        case 5874: 
        case 5875: 
        case 5876: 
        case 5877: 
        case 5878: 
        case 5879: 
        case 5880: 
        case 5881: 
        case 5882: 
        case 5883: 
        case 5884: 
        case 5885: 
        case 5886: 
        case 5887: 
        case 5888: 
        case 5889: 
        case 5890: 
        case 5891: 
        case 5892: 
        case 5893: 
        case 5894: 
        case 5895: 
        case 5896: 
        case 5897: 
        case 5898: 
        case 5899: 
        case 5900: 
        case 5901: 
        case 5902: 
        case 5903: 
        case 5904: 
        case 5905: 
        case 5906: 
        case 5907: 
        case 5908: 
        case 5909: 
        case 5910: 
        case 5911: 
        case 5912: 
        case 5913: 
        case 5914: 
        case 5915: 
        case 5916: 
        case 5917: 
        case 5918: 
        case 5919: 
        case 5920: 
        case 5921: 
        case 5922: 
        case 5923: 
        case 5924: 
        case 5925: 
        case 5926: 
        case 5927: 
        case 5928: 
        case 5929: 
        case 5930: 
        case 5931: 
        case 5932: 
        case 5933: 
        case 5934: 
        case 5935: 
        case 5936: 
        case 5937: 
        case 5938: 
        case 5939: 
        case 5940: 
        case 5941: 
        case 5942: 
        case 5943: 
        case 5944: 
        case 5945: 
        case 5946: 
        case 5947: 
        case 5948: 
        case 5949: 
        case 5950: 
        case 5951: 
        case 5952: 
        case 5953: 
        case 5954: 
        case 5955: 
        case 5956: 
        case 5957: 
        case 5958: 
        case 5959: 
        case 5960: 
        case 5961: 
        case 5962: 
        case 5963: 
        case 5964: 
        case 5965: 
        case 5966: 
        case 5967: 
        case 5968: 
        case 5969: 
        case 5970: 
        case 5971: 
        case 5972: 
        case 5973: 
        case 5974: 
        case 5975: 
        case 5976: 
        case 5977: 
        case 5978: 
        case 5979: 
        case 5980: 
        case 5981: 
        case 5982: 
        case 5983: 
        case 5984: 
        case 5985: 
        case 5986: 
        case 5987: 
        case 5988: 
        case 5989: 
        case 5990: 
        case 5991: 
        case 5992: 
        case 5993: 
        case 5994: 
        case 5995: 
        case 5996: 
        case 5997: 
        case 5998: 
        case 5999: 
        case 6000: 
        case 6001: 
        case 6002: 
        case 6003: 
        case 6004: 
        case 6005: 
        case 6006: 
        case 6007: 
        case 6008: 
        case 6009: 
        case 6010: 
        case 6011: 
        case 6012: 
        case 6013: 
        case 6014: 
        case 6015: 
        case 6016: 
        case 6017: 
        case 6018: 
        case 6019: 
        case 6020: 
        case 6021: 
        case 6022: 
        case 6023: 
        case 6024: 
        case 6025: 
        case 6026: 
        case 6027: 
        case 6028: 
        case 6029: 
        case 6030: 
        case 6031: 
        case 6032: 
        case 6033: 
        case 6034: 
        case 6035: 
        case 6036: 
        case 6037: 
        case 6038: 
        case 6039: 
        case 6040: 
        case 6041: 
        case 6042: 
        case 6043: 
        case 6044: 
        case 6045: 
        case 6046: 
        case 6047: 
        case 6048: 
        case 6049: 
        case 6050: 
        case 6051: 
        case 6052: 
        case 6053: 
        case 6054: 
        case 6055: 
        case 6056: 
        case 6057: 
        case 6058: 
        case 6059: 
        case 6060: 
        case 6061: 
        case 6062: 
        case 6063: 
        case 6064: 
        case 6065: 
        case 6066: 
        case 6067: 
        case 6068: 
        case 6069: 
        case 6070: 
        case 6071: 
        case 6072: 
        case 6073: 
        case 6074: 
        case 6075: 
        case 6076: 
        case 6077: 
        case 6078: 
        case 6079: 
        case 6080: 
        case 6081: 
        case 6082: 
        case 6083: 
        case 6084: 
        case 6085: 
        case 6086: 
        case 6087: 
        case 6088: 
        case 6089: 
        case 6090: 
        case 6091: 
        case 6092: 
        case 6093: 
        case 6094: 
        case 6095: 
        case 6096: 
        case 6097: 
        case 6098: 
        case 6099: 
        case 6100: 
        case 6101: 
        case 6102: 
        case 6103: 
        case 6104: 
        case 6105: 
        case 6106: 
        case 6107: 
        case 6108: 
        case 6109: 
        case 6110: 
        case 6111: 
        case 6112: 
        case 6113: 
        case 6114: 
        case 6115: 
        case 6116: 
        case 6117: 
        case 6118: 
        case 6119: 
        case 6120: 
        case 6121: 
        case 6122: 
        case 6123: 
        case 6124: 
        case 6125: 
        case 6126: 
        case 6127: 
        case 6128: 
        case 6129: 
        case 6130: 
        case 6131: 
        case 6132: 
        case 6133: 
        case 6134: 
        case 6135: 
        case 6136: 
        case 6137: 
        case 6138: 
        case 6139: 
        case 6140: 
        case 6141: 
        case 6142: 
        case 6143: 
        case 6144: 
        case 6145: 
        case 6146: 
        case 6147: 
        case 6148: 
        case 6149: 
        case 6150: 
        case 6151: 
        case 6152: 
        case 6153: 
        case 6154: 
        case 6155: 
        case 6156: 
        case 6157: 
        case 6158: 
        case 6159: 
        case 6160: 
        case 6161: 
        case 6162: 
        case 6163: 
        case 6164: 
        case 6165: 
        case 6166: 
        case 6167: 
        case 6168: 
        case 6169: 
        case 6170: 
        case 6171: 
        case 6172: 
        case 6173: 
        case 6174: 
        case 6175: 
        case 6176: 
        case 6177: 
        case 6178: 
        case 6179: 
        case 6180: 
        case 6181: 
        case 6182: 
        case 6183: 
        case 6184: 
        case 6185: 
        case 6186: 
        case 6187: 
        case 6188: 
        case 6189: 
        case 6190: 
        case 6191: 
        case 6192: 
        case 6193: 
        case 6194: 
        case 6195: 
        case 6196: 
        case 6197: 
        case 6198: 
        case 6199: 
        case 6200: 
        case 6201: 
        case 6202: 
        case 6203: 
        case 6204: 
        case 6205: 
        case 6206: 
        case 6207: 
        case 6208: 
        case 6209: 
        case 6210: 
        case 6211: 
        case 6212: 
        case 6213: 
        case 6214: 
        case 6215: 
        case 6216: 
        case 6217: 
        case 6218: 
        case 6219: 
        case 6220: 
        case 6221: 
        case 6222: 
        case 6223: 
        case 6224: 
        case 6225: 
        case 6226: 
        case 6227: 
        case 6228: 
        case 6229: 
        case 6230: 
        case 6231: 
        case 6232: 
        case 6233: 
        case 6234: 
        case 6235: 
        case 6236: 
        case 6237: 
        case 6238: 
        case 6239: 
        case 6240: 
        case 6241: 
        case 6242: 
        case 6243: 
        case 6244: 
        case 6245: 
        case 6246: 
        case 6247: 
        case 6248: 
        case 6249: 
        case 6250: 
        case 6251: 
        case 6252: 
        case 6253: 
        case 6254: 
        case 6255: 
        case 6256: 
        case 6257: 
        case 6258: 
        case 6259: 
        case 6260: 
        case 6261: 
        case 6262: 
        case 6263: 
        case 6264: 
        case 6265: 
        case 6266: 
        case 6267: 
        case 6268: 
        case 6269: 
        case 6270: 
        case 6271: 
            watch_write<struct task_struct, FIELD_latency_record>::on(entry_, struct_addr_, val_);
            break;
        case 6272: 
        case 6273: 
        case 6274: 
        case 6275: 
        case 6276: 
        case 6277: 
        case 6278: 
        case 6279: 
            watch_write<struct task_struct, FIELD_timer_slack_ns>::on(entry_, struct_addr_, val_);
            break;
        case 6280: 
        case 6281: 
        case 6282: 
        case 6283: 
        case 6284: 
        case 6285: 
        case 6286: 
        case 6287: 
            watch_write<struct task_struct, FIELD_default_timer_slack_ns>::on(entry_, struct_addr_, val_);
            break;
        case 6288: 
        case 6289: 
        case 6290: 
        case 6291: 
        case 6292: 
        case 6293: 
        case 6294: 
        case 6295: 
            watch_write<struct task_struct, FIELD_scm_work_list>::on(entry_, struct_addr_, val_);
            break;
        case 6296: 
        case 6297: 
        case 6298: 
        case 6299: 
            watch_write<struct task_struct, FIELD_curr_ret_stack>::on(entry_, struct_addr_, val_);
            break;
        case 6304: 
        case 6305: 
        case 6306: 
        case 6307: 
        case 6308: 
        case 6309: 
        case 6310: 
        case 6311: 
            watch_write<struct task_struct, FIELD_ret_stack>::on(entry_, struct_addr_, val_);
            break;
        case 6312: 
        case 6313: 
        case 6314: 
        case 6315: 
        case 6316: 
        case 6317: 
        case 6318: 
        case 6319: 
            watch_write<struct task_struct, FIELD_ftrace_timestamp>::on(entry_, struct_addr_, val_);
            break;
        case 6320: 
        case 6321: 
        case 6322: 
        case 6323: 
            watch_write<struct task_struct, FIELD_trace_overrun>::on(entry_, struct_addr_, val_);
            break;
        case 6324: 
        case 6325: 
        case 6326: 
        case 6327: 
            watch_write<struct task_struct, FIELD_tracing_graph_pause>::on(entry_, struct_addr_, val_);
            break;
        case 6328: 
        case 6329: 
        case 6330: 
        case 6331: 
        case 6332: 
        case 6333: 
        case 6334: 
        case 6335: 
            watch_write<struct task_struct, FIELD_trace>::on(entry_, struct_addr_, val_);
            break;
        case 6336: 
        case 6337: 
        case 6338: 
        case 6339: 
        case 6340: 
        case 6341: 
        case 6342: 
        case 6343: 
            watch_write<struct task_struct, FIELD_trace_recursion>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct load_weight> {
    enum { TYPE_SIZE = sizeof(struct load_weight) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct load_weight *struct_addr_(((struct load_weight *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct load_weight, FIELD_weight>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct load_weight, FIELD_inv_weight>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct load_weight *struct_addr_(((struct load_weight *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct load_weight, FIELD_weight>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct load_weight, FIELD_inv_weight>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct mii_bus> {
    enum { TYPE_SIZE = sizeof(struct mii_bus) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct mii_bus *struct_addr_(((struct mii_bus *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct mii_bus, FIELD_name>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
            watch_read<struct mii_bus, FIELD_id>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct mii_bus, FIELD_priv>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct mii_bus, FIELD_read>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct mii_bus, FIELD_write>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct mii_bus, FIELD_reset>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct mii_bus, FIELD_mdio_lock>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_read<struct mii_bus, FIELD_parent>::on(entry_, struct_addr_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
            watch_read<struct mii_bus, FIELD_state>::on(entry_, struct_addr_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
        case 528: 
        case 529: 
        case 530: 
        case 531: 
        case 532: 
        case 533: 
        case 534: 
        case 535: 
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
        case 544: 
        case 545: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
        case 552: 
        case 553: 
        case 554: 
        case 555: 
        case 556: 
        case 557: 
        case 558: 
        case 559: 
        case 560: 
        case 561: 
        case 562: 
        case 563: 
        case 564: 
        case 565: 
        case 566: 
        case 567: 
        case 568: 
        case 569: 
        case 570: 
        case 571: 
        case 572: 
        case 573: 
        case 574: 
        case 575: 
        case 576: 
        case 577: 
        case 578: 
        case 579: 
        case 580: 
        case 581: 
        case 582: 
        case 583: 
        case 584: 
        case 585: 
        case 586: 
        case 587: 
        case 588: 
        case 589: 
        case 590: 
        case 591: 
        case 592: 
        case 593: 
        case 594: 
        case 595: 
        case 596: 
        case 597: 
        case 598: 
        case 599: 
        case 600: 
        case 601: 
        case 602: 
        case 603: 
        case 604: 
        case 605: 
        case 606: 
        case 607: 
        case 608: 
        case 609: 
        case 610: 
        case 611: 
        case 612: 
        case 613: 
        case 614: 
        case 615: 
        case 616: 
        case 617: 
        case 618: 
        case 619: 
        case 620: 
        case 621: 
        case 622: 
        case 623: 
            watch_read<struct mii_bus, FIELD_dev>::on(entry_, struct_addr_);
            break;
        case 624: 
        case 625: 
        case 626: 
        case 627: 
        case 628: 
        case 629: 
        case 630: 
        case 631: 
        case 632: 
        case 633: 
        case 634: 
        case 635: 
        case 636: 
        case 637: 
        case 638: 
        case 639: 
        case 640: 
        case 641: 
        case 642: 
        case 643: 
        case 644: 
        case 645: 
        case 646: 
        case 647: 
        case 648: 
        case 649: 
        case 650: 
        case 651: 
        case 652: 
        case 653: 
        case 654: 
        case 655: 
        case 656: 
        case 657: 
        case 658: 
        case 659: 
        case 660: 
        case 661: 
        case 662: 
        case 663: 
        case 664: 
        case 665: 
        case 666: 
        case 667: 
        case 668: 
        case 669: 
        case 670: 
        case 671: 
        case 672: 
        case 673: 
        case 674: 
        case 675: 
        case 676: 
        case 677: 
        case 678: 
        case 679: 
        case 680: 
        case 681: 
        case 682: 
        case 683: 
        case 684: 
        case 685: 
        case 686: 
        case 687: 
        case 688: 
        case 689: 
        case 690: 
        case 691: 
        case 692: 
        case 693: 
        case 694: 
        case 695: 
        case 696: 
        case 697: 
        case 698: 
        case 699: 
        case 700: 
        case 701: 
        case 702: 
        case 703: 
        case 704: 
        case 705: 
        case 706: 
        case 707: 
        case 708: 
        case 709: 
        case 710: 
        case 711: 
        case 712: 
        case 713: 
        case 714: 
        case 715: 
        case 716: 
        case 717: 
        case 718: 
        case 719: 
        case 720: 
        case 721: 
        case 722: 
        case 723: 
        case 724: 
        case 725: 
        case 726: 
        case 727: 
        case 728: 
        case 729: 
        case 730: 
        case 731: 
        case 732: 
        case 733: 
        case 734: 
        case 735: 
        case 736: 
        case 737: 
        case 738: 
        case 739: 
        case 740: 
        case 741: 
        case 742: 
        case 743: 
        case 744: 
        case 745: 
        case 746: 
        case 747: 
        case 748: 
        case 749: 
        case 750: 
        case 751: 
        case 752: 
        case 753: 
        case 754: 
        case 755: 
        case 756: 
        case 757: 
        case 758: 
        case 759: 
        case 760: 
        case 761: 
        case 762: 
        case 763: 
        case 764: 
        case 765: 
        case 766: 
        case 767: 
        case 768: 
        case 769: 
        case 770: 
        case 771: 
        case 772: 
        case 773: 
        case 774: 
        case 775: 
        case 776: 
        case 777: 
        case 778: 
        case 779: 
        case 780: 
        case 781: 
        case 782: 
        case 783: 
        case 784: 
        case 785: 
        case 786: 
        case 787: 
        case 788: 
        case 789: 
        case 790: 
        case 791: 
        case 792: 
        case 793: 
        case 794: 
        case 795: 
        case 796: 
        case 797: 
        case 798: 
        case 799: 
        case 800: 
        case 801: 
        case 802: 
        case 803: 
        case 804: 
        case 805: 
        case 806: 
        case 807: 
        case 808: 
        case 809: 
        case 810: 
        case 811: 
        case 812: 
        case 813: 
        case 814: 
        case 815: 
        case 816: 
        case 817: 
        case 818: 
        case 819: 
        case 820: 
        case 821: 
        case 822: 
        case 823: 
        case 824: 
        case 825: 
        case 826: 
        case 827: 
        case 828: 
        case 829: 
        case 830: 
        case 831: 
        case 832: 
        case 833: 
        case 834: 
        case 835: 
        case 836: 
        case 837: 
        case 838: 
        case 839: 
        case 840: 
        case 841: 
        case 842: 
        case 843: 
        case 844: 
        case 845: 
        case 846: 
        case 847: 
        case 848: 
        case 849: 
        case 850: 
        case 851: 
        case 852: 
        case 853: 
        case 854: 
        case 855: 
        case 856: 
        case 857: 
        case 858: 
        case 859: 
        case 860: 
        case 861: 
        case 862: 
        case 863: 
        case 864: 
        case 865: 
        case 866: 
        case 867: 
        case 868: 
        case 869: 
        case 870: 
        case 871: 
        case 872: 
        case 873: 
        case 874: 
        case 875: 
        case 876: 
        case 877: 
        case 878: 
        case 879: 
            watch_read<struct mii_bus, FIELD_phy_map>::on(entry_, struct_addr_);
            break;
        case 880: 
        case 881: 
        case 882: 
        case 883: 
            watch_read<struct mii_bus, FIELD_phy_mask>::on(entry_, struct_addr_);
            break;
        case 888: 
        case 889: 
        case 890: 
        case 891: 
        case 892: 
        case 893: 
        case 894: 
        case 895: 
            watch_read<struct mii_bus, FIELD_irq>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct mii_bus *struct_addr_(((struct mii_bus *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct mii_bus, FIELD_name>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
            watch_write<struct mii_bus, FIELD_id>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct mii_bus, FIELD_priv>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct mii_bus, FIELD_read>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct mii_bus, FIELD_write>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct mii_bus, FIELD_reset>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct mii_bus, FIELD_mdio_lock>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_write<struct mii_bus, FIELD_parent>::on(entry_, struct_addr_, val_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
            watch_write<struct mii_bus, FIELD_state>::on(entry_, struct_addr_, val_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
        case 528: 
        case 529: 
        case 530: 
        case 531: 
        case 532: 
        case 533: 
        case 534: 
        case 535: 
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
        case 544: 
        case 545: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
        case 552: 
        case 553: 
        case 554: 
        case 555: 
        case 556: 
        case 557: 
        case 558: 
        case 559: 
        case 560: 
        case 561: 
        case 562: 
        case 563: 
        case 564: 
        case 565: 
        case 566: 
        case 567: 
        case 568: 
        case 569: 
        case 570: 
        case 571: 
        case 572: 
        case 573: 
        case 574: 
        case 575: 
        case 576: 
        case 577: 
        case 578: 
        case 579: 
        case 580: 
        case 581: 
        case 582: 
        case 583: 
        case 584: 
        case 585: 
        case 586: 
        case 587: 
        case 588: 
        case 589: 
        case 590: 
        case 591: 
        case 592: 
        case 593: 
        case 594: 
        case 595: 
        case 596: 
        case 597: 
        case 598: 
        case 599: 
        case 600: 
        case 601: 
        case 602: 
        case 603: 
        case 604: 
        case 605: 
        case 606: 
        case 607: 
        case 608: 
        case 609: 
        case 610: 
        case 611: 
        case 612: 
        case 613: 
        case 614: 
        case 615: 
        case 616: 
        case 617: 
        case 618: 
        case 619: 
        case 620: 
        case 621: 
        case 622: 
        case 623: 
            watch_write<struct mii_bus, FIELD_dev>::on(entry_, struct_addr_, val_);
            break;
        case 624: 
        case 625: 
        case 626: 
        case 627: 
        case 628: 
        case 629: 
        case 630: 
        case 631: 
        case 632: 
        case 633: 
        case 634: 
        case 635: 
        case 636: 
        case 637: 
        case 638: 
        case 639: 
        case 640: 
        case 641: 
        case 642: 
        case 643: 
        case 644: 
        case 645: 
        case 646: 
        case 647: 
        case 648: 
        case 649: 
        case 650: 
        case 651: 
        case 652: 
        case 653: 
        case 654: 
        case 655: 
        case 656: 
        case 657: 
        case 658: 
        case 659: 
        case 660: 
        case 661: 
        case 662: 
        case 663: 
        case 664: 
        case 665: 
        case 666: 
        case 667: 
        case 668: 
        case 669: 
        case 670: 
        case 671: 
        case 672: 
        case 673: 
        case 674: 
        case 675: 
        case 676: 
        case 677: 
        case 678: 
        case 679: 
        case 680: 
        case 681: 
        case 682: 
        case 683: 
        case 684: 
        case 685: 
        case 686: 
        case 687: 
        case 688: 
        case 689: 
        case 690: 
        case 691: 
        case 692: 
        case 693: 
        case 694: 
        case 695: 
        case 696: 
        case 697: 
        case 698: 
        case 699: 
        case 700: 
        case 701: 
        case 702: 
        case 703: 
        case 704: 
        case 705: 
        case 706: 
        case 707: 
        case 708: 
        case 709: 
        case 710: 
        case 711: 
        case 712: 
        case 713: 
        case 714: 
        case 715: 
        case 716: 
        case 717: 
        case 718: 
        case 719: 
        case 720: 
        case 721: 
        case 722: 
        case 723: 
        case 724: 
        case 725: 
        case 726: 
        case 727: 
        case 728: 
        case 729: 
        case 730: 
        case 731: 
        case 732: 
        case 733: 
        case 734: 
        case 735: 
        case 736: 
        case 737: 
        case 738: 
        case 739: 
        case 740: 
        case 741: 
        case 742: 
        case 743: 
        case 744: 
        case 745: 
        case 746: 
        case 747: 
        case 748: 
        case 749: 
        case 750: 
        case 751: 
        case 752: 
        case 753: 
        case 754: 
        case 755: 
        case 756: 
        case 757: 
        case 758: 
        case 759: 
        case 760: 
        case 761: 
        case 762: 
        case 763: 
        case 764: 
        case 765: 
        case 766: 
        case 767: 
        case 768: 
        case 769: 
        case 770: 
        case 771: 
        case 772: 
        case 773: 
        case 774: 
        case 775: 
        case 776: 
        case 777: 
        case 778: 
        case 779: 
        case 780: 
        case 781: 
        case 782: 
        case 783: 
        case 784: 
        case 785: 
        case 786: 
        case 787: 
        case 788: 
        case 789: 
        case 790: 
        case 791: 
        case 792: 
        case 793: 
        case 794: 
        case 795: 
        case 796: 
        case 797: 
        case 798: 
        case 799: 
        case 800: 
        case 801: 
        case 802: 
        case 803: 
        case 804: 
        case 805: 
        case 806: 
        case 807: 
        case 808: 
        case 809: 
        case 810: 
        case 811: 
        case 812: 
        case 813: 
        case 814: 
        case 815: 
        case 816: 
        case 817: 
        case 818: 
        case 819: 
        case 820: 
        case 821: 
        case 822: 
        case 823: 
        case 824: 
        case 825: 
        case 826: 
        case 827: 
        case 828: 
        case 829: 
        case 830: 
        case 831: 
        case 832: 
        case 833: 
        case 834: 
        case 835: 
        case 836: 
        case 837: 
        case 838: 
        case 839: 
        case 840: 
        case 841: 
        case 842: 
        case 843: 
        case 844: 
        case 845: 
        case 846: 
        case 847: 
        case 848: 
        case 849: 
        case 850: 
        case 851: 
        case 852: 
        case 853: 
        case 854: 
        case 855: 
        case 856: 
        case 857: 
        case 858: 
        case 859: 
        case 860: 
        case 861: 
        case 862: 
        case 863: 
        case 864: 
        case 865: 
        case 866: 
        case 867: 
        case 868: 
        case 869: 
        case 870: 
        case 871: 
        case 872: 
        case 873: 
        case 874: 
        case 875: 
        case 876: 
        case 877: 
        case 878: 
        case 879: 
            watch_write<struct mii_bus, FIELD_phy_map>::on(entry_, struct_addr_, val_);
            break;
        case 880: 
        case 881: 
        case 882: 
        case 883: 
            watch_write<struct mii_bus, FIELD_phy_mask>::on(entry_, struct_addr_, val_);
            break;
        case 888: 
        case 889: 
        case 890: 
        case 891: 
        case 892: 
        case 893: 
        case 894: 
        case 895: 
            watch_write<struct mii_bus, FIELD_irq>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct sched_rt_entity> {
    enum { TYPE_SIZE = sizeof(struct sched_rt_entity) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct sched_rt_entity *struct_addr_(((struct sched_rt_entity *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct sched_rt_entity, FIELD_run_list>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct sched_rt_entity, FIELD_timeout>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
            watch_read<struct sched_rt_entity, FIELD_time_slice>::on(entry_, struct_addr_);
            break;
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct sched_rt_entity, FIELD_nr_cpus_allowed>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct sched_rt_entity, FIELD_back>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct sched_rt_entity, FIELD_parent>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct sched_rt_entity, FIELD_rt_rq>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct sched_rt_entity, FIELD_my_q>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct sched_rt_entity *struct_addr_(((struct sched_rt_entity *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct sched_rt_entity, FIELD_run_list>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct sched_rt_entity, FIELD_timeout>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
            watch_write<struct sched_rt_entity, FIELD_time_slice>::on(entry_, struct_addr_, val_);
            break;
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct sched_rt_entity, FIELD_nr_cpus_allowed>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct sched_rt_entity, FIELD_back>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct sched_rt_entity, FIELD_parent>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct sched_rt_entity, FIELD_rt_rq>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct sched_rt_entity, FIELD_my_q>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct drv_dev_and_id> {
    enum { TYPE_SIZE = sizeof(struct drv_dev_and_id) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct drv_dev_and_id *struct_addr_(((struct drv_dev_and_id *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct drv_dev_and_id, FIELD_drv>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct drv_dev_and_id, FIELD_dev>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct drv_dev_and_id, FIELD_id>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct drv_dev_and_id *struct_addr_(((struct drv_dev_and_id *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct drv_dev_and_id, FIELD_drv>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct drv_dev_and_id, FIELD_dev>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct drv_dev_and_id, FIELD_id>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, nodemask_t> {
    enum { TYPE_SIZE = sizeof(nodemask_t) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        nodemask_t *struct_addr_(((nodemask_t *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<nodemask_t, FIELD_bits>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        nodemask_t *struct_addr_(((nodemask_t *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<nodemask_t, FIELD_bits>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct xenbus_device> {
    enum { TYPE_SIZE = sizeof(struct xenbus_device) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct xenbus_device *struct_addr_(((struct xenbus_device *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct xenbus_device, FIELD_devicetype>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct xenbus_device, FIELD_nodename>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct xenbus_device, FIELD_otherend>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
            watch_read<struct xenbus_device, FIELD_otherend_id>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct xenbus_device, FIELD_otherend_watch>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
        case 528: 
        case 529: 
        case 530: 
        case 531: 
        case 532: 
        case 533: 
        case 534: 
        case 535: 
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
        case 544: 
        case 545: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
        case 552: 
        case 553: 
        case 554: 
        case 555: 
        case 556: 
        case 557: 
        case 558: 
        case 559: 
        case 560: 
        case 561: 
        case 562: 
        case 563: 
        case 564: 
        case 565: 
        case 566: 
        case 567: 
        case 568: 
        case 569: 
        case 570: 
        case 571: 
        case 572: 
        case 573: 
        case 574: 
        case 575: 
            watch_read<struct xenbus_device, FIELD_dev>::on(entry_, struct_addr_);
            break;
        case 576: 
        case 577: 
        case 578: 
        case 579: 
            watch_read<struct xenbus_device, FIELD_state>::on(entry_, struct_addr_);
            break;
        case 584: 
        case 585: 
        case 586: 
        case 587: 
        case 588: 
        case 589: 
        case 590: 
        case 591: 
        case 592: 
        case 593: 
        case 594: 
        case 595: 
        case 596: 
        case 597: 
        case 598: 
        case 599: 
        case 600: 
        case 601: 
        case 602: 
        case 603: 
        case 604: 
        case 605: 
        case 606: 
        case 607: 
        case 608: 
        case 609: 
        case 610: 
        case 611: 
        case 612: 
        case 613: 
        case 614: 
        case 615: 
            watch_read<struct xenbus_device, FIELD_down>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct xenbus_device *struct_addr_(((struct xenbus_device *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct xenbus_device, FIELD_devicetype>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct xenbus_device, FIELD_nodename>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct xenbus_device, FIELD_otherend>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
            watch_write<struct xenbus_device, FIELD_otherend_id>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct xenbus_device, FIELD_otherend_watch>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
        case 528: 
        case 529: 
        case 530: 
        case 531: 
        case 532: 
        case 533: 
        case 534: 
        case 535: 
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
        case 544: 
        case 545: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
        case 552: 
        case 553: 
        case 554: 
        case 555: 
        case 556: 
        case 557: 
        case 558: 
        case 559: 
        case 560: 
        case 561: 
        case 562: 
        case 563: 
        case 564: 
        case 565: 
        case 566: 
        case 567: 
        case 568: 
        case 569: 
        case 570: 
        case 571: 
        case 572: 
        case 573: 
        case 574: 
        case 575: 
            watch_write<struct xenbus_device, FIELD_dev>::on(entry_, struct_addr_, val_);
            break;
        case 576: 
        case 577: 
        case 578: 
        case 579: 
            watch_write<struct xenbus_device, FIELD_state>::on(entry_, struct_addr_, val_);
            break;
        case 584: 
        case 585: 
        case 586: 
        case 587: 
        case 588: 
        case 589: 
        case 590: 
        case 591: 
        case 592: 
        case 593: 
        case 594: 
        case 595: 
        case 596: 
        case 597: 
        case 598: 
        case 599: 
        case 600: 
        case 601: 
        case 602: 
        case 603: 
        case 604: 
        case 605: 
        case 606: 
        case 607: 
        case 608: 
        case 609: 
        case 610: 
        case 611: 
        case 612: 
        case 613: 
        case 614: 
        case 615: 
            watch_write<struct xenbus_device, FIELD_down>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct plist_head> {
    enum { TYPE_SIZE = sizeof(struct plist_head) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct plist_head *struct_addr_(((struct plist_head *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct plist_head, FIELD_prio_list>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct plist_head, FIELD_node_list>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct plist_head *struct_addr_(((struct plist_head *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct plist_head, FIELD_prio_list>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct plist_head, FIELD_node_list>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct thread_struct> {
    enum { TYPE_SIZE = sizeof(struct thread_struct) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct thread_struct *struct_addr_(((struct thread_struct *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct thread_struct, FIELD_tls_array>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct thread_struct, FIELD_sp0>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct thread_struct, FIELD_sp>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct thread_struct, FIELD_usersp>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
            watch_read<struct thread_struct, FIELD_es>::on(entry_, struct_addr_);
            break;
        case 50: 
        case 51: 
            watch_read<struct thread_struct, FIELD_ds>::on(entry_, struct_addr_);
            break;
        case 52: 
        case 53: 
            watch_read<struct thread_struct, FIELD_fsindex>::on(entry_, struct_addr_);
            break;
        case 54: 
        case 55: 
            watch_read<struct thread_struct, FIELD_gsindex>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct thread_struct, FIELD_fs>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct thread_struct, FIELD_gs>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct thread_struct, FIELD_debugreg0>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct thread_struct, FIELD_debugreg1>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct thread_struct, FIELD_debugreg2>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_read<struct thread_struct, FIELD_debugreg3>::on(entry_, struct_addr_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_read<struct thread_struct, FIELD_debugreg6>::on(entry_, struct_addr_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_read<struct thread_struct, FIELD_debugreg7>::on(entry_, struct_addr_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_read<struct thread_struct, FIELD_cr2>::on(entry_, struct_addr_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_read<struct thread_struct, FIELD_trap_no>::on(entry_, struct_addr_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_read<struct thread_struct, FIELD_error_code>::on(entry_, struct_addr_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_read<struct thread_struct, FIELD_xstate>::on(entry_, struct_addr_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
            watch_read<struct thread_struct, FIELD_io_bitmap_ptr>::on(entry_, struct_addr_);
            break;
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
            watch_read<struct thread_struct, FIELD_iopl>::on(entry_, struct_addr_);
            break;
        case 168: 
        case 169: 
        case 170: 
        case 171: 
            watch_read<struct thread_struct, FIELD_io_bitmap_max>::on(entry_, struct_addr_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
            watch_read<struct thread_struct, FIELD_debugctlmsr>::on(entry_, struct_addr_);
            break;
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
            watch_read<struct thread_struct, FIELD_ds_ctx>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct thread_struct *struct_addr_(((struct thread_struct *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct thread_struct, FIELD_tls_array>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct thread_struct, FIELD_sp0>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct thread_struct, FIELD_sp>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct thread_struct, FIELD_usersp>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
            watch_write<struct thread_struct, FIELD_es>::on(entry_, struct_addr_, val_);
            break;
        case 50: 
        case 51: 
            watch_write<struct thread_struct, FIELD_ds>::on(entry_, struct_addr_, val_);
            break;
        case 52: 
        case 53: 
            watch_write<struct thread_struct, FIELD_fsindex>::on(entry_, struct_addr_, val_);
            break;
        case 54: 
        case 55: 
            watch_write<struct thread_struct, FIELD_gsindex>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct thread_struct, FIELD_fs>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct thread_struct, FIELD_gs>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct thread_struct, FIELD_debugreg0>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct thread_struct, FIELD_debugreg1>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct thread_struct, FIELD_debugreg2>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_write<struct thread_struct, FIELD_debugreg3>::on(entry_, struct_addr_, val_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_write<struct thread_struct, FIELD_debugreg6>::on(entry_, struct_addr_, val_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_write<struct thread_struct, FIELD_debugreg7>::on(entry_, struct_addr_, val_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_write<struct thread_struct, FIELD_cr2>::on(entry_, struct_addr_, val_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_write<struct thread_struct, FIELD_trap_no>::on(entry_, struct_addr_, val_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_write<struct thread_struct, FIELD_error_code>::on(entry_, struct_addr_, val_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_write<struct thread_struct, FIELD_xstate>::on(entry_, struct_addr_, val_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
            watch_write<struct thread_struct, FIELD_io_bitmap_ptr>::on(entry_, struct_addr_, val_);
            break;
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
            watch_write<struct thread_struct, FIELD_iopl>::on(entry_, struct_addr_, val_);
            break;
        case 168: 
        case 169: 
        case 170: 
        case 171: 
            watch_write<struct thread_struct, FIELD_io_bitmap_max>::on(entry_, struct_addr_, val_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
            watch_write<struct thread_struct, FIELD_debugctlmsr>::on(entry_, struct_addr_, val_);
            break;
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
            watch_write<struct thread_struct, FIELD_ds_ctx>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, seccomp_t> {
    enum { TYPE_SIZE = sizeof(seccomp_t) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        seccomp_t *struct_addr_(((seccomp_t *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<seccomp_t, FIELD_mode>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        seccomp_t *struct_addr_(((seccomp_t *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<seccomp_t, FIELD_mode>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct pid_link> {
    enum { TYPE_SIZE = sizeof(struct pid_link) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct pid_link *struct_addr_(((struct pid_link *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct pid_link, FIELD_node>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct pid_link, FIELD_pid>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct pid_link *struct_addr_(((struct pid_link *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct pid_link, FIELD_node>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct pid_link, FIELD_pid>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct file_system_type> {
    enum { TYPE_SIZE = sizeof(struct file_system_type) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct file_system_type *struct_addr_(((struct file_system_type *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct file_system_type, FIELD_name>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_read<struct file_system_type, FIELD_fs_flags>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct file_system_type, FIELD_get_sb>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct file_system_type, FIELD_kill_sb>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct file_system_type, FIELD_owner>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct file_system_type, FIELD_next>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct file_system_type, FIELD_fs_supers>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct file_system_type *struct_addr_(((struct file_system_type *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct file_system_type, FIELD_name>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_write<struct file_system_type, FIELD_fs_flags>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct file_system_type, FIELD_get_sb>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct file_system_type, FIELD_kill_sb>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct file_system_type, FIELD_owner>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct file_system_type, FIELD_next>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct file_system_type, FIELD_fs_supers>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct rw_semaphore> {
    enum { TYPE_SIZE = sizeof(struct rw_semaphore) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct rw_semaphore *struct_addr_(((struct rw_semaphore *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct rw_semaphore, FIELD_count>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_read<struct rw_semaphore, FIELD_wait_lock>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct rw_semaphore, FIELD_wait_list>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct rw_semaphore *struct_addr_(((struct rw_semaphore *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct rw_semaphore, FIELD_count>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_write<struct rw_semaphore, FIELD_wait_lock>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct rw_semaphore, FIELD_wait_list>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct kmem_cache> {
    enum { TYPE_SIZE = sizeof(struct kmem_cache) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct kmem_cache *struct_addr_(((struct kmem_cache *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct kmem_cache, FIELD_flags>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_read<struct kmem_cache, FIELD_size>::on(entry_, struct_addr_);
            break;
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct kmem_cache, FIELD_objsize>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
            watch_read<struct kmem_cache, FIELD_offset>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct kmem_cache, FIELD_oo>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct kmem_cache, FIELD_local_node>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_read<struct kmem_cache, FIELD_max>::on(entry_, struct_addr_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_read<struct kmem_cache, FIELD_min>::on(entry_, struct_addr_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
            watch_read<struct kmem_cache, FIELD_allocflags>::on(entry_, struct_addr_);
            break;
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_read<struct kmem_cache, FIELD_refcount>::on(entry_, struct_addr_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_read<struct kmem_cache, FIELD_ctor>::on(entry_, struct_addr_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
            watch_read<struct kmem_cache, FIELD_inuse>::on(entry_, struct_addr_);
            break;
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_read<struct kmem_cache, FIELD_align>::on(entry_, struct_addr_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_read<struct kmem_cache, FIELD_min_partial>::on(entry_, struct_addr_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_read<struct kmem_cache, FIELD_name>::on(entry_, struct_addr_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
            watch_read<struct kmem_cache, FIELD_list>::on(entry_, struct_addr_);
            break;
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
            watch_read<struct kmem_cache, FIELD_kobj>::on(entry_, struct_addr_);
            break;
        case 232: 
        case 233: 
        case 234: 
        case 235: 
            watch_read<struct kmem_cache, FIELD_remote_node_defrag_ratio>::on(entry_, struct_addr_);
            break;
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
        case 528: 
        case 529: 
        case 530: 
        case 531: 
        case 532: 
        case 533: 
        case 534: 
        case 535: 
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
        case 544: 
        case 545: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
        case 552: 
        case 553: 
        case 554: 
        case 555: 
        case 556: 
        case 557: 
        case 558: 
        case 559: 
        case 560: 
        case 561: 
        case 562: 
        case 563: 
        case 564: 
        case 565: 
        case 566: 
        case 567: 
        case 568: 
        case 569: 
        case 570: 
        case 571: 
        case 572: 
        case 573: 
        case 574: 
        case 575: 
        case 576: 
        case 577: 
        case 578: 
        case 579: 
        case 580: 
        case 581: 
        case 582: 
        case 583: 
        case 584: 
        case 585: 
        case 586: 
        case 587: 
        case 588: 
        case 589: 
        case 590: 
        case 591: 
        case 592: 
        case 593: 
        case 594: 
        case 595: 
        case 596: 
        case 597: 
        case 598: 
        case 599: 
        case 600: 
        case 601: 
        case 602: 
        case 603: 
        case 604: 
        case 605: 
        case 606: 
        case 607: 
        case 608: 
        case 609: 
        case 610: 
        case 611: 
        case 612: 
        case 613: 
        case 614: 
        case 615: 
        case 616: 
        case 617: 
        case 618: 
        case 619: 
        case 620: 
        case 621: 
        case 622: 
        case 623: 
        case 624: 
        case 625: 
        case 626: 
        case 627: 
        case 628: 
        case 629: 
        case 630: 
        case 631: 
        case 632: 
        case 633: 
        case 634: 
        case 635: 
        case 636: 
        case 637: 
        case 638: 
        case 639: 
        case 640: 
        case 641: 
        case 642: 
        case 643: 
        case 644: 
        case 645: 
        case 646: 
        case 647: 
        case 648: 
        case 649: 
        case 650: 
        case 651: 
        case 652: 
        case 653: 
        case 654: 
        case 655: 
        case 656: 
        case 657: 
        case 658: 
        case 659: 
        case 660: 
        case 661: 
        case 662: 
        case 663: 
        case 664: 
        case 665: 
        case 666: 
        case 667: 
        case 668: 
        case 669: 
        case 670: 
        case 671: 
        case 672: 
        case 673: 
        case 674: 
        case 675: 
        case 676: 
        case 677: 
        case 678: 
        case 679: 
        case 680: 
        case 681: 
        case 682: 
        case 683: 
        case 684: 
        case 685: 
        case 686: 
        case 687: 
        case 688: 
        case 689: 
        case 690: 
        case 691: 
        case 692: 
        case 693: 
        case 694: 
        case 695: 
        case 696: 
        case 697: 
        case 698: 
        case 699: 
        case 700: 
        case 701: 
        case 702: 
        case 703: 
        case 704: 
        case 705: 
        case 706: 
        case 707: 
        case 708: 
        case 709: 
        case 710: 
        case 711: 
        case 712: 
        case 713: 
        case 714: 
        case 715: 
        case 716: 
        case 717: 
        case 718: 
        case 719: 
        case 720: 
        case 721: 
        case 722: 
        case 723: 
        case 724: 
        case 725: 
        case 726: 
        case 727: 
        case 728: 
        case 729: 
        case 730: 
        case 731: 
        case 732: 
        case 733: 
        case 734: 
        case 735: 
        case 736: 
        case 737: 
        case 738: 
        case 739: 
        case 740: 
        case 741: 
        case 742: 
        case 743: 
        case 744: 
        case 745: 
        case 746: 
        case 747: 
        case 748: 
        case 749: 
        case 750: 
        case 751: 
            watch_read<struct kmem_cache, FIELD_node>::on(entry_, struct_addr_);
            break;
        case 752: 
        case 753: 
        case 754: 
        case 755: 
        case 756: 
        case 757: 
        case 758: 
        case 759: 
        case 760: 
        case 761: 
        case 762: 
        case 763: 
        case 764: 
        case 765: 
        case 766: 
        case 767: 
        case 768: 
        case 769: 
        case 770: 
        case 771: 
        case 772: 
        case 773: 
        case 774: 
        case 775: 
        case 776: 
        case 777: 
        case 778: 
        case 779: 
        case 780: 
        case 781: 
        case 782: 
        case 783: 
        case 784: 
        case 785: 
        case 786: 
        case 787: 
        case 788: 
        case 789: 
        case 790: 
        case 791: 
        case 792: 
        case 793: 
        case 794: 
        case 795: 
        case 796: 
        case 797: 
        case 798: 
        case 799: 
        case 800: 
        case 801: 
        case 802: 
        case 803: 
        case 804: 
        case 805: 
        case 806: 
        case 807: 
        case 808: 
        case 809: 
        case 810: 
        case 811: 
        case 812: 
        case 813: 
        case 814: 
        case 815: 
        case 816: 
        case 817: 
        case 818: 
        case 819: 
        case 820: 
        case 821: 
        case 822: 
        case 823: 
        case 824: 
        case 825: 
        case 826: 
        case 827: 
        case 828: 
        case 829: 
        case 830: 
        case 831: 
        case 832: 
        case 833: 
        case 834: 
        case 835: 
        case 836: 
        case 837: 
        case 838: 
        case 839: 
        case 840: 
        case 841: 
        case 842: 
        case 843: 
        case 844: 
        case 845: 
        case 846: 
        case 847: 
        case 848: 
        case 849: 
        case 850: 
        case 851: 
        case 852: 
        case 853: 
        case 854: 
        case 855: 
        case 856: 
        case 857: 
        case 858: 
        case 859: 
        case 860: 
        case 861: 
        case 862: 
        case 863: 
        case 864: 
        case 865: 
        case 866: 
        case 867: 
        case 868: 
        case 869: 
        case 870: 
        case 871: 
        case 872: 
        case 873: 
        case 874: 
        case 875: 
        case 876: 
        case 877: 
        case 878: 
        case 879: 
        case 880: 
        case 881: 
        case 882: 
        case 883: 
        case 884: 
        case 885: 
        case 886: 
        case 887: 
        case 888: 
        case 889: 
        case 890: 
        case 891: 
        case 892: 
        case 893: 
        case 894: 
        case 895: 
        case 896: 
        case 897: 
        case 898: 
        case 899: 
        case 900: 
        case 901: 
        case 902: 
        case 903: 
        case 904: 
        case 905: 
        case 906: 
        case 907: 
        case 908: 
        case 909: 
        case 910: 
        case 911: 
        case 912: 
        case 913: 
        case 914: 
        case 915: 
        case 916: 
        case 917: 
        case 918: 
        case 919: 
        case 920: 
        case 921: 
        case 922: 
        case 923: 
        case 924: 
        case 925: 
        case 926: 
        case 927: 
        case 928: 
        case 929: 
        case 930: 
        case 931: 
        case 932: 
        case 933: 
        case 934: 
        case 935: 
        case 936: 
        case 937: 
        case 938: 
        case 939: 
        case 940: 
        case 941: 
        case 942: 
        case 943: 
        case 944: 
        case 945: 
        case 946: 
        case 947: 
        case 948: 
        case 949: 
        case 950: 
        case 951: 
        case 952: 
        case 953: 
        case 954: 
        case 955: 
        case 956: 
        case 957: 
        case 958: 
        case 959: 
        case 960: 
        case 961: 
        case 962: 
        case 963: 
        case 964: 
        case 965: 
        case 966: 
        case 967: 
        case 968: 
        case 969: 
        case 970: 
        case 971: 
        case 972: 
        case 973: 
        case 974: 
        case 975: 
        case 976: 
        case 977: 
        case 978: 
        case 979: 
        case 980: 
        case 981: 
        case 982: 
        case 983: 
        case 984: 
        case 985: 
        case 986: 
        case 987: 
        case 988: 
        case 989: 
        case 990: 
        case 991: 
        case 992: 
        case 993: 
        case 994: 
        case 995: 
        case 996: 
        case 997: 
        case 998: 
        case 999: 
        case 1000: 
        case 1001: 
        case 1002: 
        case 1003: 
        case 1004: 
        case 1005: 
        case 1006: 
        case 1007: 
        case 1008: 
        case 1009: 
        case 1010: 
        case 1011: 
        case 1012: 
        case 1013: 
        case 1014: 
        case 1015: 
        case 1016: 
        case 1017: 
        case 1018: 
        case 1019: 
        case 1020: 
        case 1021: 
        case 1022: 
        case 1023: 
        case 1024: 
        case 1025: 
        case 1026: 
        case 1027: 
        case 1028: 
        case 1029: 
        case 1030: 
        case 1031: 
        case 1032: 
        case 1033: 
        case 1034: 
        case 1035: 
        case 1036: 
        case 1037: 
        case 1038: 
        case 1039: 
        case 1040: 
        case 1041: 
        case 1042: 
        case 1043: 
        case 1044: 
        case 1045: 
        case 1046: 
        case 1047: 
        case 1048: 
        case 1049: 
        case 1050: 
        case 1051: 
        case 1052: 
        case 1053: 
        case 1054: 
        case 1055: 
        case 1056: 
        case 1057: 
        case 1058: 
        case 1059: 
        case 1060: 
        case 1061: 
        case 1062: 
        case 1063: 
        case 1064: 
        case 1065: 
        case 1066: 
        case 1067: 
        case 1068: 
        case 1069: 
        case 1070: 
        case 1071: 
        case 1072: 
        case 1073: 
        case 1074: 
        case 1075: 
        case 1076: 
        case 1077: 
        case 1078: 
        case 1079: 
        case 1080: 
        case 1081: 
        case 1082: 
        case 1083: 
        case 1084: 
        case 1085: 
        case 1086: 
        case 1087: 
        case 1088: 
        case 1089: 
        case 1090: 
        case 1091: 
        case 1092: 
        case 1093: 
        case 1094: 
        case 1095: 
        case 1096: 
        case 1097: 
        case 1098: 
        case 1099: 
        case 1100: 
        case 1101: 
        case 1102: 
        case 1103: 
        case 1104: 
        case 1105: 
        case 1106: 
        case 1107: 
        case 1108: 
        case 1109: 
        case 1110: 
        case 1111: 
        case 1112: 
        case 1113: 
        case 1114: 
        case 1115: 
        case 1116: 
        case 1117: 
        case 1118: 
        case 1119: 
        case 1120: 
        case 1121: 
        case 1122: 
        case 1123: 
        case 1124: 
        case 1125: 
        case 1126: 
        case 1127: 
        case 1128: 
        case 1129: 
        case 1130: 
        case 1131: 
        case 1132: 
        case 1133: 
        case 1134: 
        case 1135: 
        case 1136: 
        case 1137: 
        case 1138: 
        case 1139: 
        case 1140: 
        case 1141: 
        case 1142: 
        case 1143: 
        case 1144: 
        case 1145: 
        case 1146: 
        case 1147: 
        case 1148: 
        case 1149: 
        case 1150: 
        case 1151: 
        case 1152: 
        case 1153: 
        case 1154: 
        case 1155: 
        case 1156: 
        case 1157: 
        case 1158: 
        case 1159: 
        case 1160: 
        case 1161: 
        case 1162: 
        case 1163: 
        case 1164: 
        case 1165: 
        case 1166: 
        case 1167: 
        case 1168: 
        case 1169: 
        case 1170: 
        case 1171: 
        case 1172: 
        case 1173: 
        case 1174: 
        case 1175: 
        case 1176: 
        case 1177: 
        case 1178: 
        case 1179: 
        case 1180: 
        case 1181: 
        case 1182: 
        case 1183: 
        case 1184: 
        case 1185: 
        case 1186: 
        case 1187: 
        case 1188: 
        case 1189: 
        case 1190: 
        case 1191: 
        case 1192: 
        case 1193: 
        case 1194: 
        case 1195: 
        case 1196: 
        case 1197: 
        case 1198: 
        case 1199: 
        case 1200: 
        case 1201: 
        case 1202: 
        case 1203: 
        case 1204: 
        case 1205: 
        case 1206: 
        case 1207: 
        case 1208: 
        case 1209: 
        case 1210: 
        case 1211: 
        case 1212: 
        case 1213: 
        case 1214: 
        case 1215: 
        case 1216: 
        case 1217: 
        case 1218: 
        case 1219: 
        case 1220: 
        case 1221: 
        case 1222: 
        case 1223: 
        case 1224: 
        case 1225: 
        case 1226: 
        case 1227: 
        case 1228: 
        case 1229: 
        case 1230: 
        case 1231: 
        case 1232: 
        case 1233: 
        case 1234: 
        case 1235: 
        case 1236: 
        case 1237: 
        case 1238: 
        case 1239: 
        case 1240: 
        case 1241: 
        case 1242: 
        case 1243: 
        case 1244: 
        case 1245: 
        case 1246: 
        case 1247: 
        case 1248: 
        case 1249: 
        case 1250: 
        case 1251: 
        case 1252: 
        case 1253: 
        case 1254: 
        case 1255: 
        case 1256: 
        case 1257: 
        case 1258: 
        case 1259: 
        case 1260: 
        case 1261: 
        case 1262: 
        case 1263: 
            watch_read<struct kmem_cache, FIELD_cpu_slab>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct kmem_cache *struct_addr_(((struct kmem_cache *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct kmem_cache, FIELD_flags>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_write<struct kmem_cache, FIELD_size>::on(entry_, struct_addr_, val_);
            break;
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct kmem_cache, FIELD_objsize>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
            watch_write<struct kmem_cache, FIELD_offset>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct kmem_cache, FIELD_oo>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct kmem_cache, FIELD_local_node>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_write<struct kmem_cache, FIELD_max>::on(entry_, struct_addr_, val_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_write<struct kmem_cache, FIELD_min>::on(entry_, struct_addr_, val_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
            watch_write<struct kmem_cache, FIELD_allocflags>::on(entry_, struct_addr_, val_);
            break;
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_write<struct kmem_cache, FIELD_refcount>::on(entry_, struct_addr_, val_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_write<struct kmem_cache, FIELD_ctor>::on(entry_, struct_addr_, val_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
            watch_write<struct kmem_cache, FIELD_inuse>::on(entry_, struct_addr_, val_);
            break;
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_write<struct kmem_cache, FIELD_align>::on(entry_, struct_addr_, val_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_write<struct kmem_cache, FIELD_min_partial>::on(entry_, struct_addr_, val_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_write<struct kmem_cache, FIELD_name>::on(entry_, struct_addr_, val_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
            watch_write<struct kmem_cache, FIELD_list>::on(entry_, struct_addr_, val_);
            break;
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
            watch_write<struct kmem_cache, FIELD_kobj>::on(entry_, struct_addr_, val_);
            break;
        case 232: 
        case 233: 
        case 234: 
        case 235: 
            watch_write<struct kmem_cache, FIELD_remote_node_defrag_ratio>::on(entry_, struct_addr_, val_);
            break;
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
        case 528: 
        case 529: 
        case 530: 
        case 531: 
        case 532: 
        case 533: 
        case 534: 
        case 535: 
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
        case 544: 
        case 545: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
        case 552: 
        case 553: 
        case 554: 
        case 555: 
        case 556: 
        case 557: 
        case 558: 
        case 559: 
        case 560: 
        case 561: 
        case 562: 
        case 563: 
        case 564: 
        case 565: 
        case 566: 
        case 567: 
        case 568: 
        case 569: 
        case 570: 
        case 571: 
        case 572: 
        case 573: 
        case 574: 
        case 575: 
        case 576: 
        case 577: 
        case 578: 
        case 579: 
        case 580: 
        case 581: 
        case 582: 
        case 583: 
        case 584: 
        case 585: 
        case 586: 
        case 587: 
        case 588: 
        case 589: 
        case 590: 
        case 591: 
        case 592: 
        case 593: 
        case 594: 
        case 595: 
        case 596: 
        case 597: 
        case 598: 
        case 599: 
        case 600: 
        case 601: 
        case 602: 
        case 603: 
        case 604: 
        case 605: 
        case 606: 
        case 607: 
        case 608: 
        case 609: 
        case 610: 
        case 611: 
        case 612: 
        case 613: 
        case 614: 
        case 615: 
        case 616: 
        case 617: 
        case 618: 
        case 619: 
        case 620: 
        case 621: 
        case 622: 
        case 623: 
        case 624: 
        case 625: 
        case 626: 
        case 627: 
        case 628: 
        case 629: 
        case 630: 
        case 631: 
        case 632: 
        case 633: 
        case 634: 
        case 635: 
        case 636: 
        case 637: 
        case 638: 
        case 639: 
        case 640: 
        case 641: 
        case 642: 
        case 643: 
        case 644: 
        case 645: 
        case 646: 
        case 647: 
        case 648: 
        case 649: 
        case 650: 
        case 651: 
        case 652: 
        case 653: 
        case 654: 
        case 655: 
        case 656: 
        case 657: 
        case 658: 
        case 659: 
        case 660: 
        case 661: 
        case 662: 
        case 663: 
        case 664: 
        case 665: 
        case 666: 
        case 667: 
        case 668: 
        case 669: 
        case 670: 
        case 671: 
        case 672: 
        case 673: 
        case 674: 
        case 675: 
        case 676: 
        case 677: 
        case 678: 
        case 679: 
        case 680: 
        case 681: 
        case 682: 
        case 683: 
        case 684: 
        case 685: 
        case 686: 
        case 687: 
        case 688: 
        case 689: 
        case 690: 
        case 691: 
        case 692: 
        case 693: 
        case 694: 
        case 695: 
        case 696: 
        case 697: 
        case 698: 
        case 699: 
        case 700: 
        case 701: 
        case 702: 
        case 703: 
        case 704: 
        case 705: 
        case 706: 
        case 707: 
        case 708: 
        case 709: 
        case 710: 
        case 711: 
        case 712: 
        case 713: 
        case 714: 
        case 715: 
        case 716: 
        case 717: 
        case 718: 
        case 719: 
        case 720: 
        case 721: 
        case 722: 
        case 723: 
        case 724: 
        case 725: 
        case 726: 
        case 727: 
        case 728: 
        case 729: 
        case 730: 
        case 731: 
        case 732: 
        case 733: 
        case 734: 
        case 735: 
        case 736: 
        case 737: 
        case 738: 
        case 739: 
        case 740: 
        case 741: 
        case 742: 
        case 743: 
        case 744: 
        case 745: 
        case 746: 
        case 747: 
        case 748: 
        case 749: 
        case 750: 
        case 751: 
            watch_write<struct kmem_cache, FIELD_node>::on(entry_, struct_addr_, val_);
            break;
        case 752: 
        case 753: 
        case 754: 
        case 755: 
        case 756: 
        case 757: 
        case 758: 
        case 759: 
        case 760: 
        case 761: 
        case 762: 
        case 763: 
        case 764: 
        case 765: 
        case 766: 
        case 767: 
        case 768: 
        case 769: 
        case 770: 
        case 771: 
        case 772: 
        case 773: 
        case 774: 
        case 775: 
        case 776: 
        case 777: 
        case 778: 
        case 779: 
        case 780: 
        case 781: 
        case 782: 
        case 783: 
        case 784: 
        case 785: 
        case 786: 
        case 787: 
        case 788: 
        case 789: 
        case 790: 
        case 791: 
        case 792: 
        case 793: 
        case 794: 
        case 795: 
        case 796: 
        case 797: 
        case 798: 
        case 799: 
        case 800: 
        case 801: 
        case 802: 
        case 803: 
        case 804: 
        case 805: 
        case 806: 
        case 807: 
        case 808: 
        case 809: 
        case 810: 
        case 811: 
        case 812: 
        case 813: 
        case 814: 
        case 815: 
        case 816: 
        case 817: 
        case 818: 
        case 819: 
        case 820: 
        case 821: 
        case 822: 
        case 823: 
        case 824: 
        case 825: 
        case 826: 
        case 827: 
        case 828: 
        case 829: 
        case 830: 
        case 831: 
        case 832: 
        case 833: 
        case 834: 
        case 835: 
        case 836: 
        case 837: 
        case 838: 
        case 839: 
        case 840: 
        case 841: 
        case 842: 
        case 843: 
        case 844: 
        case 845: 
        case 846: 
        case 847: 
        case 848: 
        case 849: 
        case 850: 
        case 851: 
        case 852: 
        case 853: 
        case 854: 
        case 855: 
        case 856: 
        case 857: 
        case 858: 
        case 859: 
        case 860: 
        case 861: 
        case 862: 
        case 863: 
        case 864: 
        case 865: 
        case 866: 
        case 867: 
        case 868: 
        case 869: 
        case 870: 
        case 871: 
        case 872: 
        case 873: 
        case 874: 
        case 875: 
        case 876: 
        case 877: 
        case 878: 
        case 879: 
        case 880: 
        case 881: 
        case 882: 
        case 883: 
        case 884: 
        case 885: 
        case 886: 
        case 887: 
        case 888: 
        case 889: 
        case 890: 
        case 891: 
        case 892: 
        case 893: 
        case 894: 
        case 895: 
        case 896: 
        case 897: 
        case 898: 
        case 899: 
        case 900: 
        case 901: 
        case 902: 
        case 903: 
        case 904: 
        case 905: 
        case 906: 
        case 907: 
        case 908: 
        case 909: 
        case 910: 
        case 911: 
        case 912: 
        case 913: 
        case 914: 
        case 915: 
        case 916: 
        case 917: 
        case 918: 
        case 919: 
        case 920: 
        case 921: 
        case 922: 
        case 923: 
        case 924: 
        case 925: 
        case 926: 
        case 927: 
        case 928: 
        case 929: 
        case 930: 
        case 931: 
        case 932: 
        case 933: 
        case 934: 
        case 935: 
        case 936: 
        case 937: 
        case 938: 
        case 939: 
        case 940: 
        case 941: 
        case 942: 
        case 943: 
        case 944: 
        case 945: 
        case 946: 
        case 947: 
        case 948: 
        case 949: 
        case 950: 
        case 951: 
        case 952: 
        case 953: 
        case 954: 
        case 955: 
        case 956: 
        case 957: 
        case 958: 
        case 959: 
        case 960: 
        case 961: 
        case 962: 
        case 963: 
        case 964: 
        case 965: 
        case 966: 
        case 967: 
        case 968: 
        case 969: 
        case 970: 
        case 971: 
        case 972: 
        case 973: 
        case 974: 
        case 975: 
        case 976: 
        case 977: 
        case 978: 
        case 979: 
        case 980: 
        case 981: 
        case 982: 
        case 983: 
        case 984: 
        case 985: 
        case 986: 
        case 987: 
        case 988: 
        case 989: 
        case 990: 
        case 991: 
        case 992: 
        case 993: 
        case 994: 
        case 995: 
        case 996: 
        case 997: 
        case 998: 
        case 999: 
        case 1000: 
        case 1001: 
        case 1002: 
        case 1003: 
        case 1004: 
        case 1005: 
        case 1006: 
        case 1007: 
        case 1008: 
        case 1009: 
        case 1010: 
        case 1011: 
        case 1012: 
        case 1013: 
        case 1014: 
        case 1015: 
        case 1016: 
        case 1017: 
        case 1018: 
        case 1019: 
        case 1020: 
        case 1021: 
        case 1022: 
        case 1023: 
        case 1024: 
        case 1025: 
        case 1026: 
        case 1027: 
        case 1028: 
        case 1029: 
        case 1030: 
        case 1031: 
        case 1032: 
        case 1033: 
        case 1034: 
        case 1035: 
        case 1036: 
        case 1037: 
        case 1038: 
        case 1039: 
        case 1040: 
        case 1041: 
        case 1042: 
        case 1043: 
        case 1044: 
        case 1045: 
        case 1046: 
        case 1047: 
        case 1048: 
        case 1049: 
        case 1050: 
        case 1051: 
        case 1052: 
        case 1053: 
        case 1054: 
        case 1055: 
        case 1056: 
        case 1057: 
        case 1058: 
        case 1059: 
        case 1060: 
        case 1061: 
        case 1062: 
        case 1063: 
        case 1064: 
        case 1065: 
        case 1066: 
        case 1067: 
        case 1068: 
        case 1069: 
        case 1070: 
        case 1071: 
        case 1072: 
        case 1073: 
        case 1074: 
        case 1075: 
        case 1076: 
        case 1077: 
        case 1078: 
        case 1079: 
        case 1080: 
        case 1081: 
        case 1082: 
        case 1083: 
        case 1084: 
        case 1085: 
        case 1086: 
        case 1087: 
        case 1088: 
        case 1089: 
        case 1090: 
        case 1091: 
        case 1092: 
        case 1093: 
        case 1094: 
        case 1095: 
        case 1096: 
        case 1097: 
        case 1098: 
        case 1099: 
        case 1100: 
        case 1101: 
        case 1102: 
        case 1103: 
        case 1104: 
        case 1105: 
        case 1106: 
        case 1107: 
        case 1108: 
        case 1109: 
        case 1110: 
        case 1111: 
        case 1112: 
        case 1113: 
        case 1114: 
        case 1115: 
        case 1116: 
        case 1117: 
        case 1118: 
        case 1119: 
        case 1120: 
        case 1121: 
        case 1122: 
        case 1123: 
        case 1124: 
        case 1125: 
        case 1126: 
        case 1127: 
        case 1128: 
        case 1129: 
        case 1130: 
        case 1131: 
        case 1132: 
        case 1133: 
        case 1134: 
        case 1135: 
        case 1136: 
        case 1137: 
        case 1138: 
        case 1139: 
        case 1140: 
        case 1141: 
        case 1142: 
        case 1143: 
        case 1144: 
        case 1145: 
        case 1146: 
        case 1147: 
        case 1148: 
        case 1149: 
        case 1150: 
        case 1151: 
        case 1152: 
        case 1153: 
        case 1154: 
        case 1155: 
        case 1156: 
        case 1157: 
        case 1158: 
        case 1159: 
        case 1160: 
        case 1161: 
        case 1162: 
        case 1163: 
        case 1164: 
        case 1165: 
        case 1166: 
        case 1167: 
        case 1168: 
        case 1169: 
        case 1170: 
        case 1171: 
        case 1172: 
        case 1173: 
        case 1174: 
        case 1175: 
        case 1176: 
        case 1177: 
        case 1178: 
        case 1179: 
        case 1180: 
        case 1181: 
        case 1182: 
        case 1183: 
        case 1184: 
        case 1185: 
        case 1186: 
        case 1187: 
        case 1188: 
        case 1189: 
        case 1190: 
        case 1191: 
        case 1192: 
        case 1193: 
        case 1194: 
        case 1195: 
        case 1196: 
        case 1197: 
        case 1198: 
        case 1199: 
        case 1200: 
        case 1201: 
        case 1202: 
        case 1203: 
        case 1204: 
        case 1205: 
        case 1206: 
        case 1207: 
        case 1208: 
        case 1209: 
        case 1210: 
        case 1211: 
        case 1212: 
        case 1213: 
        case 1214: 
        case 1215: 
        case 1216: 
        case 1217: 
        case 1218: 
        case 1219: 
        case 1220: 
        case 1221: 
        case 1222: 
        case 1223: 
        case 1224: 
        case 1225: 
        case 1226: 
        case 1227: 
        case 1228: 
        case 1229: 
        case 1230: 
        case 1231: 
        case 1232: 
        case 1233: 
        case 1234: 
        case 1235: 
        case 1236: 
        case 1237: 
        case 1238: 
        case 1239: 
        case 1240: 
        case 1241: 
        case 1242: 
        case 1243: 
        case 1244: 
        case 1245: 
        case 1246: 
        case 1247: 
        case 1248: 
        case 1249: 
        case 1250: 
        case 1251: 
        case 1252: 
        case 1253: 
        case 1254: 
        case 1255: 
        case 1256: 
        case 1257: 
        case 1258: 
        case 1259: 
        case 1260: 
        case 1261: 
        case 1262: 
        case 1263: 
            watch_write<struct kmem_cache, FIELD_cpu_slab>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, atomic_t> {
    enum { TYPE_SIZE = sizeof(atomic_t) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        atomic_t *struct_addr_(((atomic_t *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<atomic_t, FIELD_counter>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        atomic_t *struct_addr_(((atomic_t *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<atomic_t, FIELD_counter>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct address_space_operations> {
    enum { TYPE_SIZE = sizeof(struct address_space_operations) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct address_space_operations *struct_addr_(((struct address_space_operations *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct address_space_operations, FIELD_writepage>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct address_space_operations, FIELD_readpage>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct address_space_operations, FIELD_sync_page>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct address_space_operations, FIELD_writepages>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct address_space_operations, FIELD_set_page_dirty>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct address_space_operations, FIELD_readpages>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct address_space_operations, FIELD_write_begin>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct address_space_operations, FIELD_write_end>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct address_space_operations, FIELD_bmap>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct address_space_operations, FIELD_invalidatepage>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct address_space_operations, FIELD_releasepage>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct address_space_operations, FIELD_direct_IO>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_read<struct address_space_operations, FIELD_get_xip_mem>::on(entry_, struct_addr_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_read<struct address_space_operations, FIELD_migratepage>::on(entry_, struct_addr_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_read<struct address_space_operations, FIELD_launder_page>::on(entry_, struct_addr_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_read<struct address_space_operations, FIELD_is_partially_uptodate>::on(entry_, struct_addr_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_read<struct address_space_operations, FIELD_error_remove_page>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct address_space_operations *struct_addr_(((struct address_space_operations *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct address_space_operations, FIELD_writepage>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct address_space_operations, FIELD_readpage>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct address_space_operations, FIELD_sync_page>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct address_space_operations, FIELD_writepages>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct address_space_operations, FIELD_set_page_dirty>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct address_space_operations, FIELD_readpages>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct address_space_operations, FIELD_write_begin>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct address_space_operations, FIELD_write_end>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct address_space_operations, FIELD_bmap>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct address_space_operations, FIELD_invalidatepage>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct address_space_operations, FIELD_releasepage>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct address_space_operations, FIELD_direct_IO>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_write<struct address_space_operations, FIELD_get_xip_mem>::on(entry_, struct_addr_, val_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_write<struct address_space_operations, FIELD_migratepage>::on(entry_, struct_addr_, val_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_write<struct address_space_operations, FIELD_launder_page>::on(entry_, struct_addr_, val_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_write<struct address_space_operations, FIELD_is_partially_uptodate>::on(entry_, struct_addr_, val_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_write<struct address_space_operations, FIELD_error_remove_page>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, spinlock_t> {
    enum { TYPE_SIZE = sizeof(spinlock_t) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        spinlock_t *struct_addr_(((spinlock_t *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<spinlock_t, FIELD_raw_lock>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        spinlock_t *struct_addr_(((spinlock_t *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<spinlock_t, FIELD_raw_lock>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct match_token> {
    enum { TYPE_SIZE = sizeof(struct match_token) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct match_token *struct_addr_(((struct match_token *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct match_token, FIELD_token>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct match_token, FIELD_pattern>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct match_token *struct_addr_(((struct match_token *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct match_token, FIELD_token>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct match_token, FIELD_pattern>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct hlist_node> {
    enum { TYPE_SIZE = sizeof(struct hlist_node) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct hlist_node *struct_addr_(((struct hlist_node *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct hlist_node, FIELD_next>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct hlist_node, FIELD_pprev>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct hlist_node *struct_addr_(((struct hlist_node *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct hlist_node, FIELD_next>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct hlist_node, FIELD_pprev>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct export_operations> {
    enum { TYPE_SIZE = sizeof(struct export_operations) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct export_operations *struct_addr_(((struct export_operations *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct export_operations, FIELD_encode_fh>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct export_operations, FIELD_fh_to_dentry>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct export_operations, FIELD_fh_to_parent>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct export_operations, FIELD_get_name>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct export_operations, FIELD_get_parent>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct export_operations *struct_addr_(((struct export_operations *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct export_operations, FIELD_encode_fh>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct export_operations, FIELD_fh_to_dentry>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct export_operations, FIELD_fh_to_parent>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct export_operations, FIELD_get_name>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct export_operations, FIELD_get_parent>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct __wait_queue_head> {
    enum { TYPE_SIZE = sizeof(struct __wait_queue_head) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct __wait_queue_head *struct_addr_(((struct __wait_queue_head *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct __wait_queue_head, FIELD_lock>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct __wait_queue_head, FIELD_task_list>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct __wait_queue_head *struct_addr_(((struct __wait_queue_head *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct __wait_queue_head, FIELD_lock>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct __wait_queue_head, FIELD_task_list>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct dentry> {
    enum { TYPE_SIZE = sizeof(struct dentry) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct dentry *struct_addr_(((struct dentry *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct dentry, FIELD_d_count>::on(entry_, struct_addr_);
            break;
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct dentry, FIELD_d_flags>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_read<struct dentry, FIELD_d_lock>::on(entry_, struct_addr_);
            break;
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct dentry, FIELD_d_mounted>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct dentry, FIELD_d_inode>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct dentry, FIELD_d_hash>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct dentry, FIELD_d_parent>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct dentry, FIELD_d_name>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct dentry, FIELD_d_lru>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct dentry, FIELD_d_u>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_read<struct dentry, FIELD_d_subdirs>::on(entry_, struct_addr_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_read<struct dentry, FIELD_d_alias>::on(entry_, struct_addr_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_read<struct dentry, FIELD_d_time>::on(entry_, struct_addr_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_read<struct dentry, FIELD_d_op>::on(entry_, struct_addr_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_read<struct dentry, FIELD_d_sb>::on(entry_, struct_addr_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
            watch_read<struct dentry, FIELD_d_fsdata>::on(entry_, struct_addr_);
            break;
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
            watch_read<struct dentry, FIELD_d_iname>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct dentry *struct_addr_(((struct dentry *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct dentry, FIELD_d_count>::on(entry_, struct_addr_, val_);
            break;
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct dentry, FIELD_d_flags>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_write<struct dentry, FIELD_d_lock>::on(entry_, struct_addr_, val_);
            break;
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct dentry, FIELD_d_mounted>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct dentry, FIELD_d_inode>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct dentry, FIELD_d_hash>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct dentry, FIELD_d_parent>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct dentry, FIELD_d_name>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct dentry, FIELD_d_lru>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct dentry, FIELD_d_u>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_write<struct dentry, FIELD_d_subdirs>::on(entry_, struct_addr_, val_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_write<struct dentry, FIELD_d_alias>::on(entry_, struct_addr_, val_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_write<struct dentry, FIELD_d_time>::on(entry_, struct_addr_, val_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_write<struct dentry, FIELD_d_op>::on(entry_, struct_addr_, val_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_write<struct dentry, FIELD_d_sb>::on(entry_, struct_addr_, val_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
            watch_write<struct dentry, FIELD_d_fsdata>::on(entry_, struct_addr_, val_);
            break;
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
            watch_write<struct dentry, FIELD_d_iname>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct dev_pm_info> {
    enum { TYPE_SIZE = sizeof(struct dev_pm_info) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct dev_pm_info *struct_addr_(((struct dev_pm_info *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct dev_pm_info, FIELD_power_state>::on(entry_, struct_addr_);
            break;
        case 4: 
            watch_read<struct dev_pm_info, FIELD_can_wakeup>::on(entry_, struct_addr_);
            watch_read<struct dev_pm_info, FIELD_should_wakeup>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_read<struct dev_pm_info, FIELD_status>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct dev_pm_info, FIELD_entry>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_read<struct dev_pm_info, FIELD_suspend_timer>::on(entry_, struct_addr_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_read<struct dev_pm_info, FIELD_timer_expires>::on(entry_, struct_addr_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_read<struct dev_pm_info, FIELD_work>::on(entry_, struct_addr_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
            watch_read<struct dev_pm_info, FIELD_wait_queue>::on(entry_, struct_addr_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
            watch_read<struct dev_pm_info, FIELD_lock>::on(entry_, struct_addr_);
            break;
        case 180: 
        case 181: 
        case 182: 
        case 183: 
            watch_read<struct dev_pm_info, FIELD_usage_count>::on(entry_, struct_addr_);
            break;
        case 184: 
        case 185: 
        case 186: 
        case 187: 
            watch_read<struct dev_pm_info, FIELD_child_count>::on(entry_, struct_addr_);
            break;
        case 188: 
            watch_read<struct dev_pm_info, FIELD_disable_depth>::on(entry_, struct_addr_);
            watch_read<struct dev_pm_info, FIELD_ignore_children>::on(entry_, struct_addr_);
            watch_read<struct dev_pm_info, FIELD_idle_notification>::on(entry_, struct_addr_);
            watch_read<struct dev_pm_info, FIELD_request_pending>::on(entry_, struct_addr_);
            watch_read<struct dev_pm_info, FIELD_deferred_resume>::on(entry_, struct_addr_);
            break;
        case 192: 
        case 193: 
        case 194: 
        case 195: 
            watch_read<struct dev_pm_info, FIELD_request>::on(entry_, struct_addr_);
            break;
        case 196: 
        case 197: 
        case 198: 
        case 199: 
            watch_read<struct dev_pm_info, FIELD_runtime_status>::on(entry_, struct_addr_);
            break;
        case 200: 
        case 201: 
        case 202: 
        case 203: 
            watch_read<struct dev_pm_info, FIELD_runtime_error>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct dev_pm_info *struct_addr_(((struct dev_pm_info *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct dev_pm_info, FIELD_power_state>::on(entry_, struct_addr_, val_);
            break;
        case 4: 
            watch_write<struct dev_pm_info, FIELD_can_wakeup>::on(entry_, struct_addr_, val_);
            watch_write<struct dev_pm_info, FIELD_should_wakeup>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_write<struct dev_pm_info, FIELD_status>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct dev_pm_info, FIELD_entry>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_write<struct dev_pm_info, FIELD_suspend_timer>::on(entry_, struct_addr_, val_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_write<struct dev_pm_info, FIELD_timer_expires>::on(entry_, struct_addr_, val_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_write<struct dev_pm_info, FIELD_work>::on(entry_, struct_addr_, val_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
            watch_write<struct dev_pm_info, FIELD_wait_queue>::on(entry_, struct_addr_, val_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
            watch_write<struct dev_pm_info, FIELD_lock>::on(entry_, struct_addr_, val_);
            break;
        case 180: 
        case 181: 
        case 182: 
        case 183: 
            watch_write<struct dev_pm_info, FIELD_usage_count>::on(entry_, struct_addr_, val_);
            break;
        case 184: 
        case 185: 
        case 186: 
        case 187: 
            watch_write<struct dev_pm_info, FIELD_child_count>::on(entry_, struct_addr_, val_);
            break;
        case 188: 
            watch_write<struct dev_pm_info, FIELD_disable_depth>::on(entry_, struct_addr_, val_);
            watch_write<struct dev_pm_info, FIELD_ignore_children>::on(entry_, struct_addr_, val_);
            watch_write<struct dev_pm_info, FIELD_idle_notification>::on(entry_, struct_addr_, val_);
            watch_write<struct dev_pm_info, FIELD_request_pending>::on(entry_, struct_addr_, val_);
            watch_write<struct dev_pm_info, FIELD_deferred_resume>::on(entry_, struct_addr_, val_);
            break;
        case 192: 
        case 193: 
        case 194: 
        case 195: 
            watch_write<struct dev_pm_info, FIELD_request>::on(entry_, struct_addr_, val_);
            break;
        case 196: 
        case 197: 
        case 198: 
        case 199: 
            watch_write<struct dev_pm_info, FIELD_runtime_status>::on(entry_, struct_addr_, val_);
            break;
        case 200: 
        case 201: 
        case 202: 
        case 203: 
            watch_write<struct dev_pm_info, FIELD_runtime_error>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct timespec_inode> {
    enum { TYPE_SIZE = sizeof(struct timespec_inode) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct timespec_inode *struct_addr_(((struct timespec_inode *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct timespec_inode, FIELD_tv_sec>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct timespec_inode, FIELD_tv_nsec>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct timespec_inode *struct_addr_(((struct timespec_inode *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct timespec_inode, FIELD_tv_sec>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct timespec_inode, FIELD_tv_nsec>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct device> {
    enum { TYPE_SIZE = sizeof(struct device) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct device *struct_addr_(((struct device *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct device, FIELD_parent>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct device, FIELD_p>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct device, FIELD_kobj>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct device, FIELD_init_name>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct device, FIELD_type>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_read<struct device, FIELD_sem>::on(entry_, struct_addr_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_read<struct device, FIELD_bus>::on(entry_, struct_addr_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_read<struct device, FIELD_driver>::on(entry_, struct_addr_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_read<struct device, FIELD_platform_data>::on(entry_, struct_addr_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
            watch_read<struct device, FIELD_power>::on(entry_, struct_addr_);
            break;
        case 352: 
        case 353: 
        case 354: 
        case 355: 
            watch_read<struct device, FIELD_numa_node>::on(entry_, struct_addr_);
            break;
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
            watch_read<struct device, FIELD_dma_mask>::on(entry_, struct_addr_);
            break;
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
            watch_read<struct device, FIELD_coherent_dma_mask>::on(entry_, struct_addr_);
            break;
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
            watch_read<struct device, FIELD_dma_parms>::on(entry_, struct_addr_);
            break;
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
            watch_read<struct device, FIELD_dma_pools>::on(entry_, struct_addr_);
            break;
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
            watch_read<struct device, FIELD_dma_mem>::on(entry_, struct_addr_);
            break;
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
            watch_read<struct device, FIELD_archdata>::on(entry_, struct_addr_);
            break;
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
            watch_read<struct device, FIELD_devt>::on(entry_, struct_addr_);
            break;
        case 432: 
        case 433: 
        case 434: 
        case 435: 
            watch_read<struct device, FIELD_devres_lock>::on(entry_, struct_addr_);
            break;
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
            watch_read<struct device, FIELD_devres_head>::on(entry_, struct_addr_);
            break;
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
            watch_read<struct device, FIELD_knode_class>::on(entry_, struct_addr_);
            break;
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
            watch_read<struct device, FIELD_class1>::on(entry_, struct_addr_);
            break;
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
            watch_read<struct device, FIELD_groups>::on(entry_, struct_addr_);
            break;
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
            watch_read<struct device, FIELD_release>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct device *struct_addr_(((struct device *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct device, FIELD_parent>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct device, FIELD_p>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct device, FIELD_kobj>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct device, FIELD_init_name>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct device, FIELD_type>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_write<struct device, FIELD_sem>::on(entry_, struct_addr_, val_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_write<struct device, FIELD_bus>::on(entry_, struct_addr_, val_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_write<struct device, FIELD_driver>::on(entry_, struct_addr_, val_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_write<struct device, FIELD_platform_data>::on(entry_, struct_addr_, val_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
            watch_write<struct device, FIELD_power>::on(entry_, struct_addr_, val_);
            break;
        case 352: 
        case 353: 
        case 354: 
        case 355: 
            watch_write<struct device, FIELD_numa_node>::on(entry_, struct_addr_, val_);
            break;
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
            watch_write<struct device, FIELD_dma_mask>::on(entry_, struct_addr_, val_);
            break;
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
            watch_write<struct device, FIELD_coherent_dma_mask>::on(entry_, struct_addr_, val_);
            break;
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
            watch_write<struct device, FIELD_dma_parms>::on(entry_, struct_addr_, val_);
            break;
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
            watch_write<struct device, FIELD_dma_pools>::on(entry_, struct_addr_, val_);
            break;
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
            watch_write<struct device, FIELD_dma_mem>::on(entry_, struct_addr_, val_);
            break;
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
            watch_write<struct device, FIELD_archdata>::on(entry_, struct_addr_, val_);
            break;
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
            watch_write<struct device, FIELD_devt>::on(entry_, struct_addr_, val_);
            break;
        case 432: 
        case 433: 
        case 434: 
        case 435: 
            watch_write<struct device, FIELD_devres_lock>::on(entry_, struct_addr_, val_);
            break;
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
            watch_write<struct device, FIELD_devres_head>::on(entry_, struct_addr_, val_);
            break;
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
            watch_write<struct device, FIELD_knode_class>::on(entry_, struct_addr_, val_);
            break;
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
            watch_write<struct device, FIELD_class1>::on(entry_, struct_addr_, val_);
            break;
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
            watch_write<struct device, FIELD_groups>::on(entry_, struct_addr_, val_);
            break;
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
            watch_write<struct device, FIELD_release>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct journal_superblock_s> {
    enum { TYPE_SIZE = sizeof(struct journal_superblock_s) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct journal_superblock_s *struct_addr_(((struct journal_superblock_s *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_read<struct journal_superblock_s, FIELD_s_header>::on(entry_, struct_addr_);
            break;
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct journal_superblock_s, FIELD_s_blocksize>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
            watch_read<struct journal_superblock_s, FIELD_s_maxlen>::on(entry_, struct_addr_);
            break;
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct journal_superblock_s, FIELD_s_first>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
            watch_read<struct journal_superblock_s, FIELD_s_sequence>::on(entry_, struct_addr_);
            break;
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct journal_superblock_s, FIELD_s_start>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
            watch_read<struct journal_superblock_s, FIELD_s_errno>::on(entry_, struct_addr_);
            break;
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct journal_superblock_s, FIELD_s_feature_compat>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
            watch_read<struct journal_superblock_s, FIELD_s_feature_incompat>::on(entry_, struct_addr_);
            break;
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct journal_superblock_s, FIELD_s_feature_ro_compat>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct journal_superblock_s, FIELD_s_uuid>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
            watch_read<struct journal_superblock_s, FIELD_s_nr_users>::on(entry_, struct_addr_);
            break;
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct journal_superblock_s, FIELD_s_dynsuper>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
            watch_read<struct journal_superblock_s, FIELD_s_max_transaction>::on(entry_, struct_addr_);
            break;
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct journal_superblock_s, FIELD_s_max_trans_data>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
            watch_read<struct journal_superblock_s, FIELD_s_padding>::on(entry_, struct_addr_);
            break;
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
        case 528: 
        case 529: 
        case 530: 
        case 531: 
        case 532: 
        case 533: 
        case 534: 
        case 535: 
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
        case 544: 
        case 545: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
        case 552: 
        case 553: 
        case 554: 
        case 555: 
        case 556: 
        case 557: 
        case 558: 
        case 559: 
        case 560: 
        case 561: 
        case 562: 
        case 563: 
        case 564: 
        case 565: 
        case 566: 
        case 567: 
        case 568: 
        case 569: 
        case 570: 
        case 571: 
        case 572: 
        case 573: 
        case 574: 
        case 575: 
        case 576: 
        case 577: 
        case 578: 
        case 579: 
        case 580: 
        case 581: 
        case 582: 
        case 583: 
        case 584: 
        case 585: 
        case 586: 
        case 587: 
        case 588: 
        case 589: 
        case 590: 
        case 591: 
        case 592: 
        case 593: 
        case 594: 
        case 595: 
        case 596: 
        case 597: 
        case 598: 
        case 599: 
        case 600: 
        case 601: 
        case 602: 
        case 603: 
        case 604: 
        case 605: 
        case 606: 
        case 607: 
        case 608: 
        case 609: 
        case 610: 
        case 611: 
        case 612: 
        case 613: 
        case 614: 
        case 615: 
        case 616: 
        case 617: 
        case 618: 
        case 619: 
        case 620: 
        case 621: 
        case 622: 
        case 623: 
        case 624: 
        case 625: 
        case 626: 
        case 627: 
        case 628: 
        case 629: 
        case 630: 
        case 631: 
        case 632: 
        case 633: 
        case 634: 
        case 635: 
        case 636: 
        case 637: 
        case 638: 
        case 639: 
        case 640: 
        case 641: 
        case 642: 
        case 643: 
        case 644: 
        case 645: 
        case 646: 
        case 647: 
        case 648: 
        case 649: 
        case 650: 
        case 651: 
        case 652: 
        case 653: 
        case 654: 
        case 655: 
        case 656: 
        case 657: 
        case 658: 
        case 659: 
        case 660: 
        case 661: 
        case 662: 
        case 663: 
        case 664: 
        case 665: 
        case 666: 
        case 667: 
        case 668: 
        case 669: 
        case 670: 
        case 671: 
        case 672: 
        case 673: 
        case 674: 
        case 675: 
        case 676: 
        case 677: 
        case 678: 
        case 679: 
        case 680: 
        case 681: 
        case 682: 
        case 683: 
        case 684: 
        case 685: 
        case 686: 
        case 687: 
        case 688: 
        case 689: 
        case 690: 
        case 691: 
        case 692: 
        case 693: 
        case 694: 
        case 695: 
        case 696: 
        case 697: 
        case 698: 
        case 699: 
        case 700: 
        case 701: 
        case 702: 
        case 703: 
        case 704: 
        case 705: 
        case 706: 
        case 707: 
        case 708: 
        case 709: 
        case 710: 
        case 711: 
        case 712: 
        case 713: 
        case 714: 
        case 715: 
        case 716: 
        case 717: 
        case 718: 
        case 719: 
        case 720: 
        case 721: 
        case 722: 
        case 723: 
        case 724: 
        case 725: 
        case 726: 
        case 727: 
        case 728: 
        case 729: 
        case 730: 
        case 731: 
        case 732: 
        case 733: 
        case 734: 
        case 735: 
        case 736: 
        case 737: 
        case 738: 
        case 739: 
        case 740: 
        case 741: 
        case 742: 
        case 743: 
        case 744: 
        case 745: 
        case 746: 
        case 747: 
        case 748: 
        case 749: 
        case 750: 
        case 751: 
        case 752: 
        case 753: 
        case 754: 
        case 755: 
        case 756: 
        case 757: 
        case 758: 
        case 759: 
        case 760: 
        case 761: 
        case 762: 
        case 763: 
        case 764: 
        case 765: 
        case 766: 
        case 767: 
        case 768: 
        case 769: 
        case 770: 
        case 771: 
        case 772: 
        case 773: 
        case 774: 
        case 775: 
        case 776: 
        case 777: 
        case 778: 
        case 779: 
        case 780: 
        case 781: 
        case 782: 
        case 783: 
        case 784: 
        case 785: 
        case 786: 
        case 787: 
        case 788: 
        case 789: 
        case 790: 
        case 791: 
        case 792: 
        case 793: 
        case 794: 
        case 795: 
        case 796: 
        case 797: 
        case 798: 
        case 799: 
        case 800: 
        case 801: 
        case 802: 
        case 803: 
        case 804: 
        case 805: 
        case 806: 
        case 807: 
        case 808: 
        case 809: 
        case 810: 
        case 811: 
        case 812: 
        case 813: 
        case 814: 
        case 815: 
        case 816: 
        case 817: 
        case 818: 
        case 819: 
        case 820: 
        case 821: 
        case 822: 
        case 823: 
        case 824: 
        case 825: 
        case 826: 
        case 827: 
        case 828: 
        case 829: 
        case 830: 
        case 831: 
        case 832: 
        case 833: 
        case 834: 
        case 835: 
        case 836: 
        case 837: 
        case 838: 
        case 839: 
        case 840: 
        case 841: 
        case 842: 
        case 843: 
        case 844: 
        case 845: 
        case 846: 
        case 847: 
        case 848: 
        case 849: 
        case 850: 
        case 851: 
        case 852: 
        case 853: 
        case 854: 
        case 855: 
        case 856: 
        case 857: 
        case 858: 
        case 859: 
        case 860: 
        case 861: 
        case 862: 
        case 863: 
        case 864: 
        case 865: 
        case 866: 
        case 867: 
        case 868: 
        case 869: 
        case 870: 
        case 871: 
        case 872: 
        case 873: 
        case 874: 
        case 875: 
        case 876: 
        case 877: 
        case 878: 
        case 879: 
        case 880: 
        case 881: 
        case 882: 
        case 883: 
        case 884: 
        case 885: 
        case 886: 
        case 887: 
        case 888: 
        case 889: 
        case 890: 
        case 891: 
        case 892: 
        case 893: 
        case 894: 
        case 895: 
        case 896: 
        case 897: 
        case 898: 
        case 899: 
        case 900: 
        case 901: 
        case 902: 
        case 903: 
        case 904: 
        case 905: 
        case 906: 
        case 907: 
        case 908: 
        case 909: 
        case 910: 
        case 911: 
        case 912: 
        case 913: 
        case 914: 
        case 915: 
        case 916: 
        case 917: 
        case 918: 
        case 919: 
        case 920: 
        case 921: 
        case 922: 
        case 923: 
        case 924: 
        case 925: 
        case 926: 
        case 927: 
        case 928: 
        case 929: 
        case 930: 
        case 931: 
        case 932: 
        case 933: 
        case 934: 
        case 935: 
        case 936: 
        case 937: 
        case 938: 
        case 939: 
        case 940: 
        case 941: 
        case 942: 
        case 943: 
        case 944: 
        case 945: 
        case 946: 
        case 947: 
        case 948: 
        case 949: 
        case 950: 
        case 951: 
        case 952: 
        case 953: 
        case 954: 
        case 955: 
        case 956: 
        case 957: 
        case 958: 
        case 959: 
        case 960: 
        case 961: 
        case 962: 
        case 963: 
        case 964: 
        case 965: 
        case 966: 
        case 967: 
        case 968: 
        case 969: 
        case 970: 
        case 971: 
        case 972: 
        case 973: 
        case 974: 
        case 975: 
        case 976: 
        case 977: 
        case 978: 
        case 979: 
        case 980: 
        case 981: 
        case 982: 
        case 983: 
        case 984: 
        case 985: 
        case 986: 
        case 987: 
        case 988: 
        case 989: 
        case 990: 
        case 991: 
        case 992: 
        case 993: 
        case 994: 
        case 995: 
        case 996: 
        case 997: 
        case 998: 
        case 999: 
        case 1000: 
        case 1001: 
        case 1002: 
        case 1003: 
        case 1004: 
        case 1005: 
        case 1006: 
        case 1007: 
        case 1008: 
        case 1009: 
        case 1010: 
        case 1011: 
        case 1012: 
        case 1013: 
        case 1014: 
        case 1015: 
        case 1016: 
        case 1017: 
        case 1018: 
        case 1019: 
        case 1020: 
        case 1021: 
        case 1022: 
        case 1023: 
            watch_read<struct journal_superblock_s, FIELD_s_users>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct journal_superblock_s *struct_addr_(((struct journal_superblock_s *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_write<struct journal_superblock_s, FIELD_s_header>::on(entry_, struct_addr_, val_);
            break;
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct journal_superblock_s, FIELD_s_blocksize>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
            watch_write<struct journal_superblock_s, FIELD_s_maxlen>::on(entry_, struct_addr_, val_);
            break;
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct journal_superblock_s, FIELD_s_first>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
            watch_write<struct journal_superblock_s, FIELD_s_sequence>::on(entry_, struct_addr_, val_);
            break;
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct journal_superblock_s, FIELD_s_start>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
            watch_write<struct journal_superblock_s, FIELD_s_errno>::on(entry_, struct_addr_, val_);
            break;
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct journal_superblock_s, FIELD_s_feature_compat>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
            watch_write<struct journal_superblock_s, FIELD_s_feature_incompat>::on(entry_, struct_addr_, val_);
            break;
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct journal_superblock_s, FIELD_s_feature_ro_compat>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct journal_superblock_s, FIELD_s_uuid>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
            watch_write<struct journal_superblock_s, FIELD_s_nr_users>::on(entry_, struct_addr_, val_);
            break;
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct journal_superblock_s, FIELD_s_dynsuper>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
            watch_write<struct journal_superblock_s, FIELD_s_max_transaction>::on(entry_, struct_addr_, val_);
            break;
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct journal_superblock_s, FIELD_s_max_trans_data>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
            watch_write<struct journal_superblock_s, FIELD_s_padding>::on(entry_, struct_addr_, val_);
            break;
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
        case 528: 
        case 529: 
        case 530: 
        case 531: 
        case 532: 
        case 533: 
        case 534: 
        case 535: 
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
        case 544: 
        case 545: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
        case 552: 
        case 553: 
        case 554: 
        case 555: 
        case 556: 
        case 557: 
        case 558: 
        case 559: 
        case 560: 
        case 561: 
        case 562: 
        case 563: 
        case 564: 
        case 565: 
        case 566: 
        case 567: 
        case 568: 
        case 569: 
        case 570: 
        case 571: 
        case 572: 
        case 573: 
        case 574: 
        case 575: 
        case 576: 
        case 577: 
        case 578: 
        case 579: 
        case 580: 
        case 581: 
        case 582: 
        case 583: 
        case 584: 
        case 585: 
        case 586: 
        case 587: 
        case 588: 
        case 589: 
        case 590: 
        case 591: 
        case 592: 
        case 593: 
        case 594: 
        case 595: 
        case 596: 
        case 597: 
        case 598: 
        case 599: 
        case 600: 
        case 601: 
        case 602: 
        case 603: 
        case 604: 
        case 605: 
        case 606: 
        case 607: 
        case 608: 
        case 609: 
        case 610: 
        case 611: 
        case 612: 
        case 613: 
        case 614: 
        case 615: 
        case 616: 
        case 617: 
        case 618: 
        case 619: 
        case 620: 
        case 621: 
        case 622: 
        case 623: 
        case 624: 
        case 625: 
        case 626: 
        case 627: 
        case 628: 
        case 629: 
        case 630: 
        case 631: 
        case 632: 
        case 633: 
        case 634: 
        case 635: 
        case 636: 
        case 637: 
        case 638: 
        case 639: 
        case 640: 
        case 641: 
        case 642: 
        case 643: 
        case 644: 
        case 645: 
        case 646: 
        case 647: 
        case 648: 
        case 649: 
        case 650: 
        case 651: 
        case 652: 
        case 653: 
        case 654: 
        case 655: 
        case 656: 
        case 657: 
        case 658: 
        case 659: 
        case 660: 
        case 661: 
        case 662: 
        case 663: 
        case 664: 
        case 665: 
        case 666: 
        case 667: 
        case 668: 
        case 669: 
        case 670: 
        case 671: 
        case 672: 
        case 673: 
        case 674: 
        case 675: 
        case 676: 
        case 677: 
        case 678: 
        case 679: 
        case 680: 
        case 681: 
        case 682: 
        case 683: 
        case 684: 
        case 685: 
        case 686: 
        case 687: 
        case 688: 
        case 689: 
        case 690: 
        case 691: 
        case 692: 
        case 693: 
        case 694: 
        case 695: 
        case 696: 
        case 697: 
        case 698: 
        case 699: 
        case 700: 
        case 701: 
        case 702: 
        case 703: 
        case 704: 
        case 705: 
        case 706: 
        case 707: 
        case 708: 
        case 709: 
        case 710: 
        case 711: 
        case 712: 
        case 713: 
        case 714: 
        case 715: 
        case 716: 
        case 717: 
        case 718: 
        case 719: 
        case 720: 
        case 721: 
        case 722: 
        case 723: 
        case 724: 
        case 725: 
        case 726: 
        case 727: 
        case 728: 
        case 729: 
        case 730: 
        case 731: 
        case 732: 
        case 733: 
        case 734: 
        case 735: 
        case 736: 
        case 737: 
        case 738: 
        case 739: 
        case 740: 
        case 741: 
        case 742: 
        case 743: 
        case 744: 
        case 745: 
        case 746: 
        case 747: 
        case 748: 
        case 749: 
        case 750: 
        case 751: 
        case 752: 
        case 753: 
        case 754: 
        case 755: 
        case 756: 
        case 757: 
        case 758: 
        case 759: 
        case 760: 
        case 761: 
        case 762: 
        case 763: 
        case 764: 
        case 765: 
        case 766: 
        case 767: 
        case 768: 
        case 769: 
        case 770: 
        case 771: 
        case 772: 
        case 773: 
        case 774: 
        case 775: 
        case 776: 
        case 777: 
        case 778: 
        case 779: 
        case 780: 
        case 781: 
        case 782: 
        case 783: 
        case 784: 
        case 785: 
        case 786: 
        case 787: 
        case 788: 
        case 789: 
        case 790: 
        case 791: 
        case 792: 
        case 793: 
        case 794: 
        case 795: 
        case 796: 
        case 797: 
        case 798: 
        case 799: 
        case 800: 
        case 801: 
        case 802: 
        case 803: 
        case 804: 
        case 805: 
        case 806: 
        case 807: 
        case 808: 
        case 809: 
        case 810: 
        case 811: 
        case 812: 
        case 813: 
        case 814: 
        case 815: 
        case 816: 
        case 817: 
        case 818: 
        case 819: 
        case 820: 
        case 821: 
        case 822: 
        case 823: 
        case 824: 
        case 825: 
        case 826: 
        case 827: 
        case 828: 
        case 829: 
        case 830: 
        case 831: 
        case 832: 
        case 833: 
        case 834: 
        case 835: 
        case 836: 
        case 837: 
        case 838: 
        case 839: 
        case 840: 
        case 841: 
        case 842: 
        case 843: 
        case 844: 
        case 845: 
        case 846: 
        case 847: 
        case 848: 
        case 849: 
        case 850: 
        case 851: 
        case 852: 
        case 853: 
        case 854: 
        case 855: 
        case 856: 
        case 857: 
        case 858: 
        case 859: 
        case 860: 
        case 861: 
        case 862: 
        case 863: 
        case 864: 
        case 865: 
        case 866: 
        case 867: 
        case 868: 
        case 869: 
        case 870: 
        case 871: 
        case 872: 
        case 873: 
        case 874: 
        case 875: 
        case 876: 
        case 877: 
        case 878: 
        case 879: 
        case 880: 
        case 881: 
        case 882: 
        case 883: 
        case 884: 
        case 885: 
        case 886: 
        case 887: 
        case 888: 
        case 889: 
        case 890: 
        case 891: 
        case 892: 
        case 893: 
        case 894: 
        case 895: 
        case 896: 
        case 897: 
        case 898: 
        case 899: 
        case 900: 
        case 901: 
        case 902: 
        case 903: 
        case 904: 
        case 905: 
        case 906: 
        case 907: 
        case 908: 
        case 909: 
        case 910: 
        case 911: 
        case 912: 
        case 913: 
        case 914: 
        case 915: 
        case 916: 
        case 917: 
        case 918: 
        case 919: 
        case 920: 
        case 921: 
        case 922: 
        case 923: 
        case 924: 
        case 925: 
        case 926: 
        case 927: 
        case 928: 
        case 929: 
        case 930: 
        case 931: 
        case 932: 
        case 933: 
        case 934: 
        case 935: 
        case 936: 
        case 937: 
        case 938: 
        case 939: 
        case 940: 
        case 941: 
        case 942: 
        case 943: 
        case 944: 
        case 945: 
        case 946: 
        case 947: 
        case 948: 
        case 949: 
        case 950: 
        case 951: 
        case 952: 
        case 953: 
        case 954: 
        case 955: 
        case 956: 
        case 957: 
        case 958: 
        case 959: 
        case 960: 
        case 961: 
        case 962: 
        case 963: 
        case 964: 
        case 965: 
        case 966: 
        case 967: 
        case 968: 
        case 969: 
        case 970: 
        case 971: 
        case 972: 
        case 973: 
        case 974: 
        case 975: 
        case 976: 
        case 977: 
        case 978: 
        case 979: 
        case 980: 
        case 981: 
        case 982: 
        case 983: 
        case 984: 
        case 985: 
        case 986: 
        case 987: 
        case 988: 
        case 989: 
        case 990: 
        case 991: 
        case 992: 
        case 993: 
        case 994: 
        case 995: 
        case 996: 
        case 997: 
        case 998: 
        case 999: 
        case 1000: 
        case 1001: 
        case 1002: 
        case 1003: 
        case 1004: 
        case 1005: 
        case 1006: 
        case 1007: 
        case 1008: 
        case 1009: 
        case 1010: 
        case 1011: 
        case 1012: 
        case 1013: 
        case 1014: 
        case 1015: 
        case 1016: 
        case 1017: 
        case 1018: 
        case 1019: 
        case 1020: 
        case 1021: 
        case 1022: 
        case 1023: 
            watch_write<struct journal_superblock_s, FIELD_s_users>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct net_device_ops> {
    enum { TYPE_SIZE = sizeof(struct net_device_ops) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct net_device_ops *struct_addr_(((struct net_device_ops *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct net_device_ops, FIELD_ndo_init>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct net_device_ops, FIELD_ndo_uninit>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct net_device_ops, FIELD_ndo_open>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct net_device_ops, FIELD_ndo_stop>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct net_device_ops, FIELD_ndo_start_xmit>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct net_device_ops, FIELD_ndo_select_queue>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct net_device_ops, FIELD_ndo_change_rx_flags>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct net_device_ops, FIELD_ndo_set_rx_mode>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct net_device_ops, FIELD_ndo_set_multicast_list>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct net_device_ops, FIELD_ndo_set_mac_address>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct net_device_ops, FIELD_ndo_validate_addr>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct net_device_ops, FIELD_ndo_do_ioctl>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_read<struct net_device_ops, FIELD_ndo_set_config>::on(entry_, struct_addr_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_read<struct net_device_ops, FIELD_ndo_change_mtu>::on(entry_, struct_addr_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_read<struct net_device_ops, FIELD_ndo_neigh_setup>::on(entry_, struct_addr_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_read<struct net_device_ops, FIELD_ndo_tx_timeout>::on(entry_, struct_addr_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_read<struct net_device_ops, FIELD_ndo_get_stats>::on(entry_, struct_addr_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_read<struct net_device_ops, FIELD_ndo_vlan_rx_register>::on(entry_, struct_addr_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_read<struct net_device_ops, FIELD_ndo_vlan_rx_add_vid>::on(entry_, struct_addr_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
            watch_read<struct net_device_ops, FIELD_ndo_vlan_rx_kill_vid>::on(entry_, struct_addr_);
            break;
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
            watch_read<struct net_device_ops, FIELD_ndo_poll_controller>::on(entry_, struct_addr_);
            break;
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
            watch_read<struct net_device_ops, FIELD_ndo_fcoe_enable>::on(entry_, struct_addr_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
            watch_read<struct net_device_ops, FIELD_ndo_fcoe_disable>::on(entry_, struct_addr_);
            break;
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
            watch_read<struct net_device_ops, FIELD_ndo_fcoe_ddp_setup>::on(entry_, struct_addr_);
            break;
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
            watch_read<struct net_device_ops, FIELD_ndo_fcoe_ddp_done>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct net_device_ops *struct_addr_(((struct net_device_ops *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct net_device_ops, FIELD_ndo_init>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct net_device_ops, FIELD_ndo_uninit>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct net_device_ops, FIELD_ndo_open>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct net_device_ops, FIELD_ndo_stop>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct net_device_ops, FIELD_ndo_start_xmit>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct net_device_ops, FIELD_ndo_select_queue>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct net_device_ops, FIELD_ndo_change_rx_flags>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct net_device_ops, FIELD_ndo_set_rx_mode>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct net_device_ops, FIELD_ndo_set_multicast_list>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct net_device_ops, FIELD_ndo_set_mac_address>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct net_device_ops, FIELD_ndo_validate_addr>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct net_device_ops, FIELD_ndo_do_ioctl>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_write<struct net_device_ops, FIELD_ndo_set_config>::on(entry_, struct_addr_, val_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_write<struct net_device_ops, FIELD_ndo_change_mtu>::on(entry_, struct_addr_, val_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_write<struct net_device_ops, FIELD_ndo_neigh_setup>::on(entry_, struct_addr_, val_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_write<struct net_device_ops, FIELD_ndo_tx_timeout>::on(entry_, struct_addr_, val_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_write<struct net_device_ops, FIELD_ndo_get_stats>::on(entry_, struct_addr_, val_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_write<struct net_device_ops, FIELD_ndo_vlan_rx_register>::on(entry_, struct_addr_, val_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_write<struct net_device_ops, FIELD_ndo_vlan_rx_add_vid>::on(entry_, struct_addr_, val_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
            watch_write<struct net_device_ops, FIELD_ndo_vlan_rx_kill_vid>::on(entry_, struct_addr_, val_);
            break;
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
            watch_write<struct net_device_ops, FIELD_ndo_poll_controller>::on(entry_, struct_addr_, val_);
            break;
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
            watch_write<struct net_device_ops, FIELD_ndo_fcoe_enable>::on(entry_, struct_addr_, val_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
            watch_write<struct net_device_ops, FIELD_ndo_fcoe_disable>::on(entry_, struct_addr_, val_);
            break;
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
            watch_write<struct net_device_ops, FIELD_ndo_fcoe_ddp_setup>::on(entry_, struct_addr_, val_);
            break;
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
            watch_write<struct net_device_ops, FIELD_ndo_fcoe_ddp_done>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct super_operations> {
    enum { TYPE_SIZE = sizeof(struct super_operations) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct super_operations *struct_addr_(((struct super_operations *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct super_operations, FIELD_alloc_inode>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct super_operations, FIELD_destroy_inode>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct super_operations, FIELD_dirty_inode>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct super_operations, FIELD_write_inode>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct super_operations, FIELD_drop_inode>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct super_operations, FIELD_delete_inode>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct super_operations, FIELD_put_super>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct super_operations, FIELD_write_super>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct super_operations, FIELD_sync_fs>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct super_operations, FIELD_freeze_fs>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct super_operations, FIELD_unfreeze_fs>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct super_operations, FIELD_statfs>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_read<struct super_operations, FIELD_remount_fs>::on(entry_, struct_addr_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_read<struct super_operations, FIELD_clear_inode>::on(entry_, struct_addr_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_read<struct super_operations, FIELD_umount_begin>::on(entry_, struct_addr_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_read<struct super_operations, FIELD_show_options>::on(entry_, struct_addr_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_read<struct super_operations, FIELD_show_stats>::on(entry_, struct_addr_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_read<struct super_operations, FIELD_quota_read>::on(entry_, struct_addr_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_read<struct super_operations, FIELD_quota_write>::on(entry_, struct_addr_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
            watch_read<struct super_operations, FIELD_bdev_try_to_free_page>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct super_operations *struct_addr_(((struct super_operations *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct super_operations, FIELD_alloc_inode>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct super_operations, FIELD_destroy_inode>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct super_operations, FIELD_dirty_inode>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct super_operations, FIELD_write_inode>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct super_operations, FIELD_drop_inode>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct super_operations, FIELD_delete_inode>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct super_operations, FIELD_put_super>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct super_operations, FIELD_write_super>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct super_operations, FIELD_sync_fs>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct super_operations, FIELD_freeze_fs>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct super_operations, FIELD_unfreeze_fs>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct super_operations, FIELD_statfs>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_write<struct super_operations, FIELD_remount_fs>::on(entry_, struct_addr_, val_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_write<struct super_operations, FIELD_clear_inode>::on(entry_, struct_addr_, val_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_write<struct super_operations, FIELD_umount_begin>::on(entry_, struct_addr_, val_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_write<struct super_operations, FIELD_show_options>::on(entry_, struct_addr_, val_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_write<struct super_operations, FIELD_show_stats>::on(entry_, struct_addr_, val_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_write<struct super_operations, FIELD_quota_read>::on(entry_, struct_addr_, val_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_write<struct super_operations, FIELD_quota_write>::on(entry_, struct_addr_, val_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
            watch_write<struct super_operations, FIELD_bdev_try_to_free_page>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, substring_t> {
    enum { TYPE_SIZE = sizeof(substring_t) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        substring_t *struct_addr_(((substring_t *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<substring_t, FIELD_from>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<substring_t, FIELD_to>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        substring_t *struct_addr_(((substring_t *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<substring_t, FIELD_from>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<substring_t, FIELD_to>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct device_driver> {
    enum { TYPE_SIZE = sizeof(struct device_driver) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct device_driver *struct_addr_(((struct device_driver *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct device_driver, FIELD_name>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct device_driver, FIELD_bus>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct device_driver, FIELD_owner>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct device_driver, FIELD_mod_name>::on(entry_, struct_addr_);
            break;
        case 32: 
            watch_read<struct device_driver, FIELD_suppress_bind_attrs>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct device_driver, FIELD_probe>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct device_driver, FIELD_remove>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct device_driver, FIELD_shutdown>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct device_driver, FIELD_suspend>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct device_driver, FIELD_resume>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct device_driver, FIELD_groups>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct device_driver, FIELD_pm>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_read<struct device_driver, FIELD_p>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct device_driver *struct_addr_(((struct device_driver *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct device_driver, FIELD_name>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct device_driver, FIELD_bus>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct device_driver, FIELD_owner>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct device_driver, FIELD_mod_name>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
            watch_write<struct device_driver, FIELD_suppress_bind_attrs>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct device_driver, FIELD_probe>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct device_driver, FIELD_remove>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct device_driver, FIELD_shutdown>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct device_driver, FIELD_suspend>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct device_driver, FIELD_resume>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct device_driver, FIELD_groups>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct device_driver, FIELD_pm>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_write<struct device_driver, FIELD_p>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct jbd2_stats_proc_session> {
    enum { TYPE_SIZE = sizeof(struct jbd2_stats_proc_session) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct jbd2_stats_proc_session *struct_addr_(((struct jbd2_stats_proc_session *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct jbd2_stats_proc_session, FIELD_journal>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct jbd2_stats_proc_session, FIELD_stats>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
            watch_read<struct jbd2_stats_proc_session, FIELD_start>::on(entry_, struct_addr_);
            break;
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct jbd2_stats_proc_session, FIELD_max>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct jbd2_stats_proc_session *struct_addr_(((struct jbd2_stats_proc_session *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct jbd2_stats_proc_session, FIELD_journal>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct jbd2_stats_proc_session, FIELD_stats>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
            watch_write<struct jbd2_stats_proc_session, FIELD_start>::on(entry_, struct_addr_, val_);
            break;
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct jbd2_stats_proc_session, FIELD_max>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct pci_bus> {
    enum { TYPE_SIZE = sizeof(struct pci_bus) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct pci_bus *struct_addr_(((struct pci_bus *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct pci_bus, FIELD_node>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct pci_bus, FIELD_parent>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct pci_bus, FIELD_children>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct pci_bus, FIELD_devices>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct pci_bus, FIELD_self>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct pci_bus, FIELD_slots>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
            watch_read<struct pci_bus, FIELD_resource>::on(entry_, struct_addr_);
            break;
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
            watch_read<struct pci_bus, FIELD_ops>::on(entry_, struct_addr_);
            break;
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
            watch_read<struct pci_bus, FIELD_sysdata>::on(entry_, struct_addr_);
            break;
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
            watch_read<struct pci_bus, FIELD_procdir>::on(entry_, struct_addr_);
            break;
        case 232: 
            watch_read<struct pci_bus, FIELD_number>::on(entry_, struct_addr_);
            break;
        case 233: 
            watch_read<struct pci_bus, FIELD_primary>::on(entry_, struct_addr_);
            break;
        case 234: 
            watch_read<struct pci_bus, FIELD_secondary>::on(entry_, struct_addr_);
            break;
        case 235: 
            watch_read<struct pci_bus, FIELD_subordinate>::on(entry_, struct_addr_);
            break;
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
            watch_read<struct pci_bus, FIELD_name>::on(entry_, struct_addr_);
            break;
        case 284: 
        case 285: 
            watch_read<struct pci_bus, FIELD_bridge_ctl>::on(entry_, struct_addr_);
            break;
        case 286: 
        case 287: 
            watch_read<struct pci_bus, FIELD_bus_flags>::on(entry_, struct_addr_);
            break;
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
            watch_read<struct pci_bus, FIELD_bridge>::on(entry_, struct_addr_);
            break;
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
        case 528: 
        case 529: 
        case 530: 
        case 531: 
        case 532: 
        case 533: 
        case 534: 
        case 535: 
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
        case 544: 
        case 545: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
        case 552: 
        case 553: 
        case 554: 
        case 555: 
        case 556: 
        case 557: 
        case 558: 
        case 559: 
        case 560: 
        case 561: 
        case 562: 
        case 563: 
        case 564: 
        case 565: 
        case 566: 
        case 567: 
        case 568: 
        case 569: 
        case 570: 
        case 571: 
        case 572: 
        case 573: 
        case 574: 
        case 575: 
        case 576: 
        case 577: 
        case 578: 
        case 579: 
        case 580: 
        case 581: 
        case 582: 
        case 583: 
        case 584: 
        case 585: 
        case 586: 
        case 587: 
        case 588: 
        case 589: 
        case 590: 
        case 591: 
        case 592: 
        case 593: 
        case 594: 
        case 595: 
        case 596: 
        case 597: 
        case 598: 
        case 599: 
        case 600: 
        case 601: 
        case 602: 
        case 603: 
        case 604: 
        case 605: 
        case 606: 
        case 607: 
        case 608: 
        case 609: 
        case 610: 
        case 611: 
        case 612: 
        case 613: 
        case 614: 
        case 615: 
        case 616: 
        case 617: 
        case 618: 
        case 619: 
        case 620: 
        case 621: 
        case 622: 
        case 623: 
        case 624: 
        case 625: 
        case 626: 
        case 627: 
        case 628: 
        case 629: 
        case 630: 
        case 631: 
        case 632: 
        case 633: 
        case 634: 
        case 635: 
        case 636: 
        case 637: 
        case 638: 
        case 639: 
        case 640: 
        case 641: 
        case 642: 
        case 643: 
        case 644: 
        case 645: 
        case 646: 
        case 647: 
        case 648: 
        case 649: 
        case 650: 
        case 651: 
        case 652: 
        case 653: 
        case 654: 
        case 655: 
        case 656: 
        case 657: 
        case 658: 
        case 659: 
        case 660: 
        case 661: 
        case 662: 
        case 663: 
        case 664: 
        case 665: 
        case 666: 
        case 667: 
        case 668: 
        case 669: 
        case 670: 
        case 671: 
        case 672: 
        case 673: 
        case 674: 
        case 675: 
        case 676: 
        case 677: 
        case 678: 
        case 679: 
        case 680: 
        case 681: 
        case 682: 
        case 683: 
        case 684: 
        case 685: 
        case 686: 
        case 687: 
        case 688: 
        case 689: 
        case 690: 
        case 691: 
        case 692: 
        case 693: 
        case 694: 
        case 695: 
        case 696: 
        case 697: 
        case 698: 
        case 699: 
        case 700: 
        case 701: 
        case 702: 
        case 703: 
        case 704: 
        case 705: 
        case 706: 
        case 707: 
        case 708: 
        case 709: 
        case 710: 
        case 711: 
        case 712: 
        case 713: 
        case 714: 
        case 715: 
        case 716: 
        case 717: 
        case 718: 
        case 719: 
        case 720: 
        case 721: 
        case 722: 
        case 723: 
        case 724: 
        case 725: 
        case 726: 
        case 727: 
        case 728: 
        case 729: 
        case 730: 
        case 731: 
        case 732: 
        case 733: 
        case 734: 
        case 735: 
        case 736: 
        case 737: 
        case 738: 
        case 739: 
        case 740: 
        case 741: 
        case 742: 
        case 743: 
        case 744: 
        case 745: 
        case 746: 
        case 747: 
        case 748: 
        case 749: 
        case 750: 
        case 751: 
        case 752: 
        case 753: 
        case 754: 
        case 755: 
        case 756: 
        case 757: 
        case 758: 
        case 759: 
        case 760: 
        case 761: 
        case 762: 
        case 763: 
        case 764: 
        case 765: 
        case 766: 
        case 767: 
        case 768: 
        case 769: 
        case 770: 
        case 771: 
        case 772: 
        case 773: 
        case 774: 
        case 775: 
        case 776: 
        case 777: 
        case 778: 
        case 779: 
        case 780: 
        case 781: 
        case 782: 
        case 783: 
        case 784: 
        case 785: 
        case 786: 
        case 787: 
        case 788: 
        case 789: 
        case 790: 
        case 791: 
        case 792: 
        case 793: 
        case 794: 
        case 795: 
        case 796: 
        case 797: 
        case 798: 
        case 799: 
        case 800: 
        case 801: 
        case 802: 
        case 803: 
        case 804: 
        case 805: 
        case 806: 
        case 807: 
            watch_read<struct pci_bus, FIELD_dev>::on(entry_, struct_addr_);
            break;
        case 808: 
        case 809: 
        case 810: 
        case 811: 
        case 812: 
        case 813: 
        case 814: 
        case 815: 
            watch_read<struct pci_bus, FIELD_legacy_io>::on(entry_, struct_addr_);
            break;
        case 816: 
        case 817: 
        case 818: 
        case 819: 
        case 820: 
        case 821: 
        case 822: 
        case 823: 
            watch_read<struct pci_bus, FIELD_legacy_mem>::on(entry_, struct_addr_);
            break;
        case 824: 
            watch_read<struct pci_bus, FIELD_is_added>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct pci_bus *struct_addr_(((struct pci_bus *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct pci_bus, FIELD_node>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct pci_bus, FIELD_parent>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct pci_bus, FIELD_children>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct pci_bus, FIELD_devices>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct pci_bus, FIELD_self>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct pci_bus, FIELD_slots>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
            watch_write<struct pci_bus, FIELD_resource>::on(entry_, struct_addr_, val_);
            break;
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
            watch_write<struct pci_bus, FIELD_ops>::on(entry_, struct_addr_, val_);
            break;
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
            watch_write<struct pci_bus, FIELD_sysdata>::on(entry_, struct_addr_, val_);
            break;
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
            watch_write<struct pci_bus, FIELD_procdir>::on(entry_, struct_addr_, val_);
            break;
        case 232: 
            watch_write<struct pci_bus, FIELD_number>::on(entry_, struct_addr_, val_);
            break;
        case 233: 
            watch_write<struct pci_bus, FIELD_primary>::on(entry_, struct_addr_, val_);
            break;
        case 234: 
            watch_write<struct pci_bus, FIELD_secondary>::on(entry_, struct_addr_, val_);
            break;
        case 235: 
            watch_write<struct pci_bus, FIELD_subordinate>::on(entry_, struct_addr_, val_);
            break;
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
            watch_write<struct pci_bus, FIELD_name>::on(entry_, struct_addr_, val_);
            break;
        case 284: 
        case 285: 
            watch_write<struct pci_bus, FIELD_bridge_ctl>::on(entry_, struct_addr_, val_);
            break;
        case 286: 
        case 287: 
            watch_write<struct pci_bus, FIELD_bus_flags>::on(entry_, struct_addr_, val_);
            break;
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
            watch_write<struct pci_bus, FIELD_bridge>::on(entry_, struct_addr_, val_);
            break;
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
        case 528: 
        case 529: 
        case 530: 
        case 531: 
        case 532: 
        case 533: 
        case 534: 
        case 535: 
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
        case 544: 
        case 545: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
        case 552: 
        case 553: 
        case 554: 
        case 555: 
        case 556: 
        case 557: 
        case 558: 
        case 559: 
        case 560: 
        case 561: 
        case 562: 
        case 563: 
        case 564: 
        case 565: 
        case 566: 
        case 567: 
        case 568: 
        case 569: 
        case 570: 
        case 571: 
        case 572: 
        case 573: 
        case 574: 
        case 575: 
        case 576: 
        case 577: 
        case 578: 
        case 579: 
        case 580: 
        case 581: 
        case 582: 
        case 583: 
        case 584: 
        case 585: 
        case 586: 
        case 587: 
        case 588: 
        case 589: 
        case 590: 
        case 591: 
        case 592: 
        case 593: 
        case 594: 
        case 595: 
        case 596: 
        case 597: 
        case 598: 
        case 599: 
        case 600: 
        case 601: 
        case 602: 
        case 603: 
        case 604: 
        case 605: 
        case 606: 
        case 607: 
        case 608: 
        case 609: 
        case 610: 
        case 611: 
        case 612: 
        case 613: 
        case 614: 
        case 615: 
        case 616: 
        case 617: 
        case 618: 
        case 619: 
        case 620: 
        case 621: 
        case 622: 
        case 623: 
        case 624: 
        case 625: 
        case 626: 
        case 627: 
        case 628: 
        case 629: 
        case 630: 
        case 631: 
        case 632: 
        case 633: 
        case 634: 
        case 635: 
        case 636: 
        case 637: 
        case 638: 
        case 639: 
        case 640: 
        case 641: 
        case 642: 
        case 643: 
        case 644: 
        case 645: 
        case 646: 
        case 647: 
        case 648: 
        case 649: 
        case 650: 
        case 651: 
        case 652: 
        case 653: 
        case 654: 
        case 655: 
        case 656: 
        case 657: 
        case 658: 
        case 659: 
        case 660: 
        case 661: 
        case 662: 
        case 663: 
        case 664: 
        case 665: 
        case 666: 
        case 667: 
        case 668: 
        case 669: 
        case 670: 
        case 671: 
        case 672: 
        case 673: 
        case 674: 
        case 675: 
        case 676: 
        case 677: 
        case 678: 
        case 679: 
        case 680: 
        case 681: 
        case 682: 
        case 683: 
        case 684: 
        case 685: 
        case 686: 
        case 687: 
        case 688: 
        case 689: 
        case 690: 
        case 691: 
        case 692: 
        case 693: 
        case 694: 
        case 695: 
        case 696: 
        case 697: 
        case 698: 
        case 699: 
        case 700: 
        case 701: 
        case 702: 
        case 703: 
        case 704: 
        case 705: 
        case 706: 
        case 707: 
        case 708: 
        case 709: 
        case 710: 
        case 711: 
        case 712: 
        case 713: 
        case 714: 
        case 715: 
        case 716: 
        case 717: 
        case 718: 
        case 719: 
        case 720: 
        case 721: 
        case 722: 
        case 723: 
        case 724: 
        case 725: 
        case 726: 
        case 727: 
        case 728: 
        case 729: 
        case 730: 
        case 731: 
        case 732: 
        case 733: 
        case 734: 
        case 735: 
        case 736: 
        case 737: 
        case 738: 
        case 739: 
        case 740: 
        case 741: 
        case 742: 
        case 743: 
        case 744: 
        case 745: 
        case 746: 
        case 747: 
        case 748: 
        case 749: 
        case 750: 
        case 751: 
        case 752: 
        case 753: 
        case 754: 
        case 755: 
        case 756: 
        case 757: 
        case 758: 
        case 759: 
        case 760: 
        case 761: 
        case 762: 
        case 763: 
        case 764: 
        case 765: 
        case 766: 
        case 767: 
        case 768: 
        case 769: 
        case 770: 
        case 771: 
        case 772: 
        case 773: 
        case 774: 
        case 775: 
        case 776: 
        case 777: 
        case 778: 
        case 779: 
        case 780: 
        case 781: 
        case 782: 
        case 783: 
        case 784: 
        case 785: 
        case 786: 
        case 787: 
        case 788: 
        case 789: 
        case 790: 
        case 791: 
        case 792: 
        case 793: 
        case 794: 
        case 795: 
        case 796: 
        case 797: 
        case 798: 
        case 799: 
        case 800: 
        case 801: 
        case 802: 
        case 803: 
        case 804: 
        case 805: 
        case 806: 
        case 807: 
            watch_write<struct pci_bus, FIELD_dev>::on(entry_, struct_addr_, val_);
            break;
        case 808: 
        case 809: 
        case 810: 
        case 811: 
        case 812: 
        case 813: 
        case 814: 
        case 815: 
            watch_write<struct pci_bus, FIELD_legacy_io>::on(entry_, struct_addr_, val_);
            break;
        case 816: 
        case 817: 
        case 818: 
        case 819: 
        case 820: 
        case 821: 
        case 822: 
        case 823: 
            watch_write<struct pci_bus, FIELD_legacy_mem>::on(entry_, struct_addr_, val_);
            break;
        case 824: 
            watch_write<struct pci_bus, FIELD_is_added>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct mii_if_info> {
    enum { TYPE_SIZE = sizeof(struct mii_if_info) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct mii_if_info *struct_addr_(((struct mii_if_info *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct mii_if_info, FIELD_phy_id>::on(entry_, struct_addr_);
            break;
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct mii_if_info, FIELD_advertising>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_read<struct mii_if_info, FIELD_phy_id_mask>::on(entry_, struct_addr_);
            break;
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct mii_if_info, FIELD_reg_num_mask>::on(entry_, struct_addr_);
            break;
        case 16: 
            watch_read<struct mii_if_info, FIELD_full_duplex>::on(entry_, struct_addr_);
            watch_read<struct mii_if_info, FIELD_force_media>::on(entry_, struct_addr_);
            watch_read<struct mii_if_info, FIELD_supports_gmii>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct mii_if_info, FIELD_dev>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct mii_if_info, FIELD_mdio_read>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct mii_if_info, FIELD_mdio_write>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct mii_if_info *struct_addr_(((struct mii_if_info *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct mii_if_info, FIELD_phy_id>::on(entry_, struct_addr_, val_);
            break;
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct mii_if_info, FIELD_advertising>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_write<struct mii_if_info, FIELD_phy_id_mask>::on(entry_, struct_addr_, val_);
            break;
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct mii_if_info, FIELD_reg_num_mask>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
            watch_write<struct mii_if_info, FIELD_full_duplex>::on(entry_, struct_addr_, val_);
            watch_write<struct mii_if_info, FIELD_force_media>::on(entry_, struct_addr_, val_);
            watch_write<struct mii_if_info, FIELD_supports_gmii>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct mii_if_info, FIELD_dev>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct mii_if_info, FIELD_mdio_read>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct mii_if_info, FIELD_mdio_write>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct block_device> {
    enum { TYPE_SIZE = sizeof(struct block_device) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct block_device *struct_addr_(((struct block_device *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct block_device, FIELD_bd_dev>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct block_device, FIELD_bd_inode>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct block_device, FIELD_bd_super>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
            watch_read<struct block_device, FIELD_bd_openers>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct block_device, FIELD_bd_mutex>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct block_device, FIELD_bd_inodes>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct block_device, FIELD_bd_holder>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
            watch_read<struct block_device, FIELD_bd_holders>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_read<struct block_device, FIELD_bd_holder_list>::on(entry_, struct_addr_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_read<struct block_device, FIELD_bd_contains>::on(entry_, struct_addr_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
            watch_read<struct block_device, FIELD_bd_block_size>::on(entry_, struct_addr_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_read<struct block_device, FIELD_bd_part>::on(entry_, struct_addr_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
            watch_read<struct block_device, FIELD_bd_part_count>::on(entry_, struct_addr_);
            break;
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_read<struct block_device, FIELD_bd_invalidated>::on(entry_, struct_addr_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_read<struct block_device, FIELD_bd_disk>::on(entry_, struct_addr_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
            watch_read<struct block_device, FIELD_bd_list>::on(entry_, struct_addr_);
            break;
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
            watch_read<struct block_device, FIELD_bd_private>::on(entry_, struct_addr_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
            watch_read<struct block_device, FIELD_bd_fsfreeze_count>::on(entry_, struct_addr_);
            break;
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
            watch_read<struct block_device, FIELD_bd_fsfreeze_mutex>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct block_device *struct_addr_(((struct block_device *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct block_device, FIELD_bd_dev>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct block_device, FIELD_bd_inode>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct block_device, FIELD_bd_super>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
            watch_write<struct block_device, FIELD_bd_openers>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct block_device, FIELD_bd_mutex>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct block_device, FIELD_bd_inodes>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct block_device, FIELD_bd_holder>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
            watch_write<struct block_device, FIELD_bd_holders>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_write<struct block_device, FIELD_bd_holder_list>::on(entry_, struct_addr_, val_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_write<struct block_device, FIELD_bd_contains>::on(entry_, struct_addr_, val_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
            watch_write<struct block_device, FIELD_bd_block_size>::on(entry_, struct_addr_, val_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_write<struct block_device, FIELD_bd_part>::on(entry_, struct_addr_, val_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
            watch_write<struct block_device, FIELD_bd_part_count>::on(entry_, struct_addr_, val_);
            break;
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_write<struct block_device, FIELD_bd_invalidated>::on(entry_, struct_addr_, val_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_write<struct block_device, FIELD_bd_disk>::on(entry_, struct_addr_, val_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
            watch_write<struct block_device, FIELD_bd_list>::on(entry_, struct_addr_, val_);
            break;
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
            watch_write<struct block_device, FIELD_bd_private>::on(entry_, struct_addr_, val_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
            watch_write<struct block_device, FIELD_bd_fsfreeze_count>::on(entry_, struct_addr_, val_);
            break;
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
            watch_write<struct block_device, FIELD_bd_fsfreeze_mutex>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct delayed_work> {
    enum { TYPE_SIZE = sizeof(struct delayed_work) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct delayed_work *struct_addr_(((struct delayed_work *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct delayed_work, FIELD_work>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_read<struct delayed_work, FIELD_timer>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct delayed_work *struct_addr_(((struct delayed_work *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct delayed_work, FIELD_work>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_write<struct delayed_work, FIELD_timer>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct mutex> {
    enum { TYPE_SIZE = sizeof(struct mutex) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct mutex *struct_addr_(((struct mutex *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct mutex, FIELD_count>::on(entry_, struct_addr_);
            break;
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct mutex, FIELD_wait_lock>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct mutex, FIELD_wait_list>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct mutex, FIELD_owner>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct mutex *struct_addr_(((struct mutex *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct mutex, FIELD_count>::on(entry_, struct_addr_, val_);
            break;
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct mutex, FIELD_wait_lock>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct mutex, FIELD_wait_list>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct mutex, FIELD_owner>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct sched_entity> {
    enum { TYPE_SIZE = sizeof(struct sched_entity) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct sched_entity *struct_addr_(((struct sched_entity *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct sched_entity, FIELD_load>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct sched_entity, FIELD_run_node>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct sched_entity, FIELD_group_node>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
            watch_read<struct sched_entity, FIELD_on_rq>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct sched_entity, FIELD_exec_start>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct sched_entity, FIELD_sum_exec_runtime>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct sched_entity, FIELD_vruntime>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct sched_entity, FIELD_prev_sum_exec_runtime>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_read<struct sched_entity, FIELD_last_wakeup>::on(entry_, struct_addr_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_read<struct sched_entity, FIELD_avg_overlap>::on(entry_, struct_addr_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_read<struct sched_entity, FIELD_nr_migrations>::on(entry_, struct_addr_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_read<struct sched_entity, FIELD_start_runtime>::on(entry_, struct_addr_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_read<struct sched_entity, FIELD_avg_wakeup>::on(entry_, struct_addr_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_read<struct sched_entity, FIELD_avg_running>::on(entry_, struct_addr_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_read<struct sched_entity, FIELD_wait_start>::on(entry_, struct_addr_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
            watch_read<struct sched_entity, FIELD_wait_max>::on(entry_, struct_addr_);
            break;
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
            watch_read<struct sched_entity, FIELD_wait_count>::on(entry_, struct_addr_);
            break;
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
            watch_read<struct sched_entity, FIELD_wait_sum>::on(entry_, struct_addr_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
            watch_read<struct sched_entity, FIELD_iowait_count>::on(entry_, struct_addr_);
            break;
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
            watch_read<struct sched_entity, FIELD_iowait_sum>::on(entry_, struct_addr_);
            break;
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
            watch_read<struct sched_entity, FIELD_sleep_start>::on(entry_, struct_addr_);
            break;
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
            watch_read<struct sched_entity, FIELD_sleep_max>::on(entry_, struct_addr_);
            break;
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
            watch_read<struct sched_entity, FIELD_sum_sleep_runtime>::on(entry_, struct_addr_);
            break;
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
            watch_read<struct sched_entity, FIELD_block_start>::on(entry_, struct_addr_);
            break;
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
            watch_read<struct sched_entity, FIELD_block_max>::on(entry_, struct_addr_);
            break;
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
            watch_read<struct sched_entity, FIELD_exec_max>::on(entry_, struct_addr_);
            break;
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
            watch_read<struct sched_entity, FIELD_slice_max>::on(entry_, struct_addr_);
            break;
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
            watch_read<struct sched_entity, FIELD_nr_migrations_cold>::on(entry_, struct_addr_);
            break;
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
            watch_read<struct sched_entity, FIELD_nr_failed_migrations_affine>::on(entry_, struct_addr_);
            break;
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
            watch_read<struct sched_entity, FIELD_nr_failed_migrations_running>::on(entry_, struct_addr_);
            break;
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
            watch_read<struct sched_entity, FIELD_nr_failed_migrations_hot>::on(entry_, struct_addr_);
            break;
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
            watch_read<struct sched_entity, FIELD_nr_forced_migrations>::on(entry_, struct_addr_);
            break;
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
            watch_read<struct sched_entity, FIELD_nr_forced2_migrations>::on(entry_, struct_addr_);
            break;
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
            watch_read<struct sched_entity, FIELD_nr_wakeups>::on(entry_, struct_addr_);
            break;
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
            watch_read<struct sched_entity, FIELD_nr_wakeups_sync>::on(entry_, struct_addr_);
            break;
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
            watch_read<struct sched_entity, FIELD_nr_wakeups_migrate>::on(entry_, struct_addr_);
            break;
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
            watch_read<struct sched_entity, FIELD_nr_wakeups_local>::on(entry_, struct_addr_);
            break;
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
            watch_read<struct sched_entity, FIELD_nr_wakeups_remote>::on(entry_, struct_addr_);
            break;
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
            watch_read<struct sched_entity, FIELD_nr_wakeups_affine>::on(entry_, struct_addr_);
            break;
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
            watch_read<struct sched_entity, FIELD_nr_wakeups_affine_attempts>::on(entry_, struct_addr_);
            break;
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
            watch_read<struct sched_entity, FIELD_nr_wakeups_passive>::on(entry_, struct_addr_);
            break;
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
            watch_read<struct sched_entity, FIELD_nr_wakeups_idle>::on(entry_, struct_addr_);
            break;
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
            watch_read<struct sched_entity, FIELD_parent>::on(entry_, struct_addr_);
            break;
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
            watch_read<struct sched_entity, FIELD_cfs_rq>::on(entry_, struct_addr_);
            break;
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
            watch_read<struct sched_entity, FIELD_my_q>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct sched_entity *struct_addr_(((struct sched_entity *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct sched_entity, FIELD_load>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct sched_entity, FIELD_run_node>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct sched_entity, FIELD_group_node>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
            watch_write<struct sched_entity, FIELD_on_rq>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct sched_entity, FIELD_exec_start>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct sched_entity, FIELD_sum_exec_runtime>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct sched_entity, FIELD_vruntime>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct sched_entity, FIELD_prev_sum_exec_runtime>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_write<struct sched_entity, FIELD_last_wakeup>::on(entry_, struct_addr_, val_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_write<struct sched_entity, FIELD_avg_overlap>::on(entry_, struct_addr_, val_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_write<struct sched_entity, FIELD_nr_migrations>::on(entry_, struct_addr_, val_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_write<struct sched_entity, FIELD_start_runtime>::on(entry_, struct_addr_, val_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_write<struct sched_entity, FIELD_avg_wakeup>::on(entry_, struct_addr_, val_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_write<struct sched_entity, FIELD_avg_running>::on(entry_, struct_addr_, val_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_write<struct sched_entity, FIELD_wait_start>::on(entry_, struct_addr_, val_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
            watch_write<struct sched_entity, FIELD_wait_max>::on(entry_, struct_addr_, val_);
            break;
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
            watch_write<struct sched_entity, FIELD_wait_count>::on(entry_, struct_addr_, val_);
            break;
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
            watch_write<struct sched_entity, FIELD_wait_sum>::on(entry_, struct_addr_, val_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
            watch_write<struct sched_entity, FIELD_iowait_count>::on(entry_, struct_addr_, val_);
            break;
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
            watch_write<struct sched_entity, FIELD_iowait_sum>::on(entry_, struct_addr_, val_);
            break;
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
            watch_write<struct sched_entity, FIELD_sleep_start>::on(entry_, struct_addr_, val_);
            break;
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
            watch_write<struct sched_entity, FIELD_sleep_max>::on(entry_, struct_addr_, val_);
            break;
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
            watch_write<struct sched_entity, FIELD_sum_sleep_runtime>::on(entry_, struct_addr_, val_);
            break;
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
            watch_write<struct sched_entity, FIELD_block_start>::on(entry_, struct_addr_, val_);
            break;
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
            watch_write<struct sched_entity, FIELD_block_max>::on(entry_, struct_addr_, val_);
            break;
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
            watch_write<struct sched_entity, FIELD_exec_max>::on(entry_, struct_addr_, val_);
            break;
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
            watch_write<struct sched_entity, FIELD_slice_max>::on(entry_, struct_addr_, val_);
            break;
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
            watch_write<struct sched_entity, FIELD_nr_migrations_cold>::on(entry_, struct_addr_, val_);
            break;
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
            watch_write<struct sched_entity, FIELD_nr_failed_migrations_affine>::on(entry_, struct_addr_, val_);
            break;
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
            watch_write<struct sched_entity, FIELD_nr_failed_migrations_running>::on(entry_, struct_addr_, val_);
            break;
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
            watch_write<struct sched_entity, FIELD_nr_failed_migrations_hot>::on(entry_, struct_addr_, val_);
            break;
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
            watch_write<struct sched_entity, FIELD_nr_forced_migrations>::on(entry_, struct_addr_, val_);
            break;
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
            watch_write<struct sched_entity, FIELD_nr_forced2_migrations>::on(entry_, struct_addr_, val_);
            break;
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
            watch_write<struct sched_entity, FIELD_nr_wakeups>::on(entry_, struct_addr_, val_);
            break;
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
            watch_write<struct sched_entity, FIELD_nr_wakeups_sync>::on(entry_, struct_addr_, val_);
            break;
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
            watch_write<struct sched_entity, FIELD_nr_wakeups_migrate>::on(entry_, struct_addr_, val_);
            break;
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
            watch_write<struct sched_entity, FIELD_nr_wakeups_local>::on(entry_, struct_addr_, val_);
            break;
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
            watch_write<struct sched_entity, FIELD_nr_wakeups_remote>::on(entry_, struct_addr_, val_);
            break;
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
            watch_write<struct sched_entity, FIELD_nr_wakeups_affine>::on(entry_, struct_addr_, val_);
            break;
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
            watch_write<struct sched_entity, FIELD_nr_wakeups_affine_attempts>::on(entry_, struct_addr_, val_);
            break;
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
            watch_write<struct sched_entity, FIELD_nr_wakeups_passive>::on(entry_, struct_addr_, val_);
            break;
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
            watch_write<struct sched_entity, FIELD_nr_wakeups_idle>::on(entry_, struct_addr_, val_);
            break;
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
            watch_write<struct sched_entity, FIELD_parent>::on(entry_, struct_addr_, val_);
            break;
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
            watch_write<struct sched_entity, FIELD_cfs_rq>::on(entry_, struct_addr_, val_);
            break;
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
            watch_write<struct sched_entity, FIELD_my_q>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct napi_struct> {
    enum { TYPE_SIZE = sizeof(struct napi_struct) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct napi_struct *struct_addr_(((struct napi_struct *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct napi_struct, FIELD_poll_list>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct napi_struct, FIELD_state>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
            watch_read<struct napi_struct, FIELD_weight>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct napi_struct, FIELD_poll>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
            watch_read<struct napi_struct, FIELD_poll_lock>::on(entry_, struct_addr_);
            break;
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct napi_struct, FIELD_poll_owner>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
            watch_read<struct napi_struct, FIELD_gro_count>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct napi_struct, FIELD_dev>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct napi_struct, FIELD_dev_list>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct napi_struct, FIELD_gro_list>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct napi_struct, FIELD_skb>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct napi_struct *struct_addr_(((struct napi_struct *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct napi_struct, FIELD_poll_list>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct napi_struct, FIELD_state>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
            watch_write<struct napi_struct, FIELD_weight>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct napi_struct, FIELD_poll>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
            watch_write<struct napi_struct, FIELD_poll_lock>::on(entry_, struct_addr_, val_);
            break;
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct napi_struct, FIELD_poll_owner>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
            watch_write<struct napi_struct, FIELD_gro_count>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct napi_struct, FIELD_dev>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct napi_struct, FIELD_dev_list>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct napi_struct, FIELD_gro_list>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct napi_struct, FIELD_skb>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct prop_local_single> {
    enum { TYPE_SIZE = sizeof(struct prop_local_single) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct prop_local_single *struct_addr_(((struct prop_local_single *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct prop_local_single, FIELD_events>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct prop_local_single, FIELD_period>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
            watch_read<struct prop_local_single, FIELD_shift>::on(entry_, struct_addr_);
            break;
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct prop_local_single, FIELD_lock>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct prop_local_single *struct_addr_(((struct prop_local_single *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct prop_local_single, FIELD_events>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct prop_local_single, FIELD_period>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
            watch_write<struct prop_local_single, FIELD_shift>::on(entry_, struct_addr_, val_);
            break;
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct prop_local_single, FIELD_lock>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct xenbus_watch> {
    enum { TYPE_SIZE = sizeof(struct xenbus_watch) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct xenbus_watch *struct_addr_(((struct xenbus_watch *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct xenbus_watch, FIELD_list>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct xenbus_watch, FIELD_node>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct xenbus_watch, FIELD_callback>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct xenbus_watch *struct_addr_(((struct xenbus_watch *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct xenbus_watch, FIELD_list>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct xenbus_watch, FIELD_node>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct xenbus_watch, FIELD_callback>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct task_io_accounting> {
    enum { TYPE_SIZE = sizeof(struct task_io_accounting) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct task_io_accounting *struct_addr_(((struct task_io_accounting *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct task_io_accounting, FIELD_rchar>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct task_io_accounting, FIELD_wchar>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct task_io_accounting, FIELD_syscr>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct task_io_accounting, FIELD_syscw>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct task_io_accounting, FIELD_read_bytes>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct task_io_accounting, FIELD_write_bytes>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct task_io_accounting, FIELD_cancelled_write_bytes>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct task_io_accounting *struct_addr_(((struct task_io_accounting *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct task_io_accounting, FIELD_rchar>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct task_io_accounting, FIELD_wchar>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct task_io_accounting, FIELD_syscr>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct task_io_accounting, FIELD_syscw>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct task_io_accounting, FIELD_read_bytes>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct task_io_accounting, FIELD_write_bytes>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct task_io_accounting, FIELD_cancelled_write_bytes>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct timespec> {
    enum { TYPE_SIZE = sizeof(struct timespec) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct timespec *struct_addr_(((struct timespec *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct timespec, FIELD_tv_sec>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct timespec, FIELD_tv_nsec>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct timespec *struct_addr_(((struct timespec *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct timespec, FIELD_tv_sec>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct timespec, FIELD_tv_nsec>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct desc_struct> {
    enum { TYPE_SIZE = sizeof(struct desc_struct) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct desc_struct *struct_addr_(((struct desc_struct *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
            watch_read<struct desc_struct, FIELD_limit0>::on(entry_, struct_addr_);
            watch_read<struct desc_struct, FIELD_a>::on(entry_, struct_addr_);
            break;
        case 2: 
        case 3: 
            watch_read<struct desc_struct, FIELD_a>::on(entry_, struct_addr_);
            watch_read<struct desc_struct, FIELD_base0>::on(entry_, struct_addr_);
            break;
        case 4: 
            watch_read<struct desc_struct, FIELD_b>::on(entry_, struct_addr_);
            watch_read<struct desc_struct, FIELD_base1>::on(entry_, struct_addr_);
            break;
        case 5: 
            watch_read<struct desc_struct, FIELD_b>::on(entry_, struct_addr_);
            watch_read<struct desc_struct, FIELD_type>::on(entry_, struct_addr_);
            watch_read<struct desc_struct, FIELD_s>::on(entry_, struct_addr_);
            watch_read<struct desc_struct, FIELD_dpl>::on(entry_, struct_addr_);
            watch_read<struct desc_struct, FIELD_p>::on(entry_, struct_addr_);
            break;
        case 6: 
            watch_read<struct desc_struct, FIELD_b>::on(entry_, struct_addr_);
            watch_read<struct desc_struct, FIELD_limit>::on(entry_, struct_addr_);
            watch_read<struct desc_struct, FIELD_avl>::on(entry_, struct_addr_);
            watch_read<struct desc_struct, FIELD_l>::on(entry_, struct_addr_);
            watch_read<struct desc_struct, FIELD_d>::on(entry_, struct_addr_);
            watch_read<struct desc_struct, FIELD_g>::on(entry_, struct_addr_);
            break;
        case 7: 
            watch_read<struct desc_struct, FIELD_b>::on(entry_, struct_addr_);
            watch_read<struct desc_struct, FIELD_base2>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct desc_struct *struct_addr_(((struct desc_struct *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
            watch_write<struct desc_struct, FIELD_limit0>::on(entry_, struct_addr_, val_);
            watch_write<struct desc_struct, FIELD_a>::on(entry_, struct_addr_, val_);
            break;
        case 2: 
        case 3: 
            watch_write<struct desc_struct, FIELD_a>::on(entry_, struct_addr_, val_);
            watch_write<struct desc_struct, FIELD_base0>::on(entry_, struct_addr_, val_);
            break;
        case 4: 
            watch_write<struct desc_struct, FIELD_b>::on(entry_, struct_addr_, val_);
            watch_write<struct desc_struct, FIELD_base1>::on(entry_, struct_addr_, val_);
            break;
        case 5: 
            watch_write<struct desc_struct, FIELD_b>::on(entry_, struct_addr_, val_);
            watch_write<struct desc_struct, FIELD_type>::on(entry_, struct_addr_, val_);
            watch_write<struct desc_struct, FIELD_s>::on(entry_, struct_addr_, val_);
            watch_write<struct desc_struct, FIELD_dpl>::on(entry_, struct_addr_, val_);
            watch_write<struct desc_struct, FIELD_p>::on(entry_, struct_addr_, val_);
            break;
        case 6: 
            watch_write<struct desc_struct, FIELD_b>::on(entry_, struct_addr_, val_);
            watch_write<struct desc_struct, FIELD_limit>::on(entry_, struct_addr_, val_);
            watch_write<struct desc_struct, FIELD_avl>::on(entry_, struct_addr_, val_);
            watch_write<struct desc_struct, FIELD_l>::on(entry_, struct_addr_, val_);
            watch_write<struct desc_struct, FIELD_d>::on(entry_, struct_addr_, val_);
            watch_write<struct desc_struct, FIELD_g>::on(entry_, struct_addr_, val_);
            break;
        case 7: 
            watch_write<struct desc_struct, FIELD_b>::on(entry_, struct_addr_, val_);
            watch_write<struct desc_struct, FIELD_base2>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct plist_node> {
    enum { TYPE_SIZE = sizeof(struct plist_node) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct plist_node *struct_addr_(((struct plist_node *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct plist_node, FIELD_prio>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct plist_node, FIELD_plist>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct plist_node *struct_addr_(((struct plist_node *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct plist_node, FIELD_prio>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct plist_node, FIELD_plist>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct elf64_sym> {
    enum { TYPE_SIZE = sizeof(struct elf64_sym) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct elf64_sym *struct_addr_(((struct elf64_sym *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct elf64_sym, FIELD_st_name>::on(entry_, struct_addr_);
            break;
        case 4: 
            watch_read<struct elf64_sym, FIELD_st_info>::on(entry_, struct_addr_);
            break;
        case 5: 
            watch_read<struct elf64_sym, FIELD_st_other>::on(entry_, struct_addr_);
            break;
        case 6: 
        case 7: 
            watch_read<struct elf64_sym, FIELD_st_shndx>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct elf64_sym, FIELD_st_value>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct elf64_sym, FIELD_st_size>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct elf64_sym *struct_addr_(((struct elf64_sym *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct elf64_sym, FIELD_st_name>::on(entry_, struct_addr_, val_);
            break;
        case 4: 
            watch_write<struct elf64_sym, FIELD_st_info>::on(entry_, struct_addr_, val_);
            break;
        case 5: 
            watch_write<struct elf64_sym, FIELD_st_other>::on(entry_, struct_addr_, val_);
            break;
        case 6: 
        case 7: 
            watch_write<struct elf64_sym, FIELD_st_shndx>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct elf64_sym, FIELD_st_value>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct elf64_sym, FIELD_st_size>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct kmem_cache_node> {
    enum { TYPE_SIZE = sizeof(struct kmem_cache_node) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct kmem_cache_node *struct_addr_(((struct kmem_cache_node *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct kmem_cache_node, FIELD_list_lock>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct kmem_cache_node, FIELD_nr_partial>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct kmem_cache_node, FIELD_partial>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct kmem_cache_node, FIELD_nr_slabs>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct kmem_cache_node, FIELD_total_objects>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct kmem_cache_node, FIELD_full>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct kmem_cache_node *struct_addr_(((struct kmem_cache_node *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct kmem_cache_node, FIELD_list_lock>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct kmem_cache_node, FIELD_nr_partial>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct kmem_cache_node, FIELD_partial>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct kmem_cache_node, FIELD_nr_slabs>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct kmem_cache_node, FIELD_total_objects>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct kmem_cache_node, FIELD_full>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct journal_head> {
    enum { TYPE_SIZE = sizeof(struct journal_head) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct journal_head *struct_addr_(((struct journal_head *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct journal_head, FIELD_b_bh>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_read<struct journal_head, FIELD_b_jcount>::on(entry_, struct_addr_);
            break;
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct journal_head, FIELD_b_jlist>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
            watch_read<struct journal_head, FIELD_b_modified>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct journal_head, FIELD_b_frozen_data>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct journal_head, FIELD_b_committed_data>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct journal_head, FIELD_b_transaction>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct journal_head, FIELD_b_next_transaction>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct journal_head, FIELD_b_tnext>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct journal_head, FIELD_b_tprev>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct journal_head, FIELD_b_cp_transaction>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct journal_head, FIELD_b_cpnext>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct journal_head, FIELD_b_cpprev>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_read<struct journal_head, FIELD_b_triggers>::on(entry_, struct_addr_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_read<struct journal_head, FIELD_b_frozen_triggers>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct journal_head *struct_addr_(((struct journal_head *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct journal_head, FIELD_b_bh>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_write<struct journal_head, FIELD_b_jcount>::on(entry_, struct_addr_, val_);
            break;
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct journal_head, FIELD_b_jlist>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
            watch_write<struct journal_head, FIELD_b_modified>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct journal_head, FIELD_b_frozen_data>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct journal_head, FIELD_b_committed_data>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct journal_head, FIELD_b_transaction>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct journal_head, FIELD_b_next_transaction>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct journal_head, FIELD_b_tnext>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct journal_head, FIELD_b_tprev>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct journal_head, FIELD_b_cp_transaction>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct journal_head, FIELD_b_cpnext>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct journal_head, FIELD_b_cpprev>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_write<struct journal_head, FIELD_b_triggers>::on(entry_, struct_addr_, val_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_write<struct journal_head, FIELD_b_frozen_triggers>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, read_descriptor_t> {
    enum { TYPE_SIZE = sizeof(read_descriptor_t) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        read_descriptor_t *struct_addr_(((read_descriptor_t *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<read_descriptor_t, FIELD_written>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<read_descriptor_t, FIELD_count>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<read_descriptor_t, FIELD_arg>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
            watch_read<read_descriptor_t, FIELD_error>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        read_descriptor_t *struct_addr_(((read_descriptor_t *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<read_descriptor_t, FIELD_written>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<read_descriptor_t, FIELD_count>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<read_descriptor_t, FIELD_arg>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
            watch_write<read_descriptor_t, FIELD_error>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct raw_spinlock> {
    enum { TYPE_SIZE = sizeof(struct raw_spinlock) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct raw_spinlock *struct_addr_(((struct raw_spinlock *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct raw_spinlock, FIELD_slock>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct raw_spinlock *struct_addr_(((struct raw_spinlock *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct raw_spinlock, FIELD_slock>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct thread_info> {
    enum { TYPE_SIZE = sizeof(struct thread_info) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct thread_info *struct_addr_(((struct thread_info *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct thread_info, FIELD_spill_slot>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct thread_info, FIELD_task>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct thread_info, FIELD_exec_domain>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
            watch_read<struct thread_info, FIELD_flags>::on(entry_, struct_addr_);
            break;
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct thread_info, FIELD_status>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
            watch_read<struct thread_info, FIELD_cpu>::on(entry_, struct_addr_);
            break;
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct thread_info, FIELD_preempt_count>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct thread_info, FIELD_addr_limit>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_read<struct thread_info, FIELD_restart_block>::on(entry_, struct_addr_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_read<struct thread_info, FIELD_sysenter_return>::on(entry_, struct_addr_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
            watch_read<struct thread_info, FIELD_uaccess_err>::on(entry_, struct_addr_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
            watch_read<struct thread_info, FIELD_client_data>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct thread_info *struct_addr_(((struct thread_info *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct thread_info, FIELD_spill_slot>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct thread_info, FIELD_task>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct thread_info, FIELD_exec_domain>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
            watch_write<struct thread_info, FIELD_flags>::on(entry_, struct_addr_, val_);
            break;
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct thread_info, FIELD_status>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
            watch_write<struct thread_info, FIELD_cpu>::on(entry_, struct_addr_, val_);
            break;
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct thread_info, FIELD_preempt_count>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct thread_info, FIELD_addr_limit>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_write<struct thread_info, FIELD_restart_block>::on(entry_, struct_addr_, val_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_write<struct thread_info, FIELD_sysenter_return>::on(entry_, struct_addr_, val_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
            watch_write<struct thread_info, FIELD_uaccess_err>::on(entry_, struct_addr_, val_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
            watch_write<struct thread_info, FIELD_client_data>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct quota_info> {
    enum { TYPE_SIZE = sizeof(struct quota_info) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct quota_info *struct_addr_(((struct quota_info *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct quota_info, FIELD_flags>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct quota_info, FIELD_dqio_mutex>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct quota_info, FIELD_dqonoff_mutex>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_read<struct quota_info, FIELD_dqptr_sem>::on(entry_, struct_addr_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_read<struct quota_info, FIELD_files>::on(entry_, struct_addr_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
            watch_read<struct quota_info, FIELD_info>::on(entry_, struct_addr_);
            break;
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
            watch_read<struct quota_info, FIELD_ops>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct quota_info *struct_addr_(((struct quota_info *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct quota_info, FIELD_flags>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct quota_info, FIELD_dqio_mutex>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct quota_info, FIELD_dqonoff_mutex>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_write<struct quota_info, FIELD_dqptr_sem>::on(entry_, struct_addr_, val_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_write<struct quota_info, FIELD_files>::on(entry_, struct_addr_, val_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
            watch_write<struct quota_info, FIELD_info>::on(entry_, struct_addr_, val_);
            break;
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
            watch_write<struct quota_info, FIELD_ops>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct pm_message> {
    enum { TYPE_SIZE = sizeof(struct pm_message) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct pm_message *struct_addr_(((struct pm_message *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct pm_message, FIELD_event>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct pm_message *struct_addr_(((struct pm_message *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct pm_message, FIELD_event>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct quotactl_ops> {
    enum { TYPE_SIZE = sizeof(struct quotactl_ops) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct quotactl_ops *struct_addr_(((struct quotactl_ops *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct quotactl_ops, FIELD_quota_on>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct quotactl_ops, FIELD_quota_off>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct quotactl_ops, FIELD_quota_sync>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct quotactl_ops, FIELD_get_info>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct quotactl_ops, FIELD_set_info>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct quotactl_ops, FIELD_get_dqblk>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct quotactl_ops, FIELD_set_dqblk>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct quotactl_ops, FIELD_get_xstate>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct quotactl_ops, FIELD_set_xstate>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct quotactl_ops, FIELD_get_xquota>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct quotactl_ops, FIELD_set_xquota>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct quotactl_ops *struct_addr_(((struct quotactl_ops *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct quotactl_ops, FIELD_quota_on>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct quotactl_ops, FIELD_quota_off>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct quotactl_ops, FIELD_quota_sync>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct quotactl_ops, FIELD_get_info>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct quotactl_ops, FIELD_set_info>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct quotactl_ops, FIELD_get_dqblk>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct quotactl_ops, FIELD_set_dqblk>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct quotactl_ops, FIELD_get_xstate>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct quotactl_ops, FIELD_set_xstate>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct quotactl_ops, FIELD_get_xquota>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct quotactl_ops, FIELD_set_xquota>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct kref> {
    enum { TYPE_SIZE = sizeof(struct kref) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct kref *struct_addr_(((struct kref *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct kref, FIELD_refcount>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct kref *struct_addr_(((struct kref *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct kref, FIELD_refcount>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct qstr> {
    enum { TYPE_SIZE = sizeof(struct qstr) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct qstr *struct_addr_(((struct qstr *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct qstr, FIELD_hash>::on(entry_, struct_addr_);
            break;
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct qstr, FIELD_len>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct qstr, FIELD_name>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct qstr *struct_addr_(((struct qstr *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct qstr, FIELD_hash>::on(entry_, struct_addr_, val_);
            break;
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct qstr, FIELD_len>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct qstr, FIELD_name>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct work_struct> {
    enum { TYPE_SIZE = sizeof(struct work_struct) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct work_struct *struct_addr_(((struct work_struct *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct work_struct, FIELD_data>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct work_struct, FIELD_entry>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct work_struct, FIELD_func>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct work_struct *struct_addr_(((struct work_struct *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct work_struct, FIELD_data>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct work_struct, FIELD_entry>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct work_struct, FIELD_func>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct file_operations> {
    enum { TYPE_SIZE = sizeof(struct file_operations) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct file_operations *struct_addr_(((struct file_operations *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct file_operations, FIELD_owner>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct file_operations, FIELD_llseek>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct file_operations, FIELD_read>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct file_operations, FIELD_write>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct file_operations, FIELD_aio_read>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct file_operations, FIELD_aio_write>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct file_operations, FIELD_readdir>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct file_operations, FIELD_poll>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct file_operations, FIELD_ioctl>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct file_operations, FIELD_unlocked_ioctl>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct file_operations, FIELD_compat_ioctl>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct file_operations, FIELD_mmap>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_read<struct file_operations, FIELD_open>::on(entry_, struct_addr_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_read<struct file_operations, FIELD_flush>::on(entry_, struct_addr_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_read<struct file_operations, FIELD_release>::on(entry_, struct_addr_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_read<struct file_operations, FIELD_fsync>::on(entry_, struct_addr_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_read<struct file_operations, FIELD_aio_fsync>::on(entry_, struct_addr_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_read<struct file_operations, FIELD_fasync>::on(entry_, struct_addr_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_read<struct file_operations, FIELD_lock>::on(entry_, struct_addr_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
            watch_read<struct file_operations, FIELD_sendpage>::on(entry_, struct_addr_);
            break;
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
            watch_read<struct file_operations, FIELD_get_unmapped_area>::on(entry_, struct_addr_);
            break;
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
            watch_read<struct file_operations, FIELD_check_flags>::on(entry_, struct_addr_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
            watch_read<struct file_operations, FIELD_flock>::on(entry_, struct_addr_);
            break;
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
            watch_read<struct file_operations, FIELD_splice_write>::on(entry_, struct_addr_);
            break;
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
            watch_read<struct file_operations, FIELD_splice_read>::on(entry_, struct_addr_);
            break;
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
            watch_read<struct file_operations, FIELD_setlease>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct file_operations *struct_addr_(((struct file_operations *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct file_operations, FIELD_owner>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct file_operations, FIELD_llseek>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct file_operations, FIELD_read>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct file_operations, FIELD_write>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct file_operations, FIELD_aio_read>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct file_operations, FIELD_aio_write>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct file_operations, FIELD_readdir>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct file_operations, FIELD_poll>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct file_operations, FIELD_ioctl>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct file_operations, FIELD_unlocked_ioctl>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct file_operations, FIELD_compat_ioctl>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct file_operations, FIELD_mmap>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_write<struct file_operations, FIELD_open>::on(entry_, struct_addr_, val_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_write<struct file_operations, FIELD_flush>::on(entry_, struct_addr_, val_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_write<struct file_operations, FIELD_release>::on(entry_, struct_addr_, val_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_write<struct file_operations, FIELD_fsync>::on(entry_, struct_addr_, val_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_write<struct file_operations, FIELD_aio_fsync>::on(entry_, struct_addr_, val_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_write<struct file_operations, FIELD_fasync>::on(entry_, struct_addr_, val_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_write<struct file_operations, FIELD_lock>::on(entry_, struct_addr_, val_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
            watch_write<struct file_operations, FIELD_sendpage>::on(entry_, struct_addr_, val_);
            break;
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
            watch_write<struct file_operations, FIELD_get_unmapped_area>::on(entry_, struct_addr_, val_);
            break;
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
            watch_write<struct file_operations, FIELD_check_flags>::on(entry_, struct_addr_, val_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
            watch_write<struct file_operations, FIELD_flock>::on(entry_, struct_addr_, val_);
            break;
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
            watch_write<struct file_operations, FIELD_splice_write>::on(entry_, struct_addr_, val_);
            break;
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
            watch_write<struct file_operations, FIELD_splice_read>::on(entry_, struct_addr_, val_);
            break;
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
            watch_write<struct file_operations, FIELD_setlease>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct klist_node> {
    enum { TYPE_SIZE = sizeof(struct klist_node) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct klist_node *struct_addr_(((struct klist_node *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct klist_node, FIELD_n_klist>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct klist_node, FIELD_n_node>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
            watch_read<struct klist_node, FIELD_n_ref>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct klist_node *struct_addr_(((struct klist_node *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct klist_node, FIELD_n_klist>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct klist_node, FIELD_n_node>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
            watch_write<struct klist_node, FIELD_n_ref>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct journal_header_s> {
    enum { TYPE_SIZE = sizeof(struct journal_header_s) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct journal_header_s *struct_addr_(((struct journal_header_s *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct journal_header_s, FIELD_h_magic>::on(entry_, struct_addr_);
            break;
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct journal_header_s, FIELD_h_blocktype>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_read<struct journal_header_s, FIELD_h_sequence>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct journal_header_s *struct_addr_(((struct journal_header_s *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct journal_header_s, FIELD_h_magic>::on(entry_, struct_addr_, val_);
            break;
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct journal_header_s, FIELD_h_blocktype>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_write<struct journal_header_s, FIELD_h_sequence>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct sk_buff> {
    enum { TYPE_SIZE = sizeof(struct sk_buff) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct sk_buff *struct_addr_(((struct sk_buff *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct sk_buff, FIELD_next>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct sk_buff, FIELD_prev>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct sk_buff, FIELD_sk>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct sk_buff, FIELD_tstamp>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct sk_buff, FIELD_dev>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct sk_buff, FIELD__skb_dst>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct sk_buff, FIELD_cb>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
            watch_read<struct sk_buff, FIELD_len>::on(entry_, struct_addr_);
            break;
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_read<struct sk_buff, FIELD_data_len>::on(entry_, struct_addr_);
            break;
        case 104: 
        case 105: 
            watch_read<struct sk_buff, FIELD_mac_len>::on(entry_, struct_addr_);
            break;
        case 106: 
        case 107: 
            watch_read<struct sk_buff, FIELD_hdr_len>::on(entry_, struct_addr_);
            break;
        case 108: 
        case 109: 
            watch_read<struct sk_buff, FIELD_csum>::on(entry_, struct_addr_);
            watch_read<struct sk_buff, FIELD_csum_start>::on(entry_, struct_addr_);
            break;
        case 110: 
        case 111: 
            watch_read<struct sk_buff, FIELD_csum>::on(entry_, struct_addr_);
            watch_read<struct sk_buff, FIELD_csum_offset>::on(entry_, struct_addr_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
            watch_read<struct sk_buff, FIELD_priority>::on(entry_, struct_addr_);
            break;
        case 116: 
            watch_read<struct sk_buff, FIELD_local_df>::on(entry_, struct_addr_);
            watch_read<struct sk_buff, FIELD_cloned>::on(entry_, struct_addr_);
            watch_read<struct sk_buff, FIELD_ip_summed>::on(entry_, struct_addr_);
            watch_read<struct sk_buff, FIELD_nohdr>::on(entry_, struct_addr_);
            watch_read<struct sk_buff, FIELD_nfctinfo>::on(entry_, struct_addr_);
            break;
        case 117: 
            watch_read<struct sk_buff, FIELD_pkt_type>::on(entry_, struct_addr_);
            watch_read<struct sk_buff, FIELD_fclone>::on(entry_, struct_addr_);
            watch_read<struct sk_buff, FIELD_ipvs_property>::on(entry_, struct_addr_);
            watch_read<struct sk_buff, FIELD_peeked>::on(entry_, struct_addr_);
            watch_read<struct sk_buff, FIELD_nf_trace>::on(entry_, struct_addr_);
            break;
        case 118: 
        case 119: 
            watch_read<struct sk_buff, FIELD_protocol>::on(entry_, struct_addr_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_read<struct sk_buff, FIELD_destructor>::on(entry_, struct_addr_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
            watch_read<struct sk_buff, FIELD_iif>::on(entry_, struct_addr_);
            break;
        case 132: 
        case 133: 
            watch_read<struct sk_buff, FIELD_tc_index>::on(entry_, struct_addr_);
            break;
        case 134: 
        case 135: 
            watch_read<struct sk_buff, FIELD_tc_verd>::on(entry_, struct_addr_);
            break;
        case 136: 
        case 137: 
            watch_read<struct sk_buff, FIELD_queue_mapping>::on(entry_, struct_addr_);
            break;
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_read<struct sk_buff, FIELD_secmark>::on(entry_, struct_addr_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
            watch_read<struct sk_buff, FIELD_mark>::on(entry_, struct_addr_);
            break;
        case 148: 
        case 149: 
            watch_read<struct sk_buff, FIELD_vlan_tci>::on(entry_, struct_addr_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
            watch_read<struct sk_buff, FIELD_transport_header>::on(entry_, struct_addr_);
            break;
        case 156: 
        case 157: 
        case 158: 
        case 159: 
            watch_read<struct sk_buff, FIELD_network_header>::on(entry_, struct_addr_);
            break;
        case 160: 
        case 161: 
        case 162: 
        case 163: 
            watch_read<struct sk_buff, FIELD_mac_header>::on(entry_, struct_addr_);
            break;
        case 164: 
        case 165: 
        case 166: 
        case 167: 
            watch_read<struct sk_buff, FIELD_tail>::on(entry_, struct_addr_);
            break;
        case 168: 
        case 169: 
        case 170: 
        case 171: 
            watch_read<struct sk_buff, FIELD_end>::on(entry_, struct_addr_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
            watch_read<struct sk_buff, FIELD_head>::on(entry_, struct_addr_);
            break;
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
            watch_read<struct sk_buff, FIELD_data>::on(entry_, struct_addr_);
            break;
        case 192: 
        case 193: 
        case 194: 
        case 195: 
            watch_read<struct sk_buff, FIELD_truesize>::on(entry_, struct_addr_);
            break;
        case 196: 
        case 197: 
        case 198: 
        case 199: 
            watch_read<struct sk_buff, FIELD_users>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct sk_buff *struct_addr_(((struct sk_buff *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct sk_buff, FIELD_next>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct sk_buff, FIELD_prev>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct sk_buff, FIELD_sk>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct sk_buff, FIELD_tstamp>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct sk_buff, FIELD_dev>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct sk_buff, FIELD__skb_dst>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct sk_buff, FIELD_cb>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
            watch_write<struct sk_buff, FIELD_len>::on(entry_, struct_addr_, val_);
            break;
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_write<struct sk_buff, FIELD_data_len>::on(entry_, struct_addr_, val_);
            break;
        case 104: 
        case 105: 
            watch_write<struct sk_buff, FIELD_mac_len>::on(entry_, struct_addr_, val_);
            break;
        case 106: 
        case 107: 
            watch_write<struct sk_buff, FIELD_hdr_len>::on(entry_, struct_addr_, val_);
            break;
        case 108: 
        case 109: 
            watch_write<struct sk_buff, FIELD_csum>::on(entry_, struct_addr_, val_);
            watch_write<struct sk_buff, FIELD_csum_start>::on(entry_, struct_addr_, val_);
            break;
        case 110: 
        case 111: 
            watch_write<struct sk_buff, FIELD_csum>::on(entry_, struct_addr_, val_);
            watch_write<struct sk_buff, FIELD_csum_offset>::on(entry_, struct_addr_, val_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
            watch_write<struct sk_buff, FIELD_priority>::on(entry_, struct_addr_, val_);
            break;
        case 116: 
            watch_write<struct sk_buff, FIELD_local_df>::on(entry_, struct_addr_, val_);
            watch_write<struct sk_buff, FIELD_cloned>::on(entry_, struct_addr_, val_);
            watch_write<struct sk_buff, FIELD_ip_summed>::on(entry_, struct_addr_, val_);
            watch_write<struct sk_buff, FIELD_nohdr>::on(entry_, struct_addr_, val_);
            watch_write<struct sk_buff, FIELD_nfctinfo>::on(entry_, struct_addr_, val_);
            break;
        case 117: 
            watch_write<struct sk_buff, FIELD_pkt_type>::on(entry_, struct_addr_, val_);
            watch_write<struct sk_buff, FIELD_fclone>::on(entry_, struct_addr_, val_);
            watch_write<struct sk_buff, FIELD_ipvs_property>::on(entry_, struct_addr_, val_);
            watch_write<struct sk_buff, FIELD_peeked>::on(entry_, struct_addr_, val_);
            watch_write<struct sk_buff, FIELD_nf_trace>::on(entry_, struct_addr_, val_);
            break;
        case 118: 
        case 119: 
            watch_write<struct sk_buff, FIELD_protocol>::on(entry_, struct_addr_, val_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_write<struct sk_buff, FIELD_destructor>::on(entry_, struct_addr_, val_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
            watch_write<struct sk_buff, FIELD_iif>::on(entry_, struct_addr_, val_);
            break;
        case 132: 
        case 133: 
            watch_write<struct sk_buff, FIELD_tc_index>::on(entry_, struct_addr_, val_);
            break;
        case 134: 
        case 135: 
            watch_write<struct sk_buff, FIELD_tc_verd>::on(entry_, struct_addr_, val_);
            break;
        case 136: 
        case 137: 
            watch_write<struct sk_buff, FIELD_queue_mapping>::on(entry_, struct_addr_, val_);
            break;
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_write<struct sk_buff, FIELD_secmark>::on(entry_, struct_addr_, val_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
            watch_write<struct sk_buff, FIELD_mark>::on(entry_, struct_addr_, val_);
            break;
        case 148: 
        case 149: 
            watch_write<struct sk_buff, FIELD_vlan_tci>::on(entry_, struct_addr_, val_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
            watch_write<struct sk_buff, FIELD_transport_header>::on(entry_, struct_addr_, val_);
            break;
        case 156: 
        case 157: 
        case 158: 
        case 159: 
            watch_write<struct sk_buff, FIELD_network_header>::on(entry_, struct_addr_, val_);
            break;
        case 160: 
        case 161: 
        case 162: 
        case 163: 
            watch_write<struct sk_buff, FIELD_mac_header>::on(entry_, struct_addr_, val_);
            break;
        case 164: 
        case 165: 
        case 166: 
        case 167: 
            watch_write<struct sk_buff, FIELD_tail>::on(entry_, struct_addr_, val_);
            break;
        case 168: 
        case 169: 
        case 170: 
        case 171: 
            watch_write<struct sk_buff, FIELD_end>::on(entry_, struct_addr_, val_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
            watch_write<struct sk_buff, FIELD_head>::on(entry_, struct_addr_, val_);
            break;
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
            watch_write<struct sk_buff, FIELD_data>::on(entry_, struct_addr_, val_);
            break;
        case 192: 
        case 193: 
        case 194: 
        case 195: 
            watch_write<struct sk_buff, FIELD_truesize>::on(entry_, struct_addr_, val_);
            break;
        case 196: 
        case 197: 
        case 198: 
        case 199: 
            watch_write<struct sk_buff, FIELD_users>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct xenbus_transaction> {
    enum { TYPE_SIZE = sizeof(struct xenbus_transaction) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct xenbus_transaction *struct_addr_(((struct xenbus_transaction *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct xenbus_transaction, FIELD_id>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct xenbus_transaction *struct_addr_(((struct xenbus_transaction *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct xenbus_transaction, FIELD_id>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct rcu_torture> {
    enum { TYPE_SIZE = sizeof(struct rcu_torture) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct rcu_torture *struct_addr_(((struct rcu_torture *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct rcu_torture, FIELD_rtort_rcu>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
            watch_read<struct rcu_torture, FIELD_rtort_pipe_count>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct rcu_torture, FIELD_rtort_free>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
            watch_read<struct rcu_torture, FIELD_rtort_mbtest>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct rcu_torture *struct_addr_(((struct rcu_torture *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct rcu_torture, FIELD_rtort_rcu>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
            watch_write<struct rcu_torture, FIELD_rtort_pipe_count>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct rcu_torture, FIELD_rtort_free>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
            watch_write<struct rcu_torture, FIELD_rtort_mbtest>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct dev_pm_ops> {
    enum { TYPE_SIZE = sizeof(struct dev_pm_ops) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct dev_pm_ops *struct_addr_(((struct dev_pm_ops *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct dev_pm_ops, FIELD_prepare>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct dev_pm_ops, FIELD_complete>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct dev_pm_ops, FIELD_suspend>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct dev_pm_ops, FIELD_resume>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct dev_pm_ops, FIELD_freeze>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct dev_pm_ops, FIELD_thaw>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct dev_pm_ops, FIELD_poweroff>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct dev_pm_ops, FIELD_restore>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct dev_pm_ops, FIELD_suspend_noirq>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct dev_pm_ops, FIELD_resume_noirq>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct dev_pm_ops, FIELD_freeze_noirq>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct dev_pm_ops, FIELD_thaw_noirq>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_read<struct dev_pm_ops, FIELD_poweroff_noirq>::on(entry_, struct_addr_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_read<struct dev_pm_ops, FIELD_restore_noirq>::on(entry_, struct_addr_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_read<struct dev_pm_ops, FIELD_runtime_suspend>::on(entry_, struct_addr_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_read<struct dev_pm_ops, FIELD_runtime_resume>::on(entry_, struct_addr_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_read<struct dev_pm_ops, FIELD_runtime_idle>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct dev_pm_ops *struct_addr_(((struct dev_pm_ops *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct dev_pm_ops, FIELD_prepare>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct dev_pm_ops, FIELD_complete>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct dev_pm_ops, FIELD_suspend>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct dev_pm_ops, FIELD_resume>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct dev_pm_ops, FIELD_freeze>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct dev_pm_ops, FIELD_thaw>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct dev_pm_ops, FIELD_poweroff>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct dev_pm_ops, FIELD_restore>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct dev_pm_ops, FIELD_suspend_noirq>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct dev_pm_ops, FIELD_resume_noirq>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct dev_pm_ops, FIELD_freeze_noirq>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct dev_pm_ops, FIELD_thaw_noirq>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_write<struct dev_pm_ops, FIELD_poweroff_noirq>::on(entry_, struct_addr_, val_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_write<struct dev_pm_ops, FIELD_restore_noirq>::on(entry_, struct_addr_, val_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_write<struct dev_pm_ops, FIELD_runtime_suspend>::on(entry_, struct_addr_, val_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_write<struct dev_pm_ops, FIELD_runtime_resume>::on(entry_, struct_addr_, val_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_write<struct dev_pm_ops, FIELD_runtime_idle>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct mb_cache_op> {
    enum { TYPE_SIZE = sizeof(struct mb_cache_op) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct mb_cache_op *struct_addr_(((struct mb_cache_op *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct mb_cache_op, FIELD_free>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct mb_cache_op *struct_addr_(((struct mb_cache_op *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct mb_cache_op, FIELD_free>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct device_dma_parameters> {
    enum { TYPE_SIZE = sizeof(struct device_dma_parameters) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct device_dma_parameters *struct_addr_(((struct device_dma_parameters *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct device_dma_parameters, FIELD_max_segment_size>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct device_dma_parameters, FIELD_segment_boundary_mask>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct device_dma_parameters *struct_addr_(((struct device_dma_parameters *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct device_dma_parameters, FIELD_max_segment_size>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct device_dma_parameters, FIELD_segment_boundary_mask>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct __wait_queue> {
    enum { TYPE_SIZE = sizeof(struct __wait_queue) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct __wait_queue *struct_addr_(((struct __wait_queue *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct __wait_queue, FIELD_flags>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct __wait_queue, FIELD_private_data>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct __wait_queue, FIELD_func>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct __wait_queue, FIELD_task_list>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct __wait_queue *struct_addr_(((struct __wait_queue *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct __wait_queue, FIELD_flags>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct __wait_queue, FIELD_private_data>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct __wait_queue, FIELD_func>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct __wait_queue, FIELD_task_list>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, raw_rwlock_t> {
    enum { TYPE_SIZE = sizeof(raw_rwlock_t) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        raw_rwlock_t *struct_addr_(((raw_rwlock_t *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<raw_rwlock_t, FIELD_lock>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        raw_rwlock_t *struct_addr_(((raw_rwlock_t *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<raw_rwlock_t, FIELD_lock>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct pci_error_handlers> {
    enum { TYPE_SIZE = sizeof(struct pci_error_handlers) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct pci_error_handlers *struct_addr_(((struct pci_error_handlers *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct pci_error_handlers, FIELD_error_detected>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct pci_error_handlers, FIELD_mmio_enabled>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct pci_error_handlers, FIELD_link_reset>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct pci_error_handlers, FIELD_slot_reset>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct pci_error_handlers, FIELD_resume>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct pci_error_handlers *struct_addr_(((struct pci_error_handlers *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct pci_error_handlers, FIELD_error_detected>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct pci_error_handlers, FIELD_mmio_enabled>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct pci_error_handlers, FIELD_link_reset>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct pci_error_handlers, FIELD_slot_reset>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct pci_error_handlers, FIELD_resume>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct rb_node> {
    enum { TYPE_SIZE = sizeof(struct rb_node) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct rb_node *struct_addr_(((struct rb_node *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct rb_node, FIELD_rb_parent_color>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct rb_node, FIELD_rb_right>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct rb_node, FIELD_rb_left>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct rb_node *struct_addr_(((struct rb_node *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct rb_node, FIELD_rb_parent_color>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct rb_node, FIELD_rb_right>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct rb_node, FIELD_rb_left>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct phy_device> {
    enum { TYPE_SIZE = sizeof(struct phy_device) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct phy_device *struct_addr_(((struct phy_device *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct phy_device, FIELD_drv>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct phy_device, FIELD_bus>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
            watch_read<struct phy_device, FIELD_dev>::on(entry_, struct_addr_);
            break;
        case 528: 
        case 529: 
        case 530: 
        case 531: 
            watch_read<struct phy_device, FIELD_phy_id>::on(entry_, struct_addr_);
            break;
        case 532: 
        case 533: 
        case 534: 
        case 535: 
            watch_read<struct phy_device, FIELD_state>::on(entry_, struct_addr_);
            break;
        case 536: 
        case 537: 
        case 538: 
        case 539: 
            watch_read<struct phy_device, FIELD_dev_flags>::on(entry_, struct_addr_);
            break;
        case 540: 
        case 541: 
        case 542: 
        case 543: 
            watch_read<struct phy_device, FIELD_interface>::on(entry_, struct_addr_);
            break;
        case 544: 
        case 545: 
        case 546: 
        case 547: 
            watch_read<struct phy_device, FIELD_addr>::on(entry_, struct_addr_);
            break;
        case 548: 
        case 549: 
        case 550: 
        case 551: 
            watch_read<struct phy_device, FIELD_speed>::on(entry_, struct_addr_);
            break;
        case 552: 
        case 553: 
        case 554: 
        case 555: 
            watch_read<struct phy_device, FIELD_duplex>::on(entry_, struct_addr_);
            break;
        case 556: 
        case 557: 
        case 558: 
        case 559: 
            watch_read<struct phy_device, FIELD_pause>::on(entry_, struct_addr_);
            break;
        case 560: 
        case 561: 
        case 562: 
        case 563: 
            watch_read<struct phy_device, FIELD_asym_pause>::on(entry_, struct_addr_);
            break;
        case 564: 
        case 565: 
        case 566: 
        case 567: 
            watch_read<struct phy_device, FIELD_link>::on(entry_, struct_addr_);
            break;
        case 568: 
        case 569: 
        case 570: 
        case 571: 
            watch_read<struct phy_device, FIELD_interrupts>::on(entry_, struct_addr_);
            break;
        case 572: 
        case 573: 
        case 574: 
        case 575: 
            watch_read<struct phy_device, FIELD_supported>::on(entry_, struct_addr_);
            break;
        case 576: 
        case 577: 
        case 578: 
        case 579: 
            watch_read<struct phy_device, FIELD_advertising>::on(entry_, struct_addr_);
            break;
        case 580: 
        case 581: 
        case 582: 
        case 583: 
            watch_read<struct phy_device, FIELD_autoneg>::on(entry_, struct_addr_);
            break;
        case 584: 
        case 585: 
        case 586: 
        case 587: 
            watch_read<struct phy_device, FIELD_link_timeout>::on(entry_, struct_addr_);
            break;
        case 588: 
        case 589: 
        case 590: 
        case 591: 
            watch_read<struct phy_device, FIELD_irq>::on(entry_, struct_addr_);
            break;
        case 592: 
        case 593: 
        case 594: 
        case 595: 
        case 596: 
        case 597: 
        case 598: 
        case 599: 
            watch_read<struct phy_device, FIELD_priv>::on(entry_, struct_addr_);
            break;
        case 600: 
        case 601: 
        case 602: 
        case 603: 
        case 604: 
        case 605: 
        case 606: 
        case 607: 
        case 608: 
        case 609: 
        case 610: 
        case 611: 
        case 612: 
        case 613: 
        case 614: 
        case 615: 
        case 616: 
        case 617: 
        case 618: 
        case 619: 
        case 620: 
        case 621: 
        case 622: 
        case 623: 
        case 624: 
        case 625: 
        case 626: 
        case 627: 
        case 628: 
        case 629: 
        case 630: 
        case 631: 
            watch_read<struct phy_device, FIELD_phy_queue>::on(entry_, struct_addr_);
            break;
        case 632: 
        case 633: 
        case 634: 
        case 635: 
        case 636: 
        case 637: 
        case 638: 
        case 639: 
        case 640: 
        case 641: 
        case 642: 
        case 643: 
        case 644: 
        case 645: 
        case 646: 
        case 647: 
        case 648: 
        case 649: 
        case 650: 
        case 651: 
        case 652: 
        case 653: 
        case 654: 
        case 655: 
        case 656: 
        case 657: 
        case 658: 
        case 659: 
        case 660: 
        case 661: 
        case 662: 
        case 663: 
        case 664: 
        case 665: 
        case 666: 
        case 667: 
        case 668: 
        case 669: 
        case 670: 
        case 671: 
        case 672: 
        case 673: 
        case 674: 
        case 675: 
        case 676: 
        case 677: 
        case 678: 
        case 679: 
        case 680: 
        case 681: 
        case 682: 
        case 683: 
        case 684: 
        case 685: 
        case 686: 
        case 687: 
        case 688: 
        case 689: 
        case 690: 
        case 691: 
        case 692: 
        case 693: 
        case 694: 
        case 695: 
        case 696: 
        case 697: 
        case 698: 
        case 699: 
        case 700: 
        case 701: 
        case 702: 
        case 703: 
        case 704: 
        case 705: 
        case 706: 
        case 707: 
        case 708: 
        case 709: 
        case 710: 
        case 711: 
        case 712: 
        case 713: 
        case 714: 
        case 715: 
        case 716: 
        case 717: 
        case 718: 
        case 719: 
        case 720: 
        case 721: 
        case 722: 
        case 723: 
        case 724: 
        case 725: 
        case 726: 
        case 727: 
        case 728: 
        case 729: 
        case 730: 
        case 731: 
        case 732: 
        case 733: 
        case 734: 
        case 735: 
        case 736: 
        case 737: 
        case 738: 
        case 739: 
        case 740: 
        case 741: 
        case 742: 
        case 743: 
            watch_read<struct phy_device, FIELD_state_queue>::on(entry_, struct_addr_);
            break;
        case 744: 
        case 745: 
        case 746: 
        case 747: 
            watch_read<struct phy_device, FIELD_irq_disable>::on(entry_, struct_addr_);
            break;
        case 752: 
        case 753: 
        case 754: 
        case 755: 
        case 756: 
        case 757: 
        case 758: 
        case 759: 
        case 760: 
        case 761: 
        case 762: 
        case 763: 
        case 764: 
        case 765: 
        case 766: 
        case 767: 
        case 768: 
        case 769: 
        case 770: 
        case 771: 
        case 772: 
        case 773: 
        case 774: 
        case 775: 
        case 776: 
        case 777: 
        case 778: 
        case 779: 
        case 780: 
        case 781: 
        case 782: 
        case 783: 
            watch_read<struct phy_device, FIELD_lock>::on(entry_, struct_addr_);
            break;
        case 784: 
        case 785: 
        case 786: 
        case 787: 
        case 788: 
        case 789: 
        case 790: 
        case 791: 
            watch_read<struct phy_device, FIELD_attached_dev>::on(entry_, struct_addr_);
            break;
        case 792: 
        case 793: 
        case 794: 
        case 795: 
        case 796: 
        case 797: 
        case 798: 
        case 799: 
            watch_read<struct phy_device, FIELD_adjust_link>::on(entry_, struct_addr_);
            break;
        case 800: 
        case 801: 
        case 802: 
        case 803: 
        case 804: 
        case 805: 
        case 806: 
        case 807: 
            watch_read<struct phy_device, FIELD_adjust_state>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct phy_device *struct_addr_(((struct phy_device *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct phy_device, FIELD_drv>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct phy_device, FIELD_bus>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
            watch_write<struct phy_device, FIELD_dev>::on(entry_, struct_addr_, val_);
            break;
        case 528: 
        case 529: 
        case 530: 
        case 531: 
            watch_write<struct phy_device, FIELD_phy_id>::on(entry_, struct_addr_, val_);
            break;
        case 532: 
        case 533: 
        case 534: 
        case 535: 
            watch_write<struct phy_device, FIELD_state>::on(entry_, struct_addr_, val_);
            break;
        case 536: 
        case 537: 
        case 538: 
        case 539: 
            watch_write<struct phy_device, FIELD_dev_flags>::on(entry_, struct_addr_, val_);
            break;
        case 540: 
        case 541: 
        case 542: 
        case 543: 
            watch_write<struct phy_device, FIELD_interface>::on(entry_, struct_addr_, val_);
            break;
        case 544: 
        case 545: 
        case 546: 
        case 547: 
            watch_write<struct phy_device, FIELD_addr>::on(entry_, struct_addr_, val_);
            break;
        case 548: 
        case 549: 
        case 550: 
        case 551: 
            watch_write<struct phy_device, FIELD_speed>::on(entry_, struct_addr_, val_);
            break;
        case 552: 
        case 553: 
        case 554: 
        case 555: 
            watch_write<struct phy_device, FIELD_duplex>::on(entry_, struct_addr_, val_);
            break;
        case 556: 
        case 557: 
        case 558: 
        case 559: 
            watch_write<struct phy_device, FIELD_pause>::on(entry_, struct_addr_, val_);
            break;
        case 560: 
        case 561: 
        case 562: 
        case 563: 
            watch_write<struct phy_device, FIELD_asym_pause>::on(entry_, struct_addr_, val_);
            break;
        case 564: 
        case 565: 
        case 566: 
        case 567: 
            watch_write<struct phy_device, FIELD_link>::on(entry_, struct_addr_, val_);
            break;
        case 568: 
        case 569: 
        case 570: 
        case 571: 
            watch_write<struct phy_device, FIELD_interrupts>::on(entry_, struct_addr_, val_);
            break;
        case 572: 
        case 573: 
        case 574: 
        case 575: 
            watch_write<struct phy_device, FIELD_supported>::on(entry_, struct_addr_, val_);
            break;
        case 576: 
        case 577: 
        case 578: 
        case 579: 
            watch_write<struct phy_device, FIELD_advertising>::on(entry_, struct_addr_, val_);
            break;
        case 580: 
        case 581: 
        case 582: 
        case 583: 
            watch_write<struct phy_device, FIELD_autoneg>::on(entry_, struct_addr_, val_);
            break;
        case 584: 
        case 585: 
        case 586: 
        case 587: 
            watch_write<struct phy_device, FIELD_link_timeout>::on(entry_, struct_addr_, val_);
            break;
        case 588: 
        case 589: 
        case 590: 
        case 591: 
            watch_write<struct phy_device, FIELD_irq>::on(entry_, struct_addr_, val_);
            break;
        case 592: 
        case 593: 
        case 594: 
        case 595: 
        case 596: 
        case 597: 
        case 598: 
        case 599: 
            watch_write<struct phy_device, FIELD_priv>::on(entry_, struct_addr_, val_);
            break;
        case 600: 
        case 601: 
        case 602: 
        case 603: 
        case 604: 
        case 605: 
        case 606: 
        case 607: 
        case 608: 
        case 609: 
        case 610: 
        case 611: 
        case 612: 
        case 613: 
        case 614: 
        case 615: 
        case 616: 
        case 617: 
        case 618: 
        case 619: 
        case 620: 
        case 621: 
        case 622: 
        case 623: 
        case 624: 
        case 625: 
        case 626: 
        case 627: 
        case 628: 
        case 629: 
        case 630: 
        case 631: 
            watch_write<struct phy_device, FIELD_phy_queue>::on(entry_, struct_addr_, val_);
            break;
        case 632: 
        case 633: 
        case 634: 
        case 635: 
        case 636: 
        case 637: 
        case 638: 
        case 639: 
        case 640: 
        case 641: 
        case 642: 
        case 643: 
        case 644: 
        case 645: 
        case 646: 
        case 647: 
        case 648: 
        case 649: 
        case 650: 
        case 651: 
        case 652: 
        case 653: 
        case 654: 
        case 655: 
        case 656: 
        case 657: 
        case 658: 
        case 659: 
        case 660: 
        case 661: 
        case 662: 
        case 663: 
        case 664: 
        case 665: 
        case 666: 
        case 667: 
        case 668: 
        case 669: 
        case 670: 
        case 671: 
        case 672: 
        case 673: 
        case 674: 
        case 675: 
        case 676: 
        case 677: 
        case 678: 
        case 679: 
        case 680: 
        case 681: 
        case 682: 
        case 683: 
        case 684: 
        case 685: 
        case 686: 
        case 687: 
        case 688: 
        case 689: 
        case 690: 
        case 691: 
        case 692: 
        case 693: 
        case 694: 
        case 695: 
        case 696: 
        case 697: 
        case 698: 
        case 699: 
        case 700: 
        case 701: 
        case 702: 
        case 703: 
        case 704: 
        case 705: 
        case 706: 
        case 707: 
        case 708: 
        case 709: 
        case 710: 
        case 711: 
        case 712: 
        case 713: 
        case 714: 
        case 715: 
        case 716: 
        case 717: 
        case 718: 
        case 719: 
        case 720: 
        case 721: 
        case 722: 
        case 723: 
        case 724: 
        case 725: 
        case 726: 
        case 727: 
        case 728: 
        case 729: 
        case 730: 
        case 731: 
        case 732: 
        case 733: 
        case 734: 
        case 735: 
        case 736: 
        case 737: 
        case 738: 
        case 739: 
        case 740: 
        case 741: 
        case 742: 
        case 743: 
            watch_write<struct phy_device, FIELD_state_queue>::on(entry_, struct_addr_, val_);
            break;
        case 744: 
        case 745: 
        case 746: 
        case 747: 
            watch_write<struct phy_device, FIELD_irq_disable>::on(entry_, struct_addr_, val_);
            break;
        case 752: 
        case 753: 
        case 754: 
        case 755: 
        case 756: 
        case 757: 
        case 758: 
        case 759: 
        case 760: 
        case 761: 
        case 762: 
        case 763: 
        case 764: 
        case 765: 
        case 766: 
        case 767: 
        case 768: 
        case 769: 
        case 770: 
        case 771: 
        case 772: 
        case 773: 
        case 774: 
        case 775: 
        case 776: 
        case 777: 
        case 778: 
        case 779: 
        case 780: 
        case 781: 
        case 782: 
        case 783: 
            watch_write<struct phy_device, FIELD_lock>::on(entry_, struct_addr_, val_);
            break;
        case 784: 
        case 785: 
        case 786: 
        case 787: 
        case 788: 
        case 789: 
        case 790: 
        case 791: 
            watch_write<struct phy_device, FIELD_attached_dev>::on(entry_, struct_addr_, val_);
            break;
        case 792: 
        case 793: 
        case 794: 
        case 795: 
        case 796: 
        case 797: 
        case 798: 
        case 799: 
            watch_write<struct phy_device, FIELD_adjust_link>::on(entry_, struct_addr_, val_);
            break;
        case 800: 
        case 801: 
        case 802: 
        case 803: 
        case 804: 
        case 805: 
        case 806: 
        case 807: 
            watch_write<struct phy_device, FIELD_adjust_state>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct cpumask> {
    enum { TYPE_SIZE = sizeof(struct cpumask) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct cpumask *struct_addr_(((struct cpumask *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct cpumask, FIELD_bits>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct cpumask *struct_addr_(((struct cpumask *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct cpumask, FIELD_bits>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct client_extension> {
    enum { TYPE_SIZE = sizeof(struct client_extension) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct client_extension *struct_addr_(((struct client_extension *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct client_extension, FIELD_return_address_stack>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
            watch_read<struct client_extension, FIELD_return_stack_size>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct client_extension, FIELD_exit_address>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct client_extension, FIELD_iret_handler>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_read<struct client_extension, FIELD_pending>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct client_extension *struct_addr_(((struct client_extension *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct client_extension, FIELD_return_address_stack>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
            watch_write<struct client_extension, FIELD_return_stack_size>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct client_extension, FIELD_exit_address>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct client_extension, FIELD_iret_handler>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_write<struct client_extension, FIELD_pending>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct xenstore_domain_interface> {
    enum { TYPE_SIZE = sizeof(struct xenstore_domain_interface) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct xenstore_domain_interface *struct_addr_(((struct xenstore_domain_interface *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
        case 528: 
        case 529: 
        case 530: 
        case 531: 
        case 532: 
        case 533: 
        case 534: 
        case 535: 
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
        case 544: 
        case 545: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
        case 552: 
        case 553: 
        case 554: 
        case 555: 
        case 556: 
        case 557: 
        case 558: 
        case 559: 
        case 560: 
        case 561: 
        case 562: 
        case 563: 
        case 564: 
        case 565: 
        case 566: 
        case 567: 
        case 568: 
        case 569: 
        case 570: 
        case 571: 
        case 572: 
        case 573: 
        case 574: 
        case 575: 
        case 576: 
        case 577: 
        case 578: 
        case 579: 
        case 580: 
        case 581: 
        case 582: 
        case 583: 
        case 584: 
        case 585: 
        case 586: 
        case 587: 
        case 588: 
        case 589: 
        case 590: 
        case 591: 
        case 592: 
        case 593: 
        case 594: 
        case 595: 
        case 596: 
        case 597: 
        case 598: 
        case 599: 
        case 600: 
        case 601: 
        case 602: 
        case 603: 
        case 604: 
        case 605: 
        case 606: 
        case 607: 
        case 608: 
        case 609: 
        case 610: 
        case 611: 
        case 612: 
        case 613: 
        case 614: 
        case 615: 
        case 616: 
        case 617: 
        case 618: 
        case 619: 
        case 620: 
        case 621: 
        case 622: 
        case 623: 
        case 624: 
        case 625: 
        case 626: 
        case 627: 
        case 628: 
        case 629: 
        case 630: 
        case 631: 
        case 632: 
        case 633: 
        case 634: 
        case 635: 
        case 636: 
        case 637: 
        case 638: 
        case 639: 
        case 640: 
        case 641: 
        case 642: 
        case 643: 
        case 644: 
        case 645: 
        case 646: 
        case 647: 
        case 648: 
        case 649: 
        case 650: 
        case 651: 
        case 652: 
        case 653: 
        case 654: 
        case 655: 
        case 656: 
        case 657: 
        case 658: 
        case 659: 
        case 660: 
        case 661: 
        case 662: 
        case 663: 
        case 664: 
        case 665: 
        case 666: 
        case 667: 
        case 668: 
        case 669: 
        case 670: 
        case 671: 
        case 672: 
        case 673: 
        case 674: 
        case 675: 
        case 676: 
        case 677: 
        case 678: 
        case 679: 
        case 680: 
        case 681: 
        case 682: 
        case 683: 
        case 684: 
        case 685: 
        case 686: 
        case 687: 
        case 688: 
        case 689: 
        case 690: 
        case 691: 
        case 692: 
        case 693: 
        case 694: 
        case 695: 
        case 696: 
        case 697: 
        case 698: 
        case 699: 
        case 700: 
        case 701: 
        case 702: 
        case 703: 
        case 704: 
        case 705: 
        case 706: 
        case 707: 
        case 708: 
        case 709: 
        case 710: 
        case 711: 
        case 712: 
        case 713: 
        case 714: 
        case 715: 
        case 716: 
        case 717: 
        case 718: 
        case 719: 
        case 720: 
        case 721: 
        case 722: 
        case 723: 
        case 724: 
        case 725: 
        case 726: 
        case 727: 
        case 728: 
        case 729: 
        case 730: 
        case 731: 
        case 732: 
        case 733: 
        case 734: 
        case 735: 
        case 736: 
        case 737: 
        case 738: 
        case 739: 
        case 740: 
        case 741: 
        case 742: 
        case 743: 
        case 744: 
        case 745: 
        case 746: 
        case 747: 
        case 748: 
        case 749: 
        case 750: 
        case 751: 
        case 752: 
        case 753: 
        case 754: 
        case 755: 
        case 756: 
        case 757: 
        case 758: 
        case 759: 
        case 760: 
        case 761: 
        case 762: 
        case 763: 
        case 764: 
        case 765: 
        case 766: 
        case 767: 
        case 768: 
        case 769: 
        case 770: 
        case 771: 
        case 772: 
        case 773: 
        case 774: 
        case 775: 
        case 776: 
        case 777: 
        case 778: 
        case 779: 
        case 780: 
        case 781: 
        case 782: 
        case 783: 
        case 784: 
        case 785: 
        case 786: 
        case 787: 
        case 788: 
        case 789: 
        case 790: 
        case 791: 
        case 792: 
        case 793: 
        case 794: 
        case 795: 
        case 796: 
        case 797: 
        case 798: 
        case 799: 
        case 800: 
        case 801: 
        case 802: 
        case 803: 
        case 804: 
        case 805: 
        case 806: 
        case 807: 
        case 808: 
        case 809: 
        case 810: 
        case 811: 
        case 812: 
        case 813: 
        case 814: 
        case 815: 
        case 816: 
        case 817: 
        case 818: 
        case 819: 
        case 820: 
        case 821: 
        case 822: 
        case 823: 
        case 824: 
        case 825: 
        case 826: 
        case 827: 
        case 828: 
        case 829: 
        case 830: 
        case 831: 
        case 832: 
        case 833: 
        case 834: 
        case 835: 
        case 836: 
        case 837: 
        case 838: 
        case 839: 
        case 840: 
        case 841: 
        case 842: 
        case 843: 
        case 844: 
        case 845: 
        case 846: 
        case 847: 
        case 848: 
        case 849: 
        case 850: 
        case 851: 
        case 852: 
        case 853: 
        case 854: 
        case 855: 
        case 856: 
        case 857: 
        case 858: 
        case 859: 
        case 860: 
        case 861: 
        case 862: 
        case 863: 
        case 864: 
        case 865: 
        case 866: 
        case 867: 
        case 868: 
        case 869: 
        case 870: 
        case 871: 
        case 872: 
        case 873: 
        case 874: 
        case 875: 
        case 876: 
        case 877: 
        case 878: 
        case 879: 
        case 880: 
        case 881: 
        case 882: 
        case 883: 
        case 884: 
        case 885: 
        case 886: 
        case 887: 
        case 888: 
        case 889: 
        case 890: 
        case 891: 
        case 892: 
        case 893: 
        case 894: 
        case 895: 
        case 896: 
        case 897: 
        case 898: 
        case 899: 
        case 900: 
        case 901: 
        case 902: 
        case 903: 
        case 904: 
        case 905: 
        case 906: 
        case 907: 
        case 908: 
        case 909: 
        case 910: 
        case 911: 
        case 912: 
        case 913: 
        case 914: 
        case 915: 
        case 916: 
        case 917: 
        case 918: 
        case 919: 
        case 920: 
        case 921: 
        case 922: 
        case 923: 
        case 924: 
        case 925: 
        case 926: 
        case 927: 
        case 928: 
        case 929: 
        case 930: 
        case 931: 
        case 932: 
        case 933: 
        case 934: 
        case 935: 
        case 936: 
        case 937: 
        case 938: 
        case 939: 
        case 940: 
        case 941: 
        case 942: 
        case 943: 
        case 944: 
        case 945: 
        case 946: 
        case 947: 
        case 948: 
        case 949: 
        case 950: 
        case 951: 
        case 952: 
        case 953: 
        case 954: 
        case 955: 
        case 956: 
        case 957: 
        case 958: 
        case 959: 
        case 960: 
        case 961: 
        case 962: 
        case 963: 
        case 964: 
        case 965: 
        case 966: 
        case 967: 
        case 968: 
        case 969: 
        case 970: 
        case 971: 
        case 972: 
        case 973: 
        case 974: 
        case 975: 
        case 976: 
        case 977: 
        case 978: 
        case 979: 
        case 980: 
        case 981: 
        case 982: 
        case 983: 
        case 984: 
        case 985: 
        case 986: 
        case 987: 
        case 988: 
        case 989: 
        case 990: 
        case 991: 
        case 992: 
        case 993: 
        case 994: 
        case 995: 
        case 996: 
        case 997: 
        case 998: 
        case 999: 
        case 1000: 
        case 1001: 
        case 1002: 
        case 1003: 
        case 1004: 
        case 1005: 
        case 1006: 
        case 1007: 
        case 1008: 
        case 1009: 
        case 1010: 
        case 1011: 
        case 1012: 
        case 1013: 
        case 1014: 
        case 1015: 
        case 1016: 
        case 1017: 
        case 1018: 
        case 1019: 
        case 1020: 
        case 1021: 
        case 1022: 
        case 1023: 
            watch_read<struct xenstore_domain_interface, FIELD_req>::on(entry_, struct_addr_);
            break;
        case 1024: 
        case 1025: 
        case 1026: 
        case 1027: 
        case 1028: 
        case 1029: 
        case 1030: 
        case 1031: 
        case 1032: 
        case 1033: 
        case 1034: 
        case 1035: 
        case 1036: 
        case 1037: 
        case 1038: 
        case 1039: 
        case 1040: 
        case 1041: 
        case 1042: 
        case 1043: 
        case 1044: 
        case 1045: 
        case 1046: 
        case 1047: 
        case 1048: 
        case 1049: 
        case 1050: 
        case 1051: 
        case 1052: 
        case 1053: 
        case 1054: 
        case 1055: 
        case 1056: 
        case 1057: 
        case 1058: 
        case 1059: 
        case 1060: 
        case 1061: 
        case 1062: 
        case 1063: 
        case 1064: 
        case 1065: 
        case 1066: 
        case 1067: 
        case 1068: 
        case 1069: 
        case 1070: 
        case 1071: 
        case 1072: 
        case 1073: 
        case 1074: 
        case 1075: 
        case 1076: 
        case 1077: 
        case 1078: 
        case 1079: 
        case 1080: 
        case 1081: 
        case 1082: 
        case 1083: 
        case 1084: 
        case 1085: 
        case 1086: 
        case 1087: 
        case 1088: 
        case 1089: 
        case 1090: 
        case 1091: 
        case 1092: 
        case 1093: 
        case 1094: 
        case 1095: 
        case 1096: 
        case 1097: 
        case 1098: 
        case 1099: 
        case 1100: 
        case 1101: 
        case 1102: 
        case 1103: 
        case 1104: 
        case 1105: 
        case 1106: 
        case 1107: 
        case 1108: 
        case 1109: 
        case 1110: 
        case 1111: 
        case 1112: 
        case 1113: 
        case 1114: 
        case 1115: 
        case 1116: 
        case 1117: 
        case 1118: 
        case 1119: 
        case 1120: 
        case 1121: 
        case 1122: 
        case 1123: 
        case 1124: 
        case 1125: 
        case 1126: 
        case 1127: 
        case 1128: 
        case 1129: 
        case 1130: 
        case 1131: 
        case 1132: 
        case 1133: 
        case 1134: 
        case 1135: 
        case 1136: 
        case 1137: 
        case 1138: 
        case 1139: 
        case 1140: 
        case 1141: 
        case 1142: 
        case 1143: 
        case 1144: 
        case 1145: 
        case 1146: 
        case 1147: 
        case 1148: 
        case 1149: 
        case 1150: 
        case 1151: 
        case 1152: 
        case 1153: 
        case 1154: 
        case 1155: 
        case 1156: 
        case 1157: 
        case 1158: 
        case 1159: 
        case 1160: 
        case 1161: 
        case 1162: 
        case 1163: 
        case 1164: 
        case 1165: 
        case 1166: 
        case 1167: 
        case 1168: 
        case 1169: 
        case 1170: 
        case 1171: 
        case 1172: 
        case 1173: 
        case 1174: 
        case 1175: 
        case 1176: 
        case 1177: 
        case 1178: 
        case 1179: 
        case 1180: 
        case 1181: 
        case 1182: 
        case 1183: 
        case 1184: 
        case 1185: 
        case 1186: 
        case 1187: 
        case 1188: 
        case 1189: 
        case 1190: 
        case 1191: 
        case 1192: 
        case 1193: 
        case 1194: 
        case 1195: 
        case 1196: 
        case 1197: 
        case 1198: 
        case 1199: 
        case 1200: 
        case 1201: 
        case 1202: 
        case 1203: 
        case 1204: 
        case 1205: 
        case 1206: 
        case 1207: 
        case 1208: 
        case 1209: 
        case 1210: 
        case 1211: 
        case 1212: 
        case 1213: 
        case 1214: 
        case 1215: 
        case 1216: 
        case 1217: 
        case 1218: 
        case 1219: 
        case 1220: 
        case 1221: 
        case 1222: 
        case 1223: 
        case 1224: 
        case 1225: 
        case 1226: 
        case 1227: 
        case 1228: 
        case 1229: 
        case 1230: 
        case 1231: 
        case 1232: 
        case 1233: 
        case 1234: 
        case 1235: 
        case 1236: 
        case 1237: 
        case 1238: 
        case 1239: 
        case 1240: 
        case 1241: 
        case 1242: 
        case 1243: 
        case 1244: 
        case 1245: 
        case 1246: 
        case 1247: 
        case 1248: 
        case 1249: 
        case 1250: 
        case 1251: 
        case 1252: 
        case 1253: 
        case 1254: 
        case 1255: 
        case 1256: 
        case 1257: 
        case 1258: 
        case 1259: 
        case 1260: 
        case 1261: 
        case 1262: 
        case 1263: 
        case 1264: 
        case 1265: 
        case 1266: 
        case 1267: 
        case 1268: 
        case 1269: 
        case 1270: 
        case 1271: 
        case 1272: 
        case 1273: 
        case 1274: 
        case 1275: 
        case 1276: 
        case 1277: 
        case 1278: 
        case 1279: 
        case 1280: 
        case 1281: 
        case 1282: 
        case 1283: 
        case 1284: 
        case 1285: 
        case 1286: 
        case 1287: 
        case 1288: 
        case 1289: 
        case 1290: 
        case 1291: 
        case 1292: 
        case 1293: 
        case 1294: 
        case 1295: 
        case 1296: 
        case 1297: 
        case 1298: 
        case 1299: 
        case 1300: 
        case 1301: 
        case 1302: 
        case 1303: 
        case 1304: 
        case 1305: 
        case 1306: 
        case 1307: 
        case 1308: 
        case 1309: 
        case 1310: 
        case 1311: 
        case 1312: 
        case 1313: 
        case 1314: 
        case 1315: 
        case 1316: 
        case 1317: 
        case 1318: 
        case 1319: 
        case 1320: 
        case 1321: 
        case 1322: 
        case 1323: 
        case 1324: 
        case 1325: 
        case 1326: 
        case 1327: 
        case 1328: 
        case 1329: 
        case 1330: 
        case 1331: 
        case 1332: 
        case 1333: 
        case 1334: 
        case 1335: 
        case 1336: 
        case 1337: 
        case 1338: 
        case 1339: 
        case 1340: 
        case 1341: 
        case 1342: 
        case 1343: 
        case 1344: 
        case 1345: 
        case 1346: 
        case 1347: 
        case 1348: 
        case 1349: 
        case 1350: 
        case 1351: 
        case 1352: 
        case 1353: 
        case 1354: 
        case 1355: 
        case 1356: 
        case 1357: 
        case 1358: 
        case 1359: 
        case 1360: 
        case 1361: 
        case 1362: 
        case 1363: 
        case 1364: 
        case 1365: 
        case 1366: 
        case 1367: 
        case 1368: 
        case 1369: 
        case 1370: 
        case 1371: 
        case 1372: 
        case 1373: 
        case 1374: 
        case 1375: 
        case 1376: 
        case 1377: 
        case 1378: 
        case 1379: 
        case 1380: 
        case 1381: 
        case 1382: 
        case 1383: 
        case 1384: 
        case 1385: 
        case 1386: 
        case 1387: 
        case 1388: 
        case 1389: 
        case 1390: 
        case 1391: 
        case 1392: 
        case 1393: 
        case 1394: 
        case 1395: 
        case 1396: 
        case 1397: 
        case 1398: 
        case 1399: 
        case 1400: 
        case 1401: 
        case 1402: 
        case 1403: 
        case 1404: 
        case 1405: 
        case 1406: 
        case 1407: 
        case 1408: 
        case 1409: 
        case 1410: 
        case 1411: 
        case 1412: 
        case 1413: 
        case 1414: 
        case 1415: 
        case 1416: 
        case 1417: 
        case 1418: 
        case 1419: 
        case 1420: 
        case 1421: 
        case 1422: 
        case 1423: 
        case 1424: 
        case 1425: 
        case 1426: 
        case 1427: 
        case 1428: 
        case 1429: 
        case 1430: 
        case 1431: 
        case 1432: 
        case 1433: 
        case 1434: 
        case 1435: 
        case 1436: 
        case 1437: 
        case 1438: 
        case 1439: 
        case 1440: 
        case 1441: 
        case 1442: 
        case 1443: 
        case 1444: 
        case 1445: 
        case 1446: 
        case 1447: 
        case 1448: 
        case 1449: 
        case 1450: 
        case 1451: 
        case 1452: 
        case 1453: 
        case 1454: 
        case 1455: 
        case 1456: 
        case 1457: 
        case 1458: 
        case 1459: 
        case 1460: 
        case 1461: 
        case 1462: 
        case 1463: 
        case 1464: 
        case 1465: 
        case 1466: 
        case 1467: 
        case 1468: 
        case 1469: 
        case 1470: 
        case 1471: 
        case 1472: 
        case 1473: 
        case 1474: 
        case 1475: 
        case 1476: 
        case 1477: 
        case 1478: 
        case 1479: 
        case 1480: 
        case 1481: 
        case 1482: 
        case 1483: 
        case 1484: 
        case 1485: 
        case 1486: 
        case 1487: 
        case 1488: 
        case 1489: 
        case 1490: 
        case 1491: 
        case 1492: 
        case 1493: 
        case 1494: 
        case 1495: 
        case 1496: 
        case 1497: 
        case 1498: 
        case 1499: 
        case 1500: 
        case 1501: 
        case 1502: 
        case 1503: 
        case 1504: 
        case 1505: 
        case 1506: 
        case 1507: 
        case 1508: 
        case 1509: 
        case 1510: 
        case 1511: 
        case 1512: 
        case 1513: 
        case 1514: 
        case 1515: 
        case 1516: 
        case 1517: 
        case 1518: 
        case 1519: 
        case 1520: 
        case 1521: 
        case 1522: 
        case 1523: 
        case 1524: 
        case 1525: 
        case 1526: 
        case 1527: 
        case 1528: 
        case 1529: 
        case 1530: 
        case 1531: 
        case 1532: 
        case 1533: 
        case 1534: 
        case 1535: 
        case 1536: 
        case 1537: 
        case 1538: 
        case 1539: 
        case 1540: 
        case 1541: 
        case 1542: 
        case 1543: 
        case 1544: 
        case 1545: 
        case 1546: 
        case 1547: 
        case 1548: 
        case 1549: 
        case 1550: 
        case 1551: 
        case 1552: 
        case 1553: 
        case 1554: 
        case 1555: 
        case 1556: 
        case 1557: 
        case 1558: 
        case 1559: 
        case 1560: 
        case 1561: 
        case 1562: 
        case 1563: 
        case 1564: 
        case 1565: 
        case 1566: 
        case 1567: 
        case 1568: 
        case 1569: 
        case 1570: 
        case 1571: 
        case 1572: 
        case 1573: 
        case 1574: 
        case 1575: 
        case 1576: 
        case 1577: 
        case 1578: 
        case 1579: 
        case 1580: 
        case 1581: 
        case 1582: 
        case 1583: 
        case 1584: 
        case 1585: 
        case 1586: 
        case 1587: 
        case 1588: 
        case 1589: 
        case 1590: 
        case 1591: 
        case 1592: 
        case 1593: 
        case 1594: 
        case 1595: 
        case 1596: 
        case 1597: 
        case 1598: 
        case 1599: 
        case 1600: 
        case 1601: 
        case 1602: 
        case 1603: 
        case 1604: 
        case 1605: 
        case 1606: 
        case 1607: 
        case 1608: 
        case 1609: 
        case 1610: 
        case 1611: 
        case 1612: 
        case 1613: 
        case 1614: 
        case 1615: 
        case 1616: 
        case 1617: 
        case 1618: 
        case 1619: 
        case 1620: 
        case 1621: 
        case 1622: 
        case 1623: 
        case 1624: 
        case 1625: 
        case 1626: 
        case 1627: 
        case 1628: 
        case 1629: 
        case 1630: 
        case 1631: 
        case 1632: 
        case 1633: 
        case 1634: 
        case 1635: 
        case 1636: 
        case 1637: 
        case 1638: 
        case 1639: 
        case 1640: 
        case 1641: 
        case 1642: 
        case 1643: 
        case 1644: 
        case 1645: 
        case 1646: 
        case 1647: 
        case 1648: 
        case 1649: 
        case 1650: 
        case 1651: 
        case 1652: 
        case 1653: 
        case 1654: 
        case 1655: 
        case 1656: 
        case 1657: 
        case 1658: 
        case 1659: 
        case 1660: 
        case 1661: 
        case 1662: 
        case 1663: 
        case 1664: 
        case 1665: 
        case 1666: 
        case 1667: 
        case 1668: 
        case 1669: 
        case 1670: 
        case 1671: 
        case 1672: 
        case 1673: 
        case 1674: 
        case 1675: 
        case 1676: 
        case 1677: 
        case 1678: 
        case 1679: 
        case 1680: 
        case 1681: 
        case 1682: 
        case 1683: 
        case 1684: 
        case 1685: 
        case 1686: 
        case 1687: 
        case 1688: 
        case 1689: 
        case 1690: 
        case 1691: 
        case 1692: 
        case 1693: 
        case 1694: 
        case 1695: 
        case 1696: 
        case 1697: 
        case 1698: 
        case 1699: 
        case 1700: 
        case 1701: 
        case 1702: 
        case 1703: 
        case 1704: 
        case 1705: 
        case 1706: 
        case 1707: 
        case 1708: 
        case 1709: 
        case 1710: 
        case 1711: 
        case 1712: 
        case 1713: 
        case 1714: 
        case 1715: 
        case 1716: 
        case 1717: 
        case 1718: 
        case 1719: 
        case 1720: 
        case 1721: 
        case 1722: 
        case 1723: 
        case 1724: 
        case 1725: 
        case 1726: 
        case 1727: 
        case 1728: 
        case 1729: 
        case 1730: 
        case 1731: 
        case 1732: 
        case 1733: 
        case 1734: 
        case 1735: 
        case 1736: 
        case 1737: 
        case 1738: 
        case 1739: 
        case 1740: 
        case 1741: 
        case 1742: 
        case 1743: 
        case 1744: 
        case 1745: 
        case 1746: 
        case 1747: 
        case 1748: 
        case 1749: 
        case 1750: 
        case 1751: 
        case 1752: 
        case 1753: 
        case 1754: 
        case 1755: 
        case 1756: 
        case 1757: 
        case 1758: 
        case 1759: 
        case 1760: 
        case 1761: 
        case 1762: 
        case 1763: 
        case 1764: 
        case 1765: 
        case 1766: 
        case 1767: 
        case 1768: 
        case 1769: 
        case 1770: 
        case 1771: 
        case 1772: 
        case 1773: 
        case 1774: 
        case 1775: 
        case 1776: 
        case 1777: 
        case 1778: 
        case 1779: 
        case 1780: 
        case 1781: 
        case 1782: 
        case 1783: 
        case 1784: 
        case 1785: 
        case 1786: 
        case 1787: 
        case 1788: 
        case 1789: 
        case 1790: 
        case 1791: 
        case 1792: 
        case 1793: 
        case 1794: 
        case 1795: 
        case 1796: 
        case 1797: 
        case 1798: 
        case 1799: 
        case 1800: 
        case 1801: 
        case 1802: 
        case 1803: 
        case 1804: 
        case 1805: 
        case 1806: 
        case 1807: 
        case 1808: 
        case 1809: 
        case 1810: 
        case 1811: 
        case 1812: 
        case 1813: 
        case 1814: 
        case 1815: 
        case 1816: 
        case 1817: 
        case 1818: 
        case 1819: 
        case 1820: 
        case 1821: 
        case 1822: 
        case 1823: 
        case 1824: 
        case 1825: 
        case 1826: 
        case 1827: 
        case 1828: 
        case 1829: 
        case 1830: 
        case 1831: 
        case 1832: 
        case 1833: 
        case 1834: 
        case 1835: 
        case 1836: 
        case 1837: 
        case 1838: 
        case 1839: 
        case 1840: 
        case 1841: 
        case 1842: 
        case 1843: 
        case 1844: 
        case 1845: 
        case 1846: 
        case 1847: 
        case 1848: 
        case 1849: 
        case 1850: 
        case 1851: 
        case 1852: 
        case 1853: 
        case 1854: 
        case 1855: 
        case 1856: 
        case 1857: 
        case 1858: 
        case 1859: 
        case 1860: 
        case 1861: 
        case 1862: 
        case 1863: 
        case 1864: 
        case 1865: 
        case 1866: 
        case 1867: 
        case 1868: 
        case 1869: 
        case 1870: 
        case 1871: 
        case 1872: 
        case 1873: 
        case 1874: 
        case 1875: 
        case 1876: 
        case 1877: 
        case 1878: 
        case 1879: 
        case 1880: 
        case 1881: 
        case 1882: 
        case 1883: 
        case 1884: 
        case 1885: 
        case 1886: 
        case 1887: 
        case 1888: 
        case 1889: 
        case 1890: 
        case 1891: 
        case 1892: 
        case 1893: 
        case 1894: 
        case 1895: 
        case 1896: 
        case 1897: 
        case 1898: 
        case 1899: 
        case 1900: 
        case 1901: 
        case 1902: 
        case 1903: 
        case 1904: 
        case 1905: 
        case 1906: 
        case 1907: 
        case 1908: 
        case 1909: 
        case 1910: 
        case 1911: 
        case 1912: 
        case 1913: 
        case 1914: 
        case 1915: 
        case 1916: 
        case 1917: 
        case 1918: 
        case 1919: 
        case 1920: 
        case 1921: 
        case 1922: 
        case 1923: 
        case 1924: 
        case 1925: 
        case 1926: 
        case 1927: 
        case 1928: 
        case 1929: 
        case 1930: 
        case 1931: 
        case 1932: 
        case 1933: 
        case 1934: 
        case 1935: 
        case 1936: 
        case 1937: 
        case 1938: 
        case 1939: 
        case 1940: 
        case 1941: 
        case 1942: 
        case 1943: 
        case 1944: 
        case 1945: 
        case 1946: 
        case 1947: 
        case 1948: 
        case 1949: 
        case 1950: 
        case 1951: 
        case 1952: 
        case 1953: 
        case 1954: 
        case 1955: 
        case 1956: 
        case 1957: 
        case 1958: 
        case 1959: 
        case 1960: 
        case 1961: 
        case 1962: 
        case 1963: 
        case 1964: 
        case 1965: 
        case 1966: 
        case 1967: 
        case 1968: 
        case 1969: 
        case 1970: 
        case 1971: 
        case 1972: 
        case 1973: 
        case 1974: 
        case 1975: 
        case 1976: 
        case 1977: 
        case 1978: 
        case 1979: 
        case 1980: 
        case 1981: 
        case 1982: 
        case 1983: 
        case 1984: 
        case 1985: 
        case 1986: 
        case 1987: 
        case 1988: 
        case 1989: 
        case 1990: 
        case 1991: 
        case 1992: 
        case 1993: 
        case 1994: 
        case 1995: 
        case 1996: 
        case 1997: 
        case 1998: 
        case 1999: 
        case 2000: 
        case 2001: 
        case 2002: 
        case 2003: 
        case 2004: 
        case 2005: 
        case 2006: 
        case 2007: 
        case 2008: 
        case 2009: 
        case 2010: 
        case 2011: 
        case 2012: 
        case 2013: 
        case 2014: 
        case 2015: 
        case 2016: 
        case 2017: 
        case 2018: 
        case 2019: 
        case 2020: 
        case 2021: 
        case 2022: 
        case 2023: 
        case 2024: 
        case 2025: 
        case 2026: 
        case 2027: 
        case 2028: 
        case 2029: 
        case 2030: 
        case 2031: 
        case 2032: 
        case 2033: 
        case 2034: 
        case 2035: 
        case 2036: 
        case 2037: 
        case 2038: 
        case 2039: 
        case 2040: 
        case 2041: 
        case 2042: 
        case 2043: 
        case 2044: 
        case 2045: 
        case 2046: 
        case 2047: 
            watch_read<struct xenstore_domain_interface, FIELD_rsp>::on(entry_, struct_addr_);
            break;
        case 2048: 
        case 2049: 
        case 2050: 
        case 2051: 
            watch_read<struct xenstore_domain_interface, FIELD_req_cons>::on(entry_, struct_addr_);
            break;
        case 2052: 
        case 2053: 
        case 2054: 
        case 2055: 
            watch_read<struct xenstore_domain_interface, FIELD_req_prod>::on(entry_, struct_addr_);
            break;
        case 2056: 
        case 2057: 
        case 2058: 
        case 2059: 
            watch_read<struct xenstore_domain_interface, FIELD_rsp_cons>::on(entry_, struct_addr_);
            break;
        case 2060: 
        case 2061: 
        case 2062: 
        case 2063: 
            watch_read<struct xenstore_domain_interface, FIELD_rsp_prod>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct xenstore_domain_interface *struct_addr_(((struct xenstore_domain_interface *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
        case 528: 
        case 529: 
        case 530: 
        case 531: 
        case 532: 
        case 533: 
        case 534: 
        case 535: 
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
        case 544: 
        case 545: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
        case 552: 
        case 553: 
        case 554: 
        case 555: 
        case 556: 
        case 557: 
        case 558: 
        case 559: 
        case 560: 
        case 561: 
        case 562: 
        case 563: 
        case 564: 
        case 565: 
        case 566: 
        case 567: 
        case 568: 
        case 569: 
        case 570: 
        case 571: 
        case 572: 
        case 573: 
        case 574: 
        case 575: 
        case 576: 
        case 577: 
        case 578: 
        case 579: 
        case 580: 
        case 581: 
        case 582: 
        case 583: 
        case 584: 
        case 585: 
        case 586: 
        case 587: 
        case 588: 
        case 589: 
        case 590: 
        case 591: 
        case 592: 
        case 593: 
        case 594: 
        case 595: 
        case 596: 
        case 597: 
        case 598: 
        case 599: 
        case 600: 
        case 601: 
        case 602: 
        case 603: 
        case 604: 
        case 605: 
        case 606: 
        case 607: 
        case 608: 
        case 609: 
        case 610: 
        case 611: 
        case 612: 
        case 613: 
        case 614: 
        case 615: 
        case 616: 
        case 617: 
        case 618: 
        case 619: 
        case 620: 
        case 621: 
        case 622: 
        case 623: 
        case 624: 
        case 625: 
        case 626: 
        case 627: 
        case 628: 
        case 629: 
        case 630: 
        case 631: 
        case 632: 
        case 633: 
        case 634: 
        case 635: 
        case 636: 
        case 637: 
        case 638: 
        case 639: 
        case 640: 
        case 641: 
        case 642: 
        case 643: 
        case 644: 
        case 645: 
        case 646: 
        case 647: 
        case 648: 
        case 649: 
        case 650: 
        case 651: 
        case 652: 
        case 653: 
        case 654: 
        case 655: 
        case 656: 
        case 657: 
        case 658: 
        case 659: 
        case 660: 
        case 661: 
        case 662: 
        case 663: 
        case 664: 
        case 665: 
        case 666: 
        case 667: 
        case 668: 
        case 669: 
        case 670: 
        case 671: 
        case 672: 
        case 673: 
        case 674: 
        case 675: 
        case 676: 
        case 677: 
        case 678: 
        case 679: 
        case 680: 
        case 681: 
        case 682: 
        case 683: 
        case 684: 
        case 685: 
        case 686: 
        case 687: 
        case 688: 
        case 689: 
        case 690: 
        case 691: 
        case 692: 
        case 693: 
        case 694: 
        case 695: 
        case 696: 
        case 697: 
        case 698: 
        case 699: 
        case 700: 
        case 701: 
        case 702: 
        case 703: 
        case 704: 
        case 705: 
        case 706: 
        case 707: 
        case 708: 
        case 709: 
        case 710: 
        case 711: 
        case 712: 
        case 713: 
        case 714: 
        case 715: 
        case 716: 
        case 717: 
        case 718: 
        case 719: 
        case 720: 
        case 721: 
        case 722: 
        case 723: 
        case 724: 
        case 725: 
        case 726: 
        case 727: 
        case 728: 
        case 729: 
        case 730: 
        case 731: 
        case 732: 
        case 733: 
        case 734: 
        case 735: 
        case 736: 
        case 737: 
        case 738: 
        case 739: 
        case 740: 
        case 741: 
        case 742: 
        case 743: 
        case 744: 
        case 745: 
        case 746: 
        case 747: 
        case 748: 
        case 749: 
        case 750: 
        case 751: 
        case 752: 
        case 753: 
        case 754: 
        case 755: 
        case 756: 
        case 757: 
        case 758: 
        case 759: 
        case 760: 
        case 761: 
        case 762: 
        case 763: 
        case 764: 
        case 765: 
        case 766: 
        case 767: 
        case 768: 
        case 769: 
        case 770: 
        case 771: 
        case 772: 
        case 773: 
        case 774: 
        case 775: 
        case 776: 
        case 777: 
        case 778: 
        case 779: 
        case 780: 
        case 781: 
        case 782: 
        case 783: 
        case 784: 
        case 785: 
        case 786: 
        case 787: 
        case 788: 
        case 789: 
        case 790: 
        case 791: 
        case 792: 
        case 793: 
        case 794: 
        case 795: 
        case 796: 
        case 797: 
        case 798: 
        case 799: 
        case 800: 
        case 801: 
        case 802: 
        case 803: 
        case 804: 
        case 805: 
        case 806: 
        case 807: 
        case 808: 
        case 809: 
        case 810: 
        case 811: 
        case 812: 
        case 813: 
        case 814: 
        case 815: 
        case 816: 
        case 817: 
        case 818: 
        case 819: 
        case 820: 
        case 821: 
        case 822: 
        case 823: 
        case 824: 
        case 825: 
        case 826: 
        case 827: 
        case 828: 
        case 829: 
        case 830: 
        case 831: 
        case 832: 
        case 833: 
        case 834: 
        case 835: 
        case 836: 
        case 837: 
        case 838: 
        case 839: 
        case 840: 
        case 841: 
        case 842: 
        case 843: 
        case 844: 
        case 845: 
        case 846: 
        case 847: 
        case 848: 
        case 849: 
        case 850: 
        case 851: 
        case 852: 
        case 853: 
        case 854: 
        case 855: 
        case 856: 
        case 857: 
        case 858: 
        case 859: 
        case 860: 
        case 861: 
        case 862: 
        case 863: 
        case 864: 
        case 865: 
        case 866: 
        case 867: 
        case 868: 
        case 869: 
        case 870: 
        case 871: 
        case 872: 
        case 873: 
        case 874: 
        case 875: 
        case 876: 
        case 877: 
        case 878: 
        case 879: 
        case 880: 
        case 881: 
        case 882: 
        case 883: 
        case 884: 
        case 885: 
        case 886: 
        case 887: 
        case 888: 
        case 889: 
        case 890: 
        case 891: 
        case 892: 
        case 893: 
        case 894: 
        case 895: 
        case 896: 
        case 897: 
        case 898: 
        case 899: 
        case 900: 
        case 901: 
        case 902: 
        case 903: 
        case 904: 
        case 905: 
        case 906: 
        case 907: 
        case 908: 
        case 909: 
        case 910: 
        case 911: 
        case 912: 
        case 913: 
        case 914: 
        case 915: 
        case 916: 
        case 917: 
        case 918: 
        case 919: 
        case 920: 
        case 921: 
        case 922: 
        case 923: 
        case 924: 
        case 925: 
        case 926: 
        case 927: 
        case 928: 
        case 929: 
        case 930: 
        case 931: 
        case 932: 
        case 933: 
        case 934: 
        case 935: 
        case 936: 
        case 937: 
        case 938: 
        case 939: 
        case 940: 
        case 941: 
        case 942: 
        case 943: 
        case 944: 
        case 945: 
        case 946: 
        case 947: 
        case 948: 
        case 949: 
        case 950: 
        case 951: 
        case 952: 
        case 953: 
        case 954: 
        case 955: 
        case 956: 
        case 957: 
        case 958: 
        case 959: 
        case 960: 
        case 961: 
        case 962: 
        case 963: 
        case 964: 
        case 965: 
        case 966: 
        case 967: 
        case 968: 
        case 969: 
        case 970: 
        case 971: 
        case 972: 
        case 973: 
        case 974: 
        case 975: 
        case 976: 
        case 977: 
        case 978: 
        case 979: 
        case 980: 
        case 981: 
        case 982: 
        case 983: 
        case 984: 
        case 985: 
        case 986: 
        case 987: 
        case 988: 
        case 989: 
        case 990: 
        case 991: 
        case 992: 
        case 993: 
        case 994: 
        case 995: 
        case 996: 
        case 997: 
        case 998: 
        case 999: 
        case 1000: 
        case 1001: 
        case 1002: 
        case 1003: 
        case 1004: 
        case 1005: 
        case 1006: 
        case 1007: 
        case 1008: 
        case 1009: 
        case 1010: 
        case 1011: 
        case 1012: 
        case 1013: 
        case 1014: 
        case 1015: 
        case 1016: 
        case 1017: 
        case 1018: 
        case 1019: 
        case 1020: 
        case 1021: 
        case 1022: 
        case 1023: 
            watch_write<struct xenstore_domain_interface, FIELD_req>::on(entry_, struct_addr_, val_);
            break;
        case 1024: 
        case 1025: 
        case 1026: 
        case 1027: 
        case 1028: 
        case 1029: 
        case 1030: 
        case 1031: 
        case 1032: 
        case 1033: 
        case 1034: 
        case 1035: 
        case 1036: 
        case 1037: 
        case 1038: 
        case 1039: 
        case 1040: 
        case 1041: 
        case 1042: 
        case 1043: 
        case 1044: 
        case 1045: 
        case 1046: 
        case 1047: 
        case 1048: 
        case 1049: 
        case 1050: 
        case 1051: 
        case 1052: 
        case 1053: 
        case 1054: 
        case 1055: 
        case 1056: 
        case 1057: 
        case 1058: 
        case 1059: 
        case 1060: 
        case 1061: 
        case 1062: 
        case 1063: 
        case 1064: 
        case 1065: 
        case 1066: 
        case 1067: 
        case 1068: 
        case 1069: 
        case 1070: 
        case 1071: 
        case 1072: 
        case 1073: 
        case 1074: 
        case 1075: 
        case 1076: 
        case 1077: 
        case 1078: 
        case 1079: 
        case 1080: 
        case 1081: 
        case 1082: 
        case 1083: 
        case 1084: 
        case 1085: 
        case 1086: 
        case 1087: 
        case 1088: 
        case 1089: 
        case 1090: 
        case 1091: 
        case 1092: 
        case 1093: 
        case 1094: 
        case 1095: 
        case 1096: 
        case 1097: 
        case 1098: 
        case 1099: 
        case 1100: 
        case 1101: 
        case 1102: 
        case 1103: 
        case 1104: 
        case 1105: 
        case 1106: 
        case 1107: 
        case 1108: 
        case 1109: 
        case 1110: 
        case 1111: 
        case 1112: 
        case 1113: 
        case 1114: 
        case 1115: 
        case 1116: 
        case 1117: 
        case 1118: 
        case 1119: 
        case 1120: 
        case 1121: 
        case 1122: 
        case 1123: 
        case 1124: 
        case 1125: 
        case 1126: 
        case 1127: 
        case 1128: 
        case 1129: 
        case 1130: 
        case 1131: 
        case 1132: 
        case 1133: 
        case 1134: 
        case 1135: 
        case 1136: 
        case 1137: 
        case 1138: 
        case 1139: 
        case 1140: 
        case 1141: 
        case 1142: 
        case 1143: 
        case 1144: 
        case 1145: 
        case 1146: 
        case 1147: 
        case 1148: 
        case 1149: 
        case 1150: 
        case 1151: 
        case 1152: 
        case 1153: 
        case 1154: 
        case 1155: 
        case 1156: 
        case 1157: 
        case 1158: 
        case 1159: 
        case 1160: 
        case 1161: 
        case 1162: 
        case 1163: 
        case 1164: 
        case 1165: 
        case 1166: 
        case 1167: 
        case 1168: 
        case 1169: 
        case 1170: 
        case 1171: 
        case 1172: 
        case 1173: 
        case 1174: 
        case 1175: 
        case 1176: 
        case 1177: 
        case 1178: 
        case 1179: 
        case 1180: 
        case 1181: 
        case 1182: 
        case 1183: 
        case 1184: 
        case 1185: 
        case 1186: 
        case 1187: 
        case 1188: 
        case 1189: 
        case 1190: 
        case 1191: 
        case 1192: 
        case 1193: 
        case 1194: 
        case 1195: 
        case 1196: 
        case 1197: 
        case 1198: 
        case 1199: 
        case 1200: 
        case 1201: 
        case 1202: 
        case 1203: 
        case 1204: 
        case 1205: 
        case 1206: 
        case 1207: 
        case 1208: 
        case 1209: 
        case 1210: 
        case 1211: 
        case 1212: 
        case 1213: 
        case 1214: 
        case 1215: 
        case 1216: 
        case 1217: 
        case 1218: 
        case 1219: 
        case 1220: 
        case 1221: 
        case 1222: 
        case 1223: 
        case 1224: 
        case 1225: 
        case 1226: 
        case 1227: 
        case 1228: 
        case 1229: 
        case 1230: 
        case 1231: 
        case 1232: 
        case 1233: 
        case 1234: 
        case 1235: 
        case 1236: 
        case 1237: 
        case 1238: 
        case 1239: 
        case 1240: 
        case 1241: 
        case 1242: 
        case 1243: 
        case 1244: 
        case 1245: 
        case 1246: 
        case 1247: 
        case 1248: 
        case 1249: 
        case 1250: 
        case 1251: 
        case 1252: 
        case 1253: 
        case 1254: 
        case 1255: 
        case 1256: 
        case 1257: 
        case 1258: 
        case 1259: 
        case 1260: 
        case 1261: 
        case 1262: 
        case 1263: 
        case 1264: 
        case 1265: 
        case 1266: 
        case 1267: 
        case 1268: 
        case 1269: 
        case 1270: 
        case 1271: 
        case 1272: 
        case 1273: 
        case 1274: 
        case 1275: 
        case 1276: 
        case 1277: 
        case 1278: 
        case 1279: 
        case 1280: 
        case 1281: 
        case 1282: 
        case 1283: 
        case 1284: 
        case 1285: 
        case 1286: 
        case 1287: 
        case 1288: 
        case 1289: 
        case 1290: 
        case 1291: 
        case 1292: 
        case 1293: 
        case 1294: 
        case 1295: 
        case 1296: 
        case 1297: 
        case 1298: 
        case 1299: 
        case 1300: 
        case 1301: 
        case 1302: 
        case 1303: 
        case 1304: 
        case 1305: 
        case 1306: 
        case 1307: 
        case 1308: 
        case 1309: 
        case 1310: 
        case 1311: 
        case 1312: 
        case 1313: 
        case 1314: 
        case 1315: 
        case 1316: 
        case 1317: 
        case 1318: 
        case 1319: 
        case 1320: 
        case 1321: 
        case 1322: 
        case 1323: 
        case 1324: 
        case 1325: 
        case 1326: 
        case 1327: 
        case 1328: 
        case 1329: 
        case 1330: 
        case 1331: 
        case 1332: 
        case 1333: 
        case 1334: 
        case 1335: 
        case 1336: 
        case 1337: 
        case 1338: 
        case 1339: 
        case 1340: 
        case 1341: 
        case 1342: 
        case 1343: 
        case 1344: 
        case 1345: 
        case 1346: 
        case 1347: 
        case 1348: 
        case 1349: 
        case 1350: 
        case 1351: 
        case 1352: 
        case 1353: 
        case 1354: 
        case 1355: 
        case 1356: 
        case 1357: 
        case 1358: 
        case 1359: 
        case 1360: 
        case 1361: 
        case 1362: 
        case 1363: 
        case 1364: 
        case 1365: 
        case 1366: 
        case 1367: 
        case 1368: 
        case 1369: 
        case 1370: 
        case 1371: 
        case 1372: 
        case 1373: 
        case 1374: 
        case 1375: 
        case 1376: 
        case 1377: 
        case 1378: 
        case 1379: 
        case 1380: 
        case 1381: 
        case 1382: 
        case 1383: 
        case 1384: 
        case 1385: 
        case 1386: 
        case 1387: 
        case 1388: 
        case 1389: 
        case 1390: 
        case 1391: 
        case 1392: 
        case 1393: 
        case 1394: 
        case 1395: 
        case 1396: 
        case 1397: 
        case 1398: 
        case 1399: 
        case 1400: 
        case 1401: 
        case 1402: 
        case 1403: 
        case 1404: 
        case 1405: 
        case 1406: 
        case 1407: 
        case 1408: 
        case 1409: 
        case 1410: 
        case 1411: 
        case 1412: 
        case 1413: 
        case 1414: 
        case 1415: 
        case 1416: 
        case 1417: 
        case 1418: 
        case 1419: 
        case 1420: 
        case 1421: 
        case 1422: 
        case 1423: 
        case 1424: 
        case 1425: 
        case 1426: 
        case 1427: 
        case 1428: 
        case 1429: 
        case 1430: 
        case 1431: 
        case 1432: 
        case 1433: 
        case 1434: 
        case 1435: 
        case 1436: 
        case 1437: 
        case 1438: 
        case 1439: 
        case 1440: 
        case 1441: 
        case 1442: 
        case 1443: 
        case 1444: 
        case 1445: 
        case 1446: 
        case 1447: 
        case 1448: 
        case 1449: 
        case 1450: 
        case 1451: 
        case 1452: 
        case 1453: 
        case 1454: 
        case 1455: 
        case 1456: 
        case 1457: 
        case 1458: 
        case 1459: 
        case 1460: 
        case 1461: 
        case 1462: 
        case 1463: 
        case 1464: 
        case 1465: 
        case 1466: 
        case 1467: 
        case 1468: 
        case 1469: 
        case 1470: 
        case 1471: 
        case 1472: 
        case 1473: 
        case 1474: 
        case 1475: 
        case 1476: 
        case 1477: 
        case 1478: 
        case 1479: 
        case 1480: 
        case 1481: 
        case 1482: 
        case 1483: 
        case 1484: 
        case 1485: 
        case 1486: 
        case 1487: 
        case 1488: 
        case 1489: 
        case 1490: 
        case 1491: 
        case 1492: 
        case 1493: 
        case 1494: 
        case 1495: 
        case 1496: 
        case 1497: 
        case 1498: 
        case 1499: 
        case 1500: 
        case 1501: 
        case 1502: 
        case 1503: 
        case 1504: 
        case 1505: 
        case 1506: 
        case 1507: 
        case 1508: 
        case 1509: 
        case 1510: 
        case 1511: 
        case 1512: 
        case 1513: 
        case 1514: 
        case 1515: 
        case 1516: 
        case 1517: 
        case 1518: 
        case 1519: 
        case 1520: 
        case 1521: 
        case 1522: 
        case 1523: 
        case 1524: 
        case 1525: 
        case 1526: 
        case 1527: 
        case 1528: 
        case 1529: 
        case 1530: 
        case 1531: 
        case 1532: 
        case 1533: 
        case 1534: 
        case 1535: 
        case 1536: 
        case 1537: 
        case 1538: 
        case 1539: 
        case 1540: 
        case 1541: 
        case 1542: 
        case 1543: 
        case 1544: 
        case 1545: 
        case 1546: 
        case 1547: 
        case 1548: 
        case 1549: 
        case 1550: 
        case 1551: 
        case 1552: 
        case 1553: 
        case 1554: 
        case 1555: 
        case 1556: 
        case 1557: 
        case 1558: 
        case 1559: 
        case 1560: 
        case 1561: 
        case 1562: 
        case 1563: 
        case 1564: 
        case 1565: 
        case 1566: 
        case 1567: 
        case 1568: 
        case 1569: 
        case 1570: 
        case 1571: 
        case 1572: 
        case 1573: 
        case 1574: 
        case 1575: 
        case 1576: 
        case 1577: 
        case 1578: 
        case 1579: 
        case 1580: 
        case 1581: 
        case 1582: 
        case 1583: 
        case 1584: 
        case 1585: 
        case 1586: 
        case 1587: 
        case 1588: 
        case 1589: 
        case 1590: 
        case 1591: 
        case 1592: 
        case 1593: 
        case 1594: 
        case 1595: 
        case 1596: 
        case 1597: 
        case 1598: 
        case 1599: 
        case 1600: 
        case 1601: 
        case 1602: 
        case 1603: 
        case 1604: 
        case 1605: 
        case 1606: 
        case 1607: 
        case 1608: 
        case 1609: 
        case 1610: 
        case 1611: 
        case 1612: 
        case 1613: 
        case 1614: 
        case 1615: 
        case 1616: 
        case 1617: 
        case 1618: 
        case 1619: 
        case 1620: 
        case 1621: 
        case 1622: 
        case 1623: 
        case 1624: 
        case 1625: 
        case 1626: 
        case 1627: 
        case 1628: 
        case 1629: 
        case 1630: 
        case 1631: 
        case 1632: 
        case 1633: 
        case 1634: 
        case 1635: 
        case 1636: 
        case 1637: 
        case 1638: 
        case 1639: 
        case 1640: 
        case 1641: 
        case 1642: 
        case 1643: 
        case 1644: 
        case 1645: 
        case 1646: 
        case 1647: 
        case 1648: 
        case 1649: 
        case 1650: 
        case 1651: 
        case 1652: 
        case 1653: 
        case 1654: 
        case 1655: 
        case 1656: 
        case 1657: 
        case 1658: 
        case 1659: 
        case 1660: 
        case 1661: 
        case 1662: 
        case 1663: 
        case 1664: 
        case 1665: 
        case 1666: 
        case 1667: 
        case 1668: 
        case 1669: 
        case 1670: 
        case 1671: 
        case 1672: 
        case 1673: 
        case 1674: 
        case 1675: 
        case 1676: 
        case 1677: 
        case 1678: 
        case 1679: 
        case 1680: 
        case 1681: 
        case 1682: 
        case 1683: 
        case 1684: 
        case 1685: 
        case 1686: 
        case 1687: 
        case 1688: 
        case 1689: 
        case 1690: 
        case 1691: 
        case 1692: 
        case 1693: 
        case 1694: 
        case 1695: 
        case 1696: 
        case 1697: 
        case 1698: 
        case 1699: 
        case 1700: 
        case 1701: 
        case 1702: 
        case 1703: 
        case 1704: 
        case 1705: 
        case 1706: 
        case 1707: 
        case 1708: 
        case 1709: 
        case 1710: 
        case 1711: 
        case 1712: 
        case 1713: 
        case 1714: 
        case 1715: 
        case 1716: 
        case 1717: 
        case 1718: 
        case 1719: 
        case 1720: 
        case 1721: 
        case 1722: 
        case 1723: 
        case 1724: 
        case 1725: 
        case 1726: 
        case 1727: 
        case 1728: 
        case 1729: 
        case 1730: 
        case 1731: 
        case 1732: 
        case 1733: 
        case 1734: 
        case 1735: 
        case 1736: 
        case 1737: 
        case 1738: 
        case 1739: 
        case 1740: 
        case 1741: 
        case 1742: 
        case 1743: 
        case 1744: 
        case 1745: 
        case 1746: 
        case 1747: 
        case 1748: 
        case 1749: 
        case 1750: 
        case 1751: 
        case 1752: 
        case 1753: 
        case 1754: 
        case 1755: 
        case 1756: 
        case 1757: 
        case 1758: 
        case 1759: 
        case 1760: 
        case 1761: 
        case 1762: 
        case 1763: 
        case 1764: 
        case 1765: 
        case 1766: 
        case 1767: 
        case 1768: 
        case 1769: 
        case 1770: 
        case 1771: 
        case 1772: 
        case 1773: 
        case 1774: 
        case 1775: 
        case 1776: 
        case 1777: 
        case 1778: 
        case 1779: 
        case 1780: 
        case 1781: 
        case 1782: 
        case 1783: 
        case 1784: 
        case 1785: 
        case 1786: 
        case 1787: 
        case 1788: 
        case 1789: 
        case 1790: 
        case 1791: 
        case 1792: 
        case 1793: 
        case 1794: 
        case 1795: 
        case 1796: 
        case 1797: 
        case 1798: 
        case 1799: 
        case 1800: 
        case 1801: 
        case 1802: 
        case 1803: 
        case 1804: 
        case 1805: 
        case 1806: 
        case 1807: 
        case 1808: 
        case 1809: 
        case 1810: 
        case 1811: 
        case 1812: 
        case 1813: 
        case 1814: 
        case 1815: 
        case 1816: 
        case 1817: 
        case 1818: 
        case 1819: 
        case 1820: 
        case 1821: 
        case 1822: 
        case 1823: 
        case 1824: 
        case 1825: 
        case 1826: 
        case 1827: 
        case 1828: 
        case 1829: 
        case 1830: 
        case 1831: 
        case 1832: 
        case 1833: 
        case 1834: 
        case 1835: 
        case 1836: 
        case 1837: 
        case 1838: 
        case 1839: 
        case 1840: 
        case 1841: 
        case 1842: 
        case 1843: 
        case 1844: 
        case 1845: 
        case 1846: 
        case 1847: 
        case 1848: 
        case 1849: 
        case 1850: 
        case 1851: 
        case 1852: 
        case 1853: 
        case 1854: 
        case 1855: 
        case 1856: 
        case 1857: 
        case 1858: 
        case 1859: 
        case 1860: 
        case 1861: 
        case 1862: 
        case 1863: 
        case 1864: 
        case 1865: 
        case 1866: 
        case 1867: 
        case 1868: 
        case 1869: 
        case 1870: 
        case 1871: 
        case 1872: 
        case 1873: 
        case 1874: 
        case 1875: 
        case 1876: 
        case 1877: 
        case 1878: 
        case 1879: 
        case 1880: 
        case 1881: 
        case 1882: 
        case 1883: 
        case 1884: 
        case 1885: 
        case 1886: 
        case 1887: 
        case 1888: 
        case 1889: 
        case 1890: 
        case 1891: 
        case 1892: 
        case 1893: 
        case 1894: 
        case 1895: 
        case 1896: 
        case 1897: 
        case 1898: 
        case 1899: 
        case 1900: 
        case 1901: 
        case 1902: 
        case 1903: 
        case 1904: 
        case 1905: 
        case 1906: 
        case 1907: 
        case 1908: 
        case 1909: 
        case 1910: 
        case 1911: 
        case 1912: 
        case 1913: 
        case 1914: 
        case 1915: 
        case 1916: 
        case 1917: 
        case 1918: 
        case 1919: 
        case 1920: 
        case 1921: 
        case 1922: 
        case 1923: 
        case 1924: 
        case 1925: 
        case 1926: 
        case 1927: 
        case 1928: 
        case 1929: 
        case 1930: 
        case 1931: 
        case 1932: 
        case 1933: 
        case 1934: 
        case 1935: 
        case 1936: 
        case 1937: 
        case 1938: 
        case 1939: 
        case 1940: 
        case 1941: 
        case 1942: 
        case 1943: 
        case 1944: 
        case 1945: 
        case 1946: 
        case 1947: 
        case 1948: 
        case 1949: 
        case 1950: 
        case 1951: 
        case 1952: 
        case 1953: 
        case 1954: 
        case 1955: 
        case 1956: 
        case 1957: 
        case 1958: 
        case 1959: 
        case 1960: 
        case 1961: 
        case 1962: 
        case 1963: 
        case 1964: 
        case 1965: 
        case 1966: 
        case 1967: 
        case 1968: 
        case 1969: 
        case 1970: 
        case 1971: 
        case 1972: 
        case 1973: 
        case 1974: 
        case 1975: 
        case 1976: 
        case 1977: 
        case 1978: 
        case 1979: 
        case 1980: 
        case 1981: 
        case 1982: 
        case 1983: 
        case 1984: 
        case 1985: 
        case 1986: 
        case 1987: 
        case 1988: 
        case 1989: 
        case 1990: 
        case 1991: 
        case 1992: 
        case 1993: 
        case 1994: 
        case 1995: 
        case 1996: 
        case 1997: 
        case 1998: 
        case 1999: 
        case 2000: 
        case 2001: 
        case 2002: 
        case 2003: 
        case 2004: 
        case 2005: 
        case 2006: 
        case 2007: 
        case 2008: 
        case 2009: 
        case 2010: 
        case 2011: 
        case 2012: 
        case 2013: 
        case 2014: 
        case 2015: 
        case 2016: 
        case 2017: 
        case 2018: 
        case 2019: 
        case 2020: 
        case 2021: 
        case 2022: 
        case 2023: 
        case 2024: 
        case 2025: 
        case 2026: 
        case 2027: 
        case 2028: 
        case 2029: 
        case 2030: 
        case 2031: 
        case 2032: 
        case 2033: 
        case 2034: 
        case 2035: 
        case 2036: 
        case 2037: 
        case 2038: 
        case 2039: 
        case 2040: 
        case 2041: 
        case 2042: 
        case 2043: 
        case 2044: 
        case 2045: 
        case 2046: 
        case 2047: 
            watch_write<struct xenstore_domain_interface, FIELD_rsp>::on(entry_, struct_addr_, val_);
            break;
        case 2048: 
        case 2049: 
        case 2050: 
        case 2051: 
            watch_write<struct xenstore_domain_interface, FIELD_req_cons>::on(entry_, struct_addr_, val_);
            break;
        case 2052: 
        case 2053: 
        case 2054: 
        case 2055: 
            watch_write<struct xenstore_domain_interface, FIELD_req_prod>::on(entry_, struct_addr_, val_);
            break;
        case 2056: 
        case 2057: 
        case 2058: 
        case 2059: 
            watch_write<struct xenstore_domain_interface, FIELD_rsp_cons>::on(entry_, struct_addr_, val_);
            break;
        case 2060: 
        case 2061: 
        case 2062: 
        case 2063: 
            watch_write<struct xenstore_domain_interface, FIELD_rsp_prod>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct siginfo> {
    enum { TYPE_SIZE = sizeof(struct siginfo) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct siginfo *struct_addr_(((struct siginfo *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct siginfo, FIELD_si_signo>::on(entry_, struct_addr_);
            break;
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct siginfo, FIELD_si_errno>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_read<struct siginfo, FIELD_si_code>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_read<struct siginfo, FIELD__sifields>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct siginfo *struct_addr_(((struct siginfo *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct siginfo, FIELD_si_signo>::on(entry_, struct_addr_, val_);
            break;
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct siginfo, FIELD_si_errno>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_write<struct siginfo, FIELD_si_code>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_write<struct siginfo, FIELD__sifields>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct xenbus_driver> {
    enum { TYPE_SIZE = sizeof(struct xenbus_driver) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct xenbus_driver *struct_addr_(((struct xenbus_driver *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct xenbus_driver, FIELD_name>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct xenbus_driver, FIELD_owner>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct xenbus_driver, FIELD_ids>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct xenbus_driver, FIELD_probe>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct xenbus_driver, FIELD_otherend_changed>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct xenbus_driver, FIELD_remove>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct xenbus_driver, FIELD_suspend>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct xenbus_driver, FIELD_resume>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct xenbus_driver, FIELD_uevent>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
            watch_read<struct xenbus_driver, FIELD_driver>::on(entry_, struct_addr_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
            watch_read<struct xenbus_driver, FIELD_read_otherend_details>::on(entry_, struct_addr_);
            break;
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
            watch_read<struct xenbus_driver, FIELD_is_ready>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct xenbus_driver *struct_addr_(((struct xenbus_driver *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct xenbus_driver, FIELD_name>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct xenbus_driver, FIELD_owner>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct xenbus_driver, FIELD_ids>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct xenbus_driver, FIELD_probe>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct xenbus_driver, FIELD_otherend_changed>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct xenbus_driver, FIELD_remove>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct xenbus_driver, FIELD_suspend>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct xenbus_driver, FIELD_resume>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct xenbus_driver, FIELD_uevent>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
            watch_write<struct xenbus_driver, FIELD_driver>::on(entry_, struct_addr_, val_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
            watch_write<struct xenbus_driver, FIELD_read_otherend_details>::on(entry_, struct_addr_, val_);
            break;
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
            watch_write<struct xenbus_driver, FIELD_is_ready>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct sigpending> {
    enum { TYPE_SIZE = sizeof(struct sigpending) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct sigpending *struct_addr_(((struct sigpending *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct sigpending, FIELD_list>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_read<struct sigpending, FIELD_signal>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct sigpending *struct_addr_(((struct sigpending *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct sigpending, FIELD_list>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_write<struct sigpending, FIELD_signal>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct sysv_sem> {
    enum { TYPE_SIZE = sizeof(struct sysv_sem) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct sysv_sem *struct_addr_(((struct sysv_sem *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct sysv_sem, FIELD_undo_list>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct sysv_sem *struct_addr_(((struct sysv_sem *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct sysv_sem, FIELD_undo_list>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct xb_find_info> {
    enum { TYPE_SIZE = sizeof(struct xb_find_info) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct xb_find_info *struct_addr_(((struct xb_find_info *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct xb_find_info, FIELD_dev>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct xb_find_info, FIELD_nodename>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct xb_find_info *struct_addr_(((struct xb_find_info *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct xb_find_info, FIELD_dev>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct xb_find_info, FIELD_nodename>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct kmem_cache_order_objects> {
    enum { TYPE_SIZE = sizeof(struct kmem_cache_order_objects) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct kmem_cache_order_objects *struct_addr_(((struct kmem_cache_order_objects *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct kmem_cache_order_objects, FIELD_x>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct kmem_cache_order_objects *struct_addr_(((struct kmem_cache_order_objects *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct kmem_cache_order_objects, FIELD_x>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct generic_bl_info> {
    enum { TYPE_SIZE = sizeof(struct generic_bl_info) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct generic_bl_info *struct_addr_(((struct generic_bl_info *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct generic_bl_info, FIELD_name>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_read<struct generic_bl_info, FIELD_max_intensity>::on(entry_, struct_addr_);
            break;
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct generic_bl_info, FIELD_default_intensity>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
            watch_read<struct generic_bl_info, FIELD_limit_mask>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct generic_bl_info, FIELD_set_bl_intensity>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct generic_bl_info, FIELD_kick_battery>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct generic_bl_info *struct_addr_(((struct generic_bl_info *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct generic_bl_info, FIELD_name>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_write<struct generic_bl_info, FIELD_max_intensity>::on(entry_, struct_addr_, val_);
            break;
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct generic_bl_info, FIELD_default_intensity>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
            watch_write<struct generic_bl_info, FIELD_limit_mask>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct generic_bl_info, FIELD_set_bl_intensity>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct generic_bl_info, FIELD_kick_battery>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, mm_segment_t> {
    enum { TYPE_SIZE = sizeof(mm_segment_t) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        mm_segment_t *struct_addr_(((mm_segment_t *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<mm_segment_t, FIELD_seg>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        mm_segment_t *struct_addr_(((mm_segment_t *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<mm_segment_t, FIELD_seg>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct kthread_create_info> {
    enum { TYPE_SIZE = sizeof(struct kthread_create_info) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct kthread_create_info *struct_addr_(((struct kthread_create_info *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct kthread_create_info, FIELD_threadfn>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct kthread_create_info, FIELD_data>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct kthread_create_info, FIELD_result>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct kthread_create_info, FIELD_done>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct kthread_create_info, FIELD_list>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct kthread_create_info *struct_addr_(((struct kthread_create_info *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct kthread_create_info, FIELD_threadfn>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct kthread_create_info, FIELD_data>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct kthread_create_info, FIELD_result>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct kthread_create_info, FIELD_done>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct kthread_create_info, FIELD_list>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct mem_dqinfo> {
    enum { TYPE_SIZE = sizeof(struct mem_dqinfo) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct mem_dqinfo *struct_addr_(((struct mem_dqinfo *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct mem_dqinfo, FIELD_dqi_format>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_read<struct mem_dqinfo, FIELD_dqi_fmt_id>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct mem_dqinfo, FIELD_dqi_dirty_list>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct mem_dqinfo, FIELD_dqi_flags>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
            watch_read<struct mem_dqinfo, FIELD_dqi_bgrace>::on(entry_, struct_addr_);
            break;
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct mem_dqinfo, FIELD_dqi_igrace>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct mem_dqinfo, FIELD_dqi_maxblimit>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct mem_dqinfo, FIELD_dqi_maxilimit>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct mem_dqinfo, FIELD_dqi_priv>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct mem_dqinfo *struct_addr_(((struct mem_dqinfo *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct mem_dqinfo, FIELD_dqi_format>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
            watch_write<struct mem_dqinfo, FIELD_dqi_fmt_id>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct mem_dqinfo, FIELD_dqi_dirty_list>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct mem_dqinfo, FIELD_dqi_flags>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
            watch_write<struct mem_dqinfo, FIELD_dqi_bgrace>::on(entry_, struct_addr_, val_);
            break;
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct mem_dqinfo, FIELD_dqi_igrace>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct mem_dqinfo, FIELD_dqi_maxblimit>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct mem_dqinfo, FIELD_dqi_maxilimit>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct mem_dqinfo, FIELD_dqi_priv>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct net_device_stats> {
    enum { TYPE_SIZE = sizeof(struct net_device_stats) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct net_device_stats *struct_addr_(((struct net_device_stats *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct net_device_stats, FIELD_rx_packets>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct net_device_stats, FIELD_tx_packets>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct net_device_stats, FIELD_rx_bytes>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct net_device_stats, FIELD_tx_bytes>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct net_device_stats, FIELD_rx_errors>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct net_device_stats, FIELD_tx_errors>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct net_device_stats, FIELD_rx_dropped>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct net_device_stats, FIELD_tx_dropped>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct net_device_stats, FIELD_multicast>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct net_device_stats, FIELD_collisions>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct net_device_stats, FIELD_rx_length_errors>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct net_device_stats, FIELD_rx_over_errors>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_read<struct net_device_stats, FIELD_rx_crc_errors>::on(entry_, struct_addr_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_read<struct net_device_stats, FIELD_rx_frame_errors>::on(entry_, struct_addr_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_read<struct net_device_stats, FIELD_rx_fifo_errors>::on(entry_, struct_addr_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_read<struct net_device_stats, FIELD_rx_missed_errors>::on(entry_, struct_addr_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_read<struct net_device_stats, FIELD_tx_aborted_errors>::on(entry_, struct_addr_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_read<struct net_device_stats, FIELD_tx_carrier_errors>::on(entry_, struct_addr_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_read<struct net_device_stats, FIELD_tx_fifo_errors>::on(entry_, struct_addr_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
            watch_read<struct net_device_stats, FIELD_tx_heartbeat_errors>::on(entry_, struct_addr_);
            break;
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
            watch_read<struct net_device_stats, FIELD_tx_window_errors>::on(entry_, struct_addr_);
            break;
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
            watch_read<struct net_device_stats, FIELD_rx_compressed>::on(entry_, struct_addr_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
            watch_read<struct net_device_stats, FIELD_tx_compressed>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct net_device_stats *struct_addr_(((struct net_device_stats *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct net_device_stats, FIELD_rx_packets>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct net_device_stats, FIELD_tx_packets>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct net_device_stats, FIELD_rx_bytes>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct net_device_stats, FIELD_tx_bytes>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct net_device_stats, FIELD_rx_errors>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct net_device_stats, FIELD_tx_errors>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct net_device_stats, FIELD_rx_dropped>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct net_device_stats, FIELD_tx_dropped>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct net_device_stats, FIELD_multicast>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct net_device_stats, FIELD_collisions>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct net_device_stats, FIELD_rx_length_errors>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct net_device_stats, FIELD_rx_over_errors>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_write<struct net_device_stats, FIELD_rx_crc_errors>::on(entry_, struct_addr_, val_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_write<struct net_device_stats, FIELD_rx_frame_errors>::on(entry_, struct_addr_, val_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_write<struct net_device_stats, FIELD_rx_fifo_errors>::on(entry_, struct_addr_, val_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_write<struct net_device_stats, FIELD_rx_missed_errors>::on(entry_, struct_addr_, val_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_write<struct net_device_stats, FIELD_tx_aborted_errors>::on(entry_, struct_addr_, val_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_write<struct net_device_stats, FIELD_tx_carrier_errors>::on(entry_, struct_addr_, val_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_write<struct net_device_stats, FIELD_tx_fifo_errors>::on(entry_, struct_addr_, val_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
            watch_write<struct net_device_stats, FIELD_tx_heartbeat_errors>::on(entry_, struct_addr_, val_);
            break;
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
            watch_write<struct net_device_stats, FIELD_tx_window_errors>::on(entry_, struct_addr_, val_);
            break;
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
            watch_write<struct net_device_stats, FIELD_rx_compressed>::on(entry_, struct_addr_, val_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
            watch_write<struct net_device_stats, FIELD_tx_compressed>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct dquot_operations> {
    enum { TYPE_SIZE = sizeof(struct dquot_operations) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct dquot_operations *struct_addr_(((struct dquot_operations *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct dquot_operations, FIELD_initialize>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct dquot_operations, FIELD_drop>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct dquot_operations, FIELD_alloc_space>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct dquot_operations, FIELD_alloc_inode>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct dquot_operations, FIELD_free_space>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct dquot_operations, FIELD_free_inode>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct dquot_operations, FIELD_transfer>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct dquot_operations, FIELD_write_dquot>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct dquot_operations, FIELD_alloc_dquot>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct dquot_operations, FIELD_destroy_dquot>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct dquot_operations, FIELD_acquire_dquot>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct dquot_operations, FIELD_release_dquot>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_read<struct dquot_operations, FIELD_mark_dirty>::on(entry_, struct_addr_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_read<struct dquot_operations, FIELD_write_info>::on(entry_, struct_addr_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_read<struct dquot_operations, FIELD_reserve_space>::on(entry_, struct_addr_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_read<struct dquot_operations, FIELD_claim_space>::on(entry_, struct_addr_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_read<struct dquot_operations, FIELD_release_rsv>::on(entry_, struct_addr_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_read<struct dquot_operations, FIELD_get_reserved_space>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct dquot_operations *struct_addr_(((struct dquot_operations *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct dquot_operations, FIELD_initialize>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct dquot_operations, FIELD_drop>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct dquot_operations, FIELD_alloc_space>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct dquot_operations, FIELD_alloc_inode>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct dquot_operations, FIELD_free_space>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct dquot_operations, FIELD_free_inode>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct dquot_operations, FIELD_transfer>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct dquot_operations, FIELD_write_dquot>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct dquot_operations, FIELD_alloc_dquot>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct dquot_operations, FIELD_destroy_dquot>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct dquot_operations, FIELD_acquire_dquot>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct dquot_operations, FIELD_release_dquot>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_write<struct dquot_operations, FIELD_mark_dirty>::on(entry_, struct_addr_, val_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_write<struct dquot_operations, FIELD_write_info>::on(entry_, struct_addr_, val_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_write<struct dquot_operations, FIELD_reserve_space>::on(entry_, struct_addr_, val_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_write<struct dquot_operations, FIELD_claim_space>::on(entry_, struct_addr_, val_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_write<struct dquot_operations, FIELD_release_rsv>::on(entry_, struct_addr_, val_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_write<struct dquot_operations, FIELD_get_reserved_space>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct semaphore> {
    enum { TYPE_SIZE = sizeof(struct semaphore) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct semaphore *struct_addr_(((struct semaphore *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct semaphore, FIELD_lock>::on(entry_, struct_addr_);
            break;
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct semaphore, FIELD_count>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct semaphore, FIELD_wait_list>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct semaphore *struct_addr_(((struct semaphore *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct semaphore, FIELD_lock>::on(entry_, struct_addr_, val_);
            break;
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct semaphore, FIELD_count>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct semaphore, FIELD_wait_list>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct rcu_head> {
    enum { TYPE_SIZE = sizeof(struct rcu_head) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct rcu_head *struct_addr_(((struct rcu_head *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct rcu_head, FIELD_next>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct rcu_head, FIELD_func>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct rcu_head *struct_addr_(((struct rcu_head *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct rcu_head, FIELD_next>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct rcu_head, FIELD_func>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct pci_dynids> {
    enum { TYPE_SIZE = sizeof(struct pci_dynids) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct pci_dynids *struct_addr_(((struct pci_dynids *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct pci_dynids, FIELD_lock>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct pci_dynids, FIELD_list>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct pci_dynids *struct_addr_(((struct pci_dynids *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct pci_dynids, FIELD_lock>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct pci_dynids, FIELD_list>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct inode_operations> {
    enum { TYPE_SIZE = sizeof(struct inode_operations) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct inode_operations *struct_addr_(((struct inode_operations *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct inode_operations, FIELD_create>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct inode_operations, FIELD_lookup>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct inode_operations, FIELD_link>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct inode_operations, FIELD_unlink>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct inode_operations, FIELD_symlink>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct inode_operations, FIELD_mkdir>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct inode_operations, FIELD_rmdir>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct inode_operations, FIELD_mknod>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct inode_operations, FIELD_rename>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct inode_operations, FIELD_readlink>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct inode_operations, FIELD_follow_link>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct inode_operations, FIELD_put_link>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_read<struct inode_operations, FIELD_truncate>::on(entry_, struct_addr_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_read<struct inode_operations, FIELD_permission>::on(entry_, struct_addr_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_read<struct inode_operations, FIELD_check_acl>::on(entry_, struct_addr_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_read<struct inode_operations, FIELD_setattr>::on(entry_, struct_addr_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_read<struct inode_operations, FIELD_getattr>::on(entry_, struct_addr_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_read<struct inode_operations, FIELD_setxattr>::on(entry_, struct_addr_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_read<struct inode_operations, FIELD_getxattr>::on(entry_, struct_addr_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
            watch_read<struct inode_operations, FIELD_listxattr>::on(entry_, struct_addr_);
            break;
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
            watch_read<struct inode_operations, FIELD_removexattr>::on(entry_, struct_addr_);
            break;
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
            watch_read<struct inode_operations, FIELD_truncate_range>::on(entry_, struct_addr_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
            watch_read<struct inode_operations, FIELD_fallocate>::on(entry_, struct_addr_);
            break;
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
            watch_read<struct inode_operations, FIELD_fiemap>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct inode_operations *struct_addr_(((struct inode_operations *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct inode_operations, FIELD_create>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct inode_operations, FIELD_lookup>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct inode_operations, FIELD_link>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct inode_operations, FIELD_unlink>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct inode_operations, FIELD_symlink>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct inode_operations, FIELD_mkdir>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct inode_operations, FIELD_rmdir>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct inode_operations, FIELD_mknod>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct inode_operations, FIELD_rename>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct inode_operations, FIELD_readlink>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct inode_operations, FIELD_follow_link>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct inode_operations, FIELD_put_link>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_write<struct inode_operations, FIELD_truncate>::on(entry_, struct_addr_, val_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_write<struct inode_operations, FIELD_permission>::on(entry_, struct_addr_, val_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_write<struct inode_operations, FIELD_check_acl>::on(entry_, struct_addr_, val_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_write<struct inode_operations, FIELD_setattr>::on(entry_, struct_addr_, val_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_write<struct inode_operations, FIELD_getattr>::on(entry_, struct_addr_, val_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_write<struct inode_operations, FIELD_setxattr>::on(entry_, struct_addr_, val_);
            break;
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
            watch_write<struct inode_operations, FIELD_getxattr>::on(entry_, struct_addr_, val_);
            break;
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
            watch_write<struct inode_operations, FIELD_listxattr>::on(entry_, struct_addr_, val_);
            break;
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
            watch_write<struct inode_operations, FIELD_removexattr>::on(entry_, struct_addr_, val_);
            break;
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
            watch_write<struct inode_operations, FIELD_truncate_range>::on(entry_, struct_addr_, val_);
            break;
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
            watch_write<struct inode_operations, FIELD_fallocate>::on(entry_, struct_addr_, val_);
            break;
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
            watch_write<struct inode_operations, FIELD_fiemap>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, interrupt_stack_frame> {
    enum { TYPE_SIZE = sizeof(interrupt_stack_frame) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        interrupt_stack_frame *struct_addr_(((interrupt_stack_frame *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<interrupt_stack_frame, FIELD_error_code>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<interrupt_stack_frame, FIELD_xip>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<interrupt_stack_frame, FIELD_cs>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<interrupt_stack_frame, FIELD_xflags>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<interrupt_stack_frame, FIELD_xsp>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<interrupt_stack_frame, FIELD_ss>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        interrupt_stack_frame *struct_addr_(((interrupt_stack_frame *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<interrupt_stack_frame, FIELD_error_code>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<interrupt_stack_frame, FIELD_xip>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<interrupt_stack_frame, FIELD_cs>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<interrupt_stack_frame, FIELD_xflags>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<interrupt_stack_frame, FIELD_xsp>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<interrupt_stack_frame, FIELD_ss>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct dev_archdata> {
    enum { TYPE_SIZE = sizeof(struct dev_archdata) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct dev_archdata *struct_addr_(((struct dev_archdata *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct dev_archdata, FIELD_acpi_handle>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct dev_archdata, FIELD_dma_ops>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct dev_archdata *struct_addr_(((struct dev_archdata *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct dev_archdata, FIELD_acpi_handle>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct dev_archdata, FIELD_dma_ops>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct ctl_table> {
    enum { TYPE_SIZE = sizeof(struct ctl_table) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct ctl_table *struct_addr_(((struct ctl_table *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct ctl_table, FIELD_ctl_name>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct ctl_table, FIELD_procname>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct ctl_table, FIELD_data>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
            watch_read<struct ctl_table, FIELD_maxlen>::on(entry_, struct_addr_);
            break;
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct ctl_table, FIELD_mode>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct ctl_table, FIELD_child>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct ctl_table, FIELD_parent>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct ctl_table, FIELD_proc_handler>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct ctl_table, FIELD_strategy>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct ctl_table, FIELD_extra1>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct ctl_table, FIELD_extra2>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct ctl_table *struct_addr_(((struct ctl_table *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct ctl_table, FIELD_ctl_name>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct ctl_table, FIELD_procname>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct ctl_table, FIELD_data>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
            watch_write<struct ctl_table, FIELD_maxlen>::on(entry_, struct_addr_, val_);
            break;
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct ctl_table, FIELD_mode>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct ctl_table, FIELD_child>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct ctl_table, FIELD_parent>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct ctl_table, FIELD_proc_handler>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct ctl_table, FIELD_strategy>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct ctl_table, FIELD_extra1>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct ctl_table, FIELD_extra2>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, union ktime> {
    enum { TYPE_SIZE = sizeof(union ktime) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        union ktime *struct_addr_(((union ktime *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<union ktime, FIELD_tv64>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        union ktime *struct_addr_(((union ktime *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<union ktime, FIELD_tv64>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, union input_seq_state> {
    enum { TYPE_SIZE = sizeof(union input_seq_state) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        union input_seq_state *struct_addr_(((union input_seq_state *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<union input_seq_state, FIELD_p>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        union input_seq_state *struct_addr_(((union input_seq_state *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<union input_seq_state, FIELD_p>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct address_space> {
    enum { TYPE_SIZE = sizeof(struct address_space) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct address_space *struct_addr_(((struct address_space *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct address_space, FIELD_host>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct address_space, FIELD_page_tree>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
            watch_read<struct address_space, FIELD_tree_lock>::on(entry_, struct_addr_);
            break;
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct address_space, FIELD_i_mmap_writable>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct address_space, FIELD_i_mmap>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct address_space, FIELD_i_mmap_nonlinear>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
            watch_read<struct address_space, FIELD_i_mmap_lock>::on(entry_, struct_addr_);
            break;
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct address_space, FIELD_truncate_count>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct address_space, FIELD_nrpages>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct address_space, FIELD_writeback_index>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct address_space, FIELD_a_ops>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_read<struct address_space, FIELD_flags>::on(entry_, struct_addr_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_read<struct address_space, FIELD_backing_dev_info>::on(entry_, struct_addr_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
            watch_read<struct address_space, FIELD_private_lock>::on(entry_, struct_addr_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_read<struct address_space, FIELD_private_list>::on(entry_, struct_addr_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_read<struct address_space, FIELD_assoc_mapping>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct address_space *struct_addr_(((struct address_space *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct address_space, FIELD_host>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct address_space, FIELD_page_tree>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
            watch_write<struct address_space, FIELD_tree_lock>::on(entry_, struct_addr_, val_);
            break;
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct address_space, FIELD_i_mmap_writable>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct address_space, FIELD_i_mmap>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct address_space, FIELD_i_mmap_nonlinear>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
            watch_write<struct address_space, FIELD_i_mmap_lock>::on(entry_, struct_addr_, val_);
            break;
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct address_space, FIELD_truncate_count>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct address_space, FIELD_nrpages>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct address_space, FIELD_writeback_index>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct address_space, FIELD_a_ops>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_write<struct address_space, FIELD_flags>::on(entry_, struct_addr_, val_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_write<struct address_space, FIELD_backing_dev_info>::on(entry_, struct_addr_, val_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
            watch_write<struct address_space, FIELD_private_lock>::on(entry_, struct_addr_, val_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
            watch_write<struct address_space, FIELD_private_list>::on(entry_, struct_addr_, val_);
            break;
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
            watch_write<struct address_space, FIELD_assoc_mapping>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct buffer_head> {
    enum { TYPE_SIZE = sizeof(struct buffer_head) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct buffer_head *struct_addr_(((struct buffer_head *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct buffer_head, FIELD_b_state>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct buffer_head, FIELD_b_this_page>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct buffer_head, FIELD_b_page>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct buffer_head, FIELD_b_blocknr>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct buffer_head, FIELD_b_size>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct buffer_head, FIELD_b_data>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct buffer_head, FIELD_b_bdev>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct buffer_head, FIELD_b_end_io>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct buffer_head, FIELD_b_private>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct buffer_head, FIELD_b_assoc_buffers>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct buffer_head, FIELD_b_assoc_map>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
            watch_read<struct buffer_head, FIELD_b_count>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct buffer_head *struct_addr_(((struct buffer_head *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct buffer_head, FIELD_b_state>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct buffer_head, FIELD_b_this_page>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct buffer_head, FIELD_b_page>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct buffer_head, FIELD_b_blocknr>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct buffer_head, FIELD_b_size>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct buffer_head, FIELD_b_data>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct buffer_head, FIELD_b_bdev>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct buffer_head, FIELD_b_end_io>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct buffer_head, FIELD_b_private>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct buffer_head, FIELD_b_assoc_buffers>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct buffer_head, FIELD_b_assoc_map>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
            watch_write<struct buffer_head, FIELD_b_count>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct resource> {
    enum { TYPE_SIZE = sizeof(struct resource) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct resource *struct_addr_(((struct resource *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct resource, FIELD_start>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct resource, FIELD_end>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct resource, FIELD_name>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct resource, FIELD_flags>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct resource, FIELD_parent>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct resource, FIELD_sibling>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct resource, FIELD_child>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct resource *struct_addr_(((struct resource *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct resource, FIELD_start>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct resource, FIELD_end>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct resource, FIELD_name>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct resource, FIELD_flags>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct resource, FIELD_parent>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct resource, FIELD_sibling>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct resource, FIELD_child>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct posix_acl> {
    enum { TYPE_SIZE = sizeof(struct posix_acl) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct posix_acl *struct_addr_(((struct posix_acl *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct posix_acl, FIELD_a_refcount>::on(entry_, struct_addr_);
            break;
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct posix_acl, FIELD_a_count>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct posix_acl *struct_addr_(((struct posix_acl *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct posix_acl, FIELD_a_refcount>::on(entry_, struct_addr_, val_);
            break;
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct posix_acl, FIELD_a_count>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct pci_driver> {
    enum { TYPE_SIZE = sizeof(struct pci_driver) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct pci_driver *struct_addr_(((struct pci_driver *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct pci_driver, FIELD_node>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct pci_driver, FIELD_name>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct pci_driver, FIELD_id_table>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct pci_driver, FIELD_probe>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct pci_driver, FIELD_remove>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct pci_driver, FIELD_suspend>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct pci_driver, FIELD_suspend_late>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct pci_driver, FIELD_resume_early>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct pci_driver, FIELD_resume>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct pci_driver, FIELD_shutdown>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct pci_driver, FIELD_err_handler>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
            watch_read<struct pci_driver, FIELD_driver>::on(entry_, struct_addr_);
            break;
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
            watch_read<struct pci_driver, FIELD_dynids>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct pci_driver *struct_addr_(((struct pci_driver *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct pci_driver, FIELD_node>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct pci_driver, FIELD_name>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct pci_driver, FIELD_id_table>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct pci_driver, FIELD_probe>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct pci_driver, FIELD_remove>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct pci_driver, FIELD_suspend>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct pci_driver, FIELD_suspend_late>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct pci_driver, FIELD_resume_early>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct pci_driver, FIELD_resume>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct pci_driver, FIELD_shutdown>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct pci_driver, FIELD_err_handler>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
            watch_write<struct pci_driver, FIELD_driver>::on(entry_, struct_addr_, val_);
            break;
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
            watch_write<struct pci_driver, FIELD_dynids>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct list_head> {
    enum { TYPE_SIZE = sizeof(struct list_head) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct list_head *struct_addr_(((struct list_head *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<struct list_head, FIELD_next>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct list_head, FIELD_prev>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct list_head *struct_addr_(((struct list_head *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<struct list_head, FIELD_next>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct list_head, FIELD_prev>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct phy_driver> {
    enum { TYPE_SIZE = sizeof(struct phy_driver) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct phy_driver *struct_addr_(((struct phy_driver *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct phy_driver, FIELD_phy_id>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct phy_driver, FIELD_name>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
            watch_read<struct phy_driver, FIELD_phy_id_mask>::on(entry_, struct_addr_);
            break;
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_read<struct phy_driver, FIELD_features>::on(entry_, struct_addr_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
            watch_read<struct phy_driver, FIELD_flags>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct phy_driver, FIELD_config_init>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct phy_driver, FIELD_probe>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct phy_driver, FIELD_suspend>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct phy_driver, FIELD_resume>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_read<struct phy_driver, FIELD_config_aneg>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct phy_driver, FIELD_read_status>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_read<struct phy_driver, FIELD_ack_interrupt>::on(entry_, struct_addr_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct phy_driver, FIELD_config_intr>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_read<struct phy_driver, FIELD_did_interrupt>::on(entry_, struct_addr_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_read<struct phy_driver, FIELD_remove>::on(entry_, struct_addr_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
            watch_read<struct phy_driver, FIELD_driver>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct phy_driver *struct_addr_(((struct phy_driver *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct phy_driver, FIELD_phy_id>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct phy_driver, FIELD_name>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
            watch_write<struct phy_driver, FIELD_phy_id_mask>::on(entry_, struct_addr_, val_);
            break;
        case 20: 
        case 21: 
        case 22: 
        case 23: 
            watch_write<struct phy_driver, FIELD_features>::on(entry_, struct_addr_, val_);
            break;
        case 24: 
        case 25: 
        case 26: 
        case 27: 
            watch_write<struct phy_driver, FIELD_flags>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct phy_driver, FIELD_config_init>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct phy_driver, FIELD_probe>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct phy_driver, FIELD_suspend>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct phy_driver, FIELD_resume>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
            watch_write<struct phy_driver, FIELD_config_aneg>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct phy_driver, FIELD_read_status>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
            watch_write<struct phy_driver, FIELD_ack_interrupt>::on(entry_, struct_addr_, val_);
            break;
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct phy_driver, FIELD_config_intr>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
            watch_write<struct phy_driver, FIELD_did_interrupt>::on(entry_, struct_addr_, val_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_write<struct phy_driver, FIELD_remove>::on(entry_, struct_addr_, val_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
            watch_write<struct phy_driver, FIELD_driver>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct latency_record> {
    enum { TYPE_SIZE = sizeof(struct latency_record) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct latency_record *struct_addr_(((struct latency_record *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct latency_record, FIELD_backtrace>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
            watch_read<struct latency_record, FIELD_count>::on(entry_, struct_addr_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_read<struct latency_record, FIELD_time>::on(entry_, struct_addr_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_read<struct latency_record, FIELD_max>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct latency_record *struct_addr_(((struct latency_record *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct latency_record, FIELD_backtrace>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
            watch_write<struct latency_record, FIELD_count>::on(entry_, struct_addr_, val_);
            break;
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_write<struct latency_record, FIELD_time>::on(entry_, struct_addr_, val_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_write<struct latency_record, FIELD_max>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct completion> {
    enum { TYPE_SIZE = sizeof(struct completion) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct completion *struct_addr_(((struct completion *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_read<struct completion, FIELD_done>::on(entry_, struct_addr_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct completion, FIELD_wait>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct completion *struct_addr_(((struct completion *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
            watch_write<struct completion, FIELD_done>::on(entry_, struct_addr_, val_);
            break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct completion, FIELD_wait>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, union sigval> {
    enum { TYPE_SIZE = sizeof(union sigval) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        union sigval *struct_addr_(((union sigval *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_read<union sigval, FIELD_sival_ptr>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        union sigval *struct_addr_(((union sigval *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 4: 
        case 5: 
        case 6: 
        case 7: 
            watch_write<union sigval, FIELD_sival_ptr>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct xenbus_device_id> {
    enum { TYPE_SIZE = sizeof(struct xenbus_device_id) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct xenbus_device_id *struct_addr_(((struct xenbus_device_id *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct xenbus_device_id, FIELD_devicetype>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct xenbus_device_id *struct_addr_(((struct xenbus_device_id *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct xenbus_device_id, FIELD_devicetype>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
template <bool I>
struct alias_dispatch<I, struct net_device> {
    enum { TYPE_SIZE = sizeof(struct net_device) };
    static void read8(alias_entry *entry_, const uint64_t field_ptr_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct net_device *struct_addr_(((struct net_device *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_read<struct net_device, FIELD_name>::on(entry_, struct_addr_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_read<struct net_device, FIELD_name_hlist>::on(entry_, struct_addr_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_read<struct net_device, FIELD_ifalias>::on(entry_, struct_addr_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_read<struct net_device, FIELD_mem_end>::on(entry_, struct_addr_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_read<struct net_device, FIELD_mem_start>::on(entry_, struct_addr_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_read<struct net_device, FIELD_base_addr>::on(entry_, struct_addr_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
            watch_read<struct net_device, FIELD_irq>::on(entry_, struct_addr_);
            break;
        case 68: 
            watch_read<struct net_device, FIELD_if_port>::on(entry_, struct_addr_);
            break;
        case 69: 
            watch_read<struct net_device, FIELD_dma>::on(entry_, struct_addr_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_read<struct net_device, FIELD_state>::on(entry_, struct_addr_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_read<struct net_device, FIELD_dev_list>::on(entry_, struct_addr_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_read<struct net_device, FIELD_napi_list>::on(entry_, struct_addr_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_read<struct net_device, FIELD_features>::on(entry_, struct_addr_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
            watch_read<struct net_device, FIELD_ifindex>::on(entry_, struct_addr_);
            break;
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_read<struct net_device, FIELD_iflink>::on(entry_, struct_addr_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
            watch_read<struct net_device, FIELD_stats>::on(entry_, struct_addr_);
            break;
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
            watch_read<struct net_device, FIELD_wireless_handlers>::on(entry_, struct_addr_);
            break;
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
            watch_read<struct net_device, FIELD_wireless_data>::on(entry_, struct_addr_);
            break;
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
            watch_read<struct net_device, FIELD_netdev_ops>::on(entry_, struct_addr_);
            break;
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
            watch_read<struct net_device, FIELD_ethtool_ops>::on(entry_, struct_addr_);
            break;
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
            watch_read<struct net_device, FIELD_header_ops>::on(entry_, struct_addr_);
            break;
        case 352: 
        case 353: 
        case 354: 
        case 355: 
            watch_read<struct net_device, FIELD_flags>::on(entry_, struct_addr_);
            break;
        case 356: 
        case 357: 
            watch_read<struct net_device, FIELD_gflags>::on(entry_, struct_addr_);
            break;
        case 358: 
        case 359: 
            watch_read<struct net_device, FIELD_priv_flags>::on(entry_, struct_addr_);
            break;
        case 360: 
        case 361: 
            watch_read<struct net_device, FIELD_padded>::on(entry_, struct_addr_);
            break;
        case 362: 
            watch_read<struct net_device, FIELD_operstate>::on(entry_, struct_addr_);
            break;
        case 363: 
            watch_read<struct net_device, FIELD_link_mode>::on(entry_, struct_addr_);
            break;
        case 364: 
        case 365: 
        case 366: 
        case 367: 
            watch_read<struct net_device, FIELD_mtu>::on(entry_, struct_addr_);
            break;
        case 368: 
        case 369: 
            watch_read<struct net_device, FIELD_type>::on(entry_, struct_addr_);
            break;
        case 370: 
        case 371: 
            watch_read<struct net_device, FIELD_hard_header_len>::on(entry_, struct_addr_);
            break;
        case 372: 
        case 373: 
            watch_read<struct net_device, FIELD_needed_headroom>::on(entry_, struct_addr_);
            break;
        case 374: 
        case 375: 
            watch_read<struct net_device, FIELD_needed_tailroom>::on(entry_, struct_addr_);
            break;
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
            watch_read<struct net_device, FIELD_master>::on(entry_, struct_addr_);
            break;
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
            watch_read<struct net_device, FIELD_perm_addr>::on(entry_, struct_addr_);
            break;
        case 416: 
            watch_read<struct net_device, FIELD_addr_len>::on(entry_, struct_addr_);
            break;
        case 418: 
        case 419: 
            watch_read<struct net_device, FIELD_dev_id>::on(entry_, struct_addr_);
            break;
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
            watch_read<struct net_device, FIELD_uc>::on(entry_, struct_addr_);
            break;
        case 448: 
        case 449: 
        case 450: 
        case 451: 
            watch_read<struct net_device, FIELD_uc_promisc>::on(entry_, struct_addr_);
            break;
        case 452: 
        case 453: 
        case 454: 
        case 455: 
            watch_read<struct net_device, FIELD_addr_list_lock>::on(entry_, struct_addr_);
            break;
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
            watch_read<struct net_device, FIELD_mc_list>::on(entry_, struct_addr_);
            break;
        case 464: 
        case 465: 
        case 466: 
        case 467: 
            watch_read<struct net_device, FIELD_mc_count>::on(entry_, struct_addr_);
            break;
        case 468: 
        case 469: 
        case 470: 
        case 471: 
            watch_read<struct net_device, FIELD_promiscuity>::on(entry_, struct_addr_);
            break;
        case 472: 
        case 473: 
        case 474: 
        case 475: 
            watch_read<struct net_device, FIELD_allmulti>::on(entry_, struct_addr_);
            break;
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
            watch_read<struct net_device, FIELD_dsa_ptr>::on(entry_, struct_addr_);
            break;
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
            watch_read<struct net_device, FIELD_atalk_ptr>::on(entry_, struct_addr_);
            break;
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
            watch_read<struct net_device, FIELD_ip_ptr>::on(entry_, struct_addr_);
            break;
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
            watch_read<struct net_device, FIELD_dn_ptr>::on(entry_, struct_addr_);
            break;
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
            watch_read<struct net_device, FIELD_ip6_ptr>::on(entry_, struct_addr_);
            break;
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
            watch_read<struct net_device, FIELD_ec_ptr>::on(entry_, struct_addr_);
            break;
        case 528: 
        case 529: 
        case 530: 
        case 531: 
        case 532: 
        case 533: 
        case 534: 
        case 535: 
            watch_read<struct net_device, FIELD_ax25_ptr>::on(entry_, struct_addr_);
            break;
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
            watch_read<struct net_device, FIELD_ieee80211_ptr>::on(entry_, struct_addr_);
            break;
        case 544: 
        case 545: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
            watch_read<struct net_device, FIELD_last_rx>::on(entry_, struct_addr_);
            break;
        case 552: 
        case 553: 
        case 554: 
        case 555: 
        case 556: 
        case 557: 
        case 558: 
        case 559: 
            watch_read<struct net_device, FIELD_dev_addr>::on(entry_, struct_addr_);
            break;
        case 560: 
        case 561: 
        case 562: 
        case 563: 
        case 564: 
        case 565: 
        case 566: 
        case 567: 
        case 568: 
        case 569: 
        case 570: 
        case 571: 
        case 572: 
        case 573: 
        case 574: 
        case 575: 
        case 576: 
        case 577: 
        case 578: 
        case 579: 
        case 580: 
        case 581: 
        case 582: 
        case 583: 
            watch_read<struct net_device, FIELD_dev_addrs>::on(entry_, struct_addr_);
            break;
        case 584: 
        case 585: 
        case 586: 
        case 587: 
        case 588: 
        case 589: 
        case 590: 
        case 591: 
        case 592: 
        case 593: 
        case 594: 
        case 595: 
        case 596: 
        case 597: 
        case 598: 
        case 599: 
        case 600: 
        case 601: 
        case 602: 
        case 603: 
        case 604: 
        case 605: 
        case 606: 
        case 607: 
        case 608: 
        case 609: 
        case 610: 
        case 611: 
        case 612: 
        case 613: 
        case 614: 
        case 615: 
            watch_read<struct net_device, FIELD_broadcast>::on(entry_, struct_addr_);
            break;
        case 640: 
        case 641: 
        case 642: 
        case 643: 
        case 644: 
        case 645: 
        case 646: 
        case 647: 
        case 648: 
        case 649: 
        case 650: 
        case 651: 
        case 652: 
        case 653: 
        case 654: 
        case 655: 
        case 656: 
        case 657: 
        case 658: 
        case 659: 
        case 660: 
        case 661: 
        case 662: 
        case 663: 
        case 664: 
        case 665: 
        case 666: 
        case 667: 
        case 668: 
        case 669: 
        case 670: 
        case 671: 
        case 672: 
        case 673: 
        case 674: 
        case 675: 
        case 676: 
        case 677: 
        case 678: 
        case 679: 
        case 680: 
        case 681: 
        case 682: 
        case 683: 
        case 684: 
        case 685: 
        case 686: 
        case 687: 
        case 688: 
        case 689: 
        case 690: 
        case 691: 
        case 692: 
        case 693: 
        case 694: 
        case 695: 
        case 696: 
        case 697: 
        case 698: 
        case 699: 
        case 700: 
        case 701: 
        case 702: 
        case 703: 
        case 704: 
        case 705: 
        case 706: 
        case 707: 
        case 708: 
        case 709: 
        case 710: 
        case 711: 
        case 712: 
        case 713: 
        case 714: 
        case 715: 
        case 716: 
        case 717: 
        case 718: 
        case 719: 
        case 720: 
        case 721: 
        case 722: 
        case 723: 
        case 724: 
        case 725: 
        case 726: 
        case 727: 
        case 728: 
        case 729: 
        case 730: 
        case 731: 
        case 732: 
        case 733: 
        case 734: 
        case 735: 
        case 736: 
        case 737: 
        case 738: 
        case 739: 
        case 740: 
        case 741: 
        case 742: 
        case 743: 
        case 744: 
        case 745: 
        case 746: 
        case 747: 
        case 748: 
        case 749: 
        case 750: 
        case 751: 
        case 752: 
        case 753: 
        case 754: 
        case 755: 
        case 756: 
        case 757: 
        case 758: 
        case 759: 
        case 760: 
        case 761: 
        case 762: 
        case 763: 
        case 764: 
        case 765: 
        case 766: 
        case 767: 
            watch_read<struct net_device, FIELD_rx_queue>::on(entry_, struct_addr_);
            break;
        case 768: 
        case 769: 
        case 770: 
        case 771: 
        case 772: 
        case 773: 
        case 774: 
        case 775: 
            watch_read<struct net_device, FIELD__tx>::on(entry_, struct_addr_);
            break;
        case 776: 
        case 777: 
        case 778: 
        case 779: 
            watch_read<struct net_device, FIELD_num_tx_queues>::on(entry_, struct_addr_);
            break;
        case 780: 
        case 781: 
        case 782: 
        case 783: 
            watch_read<struct net_device, FIELD_real_num_tx_queues>::on(entry_, struct_addr_);
            break;
        case 784: 
        case 785: 
        case 786: 
        case 787: 
        case 788: 
        case 789: 
        case 790: 
        case 791: 
            watch_read<struct net_device, FIELD_qdisc>::on(entry_, struct_addr_);
            break;
        case 792: 
        case 793: 
        case 794: 
        case 795: 
        case 796: 
        case 797: 
        case 798: 
        case 799: 
            watch_read<struct net_device, FIELD_tx_queue_len>::on(entry_, struct_addr_);
            break;
        case 800: 
        case 801: 
        case 802: 
        case 803: 
            watch_read<struct net_device, FIELD_tx_global_lock>::on(entry_, struct_addr_);
            break;
        case 808: 
        case 809: 
        case 810: 
        case 811: 
        case 812: 
        case 813: 
        case 814: 
        case 815: 
            watch_read<struct net_device, FIELD_trans_start>::on(entry_, struct_addr_);
            break;
        case 816: 
        case 817: 
        case 818: 
        case 819: 
            watch_read<struct net_device, FIELD_watchdog_timeo>::on(entry_, struct_addr_);
            break;
        case 824: 
        case 825: 
        case 826: 
        case 827: 
        case 828: 
        case 829: 
        case 830: 
        case 831: 
        case 832: 
        case 833: 
        case 834: 
        case 835: 
        case 836: 
        case 837: 
        case 838: 
        case 839: 
        case 840: 
        case 841: 
        case 842: 
        case 843: 
        case 844: 
        case 845: 
        case 846: 
        case 847: 
        case 848: 
        case 849: 
        case 850: 
        case 851: 
        case 852: 
        case 853: 
        case 854: 
        case 855: 
        case 856: 
        case 857: 
        case 858: 
        case 859: 
        case 860: 
        case 861: 
        case 862: 
        case 863: 
        case 864: 
        case 865: 
        case 866: 
        case 867: 
        case 868: 
        case 869: 
        case 870: 
        case 871: 
        case 872: 
        case 873: 
        case 874: 
        case 875: 
        case 876: 
        case 877: 
        case 878: 
        case 879: 
        case 880: 
        case 881: 
        case 882: 
        case 883: 
        case 884: 
        case 885: 
        case 886: 
        case 887: 
        case 888: 
        case 889: 
        case 890: 
        case 891: 
        case 892: 
        case 893: 
        case 894: 
        case 895: 
        case 896: 
        case 897: 
        case 898: 
        case 899: 
        case 900: 
        case 901: 
        case 902: 
        case 903: 
            watch_read<struct net_device, FIELD_watchdog_timer>::on(entry_, struct_addr_);
            break;
        case 960: 
        case 961: 
        case 962: 
        case 963: 
            watch_read<struct net_device, FIELD_refcnt>::on(entry_, struct_addr_);
            break;
        case 968: 
        case 969: 
        case 970: 
        case 971: 
        case 972: 
        case 973: 
        case 974: 
        case 975: 
        case 976: 
        case 977: 
        case 978: 
        case 979: 
        case 980: 
        case 981: 
        case 982: 
        case 983: 
            watch_read<struct net_device, FIELD_todo_list>::on(entry_, struct_addr_);
            break;
        case 984: 
        case 985: 
        case 986: 
        case 987: 
        case 988: 
        case 989: 
        case 990: 
        case 991: 
        case 992: 
        case 993: 
        case 994: 
        case 995: 
        case 996: 
        case 997: 
        case 998: 
        case 999: 
            watch_read<struct net_device, FIELD_index_hlist>::on(entry_, struct_addr_);
            break;
        case 1000: 
        case 1001: 
        case 1002: 
        case 1003: 
        case 1004: 
        case 1005: 
        case 1006: 
        case 1007: 
            watch_read<struct net_device, FIELD_link_watch_next>::on(entry_, struct_addr_);
            break;
        case 1008: 
        case 1009: 
        case 1010: 
        case 1011: 
            watch_read<struct net_device, FIELD_reg_state>::on(entry_, struct_addr_);
            break;
        case 1016: 
        case 1017: 
        case 1018: 
        case 1019: 
        case 1020: 
        case 1021: 
        case 1022: 
        case 1023: 
            watch_read<struct net_device, FIELD_destructor>::on(entry_, struct_addr_);
            break;
        case 1024: 
        case 1025: 
        case 1026: 
        case 1027: 
        case 1028: 
        case 1029: 
        case 1030: 
        case 1031: 
            watch_read<struct net_device, FIELD_npinfo>::on(entry_, struct_addr_);
            break;
        case 1032: 
        case 1033: 
        case 1034: 
        case 1035: 
        case 1036: 
        case 1037: 
        case 1038: 
        case 1039: 
            watch_read<struct net_device, FIELD_ml_priv>::on(entry_, struct_addr_);
            break;
        case 1040: 
        case 1041: 
        case 1042: 
        case 1043: 
        case 1044: 
        case 1045: 
        case 1046: 
        case 1047: 
            watch_read<struct net_device, FIELD_br_port>::on(entry_, struct_addr_);
            break;
        case 1048: 
        case 1049: 
        case 1050: 
        case 1051: 
        case 1052: 
        case 1053: 
        case 1054: 
        case 1055: 
            watch_read<struct net_device, FIELD_macvlan_port>::on(entry_, struct_addr_);
            break;
        case 1056: 
        case 1057: 
        case 1058: 
        case 1059: 
        case 1060: 
        case 1061: 
        case 1062: 
        case 1063: 
            watch_read<struct net_device, FIELD_garp_port>::on(entry_, struct_addr_);
            break;
        case 1064: 
        case 1065: 
        case 1066: 
        case 1067: 
        case 1068: 
        case 1069: 
        case 1070: 
        case 1071: 
        case 1072: 
        case 1073: 
        case 1074: 
        case 1075: 
        case 1076: 
        case 1077: 
        case 1078: 
        case 1079: 
        case 1080: 
        case 1081: 
        case 1082: 
        case 1083: 
        case 1084: 
        case 1085: 
        case 1086: 
        case 1087: 
        case 1088: 
        case 1089: 
        case 1090: 
        case 1091: 
        case 1092: 
        case 1093: 
        case 1094: 
        case 1095: 
        case 1096: 
        case 1097: 
        case 1098: 
        case 1099: 
        case 1100: 
        case 1101: 
        case 1102: 
        case 1103: 
        case 1104: 
        case 1105: 
        case 1106: 
        case 1107: 
        case 1108: 
        case 1109: 
        case 1110: 
        case 1111: 
        case 1112: 
        case 1113: 
        case 1114: 
        case 1115: 
        case 1116: 
        case 1117: 
        case 1118: 
        case 1119: 
        case 1120: 
        case 1121: 
        case 1122: 
        case 1123: 
        case 1124: 
        case 1125: 
        case 1126: 
        case 1127: 
        case 1128: 
        case 1129: 
        case 1130: 
        case 1131: 
        case 1132: 
        case 1133: 
        case 1134: 
        case 1135: 
        case 1136: 
        case 1137: 
        case 1138: 
        case 1139: 
        case 1140: 
        case 1141: 
        case 1142: 
        case 1143: 
        case 1144: 
        case 1145: 
        case 1146: 
        case 1147: 
        case 1148: 
        case 1149: 
        case 1150: 
        case 1151: 
        case 1152: 
        case 1153: 
        case 1154: 
        case 1155: 
        case 1156: 
        case 1157: 
        case 1158: 
        case 1159: 
        case 1160: 
        case 1161: 
        case 1162: 
        case 1163: 
        case 1164: 
        case 1165: 
        case 1166: 
        case 1167: 
        case 1168: 
        case 1169: 
        case 1170: 
        case 1171: 
        case 1172: 
        case 1173: 
        case 1174: 
        case 1175: 
        case 1176: 
        case 1177: 
        case 1178: 
        case 1179: 
        case 1180: 
        case 1181: 
        case 1182: 
        case 1183: 
        case 1184: 
        case 1185: 
        case 1186: 
        case 1187: 
        case 1188: 
        case 1189: 
        case 1190: 
        case 1191: 
        case 1192: 
        case 1193: 
        case 1194: 
        case 1195: 
        case 1196: 
        case 1197: 
        case 1198: 
        case 1199: 
        case 1200: 
        case 1201: 
        case 1202: 
        case 1203: 
        case 1204: 
        case 1205: 
        case 1206: 
        case 1207: 
        case 1208: 
        case 1209: 
        case 1210: 
        case 1211: 
        case 1212: 
        case 1213: 
        case 1214: 
        case 1215: 
        case 1216: 
        case 1217: 
        case 1218: 
        case 1219: 
        case 1220: 
        case 1221: 
        case 1222: 
        case 1223: 
        case 1224: 
        case 1225: 
        case 1226: 
        case 1227: 
        case 1228: 
        case 1229: 
        case 1230: 
        case 1231: 
        case 1232: 
        case 1233: 
        case 1234: 
        case 1235: 
        case 1236: 
        case 1237: 
        case 1238: 
        case 1239: 
        case 1240: 
        case 1241: 
        case 1242: 
        case 1243: 
        case 1244: 
        case 1245: 
        case 1246: 
        case 1247: 
        case 1248: 
        case 1249: 
        case 1250: 
        case 1251: 
        case 1252: 
        case 1253: 
        case 1254: 
        case 1255: 
        case 1256: 
        case 1257: 
        case 1258: 
        case 1259: 
        case 1260: 
        case 1261: 
        case 1262: 
        case 1263: 
        case 1264: 
        case 1265: 
        case 1266: 
        case 1267: 
        case 1268: 
        case 1269: 
        case 1270: 
        case 1271: 
        case 1272: 
        case 1273: 
        case 1274: 
        case 1275: 
        case 1276: 
        case 1277: 
        case 1278: 
        case 1279: 
        case 1280: 
        case 1281: 
        case 1282: 
        case 1283: 
        case 1284: 
        case 1285: 
        case 1286: 
        case 1287: 
        case 1288: 
        case 1289: 
        case 1290: 
        case 1291: 
        case 1292: 
        case 1293: 
        case 1294: 
        case 1295: 
        case 1296: 
        case 1297: 
        case 1298: 
        case 1299: 
        case 1300: 
        case 1301: 
        case 1302: 
        case 1303: 
        case 1304: 
        case 1305: 
        case 1306: 
        case 1307: 
        case 1308: 
        case 1309: 
        case 1310: 
        case 1311: 
        case 1312: 
        case 1313: 
        case 1314: 
        case 1315: 
        case 1316: 
        case 1317: 
        case 1318: 
        case 1319: 
        case 1320: 
        case 1321: 
        case 1322: 
        case 1323: 
        case 1324: 
        case 1325: 
        case 1326: 
        case 1327: 
        case 1328: 
        case 1329: 
        case 1330: 
        case 1331: 
        case 1332: 
        case 1333: 
        case 1334: 
        case 1335: 
        case 1336: 
        case 1337: 
        case 1338: 
        case 1339: 
        case 1340: 
        case 1341: 
        case 1342: 
        case 1343: 
        case 1344: 
        case 1345: 
        case 1346: 
        case 1347: 
        case 1348: 
        case 1349: 
        case 1350: 
        case 1351: 
        case 1352: 
        case 1353: 
        case 1354: 
        case 1355: 
        case 1356: 
        case 1357: 
        case 1358: 
        case 1359: 
        case 1360: 
        case 1361: 
        case 1362: 
        case 1363: 
        case 1364: 
        case 1365: 
        case 1366: 
        case 1367: 
        case 1368: 
        case 1369: 
        case 1370: 
        case 1371: 
        case 1372: 
        case 1373: 
        case 1374: 
        case 1375: 
        case 1376: 
        case 1377: 
        case 1378: 
        case 1379: 
        case 1380: 
        case 1381: 
        case 1382: 
        case 1383: 
        case 1384: 
        case 1385: 
        case 1386: 
        case 1387: 
        case 1388: 
        case 1389: 
        case 1390: 
        case 1391: 
        case 1392: 
        case 1393: 
        case 1394: 
        case 1395: 
        case 1396: 
        case 1397: 
        case 1398: 
        case 1399: 
        case 1400: 
        case 1401: 
        case 1402: 
        case 1403: 
        case 1404: 
        case 1405: 
        case 1406: 
        case 1407: 
        case 1408: 
        case 1409: 
        case 1410: 
        case 1411: 
        case 1412: 
        case 1413: 
        case 1414: 
        case 1415: 
        case 1416: 
        case 1417: 
        case 1418: 
        case 1419: 
        case 1420: 
        case 1421: 
        case 1422: 
        case 1423: 
        case 1424: 
        case 1425: 
        case 1426: 
        case 1427: 
        case 1428: 
        case 1429: 
        case 1430: 
        case 1431: 
        case 1432: 
        case 1433: 
        case 1434: 
        case 1435: 
        case 1436: 
        case 1437: 
        case 1438: 
        case 1439: 
        case 1440: 
        case 1441: 
        case 1442: 
        case 1443: 
        case 1444: 
        case 1445: 
        case 1446: 
        case 1447: 
        case 1448: 
        case 1449: 
        case 1450: 
        case 1451: 
        case 1452: 
        case 1453: 
        case 1454: 
        case 1455: 
        case 1456: 
        case 1457: 
        case 1458: 
        case 1459: 
        case 1460: 
        case 1461: 
        case 1462: 
        case 1463: 
        case 1464: 
        case 1465: 
        case 1466: 
        case 1467: 
        case 1468: 
        case 1469: 
        case 1470: 
        case 1471: 
        case 1472: 
        case 1473: 
        case 1474: 
        case 1475: 
        case 1476: 
        case 1477: 
        case 1478: 
        case 1479: 
        case 1480: 
        case 1481: 
        case 1482: 
        case 1483: 
        case 1484: 
        case 1485: 
        case 1486: 
        case 1487: 
        case 1488: 
        case 1489: 
        case 1490: 
        case 1491: 
        case 1492: 
        case 1493: 
        case 1494: 
        case 1495: 
        case 1496: 
        case 1497: 
        case 1498: 
        case 1499: 
        case 1500: 
        case 1501: 
        case 1502: 
        case 1503: 
        case 1504: 
        case 1505: 
        case 1506: 
        case 1507: 
        case 1508: 
        case 1509: 
        case 1510: 
        case 1511: 
        case 1512: 
        case 1513: 
        case 1514: 
        case 1515: 
        case 1516: 
        case 1517: 
        case 1518: 
        case 1519: 
        case 1520: 
        case 1521: 
        case 1522: 
        case 1523: 
        case 1524: 
        case 1525: 
        case 1526: 
        case 1527: 
        case 1528: 
        case 1529: 
        case 1530: 
        case 1531: 
        case 1532: 
        case 1533: 
        case 1534: 
        case 1535: 
        case 1536: 
        case 1537: 
        case 1538: 
        case 1539: 
        case 1540: 
        case 1541: 
        case 1542: 
        case 1543: 
        case 1544: 
        case 1545: 
        case 1546: 
        case 1547: 
        case 1548: 
        case 1549: 
        case 1550: 
        case 1551: 
        case 1552: 
        case 1553: 
        case 1554: 
        case 1555: 
        case 1556: 
        case 1557: 
        case 1558: 
        case 1559: 
        case 1560: 
        case 1561: 
        case 1562: 
        case 1563: 
        case 1564: 
        case 1565: 
        case 1566: 
        case 1567: 
        case 1568: 
        case 1569: 
        case 1570: 
        case 1571: 
        case 1572: 
        case 1573: 
        case 1574: 
        case 1575: 
            watch_read<struct net_device, FIELD_dev>::on(entry_, struct_addr_);
            break;
        case 1576: 
        case 1577: 
        case 1578: 
        case 1579: 
        case 1580: 
        case 1581: 
        case 1582: 
        case 1583: 
        case 1584: 
        case 1585: 
        case 1586: 
        case 1587: 
        case 1588: 
        case 1589: 
        case 1590: 
        case 1591: 
        case 1592: 
        case 1593: 
        case 1594: 
        case 1595: 
        case 1596: 
        case 1597: 
        case 1598: 
        case 1599: 
            watch_read<struct net_device, FIELD_sysfs_groups>::on(entry_, struct_addr_);
            break;
        case 1600: 
        case 1601: 
        case 1602: 
        case 1603: 
        case 1604: 
        case 1605: 
        case 1606: 
        case 1607: 
            watch_read<struct net_device, FIELD_rtnl_link_ops>::on(entry_, struct_addr_);
            break;
        case 1608: 
        case 1609: 
        case 1610: 
        case 1611: 
        case 1612: 
        case 1613: 
        case 1614: 
        case 1615: 
            watch_read<struct net_device, FIELD_vlan_features>::on(entry_, struct_addr_);
            break;
        case 1616: 
        case 1617: 
        case 1618: 
        case 1619: 
            watch_read<struct net_device, FIELD_gso_max_size>::on(entry_, struct_addr_);
            break;
        case 1624: 
        case 1625: 
        case 1626: 
        case 1627: 
        case 1628: 
        case 1629: 
        case 1630: 
        case 1631: 
            watch_read<struct net_device, FIELD_dcbnl_ops>::on(entry_, struct_addr_);
            break;
        case 1632: 
        case 1633: 
        case 1634: 
        case 1635: 
            watch_read<struct net_device, FIELD_fcoe_ddp_xid>::on(entry_, struct_addr_);
            break;
        default: break;
        }
    }
    static void write8(alias_entry *entry_, const uint64_t field_ptr_, uint8_t val_) {
        const uint64_t base_addr_(entry_->base_address);
        const unsigned field_offset_((field_ptr_ - base_addr_) % TYPE_SIZE);
        struct net_device *struct_addr_(((struct net_device *) (field_ptr_ - field_offset_)));
        switch(field_offset_) {
        case 0: 
        case 1: 
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
            watch_write<struct net_device, FIELD_name>::on(entry_, struct_addr_, val_);
            break;
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
            watch_write<struct net_device, FIELD_name_hlist>::on(entry_, struct_addr_, val_);
            break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
            watch_write<struct net_device, FIELD_ifalias>::on(entry_, struct_addr_, val_);
            break;
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
            watch_write<struct net_device, FIELD_mem_end>::on(entry_, struct_addr_, val_);
            break;
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
            watch_write<struct net_device, FIELD_mem_start>::on(entry_, struct_addr_, val_);
            break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
            watch_write<struct net_device, FIELD_base_addr>::on(entry_, struct_addr_, val_);
            break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
            watch_write<struct net_device, FIELD_irq>::on(entry_, struct_addr_, val_);
            break;
        case 68: 
            watch_write<struct net_device, FIELD_if_port>::on(entry_, struct_addr_, val_);
            break;
        case 69: 
            watch_write<struct net_device, FIELD_dma>::on(entry_, struct_addr_, val_);
            break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
            watch_write<struct net_device, FIELD_state>::on(entry_, struct_addr_, val_);
            break;
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
            watch_write<struct net_device, FIELD_dev_list>::on(entry_, struct_addr_, val_);
            break;
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
            watch_write<struct net_device, FIELD_napi_list>::on(entry_, struct_addr_, val_);
            break;
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
            watch_write<struct net_device, FIELD_features>::on(entry_, struct_addr_, val_);
            break;
        case 120: 
        case 121: 
        case 122: 
        case 123: 
            watch_write<struct net_device, FIELD_ifindex>::on(entry_, struct_addr_, val_);
            break;
        case 124: 
        case 125: 
        case 126: 
        case 127: 
            watch_write<struct net_device, FIELD_iflink>::on(entry_, struct_addr_, val_);
            break;
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
            watch_write<struct net_device, FIELD_stats>::on(entry_, struct_addr_, val_);
            break;
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
            watch_write<struct net_device, FIELD_wireless_handlers>::on(entry_, struct_addr_, val_);
            break;
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
            watch_write<struct net_device, FIELD_wireless_data>::on(entry_, struct_addr_, val_);
            break;
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
            watch_write<struct net_device, FIELD_netdev_ops>::on(entry_, struct_addr_, val_);
            break;
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
            watch_write<struct net_device, FIELD_ethtool_ops>::on(entry_, struct_addr_, val_);
            break;
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
            watch_write<struct net_device, FIELD_header_ops>::on(entry_, struct_addr_, val_);
            break;
        case 352: 
        case 353: 
        case 354: 
        case 355: 
            watch_write<struct net_device, FIELD_flags>::on(entry_, struct_addr_, val_);
            break;
        case 356: 
        case 357: 
            watch_write<struct net_device, FIELD_gflags>::on(entry_, struct_addr_, val_);
            break;
        case 358: 
        case 359: 
            watch_write<struct net_device, FIELD_priv_flags>::on(entry_, struct_addr_, val_);
            break;
        case 360: 
        case 361: 
            watch_write<struct net_device, FIELD_padded>::on(entry_, struct_addr_, val_);
            break;
        case 362: 
            watch_write<struct net_device, FIELD_operstate>::on(entry_, struct_addr_, val_);
            break;
        case 363: 
            watch_write<struct net_device, FIELD_link_mode>::on(entry_, struct_addr_, val_);
            break;
        case 364: 
        case 365: 
        case 366: 
        case 367: 
            watch_write<struct net_device, FIELD_mtu>::on(entry_, struct_addr_, val_);
            break;
        case 368: 
        case 369: 
            watch_write<struct net_device, FIELD_type>::on(entry_, struct_addr_, val_);
            break;
        case 370: 
        case 371: 
            watch_write<struct net_device, FIELD_hard_header_len>::on(entry_, struct_addr_, val_);
            break;
        case 372: 
        case 373: 
            watch_write<struct net_device, FIELD_needed_headroom>::on(entry_, struct_addr_, val_);
            break;
        case 374: 
        case 375: 
            watch_write<struct net_device, FIELD_needed_tailroom>::on(entry_, struct_addr_, val_);
            break;
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
            watch_write<struct net_device, FIELD_master>::on(entry_, struct_addr_, val_);
            break;
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
            watch_write<struct net_device, FIELD_perm_addr>::on(entry_, struct_addr_, val_);
            break;
        case 416: 
            watch_write<struct net_device, FIELD_addr_len>::on(entry_, struct_addr_, val_);
            break;
        case 418: 
        case 419: 
            watch_write<struct net_device, FIELD_dev_id>::on(entry_, struct_addr_, val_);
            break;
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
            watch_write<struct net_device, FIELD_uc>::on(entry_, struct_addr_, val_);
            break;
        case 448: 
        case 449: 
        case 450: 
        case 451: 
            watch_write<struct net_device, FIELD_uc_promisc>::on(entry_, struct_addr_, val_);
            break;
        case 452: 
        case 453: 
        case 454: 
        case 455: 
            watch_write<struct net_device, FIELD_addr_list_lock>::on(entry_, struct_addr_, val_);
            break;
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
            watch_write<struct net_device, FIELD_mc_list>::on(entry_, struct_addr_, val_);
            break;
        case 464: 
        case 465: 
        case 466: 
        case 467: 
            watch_write<struct net_device, FIELD_mc_count>::on(entry_, struct_addr_, val_);
            break;
        case 468: 
        case 469: 
        case 470: 
        case 471: 
            watch_write<struct net_device, FIELD_promiscuity>::on(entry_, struct_addr_, val_);
            break;
        case 472: 
        case 473: 
        case 474: 
        case 475: 
            watch_write<struct net_device, FIELD_allmulti>::on(entry_, struct_addr_, val_);
            break;
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
            watch_write<struct net_device, FIELD_dsa_ptr>::on(entry_, struct_addr_, val_);
            break;
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
            watch_write<struct net_device, FIELD_atalk_ptr>::on(entry_, struct_addr_, val_);
            break;
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
            watch_write<struct net_device, FIELD_ip_ptr>::on(entry_, struct_addr_, val_);
            break;
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
            watch_write<struct net_device, FIELD_dn_ptr>::on(entry_, struct_addr_, val_);
            break;
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
            watch_write<struct net_device, FIELD_ip6_ptr>::on(entry_, struct_addr_, val_);
            break;
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
            watch_write<struct net_device, FIELD_ec_ptr>::on(entry_, struct_addr_, val_);
            break;
        case 528: 
        case 529: 
        case 530: 
        case 531: 
        case 532: 
        case 533: 
        case 534: 
        case 535: 
            watch_write<struct net_device, FIELD_ax25_ptr>::on(entry_, struct_addr_, val_);
            break;
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
            watch_write<struct net_device, FIELD_ieee80211_ptr>::on(entry_, struct_addr_, val_);
            break;
        case 544: 
        case 545: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
            watch_write<struct net_device, FIELD_last_rx>::on(entry_, struct_addr_, val_);
            break;
        case 552: 
        case 553: 
        case 554: 
        case 555: 
        case 556: 
        case 557: 
        case 558: 
        case 559: 
            watch_write<struct net_device, FIELD_dev_addr>::on(entry_, struct_addr_, val_);
            break;
        case 560: 
        case 561: 
        case 562: 
        case 563: 
        case 564: 
        case 565: 
        case 566: 
        case 567: 
        case 568: 
        case 569: 
        case 570: 
        case 571: 
        case 572: 
        case 573: 
        case 574: 
        case 575: 
        case 576: 
        case 577: 
        case 578: 
        case 579: 
        case 580: 
        case 581: 
        case 582: 
        case 583: 
            watch_write<struct net_device, FIELD_dev_addrs>::on(entry_, struct_addr_, val_);
            break;
        case 584: 
        case 585: 
        case 586: 
        case 587: 
        case 588: 
        case 589: 
        case 590: 
        case 591: 
        case 592: 
        case 593: 
        case 594: 
        case 595: 
        case 596: 
        case 597: 
        case 598: 
        case 599: 
        case 600: 
        case 601: 
        case 602: 
        case 603: 
        case 604: 
        case 605: 
        case 606: 
        case 607: 
        case 608: 
        case 609: 
        case 610: 
        case 611: 
        case 612: 
        case 613: 
        case 614: 
        case 615: 
            watch_write<struct net_device, FIELD_broadcast>::on(entry_, struct_addr_, val_);
            break;
        case 640: 
        case 641: 
        case 642: 
        case 643: 
        case 644: 
        case 645: 
        case 646: 
        case 647: 
        case 648: 
        case 649: 
        case 650: 
        case 651: 
        case 652: 
        case 653: 
        case 654: 
        case 655: 
        case 656: 
        case 657: 
        case 658: 
        case 659: 
        case 660: 
        case 661: 
        case 662: 
        case 663: 
        case 664: 
        case 665: 
        case 666: 
        case 667: 
        case 668: 
        case 669: 
        case 670: 
        case 671: 
        case 672: 
        case 673: 
        case 674: 
        case 675: 
        case 676: 
        case 677: 
        case 678: 
        case 679: 
        case 680: 
        case 681: 
        case 682: 
        case 683: 
        case 684: 
        case 685: 
        case 686: 
        case 687: 
        case 688: 
        case 689: 
        case 690: 
        case 691: 
        case 692: 
        case 693: 
        case 694: 
        case 695: 
        case 696: 
        case 697: 
        case 698: 
        case 699: 
        case 700: 
        case 701: 
        case 702: 
        case 703: 
        case 704: 
        case 705: 
        case 706: 
        case 707: 
        case 708: 
        case 709: 
        case 710: 
        case 711: 
        case 712: 
        case 713: 
        case 714: 
        case 715: 
        case 716: 
        case 717: 
        case 718: 
        case 719: 
        case 720: 
        case 721: 
        case 722: 
        case 723: 
        case 724: 
        case 725: 
        case 726: 
        case 727: 
        case 728: 
        case 729: 
        case 730: 
        case 731: 
        case 732: 
        case 733: 
        case 734: 
        case 735: 
        case 736: 
        case 737: 
        case 738: 
        case 739: 
        case 740: 
        case 741: 
        case 742: 
        case 743: 
        case 744: 
        case 745: 
        case 746: 
        case 747: 
        case 748: 
        case 749: 
        case 750: 
        case 751: 
        case 752: 
        case 753: 
        case 754: 
        case 755: 
        case 756: 
        case 757: 
        case 758: 
        case 759: 
        case 760: 
        case 761: 
        case 762: 
        case 763: 
        case 764: 
        case 765: 
        case 766: 
        case 767: 
            watch_write<struct net_device, FIELD_rx_queue>::on(entry_, struct_addr_, val_);
            break;
        case 768: 
        case 769: 
        case 770: 
        case 771: 
        case 772: 
        case 773: 
        case 774: 
        case 775: 
            watch_write<struct net_device, FIELD__tx>::on(entry_, struct_addr_, val_);
            break;
        case 776: 
        case 777: 
        case 778: 
        case 779: 
            watch_write<struct net_device, FIELD_num_tx_queues>::on(entry_, struct_addr_, val_);
            break;
        case 780: 
        case 781: 
        case 782: 
        case 783: 
            watch_write<struct net_device, FIELD_real_num_tx_queues>::on(entry_, struct_addr_, val_);
            break;
        case 784: 
        case 785: 
        case 786: 
        case 787: 
        case 788: 
        case 789: 
        case 790: 
        case 791: 
            watch_write<struct net_device, FIELD_qdisc>::on(entry_, struct_addr_, val_);
            break;
        case 792: 
        case 793: 
        case 794: 
        case 795: 
        case 796: 
        case 797: 
        case 798: 
        case 799: 
            watch_write<struct net_device, FIELD_tx_queue_len>::on(entry_, struct_addr_, val_);
            break;
        case 800: 
        case 801: 
        case 802: 
        case 803: 
            watch_write<struct net_device, FIELD_tx_global_lock>::on(entry_, struct_addr_, val_);
            break;
        case 808: 
        case 809: 
        case 810: 
        case 811: 
        case 812: 
        case 813: 
        case 814: 
        case 815: 
            watch_write<struct net_device, FIELD_trans_start>::on(entry_, struct_addr_, val_);
            break;
        case 816: 
        case 817: 
        case 818: 
        case 819: 
            watch_write<struct net_device, FIELD_watchdog_timeo>::on(entry_, struct_addr_, val_);
            break;
        case 824: 
        case 825: 
        case 826: 
        case 827: 
        case 828: 
        case 829: 
        case 830: 
        case 831: 
        case 832: 
        case 833: 
        case 834: 
        case 835: 
        case 836: 
        case 837: 
        case 838: 
        case 839: 
        case 840: 
        case 841: 
        case 842: 
        case 843: 
        case 844: 
        case 845: 
        case 846: 
        case 847: 
        case 848: 
        case 849: 
        case 850: 
        case 851: 
        case 852: 
        case 853: 
        case 854: 
        case 855: 
        case 856: 
        case 857: 
        case 858: 
        case 859: 
        case 860: 
        case 861: 
        case 862: 
        case 863: 
        case 864: 
        case 865: 
        case 866: 
        case 867: 
        case 868: 
        case 869: 
        case 870: 
        case 871: 
        case 872: 
        case 873: 
        case 874: 
        case 875: 
        case 876: 
        case 877: 
        case 878: 
        case 879: 
        case 880: 
        case 881: 
        case 882: 
        case 883: 
        case 884: 
        case 885: 
        case 886: 
        case 887: 
        case 888: 
        case 889: 
        case 890: 
        case 891: 
        case 892: 
        case 893: 
        case 894: 
        case 895: 
        case 896: 
        case 897: 
        case 898: 
        case 899: 
        case 900: 
        case 901: 
        case 902: 
        case 903: 
            watch_write<struct net_device, FIELD_watchdog_timer>::on(entry_, struct_addr_, val_);
            break;
        case 960: 
        case 961: 
        case 962: 
        case 963: 
            watch_write<struct net_device, FIELD_refcnt>::on(entry_, struct_addr_, val_);
            break;
        case 968: 
        case 969: 
        case 970: 
        case 971: 
        case 972: 
        case 973: 
        case 974: 
        case 975: 
        case 976: 
        case 977: 
        case 978: 
        case 979: 
        case 980: 
        case 981: 
        case 982: 
        case 983: 
            watch_write<struct net_device, FIELD_todo_list>::on(entry_, struct_addr_, val_);
            break;
        case 984: 
        case 985: 
        case 986: 
        case 987: 
        case 988: 
        case 989: 
        case 990: 
        case 991: 
        case 992: 
        case 993: 
        case 994: 
        case 995: 
        case 996: 
        case 997: 
        case 998: 
        case 999: 
            watch_write<struct net_device, FIELD_index_hlist>::on(entry_, struct_addr_, val_);
            break;
        case 1000: 
        case 1001: 
        case 1002: 
        case 1003: 
        case 1004: 
        case 1005: 
        case 1006: 
        case 1007: 
            watch_write<struct net_device, FIELD_link_watch_next>::on(entry_, struct_addr_, val_);
            break;
        case 1008: 
        case 1009: 
        case 1010: 
        case 1011: 
            watch_write<struct net_device, FIELD_reg_state>::on(entry_, struct_addr_, val_);
            break;
        case 1016: 
        case 1017: 
        case 1018: 
        case 1019: 
        case 1020: 
        case 1021: 
        case 1022: 
        case 1023: 
            watch_write<struct net_device, FIELD_destructor>::on(entry_, struct_addr_, val_);
            break;
        case 1024: 
        case 1025: 
        case 1026: 
        case 1027: 
        case 1028: 
        case 1029: 
        case 1030: 
        case 1031: 
            watch_write<struct net_device, FIELD_npinfo>::on(entry_, struct_addr_, val_);
            break;
        case 1032: 
        case 1033: 
        case 1034: 
        case 1035: 
        case 1036: 
        case 1037: 
        case 1038: 
        case 1039: 
            watch_write<struct net_device, FIELD_ml_priv>::on(entry_, struct_addr_, val_);
            break;
        case 1040: 
        case 1041: 
        case 1042: 
        case 1043: 
        case 1044: 
        case 1045: 
        case 1046: 
        case 1047: 
            watch_write<struct net_device, FIELD_br_port>::on(entry_, struct_addr_, val_);
            break;
        case 1048: 
        case 1049: 
        case 1050: 
        case 1051: 
        case 1052: 
        case 1053: 
        case 1054: 
        case 1055: 
            watch_write<struct net_device, FIELD_macvlan_port>::on(entry_, struct_addr_, val_);
            break;
        case 1056: 
        case 1057: 
        case 1058: 
        case 1059: 
        case 1060: 
        case 1061: 
        case 1062: 
        case 1063: 
            watch_write<struct net_device, FIELD_garp_port>::on(entry_, struct_addr_, val_);
            break;
        case 1064: 
        case 1065: 
        case 1066: 
        case 1067: 
        case 1068: 
        case 1069: 
        case 1070: 
        case 1071: 
        case 1072: 
        case 1073: 
        case 1074: 
        case 1075: 
        case 1076: 
        case 1077: 
        case 1078: 
        case 1079: 
        case 1080: 
        case 1081: 
        case 1082: 
        case 1083: 
        case 1084: 
        case 1085: 
        case 1086: 
        case 1087: 
        case 1088: 
        case 1089: 
        case 1090: 
        case 1091: 
        case 1092: 
        case 1093: 
        case 1094: 
        case 1095: 
        case 1096: 
        case 1097: 
        case 1098: 
        case 1099: 
        case 1100: 
        case 1101: 
        case 1102: 
        case 1103: 
        case 1104: 
        case 1105: 
        case 1106: 
        case 1107: 
        case 1108: 
        case 1109: 
        case 1110: 
        case 1111: 
        case 1112: 
        case 1113: 
        case 1114: 
        case 1115: 
        case 1116: 
        case 1117: 
        case 1118: 
        case 1119: 
        case 1120: 
        case 1121: 
        case 1122: 
        case 1123: 
        case 1124: 
        case 1125: 
        case 1126: 
        case 1127: 
        case 1128: 
        case 1129: 
        case 1130: 
        case 1131: 
        case 1132: 
        case 1133: 
        case 1134: 
        case 1135: 
        case 1136: 
        case 1137: 
        case 1138: 
        case 1139: 
        case 1140: 
        case 1141: 
        case 1142: 
        case 1143: 
        case 1144: 
        case 1145: 
        case 1146: 
        case 1147: 
        case 1148: 
        case 1149: 
        case 1150: 
        case 1151: 
        case 1152: 
        case 1153: 
        case 1154: 
        case 1155: 
        case 1156: 
        case 1157: 
        case 1158: 
        case 1159: 
        case 1160: 
        case 1161: 
        case 1162: 
        case 1163: 
        case 1164: 
        case 1165: 
        case 1166: 
        case 1167: 
        case 1168: 
        case 1169: 
        case 1170: 
        case 1171: 
        case 1172: 
        case 1173: 
        case 1174: 
        case 1175: 
        case 1176: 
        case 1177: 
        case 1178: 
        case 1179: 
        case 1180: 
        case 1181: 
        case 1182: 
        case 1183: 
        case 1184: 
        case 1185: 
        case 1186: 
        case 1187: 
        case 1188: 
        case 1189: 
        case 1190: 
        case 1191: 
        case 1192: 
        case 1193: 
        case 1194: 
        case 1195: 
        case 1196: 
        case 1197: 
        case 1198: 
        case 1199: 
        case 1200: 
        case 1201: 
        case 1202: 
        case 1203: 
        case 1204: 
        case 1205: 
        case 1206: 
        case 1207: 
        case 1208: 
        case 1209: 
        case 1210: 
        case 1211: 
        case 1212: 
        case 1213: 
        case 1214: 
        case 1215: 
        case 1216: 
        case 1217: 
        case 1218: 
        case 1219: 
        case 1220: 
        case 1221: 
        case 1222: 
        case 1223: 
        case 1224: 
        case 1225: 
        case 1226: 
        case 1227: 
        case 1228: 
        case 1229: 
        case 1230: 
        case 1231: 
        case 1232: 
        case 1233: 
        case 1234: 
        case 1235: 
        case 1236: 
        case 1237: 
        case 1238: 
        case 1239: 
        case 1240: 
        case 1241: 
        case 1242: 
        case 1243: 
        case 1244: 
        case 1245: 
        case 1246: 
        case 1247: 
        case 1248: 
        case 1249: 
        case 1250: 
        case 1251: 
        case 1252: 
        case 1253: 
        case 1254: 
        case 1255: 
        case 1256: 
        case 1257: 
        case 1258: 
        case 1259: 
        case 1260: 
        case 1261: 
        case 1262: 
        case 1263: 
        case 1264: 
        case 1265: 
        case 1266: 
        case 1267: 
        case 1268: 
        case 1269: 
        case 1270: 
        case 1271: 
        case 1272: 
        case 1273: 
        case 1274: 
        case 1275: 
        case 1276: 
        case 1277: 
        case 1278: 
        case 1279: 
        case 1280: 
        case 1281: 
        case 1282: 
        case 1283: 
        case 1284: 
        case 1285: 
        case 1286: 
        case 1287: 
        case 1288: 
        case 1289: 
        case 1290: 
        case 1291: 
        case 1292: 
        case 1293: 
        case 1294: 
        case 1295: 
        case 1296: 
        case 1297: 
        case 1298: 
        case 1299: 
        case 1300: 
        case 1301: 
        case 1302: 
        case 1303: 
        case 1304: 
        case 1305: 
        case 1306: 
        case 1307: 
        case 1308: 
        case 1309: 
        case 1310: 
        case 1311: 
        case 1312: 
        case 1313: 
        case 1314: 
        case 1315: 
        case 1316: 
        case 1317: 
        case 1318: 
        case 1319: 
        case 1320: 
        case 1321: 
        case 1322: 
        case 1323: 
        case 1324: 
        case 1325: 
        case 1326: 
        case 1327: 
        case 1328: 
        case 1329: 
        case 1330: 
        case 1331: 
        case 1332: 
        case 1333: 
        case 1334: 
        case 1335: 
        case 1336: 
        case 1337: 
        case 1338: 
        case 1339: 
        case 1340: 
        case 1341: 
        case 1342: 
        case 1343: 
        case 1344: 
        case 1345: 
        case 1346: 
        case 1347: 
        case 1348: 
        case 1349: 
        case 1350: 
        case 1351: 
        case 1352: 
        case 1353: 
        case 1354: 
        case 1355: 
        case 1356: 
        case 1357: 
        case 1358: 
        case 1359: 
        case 1360: 
        case 1361: 
        case 1362: 
        case 1363: 
        case 1364: 
        case 1365: 
        case 1366: 
        case 1367: 
        case 1368: 
        case 1369: 
        case 1370: 
        case 1371: 
        case 1372: 
        case 1373: 
        case 1374: 
        case 1375: 
        case 1376: 
        case 1377: 
        case 1378: 
        case 1379: 
        case 1380: 
        case 1381: 
        case 1382: 
        case 1383: 
        case 1384: 
        case 1385: 
        case 1386: 
        case 1387: 
        case 1388: 
        case 1389: 
        case 1390: 
        case 1391: 
        case 1392: 
        case 1393: 
        case 1394: 
        case 1395: 
        case 1396: 
        case 1397: 
        case 1398: 
        case 1399: 
        case 1400: 
        case 1401: 
        case 1402: 
        case 1403: 
        case 1404: 
        case 1405: 
        case 1406: 
        case 1407: 
        case 1408: 
        case 1409: 
        case 1410: 
        case 1411: 
        case 1412: 
        case 1413: 
        case 1414: 
        case 1415: 
        case 1416: 
        case 1417: 
        case 1418: 
        case 1419: 
        case 1420: 
        case 1421: 
        case 1422: 
        case 1423: 
        case 1424: 
        case 1425: 
        case 1426: 
        case 1427: 
        case 1428: 
        case 1429: 
        case 1430: 
        case 1431: 
        case 1432: 
        case 1433: 
        case 1434: 
        case 1435: 
        case 1436: 
        case 1437: 
        case 1438: 
        case 1439: 
        case 1440: 
        case 1441: 
        case 1442: 
        case 1443: 
        case 1444: 
        case 1445: 
        case 1446: 
        case 1447: 
        case 1448: 
        case 1449: 
        case 1450: 
        case 1451: 
        case 1452: 
        case 1453: 
        case 1454: 
        case 1455: 
        case 1456: 
        case 1457: 
        case 1458: 
        case 1459: 
        case 1460: 
        case 1461: 
        case 1462: 
        case 1463: 
        case 1464: 
        case 1465: 
        case 1466: 
        case 1467: 
        case 1468: 
        case 1469: 
        case 1470: 
        case 1471: 
        case 1472: 
        case 1473: 
        case 1474: 
        case 1475: 
        case 1476: 
        case 1477: 
        case 1478: 
        case 1479: 
        case 1480: 
        case 1481: 
        case 1482: 
        case 1483: 
        case 1484: 
        case 1485: 
        case 1486: 
        case 1487: 
        case 1488: 
        case 1489: 
        case 1490: 
        case 1491: 
        case 1492: 
        case 1493: 
        case 1494: 
        case 1495: 
        case 1496: 
        case 1497: 
        case 1498: 
        case 1499: 
        case 1500: 
        case 1501: 
        case 1502: 
        case 1503: 
        case 1504: 
        case 1505: 
        case 1506: 
        case 1507: 
        case 1508: 
        case 1509: 
        case 1510: 
        case 1511: 
        case 1512: 
        case 1513: 
        case 1514: 
        case 1515: 
        case 1516: 
        case 1517: 
        case 1518: 
        case 1519: 
        case 1520: 
        case 1521: 
        case 1522: 
        case 1523: 
        case 1524: 
        case 1525: 
        case 1526: 
        case 1527: 
        case 1528: 
        case 1529: 
        case 1530: 
        case 1531: 
        case 1532: 
        case 1533: 
        case 1534: 
        case 1535: 
        case 1536: 
        case 1537: 
        case 1538: 
        case 1539: 
        case 1540: 
        case 1541: 
        case 1542: 
        case 1543: 
        case 1544: 
        case 1545: 
        case 1546: 
        case 1547: 
        case 1548: 
        case 1549: 
        case 1550: 
        case 1551: 
        case 1552: 
        case 1553: 
        case 1554: 
        case 1555: 
        case 1556: 
        case 1557: 
        case 1558: 
        case 1559: 
        case 1560: 
        case 1561: 
        case 1562: 
        case 1563: 
        case 1564: 
        case 1565: 
        case 1566: 
        case 1567: 
        case 1568: 
        case 1569: 
        case 1570: 
        case 1571: 
        case 1572: 
        case 1573: 
        case 1574: 
        case 1575: 
            watch_write<struct net_device, FIELD_dev>::on(entry_, struct_addr_, val_);
            break;
        case 1576: 
        case 1577: 
        case 1578: 
        case 1579: 
        case 1580: 
        case 1581: 
        case 1582: 
        case 1583: 
        case 1584: 
        case 1585: 
        case 1586: 
        case 1587: 
        case 1588: 
        case 1589: 
        case 1590: 
        case 1591: 
        case 1592: 
        case 1593: 
        case 1594: 
        case 1595: 
        case 1596: 
        case 1597: 
        case 1598: 
        case 1599: 
            watch_write<struct net_device, FIELD_sysfs_groups>::on(entry_, struct_addr_, val_);
            break;
        case 1600: 
        case 1601: 
        case 1602: 
        case 1603: 
        case 1604: 
        case 1605: 
        case 1606: 
        case 1607: 
            watch_write<struct net_device, FIELD_rtnl_link_ops>::on(entry_, struct_addr_, val_);
            break;
        case 1608: 
        case 1609: 
        case 1610: 
        case 1611: 
        case 1612: 
        case 1613: 
        case 1614: 
        case 1615: 
            watch_write<struct net_device, FIELD_vlan_features>::on(entry_, struct_addr_, val_);
            break;
        case 1616: 
        case 1617: 
        case 1618: 
        case 1619: 
            watch_write<struct net_device, FIELD_gso_max_size>::on(entry_, struct_addr_, val_);
            break;
        case 1624: 
        case 1625: 
        case 1626: 
        case 1627: 
        case 1628: 
        case 1629: 
        case 1630: 
        case 1631: 
            watch_write<struct net_device, FIELD_dcbnl_ops>::on(entry_, struct_addr_, val_);
            break;
        case 1632: 
        case 1633: 
        case 1634: 
        case 1635: 
            watch_write<struct net_device, FIELD_fcoe_ddp_xid>::on(entry_, struct_addr_, val_);
            break;
        default: break;
        }
    }
};
#endif

