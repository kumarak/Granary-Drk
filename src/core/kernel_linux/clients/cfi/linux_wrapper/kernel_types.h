struct jbd2_revoke_table_s;
struct crypto_cipher;
struct dm_target_io;
struct upid;
struct acpi_device_id;
struct request_pm_state;
struct taskstats;
struct hlist_bl_head;
struct pid_namespace;
struct radix_tree_node;
struct blk_integrity;
struct compress_alg;
struct pid_link;
struct crypto_async_request;
struct timezone;
struct itimerspec;
struct acpi_device_flags;
struct itimerval;
struct tms;
struct xfrm_userspi_info;
struct radix_tree_iter;
struct tm;
struct user_namespace;
struct kstat;
struct acpi_srat_cpu_affinity;
struct __wait_queue;
struct wait_bit_key;
struct bug_entry;
struct wait_bit_queue;
struct bio_list;
struct xfrm_userpolicy_info;
struct shrink_control;
struct acpi_device_perf_state;
struct nodemask_scratch;
union cdrom_addr;
struct free_area;
struct pglist_data;
struct ablkcipher_tfm;
struct acpi_pnp_device_id;
struct zone_padding;
struct xfrm_userpolicy_id;
struct seqcount;
struct zone_reclaim_stat;
struct acpi_mpst_power_node;
struct lruvec;
struct cgroup_subsys_state;
struct per_cpu_pageset;
struct prefix_cacheinfo;
struct zone;
struct ata_port_stats;
struct zonelist_cache;
struct ip_msfilter;
struct xfrm_user_acquire;
struct zoneref;
struct timeval;
struct cdrom_blk;
struct hd_geometry;
struct compat_dirent;
struct acpi_pmtt_domain;
struct rt_mutex_waiter;
struct mutex;
struct vfsmount;
struct pid_namespace;
struct pci_error_handlers;
struct dm_io;
struct range;
struct pci_driver;
struct debug_obj_descr;
struct latency_record;
struct crypto_aead;
struct compat_ifreq;
struct timex;
struct dsa_switch;
struct acpi_device_dir;
struct qstr;
union ktime;
struct tvec_base;
struct timer_list;
struct hrtimer;
struct ipv6_ac_socklist;
struct acpi_srat_mem_affinity;
struct compat_statfs64;
struct apm_bios_info;
struct work_struct;
struct edd_info;
struct __user_cap_data_struct;
struct compat_linux_dirent;
struct timespec;
struct fs_struct;
struct srcu_struct_array;
struct vfs_cap_data;
struct edd;
struct xfrm_user_report;
struct compat_kexec_segment;
struct acpi_pnp_device_id_list;
struct srcu_notifier_head;
struct tcmsg;
struct mem_section;
struct page_frag;
struct ata_ering_entry;
struct ctl_table;
struct cdrom_generic_command;
struct ustat;
struct xfrm_user_kmaddress;
struct anon_vma;
struct acpi_pmtt_physical_component;
struct acpi_madt_nmi_source;
struct input_absinfo;
struct input_keymap_entry;
struct dm_arg_set;
struct mempolicy;
struct qdisc_rate_table;
struct request;
struct dentry;
struct kernel_cap_struct;
struct ff_trigger;
struct mp_ioapic_gsi;
struct crypto_blkcipher;
struct ff_constant_effect;
struct ff_ramp_effect;
struct acpi_hardware_id;
struct ff_condition_effect;
struct dvd_host_send_challenge;
struct ff_periodic_effect;
struct xfrm_user_mapping;
struct cpu_vfs_cap_data;
struct hlist_nulls_node;
struct acpi_table_waet;
struct tc_cnt;
struct ff_effect;
struct node;
struct acpi_srat_x2apic_cpu_affinity;
struct input_value;
struct input_dev;
struct compat_timespec;
struct ff_device;
struct ipv6_fl_socklist;
struct xfrm_policy_hash;
struct semaphore;
struct input_mt;
struct hlist_nulls_node;
struct input_handle;
struct socket;
struct input_handle;
struct input_handler;
struct ff_device;
struct acpi_device_info;
struct pnp_protocol;
struct netns_xfrm;
struct fiemap_extent;
struct nf_ct_tcp_flags;
struct pnp_dev;
struct acpi_mpst_component;
struct pnp_card;
struct blkcipher_alg;
struct pnp_id;
struct swap_list_t;
struct pnp_card_link;
struct nduseroptmsg;
struct pnp_card_driver;
struct ata_ering;
struct pnp_driver;
struct tc_red_xstats;
struct fiemap;
struct pnp_id;
struct call_single_data;
struct request_sense;
struct pnp_fixup;
struct serio_device_id;
struct netlink_kernel_cfg;
struct acpi_table_rasf;
struct kernel_symbol;
struct dentry_operations;
struct __wait_queue_head;
struct pcpu_group_info;
struct dm_arg;
struct anon_vma;
struct qdisc_size_table;
struct sg_io_hdr;
struct compat_msqid64_ds;
struct dvd_send_key;
struct crypto_hash;
struct acpi_device_pnp;
struct inode;
struct shrinker;
struct pcpu_alloc_info;
struct acpi_table_asf;
struct gnet_estimator;
struct pernet_operations;
struct percpu_rw_semaphore;
struct rb_node;
struct proto_ops;
struct compat_ifconf;
struct acpi_mpst_data_hdr;
struct dsa_chip_data;
struct bio_set;
struct rb_root;
struct shared_info;
struct tcamsg;
struct jbd2_journal_revoke_tail;
struct ata_device;
struct tc_gred_qopt;
struct statfs;
struct bio;
struct __sysctl_args;
struct acpi_rasf_shared_memory;
struct Qdisc_class_common;
struct intel_iommu;
struct acpi_mem_space_context;
struct acpi_memory_list;
struct anon_vma_chain;
struct bsg_job;
struct bio_integrity_payload;
struct nf_udp_net;
struct acpi_generic_address;
struct qdisc_watchdog;
struct compat_shmid64_ds;
struct fasync_struct;
struct crypto_rng;
struct trap_info;
struct acpi_table_rsdt;
struct acpi_table_xsdt;
struct acpi_device_power_flags;
struct poll_table_page;
struct acpi_table_facs;
struct acpi_resource_spi_serialbus;
struct acpi_table_fadt;
struct block_device;
struct nf_icmp_net;
struct partition;
union acpi_name_union;
struct journal_head;
struct dsa_switch_driver;
struct acpi_table_desc;
struct acpi_asf_header;
struct acpi_subtable_header;
struct acpi_whea_header;
struct acpi_table_bert;
struct io_context;
struct nf_ip_net;
struct acpi_table_cpep;
struct workqueue_struct;
struct compat_robust_list;
struct acpi_table_ecdt;
struct acpi_table_einj;
struct acpi_einj_entry;
struct acpi_einj_error_type_with_addr;
struct per_cpu_pages;
struct ctl_dir;
struct acpi_einj_vendor;
struct acpi_mpst_power_data;
struct acpi_einj_trigger;
struct crypto_comp;
struct acpi_table_erst;
struct statfs64;
struct acpi_erst_entry;
struct pacct_struct;
struct vlan_ioctl_args;
struct acpi_erst_info;
struct tc_gred_sopt;
struct fstrim_range;
struct ctl_table_poll;
struct acpi_hest_header;
struct hd_struct;
struct acpi_hest_ia_error_bank;
struct dmi_strmatch;
struct ethtool_regs;
struct acpi_uuid;
struct sigcontext;
struct cg_proto;
struct acpi_madt_local_apic_nmi;
struct ipv6_mc_socklist;
struct ethtool_eee;
struct files_stat_struct;
struct sb_writers;
struct ctl_node;
struct blk_scsi_cmd_filter;
struct arch_shared_info;
struct request_sock_ops;
struct user_struct;
struct blkcg_gq;
struct ethtool_coalesce;
struct acpi_pci_id;
struct ethtool_ringparam;
struct dvd_lu_send_title_key;
struct crypto_tfm;
struct ethtool_channels;
struct ethtool_pauseparam;
struct mii_bus;
struct ethtool_gstrings;
struct inodes_stat_t;
struct ethtool_sset_info;
struct mem_cgroup_reclaim_cookie;
struct ethtool_test;
struct ethtool_stats;
struct transaction_s;
struct ethtool_perm_addr;
struct ipv6_txoptions;
struct acpi_asf_info;
struct ethtool_tcpip4_spec;
struct ethtool_ah_espip4_spec;
struct export_operations;
struct disk_events;
struct ethtool_usrip4_spec;
struct ifla_vlan_flags;
union ethtool_flow_union;
struct list_head;
struct ethtool_flow_ext;
struct compat_robust_list_head;
struct ethtool_rx_flow_spec;
struct ethtool_rxnfc;
struct acpi_mpst_shared;
struct ethtool_rxfh_indir;
struct zonelist;
struct xfrm_id;
struct acpi_resource_address;
struct ethtool_rx_ntuple_flow_spec;
struct ethtool_rx_ntuple;
struct ata_eh_info;
struct sctp_mib;
struct ethtool_flash;
struct tc_choke_qopt;
struct ethtool_dump;
struct journal_s;
struct cpu_itimer;
struct ethtool_get_features_block;
struct xfrm_sec_ctx;
struct blk_integrity;
struct ethtool_gfeatures;
struct ethtool_set_features_block;
struct msr;
struct irq_pin_list;
struct rps_map;
struct rps_dev_flow;
struct Qdisc_class_ops;
struct vm_fault;
struct vio_device_id;
struct request_list;
struct rps_dev_flow_table;
struct xfrm_selector;
struct module_kobject;
struct disk_part_iter;
struct rps_sock_flow_table;
struct rt_mutex;
struct file_system_type;
struct netdev_rx_queue;
struct iret_context;
struct xps_map;
struct xps_dev_maps;
struct nla_policy;
struct xfrmu_spdinfo;
struct netdev_tc_txq;
struct dvd_lu_send_asf;
struct netdev_fcoe_hbainfo;
struct xfrm_lifetime_cfg;
struct solaris_x86_slice;
struct uts_namespace;
struct net_device_ops;
struct iw_handler_def;
struct irq_chip_regs;
struct acpi_asf_alert;
struct iw_public_data;
struct vlan_info;
struct request_sense;
struct in_device;
struct dn_dev;
struct xfrm_lifetime_cur;
struct solaris_x86_vtoc;
struct hlist_head;
struct compat_sigevent;
struct delayed_work;
struct cpu_rmap;
struct Qdisc;
struct pcpu_lstats;
struct acpi_table_hest;
struct fprop_local_percpu;
struct user_i387_struct;
struct bsd_disklabel;
struct rlimit;
struct pcpu_dstats;
struct acpi_table_pcct;
struct garp_port;
struct rtnl_link_ops;
struct kthread_work;
struct napi_gro_cb;
struct vlan_hdr;
struct packet_type;
struct ata_eh_context;
struct modversion_info;
struct tc_choke_xstats;
struct offload_callbacks;
struct xfrm_replay_state_esn;
struct bsd_partition;
struct packet_offload;
struct rw_semaphore;
struct softnet_data;
struct platform_device_id;
struct ndmsg;
struct acpi_device_perf_flags;
struct module_param_attrs;
struct xfrm_algo;
struct inet6_dev;
struct hotplug_slot;
struct vm_operations_struct;
struct tcf_proto_ops;
struct tick_sched;
struct nl_info;
struct compat_itimerspec;
struct journal_block_tag_s;
struct dvd_host_send_rpcstate;
struct aead_givcrypt_request;
struct acpi_device_power;
struct irq_chip_type;
struct user_xsave_hdr;
struct unixware_disklabel;
struct pci_saved_state;
struct raw6_sock;
struct acpi_asf_alert_data;
struct xfrm_algo_aead;
struct unixware_vtoc;
struct key;
struct ifla_vxlan_port_range;
struct acpi_dmar_hardware_unit;
struct hlist_node;
struct execute_work;
struct compat_old_linux_dirent;
struct rusage;
struct of_device_id;
struct acpi_pcct_subspace;
struct xfrm_stats;
struct fprop_global;
struct timewait_sock_ops;
struct vlan_ethhdr;
struct acpi_bus_type;
struct ata_acpi_drive;
struct netns_dccp;
struct tc_htb_opt;
struct task_cputime;
struct fprop_local_single;
struct mdio_device_id;
struct rt_rq;
struct ip_options_data;
struct ahash_alg;
struct acpi_resource_dma;
struct input_device_id;
struct module_attribute;
struct pcpu_tstats;
struct bcma_device_id;
struct kcore_list;
struct skcipher_givcrypt_request;
struct rtnl_link_ops;
struct dvd_lu_send_rpcstate;
struct bdi_writeback;
struct usb_device_id;
struct iov_iter;
struct irq_chip_generic;
struct acpi_asf_remote;
struct acpi_pmtt_header;
struct pollfd;
struct scsi_ioctl_command;
struct udp6_sock;
struct mempool_s;
struct dvd_lu_send_challenge;
struct uprobe_consumer;
struct io_cq;
struct uprobes_state;
struct acpi_pcct_shared_memory;
struct ccs_modesel_head;
struct firmware;
struct ata_acpi_gtm;
struct in_addr;
struct tc_htb_glob;
struct i2c_device_id;
struct jbd2_buffer_trigger_type;
struct acpi_resource_start_dependent;
struct backing_dev_info;
struct gate_struct64;
struct i387_soft_struct;
struct rtnl_af_ops;
struct compat_itimerval;
struct ymmh_struct;
struct ablkcipher_request;
struct xsave_hdr_struct;
struct xsave_struct;
struct cee_pfc;
union thread_xstate;
struct bio_pair;
struct linux_dirent64;
struct fpu;
struct acpi_ibft_header;
struct file;
struct tcp6_sock;
struct kmem_cache;
struct acpi_asf_control_data;
struct phy_fixup;
struct thread_struct;
struct tcp_fastopen_request;
struct in6_addr;
struct dmi_system_id;
struct cpumask;
struct fid;
struct pv_info;
struct rcu_batch;
struct client_extension;
struct rlimit64;
struct pv_lazy_ops;
struct acpi_table_pmtt;
struct pv_time_ops;
struct rq_map_data;
struct pnp_card_device_id;
struct pv_cpu_ops;
struct raw_hashinfo;
struct builtin_fw;
struct scsi_lun;
struct ata_port_info;
struct tc_htb_xstats;
struct arch_spinlock;
struct lock_class_key;
struct srcu_struct;
struct posix_acl;
struct paravirt_patch_template;
struct acpi_device_perf;
struct cpuinfo_x86;
struct acpi_resource_io;
struct mpc_bus;
struct crypto_attr_alg;
struct mpc_ioapic;
struct zap_details;
struct parisc_device_id;
struct task_migration_notifier;
struct exception_table_entry;
struct blocking_notifier_head;
struct zorro_device_id;
struct cfs_rq;
struct aead_request;
struct inet6_request_sock;
struct task_group;
struct kmem_cachep;
struct neigh_table;
struct iocb;
struct tcf_ematch_hdr;
struct apm_info;
struct netns_sysctl_ipv6;
struct raw_notifier_head;
struct isapnp_device_id;
struct eventfd_ctx;
struct dcb_app;
struct aio_ring;
struct acpi_asf_rmcp;
struct acpi_resource_address16;
struct xt_table;
struct event_header;
struct task_struct;
struct rt6_info;
struct inet6_timewait_sock;
struct callback_head;
struct fib6_table;
struct compat_msghdr;
struct netns_nf_frag;
struct task_io_accounting;
struct thread_group_cputimer;
struct dvd_bca;
struct autogroup;
struct sg_iovec;
struct __large_struct;
struct x86_cpu_id;
struct ip_mreq;
struct scsi_device;
struct sched_info;
struct disk_stats;
struct iphdr;
struct sched_group_power;
struct ata_timing;
struct ip_mreqn;
struct tc_hfsc_qopt;
struct sched_group;
struct memory_block;
struct ipack_device_id;
struct sched_domain_attr;
struct in_pktinfo;
struct acpi_device_wakeup_flags;
struct acpi_resource_fixed_io;
struct static_key;
struct hlist_nulls_head;
struct module_use;
struct mb_cache;
struct io_apic_irq_attr;
struct block_device_operations;
struct smp_ops;
struct hlist_node;
struct pci_slot;
struct page_cgroup;
struct Qdisc_class_hash;
struct elevator_ops;
struct ip_ct_tcp_state;
struct neigh_statistics;
struct compat_timex;
struct x86_init_pci;
struct ip_ct_tcp;
struct mrw_feature_desc;
struct blkcipher_desc;
struct pnp_id;
struct nf_conntrack_ecache;
struct ifinfomsg;
struct nf_proto_net;
struct nf_generic_net;
struct rand_pool_info;
struct hotplug_slot;
struct nf_tcp_net;
struct unixware_slice;
struct tcf_proto;
struct nsproxy;
struct acpi_resource_extended_irq;
struct ata_taskfile;
struct ctl_table_root;
struct tcp6_timewait_sock;
struct ctl_table_header;
struct netns_ct;
struct ip_conntrack_stat;
struct mpc_table;
struct pci_cap_saved_data;
struct exec_domain;
struct nf_ct_event_notifier;
struct nf_exp_event_notifier;
struct alt_instr;
struct slab;
struct compat_mmsghdr;
struct ctl_table_set;
struct ctl_table_set;
struct ff_replay;
struct ctl_path;
struct mpc_cpu;
struct cred;
struct udp_table;
struct subprocess_info;
struct xfrm_replay_state;
struct scsi_target;
struct pci_bits;
struct ip_mreq_source;
struct tc_service_curve;
struct user_regs_struct;
struct cleancache_filekey;
struct user_ymmh_regs;
struct xfrm_algo_auth;
struct pcie_link_state;
struct user_xstateregs;
struct ptr_heap;
struct acpi_device_wakeup;
struct writeback_control;
struct mb_cache;
struct virtio_device_id;
struct ssb_device_id;
struct elv_fs_entry;
struct hv_vmbus_device_id;
struct module_ref;
struct crypto_attr_type;
struct files_struct;
struct x86_init_ops;
struct rpmsg_device_id;
struct kset;
struct hash_tfm;
struct cipher_desc;
struct pnp_driver;
struct address_space_operations;
struct spi_device_id;
struct neigh_table;
struct request_queue;
struct rwrt_feature_desc;
struct hd_struct;
struct gendisk;
struct pci_sriov;
struct acpi_resource_generic_register;
struct kobj_type;
struct dcbmsg;
struct tasklet_hrtimer;
struct inode_operations;
struct acpi_table_boot;
struct acpi_ibft_nic;
struct amba_id;
struct mm_struct;
struct file_lock;
struct tc_stats;
struct acpi_resource_fixed_memory32;
struct pci_ats;
struct kobj_type;
struct compat_sysinfo;
struct fown_struct;
struct acpi_table_mpst;
struct file_ra_state;
struct pci_cap_saved_state;
struct file_handle;
struct sock_iocb;
struct pci_vpd;
struct lock_manager_operations;
struct cpu_user_regs;
struct file_lock_operations;
struct file_lock;
struct pci_driver;
struct tty_audit_buf;
struct lock_manager;
struct pci_host_bridge_window;
union irq_stack_union;
struct pci_host_bridge;
struct pci_bus_resource;
struct f_owner_ex;
struct pci_ops;
struct acpi_device_physical_node;
struct acpi_resource_vendor;
struct seq_operations;
struct nl_pktinfo;
struct acpi_madt_generic_distributor;
struct sched_param;
struct super_operations;
struct net;
struct vm_unmapped_area_info;
struct netlink_callback;
struct rq;
struct neigh_ops;
struct ipc_kludge;
struct msgbuf;
struct hash_desc;
struct pnp_card_driver;
struct kern_ipc_perm;
struct semid_ds;
struct acpi_device_power_state;
struct ndt_stats;
struct nlm_lockowner;
struct rta_session;
struct linux_binfmt;
struct elf32_sym;
struct ndt_config;
struct sockaddr_pkt;
struct tc_estimator;
struct acpi_table_csrt;
struct sockaddr_ll;
union semun;
struct tpacket_stats_v3;
struct nfs_lock_info;
struct desc_struct;
union tpacket_stats_u;
struct sem_array;
struct tpacket_hdr;
struct signal_struct;
struct sem_undo_list;
struct ff_envelope;
struct prop_global;
struct nfs4_lock_state;
struct prop_descriptor;
struct socket_alloc;
struct tpacket_bd_ts;
struct jbd2_inode;
struct scsi_host_cmd_pool;
struct input_event;
struct group_req;
struct tc_cbq_lssopt;
struct seccomp_data;
struct cleancache_ops;
union tpacket_bd_header_u;
struct reclaim_state;
struct seccomp;
struct tpacket_req;
struct acpi_bus_event;
struct x86_hw_tss;
struct tpacket_req3;
struct acpi_table_msct;
struct klist_iter;
struct ratelimit_state;
struct bvec_merge_data;
struct acpi_pmtt_socket;
struct dev_archdata;
struct compat_rlimit;
struct x86_platform_ops;
struct kparam_string;
struct dma_map_ops;
struct pci_fixup;
struct file_system_type;
struct phy_c45_device_ids;
struct pdev_archdata;
struct device_private;
struct neigh_ops;
struct device_driver;
struct driver_private;
struct module_sect_attrs;
struct crypto_ablkcipher;
struct class_;
struct acpi_resource_common_serialbus;
struct kparam_array;
struct netlink_skb_parms;
struct subsys_private;
struct pm_qos_request;
struct bus_type;
struct device_node;
struct iommu_ops;
struct transaction_stats_s;
struct iommu_group;
struct tc_ratespec;
struct bus_attribute;
struct vm_region;
struct fiemap_extent_info;
struct device_attribute;
struct ipc_perm;
struct sk_buff_head;
struct driver_attribute;
struct key_type;
struct acpi_resource_fixed_dma;
struct subsys_dev_iter;
struct device_type;
struct device_type;
struct __una_u16;
struct of_device_id;
struct ipc64_perm;
struct acpi_device_id;
struct scsi_transport_template;
struct acpi_table_header;
struct driver_attribute;
struct subsys_interface;
struct acpi_table_wddt;
struct class_attribute;
struct input_id;
struct device_attribute;
struct tc_cbq_wrropt;
struct class_dev_iter;
struct Qdisc;
struct inode_operations;
struct class_compat;
struct netlink_notify;
struct class_attribute;
struct acpi_eject_event;
struct acpi_resource_end_tag;
struct orig_ist;
struct ethtool_sfeatures;
struct acpi_msct_proximity;
struct ethtool_ts_info;
struct compat_ethtool_rx_flow_spec;
struct tracepoint;
struct netlink_dump_control;
struct irq_routing_table;
struct blk_queue_tag;
struct compat_ethtool_rxnfc;
struct load_weight;
struct hash_alg_common;
struct pneigh_entry;
struct ethtool_ops;
struct feature_header;
struct siginfo;
struct prot_inuse;
struct phy_driver;
struct tcf_t;
struct netns_core;
struct snmp_mib;
struct pm_qos_flags_request;
struct u64_stats_sync;
struct vm_event_state;
struct ipstats_mib;
struct mmu_update;
struct acpi_device_status;
struct acpi_resource_i2c_serialbus;
struct icmp_mib;
struct icmpmsg_mib;
struct tc_sizespec;
struct acpi_csrt_descriptor;
struct icmpv6_mib;
struct _xsave_hdr;
struct skb_frag_struct;
struct _ymmh_state;
struct irq_affinity_notify;
struct audit_names;
struct nda_cacheinfo;
struct _xstate;
struct match_token;
struct tcp_mib;
struct compat_mq_attr;
struct udp_mib;
struct key_owner;
struct linux_mib;
struct netns_mib;
struct mm_walk;
struct media_event_desc;
struct netns_unix;
struct __una_u32;
struct acpi_table_wdrt;
struct netns_packet;
struct blk_queue_tags;
struct map_segment;
struct group_filter;
struct tc_cbq_ovl;
struct inet_frag_queue;
struct kthread_worker;
struct Qdisc;
struct inet_bind_bucket;
struct paravirt_callee_save;
struct inet_frags;
struct task_delay_info;
struct tcpm_hash_bucket;
struct gendisk;
struct ndtmsg;
struct ipv4_devconf;
struct prefixmsg;
struct acpi_pci_root;
struct acpi_resource_memory24;
struct i387_fsave_struct;
struct fib_rules_ops;
struct acpi_hest_aer_common;
struct tcf_result;
struct acpi_hest_notify;
struct ahash_request;
struct acpi_hest_ia_machine_check;
struct tree_descr;
struct filename;
struct dsa_platform_data;
struct phy_driver;
struct class_attribute_string;
struct acpi_hest_ia_nmi;
struct acpi_hest_aer_root;
struct neigh_hash_table;
struct acpi_hest_aer;
struct mode_page_header;
struct acpi_hest_aer_bridge;
struct acpi_hest_generic;
struct queue_limits;
struct semid64_ds;
struct dsa_switch_tree;
struct acpi_hest_generic_status;
struct acpi_table_dbg2;
struct acpi_hest_generic_data;
struct acpi_table_madt;
struct acpi_madt_local_apic;
struct acpi_madt_io_apic;
struct tc_fifo_qopt;
struct acpi_madt_interrupt_override;
struct sembuf;
struct compat_msgbuf;
struct dsa_switch;
struct keyring_list;
struct acpi_madt_local_apic_override;
struct acpi_madt_io_sapic;
struct acpi_madt_local_sapic;
struct __una_u64;
struct acpi_vendor_uuid;
struct acpi_madt_interrupt_source;
struct memcg_cache_params;
struct tpacket_stats;
struct scsi_host_template;
struct acpi_madt_local_x2apic;
struct acpi_table_rsdp;
struct acpi_madt_local_x2apic_nmi;
struct ata_bmdma_prd;
struct acpi_madt_generic_interrupt;
struct acpi_table_bgrt;
struct compress_tfm;
struct tc_cbq_police;
struct mii_ioctl_data;
struct crypto_type;
struct sg_table;
struct seminfo;
struct acpi_table_sbst;
struct dsa_switch_driver;
struct acpi_table_slit;
struct acpi_dock_ops;
struct acpi_resource_memory32;
struct i387_fxsave_struct;
struct class_interface;
struct device_attribute;
struct seminfo;
struct mii_bus;
struct dma_device;
struct sched_class;
struct sched_statistics;
struct neigh_table;
struct device_dma_parameters;
struct packet_command;
struct cipher_alg;
struct sched_avg;
struct tc_u32_key;
struct dma_coherent_mem;
struct cgroupstats;
struct sched_entity;
struct acpi_sleep_functions;
struct sched_rt_entity;
struct dma_map_ops;
struct acpi_ivrs_de_header;
struct tpacket_auxdata;
struct pci_device_id;
struct acpi_resource_uart_serialbus;
struct rcu_node;
struct css_set;
struct tc_prio_qopt;
struct acpi_dbg2_device;
struct compat_robust_list_head;
struct acpi_pld_info;
struct ftrace_ret_stack;
struct blk_plug_cb;
struct arch_uprobe_task;
union thread_union;
struct sem;
struct miscdevice;
struct css_device_id;
struct irq_data;
struct mpf_intel;
struct epoll_event;
struct module;
struct pnp_device_id;
struct keyring_name;
struct irq_domain;
struct irq_chip;
struct pci_setup_rom;
struct dev_pm_ops;
struct ieee_ets;
struct request_values;
struct acpi_table_drtm;
struct irqaction;
struct class_container;
struct pcmcia_device_id;
struct tc_cbq_fopt;
struct irq_2_iommu;
struct mii_if_info;
struct eisa_device_id;
struct irq_cfg;
struct tpacket_hdr_variant1;
struct ieee_pfc;
struct sdio_device_id;
struct acpi_pci_driver;
struct tc_hfsc_stats;
struct irqaction;
struct vm_operations_struct;
struct sg_mapping_iter;
struct req_iterator;
struct mempolicy;
struct shash_desc;
struct tpacket3_hdr;
struct dev_pm_qos_request;
struct proc_dir_entry;
struct arch_vcpu_info;
struct tc_u32_sel;
struct mm_rss_stat;
struct neigh_seq_state;
struct Scsi_Host;
struct cdrom_device_info;
struct mmu_notifier_mm;
union acpi_resource_data;
struct kernel_param_ops;
struct pm_subsys_data;
struct kiocb;
struct super_operations;
struct acpi_table_dbgp;
struct xattr_handler;
struct mtd_info;
struct cdrom_mcn;
struct tc_multiq_qopt;
struct prop_local_percpu;
struct pollfd;
struct elf32_hdr;
struct vmcore;
struct tc_tbf_qopt;
struct __key_reference_with_attributes;
struct tracepoint_func;
struct tp_module;
struct ff_rumble_effect;
struct tracepoint_iter;
struct kvec;
struct listen_sock;
struct mod_arch_specific;
struct prop_local_single;
struct elf64_hdr;
struct tty_driver;
struct partition_meta_info;
struct throtl_data;
struct scsi_cmnd;
struct dma_attrs;
struct acpi_drtm_vtl_list;
struct vcpu_time_info;
struct tc_cbq_xstats;
struct module_version_attribute;
struct ifaddrmsg;
struct kmem_cache_cpu;
struct tpacket_hdr_v1;
struct dev_pm_qos;
struct kmem_cache_node;
struct kstatfs;
struct cdrom_slot;
struct tpacket2_hdr;
struct resource_list_entry;
struct acpi_memory_attribute;
struct iovec;
struct simple_transaction_argresp;
struct pvclock_vcpu_time_info;
struct pipe_inode_info;
struct seccomp_filter;
struct dcb_app_type;
struct kobj_uevent_env;
union proc_op;
struct poll_table_struct;
struct crypto_shash;
struct neighbour_cb;
struct proc_ns_operations;
struct cdrom_device_ops;
struct rng_alg;
struct swap_info_struct;
struct tc_u32_mark;
struct proc_inode;
struct posix_acl_entry;
struct pm_qos_flags;
struct percpu_counter;
struct tpacket_block_desc;
struct elf32_shdr;
struct acpi_resource;
struct fs_qfilestat;
struct acpi_table_s3pt;
struct fs_quota_stat;
struct acpi_table_dmar;
union sigval;
struct platform_device;
struct nf_bridge_info;
struct qtree_fmt_operations;
struct plist_head;
struct elf64_shdr;
struct elevator_type;
struct if_dqinfo;
struct mem_dqblk;
struct plist_node;
struct taskstats;
struct sigevent;
struct fastopen_queue;
struct acpi_drtm_resource_list;
struct compat_sysctl_args;
union acpi_object;
struct scsi_varlen_cdb_hdr;
struct dquot_operations;
struct group_info;
struct sched_domain;
struct quotactl_ops;
struct cdrom_changer_info;
struct quota_info;
struct elf64_note;
struct fs_disk_quota;
struct quota_module_name;
struct acpi_osc_context;
struct acpi_io_attribute;
struct klist;
struct crypto_attr_u32;
struct compat_flock;
struct cma;
struct e820map;
struct shash_alg;
struct setup_data;
struct ifa_cacheinfo;
struct sock;
struct mem_cgroup;
struct k_sigaction;
struct resource;
union tpacket_req_u;
struct pvclock_wall_clock;
struct tc_u32_pcnt;
struct device;
struct kset_uevent_ops;
struct ist_info;
struct gnet_stats_basic_packed;
struct edid_info;
struct cdrom_device_ops;
struct acpi_pci_routing_table;
struct dma_chan_dev;
struct idr;
struct sigaltstack;
struct olpc_ofw_header;
struct acpi_dmar_header;
struct efi_info;
struct boot_params;
struct x86_init_mpparse;
struct tc_sfq_qopt;
struct x86_init_resources;
struct compat_ipc64_perm;
struct dma_chan_dev;
struct dquot;
struct x86_init_oem;
struct dom0_vga_console_info;
struct sec_path;
struct cdrom_volctrl;
struct key_user;
struct tc_netem_qopt;
struct rtable;
struct compat_sigaltstack;
struct x86_init_iommu;
struct request_sock_queue;
struct ida_bitmap;
struct compat_utimbuf;
struct sock_common;
struct acpi_drtm_id_list;
struct tc_netem_corr;
struct rtattr;
struct compat_iovec;
struct attribute_group;
struct qtree_mem_dqinfo;
struct cdrom_msf0;
union acpi_resource_attribute;
struct sem;
struct xfrm_user_sec_ctx;
struct xfrm_user_tmpl;
struct vcpu_guest_context;
struct acpi_dev_node;
struct xfrm_encap_tmpl;
struct bin_attribute;
struct if_dqblk;
struct ifla_cacheinfo;
struct symsearch;
struct crypto_shash;
struct pci_sysdata;
struct timerqueue_node;
struct mb_cache_entry;
struct xfrmu_sadhinfo;
struct hrtimer_clock_base;
struct hrtimer_cpu_base;
struct data_chunk;
struct xfrm_usersa_info;
struct xattr;
struct elf32_note;
struct xfrm_usersa_id;
struct acpi_signal_fatal_info;
struct xfrm_aevent_id;
struct tc_sfq_xstats;
struct hlist_bl_node;
struct acpi_dmar_device_scope;
struct hlist_bl_node;
struct nameidata;
struct path;
struct sysfs_dirent;
struct kqid;
struct ifla_vlan_qos_mapping;
struct xfrm_user_expire;
struct xfrm_user_polexpire;
struct socket_wq;
struct va_format;
struct xfrm_usersa_flush;
struct acpi_resource_gpio;
struct pci_ops;
struct dentry_stat_t;
struct xfrm_user_migrate;
struct dma_pinned_list;
struct ip_options;
struct inode;
struct acpi_table_fpdt;
struct dentry_operations;
struct tc_netem_reorder;
struct super_block;
struct rtmsg;
struct net_generic;
struct netns_ipvs;
struct modesel_head;
struct seq_net_private;
struct ifla_vf_mac;
struct super_block;
struct acpi_resource_source;
struct sem_queue;
struct acpi_resource_irq;
struct radix_tree_root;
struct vm86_regs;
struct tcp_congestion_ops;
struct icmpv6msg_mib;
struct inet_connection_sock_af_ops;
struct jbd2_journal_handle;
struct inet_connection_sock;
struct rng_tfm;
struct quota_format_type;
struct ifla_vf_vlan;
struct tc_rsvp_pinfo;
struct kobj_attribute;
struct rt6_info;
struct inet_timewait_death_row;
struct tcp_md5sig_key;
struct cdrom_mechstat_header;
struct inet_timewait_sock;
struct acpi_dmar_rhsa;
struct hrtimer_sleeper;
struct tcphdr;
struct acpi_fde_info;
union tcp_word_hdr;
struct mem_dqinfo;
struct ifla_vf_tx_rate;
struct dma_interleaved_template;
struct tcp_repair_opt;
struct acpi_dmar_pci_path;
struct cdev;
struct tcp_info;
struct rnd_state;
struct tcp_md5sig;
struct tcp_cookie_transactions;
struct tc_red_qopt;
struct tcp_fastopen_cookie;
struct tcp_sack_block_wire;
struct dqstats;
struct ifla_vf_spoofchk;
struct tcp_sack_block;
struct tcp_options_received;
struct pci_bus_region;
struct tcp_cookie_values;
struct tcp_request_sock_ops;
struct tcp_request_sock;
struct ip_options_rcu;
struct tcp_sock;
struct quota_format_ops;
struct crypto_alg;
struct ifla_port_vsi;
struct acpi_fpdt_header;
struct tc_netem_corrupt;
struct tcp_sock_af_ops;
struct rtnexthop;
struct tcp_md5sig_info;
struct sigqueue;
struct ifla_vf_info;
struct inet_peer_base;
struct ldttss_desc64;
struct tcp_timewait_sock;
struct cdrom_msf;
struct icmpv6msg_mib_device;
struct sem_undo;
struct sockaddr_in;
struct mmuext_op;
struct tick_device;
struct revectored_struct;
struct sockaddr_in6;
struct user_struct;
struct kernel_param;
struct netpoll_info;
struct kset;
struct desc_ptr;
struct ipv6_mreq;
struct dn_route;
struct in6_flowlabel_req;
struct aead_tfm;
struct transaction_chp_stats_s;
struct tcf_ematch_tree_hdr;
union nf_inet_addr;
struct nf_hook_ops;
struct mmu_gather;
struct nf_sockopt_ops;
struct flowi;
struct sigpending;
struct timecounter;
struct nf_queue_entry;
struct acpi_grt_info;
struct mmsghdr;
struct nf_afinfo;
struct flowi_common;
struct tcf_walker;
struct gnet_stats_queue;
union flowi_uli;
struct klist_node;
struct pvclock_vsyscall_time_info;
struct mpc_oemtable;
struct pgprot;
struct _ddebug;
struct flowi4;
struct flowi6;
struct pci_dynids;
struct node_active_region;
struct flowidn;
struct address_space;
struct apic;
struct acpi_fpdt_boot;
struct flow_cache_ops;
struct blk_trace;
struct flow_cache_object;
struct tc_netem_gimodel;
struct timer_rand_state;
struct nf_conn;
struct rta_cacheinfo;
struct nlattr;
struct pv_mmu_ops;
struct nfq_ct_hook;
struct xt_table;
struct nfq_ct_nat_hook;
struct transaction_run_stats_s;
struct neighbour;
struct cdrom_ti;
struct ebt_table;
struct perf_event_context;
struct netns_xt;
struct vm86_struct;
struct linux_binprm;
struct acpi_hest_ia_corrected;
struct va_alignment;
struct journal_header_s;
struct dynamic;
struct acpi_bert_region;
struct blkcipher_tfm;
struct neigh_parms;
struct swap_extent;
struct e820entry;
struct softirq_action;
struct tasklet_struct;
struct elf32_rel;
struct kobject;
struct elf64_rel;
struct acpi_gtm_info;
struct elf32_rela;
struct netdev_hw_addr;
struct compat_flock64;
struct elf64_rela;
struct acpi_dmar_reserved_memory;
struct cee_pg;
struct elf64_sym;
struct bgl_lock;
struct pm_qos_constraints;
struct dcb_peer_app_info;
struct elf32_phdr;
struct seq_file;
struct elf64_phdr;
struct compat_statfs;
struct selinux_audit_rule;
struct dcbnl_rtnl_ops;
struct acpi_resource_vendor_typed;
struct bootmem_data;
struct dma_chan_percpu;
struct inet_request_sock;
struct dma_chan;
struct dma_device;
struct hh_cache;
struct perf_event;
union compat_sigval;
struct idr_layer;
struct kobj_ns_type_operations;
struct acpi_fpdt_s3pt_ptr;
struct ablkcipher_alg;
struct attribute;
struct ida;
struct tc_netem_gemodel;
struct xattr_handler;
struct blk_plug;
struct sysfs_ops;
struct tss_struct;
struct dma_page_list;
struct compat_siginfo;
struct kref;
struct cdrom_tochdr;
struct acpi_resource_address32;
struct acpi_table_ibft;
struct vm86plus_info_struct;
struct acpi_ibft_control;
struct netdev_boot_setup;
struct aperfmperf;
struct commit_header;
struct acpi_ibft_initiator;
struct cipher_tfm;
struct dm_dev;
struct gnet_stats_basic;
struct acpi_ibft_target;
struct acpi_table_ivrs;
struct simple_xattrs;
struct acpi_ivrs_header;
struct dvd_lu_send_agid;
struct acpi_table_mchi;
struct acpi_ivrs_hardware;
struct napi_struct;
struct dyn_arch_ftrace;
struct acpi_ivrs_device4;
struct rt0_hdr;
struct acpi_dmar_atsr;
struct acpi_ivrs_device8a;
struct acpi_ivrs_device8b;
struct acpi_ivrs_device8c;
struct acpi_ivrs_memory;
struct IO_APIC_route_entry;
struct setup_header;
struct acpi_table_mcfg;
struct acpi_mcfg_allocation;
struct audit_context;
struct acpi_table_slic;
struct acpi_slic_header;
struct msr_info;
struct acpi_slic_key;
struct Qdisc;
struct inet_cork;
struct pv_init_ops;
struct sys_desc_table;
struct acpi_table_spcr;
struct tc_drr_stats;
struct acpi_table_spmi;
struct acpi_table_tcpa;
struct ata_port_operations;
struct acpi_table_uefi;
struct jbd2_buffer_trigger_type;
struct thread_info;
struct acpi_resource_address64;
struct acpi_table_wdat;
struct acpi_wdat_entry;
struct tcf_proto;
struct vm86plus_struct;
struct cgroupfs_root;
struct irq_desc;
struct cgroup_subsys;
struct cgroup;
struct kmem_cache_order_objects;
struct dm_target;
struct preempt_notifier;
struct ieee1394_device_id;
struct css_id;
struct user_desc;
struct css_set;
struct cgroup_map_cb;
struct cftype;
struct eventfd_ctx;
struct acpi_handle_list;
struct simple_xattr;
struct cftype_set;
struct preempt_ops;
struct dvd_layer;
struct __kernel_sockaddr_storage;
struct cgroup_scanner;
struct cgroup_taskset;
struct cgroup_iter;
struct acpi_csrt_group;
struct shmid_kernel;
struct msg_msg;
struct msg_queue;
struct group_source_req;
struct pv_irq_ops;
struct ethhdr;
struct audit_krule;
struct proto_ops;
struct xfrm_policy;
struct mutex_waiter;
struct compat_ustat;
struct xfrm_state;
struct request_sock;
struct inet_cork_full;
struct security_mnt_opts;
struct security_operations;
struct pv_apic_ops;
struct net_proto_family;
struct mnt_namespace;
struct ipc_namespace;
struct acpi_s3pt_header;
struct scm_creds;
struct scm_fp_list;
struct tc_mqprio_qopt;
struct scm_cookie;
struct sockaddr_nl;
struct ata_port;
struct dst_ops;
struct x86_init_irqs;
struct nlmsghdr;
struct ts_config;
struct nlmsgerr;
struct cdrom_subchnl;
struct acpi_resource_extended_address64;
struct ip_auth_hdr;
struct multicall_entry;
struct ip_esp_hdr;
struct kernel_vm86_regs;
struct ip_comp_hdr;
struct lockdep_map;
struct compat_semid64_ds;
struct ts_state;
struct jbd2_journal_block_tail;
struct ip_beet_phdr;
struct qdisc_walker;
struct in6_pktinfo;
struct dm_table;
struct core_thread;
struct gnet_stats_rate_est;
struct biovec_slab;
struct ip6_mtuinfo;
struct in6_ifreq;
struct dvd_physical;
struct acpi_mpst_power_state;
struct ipv6_rt_hdr;
struct ipv6_opt_hdr;
struct acpi_asf_address;
struct pv_lock_ops;
struct x86_init_mapping;
struct acpi_driver;
struct ts_ops;
struct rt2_hdr;
struct acpi_table_hpet;
struct ipv6_destopt_hao;
struct ipv6hdr;
struct blk_integrity_exchg;
struct ipv6_devconf;
struct udphdr;
struct ipv6_params;
struct raw_spinlock;
struct x86_init_paging;
struct ucred;
struct icmp6hdr;
struct tc_rsvp_gpi;
struct llist_head;
struct icmpv6_echo;
struct ftrace_branch_data;
struct icmpv6_nd_advt;
struct icmpv6_nd_ra;
struct icmp6_filter;
struct ip_mc_socklist;
struct spinlock;
struct x86_init_timers;
struct sk_buff;
struct acpi_object_list;
struct res_counter;
struct tc_sfb_qopt;
struct sock_filter;
struct sock_fprog;
struct ata_link;
struct compat_sock_fprog;
struct blockgroup_lock;
struct sk_filter;
struct compat_sel_arg_struct;
struct pt_regs;
struct poll_table_entry;
struct poll_wqueues;
struct kernel_vm86_struct;
struct msi_desc;
struct jbd2_journal_revoke_header_s;
struct crypto_ahash;
struct mapped_device;
struct core_state;
struct hid_device_id;
struct sg_io_v4;
struct nf_conntrack;
struct fib_table;
struct kparam_string;
struct screen_info;
struct acpi_device;
struct dvd_copyright;
struct proto;
struct _fpstate;
struct netns_ipv4;
struct atomic_notifier_head;
struct x86_cpuinit_ops;
struct udp_sock;
struct llist_node;
struct mpc_intsrc;
struct scatterlist;
struct ipv6_pinfo;
struct acpi_buffer;
struct ieee_maxrate;
struct acpi_cpep_polling;
struct compat_tms;
struct icmpv6_mib_device;
struct ethtool_eeprom;
struct mpc_lintsrc;
struct acpi_s3pt_suspend;
struct tc_sfb_xstats;
struct rta_mfc_stats;
struct inet_hashinfo;
struct ata_queued_cmd;
struct pci_dev;
struct mr_table;
struct cdrom_read;
struct vcpu_info;
struct ccw_device_id;
struct math_emu_info;
struct kparam_array;
struct x86_msi_ops;
struct ifmap;
struct io_event;
union map_info;
struct task_rss_stat;
struct bsg_class_device;
struct dvd_disckey;
struct dma_slave_config;
struct acpi_slic_marker;
struct x86_io_apic_ops;
struct acpi_bus_ops;
struct ubuf_info;
struct inet6_skb_parm;
struct local_apic;
struct neighbour;
struct flock;
struct pid;
struct physid_mask;
struct llist_node;
struct pm_message;
struct dma_pool;
struct debug_obj;
struct wakeup_source;
struct pm_domain_data;
struct rtable;
struct acpi_table_gtdt;
struct compat_rusage;
struct restart_block;
struct edd_device_params;
struct acpi_predefined_names;
struct dev_pm_info;
struct tc_qfq_stats;
struct dev_pm_qos;
struct rtgenmsg;
struct dev_pm_domain;
struct ata_ioports;
struct netns_ipv6;
struct pci_bus;
struct dev_ext_attribute;
union swap_header;
struct cdrom_read_audio;
struct linux_xfrm_mib;
struct vm_area_struct;
struct vm_struct;
struct irq_chip;
struct journal_superblock_s;
struct aead_alg;
struct packet_mreq;
struct rtnl_link_stats;
struct target_type;
struct ap_device_id;
struct gnet_dump;
struct rtnl_link_stats64;
struct iattr;
struct static_key_deferred;
struct rtnl_link_ifmap;
struct nfs4_lock_info;
struct tmem_op;
struct acpi_device_ops;
struct dma_async_tx_descriptor;
struct msr_regs_info;
struct aio_ring_info;
struct module_notes_attrs;
struct bio_vec;
struct real_mode_header;
struct trampoline_header;
struct clocksource;
struct stat;
struct arch_clocksource_data;
struct cdrom_tocentry;
struct futex_pi_state;
struct sighand_struct;
struct cyclecounter;
struct ftrace_event_call;
struct phy_device;
struct msix_entry;
struct notifier_block;
struct compat_ifmap;
struct sockaddr;
struct wireless_dev;
struct net_device_stats;
struct inet_sock;
union IO_APIC_reg_00;
struct acpi_system_info;
struct user_i387_ia32_struct;
struct ethtool_modinfo;
struct xfrm_userpolicy_type;
union IO_APIC_reg_01;
struct disk_part_tbl;
struct netdev_hw_addr_list;
union IO_APIC_reg_02;
struct tc_police;
struct header_ops;
struct kioctx;
union IO_APIC_reg_03;
struct ata_host;
struct ipv6_devconf;
struct page;
struct rt6_statistics;
struct netdev_queue;
struct xfrm_mark;
struct cdrom_multisession;
struct IR_IO_APIC_route_entry;
struct netns_frags;
struct sysv_sem;
struct sigaction;
struct dql;
struct start_info;
struct _fpx_sw_bytes;
struct paravirt_patch_site;
struct text_poke_param;
struct user_regs_struct32;
struct cputime;
struct timerqueue_head;
struct fasync_struct;
struct obs_kernel_param;
struct dm_target_callbacks;
struct msghdr;
struct Qdisc_ops;
struct elevator_queue;
struct file_operations;
struct cmsghdr;
struct dvd_manufact;
struct dma_tx_state;
struct sysinfo;
struct completion;
struct qdisc_skb_cb;
struct ethtool_drvinfo;
struct net_device;
struct user;
struct tcp6_request_sock;
struct acpi_table_srat;
struct compat_timeval;
struct xfrmu_spdhinfo;
struct linger;
struct skb_shared_hwtstamps;
struct __old_kernel_stat;
struct if_settings;
struct robust_list_head;
struct skb_shared_info;
struct __user_cap_header_struct;
struct arch_uprobe;
struct ifreq;
struct compat_if_settings;
struct acpi_mpst_channel;
struct ethtool_value;
struct netns_sctp;
struct ifconf;
struct acpi_connection_info;
struct dst_entry;
struct skb_seq_state;
struct buffer_head;
struct user32_fxsr_struct;
struct ata_device;
struct inet_peer_base;
struct ethtool_cmd;
struct acpi_s3pt_resume;
struct user32;
struct tty_struct;
struct clock_event_device;
struct ethtool_wolinfo;
struct compat_stat;
struct acpi_pmtt_controller;

enum { false_ = 0 , true_ = 1 } ;
enum { DUMP_PREFIX_NONE , DUMP_PREFIX_ADDRESS , DUMP_PREFIX_OFFSET } ;
enum ftrace_dump_mode { DUMP_NONE , DUMP_ALL , DUMP_ORIG , } ;
enum bug_trap_type { BUG_TRAP_TYPE_NONE = 0 , BUG_TRAP_TYPE_WARN = 1 , BUG_TRAP_TYPE_BUG = 2 , } ;
enum { GATE_INTERRUPT = 0xE , GATE_TRAP = 0xF , GATE_CALL = 0xC , GATE_TASK = 0x5 , } ;
enum { DESC_TSS = 0x9 , DESC_LDT = 0x2 , DESCTYPE_S = 0x10 , } ;
enum { PG_LEVEL_NONE , PG_LEVEL_4K , PG_LEVEL_2M , PG_LEVEL_1G , PG_LEVEL_NUM } ;
enum paravirt_lazy_mode { PARAVIRT_LAZY_NONE , PARAVIRT_LAZY_MMU , PARAVIRT_LAZY_CPU , } ;
struct user_desc ;
enum { UNAME26 = 0x0020000 , ADDR_NO_RANDOMIZE = 0x0040000 , FDPIC_FUNCPTRS = 0x0080000 , MMAP_PAGE_ZERO = 0x0100000 , ADDR_COMPAT_LAYOUT = 0x0200000 , READ_IMPLIES_EXEC = 0x0400000 , ADDR_LIMIT_32BIT = 0x0800000 , SHORT_INODE = 0x1000000 , WHOLE_SECONDS = 0x2000000 , STICKY_TIMEOUTS = 0x4000000 , ADDR_LIMIT_3GB = 0x8000000 , } ;
enum { PER_LINUX = 0x0000 , PER_LINUX_32BIT = 0x0000 | ADDR_LIMIT_32BIT , PER_LINUX_FDPIC = 0x0000 | FDPIC_FUNCPTRS , PER_SVR4 = 0x0001 | STICKY_TIMEOUTS | MMAP_PAGE_ZERO , PER_SVR3 = 0x0002 | STICKY_TIMEOUTS | SHORT_INODE , PER_SCOSVR3 = 0x0003 | STICKY_TIMEOUTS | WHOLE_SECONDS | SHORT_INODE , PER_OSR5 = 0x0003 | STICKY_TIMEOUTS | WHOLE_SECONDS , PER_WYSEV386 = 0x0004 | STICKY_TIMEOUTS | SHORT_INODE , PER_ISCR4 = 0x0005 | STICKY_TIMEOUTS , PER_BSD = 0x0006 , PER_SUNOS = 0x0006 | STICKY_TIMEOUTS , PER_XENIX = 0x0007 | STICKY_TIMEOUTS | SHORT_INODE , PER_LINUX32 = 0x0008 , PER_LINUX32_3GB = 0x0008 | ADDR_LIMIT_3GB , PER_IRIX32 = 0x0009 | STICKY_TIMEOUTS , PER_IRIXN32 = 0x000a | STICKY_TIMEOUTS , PER_IRIX64 = 0x000b | STICKY_TIMEOUTS , PER_RISCOS = 0x000c , PER_SOLARIS = 0x000d | STICKY_TIMEOUTS , PER_UW7 = 0x000e | STICKY_TIMEOUTS | MMAP_PAGE_ZERO , PER_OSF4 = 0x000f , PER_HPUX = 0x0010 , PER_MASK = 0x00ff , } ;
enum tlb_infos { ENTRIES , NR_INFO } ;
struct perf_event ;
enum idle_boot_override { IDLE_NO_OVERRIDE = 0 , IDLE_HALT , IDLE_NOMWAIT , IDLE_POLL , IDLE_FORCE_MWAIT } ;
struct dyn_arch_ftrace { } ;
struct lockdep_map ;
struct lock_class_key { } ;
struct tms ;
struct user_namespace ;
enum node_states { N_POSSIBLE , N_ONLINE , N_NORMAL_MEMORY , N_HIGH_MEMORY = N_NORMAL_MEMORY , N_MEMORY = N_HIGH_MEMORY , N_CPU , NR_NODE_STATES } ;
enum pageblock_bits { PB_migrate , PB_migrate_end = PB_migrate + 3 - 1 , PB_migrate_skip , NR_PAGEBLOCK_BITS } ;
enum { MIGRATE_UNMOVABLE , MIGRATE_RECLAIMABLE , MIGRATE_MOVABLE , MIGRATE_PCPTYPES , MIGRATE_RESERVE = MIGRATE_PCPTYPES , MIGRATE_ISOLATE , MIGRATE_TYPES } ;
enum zone_stat_item { NR_FREE_PAGES , NR_LRU_BASE , NR_INACTIVE_ANON = NR_LRU_BASE , NR_ACTIVE_ANON , NR_INACTIVE_FILE , NR_ACTIVE_FILE , NR_UNEVICTABLE , NR_MLOCK , NR_ANON_PAGES , NR_FILE_MAPPED , NR_FILE_PAGES , NR_FILE_DIRTY , NR_WRITEBACK , NR_SLAB_RECLAIMABLE , NR_SLAB_UNRECLAIMABLE , NR_PAGETABLE , NR_KERNEL_STACK , NR_UNSTABLE_NFS , NR_BOUNCE , NR_VMSCAN_WRITE , NR_VMSCAN_IMMEDIATE , NR_WRITEBACK_TEMP , NR_ISOLATED_ANON , NR_ISOLATED_FILE , NR_SHMEM , NR_DIRTIED , NR_WRITTEN , NUMA_HIT , NUMA_MISS , NUMA_FOREIGN , NUMA_INTERLEAVE_HIT , NUMA_LOCAL , NUMA_OTHER , NR_ANON_TRANSPARENT_HUGEPAGES , NR_FREE_CMA_PAGES , NR_VM_ZONE_STAT_ITEMS } ;
enum lru_list { LRU_INACTIVE_ANON = 0 , LRU_ACTIVE_ANON = 0 + 1 , LRU_INACTIVE_FILE = 0 + 2 , LRU_ACTIVE_FILE = 0 + 2 + 1 , LRU_UNEVICTABLE , NR_LRU_LISTS } ;
enum zone_watermarks { WMARK_MIN , WMARK_LOW , WMARK_HIGH , NR_WMARK } ;
enum zone_type { ZONE_DMA , ZONE_DMA32 , ZONE_NORMAL , ZONE_MOVABLE , __MAX_NR_ZONES } ;
struct bootmem_data ;
enum debug_obj_state { ODEBUG_STATE_NONE , ODEBUG_STATE_INIT , ODEBUG_STATE_INACTIVE , ODEBUG_STATE_ACTIVE , ODEBUG_STATE_DESTROYED , ODEBUG_STATE_NOTAVAILABLE , ODEBUG_STATE_MAX , } ;
struct tvec_base ;
struct workqueue_struct ;
enum { WORK_STRUCT_PENDING_BIT = 0 , WORK_STRUCT_DELAYED_BIT = 1 , WORK_STRUCT_CWQ_BIT = 2 , WORK_STRUCT_LINKED_BIT = 3 , WORK_STRUCT_COLOR_SHIFT = 4 , WORK_STRUCT_COLOR_BITS = 4 , WORK_STRUCT_PENDING = 1 << WORK_STRUCT_PENDING_BIT , WORK_STRUCT_DELAYED = 1 << WORK_STRUCT_DELAYED_BIT , WORK_STRUCT_CWQ = 1 << WORK_STRUCT_CWQ_BIT , WORK_STRUCT_LINKED = 1 << WORK_STRUCT_LINKED_BIT , WORK_STRUCT_STATIC = 0 , WORK_NR_COLORS = ( 1 << WORK_STRUCT_COLOR_BITS ) - 1 , WORK_NO_COLOR = WORK_NR_COLORS , WORK_CPU_UNBOUND = 256 , WORK_CPU_NONE = 256 + 1 , WORK_CPU_LAST = WORK_CPU_NONE , WORK_STRUCT_FLAG_BITS = WORK_STRUCT_COLOR_SHIFT + WORK_STRUCT_COLOR_BITS , WORK_OFFQ_FLAG_BASE = WORK_STRUCT_FLAG_BITS , WORK_OFFQ_CANCELING = ( 1 << WORK_OFFQ_FLAG_BASE ) , WORK_OFFQ_FLAG_BITS = 1 , WORK_OFFQ_CPU_SHIFT = WORK_OFFQ_FLAG_BASE + WORK_OFFQ_FLAG_BITS , WORK_STRUCT_FLAG_MASK = ( 1UL << WORK_STRUCT_FLAG_BITS ) - 1 , WORK_STRUCT_WQ_DATA_MASK = ~ WORK_STRUCT_FLAG_MASK , WORK_STRUCT_NO_CPU = ( unsigned long ) WORK_CPU_NONE << WORK_OFFQ_CPU_SHIFT , WORK_BUSY_PENDING = 1 << 0 , WORK_BUSY_RUNNING = 1 << 1 , } ;
enum { WQ_NON_REENTRANT = 1 << 0 , WQ_UNBOUND = 1 << 1 , WQ_FREEZABLE = 1 << 2 , WQ_MEM_RECLAIM = 1 << 3 , WQ_HIGHPRI = 1 << 4 , WQ_CPU_INTENSIVE = 1 << 5 , WQ_DRAINING = 1 << 6 , WQ_RESCUER = 1 << 7 , WQ_MAX_ACTIVE = 512 , WQ_MAX_UNBOUND_PER_CPU = 4 , WQ_DFL_ACTIVE = WQ_MAX_ACTIVE / 2 , } ;
struct memory_block ;
enum { MEMORY_HOTPLUG_MIN_BOOTMEM_TYPE = 12 , SECTION_INFO = MEMORY_HOTPLUG_MIN_BOOTMEM_TYPE , MIX_SECTION_INFO , NODE_INFO , MEMORY_HOTPLUG_MAX_BOOTMEM_TYPE = NODE_INFO , } ;
enum { ONLINE_KEEP , ONLINE_KERNEL , ONLINE_MOVABLE , } ;
enum memmap_context { MEMMAP_EARLY , MEMMAP_HOTPLUG , } ;
enum mp_irq_source_types { mp_INT = 0 , mp_NMI = 1 , mp_SMI = 2 , mp_ExtINT = 3 } ;
enum mp_bustype { MP_BUS_ISA = 1 , MP_BUS_EISA , MP_BUS_PCI , } ;
enum { X86_SUBARCH_PC = 0 , X86_SUBARCH_LGUEST , X86_SUBARCH_XEN , X86_SUBARCH_MRST , X86_SUBARCH_CE4100 , X86_NR_SUBARCHS , } ;
enum ioapic_irq_destination_types { dest_Fixed = 0 , dest_LowestPrio = 1 , dest_SMI = 2 , dest__reserved_1 = 3 , dest_NMI = 4 , dest_INIT = 5 , dest__reserved_2 = 6 , dest_ExtINT = 7 } ;
enum rpm_status { RPM_ACTIVE = 0 , RPM_RESUMING , RPM_SUSPENDED , RPM_SUSPENDING , } ;
enum rpm_request { RPM_REQ_NONE = 0 , RPM_REQ_IDLE , RPM_REQ_SUSPEND , RPM_REQ_AUTOSUSPEND , RPM_REQ_RESUME , } ;
enum dpm_order { DPM_ORDER_NONE , DPM_ORDER_DEV_AFTER_PARENT , DPM_ORDER_PARENT_BEFORE_DEV , DPM_ORDER_DEV_LAST , } ;
enum xen_domain_type { XEN_NATIVE , XEN_PV_DOMAIN , XEN_HVM_DOMAIN , } ;
enum vsyscall_num { __NR_vgettimeofday , __NR_vtime , __NR_vgetcpu , } ;
struct page_cgroup ;
enum pcpu_fc { PCPU_FC_AUTO , PCPU_FC_EMBED , PCPU_FC_PAGE , PCPU_FC_NR , } ;
enum { CTL_KERN = 1 , CTL_VM = 2 , CTL_NET = 3 , CTL_PROC = 4 , CTL_FS = 5 , CTL_DEBUG = 6 , CTL_DEV = 7 , CTL_BUS = 8 , CTL_ABI = 9 , CTL_CPU = 10 , CTL_ARLAN = 254 , CTL_S390DBF = 5677 , CTL_SUNRPC = 7249 , CTL_PM = 9899 , CTL_FRV = 9898 , } ;
enum { CTL_BUS_ISA = 1 } ;
enum { INOTIFY_MAX_USER_INSTANCES = 1 , INOTIFY_MAX_USER_WATCHES = 2 , INOTIFY_MAX_QUEUED_EVENTS = 3 } ;
enum { KERN_OSTYPE = 1 , KERN_OSRELEASE = 2 , KERN_OSREV = 3 , KERN_VERSION = 4 , KERN_SECUREMASK = 5 , KERN_PROF = 6 , KERN_NODENAME = 7 , KERN_DOMAINNAME = 8 , KERN_PANIC = 15 , KERN_REALROOTDEV = 16 , KERN_SPARC_REBOOT = 21 , KERN_CTLALTDEL = 22 , KERN_PRINTK = 23 , KERN_NAMETRANS = 24 , KERN_PPC_HTABRECLAIM = 25 , KERN_PPC_ZEROPAGED = 26 , KERN_PPC_POWERSAVE_NAP = 27 , KERN_MODPROBE = 28 , KERN_SG_BIG_BUFF = 29 , KERN_ACCT = 30 , KERN_PPC_L2CR = 31 , KERN_RTSIGNR = 32 , KERN_RTSIGMAX = 33 , KERN_SHMMAX = 34 , KERN_MSGMAX = 35 , KERN_MSGMNB = 36 , KERN_MSGPOOL = 37 , KERN_SYSRQ = 38 , KERN_MAX_THREADS = 39 , KERN_RANDOM = 40 , KERN_SHMALL = 41 , KERN_MSGMNI = 42 , KERN_SEM = 43 , KERN_SPARC_STOP_A = 44 , KERN_SHMMNI = 45 , KERN_OVERFLOWUID = 46 , KERN_OVERFLOWGID = 47 , KERN_SHMPATH = 48 , KERN_HOTPLUG = 49 , KERN_IEEE_EMULATION_WARNINGS = 50 , KERN_S390_USER_DEBUG_LOGGING = 51 , KERN_CORE_USES_PID = 52 , KERN_TAINTED = 53 , KERN_CADPID = 54 , KERN_PIDMAX = 55 , KERN_CORE_PATTERN = 56 , KERN_PANIC_ON_OOPS = 57 , KERN_HPPA_PWRSW = 58 , KERN_HPPA_UNALIGNED = 59 , KERN_PRINTK_RATELIMIT = 60 , KERN_PRINTK_RATELIMIT_BURST = 61 , KERN_PTY = 62 , KERN_NGROUPS_MAX = 63 , KERN_SPARC_SCONS_PWROFF = 64 , KERN_HZ_TIMER = 65 , KERN_UNKNOWN_NMI_PANIC = 66 , KERN_BOOTLOADER_TYPE = 67 , KERN_RANDOMIZE = 68 , KERN_SETUID_DUMPABLE = 69 , KERN_SPIN_RETRY = 70 , KERN_ACPI_VIDEO_FLAGS = 71 , KERN_IA64_UNALIGNED = 72 , KERN_COMPAT_LOG = 73 , KERN_MAX_LOCK_DEPTH = 74 , KERN_NMI_WATCHDOG = 75 , KERN_PANIC_ON_NMI = 76 , } ;
enum { VM_UNUSED1 = 1 , VM_UNUSED2 = 2 , VM_UNUSED3 = 3 , VM_UNUSED4 = 4 , VM_OVERCOMMIT_MEMORY = 5 , VM_UNUSED5 = 6 , VM_UNUSED7 = 7 , VM_UNUSED8 = 8 , VM_UNUSED9 = 9 , VM_PAGE_CLUSTER = 10 , VM_DIRTY_BACKGROUND = 11 , VM_DIRTY_RATIO = 12 , VM_DIRTY_WB_CS = 13 , VM_DIRTY_EXPIRE_CS = 14 , VM_NR_PDFLUSH_THREADS = 15 , VM_OVERCOMMIT_RATIO = 16 , VM_PAGEBUF = 17 , VM_HUGETLB_PAGES = 18 , VM_SWAPPINESS = 19 , VM_LOWMEM_RESERVE_RATIO = 20 , VM_MIN_FREE_KBYTES = 21 , VM_MAX_MAP_COUNT = 22 , VM_LAPTOP_MODE = 23 , VM_BLOCK_DUMP = 24 , VM_HUGETLB_GROUP = 25 , VM_VFS_CACHE_PRESSURE = 26 , VM_LEGACY_VA_LAYOUT = 27 , VM_SWAP_TOKEN_TIMEOUT = 28 , VM_DROP_PAGECACHE = 29 , VM_PERCPU_PAGELIST_FRACTION = 30 , VM_ZONE_RECLAIM_MODE = 31 , VM_MIN_UNMAPPED = 32 , VM_PANIC_ON_OOM = 33 , VM_VDSO_ENABLED = 34 , VM_MIN_SLAB = 35 , } ;
enum { NET_CORE = 1 , NET_ETHER = 2 , NET_802 = 3 , NET_UNIX = 4 , NET_IPV4 = 5 , NET_IPX = 6 , NET_ATALK = 7 , NET_NETROM = 8 , NET_AX25 = 9 , NET_BRIDGE = 10 , NET_ROSE = 11 , NET_IPV6 = 12 , NET_X25 = 13 , NET_TR = 14 , NET_DECNET = 15 , NET_ECONET = 16 , NET_SCTP = 17 , NET_LLC = 18 , NET_NETFILTER = 19 , NET_DCCP = 20 , NET_IRDA = 412 , } ;
enum { RANDOM_POOLSIZE = 1 , RANDOM_ENTROPY_COUNT = 2 , RANDOM_READ_THRESH = 3 , RANDOM_WRITE_THRESH = 4 , RANDOM_BOOT_ID = 5 , RANDOM_UUID = 6 } ;
enum { PTY_MAX = 1 , PTY_NR = 2 } ;
enum { BUS_ISA_MEM_BASE = 1 , BUS_ISA_PORT_BASE = 2 , BUS_ISA_PORT_SHIFT = 3 } ;
enum { NET_CORE_WMEM_MAX = 1 , NET_CORE_RMEM_MAX = 2 , NET_CORE_WMEM_DEFAULT = 3 , NET_CORE_RMEM_DEFAULT = 4 , NET_CORE_MAX_BACKLOG = 6 , NET_CORE_FASTROUTE = 7 , NET_CORE_MSG_COST = 8 , NET_CORE_MSG_BURST = 9 , NET_CORE_OPTMEM_MAX = 10 , NET_CORE_HOT_LIST_LENGTH = 11 , NET_CORE_DIVERT_VERSION = 12 , NET_CORE_NO_CONG_THRESH = 13 , NET_CORE_NO_CONG = 14 , NET_CORE_LO_CONG = 15 , NET_CORE_MOD_CONG = 16 , NET_CORE_DEV_WEIGHT = 17 , NET_CORE_SOMAXCONN = 18 , NET_CORE_BUDGET = 19 , NET_CORE_AEVENT_ETIME = 20 , NET_CORE_AEVENT_RSEQTH = 21 , NET_CORE_WARNINGS = 22 , } ;
enum { NET_UNIX_DESTROY_DELAY = 1 , NET_UNIX_DELETE_DELAY = 2 , NET_UNIX_MAX_DGRAM_QLEN = 3 , } ;
enum { NET_NF_CONNTRACK_MAX = 1 , NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT = 2 , NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV = 3 , NET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED = 4 , NET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT = 5 , NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT = 6 , NET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK = 7 , NET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT = 8 , NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE = 9 , NET_NF_CONNTRACK_UDP_TIMEOUT = 10 , NET_NF_CONNTRACK_UDP_TIMEOUT_STREAM = 11 , NET_NF_CONNTRACK_ICMP_TIMEOUT = 12 , NET_NF_CONNTRACK_GENERIC_TIMEOUT = 13 , NET_NF_CONNTRACK_BUCKETS = 14 , NET_NF_CONNTRACK_LOG_INVALID = 15 , NET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS = 16 , NET_NF_CONNTRACK_TCP_LOOSE = 17 , NET_NF_CONNTRACK_TCP_BE_LIBERAL = 18 , NET_NF_CONNTRACK_TCP_MAX_RETRANS = 19 , NET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED = 20 , NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT = 21 , NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED = 22 , NET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED = 23 , NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT = 24 , NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD = 25 , NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT = 26 , NET_NF_CONNTRACK_COUNT = 27 , NET_NF_CONNTRACK_ICMPV6_TIMEOUT = 28 , NET_NF_CONNTRACK_FRAG6_TIMEOUT = 29 , NET_NF_CONNTRACK_FRAG6_LOW_THRESH = 30 , NET_NF_CONNTRACK_FRAG6_HIGH_THRESH = 31 , NET_NF_CONNTRACK_CHECKSUM = 32 , } ;
enum { NET_IPV4_FORWARD = 8 , NET_IPV4_DYNADDR = 9 , NET_IPV4_CONF = 16 , NET_IPV4_NEIGH = 17 , NET_IPV4_ROUTE = 18 , NET_IPV4_FIB_HASH = 19 , NET_IPV4_NETFILTER = 20 , NET_IPV4_TCP_TIMESTAMPS = 33 , NET_IPV4_TCP_WINDOW_SCALING = 34 , NET_IPV4_TCP_SACK = 35 , NET_IPV4_TCP_RETRANS_COLLAPSE = 36 , NET_IPV4_DEFAULT_TTL = 37 , NET_IPV4_AUTOCONFIG = 38 , NET_IPV4_NO_PMTU_DISC = 39 , NET_IPV4_TCP_SYN_RETRIES = 40 , NET_IPV4_IPFRAG_HIGH_THRESH = 41 , NET_IPV4_IPFRAG_LOW_THRESH = 42 , NET_IPV4_IPFRAG_TIME = 43 , NET_IPV4_TCP_MAX_KA_PROBES = 44 , NET_IPV4_TCP_KEEPALIVE_TIME = 45 , NET_IPV4_TCP_KEEPALIVE_PROBES = 46 , NET_IPV4_TCP_RETRIES1 = 47 , NET_IPV4_TCP_RETRIES2 = 48 , NET_IPV4_TCP_FIN_TIMEOUT = 49 , NET_IPV4_IP_MASQ_DEBUG = 50 , NET_TCP_SYNCOOKIES = 51 , NET_TCP_STDURG = 52 , NET_TCP_RFC1337 = 53 , NET_TCP_SYN_TAILDROP = 54 , NET_TCP_MAX_SYN_BACKLOG = 55 , NET_IPV4_LOCAL_PORT_RANGE = 56 , NET_IPV4_ICMP_ECHO_IGNORE_ALL = 57 , NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS = 58 , NET_IPV4_ICMP_SOURCEQUENCH_RATE = 59 , NET_IPV4_ICMP_DESTUNREACH_RATE = 60 , NET_IPV4_ICMP_TIMEEXCEED_RATE = 61 , NET_IPV4_ICMP_PARAMPROB_RATE = 62 , NET_IPV4_ICMP_ECHOREPLY_RATE = 63 , NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES = 64 , NET_IPV4_IGMP_MAX_MEMBERSHIPS = 65 , NET_TCP_TW_RECYCLE = 66 , NET_IPV4_ALWAYS_DEFRAG = 67 , NET_IPV4_TCP_KEEPALIVE_INTVL = 68 , NET_IPV4_INET_PEER_THRESHOLD = 69 , NET_IPV4_INET_PEER_MINTTL = 70 , NET_IPV4_INET_PEER_MAXTTL = 71 , NET_IPV4_INET_PEER_GC_MINTIME = 72 , NET_IPV4_INET_PEER_GC_MAXTIME = 73 , NET_TCP_ORPHAN_RETRIES = 74 , NET_TCP_ABORT_ON_OVERFLOW = 75 , NET_TCP_SYNACK_RETRIES = 76 , NET_TCP_MAX_ORPHANS = 77 , NET_TCP_MAX_TW_BUCKETS = 78 , NET_TCP_FACK = 79 , NET_TCP_REORDERING = 80 , NET_TCP_ECN = 81 , NET_TCP_DSACK = 82 , NET_TCP_MEM = 83 , NET_TCP_WMEM = 84 , NET_TCP_RMEM = 85 , NET_TCP_APP_WIN = 86 , NET_TCP_ADV_WIN_SCALE = 87 , NET_IPV4_NONLOCAL_BIND = 88 , NET_IPV4_ICMP_RATELIMIT = 89 , NET_IPV4_ICMP_RATEMASK = 90 , NET_TCP_TW_REUSE = 91 , NET_TCP_FRTO = 92 , NET_TCP_LOW_LATENCY = 93 , NET_IPV4_IPFRAG_SECRET_INTERVAL = 94 , NET_IPV4_IGMP_MAX_MSF = 96 , NET_TCP_NO_METRICS_SAVE = 97 , NET_TCP_DEFAULT_WIN_SCALE = 105 , NET_TCP_MODERATE_RCVBUF = 106 , NET_TCP_TSO_WIN_DIVISOR = 107 , NET_TCP_BIC_BETA = 108 , NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR = 109 , NET_TCP_CONG_CONTROL = 110 , NET_TCP_ABC = 111 , NET_IPV4_IPFRAG_MAX_DIST = 112 , NET_TCP_MTU_PROBING = 113 , NET_TCP_BASE_MSS = 114 , NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS = 115 , NET_TCP_DMA_COPYBREAK = 116 , NET_TCP_SLOW_START_AFTER_IDLE = 117 , NET_CIPSOV4_CACHE_ENABLE = 118 , NET_CIPSOV4_CACHE_BUCKET_SIZE = 119 , NET_CIPSOV4_RBM_OPTFMT = 120 , NET_CIPSOV4_RBM_STRICTVALID = 121 , NET_TCP_AVAIL_CONG_CONTROL = 122 , NET_TCP_ALLOWED_CONG_CONTROL = 123 , NET_TCP_MAX_SSTHRESH = 124 , NET_TCP_FRTO_RESPONSE = 125 , } ;
enum { NET_IPV4_ROUTE_FLUSH = 1 , NET_IPV4_ROUTE_MIN_DELAY = 2 , NET_IPV4_ROUTE_MAX_DELAY = 3 , NET_IPV4_ROUTE_GC_THRESH = 4 , NET_IPV4_ROUTE_MAX_SIZE = 5 , NET_IPV4_ROUTE_GC_MIN_INTERVAL = 6 , NET_IPV4_ROUTE_GC_TIMEOUT = 7 , NET_IPV4_ROUTE_GC_INTERVAL = 8 , NET_IPV4_ROUTE_REDIRECT_LOAD = 9 , NET_IPV4_ROUTE_REDIRECT_NUMBER = 10 , NET_IPV4_ROUTE_REDIRECT_SILENCE = 11 , NET_IPV4_ROUTE_ERROR_COST = 12 , NET_IPV4_ROUTE_ERROR_BURST = 13 , NET_IPV4_ROUTE_GC_ELASTICITY = 14 , NET_IPV4_ROUTE_MTU_EXPIRES = 15 , NET_IPV4_ROUTE_MIN_PMTU = 16 , NET_IPV4_ROUTE_MIN_ADVMSS = 17 , NET_IPV4_ROUTE_SECRET_INTERVAL = 18 , NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS = 19 , } ;
enum { NET_PROTO_CONF_ALL = - 2 , NET_PROTO_CONF_DEFAULT = - 3 } ;
enum { NET_IPV4_CONF_FORWARDING = 1 , NET_IPV4_CONF_MC_FORWARDING = 2 , NET_IPV4_CONF_PROXY_ARP = 3 , NET_IPV4_CONF_ACCEPT_REDIRECTS = 4 , NET_IPV4_CONF_SECURE_REDIRECTS = 5 , NET_IPV4_CONF_SEND_REDIRECTS = 6 , NET_IPV4_CONF_SHARED_MEDIA = 7 , NET_IPV4_CONF_RP_FILTER = 8 , NET_IPV4_CONF_ACCEPT_SOURCE_ROUTE = 9 , NET_IPV4_CONF_BOOTP_RELAY = 10 , NET_IPV4_CONF_LOG_MARTIANS = 11 , NET_IPV4_CONF_TAG = 12 , NET_IPV4_CONF_ARPFILTER = 13 , NET_IPV4_CONF_MEDIUM_ID = 14 , NET_IPV4_CONF_NOXFRM = 15 , NET_IPV4_CONF_NOPOLICY = 16 , NET_IPV4_CONF_FORCE_IGMP_VERSION = 17 , NET_IPV4_CONF_ARP_ANNOUNCE = 18 , NET_IPV4_CONF_ARP_IGNORE = 19 , NET_IPV4_CONF_PROMOTE_SECONDARIES = 20 , NET_IPV4_CONF_ARP_ACCEPT = 21 , NET_IPV4_CONF_ARP_NOTIFY = 22 , } ;
enum { NET_IPV4_NF_CONNTRACK_MAX = 1 , NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT = 2 , NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV = 3 , NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED = 4 , NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT = 5 , NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT = 6 , NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK = 7 , NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT = 8 , NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE = 9 , NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT = 10 , NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM = 11 , NET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT = 12 , NET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT = 13 , NET_IPV4_NF_CONNTRACK_BUCKETS = 14 , NET_IPV4_NF_CONNTRACK_LOG_INVALID = 15 , NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS = 16 , NET_IPV4_NF_CONNTRACK_TCP_LOOSE = 17 , NET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL = 18 , NET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS = 19 , NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED = 20 , NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT = 21 , NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED = 22 , NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED = 23 , NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT = 24 , NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD = 25 , NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT = 26 , NET_IPV4_NF_CONNTRACK_COUNT = 27 , NET_IPV4_NF_CONNTRACK_CHECKSUM = 28 , } ;
enum { NET_IPV6_CONF = 16 , NET_IPV6_NEIGH = 17 , NET_IPV6_ROUTE = 18 , NET_IPV6_ICMP = 19 , NET_IPV6_BINDV6ONLY = 20 , NET_IPV6_IP6FRAG_HIGH_THRESH = 21 , NET_IPV6_IP6FRAG_LOW_THRESH = 22 , NET_IPV6_IP6FRAG_TIME = 23 , NET_IPV6_IP6FRAG_SECRET_INTERVAL = 24 , NET_IPV6_MLD_MAX_MSF = 25 , } ;
enum { NET_IPV6_ROUTE_FLUSH = 1 , NET_IPV6_ROUTE_GC_THRESH = 2 , NET_IPV6_ROUTE_MAX_SIZE = 3 , NET_IPV6_ROUTE_GC_MIN_INTERVAL = 4 , NET_IPV6_ROUTE_GC_TIMEOUT = 5 , NET_IPV6_ROUTE_GC_INTERVAL = 6 , NET_IPV6_ROUTE_GC_ELASTICITY = 7 , NET_IPV6_ROUTE_MTU_EXPIRES = 8 , NET_IPV6_ROUTE_MIN_ADVMSS = 9 , NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS = 10 } ;
enum { NET_IPV6_FORWARDING = 1 , NET_IPV6_HOP_LIMIT = 2 , NET_IPV6_MTU = 3 , NET_IPV6_ACCEPT_RA = 4 , NET_IPV6_ACCEPT_REDIRECTS = 5 , NET_IPV6_AUTOCONF = 6 , NET_IPV6_DAD_TRANSMITS = 7 , NET_IPV6_RTR_SOLICITS = 8 , NET_IPV6_RTR_SOLICIT_INTERVAL = 9 , NET_IPV6_RTR_SOLICIT_DELAY = 10 , NET_IPV6_USE_TEMPADDR = 11 , NET_IPV6_TEMP_VALID_LFT = 12 , NET_IPV6_TEMP_PREFERED_LFT = 13 , NET_IPV6_REGEN_MAX_RETRY = 14 , NET_IPV6_MAX_DESYNC_FACTOR = 15 , NET_IPV6_MAX_ADDRESSES = 16 , NET_IPV6_FORCE_MLD_VERSION = 17 , NET_IPV6_ACCEPT_RA_DEFRTR = 18 , NET_IPV6_ACCEPT_RA_PINFO = 19 , NET_IPV6_ACCEPT_RA_RTR_PREF = 20 , NET_IPV6_RTR_PROBE_INTERVAL = 21 , NET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN = 22 , NET_IPV6_PROXY_NDP = 23 , NET_IPV6_ACCEPT_SOURCE_ROUTE = 25 , __NET_IPV6_MAX } ;
enum { NET_IPV6_ICMP_RATELIMIT = 1 } ;
enum { NET_NEIGH_MCAST_SOLICIT = 1 , NET_NEIGH_UCAST_SOLICIT = 2 , NET_NEIGH_APP_SOLICIT = 3 , NET_NEIGH_RETRANS_TIME = 4 , NET_NEIGH_REACHABLE_TIME = 5 , NET_NEIGH_DELAY_PROBE_TIME = 6 , NET_NEIGH_GC_STALE_TIME = 7 , NET_NEIGH_UNRES_QLEN = 8 , NET_NEIGH_PROXY_QLEN = 9 , NET_NEIGH_ANYCAST_DELAY = 10 , NET_NEIGH_PROXY_DELAY = 11 , NET_NEIGH_LOCKTIME = 12 , NET_NEIGH_GC_INTERVAL = 13 , NET_NEIGH_GC_THRESH1 = 14 , NET_NEIGH_GC_THRESH2 = 15 , NET_NEIGH_GC_THRESH3 = 16 , NET_NEIGH_RETRANS_TIME_MS = 17 , NET_NEIGH_REACHABLE_TIME_MS = 18 , } ;
enum { NET_DCCP_DEFAULT = 1 , } ;
enum { NET_IPX_PPROP_BROADCASTING = 1 , NET_IPX_FORWARDING = 2 } ;
enum { NET_LLC2 = 1 , NET_LLC_STATION = 2 , } ;
enum { NET_LLC2_TIMEOUT = 1 , } ;
enum { NET_LLC_STATION_ACK_TIMEOUT = 1 , } ;
enum { NET_LLC2_ACK_TIMEOUT = 1 , NET_LLC2_P_TIMEOUT = 2 , NET_LLC2_REJ_TIMEOUT = 3 , NET_LLC2_BUSY_TIMEOUT = 4 , } ;
enum { NET_ATALK_AARP_EXPIRY_TIME = 1 , NET_ATALK_AARP_TICK_TIME = 2 , NET_ATALK_AARP_RETRANSMIT_LIMIT = 3 , NET_ATALK_AARP_RESOLVE_TIME = 4 } ;
enum { NET_NETROM_DEFAULT_PATH_QUALITY = 1 , NET_NETROM_OBSOLESCENCE_COUNT_INITIALISER = 2 , NET_NETROM_NETWORK_TTL_INITIALISER = 3 , NET_NETROM_TRANSPORT_TIMEOUT = 4 , NET_NETROM_TRANSPORT_MAXIMUM_TRIES = 5 , NET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY = 6 , NET_NETROM_TRANSPORT_BUSY_DELAY = 7 , NET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE = 8 , NET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT = 9 , NET_NETROM_ROUTING_CONTROL = 10 , NET_NETROM_LINK_FAILS_COUNT = 11 , NET_NETROM_RESET = 12 } ;
enum { NET_AX25_IP_DEFAULT_MODE = 1 , NET_AX25_DEFAULT_MODE = 2 , NET_AX25_BACKOFF_TYPE = 3 , NET_AX25_CONNECT_MODE = 4 , NET_AX25_STANDARD_WINDOW = 5 , NET_AX25_EXTENDED_WINDOW = 6 , NET_AX25_T1_TIMEOUT = 7 , NET_AX25_T2_TIMEOUT = 8 , NET_AX25_T3_TIMEOUT = 9 , NET_AX25_IDLE_TIMEOUT = 10 , NET_AX25_N2 = 11 , NET_AX25_PACLEN = 12 , NET_AX25_PROTOCOL = 13 , NET_AX25_DAMA_SLAVE_TIMEOUT = 14 } ;
enum { NET_ROSE_RESTART_REQUEST_TIMEOUT = 1 , NET_ROSE_CALL_REQUEST_TIMEOUT = 2 , NET_ROSE_RESET_REQUEST_TIMEOUT = 3 , NET_ROSE_CLEAR_REQUEST_TIMEOUT = 4 , NET_ROSE_ACK_HOLD_BACK_TIMEOUT = 5 , NET_ROSE_ROUTING_CONTROL = 6 , NET_ROSE_LINK_FAIL_TIMEOUT = 7 , NET_ROSE_MAX_VCS = 8 , NET_ROSE_WINDOW_SIZE = 9 , NET_ROSE_NO_ACTIVITY_TIMEOUT = 10 } ;
enum { NET_X25_RESTART_REQUEST_TIMEOUT = 1 , NET_X25_CALL_REQUEST_TIMEOUT = 2 , NET_X25_RESET_REQUEST_TIMEOUT = 3 , NET_X25_CLEAR_REQUEST_TIMEOUT = 4 , NET_X25_ACK_HOLD_BACK_TIMEOUT = 5 , NET_X25_FORWARD = 6 } ;
enum { NET_TR_RIF_TIMEOUT = 1 } ;
enum { NET_DECNET_NODE_TYPE = 1 , NET_DECNET_NODE_ADDRESS = 2 , NET_DECNET_NODE_NAME = 3 , NET_DECNET_DEFAULT_DEVICE = 4 , NET_DECNET_TIME_WAIT = 5 , NET_DECNET_DN_COUNT = 6 , NET_DECNET_DI_COUNT = 7 , NET_DECNET_DR_COUNT = 8 , NET_DECNET_DST_GC_INTERVAL = 9 , NET_DECNET_CONF = 10 , NET_DECNET_NO_FC_MAX_CWND = 11 , NET_DECNET_MEM = 12 , NET_DECNET_RMEM = 13 , NET_DECNET_WMEM = 14 , NET_DECNET_DEBUG_LEVEL = 255 } ;
enum { NET_DECNET_CONF_LOOPBACK = - 2 , NET_DECNET_CONF_DDCMP = - 3 , NET_DECNET_CONF_PPP = - 4 , NET_DECNET_CONF_X25 = - 5 , NET_DECNET_CONF_GRE = - 6 , NET_DECNET_CONF_ETHER = - 7 } ;
enum { NET_DECNET_CONF_DEV_PRIORITY = 1 , NET_DECNET_CONF_DEV_T1 = 2 , NET_DECNET_CONF_DEV_T2 = 3 , NET_DECNET_CONF_DEV_T3 = 4 , NET_DECNET_CONF_DEV_FORWARDING = 5 , NET_DECNET_CONF_DEV_BLKSIZE = 6 , NET_DECNET_CONF_DEV_STATE = 7 } ;
enum { NET_SCTP_RTO_INITIAL = 1 , NET_SCTP_RTO_MIN = 2 , NET_SCTP_RTO_MAX = 3 , NET_SCTP_RTO_ALPHA = 4 , NET_SCTP_RTO_BETA = 5 , NET_SCTP_VALID_COOKIE_LIFE = 6 , NET_SCTP_ASSOCIATION_MAX_RETRANS = 7 , NET_SCTP_PATH_MAX_RETRANS = 8 , NET_SCTP_MAX_INIT_RETRANSMITS = 9 , NET_SCTP_HB_INTERVAL = 10 , NET_SCTP_PRESERVE_ENABLE = 11 , NET_SCTP_MAX_BURST = 12 , NET_SCTP_ADDIP_ENABLE = 13 , NET_SCTP_PRSCTP_ENABLE = 14 , NET_SCTP_SNDBUF_POLICY = 15 , NET_SCTP_SACK_TIMEOUT = 16 , NET_SCTP_RCVBUF_POLICY = 17 , } ;
enum { NET_BRIDGE_NF_CALL_ARPTABLES = 1 , NET_BRIDGE_NF_CALL_IPTABLES = 2 , NET_BRIDGE_NF_CALL_IP6TABLES = 3 , NET_BRIDGE_NF_FILTER_VLAN_TAGGED = 4 , NET_BRIDGE_NF_FILTER_PPPOE_TAGGED = 5 , } ;
enum { NET_IRDA_DISCOVERY = 1 , NET_IRDA_DEVNAME = 2 , NET_IRDA_DEBUG = 3 , NET_IRDA_FAST_POLL = 4 , NET_IRDA_DISCOVERY_SLOTS = 5 , NET_IRDA_DISCOVERY_TIMEOUT = 6 , NET_IRDA_SLOT_TIMEOUT = 7 , NET_IRDA_MAX_BAUD_RATE = 8 , NET_IRDA_MIN_TX_TURN_TIME = 9 , NET_IRDA_MAX_TX_DATA_SIZE = 10 , NET_IRDA_MAX_TX_WINDOW = 11 , NET_IRDA_MAX_NOREPLY_TIME = 12 , NET_IRDA_WARN_NOREPLY_TIME = 13 , NET_IRDA_LAP_KEEPALIVE_TIME = 14 , } ;
enum { FS_NRINODE = 1 , FS_STATINODE = 2 , FS_MAXINODE = 3 , FS_NRDQUOT = 4 , FS_MAXDQUOT = 5 , FS_NRFILE = 6 , FS_MAXFILE = 7 , FS_DENTRY = 8 , FS_NRSUPER = 9 , FS_MAXSUPER = 10 , FS_OVERFLOWUID = 11 , FS_OVERFLOWGID = 12 , FS_LEASES = 13 , FS_DIR_NOTIFY = 14 , FS_LEASE_TIME = 15 , FS_DQSTATS = 16 , FS_XFS = 17 , FS_AIO_NR = 18 , FS_AIO_MAX_NR = 19 , FS_INOTIFY = 20 , FS_OCFS2 = 988 , } ;
enum { FS_DQ_LOOKUPS = 1 , FS_DQ_DROPS = 2 , FS_DQ_READS = 3 , FS_DQ_WRITES = 4 , FS_DQ_CACHE_HITS = 5 , FS_DQ_ALLOCATED = 6 , FS_DQ_FREE = 7 , FS_DQ_SYNCS = 8 , FS_DQ_WARNINGS = 9 , } ;
enum { DEV_CDROM = 1 , DEV_HWMON = 2 , DEV_PARPORT = 3 , DEV_RAID = 4 , DEV_MAC_HID = 5 , DEV_SCSI = 6 , DEV_IPMI = 7 , } ;
enum { DEV_CDROM_INFO = 1 , DEV_CDROM_AUTOCLOSE = 2 , DEV_CDROM_AUTOEJECT = 3 , DEV_CDROM_DEBUG = 4 , DEV_CDROM_LOCK = 5 , DEV_CDROM_CHECK_MEDIA = 6 } ;
enum { DEV_PARPORT_DEFAULT = - 3 } ;
enum { DEV_RAID_SPEED_LIMIT_MIN = 1 , DEV_RAID_SPEED_LIMIT_MAX = 2 } ;
enum { DEV_PARPORT_DEFAULT_TIMESLICE = 1 , DEV_PARPORT_DEFAULT_SPINTIME = 2 } ;
enum { DEV_PARPORT_SPINTIME = 1 , DEV_PARPORT_BASE_ADDR = 2 , DEV_PARPORT_IRQ = 3 , DEV_PARPORT_DMA = 4 , DEV_PARPORT_MODES = 5 , DEV_PARPORT_DEVICES = 6 , DEV_PARPORT_AUTOPROBE = 16 } ;
enum { DEV_PARPORT_DEVICES_ACTIVE = - 3 , } ;
enum { DEV_PARPORT_DEVICE_TIMESLICE = 1 , } ;
enum { DEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES = 1 , DEV_MAC_HID_KEYBOARD_LOCK_KEYCODES = 2 , DEV_MAC_HID_MOUSE_BUTTON_EMULATION = 3 , DEV_MAC_HID_MOUSE_BUTTON2_KEYCODE = 4 , DEV_MAC_HID_MOUSE_BUTTON3_KEYCODE = 5 , DEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES = 6 } ;
enum { DEV_SCSI_LOGGING_LEVEL = 1 , } ;
enum { DEV_IPMI_POWEROFF_POWERCYCLE = 1 , } ;
enum { ABI_DEFHANDLER_COFF = 1 , ABI_DEFHANDLER_ELF = 2 , ABI_DEFHANDLER_LCALL7 = 3 , ABI_DEFHANDLER_LIBCSO = 4 , ABI_TRACE = 5 , ABI_FAKE_UTSNAME = 6 , } ;
enum umh_disable_depth { UMH_ENABLED = 0 , UMH_FREEZING , UMH_DISABLED , } ;
struct linux_binprm ;
enum align_flags { ALIGN_VA_32 = ( 1UL << ( 0 ) ) , ALIGN_VA_64 = ( 1UL << ( 1 ) ) , } ;
enum kobj_ns_type { KOBJ_NS_TYPE_NONE = 0 , KOBJ_NS_TYPE_NET , KOBJ_NS_TYPES } ;
enum kobj_ns_type ;
struct sysfs_dirent ;
enum kobject_action { KOBJ_ADD , KOBJ_REMOVE , KOBJ_CHANGE , KOBJ_MOVE , KOBJ_ONLINE , KOBJ_OFFLINE , KOBJ_MAX } ;
enum jump_label_type { JUMP_LABEL_DISABLE = 0 , JUMP_LABEL_ENABLE , } ;
struct mod_arch_specific { } ;
enum module_state { MODULE_STATE_LIVE , MODULE_STATE_COMING , MODULE_STATE_GOING , MODULE_STATE_UNFORMED , } ;
enum hrtimer_mode { HRTIMER_MODE_ABS = 0x0 , HRTIMER_MODE_REL = 0x1 , HRTIMER_MODE_PINNED = 0x02 , HRTIMER_MODE_ABS_PINNED = 0x02 , HRTIMER_MODE_REL_PINNED = 0x03 , } ;
enum hrtimer_restart { HRTIMER_NORESTART , HRTIMER_RESTART , } ;
enum hrtimer_base_type { HRTIMER_BASE_MONOTONIC , HRTIMER_BASE_REALTIME , HRTIMER_BASE_BOOTTIME , HRTIMER_MAX_CLOCK_BASES , } ;
enum dentry_d_lock_class { DENTRY_D_LOCK_NORMAL , DENTRY_D_LOCK_NESTED } ;
enum pid_type { PIDTYPE_PID , PIDTYPE_PGID , PIDTYPE_SID , PIDTYPE_MAX } ;
struct pid_namespace ;
struct user_namespace ;
enum migrate_mode { MIGRATE_ASYNC , MIGRATE_SYNC_LIGHT , MIGRATE_SYNC , } ;
enum rq_flag_bits { __REQ_WRITE , __REQ_FAILFAST_DEV , __REQ_FAILFAST_TRANSPORT , __REQ_FAILFAST_DRIVER , __REQ_SYNC , __REQ_META , __REQ_PRIO , __REQ_DISCARD , __REQ_SECURE , __REQ_WRITE_SAME , __REQ_NOIDLE , __REQ_FUA , __REQ_FLUSH , __REQ_RAHEAD , __REQ_THROTTLED , __REQ_SORTED , __REQ_SOFTBARRIER , __REQ_NOMERGE , __REQ_STARTED , __REQ_DONTPREP , __REQ_QUEUED , __REQ_ELVPRIV , __REQ_FAILED , __REQ_QUIET , __REQ_PREEMPT , __REQ_ALLOCED , __REQ_COPY_USER , __REQ_FLUSH_SEQ , __REQ_IO_STAT , __REQ_MIXED_MERGE , __REQ_KERNEL , __REQ_NR_BITS , } ;
struct hd_geometry ;
struct pipe_inode_info ;
struct user_namespace ;
enum { QIF_BLIMITS_B = 0 , QIF_SPACE_B , QIF_ILIMITS_B , QIF_INODES_B , QIF_BTIME_B , QIF_ITIME_B , } ;
enum { QUOTA_NL_C_UNSPEC , QUOTA_NL_C_WARNING , __QUOTA_NL_C_MAX , } ;
enum { QUOTA_NL_A_UNSPEC , QUOTA_NL_A_QTYPE , QUOTA_NL_A_EXCESS_ID , QUOTA_NL_A_WARNING , QUOTA_NL_A_DEV_MAJOR , QUOTA_NL_A_DEV_MINOR , QUOTA_NL_A_CAUSED_ID , __QUOTA_NL_A_MAX , } ;
enum quota_type { USRQUOTA = 0 , GRPQUOTA = 1 , PRJQUOTA = 2 , } ;
enum { DQST_LOOKUPS , DQST_DROPS , DQST_READS , DQST_WRITES , DQST_CACHE_HITS , DQST_ALLOC_DQUOTS , DQST_FREE_DQUOTS , DQST_SYNCS , _DQST_DQSTAT_LAST } ;
enum { _DQUOT_USAGE_ENABLED = 0 , _DQUOT_LIMITS_ENABLED , _DQUOT_SUSPENDED , _DQUOT_STATE_FLAGS } ;
enum positive_aop_returns { AOP_WRITEPAGE_ACTIVATE = 0x80000 , AOP_TRUNCATED_PAGE = 0x80001 , } ;
enum inode_i_mutex_lock_class { I_MUTEX_NORMAL , I_MUTEX_PARENT , I_MUTEX_CHILD , I_MUTEX_XATTR , I_MUTEX_QUOTA } ;
struct nlm_lockowner ;
struct nfs4_lock_state ;
enum { SB_UNFROZEN = 0 , SB_FREEZE_WRITE = 1 , SB_FREEZE_PAGEFAULT = 2 , SB_FREEZE_FS = 3 , SB_FREEZE_COMPLETE = 4 , } ;
enum file_time_flags { S_ATIME = 1 , S_MTIME = 2 , S_CTIME = 4 , S_VERSION = 8 , } ;
struct audit_names ;
enum { FILE_CREATED = 1 , FILE_OPENED = 2 } ;
enum { DIO_LOCKING = 0x01 , DIO_SKIP_HOLES = 0x02 , } ;
struct mem_cgroup ;
enum stat_item { ALLOC_FASTPATH , ALLOC_SLOWPATH , FREE_FASTPATH , FREE_SLOWPATH , FREE_FROZEN , FREE_ADD_PARTIAL , FREE_REMOVE_PARTIAL , ALLOC_FROM_PARTIAL , ALLOC_SLAB , ALLOC_REFILL , ALLOC_NODE_MISMATCH , FREE_SLAB , CPUSLAB_FLUSH , DEACTIVATE_FULL , DEACTIVATE_EMPTY , DEACTIVATE_TO_HEAD , DEACTIVATE_TO_TAIL , DEACTIVATE_REMOTE_FREES , DEACTIVATE_BYPASS , ORDER_FALLBACK , CMPXCHG_DOUBLE_CPU_FAIL , CMPXCHG_DOUBLE_FAIL , CPU_PARTIAL_ALLOC , CPU_PARTIAL_FREE , CPU_PARTIAL_NODE , CPU_PARTIAL_DRAIN , NR_SLUB_STAT_ITEMS } ;
enum { PROC_ROOT_INO = 1 , PROC_IPC_INIT_INO = 0xEFFFFFFFU , PROC_UTS_INIT_INO = 0xEFFFFFFEU , PROC_USER_INIT_INO = 0xEFFFFFFDU , PROC_PID_INIT_INO = 0xEFFFFFFCU , } ;
enum kcore_type { KCORE_TEXT , KCORE_VMALLOC , KCORE_RAM , KCORE_VMEMMAP , KCORE_OTHER , } ;
struct pid_namespace ;
struct tty_driver ;
struct pdev_archdata { } ;
struct device_private ;
struct driver_private ;
struct subsys_private ;
struct device_node ;
struct iommu_ops ;
struct iommu_group ;
struct class_compat ;
enum clock_event_mode { CLOCK_EVT_MODE_UNUSED = 0 , CLOCK_EVT_MODE_SHUTDOWN , CLOCK_EVT_MODE_PERIODIC , CLOCK_EVT_MODE_ONESHOT , CLOCK_EVT_MODE_RESUME , } ;
enum clock_event_nofitiers { CLOCK_EVT_NOTIFY_ADD , CLOCK_EVT_NOTIFY_BROADCAST_ON , CLOCK_EVT_NOTIFY_BROADCAST_OFF , CLOCK_EVT_NOTIFY_BROADCAST_FORCE , CLOCK_EVT_NOTIFY_BROADCAST_ENTER , CLOCK_EVT_NOTIFY_BROADCAST_EXIT , CLOCK_EVT_NOTIFY_SUSPEND , CLOCK_EVT_NOTIFY_RESUME , CLOCK_EVT_NOTIFY_CPU_DYING , CLOCK_EVT_NOTIFY_CPU_DEAD , } ;
enum tick_device_mode { TICKDEV_MODE_PERIODIC , TICKDEV_MODE_ONESHOT , } ;
enum tick_nohz_mode { NOHZ_MODE_INACTIVE , NOHZ_MODE_LOWRES , NOHZ_MODE_HIGHRES , } ;
enum dmi_field { DMI_NONE , DMI_BIOS_VENDOR , DMI_BIOS_VERSION , DMI_BIOS_DATE , DMI_SYS_VENDOR , DMI_PRODUCT_NAME , DMI_PRODUCT_VERSION , DMI_PRODUCT_SERIAL , DMI_PRODUCT_UUID , DMI_BOARD_VENDOR , DMI_BOARD_NAME , DMI_BOARD_VERSION , DMI_BOARD_SERIAL , DMI_BOARD_ASSET_TAG , DMI_CHASSIS_VENDOR , DMI_CHASSIS_TYPE , DMI_CHASSIS_VERSION , DMI_CHASSIS_SERIAL , DMI_CHASSIS_ASSET_TAG , DMI_STRING_MAX , } ;
enum irqreturn { IRQ_NONE = ( 0 << 0 ) , IRQ_HANDLED = ( 1 << 0 ) , IRQ_WAKE_THREAD = ( 1 << 1 ) , } ;
enum pci_mmap_state { pci_mmap_io , pci_mmap_mem } ;
enum { PCI_STD_RESOURCES , PCI_STD_RESOURCE_END = 5 , PCI_ROM_RESOURCE , PCI_IOV_RESOURCES , PCI_IOV_RESOURCE_END = PCI_IOV_RESOURCES + 6 - 1 , PCI_BRIDGE_RESOURCES , PCI_BRIDGE_RESOURCE_END = PCI_BRIDGE_RESOURCES + 4 - 1 , PCI_NUM_RESOURCES , DEVICE_COUNT_RESOURCE = PCI_NUM_RESOURCES , } ;
enum pci_irq_reroute_variant { INTEL_IRQ_REROUTE_VARIANT = 1 , MAX_IRQ_REROUTE_VARIANTS = 3 } ;
enum pci_bus_speed { PCI_SPEED_33MHz = 0x00 , PCI_SPEED_66MHz = 0x01 , PCI_SPEED_66MHz_PCIX = 0x02 , PCI_SPEED_100MHz_PCIX = 0x03 , PCI_SPEED_133MHz_PCIX = 0x04 , PCI_SPEED_66MHz_PCIX_ECC = 0x05 , PCI_SPEED_100MHz_PCIX_ECC = 0x06 , PCI_SPEED_133MHz_PCIX_ECC = 0x07 , PCI_SPEED_66MHz_PCIX_266 = 0x09 , PCI_SPEED_100MHz_PCIX_266 = 0x0a , PCI_SPEED_133MHz_PCIX_266 = 0x0b , AGP_UNKNOWN = 0x0c , AGP_1X = 0x0d , AGP_2X = 0x0e , AGP_4X = 0x0f , AGP_8X = 0x10 , PCI_SPEED_66MHz_PCIX_533 = 0x11 , PCI_SPEED_100MHz_PCIX_533 = 0x12 , PCI_SPEED_133MHz_PCIX_533 = 0x13 , PCIE_SPEED_2_5GT = 0x14 , PCIE_SPEED_5_0GT = 0x15 , PCIE_SPEED_8_0GT = 0x16 , PCI_SPEED_UNKNOWN = 0xff , } ;
struct pcie_link_state ;
struct pci_vpd ;
struct pci_sriov ;
struct pci_ats ;
enum pcie_bus_config_types { PCIE_BUS_TUNE_OFF , PCIE_BUS_SAFE , PCIE_BUS_PERFORMANCE , PCIE_BUS_PEER2PEER , } ;
enum pci_lost_interrupt_reason { PCI_LOST_IRQ_NO_INFORMATION = 0 , PCI_LOST_IRQ_DISABLE_MSI , PCI_LOST_IRQ_DISABLE_MSIX , PCI_LOST_IRQ_DISABLE_ACPI , } ;
enum pci_obff_signal_type { PCI_EXP_OBFF_SIGNAL_L0 = 0 , PCI_EXP_OBFF_SIGNAL_ALWAYS = 1 , } ;
enum pci_dma_burst_strategy { PCI_DMA_BURST_INFINITY , PCI_DMA_BURST_BOUNDARY , PCI_DMA_BURST_MULTIPLE , } ;
enum page_debug_flags { PAGE_DEBUG_FLAG_POISON , PAGE_DEBUG_FLAG_GUARD , } ;
struct uprobes_state { } ;
enum { MM_FILEPAGES , MM_ANONPAGES , MM_SWAPENTS , NR_MM_COUNTERS } ;
struct mempolicy ;
struct anon_vma ;
struct anon_vma_chain ;
struct mmu_gather ;
enum pageflags { PG_locked , PG_error , PG_referenced , PG_uptodate , PG_dirty , PG_lru , PG_active , PG_slab , PG_owner_priv_1 , PG_arch_1 , PG_reserved , PG_private , PG_private_2 , PG_writeback , PG_head , PG_tail , PG_swapcache , PG_mappedtodisk , PG_reclaim , PG_swapbacked , PG_unevictable , PG_mlocked , PG_uncached , PG_hwpoison , PG_compound_lock , __NR_PAGEFLAGS , PG_checked = PG_owner_priv_1 , PG_fscache = PG_private_2 , PG_pinned = PG_owner_priv_1 , PG_savepinned = PG_dirty , PG_slob_free = PG_private , } ;
enum transparent_hugepage_flag { TRANSPARENT_HUGEPAGE_FLAG , TRANSPARENT_HUGEPAGE_REQ_MADV_FLAG , TRANSPARENT_HUGEPAGE_DEFRAG_FLAG , TRANSPARENT_HUGEPAGE_DEFRAG_REQ_MADV_FLAG , TRANSPARENT_HUGEPAGE_DEFRAG_KHUGEPAGED_FLAG , TRANSPARENT_HUGEPAGE_USE_ZERO_PAGE_FLAG , } ;
enum page_check_address_pmd_flag { PAGE_CHECK_ADDRESS_PMD_FLAG , PAGE_CHECK_ADDRESS_PMD_NOTSPLITTING_FLAG , PAGE_CHECK_ADDRESS_PMD_SPLITTING_FLAG , } ;
enum vm_event_item { PGPGIN , PGPGOUT , PSWPIN , PSWPOUT , PGALLOC_DMA , PGALLOC_DMA32 , PGALLOC_NORMAL , PGALLOC_MOVABLE , PGFREE , PGACTIVATE , PGDEACTIVATE , PGFAULT , PGMAJFAULT , PGREFILL_DMA , PGREFILL_DMA32 , PGREFILL_NORMAL , PGREFILL_MOVABLE , PGSTEAL_KSWAPD_DMA , PGSTEAL_KSWAPD_DMA32 , PGSTEAL_KSWAPD_NORMAL , PGSTEAL_KSWAPD_MOVABLE , PGSTEAL_DIRECT_DMA , PGSTEAL_DIRECT_DMA32 , PGSTEAL_DIRECT_NORMAL , PGSTEAL_DIRECT_MOVABLE , PGSCAN_KSWAPD_DMA , PGSCAN_KSWAPD_DMA32 , PGSCAN_KSWAPD_NORMAL , PGSCAN_KSWAPD_MOVABLE , PGSCAN_DIRECT_DMA , PGSCAN_DIRECT_DMA32 , PGSCAN_DIRECT_NORMAL , PGSCAN_DIRECT_MOVABLE , PGSCAN_DIRECT_THROTTLE , PGSCAN_ZONE_RECLAIM_FAILED , PGINODESTEAL , SLABS_SCANNED , KSWAPD_INODESTEAL , KSWAPD_LOW_WMARK_HIT_QUICKLY , KSWAPD_HIGH_WMARK_HIT_QUICKLY , KSWAPD_SKIP_CONGESTION_WAIT , PAGEOUTRUN , ALLOCSTALL , PGROTATED , PGMIGRATE_SUCCESS , PGMIGRATE_FAIL , COMPACTMIGRATE_SCANNED , COMPACTFREE_SCANNED , COMPACTISOLATED , COMPACTSTALL , COMPACTFAIL , COMPACTSUCCESS , HTLB_BUDDY_PGALLOC , HTLB_BUDDY_PGALLOC_FAIL , UNEVICTABLE_PGCULLED , UNEVICTABLE_PGSCANNED , UNEVICTABLE_PGRESCUED , UNEVICTABLE_PGMLOCKED , UNEVICTABLE_PGMUNLOCKED , UNEVICTABLE_PGCLEARED , UNEVICTABLE_PGSTRANDED , THP_FAULT_ALLOC , THP_FAULT_FALLBACK , THP_COLLAPSE_ALLOC , THP_COLLAPSE_ALLOC_FAILED , THP_SPLIT , THP_ZERO_PAGE_ALLOC , THP_ZERO_PAGE_ALLOC_FAILED , NR_VM_EVENT_ITEMS } ;
enum mf_flags { MF_COUNT_INCREASED = 1 << 0 , MF_ACTION_REQUIRED = 1 << 1 , MF_MUST_KILL = 1 << 2 , } ;
enum dma_attr { DMA_ATTR_WRITE_BARRIER , DMA_ATTR_WEAK_ORDERING , DMA_ATTR_WRITE_COMBINE , DMA_ATTR_NON_CONSISTENT , DMA_ATTR_NO_KERNEL_MAPPING , DMA_ATTR_SKIP_CPU_SYNC , DMA_ATTR_FORCE_CONTIGUOUS , DMA_ATTR_MAX , } ;
enum dma_data_direction { DMA_BIDIRECTIONAL = 0 , DMA_TO_DEVICE = 1 , DMA_FROM_DEVICE = 2 , DMA_NONE = 3 , } ;
enum dma_sync_target { SYNC_FOR_CPU = 0 , SYNC_FOR_DEVICE = 1 , } ;
struct cma ;
enum pci_fixup_pass { pci_fixup_early , pci_fixup_header , pci_fixup_final , pci_fixup_enable , pci_fixup_resume , pci_fixup_suspend , pci_fixup_resume_early , } ;
struct seccomp_filter ;
struct rt_mutex_waiter ;
struct key_type ;
struct key_owner ;
struct keyring_list ;
struct keyring_name ;
struct selinux_audit_rule ;
struct audit_context ;
struct futex_pi_state ;
struct robust_list_head ;
struct fs_struct ;
struct perf_event_context ;
struct cfs_rq ;
struct task_group ;
struct user_namespace ;
enum { IOCB_CMD_PREAD = 0 , IOCB_CMD_PWRITE = 1 , IOCB_CMD_FSYNC = 2 , IOCB_CMD_FDSYNC = 3 , IOCB_CMD_NOOP = 6 , IOCB_CMD_PREADV = 7 , IOCB_CMD_PWRITEV = 8 , } ;
struct autogroup ;
enum cpu_idle_type { CPU_IDLE , CPU_NOT_IDLE , CPU_NEWLY_IDLE , CPU_MAX_IDLE_TYPES } ;
struct audit_context ;
struct mempolicy ;
struct pipe_inode_info ;
struct uts_namespace ;
struct rq ;
struct rcu_node ;
enum perf_event_task_context { perf_invalid_context = - 1 , perf_hw_context = 0 , perf_sw_context , perf_nr_task_contexts , } ;
struct pid_namespace ;
enum sched_tunable_scaling { SCHED_TUNABLESCALING_NONE , SCHED_TUNABLESCALING_LOG , SCHED_TUNABLESCALING_LINEAR , SCHED_TUNABLESCALING_END , } ;
enum { IRQ_TYPE_NONE = 0x00000000 , IRQ_TYPE_EDGE_RISING = 0x00000001 , IRQ_TYPE_EDGE_FALLING = 0x00000002 , IRQ_TYPE_EDGE_BOTH = ( IRQ_TYPE_EDGE_FALLING | IRQ_TYPE_EDGE_RISING ) , IRQ_TYPE_LEVEL_HIGH = 0x00000004 , IRQ_TYPE_LEVEL_LOW = 0x00000008 , IRQ_TYPE_LEVEL_MASK = ( IRQ_TYPE_LEVEL_LOW | IRQ_TYPE_LEVEL_HIGH ) , IRQ_TYPE_SENSE_MASK = 0x0000000f , IRQ_TYPE_DEFAULT = IRQ_TYPE_SENSE_MASK , IRQ_TYPE_PROBE = 0x00000010 , IRQ_LEVEL = ( 1 << 8 ) , IRQ_PER_CPU = ( 1 << 9 ) , IRQ_NOPROBE = ( 1 << 10 ) , IRQ_NOREQUEST = ( 1 << 11 ) , IRQ_NOAUTOEN = ( 1 << 12 ) , IRQ_NO_BALANCING = ( 1 << 13 ) , IRQ_MOVE_PCNTXT = ( 1 << 14 ) , IRQ_NESTED_THREAD = ( 1 << 15 ) , IRQ_NOTHREAD = ( 1 << 16 ) , IRQ_PER_CPU_DEVID = ( 1 << 17 ) , } ;
enum { IRQ_SET_MASK_OK = 0 , IRQ_SET_MASK_OK_NOCOPY , } ;
struct msi_desc ;
struct irq_domain ;
enum { IRQD_TRIGGER_MASK = 0xf , IRQD_SETAFFINITY_PENDING = ( 1 << 8 ) , IRQD_NO_BALANCING = ( 1 << 10 ) , IRQD_PER_CPU = ( 1 << 11 ) , IRQD_AFFINITY_SET = ( 1 << 12 ) , IRQD_LEVEL = ( 1 << 13 ) , IRQD_WAKEUP_STATE = ( 1 << 14 ) , IRQD_MOVE_PCNTXT = ( 1 << 15 ) , IRQD_IRQ_DISABLED = ( 1 << 16 ) , IRQD_IRQ_MASKED = ( 1 << 17 ) , IRQD_IRQ_INPROGRESS = ( 1 << 18 ) , } ;
enum { IRQCHIP_SET_TYPE_MASKED = ( 1 << 0 ) , IRQCHIP_EOI_IF_HANDLED = ( 1 << 1 ) , IRQCHIP_MASK_ON_SUSPEND = ( 1 << 2 ) , IRQCHIP_ONOFFLINE_ENABLED = ( 1 << 3 ) , IRQCHIP_SKIP_SET_WAKE = ( 1 << 4 ) , IRQCHIP_ONESHOT_SAFE = ( 1 << 5 ) , } ;
enum profile_type { PROFILE_TASK_EXIT , PROFILE_MUNMAP } ;
enum irq_gc_flags { IRQ_GC_INIT_MASK_CACHE = 1 << 0 , IRQ_GC_INIT_NESTED_LOCK = 1 << 1 , } ;
enum { IRQC_IS_HARDIRQ = 0 , IRQC_IS_NESTED , } ;
enum { HI_SOFTIRQ = 0 , TIMER_SOFTIRQ , NET_TX_SOFTIRQ , NET_RX_SOFTIRQ , BLOCK_SOFTIRQ , BLOCK_IOPOLL_SOFTIRQ , TASKLET_SOFTIRQ , SCHED_SOFTIRQ , HRTIMER_SOFTIRQ , RCU_SOFTIRQ , NR_SOFTIRQS } ;
enum { TASKLET_STATE_SCHED , TASKLET_STATE_RUN } ;
enum { PM_QOS_RESERVED = 0 , PM_QOS_CPU_DMA_LATENCY , PM_QOS_NETWORK_LATENCY , PM_QOS_NETWORK_THROUGHPUT , PM_QOS_NUM_CLASSES , } ;
enum pm_qos_flags_status { PM_QOS_FLAGS_UNDEFINED = - 1 , PM_QOS_FLAGS_NONE , PM_QOS_FLAGS_SOME , PM_QOS_FLAGS_ALL , } ;
enum dev_pm_qos_req_type { DEV_PM_QOS_LATENCY = 1 , DEV_PM_QOS_FLAGS , } ;
enum pm_qos_type { PM_QOS_UNITIALIZED , PM_QOS_MAX , PM_QOS_MIN } ;
enum pm_qos_req_action { PM_QOS_ADD_REQ , PM_QOS_UPDATE_REQ , PM_QOS_REMOVE_REQ } ;
enum dma_status { DMA_SUCCESS , DMA_IN_PROGRESS , DMA_PAUSED , DMA_ERROR , } ;
enum dma_transaction_type { DMA_MEMCPY , DMA_XOR , DMA_PQ , DMA_XOR_VAL , DMA_PQ_VAL , DMA_MEMSET , DMA_INTERRUPT , DMA_SG , DMA_PRIVATE , DMA_ASYNC_TX , DMA_SLAVE , DMA_CYCLIC , DMA_INTERLEAVE , DMA_TX_TYPE_END , } ;
enum dma_transfer_direction { DMA_MEM_TO_MEM , DMA_MEM_TO_DEV , DMA_DEV_TO_MEM , DMA_DEV_TO_DEV , DMA_TRANS_NONE , } ;
enum dma_ctrl_flags { DMA_PREP_INTERRUPT = ( 1 << 0 ) , DMA_CTRL_ACK = ( 1 << 1 ) , DMA_COMPL_SKIP_SRC_UNMAP = ( 1 << 2 ) , DMA_COMPL_SKIP_DEST_UNMAP = ( 1 << 3 ) , DMA_COMPL_SRC_UNMAP_SINGLE = ( 1 << 4 ) , DMA_COMPL_DEST_UNMAP_SINGLE = ( 1 << 5 ) , DMA_PREP_PQ_DISABLE_P = ( 1 << 6 ) , DMA_PREP_PQ_DISABLE_Q = ( 1 << 7 ) , DMA_PREP_CONTINUE = ( 1 << 8 ) , DMA_PREP_FENCE = ( 1 << 9 ) , } ;
enum dma_ctrl_cmd { DMA_TERMINATE_ALL , DMA_PAUSE , DMA_RESUME , DMA_SLAVE_CONFIG , FSLDMA_EXTERNAL_START , } ;
enum sum_check_bits { SUM_CHECK_P = 0 , SUM_CHECK_Q = 1 , } ;
enum dma_slave_buswidth { DMA_SLAVE_BUSWIDTH_UNDEFINED = 0 , DMA_SLAVE_BUSWIDTH_1_BYTE = 1 , DMA_SLAVE_BUSWIDTH_2_BYTES = 2 , DMA_SLAVE_BUSWIDTH_4_BYTES = 4 , DMA_SLAVE_BUSWIDTH_8_BYTES = 8 , } ;
enum { IF_OPER_UNKNOWN , IF_OPER_NOTPRESENT , IF_OPER_DOWN , IF_OPER_LOWERLAYERDOWN , IF_OPER_TESTING , IF_OPER_DORMANT , IF_OPER_UP , } ;
enum { IF_LINK_MODE_DEFAULT , IF_LINK_MODE_DORMANT , } ;
struct compat_sel_arg_struct ;
struct compat_old_linux_dirent ;
struct compat_linux_dirent ;
struct linux_dirent64 ;
struct compat_msghdr ;
struct compat_mmsghdr ;
struct compat_sysinfo ;
struct compat_sysctl_args ;
struct compat_kexec_segment ;
struct compat_mq_attr ;
struct compat_msgbuf ;
struct epoll_event ;
struct pipe_inode_info ;
enum sock_type { SOCK_STREAM = 1 , SOCK_DGRAM = 2 , SOCK_RAW = 3 , SOCK_RDM = 4 , SOCK_SEQPACKET = 5 , SOCK_DCCP = 6 , SOCK_PACKET = 10 , } ;
enum sock_shutdown_cmd { SHUT_RD = 0 , SHUT_WR = 1 , SHUT_RDWR = 2 , } ;
enum { SOCK_WAKE_IO , SOCK_WAKE_WAITD , SOCK_WAKE_SPACE , SOCK_WAKE_URG , } ;
enum { NETIF_F_SG_BIT , NETIF_F_IP_CSUM_BIT , __UNUSED_NETIF_F_1 , NETIF_F_HW_CSUM_BIT , NETIF_F_IPV6_CSUM_BIT , NETIF_F_HIGHDMA_BIT , NETIF_F_FRAGLIST_BIT , NETIF_F_HW_VLAN_TX_BIT , NETIF_F_HW_VLAN_RX_BIT , NETIF_F_HW_VLAN_FILTER_BIT , NETIF_F_VLAN_CHALLENGED_BIT , NETIF_F_GSO_BIT , NETIF_F_LLTX_BIT , NETIF_F_NETNS_LOCAL_BIT , NETIF_F_GRO_BIT , NETIF_F_LRO_BIT , NETIF_F_GSO_SHIFT , NETIF_F_TSO_BIT = NETIF_F_GSO_SHIFT , NETIF_F_UFO_BIT , NETIF_F_GSO_ROBUST_BIT , NETIF_F_TSO_ECN_BIT , NETIF_F_TSO6_BIT , NETIF_F_FSO_BIT , NETIF_F_GSO_RESERVED1 , NETIF_F_GSO_LAST , NETIF_F_GSO_RESERVED2 = NETIF_F_GSO_LAST , NETIF_F_FCOE_CRC_BIT , NETIF_F_SCTP_CSUM_BIT , NETIF_F_FCOE_MTU_BIT , NETIF_F_NTUPLE_BIT , NETIF_F_RXHASH_BIT , NETIF_F_RXCSUM_BIT , NETIF_F_NOCACHE_COPY_BIT , NETIF_F_LOOPBACK_BIT , NETIF_F_RXFCS_BIT , NETIF_F_RXALL_BIT , NETDEV_FEATURE_COUNT } ;
struct pipe_inode_info ;
enum { SKBTX_HW_TSTAMP = 1 << 0 , SKBTX_SW_TSTAMP = 1 << 1 , SKBTX_IN_PROGRESS = 1 << 2 , SKBTX_DEV_ZEROCOPY = 1 << 3 , SKBTX_WIFI_STATUS = 1 << 4 , } ;
enum { SKB_FCLONE_UNAVAILABLE , SKB_FCLONE_ORIG , SKB_FCLONE_CLONE , } ;
enum { SKB_GSO_TCPV4 = 1 << 0 , SKB_GSO_UDP = 1 << 1 , SKB_GSO_DODGY = 1 << 2 , SKB_GSO_TCP_ECN = 1 << 3 , SKB_GSO_TCPV6 = 1 << 4 , SKB_GSO_FCOE = 1 << 5 , } ;
enum ethtool_stringset { ETH_SS_TEST = 0 , ETH_SS_STATS , ETH_SS_PRIV_FLAGS , ETH_SS_NTUPLE_FILTERS , ETH_SS_FEATURES , } ;
enum ethtool_test_flags { ETH_TEST_FL_OFFLINE = ( 1 << 0 ) , ETH_TEST_FL_FAILED = ( 1 << 1 ) , ETH_TEST_FL_EXTERNAL_LB = ( 1 << 2 ) , ETH_TEST_FL_EXTERNAL_LB_DONE = ( 1 << 3 ) , } ;
enum ethtool_flags { ETH_FLAG_TXVLAN = ( 1 << 7 ) , ETH_FLAG_RXVLAN = ( 1 << 8 ) , ETH_FLAG_LRO = ( 1 << 15 ) , ETH_FLAG_NTUPLE = ( 1 << 27 ) , ETH_FLAG_RXHASH = ( 1 << 28 ) , } ;
enum ethtool_flash_op_type { ETHTOOL_FLASH_ALL_REGIONS = 0 , } ;
enum ethtool_sfeatures_retval_bits { ETHTOOL_F_UNSUPPORTED__BIT , ETHTOOL_F_WISH__BIT , ETHTOOL_F_COMPAT__BIT , } ;
enum ethtool_reset_flags { ETH_RESET_MGMT = 1 << 0 , ETH_RESET_IRQ = 1 << 1 , ETH_RESET_DMA = 1 << 2 , ETH_RESET_FILTER = 1 << 3 , ETH_RESET_OFFLOAD = 1 << 4 , ETH_RESET_MAC = 1 << 5 , ETH_RESET_PHY = 1 << 6 , ETH_RESET_RAM = 1 << 7 , ETH_RESET_DEDICATED = 0x0000ffff , ETH_RESET_ALL = 0xffffffff , } ;
enum ethtool_phys_id_state { ETHTOOL_ID_INACTIVE , ETHTOOL_ID_ACTIVE , ETHTOOL_ID_ON , ETHTOOL_ID_OFF } ;
struct prot_inuse ;
enum { IPSTATS_MIB_NUM = 0 , IPSTATS_MIB_INPKTS , IPSTATS_MIB_INHDRERRORS , IPSTATS_MIB_INTOOBIGERRORS , IPSTATS_MIB_INNOROUTES , IPSTATS_MIB_INADDRERRORS , IPSTATS_MIB_INUNKNOWNPROTOS , IPSTATS_MIB_INTRUNCATEDPKTS , IPSTATS_MIB_INDISCARDS , IPSTATS_MIB_INDELIVERS , IPSTATS_MIB_OUTFORWDATAGRAMS , IPSTATS_MIB_OUTPKTS , IPSTATS_MIB_OUTDISCARDS , IPSTATS_MIB_OUTNOROUTES , IPSTATS_MIB_REASMTIMEOUT , IPSTATS_MIB_REASMREQDS , IPSTATS_MIB_REASMOKS , IPSTATS_MIB_REASMFAILS , IPSTATS_MIB_FRAGOKS , IPSTATS_MIB_FRAGFAILS , IPSTATS_MIB_FRAGCREATES , IPSTATS_MIB_INMCASTPKTS , IPSTATS_MIB_OUTMCASTPKTS , IPSTATS_MIB_INBCASTPKTS , IPSTATS_MIB_OUTBCASTPKTS , IPSTATS_MIB_INOCTETS , IPSTATS_MIB_OUTOCTETS , IPSTATS_MIB_INMCASTOCTETS , IPSTATS_MIB_OUTMCASTOCTETS , IPSTATS_MIB_INBCASTOCTETS , IPSTATS_MIB_OUTBCASTOCTETS , __IPSTATS_MIB_MAX } ;
enum { ICMP_MIB_NUM = 0 , ICMP_MIB_INMSGS , ICMP_MIB_INERRORS , ICMP_MIB_INDESTUNREACHS , ICMP_MIB_INTIMEEXCDS , ICMP_MIB_INPARMPROBS , ICMP_MIB_INSRCQUENCHS , ICMP_MIB_INREDIRECTS , ICMP_MIB_INECHOS , ICMP_MIB_INECHOREPS , ICMP_MIB_INTIMESTAMPS , ICMP_MIB_INTIMESTAMPREPS , ICMP_MIB_INADDRMASKS , ICMP_MIB_INADDRMASKREPS , ICMP_MIB_OUTMSGS , ICMP_MIB_OUTERRORS , ICMP_MIB_OUTDESTUNREACHS , ICMP_MIB_OUTTIMEEXCDS , ICMP_MIB_OUTPARMPROBS , ICMP_MIB_OUTSRCQUENCHS , ICMP_MIB_OUTREDIRECTS , ICMP_MIB_OUTECHOS , ICMP_MIB_OUTECHOREPS , ICMP_MIB_OUTTIMESTAMPS , ICMP_MIB_OUTTIMESTAMPREPS , ICMP_MIB_OUTADDRMASKS , ICMP_MIB_OUTADDRMASKREPS , __ICMP_MIB_MAX } ;
enum { ICMP6_MIB_NUM = 0 , ICMP6_MIB_INMSGS , ICMP6_MIB_INERRORS , ICMP6_MIB_OUTMSGS , ICMP6_MIB_OUTERRORS , __ICMP6_MIB_MAX } ;
enum { TCP_MIB_NUM = 0 , TCP_MIB_RTOALGORITHM , TCP_MIB_RTOMIN , TCP_MIB_RTOMAX , TCP_MIB_MAXCONN , TCP_MIB_ACTIVEOPENS , TCP_MIB_PASSIVEOPENS , TCP_MIB_ATTEMPTFAILS , TCP_MIB_ESTABRESETS , TCP_MIB_CURRESTAB , TCP_MIB_INSEGS , TCP_MIB_OUTSEGS , TCP_MIB_RETRANSSEGS , TCP_MIB_INERRS , TCP_MIB_OUTRSTS , __TCP_MIB_MAX } ;
enum { UDP_MIB_NUM = 0 , UDP_MIB_INDATAGRAMS , UDP_MIB_NOPORTS , UDP_MIB_INERRORS , UDP_MIB_OUTDATAGRAMS , UDP_MIB_RCVBUFERRORS , UDP_MIB_SNDBUFERRORS , __UDP_MIB_MAX } ;
enum { LINUX_MIB_NUM = 0 , LINUX_MIB_SYNCOOKIESSENT , LINUX_MIB_SYNCOOKIESRECV , LINUX_MIB_SYNCOOKIESFAILED , LINUX_MIB_EMBRYONICRSTS , LINUX_MIB_PRUNECALLED , LINUX_MIB_RCVPRUNED , LINUX_MIB_OFOPRUNED , LINUX_MIB_OUTOFWINDOWICMPS , LINUX_MIB_LOCKDROPPEDICMPS , LINUX_MIB_ARPFILTER , LINUX_MIB_TIMEWAITED , LINUX_MIB_TIMEWAITRECYCLED , LINUX_MIB_TIMEWAITKILLED , LINUX_MIB_PAWSPASSIVEREJECTED , LINUX_MIB_PAWSACTIVEREJECTED , LINUX_MIB_PAWSESTABREJECTED , LINUX_MIB_DELAYEDACKS , LINUX_MIB_DELAYEDACKLOCKED , LINUX_MIB_DELAYEDACKLOST , LINUX_MIB_LISTENOVERFLOWS , LINUX_MIB_LISTENDROPS , LINUX_MIB_TCPPREQUEUED , LINUX_MIB_TCPDIRECTCOPYFROMBACKLOG , LINUX_MIB_TCPDIRECTCOPYFROMPREQUEUE , LINUX_MIB_TCPPREQUEUEDROPPED , LINUX_MIB_TCPHPHITS , LINUX_MIB_TCPHPHITSTOUSER , LINUX_MIB_TCPPUREACKS , LINUX_MIB_TCPHPACKS , LINUX_MIB_TCPRENORECOVERY , LINUX_MIB_TCPSACKRECOVERY , LINUX_MIB_TCPSACKRENEGING , LINUX_MIB_TCPFACKREORDER , LINUX_MIB_TCPSACKREORDER , LINUX_MIB_TCPRENOREORDER , LINUX_MIB_TCPTSREORDER , LINUX_MIB_TCPFULLUNDO , LINUX_MIB_TCPPARTIALUNDO , LINUX_MIB_TCPDSACKUNDO , LINUX_MIB_TCPLOSSUNDO , LINUX_MIB_TCPLOSS , LINUX_MIB_TCPLOSTRETRANSMIT , LINUX_MIB_TCPRENOFAILURES , LINUX_MIB_TCPSACKFAILURES , LINUX_MIB_TCPLOSSFAILURES , LINUX_MIB_TCPFASTRETRANS , LINUX_MIB_TCPFORWARDRETRANS , LINUX_MIB_TCPSLOWSTARTRETRANS , LINUX_MIB_TCPTIMEOUTS , LINUX_MIB_TCPRENORECOVERYFAIL , LINUX_MIB_TCPSACKRECOVERYFAIL , LINUX_MIB_TCPSCHEDULERFAILED , LINUX_MIB_TCPRCVCOLLAPSED , LINUX_MIB_TCPDSACKOLDSENT , LINUX_MIB_TCPDSACKOFOSENT , LINUX_MIB_TCPDSACKRECV , LINUX_MIB_TCPDSACKOFORECV , LINUX_MIB_TCPABORTONSYN , LINUX_MIB_TCPABORTONDATA , LINUX_MIB_TCPABORTONCLOSE , LINUX_MIB_TCPABORTONMEMORY , LINUX_MIB_TCPABORTONTIMEOUT , LINUX_MIB_TCPABORTONLINGER , LINUX_MIB_TCPABORTFAILED , LINUX_MIB_TCPMEMORYPRESSURES , LINUX_MIB_TCPSACKDISCARD , LINUX_MIB_TCPDSACKIGNOREDOLD , LINUX_MIB_TCPDSACKIGNOREDNOUNDO , LINUX_MIB_TCPSPURIOUSRTOS , LINUX_MIB_TCPMD5NOTFOUND , LINUX_MIB_TCPMD5UNEXPECTED , LINUX_MIB_SACKSHIFTED , LINUX_MIB_SACKMERGED , LINUX_MIB_SACKSHIFTFALLBACK , LINUX_MIB_TCPBACKLOGDROP , LINUX_MIB_TCPMINTTLDROP , LINUX_MIB_TCPDEFERACCEPTDROP , LINUX_MIB_IPRPFILTER , LINUX_MIB_TCPTIMEWAITOVERFLOW , LINUX_MIB_TCPREQQFULLDOCOOKIES , LINUX_MIB_TCPREQQFULLDROP , __LINUX_MIB_MAX } ;
enum { LINUX_MIB_XFRMNUM = 0 , LINUX_MIB_XFRMINERROR , LINUX_MIB_XFRMINBUFFERERROR , LINUX_MIB_XFRMINHDRERROR , LINUX_MIB_XFRMINNOSTATES , LINUX_MIB_XFRMINSTATEPROTOERROR , LINUX_MIB_XFRMINSTATEMODEERROR , LINUX_MIB_XFRMINSTATESEQERROR , LINUX_MIB_XFRMINSTATEEXPIRED , LINUX_MIB_XFRMINSTATEMISMATCH , LINUX_MIB_XFRMINSTATEINVALID , LINUX_MIB_XFRMINTMPLMISMATCH , LINUX_MIB_XFRMINNOPOLS , LINUX_MIB_XFRMINPOLBLOCK , LINUX_MIB_XFRMINPOLERROR , LINUX_MIB_XFRMOUTERROR , LINUX_MIB_XFRMOUTBUNDLEGENERROR , LINUX_MIB_XFRMOUTBUNDLECHECKERROR , LINUX_MIB_XFRMOUTNOSTATES , LINUX_MIB_XFRMOUTSTATEPROTOERROR , LINUX_MIB_XFRMOUTSTATEMODEERROR , LINUX_MIB_XFRMOUTSTATESEQERROR , LINUX_MIB_XFRMOUTSTATEEXPIRED , LINUX_MIB_XFRMOUTPOLBLOCK , LINUX_MIB_XFRMOUTPOLDEAD , LINUX_MIB_XFRMOUTPOLERROR , LINUX_MIB_XFRMFWDHDRERROR , __LINUX_MIB_XFRMMAX } ;
struct u64_stats_sync { } ;
struct tcpm_hash_bucket ;
struct ipv4_devconf ;
struct fib_rules_ops ;
struct fib_table ;
struct kmem_cachep ;
struct sctp_mib ;
enum { IPPROTO_IP = 0 , IPPROTO_ICMP = 1 , IPPROTO_IGMP = 2 , IPPROTO_IPIP = 4 , IPPROTO_TCP = 6 , IPPROTO_EGP = 8 , IPPROTO_PUP = 12 , IPPROTO_UDP = 17 , IPPROTO_IDP = 22 , IPPROTO_DCCP = 33 , IPPROTO_RSVP = 46 , IPPROTO_GRE = 47 , IPPROTO_IPV6 = 41 , IPPROTO_ESP = 50 , IPPROTO_AH = 51 , IPPROTO_BEETPH = 94 , IPPROTO_PIM = 103 , IPPROTO_COMP = 108 , IPPROTO_SCTP = 132 , IPPROTO_UDPLITE = 136 , IPPROTO_RAW = 255 , IPPROTO_MAX } ;
enum nf_inet_hooks { NF_INET_PRE_ROUTING , NF_INET_LOCAL_IN , NF_INET_FORWARD , NF_INET_LOCAL_OUT , NF_INET_POST_ROUTING , NF_INET_NUMHOOKS } ;
enum { NFPROTO_UNSPEC = 0 , NFPROTO_IPV4 = 2 , NFPROTO_ARP = 3 , NFPROTO_BRIDGE = 7 , NFPROTO_IPV6 = 10 , NFPROTO_DECNET = 12 , NFPROTO_NUMPROTO , } ;
struct nf_queue_entry ;
struct nf_conn ;
struct ebt_table ;
enum tcp_conntrack { TCP_CONNTRACK_NONE , TCP_CONNTRACK_SYN_SENT , TCP_CONNTRACK_SYN_RECV , TCP_CONNTRACK_ESTABLISHED , TCP_CONNTRACK_FIN_WAIT , TCP_CONNTRACK_CLOSE_WAIT , TCP_CONNTRACK_LAST_ACK , TCP_CONNTRACK_TIME_WAIT , TCP_CONNTRACK_CLOSE , TCP_CONNTRACK_LISTEN , TCP_CONNTRACK_MAX , TCP_CONNTRACK_IGNORE , TCP_CONNTRACK_RETRANS , TCP_CONNTRACK_UNACK , TCP_CONNTRACK_TIMEOUT_MAX } ;
struct nf_conntrack_ecache ;
enum udp_conntrack { UDP_CT_UNREPLIED , UDP_CT_REPLIED , UDP_CT_MAX } ;
enum { XFRM_POLICY_TYPE_MAIN = 0 , XFRM_POLICY_TYPE_SUB = 1 , XFRM_POLICY_TYPE_MAX = 2 , XFRM_POLICY_TYPE_ANY = 255 } ;
enum { XFRM_POLICY_IN = 0 , XFRM_POLICY_OUT = 1 , XFRM_POLICY_FWD = 2 , XFRM_POLICY_MASK = 3 , XFRM_POLICY_MAX = 3 } ;
enum { XFRM_SHARE_ANY , XFRM_SHARE_SESSION , XFRM_SHARE_USER , XFRM_SHARE_UNIQUE } ;
enum { XFRM_MSG_BASE = 0x10 , XFRM_MSG_NEWSA = 0x10 , XFRM_MSG_DELSA , XFRM_MSG_GETSA , XFRM_MSG_NEWPOLICY , XFRM_MSG_DELPOLICY , XFRM_MSG_GETPOLICY , XFRM_MSG_ALLOCSPI , XFRM_MSG_ACQUIRE , XFRM_MSG_EXPIRE , XFRM_MSG_UPDPOLICY , XFRM_MSG_UPDSA , XFRM_MSG_POLEXPIRE , XFRM_MSG_FLUSHSA , XFRM_MSG_FLUSHPOLICY , XFRM_MSG_NEWAE , XFRM_MSG_GETAE , XFRM_MSG_REPORT , XFRM_MSG_MIGRATE , XFRM_MSG_NEWSADINFO , XFRM_MSG_GETSADINFO , XFRM_MSG_NEWSPDINFO , XFRM_MSG_GETSPDINFO , XFRM_MSG_MAPPING , __XFRM_MSG_MAX } ;
enum xfrm_ae_ftype_t { XFRM_AE_UNSPEC , XFRM_AE_RTHR = 1 , XFRM_AE_RVAL = 2 , XFRM_AE_LVAL = 4 , XFRM_AE_ETHR = 8 , XFRM_AE_CR = 16 , XFRM_AE_CE = 32 , XFRM_AE_CU = 64 , __XFRM_AE_MAX } ;
enum xfrm_attr_type_t { XFRMA_UNSPEC , XFRMA_ALG_AUTH , XFRMA_ALG_CRYPT , XFRMA_ALG_COMP , XFRMA_ENCAP , XFRMA_TMPL , XFRMA_SA , XFRMA_POLICY , XFRMA_SEC_CTX , XFRMA_LTIME_VAL , XFRMA_REPLAY_VAL , XFRMA_REPLAY_THRESH , XFRMA_ETIMER_THRESH , XFRMA_SRCADDR , XFRMA_COADDR , XFRMA_LASTUSED , XFRMA_POLICY_TYPE , XFRMA_MIGRATE , XFRMA_ALG_AEAD , XFRMA_KMADDRESS , XFRMA_ALG_AUTH_TRUNC , XFRMA_MARK , XFRMA_TFCPAD , XFRMA_REPLAY_ESN_VAL , __XFRMA_MAX } ;
enum xfrm_sadattr_type_t { XFRMA_SAD_UNSPEC , XFRMA_SAD_CNT , XFRMA_SAD_HINFO , __XFRMA_SAD_MAX } ;
enum xfrm_spdattr_type_t { XFRMA_SPD_UNSPEC , XFRMA_SPD_INFO , XFRMA_SPD_HINFO , __XFRMA_SPD_MAX } ;
enum xfrm_nlgroups { XFRMNLGRP_NONE , XFRMNLGRP_ACQUIRE , XFRMNLGRP_EXPIRE , XFRMNLGRP_SA , XFRMNLGRP_POLICY , XFRMNLGRP_AEVENTS , XFRMNLGRP_REPORT , XFRMNLGRP_MIGRATE , XFRMNLGRP_MAPPING , __XFRMNLGRP_MAX } ;
struct user_namespace ;
struct net_generic ;
struct netns_ipvs ;
struct user_namespace ;
enum dcbnl_commands { DCB_CMD_UNDEFINED , DCB_CMD_GSTATE , DCB_CMD_SSTATE , DCB_CMD_PGTX_GCFG , DCB_CMD_PGTX_SCFG , DCB_CMD_PGRX_GCFG , DCB_CMD_PGRX_SCFG , DCB_CMD_PFC_GCFG , DCB_CMD_PFC_SCFG , DCB_CMD_SET_ALL , DCB_CMD_GPERM_HWADDR , DCB_CMD_GCAP , DCB_CMD_GNUMTCS , DCB_CMD_SNUMTCS , DCB_CMD_PFC_GSTATE , DCB_CMD_PFC_SSTATE , DCB_CMD_BCN_GCFG , DCB_CMD_BCN_SCFG , DCB_CMD_GAPP , DCB_CMD_SAPP , DCB_CMD_IEEE_SET , DCB_CMD_IEEE_GET , DCB_CMD_GDCBX , DCB_CMD_SDCBX , DCB_CMD_GFEATCFG , DCB_CMD_SFEATCFG , DCB_CMD_CEE_GET , DCB_CMD_IEEE_DEL , __DCB_CMD_ENUM_MAX , DCB_CMD_MAX = __DCB_CMD_ENUM_MAX - 1 , } ;
enum dcbnl_attrs { DCB_ATTR_UNDEFINED , DCB_ATTR_IFNAME , DCB_ATTR_STATE , DCB_ATTR_PFC_STATE , DCB_ATTR_PFC_CFG , DCB_ATTR_NUM_TC , DCB_ATTR_PG_CFG , DCB_ATTR_SET_ALL , DCB_ATTR_PERM_HWADDR , DCB_ATTR_CAP , DCB_ATTR_NUMTCS , DCB_ATTR_BCN , DCB_ATTR_APP , DCB_ATTR_IEEE , DCB_ATTR_DCBX , DCB_ATTR_FEATCFG , DCB_ATTR_CEE , __DCB_ATTR_ENUM_MAX , DCB_ATTR_MAX = __DCB_ATTR_ENUM_MAX - 1 , } ;
enum ieee_attrs { DCB_ATTR_IEEE_UNSPEC , DCB_ATTR_IEEE_ETS , DCB_ATTR_IEEE_PFC , DCB_ATTR_IEEE_APP_TABLE , DCB_ATTR_IEEE_PEER_ETS , DCB_ATTR_IEEE_PEER_PFC , DCB_ATTR_IEEE_PEER_APP , __DCB_ATTR_IEEE_MAX } ;
enum ieee_attrs_app { DCB_ATTR_IEEE_APP_UNSPEC , DCB_ATTR_IEEE_APP , __DCB_ATTR_IEEE_APP_MAX } ;
enum cee_attrs { DCB_ATTR_CEE_UNSPEC , DCB_ATTR_CEE_PEER_PG , DCB_ATTR_CEE_PEER_PFC , DCB_ATTR_CEE_PEER_APP_TABLE , DCB_ATTR_CEE_TX_PG , DCB_ATTR_CEE_RX_PG , DCB_ATTR_CEE_PFC , DCB_ATTR_CEE_APP_TABLE , DCB_ATTR_CEE_FEAT , __DCB_ATTR_CEE_MAX } ;
enum peer_app_attr { DCB_ATTR_CEE_PEER_APP_UNSPEC , DCB_ATTR_CEE_PEER_APP_INFO , DCB_ATTR_CEE_PEER_APP , __DCB_ATTR_CEE_PEER_APP_MAX } ;
enum cee_attrs_app { DCB_ATTR_CEE_APP_UNSPEC , DCB_ATTR_CEE_APP , __DCB_ATTR_CEE_APP_MAX } ;
enum dcbnl_pfc_up_attrs { DCB_PFC_UP_ATTR_UNDEFINED , DCB_PFC_UP_ATTR_0 , DCB_PFC_UP_ATTR_1 , DCB_PFC_UP_ATTR_2 , DCB_PFC_UP_ATTR_3 , DCB_PFC_UP_ATTR_4 , DCB_PFC_UP_ATTR_5 , DCB_PFC_UP_ATTR_6 , DCB_PFC_UP_ATTR_7 , DCB_PFC_UP_ATTR_ALL , __DCB_PFC_UP_ATTR_ENUM_MAX , DCB_PFC_UP_ATTR_MAX = __DCB_PFC_UP_ATTR_ENUM_MAX - 1 , } ;
enum dcbnl_pg_attrs { DCB_PG_ATTR_UNDEFINED , DCB_PG_ATTR_TC_0 , DCB_PG_ATTR_TC_1 , DCB_PG_ATTR_TC_2 , DCB_PG_ATTR_TC_3 , DCB_PG_ATTR_TC_4 , DCB_PG_ATTR_TC_5 , DCB_PG_ATTR_TC_6 , DCB_PG_ATTR_TC_7 , DCB_PG_ATTR_TC_MAX , DCB_PG_ATTR_TC_ALL , DCB_PG_ATTR_BW_ID_0 , DCB_PG_ATTR_BW_ID_1 , DCB_PG_ATTR_BW_ID_2 , DCB_PG_ATTR_BW_ID_3 , DCB_PG_ATTR_BW_ID_4 , DCB_PG_ATTR_BW_ID_5 , DCB_PG_ATTR_BW_ID_6 , DCB_PG_ATTR_BW_ID_7 , DCB_PG_ATTR_BW_ID_MAX , DCB_PG_ATTR_BW_ID_ALL , __DCB_PG_ATTR_ENUM_MAX , DCB_PG_ATTR_MAX = __DCB_PG_ATTR_ENUM_MAX - 1 , } ;
enum dcbnl_tc_attrs { DCB_TC_ATTR_PARAM_UNDEFINED , DCB_TC_ATTR_PARAM_PGID , DCB_TC_ATTR_PARAM_UP_MAPPING , DCB_TC_ATTR_PARAM_STRICT_PRIO , DCB_TC_ATTR_PARAM_BW_PCT , DCB_TC_ATTR_PARAM_ALL , __DCB_TC_ATTR_PARAM_ENUM_MAX , DCB_TC_ATTR_PARAM_MAX = __DCB_TC_ATTR_PARAM_ENUM_MAX - 1 , } ;
enum dcbnl_cap_attrs { DCB_CAP_ATTR_UNDEFINED , DCB_CAP_ATTR_ALL , DCB_CAP_ATTR_PG , DCB_CAP_ATTR_PFC , DCB_CAP_ATTR_UP2TC , DCB_CAP_ATTR_PG_TCS , DCB_CAP_ATTR_PFC_TCS , DCB_CAP_ATTR_GSP , DCB_CAP_ATTR_BCN , DCB_CAP_ATTR_DCBX , __DCB_CAP_ATTR_ENUM_MAX , DCB_CAP_ATTR_MAX = __DCB_CAP_ATTR_ENUM_MAX - 1 , } ;
enum dcbnl_numtcs_attrs { DCB_NUMTCS_ATTR_UNDEFINED , DCB_NUMTCS_ATTR_ALL , DCB_NUMTCS_ATTR_PG , DCB_NUMTCS_ATTR_PFC , __DCB_NUMTCS_ATTR_ENUM_MAX , DCB_NUMTCS_ATTR_MAX = __DCB_NUMTCS_ATTR_ENUM_MAX - 1 , } ;
enum dcbnl_bcn_attrs { DCB_BCN_ATTR_UNDEFINED = 0 , DCB_BCN_ATTR_RP_0 , DCB_BCN_ATTR_RP_1 , DCB_BCN_ATTR_RP_2 , DCB_BCN_ATTR_RP_3 , DCB_BCN_ATTR_RP_4 , DCB_BCN_ATTR_RP_5 , DCB_BCN_ATTR_RP_6 , DCB_BCN_ATTR_RP_7 , DCB_BCN_ATTR_RP_ALL , DCB_BCN_ATTR_BCNA_0 , DCB_BCN_ATTR_BCNA_1 , DCB_BCN_ATTR_ALPHA , DCB_BCN_ATTR_BETA , DCB_BCN_ATTR_GD , DCB_BCN_ATTR_GI , DCB_BCN_ATTR_TMAX , DCB_BCN_ATTR_TD , DCB_BCN_ATTR_RMIN , DCB_BCN_ATTR_W , DCB_BCN_ATTR_RD , DCB_BCN_ATTR_RU , DCB_BCN_ATTR_WRTT , DCB_BCN_ATTR_RI , DCB_BCN_ATTR_C , DCB_BCN_ATTR_ALL , __DCB_BCN_ATTR_ENUM_MAX , DCB_BCN_ATTR_MAX = __DCB_BCN_ATTR_ENUM_MAX - 1 , } ;
enum dcb_general_attr_values { DCB_ATTR_VALUE_UNDEFINED = 0xff } ;
enum dcbnl_app_attrs { DCB_APP_ATTR_UNDEFINED , DCB_APP_ATTR_IDTYPE , DCB_APP_ATTR_ID , DCB_APP_ATTR_PRIORITY , __DCB_APP_ATTR_ENUM_MAX , DCB_APP_ATTR_MAX = __DCB_APP_ATTR_ENUM_MAX - 1 , } ;
enum dcbnl_featcfg_attrs { DCB_FEATCFG_ATTR_UNDEFINED , DCB_FEATCFG_ATTR_ALL , DCB_FEATCFG_ATTR_PG , DCB_FEATCFG_ATTR_PFC , DCB_FEATCFG_ATTR_APP , __DCB_FEATCFG_ATTR_ENUM_MAX , DCB_FEATCFG_ATTR_MAX = __DCB_FEATCFG_ATTR_ENUM_MAX - 1 , } ;
enum { TASKSTATS_CMD_UNSPEC = 0 , TASKSTATS_CMD_GET , TASKSTATS_CMD_NEW , __TASKSTATS_CMD_MAX , } ;
enum { TASKSTATS_TYPE_UNSPEC = 0 , TASKSTATS_TYPE_PID , TASKSTATS_TYPE_TGID , TASKSTATS_TYPE_STATS , TASKSTATS_TYPE_AGGR_PID , TASKSTATS_TYPE_AGGR_TGID , TASKSTATS_TYPE_NULL , __TASKSTATS_TYPE_MAX , } ;
enum { TASKSTATS_CMD_ATTR_UNSPEC = 0 , TASKSTATS_CMD_ATTR_PID , TASKSTATS_CMD_ATTR_TGID , TASKSTATS_CMD_ATTR_REGISTER_CPUMASK , TASKSTATS_CMD_ATTR_DEREGISTER_CPUMASK , __TASKSTATS_CMD_ATTR_MAX , } ;
enum { CGROUPSTATS_CMD_UNSPEC = __TASKSTATS_CMD_MAX , CGROUPSTATS_CMD_GET , CGROUPSTATS_CMD_NEW , __CGROUPSTATS_CMD_MAX , } ;
enum { CGROUPSTATS_TYPE_UNSPEC = 0 , CGROUPSTATS_TYPE_CGROUP_STATS , __CGROUPSTATS_TYPE_MAX , } ;
enum { CGROUPSTATS_CMD_ATTR_UNSPEC = 0 , CGROUPSTATS_CMD_ATTR_FD , __CGROUPSTATS_CMD_ATTR_MAX , } ;
struct cgroupfs_root ;
struct css_id ;
enum cgroup_subsys_id { cpuset_subsys_id , cpu_cgroup_subsys_id , cpuacct_subsys_id , devices_subsys_id , freezer_subsys_id , net_cls_subsys_id , blkio_subsys_id , perf_subsys_id , CGROUP_SUBSYS_COUNT , } ;
enum { CSS_ROOT = ( 1 << 0 ) , CSS_ONLINE = ( 1 << 1 ) , } ;
enum { CGRP_REMOVED , CGRP_RELEASABLE , CGRP_NOTIFY_ON_RELEASE , CGRP_CPUSET_CLONE_CHILDREN , } ;
struct cgroup_taskset ;
struct linux_binprm ;
struct audit_context ;
struct shmid_kernel ;
struct msg_msg ;
struct msg_queue ;
struct audit_krule ;
struct user_namespace ;
struct xfrm_policy ;
struct xfrm_state ;
struct mnt_namespace ;
struct uts_namespace ;
struct ipc_namespace ;
struct pid_namespace ;
struct fs_struct ;
enum { NETLINK_UNCONNECTED = 0 , NETLINK_CONNECTED , } ;
enum { NDA_UNSPEC , NDA_DST , NDA_LLADDR , NDA_CACHEINFO , NDA_PROBES , __NDA_MAX } ;
enum { NDTPA_UNSPEC , NDTPA_IFINDEX , NDTPA_REFCNT , NDTPA_REACHABLE_TIME , NDTPA_BASE_REACHABLE_TIME , NDTPA_RETRANS_TIME , NDTPA_GC_STALETIME , NDTPA_DELAY_PROBE_TIME , NDTPA_QUEUE_LEN , NDTPA_APP_PROBES , NDTPA_UCAST_PROBES , NDTPA_MCAST_PROBES , NDTPA_ANYCAST_DELAY , NDTPA_PROXY_DELAY , NDTPA_PROXY_QLEN , NDTPA_LOCKTIME , __NDTPA_MAX } ;
enum { NDTA_UNSPEC , NDTA_NAME , NDTA_THRESH1 , NDTA_THRESH2 , NDTA_THRESH3 , NDTA_CONFIG , NDTA_PARMS , NDTA_STATS , NDTA_GC_INTERVAL , __NDTA_MAX } ;
enum tpacket_versions { TPACKET_V1 , TPACKET_V2 , TPACKET_V3 } ;
enum { IFLA_UNSPEC , IFLA_ADDRESS , IFLA_BROADCAST , IFLA_IFNAME , IFLA_MTU , IFLA_LINK , IFLA_QDISC , IFLA_STATS , IFLA_COST , IFLA_PRIORITY , IFLA_MASTER , IFLA_WIRELESS , IFLA_PROTINFO , IFLA_TXQLEN , IFLA_MAP , IFLA_WEIGHT , IFLA_OPERSTATE , IFLA_LINKMODE , IFLA_LINKINFO , IFLA_NET_NS_PID , IFLA_IFALIAS , IFLA_NUM_VF , IFLA_VFINFO_LIST , IFLA_STATS64 , IFLA_VF_PORTS , IFLA_PORT_SELF , IFLA_AF_SPEC , IFLA_GROUP , IFLA_NET_NS_FD , IFLA_EXT_MASK , IFLA_PROMISCUITY , IFLA_NUM_TX_QUEUES , IFLA_NUM_RX_QUEUES , __IFLA_MAX } ;
enum { IFLA_INET_UNSPEC , IFLA_INET_CONF , __IFLA_INET_MAX , } ;
enum { IFLA_INET6_UNSPEC , IFLA_INET6_FLAGS , IFLA_INET6_CONF , IFLA_INET6_STATS , IFLA_INET6_MCAST , IFLA_INET6_CACHEINFO , IFLA_INET6_ICMP6STATS , __IFLA_INET6_MAX } ;
enum { BRIDGE_MODE_UNSPEC , BRIDGE_MODE_HAIRPIN , } ;
enum { IFLA_BRPORT_UNSPEC , IFLA_BRPORT_STATE , IFLA_BRPORT_PRIORITY , IFLA_BRPORT_COST , IFLA_BRPORT_MODE , IFLA_BRPORT_GUARD , IFLA_BRPORT_PROTECT , IFLA_BRPORT_FAST_LEAVE , __IFLA_BRPORT_MAX } ;
enum { IFLA_INFO_UNSPEC , IFLA_INFO_KIND , IFLA_INFO_DATA , IFLA_INFO_XSTATS , __IFLA_INFO_MAX , } ;
enum { IFLA_VLAN_UNSPEC , IFLA_VLAN_ID , IFLA_VLAN_FLAGS , IFLA_VLAN_EGRESS_QOS , IFLA_VLAN_INGRESS_QOS , __IFLA_VLAN_MAX , } ;
enum { IFLA_VLAN_QOS_UNSPEC , IFLA_VLAN_QOS_MAPPING , __IFLA_VLAN_QOS_MAX } ;
enum { IFLA_MACVLAN_UNSPEC , IFLA_MACVLAN_MODE , IFLA_MACVLAN_FLAGS , __IFLA_MACVLAN_MAX , } ;
enum macvlan_mode { MACVLAN_MODE_PRIVATE = 1 , MACVLAN_MODE_VEPA = 2 , MACVLAN_MODE_BRIDGE = 4 , MACVLAN_MODE_PASSTHRU = 8 , } ;
enum { IFLA_VXLAN_UNSPEC , IFLA_VXLAN_ID , IFLA_VXLAN_GROUP , IFLA_VXLAN_LINK , IFLA_VXLAN_LOCAL , IFLA_VXLAN_TTL , IFLA_VXLAN_TOS , IFLA_VXLAN_LEARNING , IFLA_VXLAN_AGEING , IFLA_VXLAN_LIMIT , IFLA_VXLAN_PORT_RANGE , IFLA_VXLAN_PROXY , IFLA_VXLAN_RSC , IFLA_VXLAN_L2MISS , IFLA_VXLAN_L3MISS , __IFLA_VXLAN_MAX } ;
enum { IFLA_VF_INFO_UNSPEC , IFLA_VF_INFO , __IFLA_VF_INFO_MAX , } ;
enum { IFLA_VF_UNSPEC , IFLA_VF_MAC , IFLA_VF_VLAN , IFLA_VF_TX_RATE , IFLA_VF_SPOOFCHK , __IFLA_VF_MAX , } ;
enum { IFLA_VF_PORT_UNSPEC , IFLA_VF_PORT , __IFLA_VF_PORT_MAX , } ;
enum { IFLA_PORT_UNSPEC , IFLA_PORT_VF , IFLA_PORT_PROFILE , IFLA_PORT_VSI_TYPE , IFLA_PORT_INSTANCE_UUID , IFLA_PORT_HOST_UUID , IFLA_PORT_REQUEST , IFLA_PORT_RESPONSE , __IFLA_PORT_MAX , } ;
enum { PORT_REQUEST_PREASSOCIATE = 0 , PORT_REQUEST_PREASSOCIATE_RR , PORT_REQUEST_ASSOCIATE , PORT_REQUEST_DISASSOCIATE , } ;
enum { PORT_VDP_RESPONSE_SUCCESS = 0 , PORT_VDP_RESPONSE_INVALID_FORMAT , PORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES , PORT_VDP_RESPONSE_UNUSED_VTID , PORT_VDP_RESPONSE_VTID_VIOLATION , PORT_VDP_RESPONSE_VTID_VERSION_VIOALTION , PORT_VDP_RESPONSE_OUT_OF_SYNC , PORT_PROFILE_RESPONSE_SUCCESS = 0x100 , PORT_PROFILE_RESPONSE_INPROGRESS , PORT_PROFILE_RESPONSE_INVALID , PORT_PROFILE_RESPONSE_BADSTATE , PORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES , PORT_PROFILE_RESPONSE_ERROR , } ;
enum { IFLA_IPOIB_UNSPEC , IFLA_IPOIB_PKEY , IFLA_IPOIB_MODE , IFLA_IPOIB_UMCAST , __IFLA_IPOIB_MAX } ;
enum { IPOIB_MODE_DATAGRAM = 0 , IPOIB_MODE_CONNECTED = 1 , } ;
enum { IF_PORT_UNKNOWN = 0 , IF_PORT_10BASE2 , IF_PORT_10BASET , IF_PORT_AUI , IF_PORT_100BASET , IF_PORT_100BASETX , IF_PORT_100BASEFX } ;
struct netpoll_info ;
struct wireless_dev ;
enum netdev_tx { __NETDEV_TX_MIN = ( - ( ( int ) ( ~ 0U >> 1 ) ) - 1 ) , NETDEV_TX_OK = 0x00 , NETDEV_TX_BUSY = 0x10 , NETDEV_TX_LOCKED = 0x20 , } ;
enum netdev_state_t { __LINK_STATE_START , __LINK_STATE_PRESENT , __LINK_STATE_NOCARRIER , __LINK_STATE_LINKWATCH_PENDING , __LINK_STATE_DORMANT , } ;
enum { NAPI_STATE_SCHED , NAPI_STATE_DISABLE , NAPI_STATE_NPSVC , } ;
enum gro_result { GRO_MERGED , GRO_MERGED_FREE , GRO_HELD , GRO_NORMAL , GRO_DROP , } ;
enum rx_handler_result { RX_HANDLER_CONSUMED , RX_HANDLER_ANOTHER , RX_HANDLER_EXACT , RX_HANDLER_PASS , } ;
enum netdev_queue_state_t { __QUEUE_STATE_DRV_XOFF , __QUEUE_STATE_STACK_XOFF , __QUEUE_STATE_FROZEN , } ;
enum { NETIF_MSG_DRV = 0x0001 , NETIF_MSG_PROBE = 0x0002 , NETIF_MSG_LINK = 0x0004 , NETIF_MSG_TIMER = 0x0008 , NETIF_MSG_IFDOWN = 0x0010 , NETIF_MSG_IFUP = 0x0020 , NETIF_MSG_RX_ERR = 0x0040 , NETIF_MSG_TX_ERR = 0x0080 , NETIF_MSG_TX_QUEUED = 0x0100 , NETIF_MSG_INTR = 0x0200 , NETIF_MSG_TX_DONE = 0x0400 , NETIF_MSG_RX_STATUS = 0x0800 , NETIF_MSG_PKTDATA = 0x1000 , NETIF_MSG_HW = 0x2000 , NETIF_MSG_WOL = 0x4000 , } ;
enum { IFA_UNSPEC , IFA_ADDRESS , IFA_LOCAL , IFA_LABEL , IFA_BROADCAST , IFA_ANYCAST , IFA_CACHEINFO , IFA_MULTICAST , __IFA_MAX , } ;
enum { RTM_BASE = 16 , RTM_NEWLINK = 16 , RTM_DELLINK , RTM_GETLINK , RTM_SETLINK , RTM_NEWADDR = 20 , RTM_DELADDR , RTM_GETADDR , RTM_NEWROUTE = 24 , RTM_DELROUTE , RTM_GETROUTE , RTM_NEWNEIGH = 28 , RTM_DELNEIGH , RTM_GETNEIGH , RTM_NEWRULE = 32 , RTM_DELRULE , RTM_GETRULE , RTM_NEWQDISC = 36 , RTM_DELQDISC , RTM_GETQDISC , RTM_NEWTCLASS = 40 , RTM_DELTCLASS , RTM_GETTCLASS , RTM_NEWTFILTER = 44 , RTM_DELTFILTER , RTM_GETTFILTER , RTM_NEWACTION = 48 , RTM_DELACTION , RTM_GETACTION , RTM_NEWPREFIX = 52 , RTM_GETMULTICAST = 58 , RTM_GETANYCAST = 62 , RTM_NEWNEIGHTBL = 64 , RTM_GETNEIGHTBL = 66 , RTM_SETNEIGHTBL , RTM_NEWNDUSEROPT = 68 , RTM_NEWADDRLABEL = 72 , RTM_DELADDRLABEL , RTM_GETADDRLABEL , RTM_GETDCB = 78 , RTM_SETDCB , RTM_NEWNETCONF = 80 , RTM_GETNETCONF = 82 , RTM_NEWMDB = 84 , RTM_DELMDB = 85 , RTM_GETMDB = 86 , __RTM_MAX , } ;
enum { RTN_UNSPEC , RTN_UNICAST , RTN_LOCAL , RTN_BROADCAST , RTN_ANYCAST , RTN_MULTICAST , RTN_BLACKHOLE , RTN_UNREACHABLE , RTN_PROHIBIT , RTN_THROW , RTN_NAT , RTN_XRESOLVE , __RTN_MAX } ;
enum rt_scope_t { RT_SCOPE_UNIVERSE = 0 , RT_SCOPE_SITE = 200 , RT_SCOPE_LINK = 253 , RT_SCOPE_HOST = 254 , RT_SCOPE_NOWHERE = 255 } ;
enum rt_class_t { RT_TABLE_UNSPEC = 0 , RT_TABLE_COMPAT = 252 , RT_TABLE_DEFAULT = 253 , RT_TABLE_MAIN = 254 , RT_TABLE_LOCAL = 255 , RT_TABLE_MAX = 0xFFFFFFFF } ;
enum rtattr_type_t { RTA_UNSPEC , RTA_DST , RTA_SRC , RTA_IIF , RTA_OIF , RTA_GATEWAY , RTA_PRIORITY , RTA_PREFSRC , RTA_METRICS , RTA_MULTIPATH , RTA_PROTOINFO , RTA_FLOW , RTA_CACHEINFO , RTA_SESSION , RTA_MP_ALGO , RTA_TABLE , RTA_MARK , RTA_MFC_STATS , __RTA_MAX } ;
enum { RTAX_UNSPEC , RTAX_LOCK , RTAX_MTU , RTAX_WINDOW , RTAX_RTT , RTAX_RTTVAR , RTAX_SSTHRESH , RTAX_CWND , RTAX_ADVMSS , RTAX_REORDERING , RTAX_HOPLIMIT , RTAX_INITCWND , RTAX_FEATURES , RTAX_RTO_MIN , RTAX_INITRWND , __RTAX_MAX } ;
enum { PREFIX_UNSPEC , PREFIX_ADDRESS , PREFIX_CACHEINFO , __PREFIX_MAX } ;
enum { TCA_UNSPEC , TCA_KIND , TCA_OPTIONS , TCA_STATS , TCA_XSTATS , TCA_RATE , TCA_FCNT , TCA_STATS2 , TCA_STAB , __TCA_MAX } ;
enum { NDUSEROPT_UNSPEC , NDUSEROPT_SRCADDR , __NDUSEROPT_MAX } ;
enum rtnetlink_groups { RTNLGRP_NONE , RTNLGRP_LINK , RTNLGRP_NOTIFY , RTNLGRP_NEIGH , RTNLGRP_TC , RTNLGRP_IPV4_IFADDR , RTNLGRP_IPV4_MROUTE , RTNLGRP_IPV4_ROUTE , RTNLGRP_IPV4_RULE , RTNLGRP_IPV6_IFADDR , RTNLGRP_IPV6_MROUTE , RTNLGRP_IPV6_ROUTE , RTNLGRP_IPV6_IFINFO , RTNLGRP_DECnet_IFADDR , RTNLGRP_NOP2 , RTNLGRP_DECnet_ROUTE , RTNLGRP_DECnet_RULE , RTNLGRP_NOP4 , RTNLGRP_IPV6_PREFIX , RTNLGRP_IPV6_RULE , RTNLGRP_ND_USEROPT , RTNLGRP_PHONET_IFADDR , RTNLGRP_PHONET_ROUTE , RTNLGRP_DCB , RTNLGRP_IPV4_NETCONF , RTNLGRP_IPV6_NETCONF , RTNLGRP_MDB , __RTNLGRP_MAX } ;
enum vlan_ioctl_cmds { ADD_VLAN_CMD , DEL_VLAN_CMD , SET_VLAN_INGRESS_PRIORITY_CMD , SET_VLAN_EGRESS_PRIORITY_CMD , GET_VLAN_INGRESS_PRIORITY_CMD , GET_VLAN_EGRESS_PRIORITY_CMD , SET_VLAN_NAME_TYPE_CMD , SET_VLAN_FLAG_CMD , GET_VLAN_REALDEV_NAME_CMD , GET_VLAN_VID_CMD } ;
enum vlan_flags { VLAN_FLAG_REORDER_HDR = 0x1 , VLAN_FLAG_GVRP = 0x2 , VLAN_FLAG_LOOSE_BINDING = 0x4 , } ;
enum vlan_name_types { VLAN_NAME_TYPE_PLUS_VID , VLAN_NAME_TYPE_RAW_PLUS_VID , VLAN_NAME_TYPE_PLUS_VID_NO_PAD , VLAN_NAME_TYPE_RAW_PLUS_VID_NO_PAD , VLAN_NAME_TYPE_HIGHEST } ;
enum mapping_flags { AS_EIO = 25 + 0 , AS_ENOSPC = 25 + 1 , AS_MM_ALL_LOCKS = 25 + 2 , AS_UNEVICTABLE = 25 + 3 , AS_BALLOON_MAP = 25 + 4 , } ;
enum { DEVCONF_FORWARDING = 0 , DEVCONF_HOPLIMIT , DEVCONF_MTU6 , DEVCONF_ACCEPT_RA , DEVCONF_ACCEPT_REDIRECTS , DEVCONF_AUTOCONF , DEVCONF_DAD_TRANSMITS , DEVCONF_RTR_SOLICITS , DEVCONF_RTR_SOLICIT_INTERVAL , DEVCONF_RTR_SOLICIT_DELAY , DEVCONF_USE_TEMPADDR , DEVCONF_TEMP_VALID_LFT , DEVCONF_TEMP_PREFERED_LFT , DEVCONF_REGEN_MAX_RETRY , DEVCONF_MAX_DESYNC_FACTOR , DEVCONF_MAX_ADDRESSES , DEVCONF_FORCE_MLD_VERSION , DEVCONF_ACCEPT_RA_DEFRTR , DEVCONF_ACCEPT_RA_PINFO , DEVCONF_ACCEPT_RA_RTR_PREF , DEVCONF_RTR_PROBE_INTERVAL , DEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN , DEVCONF_PROXY_NDP , DEVCONF_OPTIMISTIC_DAD , DEVCONF_ACCEPT_SOURCE_ROUTE , DEVCONF_MC_FORWARDING , DEVCONF_DISABLE_IPV6 , DEVCONF_ACCEPT_DAD , DEVCONF_FORCE_TLLAO , DEVCONF_NDISC_NOTIFY , DEVCONF_MAX } ;
struct mem_cgroup ;
struct page_cgroup ;
enum mem_cgroup_page_stat_item { MEMCG_NR_FILE_MAPPED , } ;
struct mem_cgroup ;
enum { UNDER_LIMIT , SOFT_LIMIT , OVER_LIMIT , } ;
enum { RES_USAGE , RES_MAX_USAGE , RES_LIMIT , RES_FAILCNT , RES_SOFT_LIMIT , } ;
enum { BPF_S_RET_K = 1 , BPF_S_RET_A , BPF_S_ALU_ADD_K , BPF_S_ALU_ADD_X , BPF_S_ALU_SUB_K , BPF_S_ALU_SUB_X , BPF_S_ALU_MUL_K , BPF_S_ALU_MUL_X , BPF_S_ALU_DIV_X , BPF_S_ALU_MOD_K , BPF_S_ALU_MOD_X , BPF_S_ALU_AND_K , BPF_S_ALU_AND_X , BPF_S_ALU_OR_K , BPF_S_ALU_OR_X , BPF_S_ALU_XOR_K , BPF_S_ALU_XOR_X , BPF_S_ALU_LSH_K , BPF_S_ALU_LSH_X , BPF_S_ALU_RSH_K , BPF_S_ALU_RSH_X , BPF_S_ALU_NEG , BPF_S_LD_W_ABS , BPF_S_LD_H_ABS , BPF_S_LD_B_ABS , BPF_S_LD_W_LEN , BPF_S_LD_W_IND , BPF_S_LD_H_IND , BPF_S_LD_B_IND , BPF_S_LD_IMM , BPF_S_LDX_W_LEN , BPF_S_LDX_B_MSH , BPF_S_LDX_IMM , BPF_S_MISC_TAX , BPF_S_MISC_TXA , BPF_S_ALU_DIV_K , BPF_S_LD_MEM , BPF_S_LDX_MEM , BPF_S_ST , BPF_S_STX , BPF_S_JMP_JA , BPF_S_JMP_JEQ_K , BPF_S_JMP_JEQ_X , BPF_S_JMP_JGE_K , BPF_S_JMP_JGE_X , BPF_S_JMP_JGT_K , BPF_S_JMP_JGT_X , BPF_S_JMP_JSET_K , BPF_S_JMP_JSET_X , BPF_S_ANC_PROTOCOL , BPF_S_ANC_PKTTYPE , BPF_S_ANC_IFINDEX , BPF_S_ANC_NLATTR , BPF_S_ANC_NLATTR_NEST , BPF_S_ANC_MARK , BPF_S_ANC_QUEUE , BPF_S_ANC_HATYPE , BPF_S_ANC_RXHASH , BPF_S_ANC_CPU , BPF_S_ANC_ALU_XOR_X , BPF_S_ANC_SECCOMP_LD_W , BPF_S_ANC_VLAN_TAG , BPF_S_ANC_VLAN_TAG_PRESENT , } ;
enum { NLA_UNSPEC , NLA_U8 , NLA_U16 , NLA_U32 , NLA_U64 , NLA_STRING , NLA_FLAG , NLA_MSECS , NLA_NESTED , NLA_NESTED_COMPAT , NLA_NUL_STRING , NLA_BINARY , NLA_S8 , NLA_S16 , NLA_S32 , NLA_S64 , __NLA_TYPE_MAX , } ;
enum { XFRM_LOOKUP_ICMP = 1 << 0 , } ;
enum sock_flags { SOCK_DEAD , SOCK_DONE , SOCK_URGINLINE , SOCK_KEEPOPEN , SOCK_LINGER , SOCK_DESTROY , SOCK_BROADCAST , SOCK_TIMESTAMP , SOCK_ZAPPED , SOCK_USE_WRITE_QUEUE , SOCK_DBG , SOCK_RCVTSTAMP , SOCK_RCVTSTAMPNS , SOCK_LOCALROUTE , SOCK_QUEUE_SHRUNK , SOCK_MEMALLOC , SOCK_TIMESTAMPING_TX_HARDWARE , SOCK_TIMESTAMPING_TX_SOFTWARE , SOCK_TIMESTAMPING_RX_HARDWARE , SOCK_TIMESTAMPING_RX_SOFTWARE , SOCK_TIMESTAMPING_SOFTWARE , SOCK_TIMESTAMPING_RAW_HARDWARE , SOCK_TIMESTAMPING_SYS_HARDWARE , SOCK_FASYNC , SOCK_RXQ_OVFL , SOCK_ZEROCOPY , SOCK_WIFI_STATUS , SOCK_NOFCS , } ;
struct inet_hashinfo ;
struct raw_hashinfo ;
enum cg_proto_flags { MEMCG_SOCK_ACTIVE , MEMCG_SOCK_ACTIVATED , } ;
struct request_values { } ;
struct ip_mc_socklist ;
struct rtable ;
struct inet_bind_bucket ;
struct tcp_congestion_ops ;
enum inet_csk_ack_state_t { ICSK_ACK_SCHED = 1 , ICSK_ACK_TIMER = 2 , ICSK_ACK_PUSHED = 4 , ICSK_ACK_PUSHED2 = 8 } ;
enum { TCP_ESTABLISHED = 1 , TCP_SYN_SENT , TCP_SYN_RECV , TCP_FIN_WAIT1 , TCP_FIN_WAIT2 , TCP_TIME_WAIT , TCP_CLOSE , TCP_CLOSE_WAIT , TCP_LAST_ACK , TCP_LISTEN , TCP_CLOSING , TCP_MAX_STATES } ;
enum { TCPF_ESTABLISHED = ( 1 << 1 ) , TCPF_SYN_SENT = ( 1 << 2 ) , TCPF_SYN_RECV = ( 1 << 3 ) , TCPF_FIN_WAIT1 = ( 1 << 4 ) , TCPF_FIN_WAIT2 = ( 1 << 5 ) , TCPF_TIME_WAIT = ( 1 << 6 ) , TCPF_CLOSE = ( 1 << 7 ) , TCPF_CLOSE_WAIT = ( 1 << 8 ) , TCPF_LAST_ACK = ( 1 << 9 ) , TCPF_LISTEN = ( 1 << 10 ) , TCPF_CLOSING = ( 1 << 11 ) } ;
struct inet_hashinfo ;
struct inet_bind_bucket ;
enum { TCP_NO_QUEUE , TCP_RECV_QUEUE , TCP_SEND_QUEUE , TCP_QUEUES_NR , } ;
enum tcp_ca_state { TCP_CA_Open = 0 , TCP_CA_Disorder = 1 , TCP_CA_CWR = 2 , TCP_CA_Recovery = 3 , TCP_CA_Loss = 4 } ;
struct tcp_cookie_values ;
struct tcp_request_sock_ops ;
enum tsq_flags { TSQ_THROTTLED , TSQ_QUEUED , TCP_TSQ_DEFERRED , TCP_WRITE_TIMER_DEFERRED , TCP_DELACK_TIMER_DEFERRED , TCP_MTU_REDUCED_DEFERRED , } ;
struct ipv6_mc_socklist ;
struct ipv6_ac_socklist ;
struct ipv6_fl_socklist ;
enum { TCA_STAB_UNSPEC , TCA_STAB_BASE , TCA_STAB_DATA , __TCA_STAB_MAX } ;
enum { TCA_TBF_UNSPEC , TCA_TBF_PARMS , TCA_TBF_RTAB , TCA_TBF_PTAB , __TCA_TBF_MAX , } ;
enum { TCA_RED_UNSPEC , TCA_RED_PARMS , TCA_RED_STAB , __TCA_RED_MAX , } ;
enum { TCA_GRED_UNSPEC , TCA_GRED_PARMS , TCA_GRED_STAB , TCA_GRED_DPS , __TCA_GRED_MAX , } ;
enum { TCA_CHOKE_UNSPEC , TCA_CHOKE_PARMS , TCA_CHOKE_STAB , __TCA_CHOKE_MAX , } ;
enum { TCA_HTB_UNSPEC , TCA_HTB_PARMS , TCA_HTB_INIT , TCA_HTB_CTAB , TCA_HTB_RTAB , __TCA_HTB_MAX , } ;
enum { TCA_HFSC_UNSPEC , TCA_HFSC_RSC , TCA_HFSC_FSC , TCA_HFSC_USC , __TCA_HFSC_MAX , } ;
enum { TCA_CBQ_UNSPEC , TCA_CBQ_LSSOPT , TCA_CBQ_WRROPT , TCA_CBQ_FOPT , TCA_CBQ_OVL_STRATEGY , TCA_CBQ_RATE , TCA_CBQ_RTAB , TCA_CBQ_POLICE , __TCA_CBQ_MAX , } ;
enum { TCA_DSMARK_UNSPEC , TCA_DSMARK_INDICES , TCA_DSMARK_DEFAULT_INDEX , TCA_DSMARK_SET_TC_INDEX , TCA_DSMARK_MASK , TCA_DSMARK_VALUE , __TCA_DSMARK_MAX , } ;
enum { TCA_ATM_UNSPEC , TCA_ATM_FD , TCA_ATM_PTR , TCA_ATM_HDR , TCA_ATM_EXCESS , TCA_ATM_ADDR , TCA_ATM_STATE , __TCA_ATM_MAX , } ;
enum { TCA_NETEM_UNSPEC , TCA_NETEM_CORR , TCA_NETEM_DELAY_DIST , TCA_NETEM_REORDER , TCA_NETEM_CORRUPT , TCA_NETEM_LOSS , __TCA_NETEM_MAX , } ;
enum { NETEM_LOSS_UNSPEC , NETEM_LOSS_GI , NETEM_LOSS_GE , __NETEM_LOSS_MAX } ;
enum { TCA_DRR_UNSPEC , TCA_DRR_QUANTUM , __TCA_DRR_MAX } ;
enum { TCA_SFB_UNSPEC , TCA_SFB_PARMS , __TCA_SFB_MAX , } ;
enum { TCA_QFQ_UNSPEC , TCA_QFQ_WEIGHT , TCA_QFQ_LMAX , __TCA_QFQ_MAX } ;
enum { TCA_ACT_UNSPEC , TCA_ACT_KIND , TCA_ACT_OPTIONS , TCA_ACT_INDEX , TCA_ACT_STATS , __TCA_ACT_MAX } ;
enum { TCA_ID_UNSPEC = 0 , TCA_ID_POLICE = 1 , __TCA_ID_MAX = 255 } ;
enum { TCA_POLICE_UNSPEC , TCA_POLICE_TBF , TCA_POLICE_RATE , TCA_POLICE_PEAKRATE , TCA_POLICE_AVRATE , TCA_POLICE_RESULT , __TCA_POLICE_MAX } ;
enum { TCA_U32_UNSPEC , TCA_U32_CLASSID , TCA_U32_HASH , TCA_U32_LINK , TCA_U32_DIVISOR , TCA_U32_SEL , TCA_U32_POLICE , TCA_U32_ACT , TCA_U32_INDEV , TCA_U32_PCNT , TCA_U32_MARK , __TCA_U32_MAX } ;
enum { TCA_RSVP_UNSPEC , TCA_RSVP_CLASSID , TCA_RSVP_DST , TCA_RSVP_SRC , TCA_RSVP_PINFO , TCA_RSVP_POLICE , TCA_RSVP_ACT , __TCA_RSVP_MAX } ;
enum { TCA_ROUTE4_UNSPEC , TCA_ROUTE4_CLASSID , TCA_ROUTE4_TO , TCA_ROUTE4_FROM , TCA_ROUTE4_IIF , TCA_ROUTE4_POLICE , TCA_ROUTE4_ACT , __TCA_ROUTE4_MAX } ;
enum { TCA_FW_UNSPEC , TCA_FW_CLASSID , TCA_FW_POLICE , TCA_FW_INDEV , TCA_FW_ACT , TCA_FW_MASK , __TCA_FW_MAX } ;
enum { TCA_TCINDEX_UNSPEC , TCA_TCINDEX_HASH , TCA_TCINDEX_MASK , TCA_TCINDEX_SHIFT , TCA_TCINDEX_FALL_THROUGH , TCA_TCINDEX_CLASSID , TCA_TCINDEX_POLICE , TCA_TCINDEX_ACT , __TCA_TCINDEX_MAX } ;
enum { FLOW_KEY_SRC , FLOW_KEY_DST , FLOW_KEY_PROTO , FLOW_KEY_PROTO_SRC , FLOW_KEY_PROTO_DST , FLOW_KEY_IIF , FLOW_KEY_PRIORITY , FLOW_KEY_MARK , FLOW_KEY_NFCT , FLOW_KEY_NFCT_SRC , FLOW_KEY_NFCT_DST , FLOW_KEY_NFCT_PROTO_SRC , FLOW_KEY_NFCT_PROTO_DST , FLOW_KEY_RTCLASSID , FLOW_KEY_SKUID , FLOW_KEY_SKGID , FLOW_KEY_VLAN_TAG , FLOW_KEY_RXHASH , __FLOW_KEY_MAX , } ;
enum { FLOW_MODE_MAP , FLOW_MODE_HASH , } ;
enum { TCA_FLOW_UNSPEC , TCA_FLOW_KEYS , TCA_FLOW_MODE , TCA_FLOW_BASECLASS , TCA_FLOW_RSHIFT , TCA_FLOW_ADDEND , TCA_FLOW_MASK , TCA_FLOW_XOR , TCA_FLOW_DIVISOR , TCA_FLOW_ACT , TCA_FLOW_POLICE , TCA_FLOW_EMATCHES , TCA_FLOW_PERTURB , __TCA_FLOW_MAX } ;
enum { TCA_BASIC_UNSPEC , TCA_BASIC_CLASSID , TCA_BASIC_EMATCHES , TCA_BASIC_ACT , TCA_BASIC_POLICE , __TCA_BASIC_MAX } ;
enum { TCA_CGROUP_UNSPEC , TCA_CGROUP_ACT , TCA_CGROUP_POLICE , TCA_CGROUP_EMATCHES , __TCA_CGROUP_MAX , } ;
enum { TCA_EMATCH_TREE_UNSPEC , TCA_EMATCH_TREE_HDR , TCA_EMATCH_TREE_LIST , __TCA_EMATCH_TREE_MAX } ;
enum { TCF_LAYER_LINK , TCF_LAYER_NETWORK , TCF_LAYER_TRANSPORT , __TCF_LAYER_MAX } ;
enum { TCF_EM_PROG_TC } ;
enum { TCF_EM_OPND_EQ , TCF_EM_OPND_GT , TCF_EM_OPND_LT } ;
enum { TCA_STATS_UNSPEC , TCA_STATS_BASIC , TCA_STATS_RATE_EST , TCA_STATS_QUEUE , TCA_STATS_APP , __TCA_STATS_MAX , } ;
struct tcf_walker ;
enum qdisc_state_t { __QDISC_STATE_SCHED , __QDISC_STATE_DEACTIVATED , __QDISC_STATE_THROTTLED , } ;
enum qdisc___state_t { __QDISC___STATE_RUNNING = 1 , } ;
enum net_xmit_qdisc_t { __NET_XMIT_STOLEN = 0x00010000 , __NET_XMIT_BYPASS = 0x00020000 , } ;
enum reboot_type { BOOT_TRIPLE = 't' , BOOT_KBD = 'k' , BOOT_BIOS = 'b' , BOOT_ACPI = 'a' , BOOT_EFI = 'e' , BOOT_CF9 = 'p' , BOOT_CF9_COND = 'q' , } ;
enum { DOS_EXTENDED_PARTITION = 5 , LINUX_EXTENDED_PARTITION = 0x85 , WIN98_EXTENDED_PARTITION = 0x0f , SUN_WHOLE_DISK = DOS_EXTENDED_PARTITION , LINUX_SWAP_PARTITION = 0x82 , LINUX_DATA_PARTITION = 0x83 , LINUX_LVM_PARTITION = 0x8e , LINUX_RAID_PARTITION = 0xfd , SOLARIS_X86_PARTITION = LINUX_SWAP_PARTITION , NEW_SOLARIS_X86_PARTITION = 0xbf , DM6_AUX1PARTITION = 0x51 , DM6_AUX3PARTITION = 0x53 , DM6_PARTITION = 0x54 , EZD_PARTITION = 0x55 , FREEBSD_PARTITION = 0xa5 , OPENBSD_PARTITION = 0xa6 , NETBSD_PARTITION = 0xa9 , BSDI_PARTITION = 0xb7 , MINIX_PARTITION = 0x81 , UNIXWARE_PARTITION = 0x63 , } ;
enum { DISK_EVENT_MEDIA_CHANGE = 1 << 0 , DISK_EVENT_EJECT_REQUEST = 1 << 1 , } ;
struct disk_events ;
enum writeback_sync_modes { WB_SYNC_NONE , WB_SYNC_ALL , } ;
enum wb_reason { WB_REASON_BACKGROUND , WB_REASON_TRY_TO_FREE_PAGES , WB_REASON_SYNC , WB_REASON_PERIODIC , WB_REASON_LAPTOP_TIMER , WB_REASON_FREE_MORE_MEM , WB_REASON_FS_FREE_SPACE , WB_REASON_FORKER_THREAD , WB_REASON_MAX , } ;
enum bdi_state { BDI_pending , BDI_wb_alloc , BDI_async_congested , BDI_sync_congested , BDI_registered , BDI_writeback_running , BDI_unused , } ;
enum bdi_stat_item { BDI_RECLAIMABLE , BDI_WRITEBACK , BDI_DIRTIED , BDI_WRITTEN , NR_BDI_STAT_ITEMS } ;
enum { BLK_RW_ASYNC = 0 , BLK_RW_SYNC = 1 , } ;
enum { ICQ_EXITED = 1 << 2 , } ;
enum { IOPRIO_CLASS_NONE , IOPRIO_CLASS_RT , IOPRIO_CLASS_BE , IOPRIO_CLASS_IDLE , } ;
enum { IOPRIO_WHO_PROCESS = 1 , IOPRIO_WHO_PGRP , IOPRIO_WHO_USER , } ;
struct sg_iovec ;
struct scsi_ioctl_command ;
struct blk_trace ;
struct sg_io_hdr ;
struct bsg_job ;
struct blkcg_gq ;
enum rq_cmd_type_bits { REQ_TYPE_FS = 1 , REQ_TYPE_BLOCK_PC , REQ_TYPE_SENSE , REQ_TYPE_PM_SUSPEND , REQ_TYPE_PM_RESUME , REQ_TYPE_PM_SHUTDOWN , REQ_TYPE_SPECIAL , REQ_TYPE_ATA_TASKFILE , REQ_TYPE_ATA_PC , } ;
enum { ELV_MQUEUE_MAY , ELV_MQUEUE_NO , ELV_MQUEUE_MUST , } ;
enum blk_eh_timer_return { BLK_EH_NOT_HANDLED , BLK_EH_HANDLED , BLK_EH_RESET_TIMER , } ;
enum blk_queue_state { Queue_down , Queue_up , } ;
enum blk_default_limits { BLK_MAX_SEGMENTS = 128 , BLK_SAFE_MAX_SECTORS = 255 , BLK_DEF_MAX_SECTORS = 1024 , BLK_MAX_SEGMENT_SIZE = 65536 , BLK_SEG_BOUNDARY_MASK = 0xFFFFFFFFUL , } ;
enum bh_state_bits { BH_Uptodate , BH_Dirty , BH_Lock , BH_Req , BH_Uptodate_Lock , BH_Mapped , BH_New , BH_Async_Read , BH_Async_Write , BH_Delay , BH_Boundary , BH_Write_EIO , BH_Unwritten , BH_Quiet , BH_PrivateStart , } ;
struct crypto_type ;
struct aead_givcrypt_request ;
struct skcipher_givcrypt_request ;
enum { CRYPTOA_UNSPEC , CRYPTOA_ALG , CRYPTOA_TYPE , CRYPTOA_U32 , __CRYPTOA_MAX , } ;
enum jbd_state_bits { BH_JBD = BH_PrivateStart , BH_JWrite , BH_Freed , BH_Revoked , BH_RevokeValid , BH_JBDDirty , BH_State , BH_JournalHead , BH_Unshadow , BH_Verified , BH_JBDPrivateStart , } ;
struct jbd2_revoke_table_s ;
struct mnt_namespace ;
struct memory_block ;
enum { SWP_USED = ( 1 << 0 ) , SWP_WRITEOK = ( 1 << 1 ) , SWP_DISCARDABLE = ( 1 << 2 ) , SWP_DISCARDING = ( 1 << 3 ) , SWP_SOLIDSTATE = ( 1 << 4 ) , SWP_CONTINUED = ( 1 << 5 ) , SWP_BLKDEV = ( 1 << 6 ) , SWP_FILE = ( 1 << 7 ) , SWP_SCANNING = ( 1 << 8 ) , } ;
enum { MAX_OPT_ARGS = 3 } ;
enum { MAX_NESTED_LINKS = 8 } ;
enum { LAST_NORM , LAST_ROOT , LAST_DOT , LAST_DOTDOT , LAST_BIND } ;
enum fid_type { FILEID_ROOT = 0 , FILEID_INO32_GEN = 1 , FILEID_INO32_GEN_PARENT = 2 , FILEID_BTRFS_WITHOUT_PARENT = 0x4d , FILEID_BTRFS_WITH_PARENT = 0x4e , FILEID_BTRFS_WITH_PARENT_ROOT = 0x4f , FILEID_UDF_WITHOUT_PARENT = 0x51 , FILEID_UDF_WITH_PARENT = 0x52 , FILEID_NILFS_WITHOUT_PARENT = 0x61 , FILEID_NILFS_WITH_PARENT = 0x62 , FILEID_INVALID = 0xff , } ;

enum { ATA_MAX_DEVICES = 2 , ATA_MAX_PRD = 256 , ATA_SECT_SIZE = 512 , ATA_MAX_SECTORS_128 = 128 , ATA_MAX_SECTORS = 256 , ATA_MAX_SECTORS_LBA48 = 65535 , ATA_MAX_SECTORS_TAPE = 65535 , ATA_ID_WORDS = 256 , ATA_ID_CONFIG = 0 , ATA_ID_CYLS = 1 , ATA_ID_HEADS = 3 , ATA_ID_SECTORS = 6 , ATA_ID_SERNO = 10 , ATA_ID_BUF_SIZE = 21 , ATA_ID_FW_REV = 23 , ATA_ID_PROD = 27 , ATA_ID_MAX_MULTSECT = 47 , ATA_ID_DWORD_IO = 48 , ATA_ID_CAPABILITY = 49 , ATA_ID_OLD_PIO_MODES = 51 , ATA_ID_OLD_DMA_MODES = 52 , ATA_ID_FIELD_VALID = 53 , ATA_ID_CUR_CYLS = 54 , ATA_ID_CUR_HEADS = 55 , ATA_ID_CUR_SECTORS = 56 , ATA_ID_MULTSECT = 59 , ATA_ID_LBA_CAPACITY = 60 , ATA_ID_SWDMA_MODES = 62 , ATA_ID_MWDMA_MODES = 63 , ATA_ID_PIO_MODES = 64 , ATA_ID_EIDE_DMA_MIN = 65 , ATA_ID_EIDE_DMA_TIME = 66 , ATA_ID_EIDE_PIO = 67 , ATA_ID_EIDE_PIO_IORDY = 68 , ATA_ID_ADDITIONAL_SUPP = 69 , ATA_ID_QUEUE_DEPTH = 75 , ATA_ID_SATA_CAPABILITY = 76 , ATA_ID_SATA_CAPABILITY_2 = 77 , ATA_ID_FEATURE_SUPP = 78 , ATA_ID_MAJOR_VER = 80 , ATA_ID_COMMAND_SET_1 = 82 , ATA_ID_COMMAND_SET_2 = 83 , ATA_ID_CFSSE = 84 , ATA_ID_CFS_ENABLE_1 = 85 , ATA_ID_CFS_ENABLE_2 = 86 , ATA_ID_CSF_DEFAULT = 87 , ATA_ID_UDMA_MODES = 88 , ATA_ID_HW_CONFIG = 93 , ATA_ID_SPG = 98 , ATA_ID_LBA_CAPACITY_2 = 100 , ATA_ID_SECTOR_SIZE = 106 , ATA_ID_WWN = 108 , ATA_ID_LOGICAL_SECTOR_SIZE = 117 , ATA_ID_LAST_LUN = 126 , ATA_ID_DLF = 128 , ATA_ID_CSFO = 129 , ATA_ID_CFA_POWER = 160 , ATA_ID_CFA_KEY_MGMT = 162 , ATA_ID_CFA_MODES = 163 , ATA_ID_DATA_SET_MGMT = 169 , ATA_ID_ROT_SPEED = 217 , ATA_ID_PIO4 = ( 1 << 1 ) , ATA_ID_SERNO_LEN = 20 , ATA_ID_FW_REV_LEN = 8 , ATA_ID_PROD_LEN = 40 , ATA_ID_WWN_LEN = 8 , ATA_PCI_CTL_OFS = 2 , ATA_PIO0 = ( 1 << 0 ) , ATA_PIO1 = ATA_PIO0 | ( 1 << 1 ) , ATA_PIO2 = ATA_PIO1 | ( 1 << 2 ) , ATA_PIO3 = ATA_PIO2 | ( 1 << 3 ) , ATA_PIO4 = ATA_PIO3 | ( 1 << 4 ) , ATA_PIO5 = ATA_PIO4 | ( 1 << 5 ) , ATA_PIO6 = ATA_PIO5 | ( 1 << 6 ) , ATA_PIO4_ONLY = ( 1 << 4 ) , ATA_SWDMA0 = ( 1 << 0 ) , ATA_SWDMA1 = ATA_SWDMA0 | ( 1 << 1 ) , ATA_SWDMA2 = ATA_SWDMA1 | ( 1 << 2 ) , ATA_SWDMA2_ONLY = ( 1 << 2 ) , ATA_MWDMA0 = ( 1 << 0 ) , ATA_MWDMA1 = ATA_MWDMA0 | ( 1 << 1 ) , ATA_MWDMA2 = ATA_MWDMA1 | ( 1 << 2 ) , ATA_MWDMA3 = ATA_MWDMA2 | ( 1 << 3 ) , ATA_MWDMA4 = ATA_MWDMA3 | ( 1 << 4 ) , ATA_MWDMA12_ONLY = ( 1 << 1 ) | ( 1 << 2 ) , ATA_MWDMA2_ONLY = ( 1 << 2 ) , ATA_UDMA0 = ( 1 << 0 ) , ATA_UDMA1 = ATA_UDMA0 | ( 1 << 1 ) , ATA_UDMA2 = ATA_UDMA1 | ( 1 << 2 ) , ATA_UDMA3 = ATA_UDMA2 | ( 1 << 3 ) , ATA_UDMA4 = ATA_UDMA3 | ( 1 << 4 ) , ATA_UDMA5 = ATA_UDMA4 | ( 1 << 5 ) , ATA_UDMA6 = ATA_UDMA5 | ( 1 << 6 ) , ATA_UDMA7 = ATA_UDMA6 | ( 1 << 7 ) , ATA_UDMA24_ONLY = ( 1 << 2 ) | ( 1 << 4 ) , ATA_UDMA_MASK_40C = ATA_UDMA2 , ATA_PRD_SZ = 8 , ATA_PRD_TBL_SZ = ( ATA_MAX_PRD * ATA_PRD_SZ ) , ATA_PRD_EOT = ( 1 << 31 ) , ATA_DMA_TABLE_OFS = 4 , ATA_DMA_STATUS = 2 , ATA_DMA_CMD = 0 , ATA_DMA_WR = ( 1 << 3 ) , ATA_DMA_START = ( 1 << 0 ) , ATA_DMA_INTR = ( 1 << 2 ) , ATA_DMA_ERR = ( 1 << 1 ) , ATA_DMA_ACTIVE = ( 1 << 0 ) , ATA_HOB = ( 1 << 7 ) , ATA_NIEN = ( 1 << 1 ) , ATA_LBA = ( 1 << 6 ) , ATA_DEV1 = ( 1 << 4 ) , ATA_DEVICE_OBS = ( 1 << 7 ) | ( 1 << 5 ) , ATA_DEVCTL_OBS = ( 1 << 3 ) , ATA_BUSY = ( 1 << 7 ) , ATA_DRDY = ( 1 << 6 ) , ATA_DF = ( 1 << 5 ) , ATA_DSC = ( 1 << 4 ) , ATA_DRQ = ( 1 << 3 ) , ATA_CORR = ( 1 << 2 ) , ATA_IDX = ( 1 << 1 ) , ATA_ERR = ( 1 << 0 ) , ATA_SRST = ( 1 << 2 ) , ATA_ICRC = ( 1 << 7 ) , ATA_BBK = ATA_ICRC , ATA_UNC = ( 1 << 6 ) , ATA_MC = ( 1 << 5 ) , ATA_IDNF = ( 1 << 4 ) , ATA_MCR = ( 1 << 3 ) , ATA_ABORTED = ( 1 << 2 ) , ATA_TRK0NF = ( 1 << 1 ) , ATA_AMNF = ( 1 << 0 ) , ATAPI_LFS = 0xF0 , ATAPI_EOM = ATA_TRK0NF , ATAPI_ILI = ATA_AMNF , ATAPI_IO = ( 1 << 1 ) , ATAPI_COD = ( 1 << 0 ) , ATA_REG_DATA = 0x00 , ATA_REG_ERR = 0x01 , ATA_REG_NSECT = 0x02 , ATA_REG_LBAL = 0x03 , ATA_REG_LBAM = 0x04 , ATA_REG_LBAH = 0x05 , ATA_REG_DEVICE = 0x06 , ATA_REG_STATUS = 0x07 , ATA_REG_FEATURE = ATA_REG_ERR , ATA_REG_CMD = ATA_REG_STATUS , ATA_REG_BYTEL = ATA_REG_LBAM , ATA_REG_BYTEH = ATA_REG_LBAH , ATA_REG_DEVSEL = ATA_REG_DEVICE , ATA_REG_IRQ = ATA_REG_NSECT , ATA_CMD_DEV_RESET = 0x08 , ATA_CMD_CHK_POWER = 0xE5 , ATA_CMD_STANDBY = 0xE2 , ATA_CMD_IDLE = 0xE3 , ATA_CMD_EDD = 0x90 , ATA_CMD_DOWNLOAD_MICRO = 0x92 , ATA_CMD_NOP = 0x00 , ATA_CMD_FLUSH = 0xE7 , ATA_CMD_FLUSH_EXT = 0xEA , ATA_CMD_ID_ATA = 0xEC , ATA_CMD_ID_ATAPI = 0xA1 , ATA_CMD_SERVICE = 0xA2 , ATA_CMD_READ = 0xC8 , ATA_CMD_READ_EXT = 0x25 , ATA_CMD_READ_QUEUED = 0x26 , ATA_CMD_READ_STREAM_EXT = 0x2B , ATA_CMD_READ_STREAM_DMA_EXT = 0x2A , ATA_CMD_WRITE = 0xCA , ATA_CMD_WRITE_EXT = 0x35 , ATA_CMD_WRITE_QUEUED = 0x36 , ATA_CMD_WRITE_STREAM_EXT = 0x3B , ATA_CMD_WRITE_STREAM_DMA_EXT = 0x3A , ATA_CMD_WRITE_FUA_EXT = 0x3D , ATA_CMD_WRITE_QUEUED_FUA_EXT = 0x3E , ATA_CMD_FPDMA_READ = 0x60 , ATA_CMD_FPDMA_WRITE = 0x61 , ATA_CMD_PIO_READ = 0x20 , ATA_CMD_PIO_READ_EXT = 0x24 , ATA_CMD_PIO_WRITE = 0x30 , ATA_CMD_PIO_WRITE_EXT = 0x34 , ATA_CMD_READ_MULTI = 0xC4 , ATA_CMD_READ_MULTI_EXT = 0x29 , ATA_CMD_WRITE_MULTI = 0xC5 , ATA_CMD_WRITE_MULTI_EXT = 0x39 , ATA_CMD_WRITE_MULTI_FUA_EXT = 0xCE , ATA_CMD_SET_FEATURES = 0xEF , ATA_CMD_SET_MULTI = 0xC6 , ATA_CMD_PACKET = 0xA0 , ATA_CMD_VERIFY = 0x40 , ATA_CMD_VERIFY_EXT = 0x42 , ATA_CMD_WRITE_UNCORR_EXT = 0x45 , ATA_CMD_STANDBYNOW1 = 0xE0 , ATA_CMD_IDLEIMMEDIATE = 0xE1 , ATA_CMD_SLEEP = 0xE6 , ATA_CMD_INIT_DEV_PARAMS = 0x91 , ATA_CMD_READ_NATIVE_MAX = 0xF8 , ATA_CMD_READ_NATIVE_MAX_EXT = 0x27 , ATA_CMD_SET_MAX = 0xF9 , ATA_CMD_SET_MAX_EXT = 0x37 , ATA_CMD_READ_LOG_EXT = 0x2F , ATA_CMD_WRITE_LOG_EXT = 0x3F , ATA_CMD_READ_LOG_DMA_EXT = 0x47 , ATA_CMD_WRITE_LOG_DMA_EXT = 0x57 , ATA_CMD_TRUSTED_RCV = 0x5C , ATA_CMD_TRUSTED_RCV_DMA = 0x5D , ATA_CMD_TRUSTED_SND = 0x5E , ATA_CMD_TRUSTED_SND_DMA = 0x5F , ATA_CMD_PMP_READ = 0xE4 , ATA_CMD_PMP_WRITE = 0xE8 , ATA_CMD_CONF_OVERLAY = 0xB1 , ATA_CMD_SEC_SET_PASS = 0xF1 , ATA_CMD_SEC_UNLOCK = 0xF2 , ATA_CMD_SEC_ERASE_PREP = 0xF3 , ATA_CMD_SEC_ERASE_UNIT = 0xF4 , ATA_CMD_SEC_FREEZE_LOCK = 0xF5 , ATA_CMD_SEC_DISABLE_PASS = 0xF6 , ATA_CMD_CONFIG_STREAM = 0x51 , ATA_CMD_SMART = 0xB0 , ATA_CMD_MEDIA_LOCK = 0xDE , ATA_CMD_MEDIA_UNLOCK = 0xDF , ATA_CMD_DSM = 0x06 , ATA_CMD_CHK_MED_CRD_TYP = 0xD1 , ATA_CMD_CFA_REQ_EXT_ERR = 0x03 , ATA_CMD_CFA_WRITE_NE = 0x38 , ATA_CMD_CFA_TRANS_SECT = 0x87 , ATA_CMD_CFA_ERASE = 0xC0 , ATA_CMD_CFA_WRITE_MULT_NE = 0xCD , ATA_CMD_RESTORE = 0x10 , ATA_LOG_SATA_NCQ = 0x10 , ATA_LOG_SATA_ID_DEV_DATA = 0x30 , ATA_LOG_SATA_SETTINGS = 0x08 , ATA_LOG_DEVSLP_OFFSET = 0x30 , ATA_LOG_DEVSLP_SIZE = 0x08 , ATA_LOG_DEVSLP_MDAT = 0x00 , ATA_LOG_DEVSLP_MDAT_MASK = 0x1F , ATA_LOG_DEVSLP_DETO = 0x01 , ATA_LOG_DEVSLP_VALID = 0x07 , ATA_LOG_DEVSLP_VALID_MASK = 0x80 , ATA_CMD_READ_LONG = 0x22 , ATA_CMD_READ_LONG_ONCE = 0x23 , ATA_CMD_WRITE_LONG = 0x32 , ATA_CMD_WRITE_LONG_ONCE = 0x33 , SETFEATURES_XFER = 0x03 , XFER_UDMA_7 = 0x47 , XFER_UDMA_6 = 0x46 , XFER_UDMA_5 = 0x45 , XFER_UDMA_4 = 0x44 , XFER_UDMA_3 = 0x43 , XFER_UDMA_2 = 0x42 , XFER_UDMA_1 = 0x41 , XFER_UDMA_0 = 0x40 , XFER_MW_DMA_4 = 0x24 , XFER_MW_DMA_3 = 0x23 , XFER_MW_DMA_2 = 0x22 , XFER_MW_DMA_1 = 0x21 , XFER_MW_DMA_0 = 0x20 , XFER_SW_DMA_2 = 0x12 , XFER_SW_DMA_1 = 0x11 , XFER_SW_DMA_0 = 0x10 , XFER_PIO_6 = 0x0E , XFER_PIO_5 = 0x0D , XFER_PIO_4 = 0x0C , XFER_PIO_3 = 0x0B , XFER_PIO_2 = 0x0A , XFER_PIO_1 = 0x09 , XFER_PIO_0 = 0x08 , XFER_PIO_SLOW = 0x00 , SETFEATURES_WC_ON = 0x02 , SETFEATURES_WC_OFF = 0x82 , SETFEATURES_AAM_ON = 0x42 , SETFEATURES_AAM_OFF = 0xC2 , SETFEATURES_SPINUP = 0x07 , SETFEATURES_SATA_ENABLE = 0x10 , SETFEATURES_SATA_DISABLE = 0x90 , SATA_FPDMA_OFFSET = 0x01 , SATA_FPDMA_AA = 0x02 , SATA_DIPM = 0x03 , SATA_FPDMA_IN_ORDER = 0x04 , SATA_AN = 0x05 , SATA_SSP = 0x06 , SATA_DEVSLP = 0x09 , ATA_SET_MAX_ADDR = 0x00 , ATA_SET_MAX_PASSWD = 0x01 , ATA_SET_MAX_LOCK = 0x02 , ATA_SET_MAX_UNLOCK = 0x03 , ATA_SET_MAX_FREEZE_LOCK = 0x04 , ATA_DCO_RESTORE = 0xC0 , ATA_DCO_FREEZE_LOCK = 0xC1 , ATA_DCO_IDENTIFY = 0xC2 , ATA_DCO_SET = 0xC3 , ATA_SMART_ENABLE = 0xD8 , ATA_SMART_READ_VALUES = 0xD0 , ATA_SMART_READ_THRESHOLDS = 0xD1 , ATA_DSM_TRIM = 0x01 , ATA_SMART_LBAM_PASS = 0x4F , ATA_SMART_LBAH_PASS = 0xC2 , ATAPI_PKT_DMA = ( 1 << 0 ) , ATAPI_DMADIR = ( 1 << 2 ) , ATAPI_CDB_LEN = 16 , SATA_PMP_MAX_PORTS = 15 , SATA_PMP_CTRL_PORT = 15 , SATA_PMP_GSCR_DWORDS = 128 , SATA_PMP_GSCR_PROD_ID = 0 , SATA_PMP_GSCR_REV = 1 , SATA_PMP_GSCR_PORT_INFO = 2 , SATA_PMP_GSCR_ERROR = 32 , SATA_PMP_GSCR_ERROR_EN = 33 , SATA_PMP_GSCR_FEAT = 64 , SATA_PMP_GSCR_FEAT_EN = 96 , SATA_PMP_PSCR_STATUS = 0 , SATA_PMP_PSCR_ERROR = 1 , SATA_PMP_PSCR_CONTROL = 2 , SATA_PMP_FEAT_BIST = ( 1 << 0 ) , SATA_PMP_FEAT_PMREQ = ( 1 << 1 ) , SATA_PMP_FEAT_DYNSSC = ( 1 << 2 ) , SATA_PMP_FEAT_NOTIFY = ( 1 << 3 ) , ATA_CBL_NONE = 0 , ATA_CBL_PATA40 = 1 , ATA_CBL_PATA80 = 2 , ATA_CBL_PATA40_SHORT = 3 , ATA_CBL_PATA_UNK = 4 , ATA_CBL_PATA_IGN = 5 , ATA_CBL_SATA = 6 , SCR_STATUS = 0 , SCR_ERROR = 1 , SCR_CONTROL = 2 , SCR_ACTIVE = 3 , SCR_NOTIFICATION = 4 , SERR_DATA_RECOVERED = ( 1 << 0 ) , SERR_COMM_RECOVERED = ( 1 << 1 ) , SERR_DATA = ( 1 << 8 ) , SERR_PERSISTENT = ( 1 << 9 ) , SERR_PROTOCOL = ( 1 << 10 ) , SERR_INTERNAL = ( 1 << 11 ) , SERR_PHYRDY_CHG = ( 1 << 16 ) , SERR_PHY_INT_ERR = ( 1 << 17 ) , SERR_COMM_WAKE = ( 1 << 18 ) , SERR_10B_8B_ERR = ( 1 << 19 ) , SERR_DISPARITY = ( 1 << 20 ) , SERR_CRC = ( 1 << 21 ) , SERR_HANDSHAKE = ( 1 << 22 ) , SERR_LINK_SEQ_ERR = ( 1 << 23 ) , SERR_TRANS_ST_ERROR = ( 1 << 24 ) , SERR_UNRECOG_FIS = ( 1 << 25 ) , SERR_DEV_XCHG = ( 1 << 26 ) , ATA_TFLAG_LBA48 = ( 1 << 0 ) , ATA_TFLAG_ISADDR = ( 1 << 1 ) , ATA_TFLAG_DEVICE = ( 1 << 2 ) , ATA_TFLAG_WRITE = ( 1 << 3 ) , ATA_TFLAG_LBA = ( 1 << 4 ) , ATA_TFLAG_FUA = ( 1 << 5 ) , ATA_TFLAG_POLLING = ( 1 << 6 ) , ATA_PROT_FLAG_PIO = ( 1 << 0 ) , ATA_PROT_FLAG_DMA = ( 1 << 1 ) , ATA_PROT_FLAG_DATA = ATA_PROT_FLAG_PIO | ATA_PROT_FLAG_DMA , ATA_PROT_FLAG_NCQ = ( 1 << 2 ) , ATA_PROT_FLAG_ATAPI = ( 1 << 3 ) , } ;
enum ata_tf_protocols { ATA_PROT_UNKNOWN , ATA_PROT_NODATA , ATA_PROT_PIO , ATA_PROT_DMA , ATA_PROT_NCQ , ATAPI_PROT_NODATA , ATAPI_PROT_PIO , ATAPI_PROT_DMA , } ;
enum ata_ioctls { ATA_IOC_GET_IO32 = 0x309 , ATA_IOC_SET_IO32 = 0x324 , } ;
struct scsi_cmnd ;
enum scsi_protocol { SCSI_PROTOCOL_FCP = 0 , SCSI_PROTOCOL_SPI = 1 , SCSI_PROTOCOL_SSA = 2 , SCSI_PROTOCOL_SBP = 3 , SCSI_PROTOCOL_SRP = 4 , SCSI_PROTOCOL_ISCSI = 5 , SCSI_PROTOCOL_SAS = 6 , SCSI_PROTOCOL_ADT = 7 , SCSI_PROTOCOL_ATA = 8 , SCSI_PROTOCOL_UNSPEC = 0xf , } ;
struct scsi_cmnd ;
struct scsi_device ;
struct scsi_target ;
struct scsi_host_cmd_pool ;
struct scsi_transport_template ;
struct blk_queue_tags ;
enum { SCSI_QDEPTH_DEFAULT , SCSI_QDEPTH_QFULL , SCSI_QDEPTH_RAMP_UP , } ;
enum scsi_host_state { SHOST_CREATED = 1 , SHOST_RUNNING , SHOST_CANCEL , SHOST_DEL , SHOST_RECOVERY , SHOST_CANCEL_RECOVERY , SHOST_DEL_RECOVERY , } ;
struct class_container ;
enum scsi_host_prot_capabilities { SHOST_DIF_TYPE1_PROTECTION = 1 << 0 , SHOST_DIF_TYPE2_PROTECTION = 1 << 1 , SHOST_DIF_TYPE3_PROTECTION = 1 << 2 , SHOST_DIX_TYPE0_PROTECTION = 1 << 3 , SHOST_DIX_TYPE1_PROTECTION = 1 << 4 , SHOST_DIX_TYPE2_PROTECTION = 1 << 5 , SHOST_DIX_TYPE3_PROTECTION = 1 << 6 , } ;
enum scsi_host_guard_type { SHOST_DIX_GUARD_CRC = 1 << 0 , SHOST_DIX_GUARD_IP = 1 << 1 , } ;
enum acpi_preferred_pm_profiles { PM_UNSPECIFIED = 0 , PM_DESKTOP = 1 , PM_MOBILE = 2 , PM_WORKSTATION = 3 , PM_ENTERPRISE_SERVER = 4 , PM_SOHO_SERVER = 5 , PM_APPLIANCE_PC = 6 , PM_PERFORMANCE_SERVER = 7 , PM_TABLET = 8 } ;
enum acpi_bert_error_severity { ACPI_BERT_ERROR_CORRECTABLE = 0 , ACPI_BERT_ERROR_FATAL = 1 , ACPI_BERT_ERROR_CORRECTED = 2 , ACPI_BERT_ERROR_NONE = 3 , ACPI_BERT_ERROR_RESERVED = 4 } ;
enum acpi_einj_actions { ACPI_EINJ_BEGIN_OPERATION = 0 , ACPI_EINJ_GET_TRIGGER_TABLE = 1 , ACPI_EINJ_SET_ERROR_TYPE = 2 , ACPI_EINJ_GET_ERROR_TYPE = 3 , ACPI_EINJ_END_OPERATION = 4 , ACPI_EINJ_EXECUTE_OPERATION = 5 , ACPI_EINJ_CHECK_BUSY_STATUS = 6 , ACPI_EINJ_GET_COMMAND_STATUS = 7 , ACPI_EINJ_SET_ERROR_TYPE_WITH_ADDRESS = 8 , ACPI_EINJ_ACTION_RESERVED = 9 , ACPI_EINJ_TRIGGER_ERROR = 0xFF } ;
enum acpi_einj_instructions { ACPI_EINJ_READ_REGISTER = 0 , ACPI_EINJ_READ_REGISTER_VALUE = 1 , ACPI_EINJ_WRITE_REGISTER = 2 , ACPI_EINJ_WRITE_REGISTER_VALUE = 3 , ACPI_EINJ_NOOP = 4 , ACPI_EINJ_FLUSH_CACHELINE = 5 , ACPI_EINJ_INSTRUCTION_RESERVED = 6 } ;
enum acpi_einj_command_status { ACPI_EINJ_SUCCESS = 0 , ACPI_EINJ_FAILURE = 1 , ACPI_EINJ_INVALID_ACCESS = 2 , ACPI_EINJ_STATUS_RESERVED = 3 } ;
enum acpi_erst_actions { ACPI_ERST_BEGIN_WRITE = 0 , ACPI_ERST_BEGIN_READ = 1 , ACPI_ERST_BEGIN_CLEAR = 2 , ACPI_ERST_END = 3 , ACPI_ERST_SET_RECORD_OFFSET = 4 , ACPI_ERST_EXECUTE_OPERATION = 5 , ACPI_ERST_CHECK_BUSY_STATUS = 6 , ACPI_ERST_GET_COMMAND_STATUS = 7 , ACPI_ERST_GET_RECORD_ID = 8 , ACPI_ERST_SET_RECORD_ID = 9 , ACPI_ERST_GET_RECORD_COUNT = 10 , ACPI_ERST_BEGIN_DUMMY_WRIITE = 11 , ACPI_ERST_NOT_USED = 12 , ACPI_ERST_GET_ERROR_RANGE = 13 , ACPI_ERST_GET_ERROR_LENGTH = 14 , ACPI_ERST_GET_ERROR_ATTRIBUTES = 15 , ACPI_ERST_ACTION_RESERVED = 16 } ;
enum acpi_erst_instructions { ACPI_ERST_READ_REGISTER = 0 , ACPI_ERST_READ_REGISTER_VALUE = 1 , ACPI_ERST_WRITE_REGISTER = 2 , ACPI_ERST_WRITE_REGISTER_VALUE = 3 , ACPI_ERST_NOOP = 4 , ACPI_ERST_LOAD_VAR1 = 5 , ACPI_ERST_LOAD_VAR2 = 6 , ACPI_ERST_STORE_VAR1 = 7 , ACPI_ERST_ADD = 8 , ACPI_ERST_SUBTRACT = 9 , ACPI_ERST_ADD_VALUE = 10 , ACPI_ERST_SUBTRACT_VALUE = 11 , ACPI_ERST_STALL = 12 , ACPI_ERST_STALL_WHILE_TRUE = 13 , ACPI_ERST_SKIP_NEXT_IF_TRUE = 14 , ACPI_ERST_GOTO = 15 , ACPI_ERST_SET_SRC_ADDRESS_BASE = 16 , ACPI_ERST_SET_DST_ADDRESS_BASE = 17 , ACPI_ERST_MOVE_DATA = 18 , ACPI_ERST_INSTRUCTION_RESERVED = 19 } ;
enum acpi_erst_command_status { ACPI_ERST_SUCESS = 0 , ACPI_ERST_NO_SPACE = 1 , ACPI_ERST_NOT_AVAILABLE = 2 , ACPI_ERST_FAILURE = 3 , ACPI_ERST_RECORD_EMPTY = 4 , ACPI_ERST_NOT_FOUND = 5 , ACPI_ERST_STATUS_RESERVED = 6 } ;
enum acpi_hest_types { ACPI_HEST_TYPE_IA32_CHECK = 0 , ACPI_HEST_TYPE_IA32_CORRECTED_CHECK = 1 , ACPI_HEST_TYPE_IA32_NMI = 2 , ACPI_HEST_TYPE_NOT_USED3 = 3 , ACPI_HEST_TYPE_NOT_USED4 = 4 , ACPI_HEST_TYPE_NOT_USED5 = 5 , ACPI_HEST_TYPE_AER_ROOT_PORT = 6 , ACPI_HEST_TYPE_AER_ENDPOINT = 7 , ACPI_HEST_TYPE_AER_BRIDGE = 8 , ACPI_HEST_TYPE_GENERIC_ERROR = 9 , ACPI_HEST_TYPE_RESERVED = 10 } ;
enum acpi_hest_notify_types { ACPI_HEST_NOTIFY_POLLED = 0 , ACPI_HEST_NOTIFY_EXTERNAL = 1 , ACPI_HEST_NOTIFY_LOCAL = 2 , ACPI_HEST_NOTIFY_SCI = 3 , ACPI_HEST_NOTIFY_NMI = 4 , ACPI_HEST_NOTIFY_CMCI = 5 , ACPI_HEST_NOTIFY_MCE = 6 , ACPI_HEST_NOTIFY_RESERVED = 7 } ;
enum acpi_madt_type { ACPI_MADT_TYPE_LOCAL_APIC = 0 , ACPI_MADT_TYPE_IO_APIC = 1 , ACPI_MADT_TYPE_INTERRUPT_OVERRIDE = 2 , ACPI_MADT_TYPE_NMI_SOURCE = 3 , ACPI_MADT_TYPE_LOCAL_APIC_NMI = 4 , ACPI_MADT_TYPE_LOCAL_APIC_OVERRIDE = 5 , ACPI_MADT_TYPE_IO_SAPIC = 6 , ACPI_MADT_TYPE_LOCAL_SAPIC = 7 , ACPI_MADT_TYPE_INTERRUPT_SOURCE = 8 , ACPI_MADT_TYPE_LOCAL_X2APIC = 9 , ACPI_MADT_TYPE_LOCAL_X2APIC_NMI = 10 , ACPI_MADT_TYPE_GENERIC_INTERRUPT = 11 , ACPI_MADT_TYPE_GENERIC_DISTRIBUTOR = 12 , ACPI_MADT_TYPE_RESERVED = 13 } ;
enum acpi_srat_type { ACPI_SRAT_TYPE_CPU_AFFINITY = 0 , ACPI_SRAT_TYPE_MEMORY_AFFINITY = 1 , ACPI_SRAT_TYPE_X2APIC_CPU_AFFINITY = 2 , ACPI_SRAT_TYPE_RESERVED = 3 } ;
enum acpi_asf_type { ACPI_ASF_TYPE_INFO = 0 , ACPI_ASF_TYPE_ALERT = 1 , ACPI_ASF_TYPE_CONTROL = 2 , ACPI_ASF_TYPE_BOOT = 3 , ACPI_ASF_TYPE_ADDRESS = 4 , ACPI_ASF_TYPE_RESERVED = 5 } ;
enum acpi_dmar_type { ACPI_DMAR_TYPE_HARDWARE_UNIT = 0 , ACPI_DMAR_TYPE_RESERVED_MEMORY = 1 , ACPI_DMAR_TYPE_ATSR = 2 , ACPI_DMAR_HARDWARE_AFFINITY = 3 , ACPI_DMAR_TYPE_RESERVED = 4 } ;
enum acpi_dmar_scope_type { ACPI_DMAR_SCOPE_TYPE_NOT_USED = 0 , ACPI_DMAR_SCOPE_TYPE_ENDPOINT = 1 , ACPI_DMAR_SCOPE_TYPE_BRIDGE = 2 , ACPI_DMAR_SCOPE_TYPE_IOAPIC = 3 , ACPI_DMAR_SCOPE_TYPE_HPET = 4 , ACPI_DMAR_SCOPE_TYPE_RESERVED = 5 } ;
enum acpi_hpet_page_protect { ACPI_HPET_NO_PAGE_PROTECT = 0 , ACPI_HPET_PAGE_PROTECT4 = 1 , ACPI_HPET_PAGE_PROTECT64 = 2 } ;
enum acpi_ibft_type { ACPI_IBFT_TYPE_NOT_USED = 0 , ACPI_IBFT_TYPE_CONTROL = 1 , ACPI_IBFT_TYPE_INITIATOR = 2 , ACPI_IBFT_TYPE_NIC = 3 , ACPI_IBFT_TYPE_TARGET = 4 , ACPI_IBFT_TYPE_EXTENSIONS = 5 , ACPI_IBFT_TYPE_RESERVED = 6 } ;
enum acpi_ivrs_type { ACPI_IVRS_TYPE_HARDWARE = 0x10 , ACPI_IVRS_TYPE_MEMORY1 = 0x20 , ACPI_IVRS_TYPE_MEMORY2 = 0x21 , ACPI_IVRS_TYPE_MEMORY3 = 0x22 } ;
enum acpi_ivrs_device_entry_type { ACPI_IVRS_TYPE_PAD4 = 0 , ACPI_IVRS_TYPE_ALL = 1 , ACPI_IVRS_TYPE_SELECT = 2 , ACPI_IVRS_TYPE_START = 3 , ACPI_IVRS_TYPE_END = 4 , ACPI_IVRS_TYPE_PAD8 = 64 , ACPI_IVRS_TYPE_NOT_USED = 65 , ACPI_IVRS_TYPE_ALIAS_SELECT = 66 , ACPI_IVRS_TYPE_ALIAS_START = 67 , ACPI_IVRS_TYPE_EXT_SELECT = 70 , ACPI_IVRS_TYPE_EXT_START = 71 , ACPI_IVRS_TYPE_SPECIAL = 72 } ;
enum acpi_slic_type { ACPI_SLIC_TYPE_PUBLIC_KEY = 0 , ACPI_SLIC_TYPE_WINDOWS_MARKER = 1 , ACPI_SLIC_TYPE_RESERVED = 2 } ;
enum acpi_spmi_interface_types { ACPI_SPMI_NOT_USED = 0 , ACPI_SPMI_KEYBOARD = 1 , ACPI_SPMI_SMI = 2 , ACPI_SPMI_BLOCK_TRANSFER = 3 , ACPI_SPMI_SMBUS = 4 , ACPI_SPMI_RESERVED = 5 } ;
enum acpi_wdat_actions { ACPI_WDAT_RESET = 1 , ACPI_WDAT_GET_CURRENT_COUNTDOWN = 4 , ACPI_WDAT_GET_COUNTDOWN = 5 , ACPI_WDAT_SET_COUNTDOWN = 6 , ACPI_WDAT_GET_RUNNING_STATE = 8 , ACPI_WDAT_SET_RUNNING_STATE = 9 , ACPI_WDAT_GET_STOPPED_STATE = 10 , ACPI_WDAT_SET_STOPPED_STATE = 11 , ACPI_WDAT_GET_REBOOT = 16 , ACPI_WDAT_SET_REBOOT = 17 , ACPI_WDAT_GET_SHUTDOWN = 18 , ACPI_WDAT_SET_SHUTDOWN = 19 , ACPI_WDAT_GET_STATUS = 32 , ACPI_WDAT_SET_STATUS = 33 , ACPI_WDAT_ACTION_RESERVED = 34 } ;
enum acpi_wdat_instructions { ACPI_WDAT_READ_VALUE = 0 , ACPI_WDAT_READ_COUNTDOWN = 1 , ACPI_WDAT_WRITE_VALUE = 2 , ACPI_WDAT_WRITE_COUNTDOWN = 3 , ACPI_WDAT_INSTRUCTION_RESERVED = 4 , ACPI_WDAT_PRESERVE_REGISTER = 0x80 } ;
enum acpi_fpdt_type { ACPI_FPDT_TYPE_BOOT = 0 , ACPI_FPDT_TYPE_S3PERF = 1 , } ;
enum acpi_s3pt_type { ACPI_S3PT_TYPE_RESUME = 0 , ACPI_S3PT_TYPE_SUSPEND = 1 , } ;
enum acpi_rasf_commands { ACPI_RASF_GET_RAS_CAPABILITIES = 1 , ACPI_RASF_GET_PATROL_PARAMETERS = 2 , ACPI_RASF_START_PATROL_SCRUBBER = 3 , ACPI_RASF_STOP_PATROL_SCRUBBER = 4 } ;
enum acpi_rasf_status { ACPI_RASF_SUCCESS = 0 , ACPI_RASF_NOT_VALID = 1 , ACPI_RASF_NOT_SUPPORTED = 2 , ACPI_RASF_BUSY = 3 , ACPI_RASF_FAILED = 4 , ACPI_RASF_ABORTED = 5 , ACPI_RASF_INVALID_DATA = 6 } ;
enum acpi_bus_removal_type { ACPI_BUS_REMOVAL_NORMAL = 0 , ACPI_BUS_REMOVAL_EJECT , ACPI_BUS_REMOVAL_SUPRISE , ACPI_BUS_REMOVAL_TYPE_COUNT } ;
enum acpi_bus_device_type { ACPI_BUS_TYPE_DEVICE = 0 , ACPI_BUS_TYPE_POWER , ACPI_BUS_TYPE_PROCESSOR , ACPI_BUS_TYPE_THERMAL , ACPI_BUS_TYPE_POWER_BUTTON , ACPI_BUS_TYPE_SLEEP_BUTTON , ACPI_BUS_DEVICE_TYPE_COUNT } ;
enum acpi_irq_model_id { ACPI_IRQ_MODEL_PIC = 0 , ACPI_IRQ_MODEL_IOAPIC , ACPI_IRQ_MODEL_IOSAPIC , ACPI_IRQ_MODEL_PLATFORM , ACPI_IRQ_MODEL_COUNT } ;
enum acpi_interrupt_id { ACPI_INTERRUPT_PMI = 1 , ACPI_INTERRUPT_INIT , ACPI_INTERRUPT_CPEI , ACPI_INTERRUPT_COUNT } ;
enum acpi_address_range_id { ACPI_ADDRESS_RANGE_MEMORY = 1 , ACPI_ADDRESS_RANGE_RESERVED = 2 , ACPI_ADDRESS_RANGE_ACPI = 3 , ACPI_ADDRESS_RANGE_NVS = 4 , ACPI_ADDRESS_RANGE_COUNT } ;
enum { ATA_MSG_DRV = 0x0001 , ATA_MSG_INFO = 0x0002 , ATA_MSG_PROBE = 0x0004 , ATA_MSG_WARN = 0x0008 , ATA_MSG_MALLOC = 0x0010 , ATA_MSG_CTL = 0x0020 , ATA_MSG_INTR = 0x0040 , ATA_MSG_ERR = 0x0080 , } ;
enum hsm_task_states { HSM_ST_IDLE , HSM_ST_FIRST , HSM_ST , HSM_ST_LAST , HSM_ST_ERR , } ;
enum ata_completion_errors { AC_ERR_DEV = ( 1 << 0 ) , AC_ERR_HSM = ( 1 << 1 ) , AC_ERR_TIMEOUT = ( 1 << 2 ) , AC_ERR_MEDIA = ( 1 << 3 ) , AC_ERR_ATA_BUS = ( 1 << 4 ) , AC_ERR_HOST_BUS = ( 1 << 5 ) , AC_ERR_SYSTEM = ( 1 << 6 ) , AC_ERR_INVALID = ( 1 << 7 ) , AC_ERR_OTHER = ( 1 << 8 ) , AC_ERR_NODEV_HINT = ( 1 << 9 ) , AC_ERR_NCQ = ( 1 << 10 ) , } ;
enum ata_lpm_policy { ATA_LPM_UNKNOWN , ATA_LPM_MAX_POWER , ATA_LPM_MED_POWER , ATA_LPM_MIN_POWER , } ;
enum ata_lpm_hints { ATA_LPM_EMPTY = ( 1 << 0 ) , ATA_LPM_HIPM = ( 1 << 1 ) , } ;
struct scsi_device ;
enum sw_activity { OFF , BLINK_ON , BLINK_OFF , } ;
struct platform_device ;
enum ata_link_iter_mode { ATA_LITER_EDGE , ATA_LITER_HOST_FIRST , ATA_LITER_PMP_FIRST , } ;
enum ata_dev_iter_mode { ATA_DITER_ENABLED , ATA_DITER_ENABLED_REVERSE , ATA_DITER_ALL , ATA_DITER_ALL_REVERSE , } ;
enum phy_state { PHY_DOWN = 0 , PHY_STARTING , PHY_READY , PHY_PENDING , PHY_UP , PHY_AN , PHY_RUNNING , PHY_NOLINK , PHY_FORCING , PHY_CHANGELINK , PHY_HALTED , PHY_RESUMING } ;
struct dm_table ;
struct mapped_device ;
struct list_head { struct list_head * next , * prev ; } ;
struct hlist_head { struct hlist_node * first ; } ;
struct hlist_node { struct hlist_node * next , * * pprev ; } ;
typedef struct gate_struct64 gate_desc ;
typedef struct ldttss_desc64 ldt_desc ;
typedef struct ldttss_desc64 tss_desc ;
typedef struct page * pgtable_t ;
typedef struct __wait_queue wait_queue_t ;
typedef struct __wait_queue_head wait_queue_head_t ;
typedef enum { ZONE_RECLAIM_LOCKED , ZONE_OOM_LOCKED , ZONE_CONGESTED , } zone_flags_t ;
typedef union ktime ktime_t ;
struct rcu_batch { struct callback_head * head , * * tail ; } ;
struct raw_notifier_head { struct notifier_block * head ; } ;
typedef struct physid_mask physid_mask_t ;
typedef struct trap_info * __guest_handle_trap_info ;
typedef struct cpu_user_regs * __guest_handle_cpu_user_regs ;
typedef struct vcpu_guest_context * __guest_handle_vcpu_guest_context ;
typedef struct mmuext_op * __guest_handle_mmuext_op ;
typedef struct mmu_update * __guest_handle_mmu_update ;
typedef struct multicall_entry * __guest_handle_multicall_entry ;
struct rb_root { struct rb_node * rb_node ; } ;

typedef struct user_i387_struct elf_fpregset_t ;
struct tracepoint_iter { struct tp_module * module ; struct tracepoint * const * tracepoint ; } ;
struct hlist_bl_head { struct hlist_bl_node * first ; } ;
struct hlist_bl_node { struct hlist_bl_node * next , * * pprev ; } ;
struct path ;
struct path { struct vfsmount * mnt ; struct dentry * dentry ; } ;
struct path ;
typedef struct files_struct * fl_owner_t ;
struct nfs4_lock_info { struct nfs4_lock_state * owner ; } ;
struct klist_iter { struct klist * i_klist ; struct klist_node * i_cur ; } ;
struct tick_device { struct clock_event_device * evtdev ; enum tick_device_mode mode ; } ;
typedef enum irqreturn irqreturn_t ;
struct core_thread { struct task_struct * task ; struct core_thread * next ; } ;
struct sysv_sem { struct sem_undo_list * undo_list ; } ;
typedef struct __key_reference_with_attributes * key_ref_t ;
struct llist_head { struct llist_node * first ; } ;
struct llist_node { struct llist_node * next ; } ;
struct bio_list ;
enum sum_check_flags { SUM_CHECK_P_RESULT = ( 1 << SUM_CHECK_P ) , SUM_CHECK_Q_RESULT = ( 1 << SUM_CHECK_Q ) , } ;
typedef struct user_regs_struct32 compat_elf_gregset_t ;
typedef enum { SS_FREE = 0 , SS_UNCONNECTED , SS_CONNECTING , SS_CONNECTED , SS_DISCONNECTING } socket_state ;
typedef struct skb_frag_struct skb_frag_t ;
struct hlist_head ;
struct netns_dccp { struct sock * v4_ctl_sk ; struct sock * v6_ctl_sk ; } ;
struct flow_cache_object { const struct flow_cache_ops * ops ; } ;
struct hlist_nulls_head { struct hlist_nulls_node * first ; } ;
struct hlist_nulls_node { struct hlist_nulls_node * next , * * pprev ; } ;
struct path ;
struct seq_net_private { struct net * net ; } ;
struct cgroup_iter { struct list_head * cg_link ; struct list_head * task ; } ;
struct path ;
typedef enum netdev_tx netdev_tx_t ;
typedef enum gro_result gro_result_t ;
typedef enum rx_handler_result rx_handler_result_t ;
struct bio_list { struct bio * head ; struct bio * tail ; } ;
typedef struct transaction_s transaction_t ;
typedef struct jbd2_journal_handle handle_t ;
typedef struct journal_s journal_t ;
typedef enum { OSL_GLOBAL_LOCK_HANDLER , OSL_NOTIFY_HANDLER , OSL_GPE_HANDLER , OSL_DEBUGGER_THREAD , OSL_EC_POLL_HANDLER , OSL_EC_BURST_HANDLER } acpi_execute_type ;
struct acpi_device_dir { struct proc_dir_entry * entry ; } ;
typedef enum { mechtype_caddy = 0 , mechtype_tray = 1 , mechtype_popup = 2 , mechtype_individual_changer = 4 , mechtype_cartridge_changer = 5 } mechtype_t ;
enum { LIBATA_MAX_PRD = ATA_MAX_PRD / 2 , LIBATA_DUMB_MAX_PRD = ATA_MAX_PRD / 4 , ATA_DEF_QUEUE = 1 , ATA_MAX_QUEUE = 32 , ATA_TAG_INTERNAL = ATA_MAX_QUEUE - 1 , ATA_SHORT_PAUSE = 16 , ATAPI_MAX_DRAIN = 16 << 10 , ATA_ALL_DEVICES = ( 1 << ATA_MAX_DEVICES ) - 1 , ATA_SHT_EMULATED = 1 , ATA_SHT_CMD_PER_LUN = 1 , ATA_SHT_THIS_ID = - 1 , ATA_SHT_USE_CLUSTERING = 1 , ATA_DFLAG_LBA = ( 1 << 0 ) , ATA_DFLAG_LBA48 = ( 1 << 1 ) , ATA_DFLAG_CDB_INTR = ( 1 << 2 ) , ATA_DFLAG_NCQ = ( 1 << 3 ) , ATA_DFLAG_FLUSH_EXT = ( 1 << 4 ) , ATA_DFLAG_ACPI_PENDING = ( 1 << 5 ) , ATA_DFLAG_ACPI_FAILED = ( 1 << 6 ) , ATA_DFLAG_AN = ( 1 << 7 ) , ATA_DFLAG_DMADIR = ( 1 << 10 ) , ATA_DFLAG_CFG_MASK = ( 1 << 12 ) - 1 , ATA_DFLAG_PIO = ( 1 << 12 ) , ATA_DFLAG_NCQ_OFF = ( 1 << 13 ) , ATA_DFLAG_SLEEPING = ( 1 << 15 ) , ATA_DFLAG_DUBIOUS_XFER = ( 1 << 16 ) , ATA_DFLAG_NO_UNLOAD = ( 1 << 17 ) , ATA_DFLAG_UNLOCK_HPA = ( 1 << 18 ) , ATA_DFLAG_INIT_MASK = ( 1 << 24 ) - 1 , ATA_DFLAG_DETACH = ( 1 << 24 ) , ATA_DFLAG_DETACHED = ( 1 << 25 ) , ATA_DFLAG_DA = ( 1 << 26 ) , ATA_DFLAG_DEVSLP = ( 1 << 27 ) , ATA_DFLAG_ACPI_DISABLED = ( 1 << 28 ) , ATA_DEV_UNKNOWN = 0 , ATA_DEV_ATA = 1 , ATA_DEV_ATA_UNSUP = 2 , ATA_DEV_ATAPI = 3 , ATA_DEV_ATAPI_UNSUP = 4 , ATA_DEV_PMP = 5 , ATA_DEV_PMP_UNSUP = 6 , ATA_DEV_SEMB = 7 , ATA_DEV_SEMB_UNSUP = 8 , ATA_DEV_NONE = 9 , ATA_LFLAG_NO_HRST = ( 1 << 1 ) , ATA_LFLAG_NO_SRST = ( 1 << 2 ) , ATA_LFLAG_ASSUME_ATA = ( 1 << 3 ) , ATA_LFLAG_ASSUME_SEMB = ( 1 << 4 ) , ATA_LFLAG_ASSUME_CLASS = ATA_LFLAG_ASSUME_ATA | ATA_LFLAG_ASSUME_SEMB , ATA_LFLAG_NO_RETRY = ( 1 << 5 ) , ATA_LFLAG_DISABLED = ( 1 << 6 ) , ATA_LFLAG_SW_ACTIVITY = ( 1 << 7 ) , ATA_LFLAG_NO_LPM = ( 1 << 8 ) , ATA_LFLAG_RST_ONCE = ( 1 << 9 ) , ATA_FLAG_SLAVE_POSS = ( 1 << 0 ) , ATA_FLAG_SATA = ( 1 << 1 ) , ATA_FLAG_NO_ATAPI = ( 1 << 6 ) , ATA_FLAG_PIO_DMA = ( 1 << 7 ) , ATA_FLAG_PIO_LBA48 = ( 1 << 8 ) , ATA_FLAG_PIO_POLLING = ( 1 << 9 ) , ATA_FLAG_NCQ = ( 1 << 10 ) , ATA_FLAG_NO_POWEROFF_SPINDOWN = ( 1 << 11 ) , ATA_FLAG_NO_HIBERNATE_SPINDOWN = ( 1 << 12 ) , ATA_FLAG_DEBUGMSG = ( 1 << 13 ) , ATA_FLAG_FPDMA_AA = ( 1 << 14 ) , ATA_FLAG_IGN_SIMPLEX = ( 1 << 15 ) , ATA_FLAG_NO_IORDY = ( 1 << 16 ) , ATA_FLAG_ACPI_SATA = ( 1 << 17 ) , ATA_FLAG_AN = ( 1 << 18 ) , ATA_FLAG_PMP = ( 1 << 19 ) , ATA_FLAG_EM = ( 1 << 21 ) , ATA_FLAG_SW_ACTIVITY = ( 1 << 22 ) , ATA_FLAG_NO_DIPM = ( 1 << 23 ) , ATA_PFLAG_EH_PENDING = ( 1 << 0 ) , ATA_PFLAG_EH_IN_PROGRESS = ( 1 << 1 ) , ATA_PFLAG_FROZEN = ( 1 << 2 ) , ATA_PFLAG_RECOVERED = ( 1 << 3 ) , ATA_PFLAG_LOADING = ( 1 << 4 ) , ATA_PFLAG_SCSI_HOTPLUG = ( 1 << 6 ) , ATA_PFLAG_INITIALIZING = ( 1 << 7 ) , ATA_PFLAG_RESETTING = ( 1 << 8 ) , ATA_PFLAG_UNLOADING = ( 1 << 9 ) , ATA_PFLAG_UNLOADED = ( 1 << 10 ) , ATA_PFLAG_SUSPENDED = ( 1 << 17 ) , ATA_PFLAG_PM_PENDING = ( 1 << 18 ) , ATA_PFLAG_INIT_GTM_VALID = ( 1 << 19 ) , ATA_PFLAG_PIO32 = ( 1 << 20 ) , ATA_PFLAG_PIO32CHANGE = ( 1 << 21 ) , ATA_QCFLAG_ACTIVE = ( 1 << 0 ) , ATA_QCFLAG_DMAMAP = ( 1 << 1 ) , ATA_QCFLAG_IO = ( 1 << 3 ) , ATA_QCFLAG_RESULT_TF = ( 1 << 4 ) , ATA_QCFLAG_CLEAR_EXCL = ( 1 << 5 ) , ATA_QCFLAG_QUIET = ( 1 << 6 ) , ATA_QCFLAG_RETRY = ( 1 << 7 ) , ATA_QCFLAG_FAILED = ( 1 << 16 ) , ATA_QCFLAG_SENSE_VALID = ( 1 << 17 ) , ATA_QCFLAG_EH_SCHEDULED = ( 1 << 18 ) , ATA_HOST_SIMPLEX = ( 1 << 0 ) , ATA_HOST_STARTED = ( 1 << 1 ) , ATA_HOST_PARALLEL_SCAN = ( 1 << 2 ) , ATA_HOST_IGNORE_ATA = ( 1 << 3 ) , ATA_TMOUT_BOOT = 30000 , ATA_TMOUT_BOOT_QUICK = 7000 , ATA_TMOUT_INTERNAL_QUICK = 5000 , ATA_TMOUT_MAX_PARK = 30000 , ATA_TMOUT_FF_WAIT_LONG = 2000 , ATA_TMOUT_FF_WAIT = 800 , ATA_WAIT_AFTER_RESET = 150 , ATA_TMOUT_PMP_SRST_WAIT = 5000 , BUS_UNKNOWN = 0 , BUS_DMA = 1 , BUS_IDLE = 2 , BUS_NOINTR = 3 , BUS_NODATA = 4 , BUS_TIMER = 5 , BUS_PIO = 6 , BUS_EDD = 7 , BUS_IDENTIFY = 8 , BUS_PACKET = 9 , PORT_UNKNOWN = 0 , PORT_ENABLED = 1 , PORT_DISABLED = 2 , ATA_NR_PIO_MODES = 7 , ATA_NR_MWDMA_MODES = 5 , ATA_NR_UDMA_MODES = 8 , ATA_SHIFT_PIO = 0 , ATA_SHIFT_MWDMA = ATA_SHIFT_PIO + ATA_NR_PIO_MODES , ATA_SHIFT_UDMA = ATA_SHIFT_MWDMA + ATA_NR_MWDMA_MODES , ATA_DMA_PAD_SZ = 4 , ATA_ERING_SIZE = 32 , ATA_DEFER_LINK = 1 , ATA_DEFER_PORT = 2 , ATA_EH_DESC_LEN = 80 , ATA_EH_REVALIDATE = ( 1 << 0 ) , ATA_EH_SOFTRESET = ( 1 << 1 ) , ATA_EH_HARDRESET = ( 1 << 2 ) , ATA_EH_RESET = ATA_EH_SOFTRESET | ATA_EH_HARDRESET , ATA_EH_ENABLE_LINK = ( 1 << 3 ) , ATA_EH_PARK = ( 1 << 5 ) , ATA_EH_PERDEV_MASK = ATA_EH_REVALIDATE | ATA_EH_PARK , ATA_EH_ALL_ACTIONS = ATA_EH_REVALIDATE | ATA_EH_RESET | ATA_EH_ENABLE_LINK , ATA_EHI_HOTPLUGGED = ( 1 << 0 ) , ATA_EHI_NO_AUTOPSY = ( 1 << 2 ) , ATA_EHI_QUIET = ( 1 << 3 ) , ATA_EHI_NO_RECOVERY = ( 1 << 4 ) , ATA_EHI_DID_SOFTRESET = ( 1 << 16 ) , ATA_EHI_DID_HARDRESET = ( 1 << 17 ) , ATA_EHI_PRINTINFO = ( 1 << 18 ) , ATA_EHI_SETMODE = ( 1 << 19 ) , ATA_EHI_POST_SETMODE = ( 1 << 20 ) , ATA_EHI_DID_RESET = ATA_EHI_DID_SOFTRESET | ATA_EHI_DID_HARDRESET , ATA_EHI_TO_SLAVE_MASK = ATA_EHI_NO_AUTOPSY | ATA_EHI_QUIET , ATA_EH_MAX_TRIES = 5 , ATA_LINK_RESUME_TRIES = 5 , ATA_PROBE_MAX_TRIES = 3 , ATA_EH_DEV_TRIES = 3 , ATA_EH_PMP_TRIES = 5 , ATA_EH_PMP_LINK_TRIES = 3 , SATA_PMP_RW_TIMEOUT = 3000 , ATA_EH_CMD_TIMEOUT_TABLE_SIZE = 6 , ATA_HORKAGE_DIAGNOSTIC = ( 1 << 0 ) , ATA_HORKAGE_NODMA = ( 1 << 1 ) , ATA_HORKAGE_NONCQ = ( 1 << 2 ) , ATA_HORKAGE_MAX_SEC_128 = ( 1 << 3 ) , ATA_HORKAGE_BROKEN_HPA = ( 1 << 4 ) , ATA_HORKAGE_DISABLE = ( 1 << 5 ) , ATA_HORKAGE_HPA_SIZE = ( 1 << 6 ) , ATA_HORKAGE_IVB = ( 1 << 8 ) , ATA_HORKAGE_STUCK_ERR = ( 1 << 9 ) , ATA_HORKAGE_BRIDGE_OK = ( 1 << 10 ) , ATA_HORKAGE_ATAPI_MOD16_DMA = ( 1 << 11 ) , ATA_HORKAGE_FIRMWARE_WARN = ( 1 << 12 ) , ATA_HORKAGE_1_5_GBPS = ( 1 << 13 ) , ATA_HORKAGE_NOSETXFER = ( 1 << 14 ) , ATA_HORKAGE_BROKEN_FPDMA_AA = ( 1 << 15 ) , ATA_HORKAGE_DUMP_ID = ( 1 << 16 ) , ATA_DMA_MASK_ATA = ( 1 << 0 ) , ATA_DMA_MASK_ATAPI = ( 1 << 1 ) , ATA_DMA_MASK_CFA = ( 1 << 2 ) , ATAPI_READ = 0 , ATAPI_WRITE = 1 , ATAPI_READ_CD = 2 , ATAPI_PASS_THRU = 3 , ATAPI_MISC = 4 , ATA_TIMING_SETUP = ( 1 << 0 ) , ATA_TIMING_ACT8B = ( 1 << 1 ) , ATA_TIMING_REC8B = ( 1 << 2 ) , ATA_TIMING_CYC8B = ( 1 << 3 ) , ATA_TIMING_8BIT = ATA_TIMING_ACT8B | ATA_TIMING_REC8B | ATA_TIMING_CYC8B , ATA_TIMING_ACTIVE = ( 1 << 4 ) , ATA_TIMING_RECOVER = ( 1 << 5 ) , ATA_TIMING_DMACK_HOLD = ( 1 << 6 ) , ATA_TIMING_CYCLE = ( 1 << 7 ) , ATA_TIMING_UDMA = ( 1 << 8 ) , ATA_TIMING_ALL = ATA_TIMING_SETUP | ATA_TIMING_ACT8B | ATA_TIMING_REC8B | ATA_TIMING_CYC8B | ATA_TIMING_ACTIVE | ATA_TIMING_RECOVER | ATA_TIMING_DMACK_HOLD | ATA_TIMING_CYCLE | ATA_TIMING_UDMA , ATA_ACPI_FILTER_SETXFER = 1 << 0 , ATA_ACPI_FILTER_LOCK = 1 << 1 , ATA_ACPI_FILTER_DIPM = 1 << 2 , ATA_ACPI_FILTER_FPDMA_OFFSET = 1 << 3 , ATA_ACPI_FILTER_FPDMA_AA = 1 << 4 , ATA_ACPI_FILTER_DEFAULT = ATA_ACPI_FILTER_SETXFER | ATA_ACPI_FILTER_LOCK | ATA_ACPI_FILTER_DIPM , } ;
typedef enum { PHY_INTERFACE_MODE_NA , PHY_INTERFACE_MODE_MII , PHY_INTERFACE_MODE_GMII , PHY_INTERFACE_MODE_SGMII , PHY_INTERFACE_MODE_TBI , PHY_INTERFACE_MODE_RMII , PHY_INTERFACE_MODE_RGMII , PHY_INTERFACE_MODE_RGMII_ID , PHY_INTERFACE_MODE_RGMII_RXID , PHY_INTERFACE_MODE_RGMII_TXID , PHY_INTERFACE_MODE_RTBI , PHY_INTERFACE_MODE_SMII , } phy_interface_t ;
typedef enum { STATUSTYPE_INFO , STATUSTYPE_TABLE } status_type_t ;
typedef __builtin_va_list __gnuc_va_list ;
typedef __signed__ char __s8 ;
typedef unsigned char __u8 ;
typedef __signed__ short __s16 ;
typedef unsigned short __u16 ;
typedef __signed__ int __s32 ;
typedef unsigned int __u32 ;
__extension__ typedef __signed__ long long __s64 ;
__extension__ typedef unsigned long long __u64 ;
typedef signed char s8 ;
typedef unsigned char u8 ;
typedef signed short s16 ;
typedef unsigned short u16 ;
typedef signed int s32 ;
typedef unsigned int u32 ;
typedef signed long long s64 ;
typedef unsigned long long u64 ;
typedef int __kernel_key_t ;
typedef int __kernel_mqd_t ;
typedef unsigned long __kernel_ino_t ;
typedef unsigned int __kernel_mode_t ;
typedef unsigned long __kernel_nlink_t ;
typedef long __kernel_off_t ;
typedef int __kernel_pid_t ;
typedef int __kernel_ipc_pid_t ;
typedef unsigned int __kernel_uid_t ;
typedef unsigned int __kernel_gid_t ;
typedef unsigned long __kernel_size_t ;
typedef long __kernel_ssize_t ;
typedef long __kernel_ptrdiff_t ;
typedef long __kernel_time_t ;
typedef long __kernel_suseconds_t ;
typedef long __kernel_clock_t ;
typedef int __kernel_timer_t ;
typedef int __kernel_clockid_t ;
typedef int __kernel_daddr_t ;
typedef char * __kernel_caddr_t ;
typedef unsigned short __kernel_uid16_t ;
typedef unsigned short __kernel_gid16_t ;
typedef long long __kernel_loff_t ;
typedef unsigned short __kernel_old_uid_t ;
typedef unsigned short __kernel_old_gid_t ;
typedef unsigned long __kernel_old_dev_t ;
typedef unsigned short umode_t ;
typedef unsigned long uintptr_t ;
typedef unsigned char u_char ;
typedef unsigned short u_short ;
typedef unsigned int u_int ;
typedef unsigned long u_long ;
typedef unsigned char unchar ;
typedef unsigned short ushort ;
typedef unsigned int uint ;
typedef unsigned long ulong ;
typedef unsigned long sector_t ;
typedef unsigned long blkcnt_t ;
typedef unsigned gfp_t ;
typedef unsigned fmode_t ;
typedef unsigned oom_flags_t ;
typedef unsigned long irq_hw_number_t ;
struct _ddebug { const char * modname ; const char * function ; const char * filename ; const char * format ; unsigned int lineno : 18 ; unsigned int flags : 8 ; } __attribute__ ( ( aligned ( 8 ) ) ) ;
struct pt_regs ;
struct stat { unsigned long st_dev ; unsigned long st_ino ; unsigned long st_nlink ; unsigned int st_mode ; unsigned int st_uid ; unsigned int st_gid ; unsigned int __pad0 ; unsigned long st_rdev ; long st_size ; long st_blksize ; long st_blocks ; unsigned long st_atime ; unsigned long st_atime_nsec ; unsigned long st_mtime ; unsigned long st_mtime_nsec ; unsigned long st_ctime ; unsigned long st_ctime_nsec ; long __unused [ 3 ] ; } ;
struct __old_kernel_stat { unsigned short st_dev ; unsigned short st_ino ; unsigned short st_mode ; unsigned short st_nlink ; unsigned short st_uid ; unsigned short st_gid ; unsigned short st_rdev ; unsigned int st_size ; unsigned int st_atime ; unsigned int st_mtime ; unsigned int st_ctime ; } ;
struct bug_entry { signed int bug_addr_disp ; signed int file_disp ; unsigned short line ; unsigned short flags ; } ;
struct pt_regs ;
struct pt_regs { unsigned long r15 ; unsigned long r14 ; unsigned long r13 ; unsigned long r12 ; unsigned long bp ; unsigned long bx ; unsigned long r11 ; unsigned long r10 ; unsigned long r9 ; unsigned long r8 ; unsigned long ax ; unsigned long cx ; unsigned long dx ; unsigned long si ; unsigned long di ; unsigned long orig_ax ; unsigned long ip ; unsigned long cs ; unsigned long flags ; unsigned long sp ; unsigned long ss ; } ;
struct desc_ptr { unsigned short size ; unsigned long address ; } __attribute__ ( ( packed ) ) ;
typedef unsigned long pteval_t ;
typedef unsigned long pmdval_t ;
typedef unsigned long pudval_t ;
typedef unsigned long pgdval_t ;
typedef unsigned long pgprotval_t ;
struct desc_ptr ;
struct cpumask ;
struct paravirt_callee_save { void * func ; } ;
struct vm86_regs { long ebx ; long ecx ; long edx ; long esi ; long edi ; long ebp ; long eax ; long __null_ds ; long __null_es ; long __null_fs ; long __null_gs ; long orig_eax ; long eip ; unsigned short cs , __csh ; long eflags ; long esp ; unsigned short ss , __ssh ; unsigned short es , __esh ; unsigned short ds , __dsh ; unsigned short fs , __fsh ; unsigned short gs , __gsh ; } ;
struct revectored_struct { unsigned long __map [ 8 ] ; } ;
struct vm86plus_info_struct { unsigned long force_return_for_pic : 1 ; unsigned long vm86dbg_active : 1 ; unsigned long vm86dbg_TFpendig : 1 ; unsigned long unused : 28 ; unsigned long is_vm86pus : 1 ; unsigned char vm86dbg_intxxtab [ 32 ] ; } ;
struct math_emu_info { long ___orig_eip ; union { struct pt_regs * regs ; struct kernel_vm86_regs * vm86 ; } ; } ;
struct sigcontext { unsigned long r8 ; unsigned long r9 ; unsigned long r10 ; unsigned long r11 ; unsigned long r12 ; unsigned long r13 ; unsigned long r14 ; unsigned long r15 ; unsigned long di ; unsigned long si ; unsigned long bp ; unsigned long bx ; unsigned long dx ; unsigned long ax ; unsigned long cx ; unsigned long sp ; unsigned long ip ; unsigned long flags ; unsigned short cs ; unsigned short gs ; unsigned short fs ; unsigned short __pad0 ; unsigned long err ; unsigned long trapno ; unsigned long oldmask ; unsigned long cr2 ; void * fpstate ; unsigned long reserved1 [ 8 ] ; } ;
struct pt_regs ;
struct orig_ist { unsigned long ist [ 7 ] ; } ;
struct fpu { unsigned int last_cpu ; unsigned int has_fpu ; union thread_xstate * state ; } ;
struct preempt_notifier ;
struct preempt_notifier { struct hlist_node link ; struct preempt_ops * ops ; } ;
struct timezone { int tz_minuteswest ; int tz_dsttime ; } ;
struct tm { int tm_sec ; int tm_min ; int tm_hour ; int tm_mday ; int tm_mon ; long tm_year ; int tm_wday ; int tm_yday ; } ;
struct wait_bit_key { void * flags ; int bit_nr ; } ;
struct free_area { struct list_head free_list [ MIGRATE_TYPES ] ; unsigned long nr_free ; } ;
struct zone_padding { char x [ 0 ] ; } __attribute__ ( ( __aligned__ ( 1 << ( 6 ) ) ) ) ;
struct zone_reclaim_stat { unsigned long recent_rotated [ 2 ] ; unsigned long recent_scanned [ 2 ] ; } ;
typedef unsigned isolate_mode_t ;
struct per_cpu_pages { int count ; int high ; int batch ; struct list_head lists [ MIGRATE_PCPTYPES ] ; } ;
struct zonelist_cache { unsigned short z_to_n [ ( ( 1 << 6 ) * 4 ) ] ; unsigned long fullzones [ ( ( ( ( ( 1 << 6 ) * 4 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long last_full_zap ; } ;
struct zoneref { struct zone * zone ; int zone_idx ; } ;
struct node_active_region { unsigned long start_pfn ; unsigned long end_pfn ; int nid ; } ;
struct mutex_waiter { struct list_head list ; struct task_struct * task ; } ;
struct debug_obj { struct hlist_node node ; enum debug_obj_state state ; unsigned int astate ; void * object ; struct debug_obj_descr * descr ; } ;
typedef unsigned long long cycles_t ;
struct srcu_struct_array { unsigned long c [ 2 ] ; unsigned long seq [ 2 ] ; } ;
struct mem_section ;
struct mpf_intel { char signature [ 4 ] ; unsigned int physptr ; unsigned char length ; unsigned char specification ; unsigned char checksum ; unsigned char feature1 ; unsigned char feature2 ; unsigned char feature3 ; unsigned char feature4 ; unsigned char feature5 ; } ;
struct mpc_table { char signature [ 4 ] ; unsigned short length ; char spec ; char checksum ; char oem [ 8 ] ; char productid [ 12 ] ; unsigned int oemptr ; unsigned short oemsize ; unsigned short oemcount ; unsigned int lapic ; unsigned int reserved ; } ;
struct mpc_cpu { unsigned char type ; unsigned char apicid ; unsigned char apicver ; unsigned char cpuflag ; unsigned int cpufeature ; unsigned int featureflag ; unsigned int reserved [ 2 ] ; } ;
struct mpc_bus { unsigned char type ; unsigned char busid ; unsigned char bustype [ 6 ] ; } ;
struct mpc_ioapic { unsigned char type ; unsigned char apicid ; unsigned char apicver ; unsigned char flags ; unsigned int apicaddr ; } ;
struct mpc_intsrc { unsigned char type ; unsigned char irqtype ; unsigned short irqflag ; unsigned char srcbus ; unsigned char srcbusirq ; unsigned char dstapic ; unsigned char dstirq ; } ;
struct mpc_lintsrc { unsigned char type ; unsigned char irqtype ; unsigned short irqflag ; unsigned char srcbusid ; unsigned char srcbusirq ; unsigned char destapic ; unsigned char destapiclint ; } ;
struct mpc_oemtable { char signature [ 4 ] ; unsigned short length ; char rev ; char checksum ; char mpc [ 8 ] ; } ;
typedef unsigned short apm_event_t ;
typedef unsigned short apm_eventinfo_t ;
struct edid_info { unsigned char dummy [ 128 ] ; } ;
struct mpc_bus ;
struct mpc_cpu ;
struct mpc_table ;
struct physid_mask { unsigned long mask [ ( ( ( 32768 ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; } ;
struct pm_domain_data { struct list_head list_node ; struct device * dev ; } ;
typedef unsigned long xen_pfn_t ;
typedef unsigned long xen_ulong_t ;
typedef unsigned char * __guest_handle_uchar ;
typedef unsigned int * __guest_handle_uint ;
typedef char * __guest_handle_char ;
typedef int * __guest_handle_int ;
typedef void * __guest_handle_void ;
struct arch_shared_info { unsigned long max_pfn ; unsigned long pfn_to_mfn_frame_list_list ; unsigned long nmi_reason ; } ;
struct arch_vcpu_info { unsigned long cr2 ; unsigned long pad ; } ;
typedef unsigned long xen_callback_t ;
struct multicall_entry { unsigned long op ; long result ; unsigned long args [ 6 ] ; } ;
struct bio_vec ;
struct arch_clocksource_data { int vclock_mode ; } ;
struct io_apic_irq_attr ;
struct mem_section { unsigned long section_mem_map ; unsigned long * pageblock_flags ; } ;
struct pcpu_group_info { int nr_units ; unsigned long base_offset ; unsigned int * cpu_map ; } ;
struct rb_node { unsigned long __rb_parent_color ; struct rb_node * rb_right ; struct rb_node * rb_left ; } __attribute__ ( ( aligned ( sizeof ( long ) ) ) ) ;
struct ctl_path { const char * procname ; } ;
struct user_regs_struct { unsigned long r15 ; unsigned long r14 ; unsigned long r13 ; unsigned long r12 ; unsigned long bp ; unsigned long bx ; unsigned long r11 ; unsigned long r10 ; unsigned long r9 ; unsigned long r8 ; unsigned long ax ; unsigned long cx ; unsigned long dx ; unsigned long si ; unsigned long di ; unsigned long orig_ax ; unsigned long ip ; unsigned long cs ; unsigned long flags ; unsigned long sp ; unsigned long ss ; unsigned long fs_base ; unsigned long gs_base ; unsigned long ds ; unsigned long es ; unsigned long fs ; unsigned long gs ; } ;
typedef unsigned long elf_greg_t ;
struct va_alignment { int flags ; unsigned long mask ; } __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ;
struct kobj_uevent_env { char * envp [ 32 ] ; int envp_idx ; char buf [ 2048 ] ; int buflen ; } ;
struct kparam_string { unsigned int maxlen ; char * string ; } ;
struct kparam_array { unsigned int max ; unsigned int elemsize ; unsigned int * num ; const struct kernel_param_ops * ops ; void * elem ; } ;
struct tracepoint_func { void * func ; void * data ; } ;
struct tp_module { struct list_head list ; unsigned int num_tracepoints ; struct tracepoint * const * tracepoints_ptrs ; } ;
struct kernel_symbol { unsigned long value ; const char * name ; } ;
struct modversion_info { unsigned long crc ; char name [ ( 64 - sizeof ( unsigned long ) ) ] ; } ;
struct exception_table_entry ;
struct module_use { struct list_head source_list ; struct list_head target_list ; struct module * source , * target ; } ;
struct module_ref { unsigned long incs ; unsigned long decs ; } __attribute ( ( aligned ( 2 * sizeof ( unsigned long ) ) ) ) ;
struct timerqueue_head { struct rb_root head ; struct timerqueue_node * next ; } ;
struct vfsmount ;
struct dentry_stat_t { int nr_dentry ; int nr_unused ; int age_limit ; int want_pages ; int dummy [ 2 ] ; } ;
struct vfsmount ;
struct radix_tree_iter { unsigned long index ; unsigned long next_index ; unsigned long tags ; } ;
struct upid { int nr ; struct pid_namespace * ns ; struct hlist_node pid_chain ; } ;
struct pid_link { struct hlist_node node ; struct pid * pid ; } ;
struct bio_vec { struct page * bv_page ; unsigned int bv_len ; unsigned int bv_offset ; } ;
struct files_stat_struct { unsigned long nr_files ; unsigned long nr_free_files ; unsigned long max_files ; } ;
struct inodes_stat_t { int nr_inodes ; int nr_unused ; int dummy [ 5 ] ; } ;
struct vfsmount ;
struct qtree_mem_dqinfo { struct super_block * dqi_sb ; int dqi_type ; unsigned int dqi_blocks ; unsigned int dqi_free_blk ; unsigned int dqi_free_entry ; unsigned int dqi_blocksize_bits ; unsigned int dqi_entry_size ; unsigned int dqi_usable_bs ; unsigned int dqi_qtree_depth ; struct qtree_fmt_operations * dqi_ops ; } ;
typedef long long qsize_t ;
struct quota_format_type ;
struct quota_format_type { int qf_fmt_id ; const struct quota_format_ops * qf_ops ; struct module * qf_owner ; struct quota_format_type * qf_next ; } ;
struct quota_module_name { int qm_fmt_id ; char * qm_mod_name ; } ;
struct lock_manager { struct list_head list ; } ;
struct fiemap_extent_info { unsigned int fi_flags ; unsigned int fi_extents_mapped ; unsigned int fi_extents_max ; struct fiemap_extent * fi_extents_start ; } ;
struct tree_descr { char * name ; const struct file_operations * ops ; int mode ; } ;
struct kmem_cache_cpu { void * * freelist ; unsigned long tid ; struct page * page ; struct page * partial ; } ;
struct kmem_cache_order_objects { unsigned long x ; } ;
typedef unsigned long old_sigset_t ;
struct pt_regs ;
struct dev_archdata { struct dma_map_ops * dma_ops ; void * iommu ; } ;
struct subsys_dev_iter { struct klist_iter ki ; const struct device_type * type ; } ;
struct class_dev_iter { struct klist_iter ki ; const struct device_type * type ; } ;
struct device_dma_parameters { unsigned int max_segment_size ; unsigned long segment_boundary_mask ; } ;
struct acpi_dev_node { void * handle ; } ;
typedef unsigned long kernel_ulong_t ;
struct of_device_id { char name [ 32 ] ; char type [ 32 ] ; char compatible [ 128 ] ; const void * data ; } ;
struct vio_device_id { char type [ 32 ] ; char compat [ 32 ] ; } ;
struct rpmsg_device_id { char name [ 32 ] ; } ;
struct dmi_strmatch { unsigned char slot ; char substr [ 79 ] ; } ;
struct amba_id { unsigned int id ; unsigned int mask ; void * data ; } ;
typedef int pci_power_t ;
typedef unsigned int pci_channel_state_t ;
typedef unsigned int pcie_reset_state_t ;
typedef unsigned short pci_dev_flags_t ;
typedef unsigned short pci_bus_flags_t ;
struct pci_bus_resource { struct list_head list ; struct resource * res ; unsigned int flags ; } ;
typedef unsigned int pci_ers_result_t ;
struct arch_uprobe_task { unsigned long saved_scratch_register ; unsigned int saved_trap_nr ; unsigned int saved_tf ; } ;
typedef unsigned long vm_flags_t ;
struct task_rss_stat { int events ; int count [ NR_MM_COUNTERS ] ; } ;
struct vm_fault { unsigned int flags ; unsigned long pgoff ; void * virtual_address ; struct page * page ; } ;
struct vm_event_state { unsigned long event [ NR_VM_EVENT_ITEMS ] ; } ;
struct zap_details { struct vm_area_struct * nonlinear_vma ; struct address_space * check_mapping ; unsigned long first_index ; unsigned long last_index ; } ;
struct vm_unmapped_area_info { unsigned long flags ; unsigned long length ; unsigned long low_limit ; unsigned long high_limit ; unsigned long align_mask ; unsigned long align_offset ; } ;
struct pci_sysdata { int domain ; int node ; void * iommu ; } ;
struct dma_attrs { unsigned long flags [ ( ( ( DMA_ATTR_MAX ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; } ;
struct sg_table { struct scatterlist * sgl ; unsigned int nents ; unsigned int orig_nents ; } ;
struct dma_attrs ;
struct sched_param { int sched_priority ; } ;
typedef unsigned long cputime_t ;
struct ipc_kludge { struct msgbuf * msgp ; long msgtyp ; } ;
struct sembuf { unsigned short sem_num ; short sem_op ; short sem_flg ; } ;
union semun { int val ; struct semid_ds * buf ; unsigned short * array ; struct seminfo * __buf ; void * __pad ; } ;
struct seminfo { int semmap ; int semmni ; int semmns ; int semmnu ; int semmsl ; int semopm ; int semume ; int semusz ; int semvmx ; int semaem ; } ;
struct seccomp { int mode ; struct seccomp_filter * filter ; } ;
struct plist_head { struct list_head node_list ; } ;
struct plist_node { int prio ; struct list_head prio_list ; struct list_head node_list ; } ;
struct rlimit { unsigned long rlim_cur ; unsigned long rlim_max ; } ;
struct latency_record { unsigned long backtrace [ 12 ] ; unsigned int count ; unsigned long time ; unsigned long max ; } ;
struct blk_plug ;
struct task_migration_notifier { struct task_struct * task ; int from_cpu ; int to_cpu ; } ;
typedef unsigned long aio_context_t ;
struct reclaim_state ;
struct sched_info { unsigned long pcount ; unsigned long long run_delay ; unsigned long long last_arrival , last_queued ; } ;
struct sched_domain_attr { int relax_domain_level ; } ;
struct load_weight { unsigned long weight , inv_weight ; } ;
struct sched_rt_entity { struct list_head run_list ; unsigned long timeout ; unsigned int time_slice ; struct sched_rt_entity * back ; struct sched_rt_entity * parent ; struct rt_rq * rt_rq ; struct rt_rq * my_q ; } ;
struct pt_regs ;
struct pt_regs ;
struct exception_table_entry { int insn , fixup ; } ;
struct __large_struct { unsigned long buf [ 100 ] ; } ;
struct io_apic_irq_attr { int ioapic ; int ioapic_pin ; int trigger ; int polarity ; } ;
typedef int vector_irq_t [ 256 ] ;
struct irq_chip_regs { unsigned long enable ; unsigned long disable ; unsigned long mask ; unsigned long ack ; unsigned long eoi ; unsigned long type ; unsigned long polarity ; } ;
struct dma_chan_percpu { unsigned long memcpy_count ; unsigned long bytes_transferred ; } ;
struct dma_page_list { char * base_address ; int nr_pages ; struct page * * pages ; } ;
struct dql { unsigned int num_queued ; unsigned int adj_limit ; unsigned int last_obj_cnt ; unsigned int limit __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; unsigned int num_completed ; unsigned int prev_ovlimit ; unsigned int prev_num_queued ; unsigned int prev_last_obj_cnt ; unsigned int lowest_slack ; unsigned long slack_start_time ; unsigned int max_limit ; unsigned int min_limit ; unsigned int slack_hold_time ; } ;
typedef unsigned short __kernel_sa_family_t ;
struct linger { int l_onoff ; int l_linger ; } ;
struct ifmap { unsigned long mem_start ; unsigned long mem_end ; unsigned short base_addr ; unsigned char irq ; unsigned char dma ; unsigned char port ; } ;
struct user32_fxsr_struct { unsigned short cwd ; unsigned short swd ; unsigned short twd ; unsigned short fop ; int fip ; int fcs ; int foo ; int fos ; int mxcsr ; int reserved ; int st_space [ 32 ] ; int xmm_space [ 32 ] ; int padding [ 56 ] ; } ;
struct socket { socket_state state ; ; short type ; ; unsigned long flags ; struct socket_wq * wq ; struct file * file ; struct sock * sk ; const struct proto_ops * ops ; } ;
struct ts_state { unsigned int offset ; char cb [ 40 ] ; } ;
typedef unsigned int sk_buff_data_t ;
struct netns_core { struct ctl_table_header * sysctl_hdr ; int sysctl_somaxconn ; struct prot_inuse * inuse ; } ;
struct snmp_mib { const char * name ; int entry ; } ;
struct icmp_mib { unsigned long mibs [ __ICMP_MIB_MAX ] ; } ;
struct icmpv6_mib { unsigned long mibs [ __ICMP6_MIB_MAX ] ; } ;
struct tcp_mib { unsigned long mibs [ __TCP_MIB_MAX ] ; } ;
struct udp_mib { unsigned long mibs [ __UDP_MIB_MAX ] ; } ;
struct linux_mib { unsigned long mibs [ __LINUX_MIB_MAX ] ; } ;
struct linux_xfrm_mib { unsigned long mibs [ __LINUX_MIB_XFRMMAX ] ; } ;
struct netns_unix { int sysctl_max_dgram_qlen ; struct ctl_table_header * ctl ; } ;
struct netns_sysctl_ipv6 { struct ctl_table_header * hdr ; struct ctl_table_header * route_hdr ; struct ctl_table_header * icmp_hdr ; struct ctl_table_header * frags_hdr ; int bindv6only ; int flush_delay ; int ip6_rt_max_size ; int ip6_rt_gc_min_interval ; int ip6_rt_gc_timeout ; int ip6_rt_gc_interval ; int ip6_rt_gc_elasticity ; int ip6_rt_mtu_expires ; int ip6_rt_min_advmss ; int icmpv6_time ; } ;
typedef unsigned long flow_compare_t ;
struct nf_proto_net { struct ctl_table_header * ctl_table_header ; struct ctl_table * ctl_table ; struct ctl_table_header * ctl_compat_header ; struct ctl_table * ctl_compat_table ; unsigned int users ; } ;
struct xfrm_algo { char alg_name [ 64 ] ; unsigned int alg_key_len ; char alg_key [ 0 ] ; } ;
struct xfrm_algo_auth { char alg_name [ 64 ] ; unsigned int alg_key_len ; unsigned int alg_trunc_len ; char alg_key [ 0 ] ; } ;
struct xfrm_algo_aead { char alg_name [ 64 ] ; unsigned int alg_key_len ; unsigned int alg_icv_len ; char alg_key [ 0 ] ; } ;
struct xfrm_policy_hash { struct hlist_head * table ; unsigned int hmask ; } ;
struct dsa_platform_data { struct device * netdev ; int nr_chips ; struct dsa_chip_data * chip ; } ;
struct ida_bitmap { long nr_busy ; unsigned long bitmap [ ( 128 / sizeof ( long ) - 1 ) ] ; } ;
struct cftype_set { struct list_head node ; struct cftype * cfts ; } ;
struct rlimit ;
struct sembuf ;
struct vfsmount ;
struct timezone ;
struct socket ;
struct sched_param ;
struct security_mnt_opts { char * * mnt_opts ; int * mnt_opts_flags ; int num_mnt_opts ; } ;
struct scm_fp_list { short count ; short max ; struct file * fp [ 253 ] ; } ;
struct netlink_notify { struct net * net ; int portid ; int protocol ; } ;
struct tpacket_stats { unsigned int tp_packets ; unsigned int tp_drops ; } ;
struct tpacket_stats_v3 { unsigned int tp_packets ; unsigned int tp_drops ; unsigned int tp_freeze_q_cnt ; } ;
struct tpacket_hdr { unsigned long tp_status ; unsigned int tp_len ; unsigned int tp_snaplen ; unsigned short tp_mac ; unsigned short tp_net ; unsigned int tp_sec ; unsigned int tp_usec ; } ;
struct tpacket_req { unsigned int tp_block_size ; unsigned int tp_block_nr ; unsigned int tp_frame_size ; unsigned int tp_frame_nr ; } ;
struct tpacket_req3 { unsigned int tp_block_size ; unsigned int tp_block_nr ; unsigned int tp_frame_size ; unsigned int tp_frame_nr ; unsigned int tp_retire_blk_tov ; unsigned int tp_sizeof_priv ; unsigned int tp_feature_req_word ; } ;
struct packet_mreq { int mr_ifindex ; unsigned short mr_type ; unsigned short mr_alen ; unsigned char mr_address [ 8 ] ; } ;
struct net_device_stats { unsigned long rx_packets ; unsigned long tx_packets ; unsigned long rx_bytes ; unsigned long tx_bytes ; unsigned long rx_errors ; unsigned long tx_errors ; unsigned long rx_dropped ; unsigned long tx_dropped ; unsigned long multicast ; unsigned long collisions ; unsigned long rx_length_errors ; unsigned long rx_over_errors ; unsigned long rx_crc_errors ; unsigned long rx_frame_errors ; unsigned long rx_fifo_errors ; unsigned long rx_missed_errors ; unsigned long tx_aborted_errors ; unsigned long tx_carrier_errors ; unsigned long tx_fifo_errors ; unsigned long tx_heartbeat_errors ; unsigned long tx_window_errors ; unsigned long rx_compressed ; unsigned long tx_compressed ; } ;
struct netdev_hw_addr_list { struct list_head list ; int count ; } ;
struct netdev_fcoe_hbainfo { char manufacturer [ 64 ] ; char serial_number [ 64 ] ; char hardware_version [ 64 ] ; char driver_version [ 64 ] ; char optionrom_version [ 64 ] ; char firmware_version [ 64 ] ; char model [ 256 ] ; char model_description [ 256 ] ; } ;
struct rtattr { unsigned short rta_len ; unsigned short rta_type ; } ;
struct rtmsg { unsigned char rtm_family ; unsigned char rtm_dst_len ; unsigned char rtm_src_len ; unsigned char rtm_tos ; unsigned char rtm_table ; unsigned char rtm_protocol ; unsigned char rtm_scope ; unsigned char rtm_type ; unsigned rtm_flags ; } ;
struct rtnexthop { unsigned short rtnh_len ; unsigned char rtnh_flags ; unsigned char rtnh_hops ; int rtnh_ifindex ; } ;
struct rtgenmsg { unsigned char rtgen_family ; } ;
struct ifinfomsg { unsigned char ifi_family ; unsigned char __ifi_pad ; unsigned short ifi_type ; int ifi_index ; unsigned ifi_flags ; unsigned ifi_change ; } ;
struct prefixmsg { unsigned char prefix_family ; unsigned char prefix_pad1 ; unsigned short prefix_pad2 ; int prefix_ifindex ; unsigned char prefix_type ; unsigned char prefix_len ; unsigned char prefix_flags ; unsigned char prefix_pad3 ; } ;
struct tcamsg { unsigned char tca_family ; unsigned char tca__pad1 ; unsigned short tca__pad2 ; } ;
struct builtin_fw { char * name ; void * data ; unsigned long size ; } ;
struct mem_cgroup_reclaim_cookie { struct zone * zone ; int priority ; unsigned int generation ; } ;
struct sock_fprog { unsigned short len ; struct sock_filter * filter ; } ;
struct pollfd { int fd ; short events ; short revents ; } ;
struct neigh_statistics { unsigned long allocs ; unsigned long destroys ; unsigned long hash_grows ; unsigned long res_failed ; unsigned long lookups ; unsigned long hits ; unsigned long rcv_probes_mcast ; unsigned long rcv_probes_ucast ; unsigned long periodic_gc_runs ; unsigned long forced_gc_runs ; unsigned long unres_discards ; } ;
struct neighbour_cb { unsigned long sched_next ; unsigned int flags ; } ;
struct tc_estimator { signed char interval ; unsigned char ewma_log ; } ;
struct tc_sizespec { unsigned char cell_log ; unsigned char size_log ; short cell_align ; int overhead ; unsigned int linklayer ; unsigned int mpu ; unsigned int mtu ; unsigned int tsize ; } ;
struct tc_cbq_police { unsigned char police ; unsigned char __res1 ; unsigned short __res2 ; } ;
struct tc_cnt { int refcnt ; int bindcnt ; } ;
struct gnet_estimator { signed char interval ; unsigned char ewma_log ; } ;
struct Qdisc_class_hash { struct hlist_head * hash ; unsigned int hashsize ; unsigned int hashmask ; unsigned int hashelems ; } ;
typedef long psched_tdiff_t ;
struct pt_regs ;
struct disk_stats { unsigned long sectors [ 2 ] ; unsigned long ios [ 2 ] ; unsigned long merges [ 2 ] ; unsigned long ticks [ 2 ] ; unsigned long io_ticks ; unsigned long time_in_queue ; } ;
struct disk_part_iter { struct gendisk * disk ; struct hd_struct * part ; int idx ; unsigned int flags ; } ;
struct rq_map_data ;
struct biovec_slab { int nr_vecs ; char * name ; struct kmem_cache * slab ; } ;
typedef struct request * ( elevator_request_list_fn ) ( struct request_queue * , struct request * ) ;
struct bio_vec ;
typedef enum blk_eh_timer_return ( rq_timed_out_fn ) ( struct request * ) ;
struct queue_limits { unsigned long bounce_pfn ; unsigned long seg_boundary_mask ; unsigned int max_hw_sectors ; unsigned int max_sectors ; unsigned int max_segment_size ; unsigned int physical_block_size ; unsigned int alignment_offset ; unsigned int io_min ; unsigned int io_opt ; unsigned int max_discard_sectors ; unsigned int max_write_same_sectors ; unsigned int discard_granularity ; unsigned int discard_alignment ; unsigned short logical_block_size ; unsigned short max_segments ; unsigned short max_integrity_segments ; unsigned char misaligned ; unsigned char discard_misaligned ; unsigned char cluster ; unsigned char discard_zeroes_data ; } ;
struct rq_map_data { struct page * * pages ; int page_order ; int nr_entries ; unsigned long offset ; int null_mapped ; int from_user ; } ;
struct req_iterator { int i ; struct bio * bio ; } ;
struct blk_plug { unsigned long magic ; struct list_head list ; struct list_head cb_list ; unsigned int should_sort ; } ;
typedef struct { struct page * v ; } Sector ;
typedef unsigned int tid_t ;
struct crypto_attr_alg { char name [ 64 ] ; } ;
struct jbd2_inode { transaction_t * i_transaction ; transaction_t * i_next_transaction ; struct list_head i_list ; struct inode * i_vfs_inode ; unsigned long i_flags ; } ;
struct jbd2_journal_handle { transaction_t * h_transaction ; int h_buffer_credits ; int h_ref ; int h_err ; unsigned int h_sync : 1 ; unsigned int h_jdata : 1 ; unsigned int h_aborted : 1 ; unsigned int h_cowing : 1 ; unsigned int h_base_credits : 14 ; unsigned int h_user_credits : 14 ; } ;
struct vfsmount ;
struct vfsmount { struct dentry * mnt_root ; struct super_block * mnt_sb ; int mnt_flags ; } ;
struct reclaim_state { unsigned long reclaimed_slab ; } ;
struct swap_list_t { int head ; int next ; } ;
struct match_token { int token ; const char * pattern ; } ;
struct vfsmount ;
struct vfsmount ;

typedef unsigned char BOOLEAN ;
typedef unsigned char UINT8 ;
typedef unsigned short UINT16 ;
typedef unsigned long long UINT64 ;
typedef long long INT64 ;
typedef unsigned int UINT32 ;
typedef int INT32 ;
typedef char * acpi_string ;
typedef void * acpi_handle ;
typedef char acpi_bus_id [ 8 ] ;
typedef unsigned long acpi_bus_address ;
typedef char acpi_device_name [ 40 ] ;
typedef char acpi_device_class [ 20 ] ;
struct acpi_hardware_id { struct list_head list ; char * id ; } ;
struct cdrom_read { int cdread_lba ; char * cdread_bufaddr ; int cdread_buflen ; } ;
struct cdrom_blk { unsigned from ; unsigned short len ; } ;
struct cdrom_generic_command { unsigned char cmd [ 12 ] ; unsigned char * buffer ; unsigned int buflen ; int stat ; struct request_sense * sense ; unsigned char data_direction ; int quiet ; int timeout ; void * reserved [ 1 ] ; } ;
struct packet_command { unsigned char cmd [ 12 ] ; unsigned char * buffer ; unsigned int buflen ; int stat ; struct request_sense * sense ; unsigned char data_direction ; int quiet ; int timeout ; void * reserved [ 1 ] ; } ;
enum ata_xfer_mask { ATA_MASK_PIO = ( ( 1LU << ATA_NR_PIO_MODES ) - 1 ) << ATA_SHIFT_PIO , ATA_MASK_MWDMA = ( ( 1LU << ATA_NR_MWDMA_MODES ) - 1 ) << ATA_SHIFT_MWDMA , ATA_MASK_UDMA = ( ( 1LU << ATA_NR_UDMA_MODES ) - 1 ) << ATA_SHIFT_UDMA , } ;
struct ata_ioports { void * cmd_addr ; void * data_addr ; void * error_addr ; void * feature_addr ; void * nsect_addr ; void * lbal_addr ; void * lbam_addr ; void * lbah_addr ; void * device_addr ; void * status_addr ; void * command_addr ; void * altstatus_addr ; void * ctl_addr ; void * bmdma_addr ; void * scr_addr ; } ;
struct ata_port_stats { unsigned long unhandled_irq ; unsigned long idle_irq ; unsigned long rw_reqbuf ; } ;
struct ata_port_info { unsigned long flags ; unsigned long link_flags ; unsigned long pio_mask ; unsigned long mwdma_mask ; unsigned long udma_mask ; struct ata_port_operations * port_ops ; void * private_data ; } ;
struct ata_timing { unsigned short mode ; unsigned short setup ; unsigned short act8b ; unsigned short rec8b ; unsigned short cyc8b ; unsigned short active ; unsigned short recover ; unsigned short dmack_hold ; unsigned short cycle ; unsigned short udma ; } ;
struct pci_bits { unsigned int reg ; unsigned int width ; unsigned long mask ; unsigned long val ; } ;
struct input_handle ;
struct input_handle { void * private_ ; int open ; const char * name ; struct input_dev * dev ; struct input_handler * handler ; struct list_head d_node ; struct list_head h_node ; } ;
struct pnp_id { char id [ 8 ] ; struct pnp_id * next ; } ;
struct bio_vec ;
union map_info { void * ptr ; unsigned long long ll ; } ;
struct dm_arg_set { unsigned argc ; char * * argv ; } ;
struct dm_arg { unsigned min ; unsigned max ; char * error ; } ;
typedef __gnuc_va_list va_list ;
typedef unsigned short umode_t ;
typedef struct { unsigned long fds_bits [ ( 1024 / ( 8 * sizeof ( unsigned long ) ) ) ] ; } __kernel_fd_set ;
typedef void ( * __kernel_sighandler_t ) ( int ) ;
typedef struct { int val [ 2 ] ; } __kernel_fsid_t ;
typedef __kernel_uid_t __kernel_uid32_t ;
typedef __kernel_gid_t __kernel_gid32_t ;
typedef __u16 __le16 ;
typedef __u16 __be16 ;
typedef __u32 __le32 ;
typedef __u32 __be32 ;
typedef __u64 __le64 ;
typedef __u64 __be64 ;
typedef __u16 __sum16 ;
typedef __u32 __wsum ;
typedef __u32 __kernel_dev_t ;
typedef __kernel_ino_t ino_t ;
typedef __kernel_mode_t mode_t ;
typedef __u32 nlink_t ;
typedef __kernel_off_t off_t ;
typedef __kernel_pid_t pid_t ;
typedef __kernel_daddr_t daddr_t ;
typedef __kernel_key_t key_t ;
typedef __kernel_suseconds_t suseconds_t ;
typedef __kernel_timer_t timer_t ;
typedef __kernel_clockid_t clockid_t ;
typedef __kernel_mqd_t mqd_t ;
//typedef K_Bool bool ;
typedef __kernel_uid16_t uid16_t ;
typedef __kernel_gid16_t gid16_t ;
typedef __kernel_old_uid_t old_uid_t ;
typedef __kernel_old_gid_t old_gid_t ;
typedef __kernel_loff_t loff_t ;
typedef __kernel_size_t size_t ;
typedef __kernel_ssize_t ssize_t ;
typedef __kernel_ptrdiff_t ptrdiff_t ;
typedef __kernel_time_t time_t ;
typedef __kernel_clock_t clock_t ;
typedef __kernel_caddr_t caddr_t ;
typedef __u8 u_int8_t ;
typedef __s8 int8_t ;
typedef __u16 u_int16_t ;
typedef __s16 int16_t ;
typedef __u32 u_int32_t ;
typedef __s32 int32_t ;
typedef __u8 uint8_t ;
typedef __u16 uint16_t ;
typedef __u32 uint32_t ;
//typedef __u64 uint64_t ;
typedef __u64 u_int64_t ;
//typedef __s64 int64_t ;
typedef u64 dma_addr_t ;
typedef u64 phys_addr_t ;
typedef struct { int counter ; } atomic_t ;
typedef struct { long counter ; } atomic64_t ;
struct ustat { __kernel_daddr_t f_tfree ; __kernel_ino_t f_tinode ; char f_fname [ 6 ] ; char f_fpack [ 6 ] ; } ;
struct callback_head { struct callback_head * next ; void ( * func ) ( struct callback_head * head ) ; } ;
struct alt_instr { s32 instr_offset ; s32 repl_offset ; u16 cpuid ; u8 instrlen ; u8 replacementlen ; } ;
struct paravirt_patch_site ;
typedef int ( * initcall_t ) ( void ) ;
typedef void ( * exitcall_t ) ( void ) ;
typedef void ( * ctor_fn_t ) ( void ) ;
struct obs_kernel_param { const char * str ; int ( * setup_func ) ( char * ) ; int early ; } ;
typedef unsigned long __kernel_ulong_t;
typedef long __kernel_long_t;
struct sysinfo { __kernel_long_t uptime ; __kernel_ulong_t loads [ 3 ] ; __kernel_ulong_t totalram ; __kernel_ulong_t freeram ; __kernel_ulong_t sharedram ; __kernel_ulong_t bufferram ; __kernel_ulong_t totalswap ; __kernel_ulong_t freeswap ; __u16 procs ; __u16 pad ; __kernel_ulong_t totalhigh ; __kernel_ulong_t freehigh ; __u32 mem_unit ; char _f [ 20 - 2 * sizeof ( __kernel_ulong_t ) - sizeof ( __u32 ) ] ; } ;
struct timespec ;
struct gate_struct64 { u16 offset_low ; u16 segment ; unsigned ist : 3 , zero0 : 5 , type : 5 , dpl : 2 , p : 1 ; u16 offset_middle ; u32 offset_high ; u32 zero1 ; } __attribute__ ( ( packed ) ) ;
struct ldttss_desc64 { u16 limit0 ; u16 base0 ; unsigned base1 : 8 , type : 5 , dpl : 2 , p : 1 ; unsigned limit1 : 4 , zero0 : 3 , g : 1 , base2 : 8 ; u32 base3 ; u32 zero1 ; } __attribute__ ( ( packed ) ) ;
struct pv_info { unsigned int kernel_rpl ; int shared_kernel_pmd ; u16 extra_user_64bit_cs ; int paravirt_enabled ; const char * name ; } ;
struct pv_lazy_ops { void ( * enter ) ( void ) ; void ( * leave ) ( void ) ; } ;
struct pv_time_ops { unsigned long long ( * sched_clock ) ( void ) ; unsigned long long ( * steal_clock ) ( int cpu ) ; unsigned long ( * get_tsc_khz ) ( void ) ; } ;
struct pv_irq_ops { struct paravirt_callee_save save_fl ; struct paravirt_callee_save restore_fl ; struct paravirt_callee_save irq_disable ; struct paravirt_callee_save irq_enable ; void ( * safe_halt ) ( void ) ; void ( * halt ) ( void ) ; void ( * adjust_exception_frame ) ( void ) ; } ;
struct pv_apic_ops { void ( * startup_ipi_hook ) ( int phys_apicid , unsigned long start_eip , unsigned long start_esp ) ; } ;
struct pv_lock_ops { int ( * spin_is_locked ) ( struct arch_spinlock * lock ) ; int ( * spin_is_contended ) ( struct arch_spinlock * lock ) ; void ( * spin_lock ) ( struct arch_spinlock * lock ) ; void ( * spin_lock_flags ) ( struct arch_spinlock * lock , unsigned long flags ) ; int ( * spin_trylock ) ( struct arch_spinlock * lock ) ; void ( * spin_unlock ) ( struct arch_spinlock * lock ) ; } ;
struct paravirt_patch_site { u8 * instr ; u8 instrtype ; u8 len ; u16 clobbers ; } ;
struct cpuinfo_x86 ;
struct vm86_struct { struct vm86_regs regs ; unsigned long flags ; unsigned long screen_bitmap ; unsigned long cpu_type ; struct revectored_struct int_revectored ; struct revectored_struct int21_revectored ; } ;
struct vm86plus_struct { struct vm86_regs regs ; unsigned long flags ; unsigned long screen_bitmap ; unsigned long cpu_type ; struct revectored_struct int_revectored ; struct revectored_struct int21_revectored ; struct vm86plus_info_struct vm86plus ; } ;
struct kernel_vm86_regs { struct pt_regs pt ; unsigned short es , __esh ; unsigned short ds , __dsh ; unsigned short fs , __fsh ; unsigned short gs , __gsh ; } ;
struct _fpx_sw_bytes { __u32 magic1 ; __u32 extended_size ; __u64 xstate_bv ; __u32 xstate_size ; __u32 padding [ 7 ] ; } ;
struct _xsave_hdr { __u64 xstate_bv ; __u64 reserved1 [ 2 ] ; __u64 reserved2 [ 5 ] ; } ;
struct _ymmh_state { __u32 ymmh_space [ 64 ] ; } ;
typedef struct cpumask { unsigned long bits [ ( ( ( 256 ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; } cpumask_t ;
typedef struct cpumask cpumask_var_t [ 1 ] ;
struct msr_regs_info { u32 * regs ; int err ; } ;
typedef void ( * handler_t ) ( int , struct pt_regs * ) ;
struct cpuinfo_x86 { __u8 x86 ; __u8 x86_vendor ; __u8 x86_model ; __u8 x86_mask ; int x86_tlbsize ; __u8 x86_virt_bits ; __u8 x86_phys_bits ; __u8 x86_coreid_bits ; __u32 extended_cpuid_level ; int cpuid_level ; __u32 x86_capability [ 10 ] ; char x86_vendor_id [ 16 ] ; char x86_model_id [ 64 ] ; int x86_cache_size ; int x86_cache_alignment ; int x86_power ; unsigned long loops_per_jiffy ; u16 x86_max_cores ; u16 apicid ; u16 initial_apicid ; u16 x86_clflush_size ; u16 booted_cores ; u16 phys_proc_id ; u16 cpu_core_id ; u8 compute_unit_id ; u16 cpu_index ; u32 microcode ; } __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ;
struct x86_hw_tss { u32 reserved1 ; u64 sp0 ; u64 sp1 ; u64 sp2 ; u64 reserved2 ; u64 ist [ 7 ] ; u32 reserved3 ; u32 reserved4 ; u16 reserved5 ; u16 io_bitmap_base ; } __attribute__ ( ( packed ) ) __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ;
struct i387_fsave_struct { u32 cwd ; u32 swd ; u32 twd ; u32 fip ; u32 fcs ; u32 foo ; u32 fos ; u32 st_space [ 20 ] ; u32 status ; } ;
struct i387_soft_struct { u32 cwd ; u32 swd ; u32 twd ; u32 fip ; u32 fcs ; u32 foo ; u32 fos ; u32 st_space [ 20 ] ; u8 ftop ; u8 changed ; u8 lookahead ; u8 no_update ; u8 rm ; u8 alimit ; struct math_emu_info * info ; u32 entry_eip ; } ;
struct ymmh_struct { u32 ymmh_space [ 64 ] ; } ;
struct xsave_hdr_struct { u64 xstate_bv ; u64 reserved1 [ 2 ] ; u64 reserved2 [ 5 ] ; } __attribute__ ( ( packed ) ) ;
union irq_stack_union { char irq_stack [ ( ( ( 1UL ) << 12 ) << 2 ) ] ; struct { char gs_base [ 40 ] ; unsigned long stack_canary ; } ; } ;
typedef struct { unsigned long seg ; } mm_segment_t ;
struct aperfmperf { u64 aperf , mperf ; } ;
typedef struct { unsigned long int error_code ; unsigned char * xip ; unsigned long int cs ; unsigned long int xflags ; unsigned long int xsp ; unsigned long int ss ; } interrupt_stack_frame ;
struct preempt_ops { void ( * sched_in ) ( struct preempt_notifier * notifier , int cpu ) ; void ( * sched_out ) ( struct preempt_notifier * notifier , struct task_struct * next ) ; } ;
typedef u16 __ticket_t ;
typedef u32 __ticketpair_t ;
typedef struct seqcount { unsigned sequence ; } seqcount_t ;
struct timespec { __kernel_time_t tv_sec ; long tv_nsec ; } ;
struct timeval { __kernel_time_t tv_sec ; __kernel_suseconds_t tv_usec ; } ;
typedef int ( * wait_queue_func_t ) ( wait_queue_t * wait , unsigned mode , int flags , void * key ) ;
typedef struct { unsigned long bits [ ( ( ( ( 1 << 6 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; } nodemask_t ;
struct lruvec { struct list_head lists [ NR_LRU_LISTS ] ; struct zone_reclaim_stat reclaim_stat ; } ;
struct per_cpu_pageset { struct per_cpu_pages pcp ; s8 expire ; s8 stat_threshold ; s8 vm_stat_diff [ NR_VM_ZONE_STAT_ITEMS ] ; } ;
struct zonelist { struct zonelist_cache * zlcache_ptr ; struct zoneref _zonerefs [ ( ( 1 << 6 ) * 4 ) + 1 ] ; struct zonelist_cache zlcache ; } ;
struct debug_obj_descr ;
struct debug_obj_descr { const char * name ; void * ( * debug_hint ) ( void * addr ) ; int ( * fixup_init ) ( void * addr , enum debug_obj_state state ) ; int ( * fixup_activate ) ( void * addr , enum debug_obj_state state ) ; int ( * fixup_destroy ) ( void * addr , enum debug_obj_state state ) ; int ( * fixup_free ) ( void * addr , enum debug_obj_state state ) ; int ( * fixup_assert_init ) ( void * addr , enum debug_obj_state state ) ; } ;
struct notifier_block ;
union ktime { s64 tv64 ; } ;
struct timer_list { struct list_head entry ; unsigned long expires ; struct tvec_base * base ; void ( * function ) ( unsigned long ) ; unsigned long data ; int slack ; int start_pid ; void * start_site ; char start_comm [ 16 ] ; } ;
typedef void ( * work_func_t ) ( struct work_struct * work ) ;
struct notifier_block { int ( * notifier_call ) ( struct notifier_block * , unsigned long , void * ) ; struct notifier_block * next ; int priority ; } ;
typedef void ( * online_page_callback_t ) ( struct page * page ) ;
struct screen_info { __u8 orig_x ; __u8 orig_y ; __u16 ext_mem_k ; __u16 orig_video_page ; __u8 orig_video_mode ; __u8 orig_video_cols ; __u8 flags ; __u8 unused2 ; __u16 orig_video_ega_bx ; __u16 unused3 ; __u8 orig_video_lines ; __u8 orig_video_isVGA ; __u16 orig_video_points ; __u16 lfb_width ; __u16 lfb_height ; __u16 lfb_depth ; __u32 lfb_base ; __u32 lfb_size ; __u16 cl_magic , cl_offset ; __u16 lfb_linelength ; __u8 red_size ; __u8 red_pos ; __u8 green_size ; __u8 green_pos ; __u8 blue_size ; __u8 blue_pos ; __u8 rsvd_size ; __u8 rsvd_pos ; __u16 vesapm_seg ; __u16 vesapm_off ; __u16 pages ; __u16 vesa_attributes ; __u32 capabilities ; __u8 _reserved [ 6 ] ; } __attribute__ ( ( packed ) ) ;
struct apm_bios_info { __u16 version ; __u16 cseg ; __u32 offset ; __u16 cseg_16 ; __u16 dseg ; __u16 flags ; __u16 cseg_len ; __u16 cseg_16_len ; __u16 dseg_len ; } ;
struct e820entry { __u64 addr ; __u64 size ; __u32 type ; } __attribute__ ( ( packed ) ) ;
struct setup_data ;
struct ist_info { __u32 signature ; __u32 command ; __u32 event ; __u32 perf_level ; } ;
struct setup_data { __u64 next ; __u32 type ; __u32 len ; __u8 data [ 0 ] ; } ;
struct setup_header { __u8 setup_sects ; __u16 root_flags ; __u32 syssize ; __u16 ram_size ; __u16 vid_mode ; __u16 root_dev ; __u16 boot_flag ; __u16 jump ; __u32 header ; __u16 version ; __u32 realmode_swtch ; __u16 start_sys ; __u16 kernel_version ; __u8 type_of_loader ; __u8 loadflags ; __u16 setup_move_size ; __u32 code32_start ; __u32 ramdisk_image ; __u32 ramdisk_size ; __u32 bootsect_kludge ; __u16 heap_end_ptr ; __u8 ext_loader_ver ; __u8 ext_loader_type ; __u32 cmd_line_ptr ; __u32 initrd_addr_max ; __u32 kernel_alignment ; __u8 relocatable_kernel ; __u8 _pad2 [ 3 ] ; __u32 cmdline_size ; __u32 hardware_subarch ; __u64 hardware_subarch_data ; __u32 payload_offset ; __u32 payload_length ; __u64 setup_data ; } __attribute__ ( ( packed ) ) ;
struct sys_desc_table { __u16 length ; __u8 table [ 14 ] ; } ;
struct olpc_ofw_header { __u32 ofw_magic ; __u32 ofw_version ; __u32 cif_handler ; __u32 irq_desc_table ; } __attribute__ ( ( packed ) ) ;
struct efi_info { __u32 efi_loader_signature ; __u32 efi_systab ; __u32 efi_memdesc_size ; __u32 efi_memdesc_version ; __u32 efi_memmap ; __u32 efi_memmap_size ; __u32 efi_systab_hi ; __u32 efi_memmap_hi ; } ;
struct cpuinfo_x86 ;
struct x86_init_mpparse { void ( * mpc_record ) ( unsigned int mode ) ; void ( * setup_ioapic_ids ) ( void ) ; int ( * mpc_apic_id ) ( struct mpc_cpu * m ) ; void ( * smp_read_mpc_oem ) ( struct mpc_table * mpc ) ; void ( * mpc_oem_pci_bus ) ( struct mpc_bus * m ) ; void ( * mpc_oem_bus_info ) ( struct mpc_bus * m , char * name ) ; void ( * find_smp_config ) ( void ) ; void ( * get_smp_config ) ( unsigned int early ) ; } ;
struct x86_init_resources { void ( * probe_roms ) ( void ) ; void ( * reserve_resources ) ( void ) ; char * ( * memory_setup ) ( void ) ; } ;
struct x86_init_irqs { void ( * pre_vector_init ) ( void ) ; void ( * intr_init ) ( void ) ; void ( * trap_init ) ( void ) ; } ;
struct x86_init_oem { void ( * arch_setup ) ( void ) ; void ( * banner ) ( void ) ; } ;
struct x86_init_paging { void ( * pagetable_init ) ( void ) ; } ;
struct x86_init_timers { void ( * setup_percpu_clockev ) ( void ) ; void ( * tsc_pre_init ) ( void ) ; void ( * timer_init ) ( void ) ; void ( * wallclock_init ) ( void ) ; } ;
struct x86_init_iommu { int ( * iommu_init ) ( void ) ; } ;
struct x86_init_pci { int ( * arch_init ) ( void ) ; int ( * init ) ( void ) ; void ( * init_irq ) ( void ) ; void ( * fixup_irqs ) ( void ) ; } ;
struct x86_cpuinit_ops { void ( * setup_percpu_clockev ) ( void ) ; void ( * early_percpu_clock_init ) ( void ) ; void ( * fixup_cpu_id ) ( struct cpuinfo_x86 * c , int node ) ; } ;
struct x86_msi_ops { int ( * setup_msi_irqs ) ( struct pci_dev * dev , int nvec , int type ) ; void ( * teardown_msi_irq ) ( unsigned int irq ) ; void ( * teardown_msi_irqs ) ( struct pci_dev * dev ) ; void ( * restore_msi_irqs ) ( struct pci_dev * dev , int irq ) ; } ;
struct x86_io_apic_ops { void ( * init ) ( void ) ; unsigned int ( * read ) ( unsigned int apic , unsigned int reg ) ; void ( * write ) ( unsigned int apic , unsigned int reg , unsigned int value ) ; void ( * modify ) ( unsigned int apic , unsigned int reg , unsigned int value ) ; } ;
typedef struct pm_message { int event ; } pm_message_t ;
struct dev_pm_ops { int ( * prepare ) ( struct device * dev ) ; void ( * complete ) ( struct device * dev ) ; int ( * suspend ) ( struct device * dev ) ; int ( * resume ) ( struct device * dev ) ; int ( * freeze ) ( struct device * dev ) ; int ( * thaw ) ( struct device * dev ) ; int ( * poweroff ) ( struct device * dev ) ; int ( * restore ) ( struct device * dev ) ; int ( * suspend_late ) ( struct device * dev ) ; int ( * resume_early ) ( struct device * dev ) ; int ( * freeze_late ) ( struct device * dev ) ; int ( * thaw_early ) ( struct device * dev ) ; int ( * poweroff_late ) ( struct device * dev ) ; int ( * restore_early ) ( struct device * dev ) ; int ( * suspend_noirq ) ( struct device * dev ) ; int ( * resume_noirq ) ( struct device * dev ) ; int ( * freeze_noirq ) ( struct device * dev ) ; int ( * thaw_noirq ) ( struct device * dev ) ; int ( * poweroff_noirq ) ( struct device * dev ) ; int ( * restore_noirq ) ( struct device * dev ) ; int ( * runtime_suspend ) ( struct device * dev ) ; int ( * runtime_resume ) ( struct device * dev ) ; int ( * runtime_idle ) ( struct device * dev ) ; } ;
typedef xen_pfn_t * __guest_handle_xen_pfn_t ;
typedef xen_ulong_t * __guest_handle_xen_ulong_t ;
struct pvclock_vcpu_time_info { u32 version ; u32 pad0 ; u64 tsc_timestamp ; u64 system_time ; u32 tsc_to_system_mul ; s8 tsc_shift ; u8 flags ; u8 pad [ 2 ] ; } __attribute__ ( ( __packed__ ) ) ;
struct pvclock_wall_clock { u32 version ; u32 sec ; u32 nsec ; } __attribute__ ( ( __packed__ ) ) ;
typedef u64 * __guest_handle_u64 ;
struct real_mode_header { u32 text_start ; u32 ro_end ; u32 trampoline_start ; u32 trampoline_status ; u32 trampoline_header ; u32 trampoline_pgd ; u32 wakeup_start ; u32 wakeup_header ; u32 machine_real_restart_asm ; u32 machine_real_restart_seg ; } ;
struct trampoline_header { u64 start ; u64 efer ; u32 cr4 ; } ;
typedef u64 cycle_t ;
struct IO_APIC_route_entry { __u32 vector : 8 , delivery_mode : 3 , dest_mode : 1 , delivery_status : 1 , polarity : 1 , irr : 1 , trigger : 1 , mask : 1 , __reserved_2 : 15 ; __u32 __reserved_3 : 24 , dest : 8 ; } __attribute__ ( ( packed ) ) ;
struct IR_IO_APIC_route_entry { __u64 vector : 8 , zero : 3 , index2 : 1 , delivery_status : 1 , polarity : 1 , irr : 1 , trigger : 1 , mask : 1 , reserved : 31 , format : 1 , index : 15 ; } __attribute__ ( ( packed ) ) ;
struct mp_ioapic_gsi { u32 gsi_base ; u32 gsi_end ; } ;
struct smp_ops { void ( * smp_prepare_boot_cpu ) ( void ) ; void ( * smp_prepare_cpus ) ( unsigned max_cpus ) ; void ( * smp_cpus_done ) ( unsigned max_cpus ) ; void ( * stop_other_cpus ) ( int wait ) ; void ( * smp_send_reschedule ) ( int cpu ) ; int ( * cpu_up ) ( unsigned cpu , struct task_struct * tidle ) ; int ( * cpu_disable ) ( void ) ; void ( * cpu_die ) ( unsigned int cpu ) ; void ( * play_dead ) ( void ) ; void ( * send_call_func_ipi ) ( const struct cpumask * mask ) ; void ( * send_call_func_single_ipi ) ( int cpu ) ; } ;
typedef void ( * smp_call_func_t ) ( void * info ) ;
typedef void ( * pcpu_fc_populate_pte_fn_t ) ( unsigned long addr ) ;
typedef int ( pcpu_fc_cpu_distance_fn_t ) ( unsigned int from , unsigned int to ) ;
struct ctl_node { struct rb_node node ; struct ctl_table_header * header ; } ;
struct user_i387_struct { unsigned short cwd ; unsigned short swd ; unsigned short twd ; unsigned short fop ; __u64 rip ; __u64 rdp ; __u32 mxcsr ; __u32 mxcsr_mask ; __u32 st_space [ 32 ] ; __u32 xmm_space [ 64 ] ; __u32 padding [ 24 ] ; } ;
struct user_ymmh_regs { __u32 ymmh_space [ 64 ] ; } ;
struct user_xsave_hdr { __u64 xstate_bv ; __u64 reserved1 [ 2 ] ; __u64 reserved2 [ 5 ] ; } ;
typedef elf_greg_t elf_gregset_t [ ( sizeof ( struct user_regs_struct ) / sizeof ( elf_greg_t ) ) ] ;
typedef __u32 Elf32_Addr ;
typedef __u16 Elf32_Half ;
typedef __u32 Elf32_Off ;
typedef __s32 Elf32_Sword ;
typedef __u32 Elf32_Word ;
typedef __u64 Elf64_Addr ;
typedef __u16 Elf64_Half ;
typedef __s16 Elf64_SHalf ;
typedef __u64 Elf64_Off ;
typedef __s32 Elf64_Sword ;
typedef __u32 Elf64_Word ;
typedef __u64 Elf64_Xword ;
typedef __s64 Elf64_Sxword ;
struct kobj_ns_type_operations { enum kobj_ns_type type ; void * ( * grab_current_ns ) ( void ) ; const void * ( * netlink_ns ) ( struct sock * sk ) ; const void * ( * initial_ns ) ( void ) ; void ( * drop_ns ) ( void * ) ; } ;
struct kobj_type { void ( * release ) ( struct kobject * kobj ) ; const struct sysfs_ops * sysfs_ops ; struct attribute * * default_attrs ; const struct kobj_ns_type_operations * ( * child_ns_type ) ( struct kobject * kobj ) ; const void * ( * namespace_ ) ( struct kobject * kobj ) ; } ;
struct kset_uevent_ops { int ( * const filter ) ( struct kset * kset , struct kobject * kobj ) ; const char * ( * const name ) ( struct kset * kset , struct kobject * kobj ) ; int ( * const uevent ) ( struct kset * kset , struct kobject * kobj , struct kobj_uevent_env * env ) ; } ;
struct kernel_param ;
struct kernel_param_ops { int ( * set ) ( const char * val , const struct kernel_param * kp ) ; int ( * get ) ( char * buffer , const struct kernel_param * kp ) ; void ( * free ) ( void * arg ) ; } ;
struct kernel_param { const char * name ; const struct kernel_param_ops * ops ; u16 perm ; s16 level ; union { void * arg ; const struct kparam_string * str ; const struct kparam_array * arr ; } ; } ;
struct notifier_block ;
struct radix_tree_root { unsigned int height ; gfp_t gfp_mask ; struct radix_tree_node * rnode ; } ;
struct fiemap_extent { __u64 fe_logical ; __u64 fe_physical ; __u64 fe_length ; __u64 fe_reserved64 [ 2 ] ; __u32 fe_flags ; __u32 fe_reserved [ 3 ] ; } ;
struct shrink_control { gfp_t gfp_mask ; unsigned long nr_to_scan ; } ;
typedef void ( bio_end_io_t ) ( struct bio * , int ) ;
typedef void ( bio_destructor_t ) ( struct bio * ) ;
struct fstrim_range { __u64 start ; __u64 len ; __u64 minlen ; } ;
struct iovec ;
struct qtree_fmt_operations { void ( * mem2disk_dqblk ) ( void * disk , struct dquot * dquot ) ; void ( * disk2mem_dqblk ) ( struct dquot * dquot , void * disk ) ; int ( * is_id ) ( void * disk , struct dquot * dquot ) ; } ;
struct if_dqblk { __u64 dqb_bhardlimit ; __u64 dqb_bsoftlimit ; __u64 dqb_curspace ; __u64 dqb_ihardlimit ; __u64 dqb_isoftlimit ; __u64 dqb_curinodes ; __u64 dqb_btime ; __u64 dqb_itime ; __u32 dqb_valid ; } ;
struct if_dqinfo { __u64 dqi_bgrace ; __u64 dqi_igrace ; __u32 dqi_flags ; __u32 dqi_valid ; } ;
struct mem_dqinfo { struct quota_format_type * dqi_format ; int dqi_fmt_id ; struct list_head dqi_dirty_list ; unsigned long dqi_flags ; unsigned int dqi_bgrace ; unsigned int dqi_igrace ; qsize_t dqi_maxblimit ; qsize_t dqi_maxilimit ; void * dqi_priv ; } ;
struct quota_format_ops { int ( * check_quota_file ) ( struct super_block * sb , int type ) ; int ( * read_file_info ) ( struct super_block * sb , int type ) ; int ( * write_file_info ) ( struct super_block * sb , int type ) ; int ( * free_file_info ) ( struct super_block * sb , int type ) ; int ( * read_dqblk ) ( struct dquot * dquot ) ; int ( * commit_dqblk ) ( struct dquot * dquot ) ; int ( * release_dqblk ) ( struct dquot * dquot ) ; } ;
struct file_handle { __u32 handle_bytes ; int handle_type ; unsigned char f_handle [ 0 ] ; } ;
struct file_lock_operations { void ( * fl_copy_lock ) ( struct file_lock * , struct file_lock * ) ; void ( * fl_release_private ) ( struct file_lock * ) ; } ;
struct lock_manager_operations { int ( * lm_compare_owner ) ( struct file_lock * , struct file_lock * ) ; void ( * lm_notify ) ( struct file_lock * ) ; int ( * lm_grant ) ( struct file_lock * , struct file_lock * , int ) ; void ( * lm_break ) ( struct file_lock * ) ; int ( * lm_change ) ( struct file_lock * * , int ) ; } ;
struct nfs_lock_info { u32 state ; struct nlm_lockowner * owner ; struct list_head list ; } ;
struct f_owner_ex { int type ; __kernel_pid_t pid ; } ;
struct flock { short l_type ; short l_whence ; __kernel_off_t l_start ; __kernel_off_t l_len ; __kernel_pid_t l_pid ; } ;
struct file_system_type { const char * name ; int fs_flags ; struct dentry * ( * mount ) ( struct file_system_type * , int , const char * , void * ) ; void ( * kill_sb ) ( struct super_block * ) ; struct module * owner ; struct file_system_type * next ; struct hlist_head fs_supers ; struct lock_class_key s_lock_key ; struct lock_class_key s_umount_key ; struct lock_class_key s_vfs_rename_key ; struct lock_class_key s_writers_key [ ( SB_FREEZE_COMPLETE - 1 ) ] ; struct lock_class_key i_lock_key ; struct lock_class_key i_mutex_key ; struct lock_class_key i_mutex_dir_key ; } ;
typedef int ( write_proc_t ) ( struct file * file , const char * buffer , unsigned long count , void * data ) ;
struct proc_ns_operations { const char * name ; int type ; void * ( * get ) ( struct task_struct * task ) ; void ( * put ) ( void * ns ) ; int ( * install ) ( struct nsproxy * nsproxy , void * ns ) ; unsigned int ( * inum ) ( void * ns ) ; } ;
union proc_op { int ( * proc_get_link ) ( struct dentry * , struct path * ) ; int ( * proc_read ) ( struct task_struct * task , char * page ) ; int ( * proc_show ) ( struct seq_file * m , struct pid_namespace * ns , struct pid * pid , struct task_struct * task ) ; } ;
typedef struct { unsigned long sig [ ( 64 / 64 ) ] ; } sigset_t ;
typedef void __signalfn_t ( int ) ;
typedef void __restorefn_t ( void ) ;
typedef union sigval { int sival_int ; void * sival_ptr ; } sigval_t ;
struct timespec ;
struct notifier_block ;
struct subsys_interface { const char * name ; struct bus_type * subsys ; struct list_head node ; int ( * add_dev ) ( struct device * dev , struct subsys_interface * sif ) ; int ( * remove_dev ) ( struct device * dev , struct subsys_interface * sif ) ; } ;
struct class_interface { struct list_head node ; struct class_ * class_ ; int ( * add_dev ) ( struct device * , struct class_interface * ) ; void ( * remove_dev ) ( struct device * , struct class_interface * ) ; } ;
typedef void ( * dr_release_t ) ( struct device * dev , void * res ) ;
typedef int ( * dr_match_t ) ( struct device * dev , void * res , void * match_data ) ;
struct pci_device_id { __u32 vendor , device ; __u32 subvendor , subdevice ; __u32 class_ , class_mask ; kernel_ulong_t driver_data ; } ;
struct ieee1394_device_id { __u32 match_flags ; __u32 vendor_id ; __u32 model_id ; __u32 specifier_id ; __u32 version ; kernel_ulong_t driver_data __attribute__ ( ( aligned ( sizeof ( kernel_ulong_t ) ) ) ) ; } ;
struct usb_device_id { __u16 match_flags ; __u16 idVendor ; __u16 idProduct ; __u16 bcdDevice_lo ; __u16 bcdDevice_hi ; __u8 bDeviceClass ; __u8 bDeviceSubClass ; __u8 bDeviceProtocol ; __u8 bInterfaceClass ; __u8 bInterfaceSubClass ; __u8 bInterfaceProtocol ; __u8 bInterfaceNumber ; kernel_ulong_t driver_info __attribute__ ( ( aligned ( sizeof ( kernel_ulong_t ) ) ) ) ; } ;
struct hid_device_id { __u16 bus ; __u16 group ; __u32 vendor ; __u32 product ; kernel_ulong_t driver_data __attribute__ ( ( aligned ( sizeof ( kernel_ulong_t ) ) ) ) ; } ;
struct ccw_device_id { __u16 match_flags ; __u16 cu_type ; __u16 dev_type ; __u8 cu_model ; __u8 dev_model ; kernel_ulong_t driver_info ; } ;
struct ap_device_id { __u16 match_flags ; __u8 dev_type ; __u8 pad1 ; __u32 pad2 ; kernel_ulong_t driver_info ; } ;
struct css_device_id { __u8 match_flags ; __u8 type ; __u16 pad2 ; __u32 pad3 ; kernel_ulong_t driver_data ; } ;
struct acpi_device_id { __u8 id [ 16 ] ; kernel_ulong_t driver_data ; } ;
struct pnp_device_id { __u8 id [ 8 ] ; kernel_ulong_t driver_data ; } ;
struct serio_device_id { __u8 type ; __u8 extra ; __u8 id ; __u8 proto ; } ;
struct pcmcia_device_id { __u16 match_flags ; __u16 manf_id ; __u16 card_id ; __u8 func_id ; __u8 function ; __u8 device_no ; __u32 prod_id_hash [ 4 ] __attribute__ ( ( aligned ( sizeof ( __u32 ) ) ) ) ; const char * prod_id [ 4 ] ; kernel_ulong_t driver_info ; char * cisfile ; } ;
struct input_device_id { kernel_ulong_t flags ; __u16 bustype ; __u16 vendor ; __u16 product ; __u16 version ; kernel_ulong_t evbit [ 0x1f / 64 + 1 ] ; kernel_ulong_t keybit [ 0x2ff / 64 + 1 ] ; kernel_ulong_t relbit [ 0x0f / 64 + 1 ] ; kernel_ulong_t absbit [ 0x3f / 64 + 1 ] ; kernel_ulong_t mscbit [ 0x07 / 64 + 1 ] ; kernel_ulong_t ledbit [ 0x0f / 64 + 1 ] ; kernel_ulong_t sndbit [ 0x07 / 64 + 1 ] ; kernel_ulong_t ffbit [ 0x7f / 64 + 1 ] ; kernel_ulong_t swbit [ 0x0f / 64 + 1 ] ; kernel_ulong_t driver_info ; } ;
struct eisa_device_id { char sig [ 8 ] ; kernel_ulong_t driver_data ; } ;
struct parisc_device_id { __u8 hw_type ; __u8 hversion_rev ; __u16 hversion ; __u32 sversion ; } ;
struct sdio_device_id { __u8 class_ ; __u16 vendor ; __u16 device ; kernel_ulong_t driver_data __attribute__ ( ( aligned ( sizeof ( kernel_ulong_t ) ) ) ) ; } ;
struct ssb_device_id { __u16 vendor ; __u16 coreid ; __u8 revision ; } ;
struct bcma_device_id { __u16 manuf ; __u16 id ; __u8 rev ; __u8 class_ ; } ;
struct virtio_device_id { __u32 device ; __u32 vendor ; } ;
struct hv_vmbus_device_id { __u8 guid [ 16 ] ; kernel_ulong_t driver_data __attribute__ ( ( aligned ( sizeof ( kernel_ulong_t ) ) ) ) ; } ;
struct i2c_device_id { char name [ 20 ] ; kernel_ulong_t driver_data __attribute__ ( ( aligned ( sizeof ( kernel_ulong_t ) ) ) ) ; } ;
struct spi_device_id { char name [ 32 ] ; kernel_ulong_t driver_data __attribute__ ( ( aligned ( sizeof ( kernel_ulong_t ) ) ) ) ; } ;
struct dmi_system_id { int ( * callback ) ( const struct dmi_system_id * ) ; const char * ident ; struct dmi_strmatch matches [ 4 ] ; void * driver_data ; } ;
struct platform_device_id { char name [ 20 ] ; kernel_ulong_t driver_data __attribute__ ( ( aligned ( sizeof ( kernel_ulong_t ) ) ) ) ; } ;
struct mdio_device_id { __u32 phy_id ; __u32 phy_id_mask ; } ;
struct zorro_device_id { __u32 id ; kernel_ulong_t driver_data ; } ;
struct isapnp_device_id { unsigned short card_vendor , card_device ; unsigned short vendor , function ; kernel_ulong_t driver_data ; } ;
struct x86_cpu_id { __u16 vendor ; __u16 family ; __u16 model ; __u16 feature ; kernel_ulong_t driver_data ; } ;
struct ipack_device_id { __u8 format ; __u32 vendor ; __u32 device ; } ;
enum pci_channel_state { pci_channel_io_normal = ( pci_channel_state_t ) 1 , pci_channel_io_frozen = ( pci_channel_state_t ) 2 , pci_channel_io_perm_failure = ( pci_channel_state_t ) 3 , } ;
enum pcie_reset_state { pcie_deassert_reset = ( pcie_reset_state_t ) 1 , pcie_warm_reset = ( pcie_reset_state_t ) 2 , pcie_hot_reset = ( pcie_reset_state_t ) 3 } ;
enum pci_dev_flags { PCI_DEV_FLAGS_MSI_INTX_DISABLE_BUG = ( pci_dev_flags_t ) 1 , PCI_DEV_FLAGS_NO_D3 = ( pci_dev_flags_t ) 2 , PCI_DEV_FLAGS_ASSIGNED = ( pci_dev_flags_t ) 4 , } ;
enum pci_bus_flags { PCI_BUS_FLAGS_NO_MSI = ( pci_bus_flags_t ) 1 , PCI_BUS_FLAGS_NO_MMRBC = ( pci_bus_flags_t ) 2 , } ;
struct pci_cap_saved_data { char cap_nr ; unsigned int size ; u32 data [ 0 ] ; } ;
enum pci_ers_result { PCI_ERS_RESULT_NONE = ( pci_ers_result_t ) 1 , PCI_ERS_RESULT_CAN_RECOVER = ( pci_ers_result_t ) 2 , PCI_ERS_RESULT_NEED_RESET = ( pci_ers_result_t ) 3 , PCI_ERS_RESULT_DISCONNECT = ( pci_ers_result_t ) 4 , PCI_ERS_RESULT_RECOVERED = ( pci_ers_result_t ) 5 , PCI_ERS_RESULT_NO_AER_DRIVER = ( pci_ers_result_t ) 6 , } ;
struct msix_entry { u32 vector ; u16 entry ; } ;
typedef u8 uprobe_opcode_t ;
struct arch_uprobe { u16 fixups ; u8 insn [ 16 ] ; unsigned long rip_rela_target_address ; } ;
struct page_frag { struct page * page ; __u32 offset ; __u32 size ; } ;
struct range { u64 start ; u64 end ; } ;
typedef void compound_page_dtor ( struct page * ) ;
typedef void ( sg_free_fn ) ( struct scatterlist * , unsigned int ) ;
struct pci_fixup { u16 vendor ; u16 device ; u32 class_ ; unsigned int class_shift ; void ( * hook ) ( struct pci_dev * dev ) ; } ;
typedef u64 cputime64_t ;
struct ipc_perm { __kernel_key_t key ; __kernel_uid_t uid ; __kernel_gid_t gid ; __kernel_uid_t cuid ; __kernel_gid_t cgid ; __kernel_mode_t mode ; unsigned short seq ; } ;
struct seccomp_data { int nr ; __u32 arch ; __u64 instruction_pointer ; __u64 args [ 6 ] ; } ;
struct rlimit64 { __u64 rlim_cur ; __u64 rlim_max ; } ;
struct task_io_accounting { u64 rchar ; u64 wchar ; u64 syscr ; u64 syscw ; u64 read_bytes ; u64 write_bytes ; u64 cancelled_write_bytes ; } ;
struct io_event { __u64 data ; __u64 obj ; __s64 res ; __s64 res2 ; } ;
struct iocb { __u64 aio_data ; __u32 aio_key , aio_reserved1 ; __u16 aio_lio_opcode ; __s16 aio_reqprio ; __u32 aio_fildes ; __u64 aio_buf ; __u64 aio_nbytes ; __s64 aio_offset ; __u64 aio_reserved2 ; __u32 aio_flags ; __u32 aio_resfd ; } ;
struct iovec { void * iov_base ; __kernel_size_t iov_len ; } ;
struct pacct_struct { int ac_flag ; long ac_exitcode ; unsigned long ac_mem ; cputime_t ac_utime , ac_stime ; unsigned long ac_minflt , ac_majflt ; } ;
struct cpu_itimer { cputime_t expires ; cputime_t incr ; u32 error ; u32 incr_error ; } ;
struct cputime { cputime_t utime ; cputime_t stime ; } ;
struct task_cputime { cputime_t utime ; cputime_t stime ; unsigned long long sum_exec_runtime ; } ;
struct sched_avg { u32 runnable_avg_sum , runnable_avg_period ; u64 last_runnable_update ; s64 decay_count ; unsigned long load_avg_contrib ; } ;
struct sched_statistics { u64 wait_start ; u64 wait_max ; u64 wait_count ; u64 wait_sum ; u64 iowait_count ; u64 iowait_sum ; u64 sleep_start ; u64 sleep_max ; s64 sum_sleep_runtime ; u64 block_start ; u64 block_max ; u64 exec_max ; u64 slice_max ; u64 nr_migrations_cold ; u64 nr_failed_migrations_affine ; u64 nr_failed_migrations_running ; u64 nr_failed_migrations_hot ; u64 nr_forced_migrations ; u64 nr_wakeups ; u64 nr_wakeups_sync ; u64 nr_wakeups_migrate ; u64 nr_wakeups_local ; u64 nr_wakeups_remote ; u64 nr_wakeups_affine ; u64 nr_wakeups_affine_attempts ; u64 nr_wakeups_passive ; u64 nr_wakeups_idle ; } ;
typedef void ( * irq_flow_handler_t ) ( unsigned int irq , struct irq_desc * desc ) ;
typedef void ( * irq_preflow_handler_t ) ( struct irq_data * data ) ;
struct notifier_block ;
struct irq_2_iommu { struct intel_iommu * iommu ; u16 irte_index ; u16 sub_handle ; u8 irte_mask ; } ;
typedef struct { unsigned int __softirq_pending ; unsigned int __nmi_count ; unsigned int apic_timer_irqs ; unsigned int irq_spurious_count ; unsigned int icr_read_retry_count ; unsigned int x86_platform_ipis ; unsigned int apic_perf_irqs ; unsigned int apic_irq_work_irqs ; unsigned int irq_resched_count ; unsigned int irq_call_count ; unsigned int irq_tlb_count ; unsigned int irq_thermal_count ; unsigned int irq_threshold_count ; } __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) irq_cpustat_t ;
typedef irqreturn_t ( * irq_handler_t ) ( int , void * ) ;
struct softirq_action { void ( * action ) ( struct softirq_action * ) ; } ;
struct pm_qos_flags_request { struct list_head node ; s32 flags ; } ;
struct pm_qos_constraints { struct plist_head list ; s32 target_value ; s32 default_value ; enum pm_qos_type type ; struct blocking_notifier_head * notifiers ; } ;
struct pm_qos_flags { struct list_head list ; s32 effective_flags ; } ;
typedef s32 dma_cookie_t ;
typedef struct { unsigned long bits [ ( ( ( DMA_TX_TYPE_END ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; } dma_cap_mask_t ;
typedef void ( * dma_async_tx_callback ) ( void * dma_async_param ) ;
struct dma_pinned_list { int nr_iovecs ; struct dma_page_list page_list [ 0 ] ; } ;
struct __kernel_sockaddr_storage { __kernel_sa_family_t ss_family ; char __data [ 128 - sizeof ( unsigned short ) ] ; } __attribute__ ( ( aligned ( ( __alignof__ ( struct sockaddr * ) ) ) ) ) ;
typedef __kernel_sa_family_t sa_family_t ;
struct msghdr { void * msg_name ; int msg_namelen ; struct iovec * msg_iov ; __kernel_size_t msg_iovlen ; void * msg_control ; __kernel_size_t msg_controllen ; unsigned int msg_flags ; } ;
struct cmsghdr { __kernel_size_t cmsg_len ; int cmsg_level ; int cmsg_type ; } ;
struct ucred { __u32 pid ; __u32 uid ; __u32 gid ; } ;
struct timespec ;
typedef struct { unsigned int clock_rate ; unsigned int clock_type ; unsigned short loopback ; } sync_serial_settings ;
typedef struct { unsigned int clock_rate ; unsigned int clock_type ; unsigned short loopback ; unsigned int slot_map ; } te1_settings ;
typedef struct { unsigned short encoding ; unsigned short parity ; } raw_hdlc_proto ;
typedef struct { unsigned int t391 ; unsigned int t392 ; unsigned int n391 ; unsigned int n392 ; unsigned int n393 ; unsigned short lmi ; unsigned short dce ; } fr_proto ;
typedef struct { unsigned int dlci ; } fr_proto_pvc ;
typedef struct { unsigned int dlci ; char master [ 16 ] ; } fr_proto_pvc_info ;
typedef struct { unsigned int interval ; unsigned int timeout ; } cisco_proto ;
struct ifconf { int ifc_len ; union { char * ifcu_buf ; struct ifreq * ifcu_req ; } ifc_ifcu ; } ;
struct user_i387_ia32_struct { u32 cwd ; u32 swd ; u32 twd ; u32 fip ; u32 fcs ; u32 foo ; u32 fos ; u32 st_space [ 20 ] ; } ;
struct user_regs_struct32 { __u32 ebx , ecx , edx , esi , edi , ebp , eax ; unsigned short ds , __ds , es , __es ; unsigned short fs , __fs , gs , __gs ; __u32 orig_eax , eip ; unsigned short cs , __cs ; __u32 eflags , esp ; unsigned short ss , __ss ; } ;
typedef u32 compat_size_t ;
typedef s32 compat_ssize_t ;
typedef s32 compat_time_t ;
typedef s32 compat_clock_t ;
typedef s32 compat_pid_t ;
typedef u16 __compat_uid_t ;
typedef u16 __compat_gid_t ;
typedef u32 __compat_uid32_t ;
typedef u32 __compat_gid32_t ;
typedef u16 compat_mode_t ;
typedef u32 compat_ino_t ;
typedef u16 compat_dev_t ;
typedef s32 compat_off_t ;
typedef s64 compat_loff_t ;
typedef u16 compat_nlink_t ;
typedef u16 compat_ipc_pid_t ;
typedef s32 compat_daddr_t ;
typedef u32 compat_caddr_t ;
typedef s32 compat_timer_t ;
typedef s32 compat_key_t ;
typedef s32 compat_int_t ;
typedef s32 compat_long_t ;
typedef s64 __attribute__ ( ( aligned ( 4 ) ) ) compat_s64 ;
typedef u32 compat_uint_t ;
typedef u32 compat_ulong_t ;
typedef u64 __attribute__ ( ( aligned ( 4 ) ) ) compat_u64 ;
typedef u32 compat_uptr_t ;
typedef u32 compat_old_sigset_t ;
typedef u32 compat_sigset_word ;
struct rand_pool_info { int entropy_count ; int buf_size ; __u32 buf [ 0 ] ; } ;
struct rnd_state { __u32 s1 , s2 , s3 ; } ;
struct msghdr ;
struct net_proto_family { int family ; int ( * create ) ( struct net * net , struct socket * sock , int protocol , int kern ) ; struct module * owner ; } ;
struct iovec ;
typedef u64 netdev_features_t ;
struct skb_frag_struct { struct { struct page * p ; } page ; __u32 page_offset ; __u32 size ; } ;
struct skb_seq_state { __u32 lower_offset ; __u32 upper_offset ; __u32 frag_idx ; __u32 stepped_offset ; struct sk_buff * root_skb ; struct sk_buff * cur_skb ; __u8 * frag_data ; } ;
struct ethtool_cmd { __u32 cmd ; __u32 supported ; __u32 advertising ; __u16 speed ; __u8 duplex ; __u8 port ; __u8 phy_address ; __u8 transceiver ; __u8 autoneg ; __u8 mdio_support ; __u32 maxtxpkt ; __u32 maxrxpkt ; __u16 speed_hi ; __u8 eth_tp_mdix ; __u8 eth_tp_mdix_ctrl ; __u32 lp_advertising ; __u32 reserved [ 2 ] ; } ;
struct ethtool_drvinfo { __u32 cmd ; char driver [ 32 ] ; char version [ 32 ] ; char fw_version [ 32 ] ; char bus_info [ 32 ] ; char reserved1 [ 32 ] ; char reserved2 [ 12 ] ; __u32 n_priv_flags ; __u32 n_stats ; __u32 testinfo_len ; __u32 eedump_len ; __u32 regdump_len ; } ;
struct ethtool_wolinfo { __u32 cmd ; __u32 supported ; __u32 wolopts ; __u8 sopass [ 6 ] ; } ;
struct ethtool_value { __u32 cmd ; __u32 data ; } ;
struct ethtool_regs { __u32 cmd ; __u32 version ; __u32 len ; __u8 data [ 0 ] ; } ;
struct ethtool_eeprom { __u32 cmd ; __u32 magic ; __u32 offset ; __u32 len ; __u8 data [ 0 ] ; } ;
struct ethtool_eee { __u32 cmd ; __u32 supported ; __u32 advertised ; __u32 lp_advertised ; __u32 eee_active ; __u32 eee_enabled ; __u32 tx_lpi_enabled ; __u32 tx_lpi_timer ; __u32 reserved [ 2 ] ; } ;
struct ethtool_modinfo { __u32 cmd ; __u32 type ; __u32 eeprom_len ; __u32 reserved [ 8 ] ; } ;
struct ethtool_coalesce { __u32 cmd ; __u32 rx_coalesce_usecs ; __u32 rx_max_coalesced_frames ; __u32 rx_coalesce_usecs_irq ; __u32 rx_max_coalesced_frames_irq ; __u32 tx_coalesce_usecs ; __u32 tx_max_coalesced_frames ; __u32 tx_coalesce_usecs_irq ; __u32 tx_max_coalesced_frames_irq ; __u32 stats_block_coalesce_usecs ; __u32 use_adaptive_rx_coalesce ; __u32 use_adaptive_tx_coalesce ; __u32 pkt_rate_low ; __u32 rx_coalesce_usecs_low ; __u32 rx_max_coalesced_frames_low ; __u32 tx_coalesce_usecs_low ; __u32 tx_max_coalesced_frames_low ; __u32 pkt_rate_high ; __u32 rx_coalesce_usecs_high ; __u32 rx_max_coalesced_frames_high ; __u32 tx_coalesce_usecs_high ; __u32 tx_max_coalesced_frames_high ; __u32 rate_sample_interval ; } ;
struct ethtool_ringparam { __u32 cmd ; __u32 rx_max_pending ; __u32 rx_mini_max_pending ; __u32 rx_jumbo_max_pending ; __u32 tx_max_pending ; __u32 rx_pending ; __u32 rx_mini_pending ; __u32 rx_jumbo_pending ; __u32 tx_pending ; } ;
struct ethtool_channels { __u32 cmd ; __u32 max_rx ; __u32 max_tx ; __u32 max_other ; __u32 max_combined ; __u32 rx_count ; __u32 tx_count ; __u32 other_count ; __u32 combined_count ; } ;
struct ethtool_pauseparam { __u32 cmd ; __u32 autoneg ; __u32 rx_pause ; __u32 tx_pause ; } ;
struct ethtool_gstrings { __u32 cmd ; __u32 string_set ; __u32 len ; __u8 data [ 0 ] ; } ;
struct ethtool_sset_info { __u32 cmd ; __u32 reserved ; __u64 sset_mask ; __u32 data [ 0 ] ; } ;
struct ethtool_test { __u32 cmd ; __u32 flags ; __u32 reserved ; __u32 len ; __u64 data [ 0 ] ; } ;
struct ethtool_stats { __u32 cmd ; __u32 n_stats ; __u64 data [ 0 ] ; } ;
struct ethtool_perm_addr { __u32 cmd ; __u32 size ; __u8 data [ 0 ] ; } ;
struct ethtool_rxfh_indir { __u32 cmd ; __u32 size ; __u32 ring_index [ 0 ] ; } ;
struct ethtool_flash { __u32 cmd ; __u32 region ; char data [ 128 ] ; } ;
struct ethtool_dump { __u32 cmd ; __u32 version ; __u32 flag ; __u32 len ; __u8 data [ 0 ] ; } ;
struct ethtool_get_features_block { __u32 available ; __u32 requested ; __u32 active ; __u32 never_changed ; } ;
struct ethtool_set_features_block { __u32 valid ; __u32 requested ; } ;
struct ethtool_ts_info { __u32 cmd ; __u32 so_timestamping ; __s32 phc_index ; __u32 tx_types ; __u32 tx_reserved [ 3 ] ; __u32 rx_filters ; __u32 rx_reserved [ 3 ] ; } ;
struct ipstats_mib { u64 mibs [ __IPSTATS_MIB_MAX ] ; struct u64_stats_sync syncp ; } ;
struct flowi_common { int flowic_oif ; int flowic_iif ; __u32 flowic_mark ; __u8 flowic_tos ; __u8 flowic_scope ; __u8 flowic_proto ; __u8 flowic_flags ; __u32 flowic_secid ; } ;
struct flow_cache_ops ;
struct flow_cache_ops { struct flow_cache_object * ( * get ) ( struct flow_cache_object * ) ; int ( * check ) ( struct flow_cache_object * ) ; void ( * delete_ ) ( struct flow_cache_object * ) ; } ;
struct nlattr ;
struct nf_ct_tcp_flags { __u8 flags ; __u8 mask ; } ;
struct nf_generic_net { struct nf_proto_net pn ; unsigned int timeout ; } ;
struct nf_tcp_net { struct nf_proto_net pn ; unsigned int timeouts [ TCP_CONNTRACK_TIMEOUT_MAX ] ; unsigned int tcp_loose ; unsigned int tcp_be_liberal ; unsigned int tcp_max_retrans ; } ;
struct nf_udp_net { struct nf_proto_net pn ; unsigned int timeouts [ UDP_CT_MAX ] ; } ;
struct nf_icmp_net { struct nf_proto_net pn ; unsigned int timeout ; } ;
struct xfrm_sec_ctx { __u8 ctx_doi ; __u8 ctx_alg ; __u16 ctx_len ; __u32 ctx_sid ; char ctx_str [ 0 ] ; } ;
struct xfrm_lifetime_cfg { __u64 soft_byte_limit ; __u64 hard_byte_limit ; __u64 soft_packet_limit ; __u64 hard_packet_limit ; __u64 soft_add_expires_seconds ; __u64 hard_add_expires_seconds ; __u64 soft_use_expires_seconds ; __u64 hard_use_expires_seconds ; } ;
struct xfrm_lifetime_cur { __u64 bytes ; __u64 packets ; __u64 add_time ; __u64 use_time ; } ;
struct xfrm_replay_state { __u32 oseq ; __u32 seq ; __u32 bitmap ; } ;
struct xfrm_replay_state_esn { unsigned int bmp_len ; __u32 oseq ; __u32 seq ; __u32 oseq_hi ; __u32 seq_hi ; __u32 replay_window ; __u32 bmp [ 0 ] ; } ;
struct xfrm_stats { __u32 replay_window ; __u32 replay ; __u32 integrity_failed ; } ;
struct xfrm_user_sec_ctx { __u16 len ; __u16 exttype ; __u8 ctx_alg ; __u8 ctx_doi ; __u16 ctx_len ; } ;
struct xfrm_userpolicy_type { __u8 type ; __u16 reserved1 ; __u8 reserved2 ; } ;
struct xfrm_mark { __u32 v ; __u32 m ; } ;
struct xfrmu_sadhinfo { __u32 sadhcnt ; __u32 sadhmcnt ; } ;
struct xfrmu_spdinfo { __u32 incnt ; __u32 outcnt ; __u32 fwdcnt ; __u32 inscnt ; __u32 outscnt ; __u32 fwdscnt ; } ;
struct xfrmu_spdhinfo { __u32 spdhcnt ; __u32 spdhmcnt ; } ;
struct xfrm_usersa_flush { __u8 proto ; } ;
struct dsa_chip_data { struct device * mii_bus ; int sw_addr ; char * port_names [ 12 ] ; s8 * rtable ; } ;
struct dsa_switch { struct dsa_switch_tree * dst ; int index ; struct dsa_chip_data * pd ; struct dsa_switch_driver * drv ; struct mii_bus * master_mii_bus ; u32 dsa_port_mask ; u32 phys_port_mask ; struct mii_bus * slave_mii_bus ; struct net_device * ports [ 12 ] ; } ;
struct ieee_ets { __u8 willing ; __u8 ets_cap ; __u8 cbs ; __u8 tc_tx_bw [ 8 ] ; __u8 tc_rx_bw [ 8 ] ; __u8 tc_tsa [ 8 ] ; __u8 prio_tc [ 8 ] ; __u8 tc_reco_bw [ 8 ] ; __u8 tc_reco_tsa [ 8 ] ; __u8 reco_prio_tc [ 8 ] ; } ;
struct ieee_pfc { __u8 pfc_cap ; __u8 pfc_en ; __u8 mbc ; __u16 delay ; __u64 requests [ 8 ] ; __u64 indications [ 8 ] ; } ;
struct cee_pg { __u8 willing ; __u8 error ; __u8 pg_en ; __u8 tcs_supported ; __u8 pg_bw [ 8 ] ; __u8 prio_pg [ 8 ] ; } ;
struct cee_pfc { __u8 willing ; __u8 error ; __u8 pfc_en ; __u8 tcs_supported ; } ;
struct dcb_app { __u8 selector ; __u8 priority ; __u16 protocol ; } ;
struct dcb_peer_app_info { __u8 willing ; __u8 error ; } ;
struct dcbmsg { __u8 dcb_family ; __u8 cmd ; __u16 dcb_pad ; } ;
struct taskstats { __u16 version ; __u32 ac_exitcode ; __u8 ac_flag ; __u8 ac_nice ; __u64 cpu_count __attribute__ ( ( aligned ( 8 ) ) ) ; __u64 cpu_delay_total ; __u64 blkio_count ; __u64 blkio_delay_total ; __u64 swapin_count ; __u64 swapin_delay_total ; __u64 cpu_run_real_total ; __u64 cpu_run_virtual_total ; char ac_comm [ 32 ] ; __u8 ac_sched __attribute__ ( ( aligned ( 8 ) ) ) ; __u8 ac_pad [ 3 ] ; __u32 ac_uid __attribute__ ( ( aligned ( 8 ) ) ) ; __u32 ac_gid ; __u32 ac_pid ; __u32 ac_ppid ; __u32 ac_btime ; __u64 ac_etime __attribute__ ( ( aligned ( 8 ) ) ) ; __u64 ac_utime ; __u64 ac_stime ; __u64 ac_minflt ; __u64 ac_majflt ; __u64 coremem ; __u64 virtmem ; __u64 hiwater_rss ; __u64 hiwater_vm ; __u64 read_char ; __u64 write_char ; __u64 read_syscalls ; __u64 write_syscalls ; __u64 read_bytes ; __u64 write_bytes ; __u64 cancelled_write_bytes ; __u64 nvcsw ; __u64 nivcsw ; __u64 ac_utimescaled ; __u64 ac_stimescaled ; __u64 cpu_scaled_run_real_total ; __u64 freepages_count ; __u64 freepages_delay_total ; } ;
struct cgroupstats { __u64 nr_sleeping ; __u64 nr_running ; __u64 nr_stopped ; __u64 nr_uninterruptible ; __u64 nr_io_wait ; } ;
struct ptr_heap { void * * ptrs ; int max ; int size ; int ( * gt ) ( void * , void * ) ; } ;
struct cgroup_scanner { struct cgroup * cg ; int ( * test_task ) ( struct task_struct * p , struct cgroup_scanner * scan ) ; void ( * process_task ) ( struct task_struct * p , struct cgroup_scanner * scan ) ; struct ptr_heap * heap ; void * data ; } ;
struct xfrm_sec_ctx ;
struct msghdr ;
struct xfrm_user_sec_ctx ;
struct request_sock ;
typedef int ( * initxattrs ) ( struct inode * inode , const struct xattr * xattr_array , void * fs_data ) ;
struct sockaddr_nl { __kernel_sa_family_t nl_family ; unsigned short nl_pad ; __u32 nl_pid ; __u32 nl_groups ; } ;
struct nlmsghdr { __u32 nlmsg_len ; __u16 nlmsg_type ; __u16 nlmsg_flags ; __u32 nlmsg_seq ; __u32 nlmsg_pid ; } ;
struct nl_pktinfo { __u32 group ; } ;
struct nlattr { __u16 nla_len ; __u16 nla_type ; } ;
struct netlink_kernel_cfg { unsigned int groups ; unsigned int flags ; void ( * input ) ( struct sk_buff * skb ) ; struct mutex * cb_mutex ; void ( * bind ) ( int group ) ; } ;
struct netlink_callback { struct sk_buff * skb ; const struct nlmsghdr * nlh ; int ( * dump ) ( struct sk_buff * skb , struct netlink_callback * cb ) ; int ( * done ) ( struct netlink_callback * cb ) ; void * data ; struct module * module ; u16 family ; u16 min_dump_alloc ; unsigned int prev_seq , seq ; long args [ 6 ] ; } ;
struct netlink_dump_control { int ( * dump ) ( struct sk_buff * skb , struct netlink_callback * ) ; int ( * done ) ( struct netlink_callback * ) ; void * data ; struct module * module ; u16 min_dump_alloc ; } ;
struct ndmsg { __u8 ndm_family ; __u8 ndm_pad1 ; __u16 ndm_pad2 ; __s32 ndm_ifindex ; __u16 ndm_state ; __u8 ndm_flags ; __u8 ndm_type ; } ;
struct nda_cacheinfo { __u32 ndm_confirmed ; __u32 ndm_used ; __u32 ndm_updated ; __u32 ndm_refcnt ; } ;
struct ndt_stats { __u64 ndts_allocs ; __u64 ndts_destroys ; __u64 ndts_hash_grows ; __u64 ndts_res_failed ; __u64 ndts_lookups ; __u64 ndts_hits ; __u64 ndts_rcv_probes_mcast ; __u64 ndts_rcv_probes_ucast ; __u64 ndts_periodic_gc_runs ; __u64 ndts_forced_gc_runs ; } ;
struct ndtmsg { __u8 ndtm_family ; __u8 ndtm_pad1 ; __u16 ndtm_pad2 ; } ;
struct ndt_config { __u16 ndtc_key_len ; __u16 ndtc_entry_size ; __u32 ndtc_entries ; __u32 ndtc_last_flush ; __u32 ndtc_last_rand ; __u32 ndtc_hash_rnd ; __u32 ndtc_hash_mask ; __u32 ndtc_hash_chain_gc ; __u32 ndtc_proxy_qlen ; } ;
union tpacket_stats_u { struct tpacket_stats stats1 ; struct tpacket_stats_v3 stats3 ; } ;
struct tpacket_auxdata { __u32 tp_status ; __u32 tp_len ; __u32 tp_snaplen ; __u16 tp_mac ; __u16 tp_net ; __u16 tp_vlan_tci ; __u16 tp_padding ; } ;
struct tpacket2_hdr { __u32 tp_status ; __u32 tp_len ; __u32 tp_snaplen ; __u16 tp_mac ; __u16 tp_net ; __u32 tp_sec ; __u32 tp_nsec ; __u16 tp_vlan_tci ; __u16 tp_padding ; } ;
struct tpacket_hdr_variant1 { __u32 tp_rxhash ; __u32 tp_vlan_tci ; } ;
struct tpacket_bd_ts { unsigned int ts_sec ; union { unsigned int ts_usec ; unsigned int ts_nsec ; } ; } ;
union tpacket_req_u { struct tpacket_req req ; struct tpacket_req3 req3 ; } ;
struct rtnl_link_stats { __u32 rx_packets ; __u32 tx_packets ; __u32 rx_bytes ; __u32 tx_bytes ; __u32 rx_errors ; __u32 tx_errors ; __u32 rx_dropped ; __u32 tx_dropped ; __u32 multicast ; __u32 collisions ; __u32 rx_length_errors ; __u32 rx_over_errors ; __u32 rx_crc_errors ; __u32 rx_frame_errors ; __u32 rx_fifo_errors ; __u32 rx_missed_errors ; __u32 tx_aborted_errors ; __u32 tx_carrier_errors ; __u32 tx_fifo_errors ; __u32 tx_heartbeat_errors ; __u32 tx_window_errors ; __u32 rx_compressed ; __u32 tx_compressed ; } ;
struct rtnl_link_stats64 { __u64 rx_packets ; __u64 tx_packets ; __u64 rx_bytes ; __u64 tx_bytes ; __u64 rx_errors ; __u64 tx_errors ; __u64 rx_dropped ; __u64 tx_dropped ; __u64 multicast ; __u64 collisions ; __u64 rx_length_errors ; __u64 rx_over_errors ; __u64 rx_crc_errors ; __u64 rx_frame_errors ; __u64 rx_fifo_errors ; __u64 rx_missed_errors ; __u64 tx_aborted_errors ; __u64 tx_carrier_errors ; __u64 tx_fifo_errors ; __u64 tx_heartbeat_errors ; __u64 tx_window_errors ; __u64 rx_compressed ; __u64 tx_compressed ; } ;
struct rtnl_link_ifmap { __u64 mem_start ; __u64 mem_end ; __u64 base_addr ; __u16 irq ; __u8 dma ; __u8 port ; } ;
struct ifla_cacheinfo { __u32 max_reasm_len ; __u32 tstamp ; __u32 reachable_time ; __u32 retrans_time ; } ;
struct ifla_vlan_flags { __u32 flags ; __u32 mask ; } ;
struct ifla_vlan_qos_mapping { __u32 from ; __u32 to ; } ;
struct ifla_vf_mac { __u32 vf ; __u8 mac [ 32 ] ; } ;
struct ifla_vf_vlan { __u32 vf ; __u32 vlan ; __u32 qos ; } ;
struct ifla_vf_tx_rate { __u32 vf ; __u32 rate ; } ;
struct ifla_vf_spoofchk { __u32 vf ; __u32 setting ; } ;
struct ifla_port_vsi { __u8 vsi_mgr_id ; __u8 vsi_type_id [ 3 ] ; __u8 vsi_type_version ; __u8 pad [ 3 ] ; } ;
struct ifla_vf_info { __u32 vf ; __u8 mac [ 32 ] ; __u32 vlan ; __u32 qos ; __u32 tx_rate ; __u32 spoofchk ; } ;
struct netdev_boot_setup { char name [ 16 ] ; struct ifmap map ; } ;
typedef rx_handler_result_t rx_handler_func_t ( struct sk_buff * * pskb ) ;
struct rps_dev_flow { u16 cpu ; u16 filter ; unsigned int last_qtail ; } ;
struct rps_sock_flow_table { unsigned int mask ; u16 ents [ 0 ] ; } ;
struct netdev_tc_txq { u16 count ; u16 offset ; } ;
struct napi_gro_cb { void * frag0 ; unsigned int frag0_len ; int data_offset ; int flush ; u16 count ; u8 same_flow ; u8 free ; unsigned long age ; int proto ; struct sk_buff * last ; } ;
typedef int gifconf_func_t ( struct net_device * dev , char * bufptr , int len ) ;
struct mii_ioctl_data { __u16 phy_id ; __u16 reg_num ; __u16 val_in ; __u16 val_out ; } ;
struct ethtool_cmd ;
struct mii_if_info { int phy_id ; int advertising ; int phy_id_mask ; int reg_num_mask ; unsigned int full_duplex : 1 ; unsigned int force_media : 1 ; unsigned int supports_gmii : 1 ; struct net_device * dev ; int ( * mdio_read ) ( struct net_device * dev , int phy_id , int location ) ; void ( * mdio_write ) ( struct net_device * dev , int phy_id , int location , int val ) ; } ;
struct ifaddrmsg { __u8 ifa_family ; __u8 ifa_prefixlen ; __u8 ifa_flags ; __u8 ifa_scope ; __u32 ifa_index ; } ;
struct ifa_cacheinfo { __u32 ifa_prefered ; __u32 ifa_valid ; __u32 cstamp ; __u32 tstamp ; } ;
struct rta_cacheinfo { __u32 rta_clntref ; __u32 rta_lastuse ; __s32 rta_expires ; __u32 rta_error ; __u32 rta_used ; __u32 rta_id ; __u32 rta_ts ; __u32 rta_tsage ; } ;
struct rta_mfc_stats { __u64 mfcs_packets ; __u64 mfcs_bytes ; __u64 mfcs_wrong_if ; } ;
struct prefix_cacheinfo { __u32 preferred_time ; __u32 valid_time ; } ;
struct tcmsg { unsigned char tcm_family ; unsigned char tcm__pad1 ; unsigned short tcm__pad2 ; int tcm_ifindex ; __u32 tcm_handle ; __u32 tcm_parent ; __u32 tcm_info ; } ;
struct nduseroptmsg { unsigned char nduseropt_family ; unsigned char nduseropt_pad1 ; unsigned short nduseropt_opts_len ; int nduseropt_ifindex ; __u8 nduseropt_icmp_type ; __u8 nduseropt_icmp_code ; unsigned short nduseropt_pad2 ; unsigned int nduseropt_pad3 ; } ;
struct vlan_ioctl_args { int cmd ; char device1 [ 24 ] ; union { char device2 [ 24 ] ; int VID ; unsigned int skb_priority ; unsigned int name_type ; unsigned int bind_type ; unsigned int flag ; } u ; short vlan_qos ; } ;
typedef int filler_t ( void * , struct page * ) ;
struct ip_beet_phdr { __u8 nexthdr ; __u8 hdrlen ; __u8 padlen ; __u8 reserved ; } ;
struct ipv6_rt_hdr { __u8 nexthdr ; __u8 hdrlen ; __u8 type ; __u8 segments_left ; } ;
struct ipv6_opt_hdr { __u8 nexthdr ; __u8 hdrlen ; } __attribute__ ( ( packed ) ) ;
struct ipv6_devconf { __s32 forwarding ; __s32 hop_limit ; __s32 mtu6 ; __s32 accept_ra ; __s32 accept_redirects ; __s32 autoconf ; __s32 dad_transmits ; __s32 rtr_solicits ; __s32 rtr_solicit_interval ; __s32 rtr_solicit_delay ; __s32 force_mld_version ; __s32 use_tempaddr ; __s32 temp_valid_lft ; __s32 temp_prefered_lft ; __s32 regen_max_retry ; __s32 max_desync_factor ; __s32 max_addresses ; __s32 accept_ra_defrtr ; __s32 accept_ra_pinfo ; __s32 accept_ra_rtr_pref ; __s32 rtr_probe_interval ; __s32 accept_ra_rt_info_max_plen ; __s32 proxy_ndp ; __s32 accept_source_route ; __s32 mc_forwarding ; __s32 disable_ipv6 ; __s32 accept_dad ; __s32 force_tllao ; __s32 ndisc_notify ; void * sysctl ; } ;
struct ipv6_params { __s32 disable_ipv6 ; __s32 autoconf ; } ;
struct icmp6_filter { __u32 data [ 8 ] ; } ;
struct sock_filter { __u16 code ; __u8 jt ; __u8 jf ; __u32 k ; } ;
typedef void ( * poll_queue_proc ) ( struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
typedef struct { unsigned long * in , * out , * ex ; unsigned long * res_in , * res_out , * res_ex ; } fd_set_bits ;
struct nla_policy { u16 type ; u16 len ; } ;
struct nl_info { struct nlmsghdr * nlh ; struct net * nl_net ; u32 portid ; } ;
typedef int ( * rtnl_doit_func ) ( struct sk_buff * , struct nlmsghdr * , void * ) ;
typedef int ( * rtnl_dumpit_func ) ( struct sk_buff * , struct netlink_callback * ) ;
struct neigh_ops { int family ; void ( * solicit ) ( struct neighbour * , struct sk_buff * ) ; void ( * error_report ) ( struct neighbour * , struct sk_buff * ) ; int ( * output ) ( struct neighbour * , struct sk_buff * ) ; int ( * connected_output ) ( struct neighbour * , struct sk_buff * ) ; } ;
struct pneigh_entry { struct pneigh_entry * next ; struct net * net ; struct net_device * dev ; u8 flags ; u8 key [ 0 ] ; } ;
typedef __u32 __portpair ;
typedef __u64 __addrpair ;
struct cg_proto ;
struct request_sock_ops ;
struct timewait_sock_ops ;
struct cg_proto { void ( * enter_memory_pressure ) ( struct sock * sk ) ; struct res_counter * memory_allocated ; struct percpu_counter * sockets_allocated ; int * memory_pressure ; long * sysctl_mem ; unsigned long flags ; struct mem_cgroup * memcg ; } ;
struct __una_u16 { u16 x ; } __attribute__ ( ( packed ) ) ;
struct __una_u32 { u32 x ; } __attribute__ ( ( packed ) ) ;
struct __una_u64 { u64 x ; } __attribute__ ( ( packed ) ) ;
struct request_sock ;
struct request_sock_ops { int family ; int obj_size ; struct kmem_cache * slab ; char * slab_name ; int ( * rtx_syn_ack ) ( struct sock * sk , struct request_sock * req , struct request_values * rvp ) ; void ( * send_ack ) ( struct sock * sk , struct sk_buff * skb , struct request_sock * req ) ; void ( * send_reset ) ( struct sock * sk , struct sk_buff * skb ) ; void ( * destructor ) ( struct request_sock * req ) ; void ( * syn_ack_timeout ) ( struct sock * sk , struct request_sock * req ) ; } ;
struct request_sock { struct request_sock * dl_next ; u16 mss ; u8 num_retrans ; u8 cookie_ts : 1 ; u8 num_timeout : 7 ; u32 window_clamp ; u32 rcv_wnd ; u32 ts_recent ; unsigned long expires ; const struct request_sock_ops * rsk_ops ; struct sock * sk ; u32 secid ; u32 peer_secid ; } ;
struct listen_sock { u8 max_qlen_log ; u8 synflood_warned ; int qlen ; int qlen_young ; int clock_hand ; u32 hash_rnd ; u32 nr_table_entries ; struct request_sock * syn_table [ 0 ] ; } ;
struct timewait_sock_ops { struct kmem_cache * twsk_slab ; char * twsk_slab_name ; unsigned int twsk_obj_size ; int ( * twsk_unique ) ( struct sock * sk , struct sock * sktw , void * twp ) ; void ( * twsk_destructor ) ( struct sock * sk ) ; } ;
struct tcp_repair_opt { __u32 opt_code ; __u32 opt_val ; } ;
struct tcp_info { __u8 tcpi_state ; __u8 tcpi_ca_state ; __u8 tcpi_retransmits ; __u8 tcpi_probes ; __u8 tcpi_backoff ; __u8 tcpi_options ; __u8 tcpi_snd_wscale : 4 , tcpi_rcv_wscale : 4 ; __u32 tcpi_rto ; __u32 tcpi_ato ; __u32 tcpi_snd_mss ; __u32 tcpi_rcv_mss ; __u32 tcpi_unacked ; __u32 tcpi_sacked ; __u32 tcpi_lost ; __u32 tcpi_retrans ; __u32 tcpi_fackets ; __u32 tcpi_last_data_sent ; __u32 tcpi_last_ack_sent ; __u32 tcpi_last_data_recv ; __u32 tcpi_last_ack_recv ; __u32 tcpi_pmtu ; __u32 tcpi_rcv_ssthresh ; __u32 tcpi_rtt ; __u32 tcpi_rttvar ; __u32 tcpi_snd_ssthresh ; __u32 tcpi_snd_cwnd ; __u32 tcpi_advmss ; __u32 tcpi_reordering ; __u32 tcpi_rcv_rtt ; __u32 tcpi_rcv_space ; __u32 tcpi_total_retrans ; } ;
struct tcp_cookie_transactions { __u16 tcpct_flags ; __u8 __tcpct_pad1 ; __u8 tcpct_cookie_desired ; __u16 tcpct_s_data_desired ; __u16 tcpct_used ; __u8 tcpct_value [ 536U ] ; } ;
struct tcp_fastopen_cookie { s8 len ; u8 val [ 16 ] ; } ;
struct tcp_sack_block { u32 start_seq ; u32 end_seq ; } ;
struct tcp_options_received { long ts_recent_stamp ; u32 ts_recent ; u32 rcv_tsval ; u32 rcv_tsecr ; u16 saw_tstamp : 1 , tstamp_ok : 1 , dsack : 1 , wscale_ok : 1 , sack_ok : 4 , snd_wscale : 4 , rcv_wscale : 4 ; u8 cookie_plus : 6 , cookie_out_never : 1 , cookie_in_always : 1 ; u8 num_sacks ; u16 user_mss ; u16 mss_clamp ; } ;
struct inet6_skb_parm { int iif ; __u16 ra ; __u16 hop ; __u16 dst0 ; __u16 srcrt ; __u16 dst1 ; __u16 lastopt ; __u16 nhoff ; __u16 flags ; __u16 dsthao ; __u16 frag_max_size ; } ;
struct tc_stats { __u64 bytes ; __u32 packets ; __u32 drops ; __u32 overlimits ; __u32 bps ; __u32 pps ; __u32 qlen ; __u32 backlog ; } ;
struct tc_ratespec { unsigned char cell_log ; unsigned char __reserved ; unsigned short overhead ; short cell_align ; unsigned short mpu ; __u32 rate ; } ;
struct tc_fifo_qopt { __u32 limit ; } ;
struct tc_prio_qopt { int bands ; __u8 priomap [ 15 + 1 ] ; } ;
struct tc_multiq_qopt { __u16 bands ; __u16 max_bands ; } ;
struct tc_sfq_qopt { unsigned quantum ; int perturb_period ; __u32 limit ; unsigned divisor ; unsigned flows ; } ;
struct tc_sfq_xstats { __s32 allot ; } ;
struct tc_red_qopt { __u32 limit ; __u32 qth_min ; __u32 qth_max ; unsigned char Wlog ; unsigned char Plog ; unsigned char Scell_log ; unsigned char flags ; } ;
struct tc_red_xstats { __u32 early ; __u32 pdrop ; __u32 other ; __u32 marked ; } ;
struct tc_gred_qopt { __u32 limit ; __u32 qth_min ; __u32 qth_max ; __u32 DP ; __u32 backlog ; __u32 qave ; __u32 forced ; __u32 early ; __u32 other ; __u32 pdrop ; __u8 Wlog ; __u8 Plog ; __u8 Scell_log ; __u8 prio ; __u32 packets ; __u32 bytesin ; } ;
struct tc_gred_sopt { __u32 DPs ; __u32 def_DP ; __u8 grio ; __u8 flags ; __u16 pad1 ; } ;
struct tc_choke_qopt { __u32 limit ; __u32 qth_min ; __u32 qth_max ; unsigned char Wlog ; unsigned char Plog ; unsigned char Scell_log ; unsigned char flags ; } ;
struct tc_choke_xstats { __u32 early ; __u32 pdrop ; __u32 other ; __u32 marked ; __u32 matched ; } ;
struct tc_htb_glob { __u32 version ; __u32 rate2quantum ; __u32 defcls ; __u32 debug ; __u32 direct_pkts ; } ;
struct tc_htb_xstats { __u32 lends ; __u32 borrows ; __u32 giants ; __u32 tokens ; __u32 ctokens ; } ;
struct tc_hfsc_qopt { __u16 defcls ; } ;
struct tc_service_curve { __u32 m1 ; __u32 d ; __u32 m2 ; } ;
struct tc_hfsc_stats { __u64 work ; __u64 rtwork ; __u32 period ; __u32 level ; } ;
struct tc_cbq_lssopt { unsigned char change ; unsigned char flags ; unsigned char ewma_log ; unsigned char level ; __u32 maxidle ; __u32 minidle ; __u32 offtime ; __u32 avpkt ; } ;
struct tc_cbq_wrropt { unsigned char flags ; unsigned char priority ; unsigned char cpriority ; unsigned char __reserved ; __u32 allot ; __u32 weight ; } ;
struct tc_cbq_ovl { unsigned char strategy ; unsigned char priority2 ; __u16 pad ; __u32 penalty ; } ;
struct tc_cbq_fopt { __u32 split ; __u32 defmap ; __u32 defchange ; } ;
struct tc_cbq_xstats { __u32 borrows ; __u32 overactions ; __s32 avgidle ; __s32 undertime ; } ;
struct tc_netem_qopt { __u32 latency ; __u32 limit ; __u32 loss ; __u32 gap ; __u32 duplicate ; __u32 jitter ; } ;
struct tc_netem_corr { __u32 delay_corr ; __u32 loss_corr ; __u32 dup_corr ; } ;
struct tc_netem_reorder { __u32 probability ; __u32 correlation ; } ;
struct tc_netem_corrupt { __u32 probability ; __u32 correlation ; } ;
struct tc_netem_gimodel { __u32 p13 ; __u32 p31 ; __u32 p32 ; __u32 p14 ; __u32 p23 ; } ;
struct tc_netem_gemodel { __u32 p ; __u32 r ; __u32 h ; __u32 k1 ; } ;
struct tc_drr_stats { __u32 deficit ; } ;
struct tc_mqprio_qopt { __u8 num_tc ; __u8 prio_tc_map [ 15 + 1 ] ; __u8 hw ; __u16 count [ 16 ] ; __u16 offset [ 16 ] ; } ;
struct tc_sfb_qopt { __u32 rehash_interval ; __u32 warmup_time ; __u32 max ; __u32 bin_size ; __u32 increment ; __u32 decrement ; __u32 limit ; __u32 penalty_rate ; __u32 penalty_burst ; } ;
struct tc_sfb_xstats { __u32 earlydrop ; __u32 penaltydrop ; __u32 bucketdrop ; __u32 queuedrop ; __u32 childdrop ; __u32 marked ; __u32 maxqlen ; __u32 maxprob ; __u32 avgprob ; } ;
struct tc_qfq_stats { __u32 weight ; __u32 lmax ; } ;
struct tcf_t { __u64 install ; __u64 lastuse ; __u64 expires ; } ;
struct tc_u32_mark { __u32 val ; __u32 mask ; __u32 success ; } ;
struct tc_u32_pcnt { __u64 rcnt ; __u64 rhit ; __u64 kcnts [ 0 ] ; } ;
struct tc_rsvp_gpi { __u32 key ; __u32 mask ; int offset ; } ;
struct tcf_ematch_tree_hdr { __u16 nmatches ; __u16 progid ; } ;
struct tcf_ematch_hdr { __u16 matchid ; __u16 kind ; __u16 flags ; __u16 pad ; } ;
struct gnet_stats_basic { __u64 bytes ; __u32 packets ; } ;
struct gnet_stats_basic_packed { __u64 bytes ; __u32 packets ; } __attribute__ ( ( packed ) ) ;
struct gnet_stats_rate_est { __u32 bps ; __u32 pps ; } ;
struct gnet_stats_queue { __u32 qlen ; __u32 backlog ; __u32 drops ; __u32 requeues ; __u32 overlimits ; } ;
struct Qdisc_ops ;
struct qdisc_walker ;
struct Qdisc_ops { struct Qdisc_ops * next ; const struct Qdisc_class_ops * cl_ops ; char id [ 16 ] ; int priv_size ; int ( * enqueue ) ( struct sk_buff * , struct Qdisc * ) ; struct sk_buff * ( * dequeue ) ( struct Qdisc * ) ; struct sk_buff * ( * peek ) ( struct Qdisc * ) ; unsigned int ( * drop ) ( struct Qdisc * ) ; int ( * init ) ( struct Qdisc * , struct nlattr * arg ) ; void ( * reset ) ( struct Qdisc * ) ; void ( * destroy ) ( struct Qdisc * ) ; int ( * change ) ( struct Qdisc * , struct nlattr * arg ) ; void ( * attach ) ( struct Qdisc * ) ; int ( * dump ) ( struct Qdisc * , struct sk_buff * ) ; int ( * dump_stats ) ( struct Qdisc * , struct gnet_dump * ) ; struct module * owner ; } ;
struct tcf_result { unsigned long class_ ; u32 classid ; } ;
struct qdisc_skb_cb { unsigned int pkt_len ; u16 slave_dev_queue_mapping ; u16 _pad ; unsigned char data [ 20 ] ; } ;
struct Qdisc_class_common { u32 classid ; struct hlist_node hnode ; } ;
struct qdisc_walker { int stop ; int skip ; int count ; int ( * fn ) ( struct Qdisc * , unsigned long cl , struct qdisc_walker * ) ; } ;
typedef u64 psched_time_t ;
struct partition_meta_info { char uuid [ 37 ] ; u8 volname [ 64 ] ; } ;
typedef int ( * writepage_t ) ( struct page * page , struct writeback_control * wbc , void * data ) ;
typedef int ( congested_fn ) ( void * , int ) ;
typedef void ( mempool_free_t ) ( void * element , void * pool_data ) ;
struct sg_io_v4 { __s32 guard ; __u32 protocol ; __u32 subprotocol ; __u32 request_len ; __u64 request ; __u64 request_tag ; __u32 request_attr ; __u32 request_priority ; __u32 request_extra ; __u32 max_response_len ; __u64 response ; __u32 dout_iovec_count ; __u32 dout_xfer_len ; __u32 din_iovec_count ; __u32 din_xfer_len ; __u64 dout_xferp ; __u64 din_xferp ; __u32 timeout ; __u32 flags ; __u64 usr_ptr ; __u32 spare_in ; __u32 driver_status ; __u32 transport_status ; __u32 device_status ; __u32 retry_delay ; __u32 info ; __u32 duration ; __u32 response_len ; __s32 din_resid ; __s32 dout_resid ; __u64 generated_tag ; __u32 spare_out ; __u32 padding ; } ;
struct request_pm_state ;
typedef void ( rq_end_io_fn ) ( struct request * , int ) ;
struct request_pm_state { int pm_step ; u32 pm_state ; void * data ; } ;
typedef int ( elevator_merge_fn ) ( struct request_queue * , struct request * * , struct bio * ) ;
typedef void ( elevator_merge_req_fn ) ( struct request_queue * , struct request * , struct request * ) ;
typedef void ( elevator_merged_fn ) ( struct request_queue * , struct request * , int ) ;
typedef int ( elevator_allow_merge_fn ) ( struct request_queue * , struct request * , struct bio * ) ;
typedef void ( elevator_bio_merged_fn ) ( struct request_queue * , struct request * , struct bio * ) ;
typedef int ( elevator_dispatch_fn ) ( struct request_queue * , int ) ;
typedef void ( elevator_add_req_fn ) ( struct request_queue * , struct request * ) ;
typedef void ( elevator_completed_req_fn ) ( struct request_queue * , struct request * ) ;
typedef int ( elevator_may_queue_fn ) ( struct request_queue * , int ) ;
typedef void ( elevator_init_icq_fn ) ( struct io_cq * ) ;
typedef void ( elevator_exit_icq_fn ) ( struct io_cq * ) ;
typedef void ( elevator_put_req_fn ) ( struct request * ) ;
typedef void ( elevator_activate_req_fn ) ( struct request_queue * , struct request * ) ;
typedef void ( elevator_deactivate_req_fn ) ( struct request_queue * , struct request * ) ;
typedef int ( elevator_init_fn ) ( struct request_queue * ) ;
typedef void ( elevator_exit_fn ) ( struct elevator_queue * ) ;
typedef void ( request_fn_proc ) ( struct request_queue * q ) ;
typedef void ( make_request_fn ) ( struct request_queue * q , struct bio * bio ) ;
typedef int ( prep_rq_fn ) ( struct request_queue * , struct request * ) ;
typedef void ( unprep_rq_fn ) ( struct request_queue * , struct request * ) ;
struct bvec_merge_data { struct block_device * bi_bdev ; sector_t bi_sector ; unsigned bi_size ; unsigned long bi_rw ; } ;
typedef int ( merge_bvec_fn ) ( struct request_queue * , struct bvec_merge_data * , struct bio_vec * ) ;
typedef void ( softirq_done_fn ) ( struct request * ) ;
typedef int ( dma_drain_needed_fn ) ( struct request * ) ;
typedef int ( lld_busy_fn ) ( struct request_queue * q ) ;
typedef int ( bsg_job_fn ) ( struct bsg_job * ) ;
struct blk_integrity_exchg { void * prot_buf ; void * data_buf ; sector_t sector ; unsigned int data_size ; unsigned short sector_size ; const char * disk_name ; } ;
typedef void ( integrity_gen_fn ) ( struct blk_integrity_exchg * ) ;
typedef int ( integrity_vrfy_fn ) ( struct blk_integrity_exchg * ) ;
typedef void ( integrity_set_tag_fn ) ( void * , void * , unsigned int ) ;
typedef void ( integrity_get_tag_fn ) ( void * , void * , unsigned int ) ;
typedef void ( bh_end_io_t ) ( struct buffer_head * bh , int uptodate ) ;
struct journal_head { struct buffer_head * b_bh ; int b_jcount ; unsigned b_jlist ; unsigned b_modified ; tid_t b_cow_tid ; char * b_frozen_data ; char * b_committed_data ; transaction_t * b_transaction ; transaction_t * b_next_transaction ; struct journal_head * b_tnext , * b_tprev ; transaction_t * b_cp_transaction ; struct journal_head * b_cpnext , * b_cpprev ; struct jbd2_buffer_trigger_type * b_triggers ; struct jbd2_buffer_trigger_type * b_frozen_triggers ; } ;
typedef void ( * crypto_completion_t ) ( struct crypto_async_request * req , int err ) ;
struct blkcipher_desc { struct crypto_blkcipher * tfm ; void * info ; u32 flags ; } ;
struct hash_desc { struct crypto_hash * tfm ; u32 flags ; } ;
struct crypto_attr_type { u32 type ; u32 mask ; } ;
struct crypto_attr_u32 { u32 num ; } ;
struct shash_desc { struct crypto_shash * tfm ; u32 flags ; void * __ctx [ ] __attribute__ ( ( __aligned__ ( __alignof__ ( unsigned long long ) ) ) ) ; } ;
struct transaction_chp_stats_s { unsigned long cs_chp_time ; __u32 cs_forced_to_close ; __u32 cs_written ; __u32 cs_dropped ; } ;
struct transaction_run_stats_s { unsigned long rs_wait ; unsigned long rs_running ; unsigned long rs_locked ; unsigned long rs_flushing ; unsigned long rs_logging ; __u32 rs_handle_count ; __u32 rs_blocks ; __u32 rs_blocks_logged ; } ;
struct file_system_type ;
typedef void ( * node_registration_func_t ) ( struct node * ) ;
struct notifier_block ;
typedef struct { unsigned long val ; } swp_entry_t ;
struct sysinfo ;
struct swap_extent { struct list_head list ; unsigned long start_page ; unsigned long nr_pages ; sector_t start_block ; } ;
typedef struct match_token match_table_t [ ] ;

typedef void ( * kthread_work_func_t ) ( struct kthread_work * work ) ;
struct ata_taskfile { unsigned long flags ; u8 protocol ; u8 ctl ; u8 hob_feature ; u8 hob_nsect ; u8 hob_lbal ; u8 hob_lbam ; u8 hob_lbah ; u8 feature ; u8 nsect ; u8 lbal ; u8 lbam ; u8 lbah ; u8 device ; u8 command ; } ;
struct ccs_modesel_head { __u8 _r1 ; __u8 medium ; __u8 _r2 ; __u8 block_desc_length ; __u8 density ; __u8 number_blocks_hi ; __u8 number_blocks_med ; __u8 number_blocks_lo ; __u8 _r3 ; __u8 block_length_hi ; __u8 block_length_med ; __u8 block_length_lo ; } ;
struct scsi_lun { __u8 scsi_lun [ 8 ] ; } ;
typedef s64 acpi_native_int ;
typedef u64 acpi_size ;
typedef u64 acpi_io_address ;
typedef u64 acpi_physical_address ;
typedef u32 acpi_status ;
typedef u32 acpi_name ;
typedef u8 acpi_owner_id ;
typedef u64 acpi_integer ;
typedef u32 acpi_object_type ;
typedef u32 acpi_event_type ;
typedef u32 acpi_event_status ;
typedef u8 acpi_adr_space_type ;
struct acpi_object_list { u32 count ; union acpi_object * pointer ; } ;
struct acpi_predefined_names { char * name ; u8 type ; char * val ; } ;
struct acpi_system_info { u32 acpi_ca_version ; u32 flags ; u32 timer_resolution ; u32 reserved1 ; u32 reserved2 ; u32 debug_level ; u32 debug_layer ; } ;
typedef void ( * acpi_osd_exec_callback ) ( void * context ) ;
struct acpi_connection_info { u8 * connection ; u16 length ; u8 access_length ; } ;
struct acpi_pnp_device_id { u32 length ; char * string ; } ;
struct acpi_pci_id { u16 segment ; u16 bus ; u16 device ; u16 function ; } ;
struct acpi_memory_list { char * list_name ; void * list_head ; u16 object_size ; u16 max_depth ; u16 current_depth ; u16 link_offset ; } ;
struct acpi_table_header { char signature [ 4 ] ; u32 length ; u8 revision ; u8 checksum ; char oem_id [ 6 ] ; char oem_table_id [ 8 ] ; u32 oem_revision ; char asl_compiler_id [ 4 ] ; u32 asl_compiler_revision ; } ;
struct acpi_generic_address { u8 space_id ; u8 bit_width ; u8 bit_offset ; u8 access_width ; u64 address ; } ;
struct acpi_table_rsdp { char signature [ 8 ] ; u8 checksum ; char oem_id [ 6 ] ; u8 revision ; u32 rsdt_physical_address ; u32 length ; u64 xsdt_physical_address ; u8 extended_checksum ; u8 reserved [ 3 ] ; } ;
struct acpi_table_facs { char signature [ 4 ] ; u32 length ; u32 hardware_signature ; u32 firmware_waking_vector ; u32 global_lock ; u32 flags ; u64 xfirmware_waking_vector ; u8 version ; u8 reserved [ 3 ] ; u32 ospm_flags ; u8 reserved1 [ 24 ] ; } ;
union acpi_name_union { u32 integer ; char ascii [ 4 ] ; } ;
struct acpi_subtable_header { u8 type ; u8 length ; } ;
struct acpi_bert_region { u32 block_status ; u32 raw_data_offset ; u32 raw_data_length ; u32 data_length ; u32 error_severity ; } ;
struct acpi_einj_error_type_with_addr { u32 error_type ; u32 vendor_struct_offset ; u32 flags ; u32 apic_id ; u64 address ; u64 range ; u32 pcie_id ; } ;
struct acpi_einj_vendor { u32 length ; u32 pcie_id ; u16 vendor_id ; u16 device_id ; u8 revision_id ; u8 reserved [ 3 ] ; } ;
struct acpi_einj_trigger { u32 header_size ; u32 revision ; u32 table_size ; u32 entry_count ; } ;
struct acpi_erst_info { u16 signature ; u8 data [ 48 ] ; } ;
struct acpi_hest_header { u16 type ; u16 source_id ; } ;
struct acpi_hest_ia_error_bank { u8 bank_number ; u8 clear_status_on_init ; u8 status_format ; u8 reserved ; u32 control_register ; u64 control_data ; u32 status_register ; u32 address_register ; u32 misc_register ; } ;
struct acpi_hest_aer_common { u16 reserved1 ; u8 flags ; u8 enabled ; u32 records_to_preallocate ; u32 max_sections_per_record ; u32 bus ; u16 device ; u16 function ; u16 device_control ; u16 reserved2 ; u32 uncorrectable_mask ; u32 uncorrectable_severity ; u32 correctable_mask ; u32 advanced_capabilities ; } ;
struct acpi_hest_notify { u8 type ; u8 length ; u16 config_write_enable ; u32 poll_interval ; u32 vector ; u32 polling_threshold_value ; u32 polling_threshold_window ; u32 error_threshold_value ; u32 error_threshold_window ; } ;
struct acpi_hest_generic_status { u32 block_status ; u32 raw_data_offset ; u32 raw_data_length ; u32 data_length ; u32 error_severity ; } ;
struct acpi_hest_generic_data { u8 section_type [ 16 ] ; u32 error_severity ; u16 revision ; u8 validation_bits ; u8 flags ; u32 error_data_length ; u8 fru_id [ 16 ] ; u8 fru_text [ 20 ] ; } ;
struct acpi_msct_proximity { u8 revision ; u8 length ; u32 range_start ; u32 range_end ; u32 processor_capacity ; u64 memory_capacity ; } ;
struct acpi_asf_header { u8 type ; u8 reserved ; u16 length ; } ;
struct acpi_asf_alert_data { u8 address ; u8 command ; u8 mask ; u8 value ; u8 sensor_type ; u8 type ; u8 offset ; u8 source_type ; u8 severity ; u8 sensor_number ; u8 entity ; u8 instance ; } ;
struct acpi_asf_control_data { u8 function ; u8 address ; u8 command ; u8 value ; } ;
struct acpi_csrt_group { u32 length ; u32 vendor_id ; u32 subvendor_id ; u16 device_id ; u16 subdevice_id ; u16 revision ; u16 reserved ; u32 info_length ; } ;
struct acpi_csrt_descriptor { u32 length ; u16 type ; u16 subtype ; u32 uid ; } ;
struct acpi_dbg2_device { u8 revision ; u16 length ; u8 register_count ; u16 namepath_length ; u16 namepath_offset ; u16 oem_data_length ; u16 oem_data_offset ; u16 port_type ; u16 port_subtype ; u16 reserved ; u16 base_address_offset ; u16 address_size_offset ; } ;
struct acpi_dmar_header { u16 type ; u16 length ; } ;
struct acpi_dmar_device_scope { u8 entry_type ; u8 length ; u16 reserved ; u8 enumeration_id ; u8 bus ; } ;
struct acpi_dmar_pci_path { u8 dev ; u8 fn ; } ;
struct acpi_ibft_header { u8 type ; u8 version ; u16 length ; u8 index ; u8 flags ; } ;
struct acpi_ivrs_header { u8 type ; u8 flags ; u16 length ; u16 device_id ; } ;
struct acpi_ivrs_de_header { u8 type ; u16 id ; u8 data_setting ; } ;
struct acpi_mcfg_allocation { u64 address ; u16 pci_segment ; u8 start_bus_number ; u8 end_bus_number ; u32 reserved ; } ;
struct acpi_slic_header { u32 type ; u32 length ; } ;
struct acpi_drtm_vtl_list { u32 validated_table_list_count ; } ;
struct acpi_drtm_resource_list { u32 resource_list_count ; } ;
struct acpi_drtm_id_list { u32 id_list_count ; } ;
struct acpi_fpdt_header { u16 type ; u8 length ; u8 revision ; } ;
struct acpi_table_s3pt { u8 signature [ 4 ] ; u32 length ; } ;
struct acpi_s3pt_header { u16 type ; u8 length ; u8 revision ; } ;
struct acpi_mpst_channel { u8 channel_id ; u8 reserved1 [ 3 ] ; u16 power_node_count ; u16 reserved2 ; } ;
struct acpi_mpst_power_node { u8 flags ; u8 reserved1 ; u16 node_id ; u32 length ; u64 range_address ; u64 range_length ; u32 num_power_states ; u32 num_physical_components ; } ;
struct acpi_mpst_power_state { u8 power_state ; u8 info_index ; } ;
struct acpi_mpst_component { u16 component_id ; } ;
struct acpi_mpst_data_hdr { u16 characteristics_count ; u16 reserved ; } ;
struct acpi_mpst_power_data { u8 structure_id ; u8 flags ; u16 reserved1 ; u32 average_power ; u32 power_saving ; u64 exit_latency ; u64 reserved2 ; } ;
struct acpi_mpst_shared { u32 signature ; u16 pcc_command ; u16 pcc_status ; u32 command_register ; u32 status_register ; u32 power_state_id ; u32 power_node_id ; u64 energy_consumed ; u64 average_power ; } ;
struct acpi_pcct_shared_memory { u32 signature ; u16 command ; u16 status ; } ;
struct acpi_pmtt_header { u8 type ; u8 reserved1 ; u16 length ; u16 flags ; u16 reserved2 ; } ;
struct acpi_pmtt_domain { u32 proximity_domain ; } ;
struct acpi_rasf_shared_memory { u32 signature ; u16 command ; u16 status ; u64 requested_address ; u64 requested_length ; u64 actual_address ; u64 actual_length ; u16 flags ; u8 speed ; } ;
typedef u16 acpi_rs_length ;
typedef u32 acpi_rsdesc_size ;
struct acpi_uuid { u8 data [ 16 ] ; } ;
struct acpi_vendor_uuid { u8 subtype ; u8 data [ 16 ] ; } ;
struct acpi_resource_irq { u8 descriptor_length ; u8 triggering ; u8 polarity ; u8 sharable ; u8 interrupt_count ; u8 interrupts [ 1 ] ; } ;
struct acpi_resource_dma { u8 type ; u8 bus_master ; u8 transfer ; u8 channel_count ; u8 channels [ 1 ] ; } ;
struct acpi_resource_start_dependent { u8 descriptor_length ; u8 compatibility_priority ; u8 performance_robustness ; } ;
struct acpi_resource_io { u8 io_decode ; u8 alignment ; u8 address_length ; u16 minimum ; u16 maximum ; } ;
struct acpi_resource_fixed_io { u16 address ; u8 address_length ; } ;
struct acpi_resource_fixed_dma { u16 request_lines ; u16 channels ; u8 width ; } ;
struct acpi_resource_vendor { u16 byte_length ; u8 byte_data [ 1 ] ; } ;
struct acpi_resource_vendor_typed { u16 byte_length ; u8 uuid_subtype ; u8 uuid [ 16 ] ; u8 byte_data [ 1 ] ; } ;
struct acpi_resource_end_tag { u8 checksum ; } ;
struct acpi_resource_memory24 { u8 write_protect ; u16 minimum ; u16 maximum ; u16 alignment ; u16 address_length ; } ;
struct acpi_resource_memory32 { u8 write_protect ; u32 minimum ; u32 maximum ; u32 alignment ; u32 address_length ; } ;
struct acpi_resource_fixed_memory32 { u8 write_protect ; u32 address ; u32 address_length ; } ;
struct acpi_memory_attribute { u8 write_protect ; u8 caching ; u8 range_type ; u8 translation ; } ;
struct acpi_io_attribute { u8 range_type ; u8 translation ; u8 translation_type ; u8 reserved1 ; } ;
struct acpi_resource_source { u8 index ; u16 string_length ; char * string_ptr ; } ;
struct acpi_resource_generic_register { u8 space_id ; u8 bit_width ; u8 bit_offset ; u8 access_size ; u64 address ; } ;
struct acpi_pci_routing_table { u32 length ; u32 pin ; u64 address ; u32 source_index ; char source [ 4 ] ; } ;
struct acpi_signal_fatal_info { u32 type ; u32 code ; u32 argument ; } ;
struct acpi_fde_info { u32 floppy0 ; u32 floppy1 ; u32 floppy2 ; u32 floppy3 ; u32 tape ; } ;
struct acpi_grt_info { u16 year ; u8 month ; u8 day ; u8 hour ; u8 minute ; u8 second ; u8 valid ; u16 milliseconds ; u16 timezone ; u8 daylight ; u8 reserved [ 3 ] ; } ;
struct acpi_gtm_info { u32 pio_speed0 ; u32 dma_speed0 ; u32 pio_speed1 ; u32 dma_speed1 ; u32 flags ; } ;
struct acpi_pld_info { u8 revision ; u8 ignore_color ; u32 color ; u16 width ; u16 height ; u8 user_visible ; u8 dock ; u8 lid ; u8 panel ; u8 vertical_position ; u8 horizontal_position ; u8 shape ; u8 group_orientation ; u8 group_token ; u8 group_position ; u8 bay ; u8 ejectable ; u8 ospm_eject_required ; u8 cabinet_number ; u8 card_cage_number ; u8 reference ; u8 rotation ; u8 order ; u8 reserved ; u16 vertical_offset ; u16 horizontal_offset ; } ;
struct acpi_handle_list { u32 count ; acpi_handle handles [ 10 ] ; } ;
typedef int ( * acpi_op_add ) ( struct acpi_device * device ) ;
typedef int ( * acpi_op_remove ) ( struct acpi_device * device , int type ) ;
typedef int ( * acpi_op_start ) ( struct acpi_device * device ) ;
typedef int ( * acpi_op_bind ) ( struct acpi_device * device ) ;
typedef int ( * acpi_op_unbind ) ( struct acpi_device * device ) ;
struct acpi_device_status { u32 present : 1 ; u32 enabled : 1 ; u32 show_in_ui : 1 ; u32 functional : 1 ; u32 battery_present : 1 ; u32 reserved : 27 ; } ;
struct acpi_device_flags { u32 dynamic_status : 1 ; u32 bus_address : 1 ; u32 removable : 1 ; u32 ejectable : 1 ; u32 suprise_removal_ok : 1 ; u32 power_manageable : 1 ; u32 performance_manageable : 1 ; u32 eject_pending : 1 ; u32 reserved : 24 ; } ;
struct acpi_device_pnp { acpi_bus_id bus_id ; acpi_bus_address bus_address ; char * unique_id ; struct list_head ids ; acpi_device_name device_name ; acpi_device_class device_class ; union acpi_object * str_obj ; unsigned long sun ; } ;
struct acpi_device_power_flags { u32 explicit_get : 1 ; u32 power_resources : 1 ; u32 inrush_current : 1 ; u32 power_removed : 1 ; u32 reserved : 28 ; } ;
struct acpi_device_perf_flags { u8 reserved : 8 ; } ;
struct acpi_device_wakeup_flags { u8 valid : 1 ; u8 run_wake : 1 ; u8 notifier_present : 1 ; } ;
struct acpi_device_physical_node { u8 node_id ; struct list_head node ; struct device * dev ; } ;
struct acpi_bus_event { struct list_head node ; acpi_device_class device_class ; acpi_bus_id bus_id ; u32 type ; u32 data ; } ;
struct acpi_eject_event { acpi_handle handle ; u32 event ; } ;
typedef int ( * acpi_table_handler ) ( struct acpi_table_header * table ) ;
typedef int ( * acpi_table_entry_handler ) ( struct acpi_subtable_header * header , const unsigned long end ) ;
struct acpi_pci_driver { struct list_head node ; int ( * add ) ( struct acpi_pci_root * root ) ; void ( * remove ) ( struct acpi_pci_root * root ) ; } ;
struct cdrom_msf0 { __u8 minute ; __u8 second ; __u8 frame ; } ;
struct cdrom_msf { __u8 cdmsf_min0 ; __u8 cdmsf_sec0 ; __u8 cdmsf_frame0 ; __u8 cdmsf_min1 ; __u8 cdmsf_sec1 ; __u8 cdmsf_frame1 ; } ;
struct cdrom_ti { __u8 cdti_trk0 ; __u8 cdti_ind0 ; __u8 cdti_trk1 ; __u8 cdti_ind1 ; } ;
struct cdrom_tochdr { __u8 cdth_trk0 ; __u8 cdth_trk1 ; } ;
struct cdrom_volctrl { __u8 channel0 ; __u8 channel1 ; __u8 channel2 ; __u8 channel3 ; } ;
struct cdrom_mcn { __u8 medium_catalog_number [ 14 ] ; } ;
struct dvd_layer { __u8 book_version : 4 ; __u8 book_type : 4 ; __u8 min_rate : 4 ; __u8 disc_size : 4 ; __u8 layer_type : 4 ; __u8 track_path : 1 ; __u8 nlayers : 2 ; __u8 track_density : 4 ; __u8 linear_density : 4 ; __u8 bca : 1 ; __u32 start_sector ; __u32 end_sector ; __u32 end_sector_l0 ; } ;
struct dvd_copyright { __u8 type ; __u8 layer_num ; __u8 cpst ; __u8 rmi ; } ;
struct dvd_disckey { __u8 type ; unsigned agid : 2 ; __u8 value [ 2048 ] ; } ;
struct dvd_bca { __u8 type ; int len ; __u8 value [ 188 ] ; } ;
struct dvd_manufact { __u8 type ; __u8 layer_num ; int len ; __u8 value [ 2048 ] ; } ;
typedef __u8 dvd_key [ 5 ] ;
typedef __u8 dvd_challenge [ 10 ] ;
struct dvd_lu_send_agid { __u8 type ; unsigned agid : 2 ; } ;
struct dvd_lu_send_asf { __u8 type ; unsigned agid : 2 ; unsigned asf : 1 ; } ;
struct dvd_host_send_rpcstate { __u8 type ; __u8 pdrc ; } ;
struct dvd_lu_send_rpcstate { __u8 type : 2 ; __u8 vra : 3 ; __u8 ucca : 3 ; __u8 region_mask ; __u8 rpc_scheme ; } ;
struct request_sense { __u8 error_code : 7 ; __u8 valid : 1 ; __u8 segment_number ; __u8 sense_key : 4 ; __u8 reserved2 : 1 ; __u8 ili : 1 ; __u8 reserved1 : 2 ; __u8 information [ 4 ] ; __u8 add_sense_len ; __u8 command_info [ 4 ] ; __u8 asc ; __u8 ascq ; __u8 fruc ; __u8 sks [ 3 ] ; __u8 asb [ 46 ] ; } ;
struct feature_header { __u32 data_len ; __u8 reserved1 ; __u8 reserved2 ; __u16 curr_profile ; } ;
struct cdrom_device_info { struct cdrom_device_ops * ops ; struct list_head list ; struct gendisk * disk ; void * handle ; int mask ; int speed ; int capacity ; unsigned int options : 30 ; unsigned mc_flags : 2 ; unsigned int vfs_events ; unsigned int ioctl_events ; int use_count ; char name [ 20 ] ; __u8 sanyo_slot : 2 ; __u8 keeplocked : 1 ; __u8 reserved : 5 ; int cdda_method ; __u8 last_sense ; __u8 media_written ; unsigned short mmc3_profile ; int for_data ; int ( * exit ) ( struct cdrom_device_info * ) ; int mrw_mode_page ; } ;
struct cdrom_device_ops { int ( * open ) ( struct cdrom_device_info * , int ) ; void ( * release ) ( struct cdrom_device_info * ) ; int ( * drive_status ) ( struct cdrom_device_info * , int ) ; unsigned int ( * check_events ) ( struct cdrom_device_info * cdi , unsigned int clearing , int slot ) ; int ( * media_changed ) ( struct cdrom_device_info * , int ) ; int ( * tray_move ) ( struct cdrom_device_info * , int ) ; int ( * lock_door ) ( struct cdrom_device_info * , int ) ; int ( * select_speed ) ( struct cdrom_device_info * , int ) ; int ( * select_disc ) ( struct cdrom_device_info * , int ) ; int ( * get_last_session ) ( struct cdrom_device_info * , struct cdrom_multisession * ) ; int ( * get_mcn ) ( struct cdrom_device_info * , struct cdrom_mcn * ) ; int ( * reset ) ( struct cdrom_device_info * ) ; int ( * audio_ioctl ) ( struct cdrom_device_info * , unsigned int , void * ) ; const int capability ; int n_minors ; int ( * generic_packet ) ( struct cdrom_device_info * , struct packet_command * ) ; } ;
typedef struct { int data ; int audio ; int cdi ; int xa ; long error ; } tracktype ;
struct cdrom_mechstat_header { __u8 curslot : 5 ; __u8 changer_state : 2 ; __u8 fault : 1 ; __u8 reserved1 : 4 ; __u8 door_open : 1 ; __u8 mech_state : 3 ; __u8 curlba [ 3 ] ; __u8 nslots ; __u16 slot_tablelen ; } ;
struct cdrom_slot { __u8 change : 1 ; __u8 reserved1 : 6 ; __u8 disc_present : 1 ; __u8 reserved2 [ 3 ] ; } ;
struct modesel_head { __u8 reserved1 ; __u8 medium ; __u8 reserved2 ; __u8 block_desc_length ; __u8 density ; __u8 number_of_blocks_hi ; __u8 number_of_blocks_med ; __u8 number_of_blocks_lo ; __u8 reserved3 ; __u8 block_length_hi ; __u8 block_length_med ; __u8 block_length_lo ; } ;
struct media_event_desc { __u8 media_event_code : 4 ; __u8 reserved1 : 4 ; __u8 door_open : 1 ; __u8 media_present : 1 ; __u8 reserved2 : 6 ; __u8 start_slot ; __u8 end_slot ; } ;
typedef void ( * ata_qc_cb_t ) ( struct ata_queued_cmd * qc ) ;
typedef int ( * ata_prereset_fn_t ) ( struct ata_link * link , unsigned long deadline ) ;
typedef int ( * ata_reset_fn_t ) ( struct ata_link * link , unsigned int * classes , unsigned long deadline ) ;
typedef void ( * ata_postreset_fn_t ) ( struct ata_link * link , unsigned int * classes ) ;
struct ata_ering_entry { unsigned int eflags ; unsigned int err_mask ; u64 timestamp ; } ;
struct ata_eh_info { struct ata_device * dev ; u32 serror ; unsigned int err_mask ; unsigned int action ; unsigned int dev_action [ ATA_MAX_DEVICES ] ; unsigned int flags ; unsigned int probe_mask ; char desc [ ATA_EH_DESC_LEN ] ; int desc_len ; } ;
struct ata_acpi_drive { u32 pio ; u32 dma ; } __attribute__ ( ( packed ) ) ;
struct input_id { __u16 bustype ; __u16 vendor ; __u16 product ; __u16 version ; } ;
struct input_absinfo { __s32 value ; __s32 minimum ; __s32 maximum ; __s32 fuzz ; __s32 flat ; __s32 resolution ; } ;
struct input_keymap_entry { __u8 flags ; __u8 len ; __u16 index ; __u32 keycode ; __u8 scancode [ 32 ] ; } ;
struct ff_replay { __u16 length ; __u16 delay ; } ;
struct ff_trigger { __u16 button ; __u16 interval ; } ;
struct ff_envelope { __u16 attack_length ; __u16 attack_level ; __u16 fade_length ; __u16 fade_level ; } ;
struct ff_condition_effect { __u16 right_saturation ; __u16 left_saturation ; __s16 right_coeff ; __s16 left_coeff ; __u16 deadband ; __s16 center ; } ;
struct ff_rumble_effect { __u16 strong_magnitude ; __u16 weak_magnitude ; } ;
struct input_value { __u16 type ; __u16 code ; __s32 value ; } ;
struct pnp_fixup { char id [ 7 ] ; void ( * quirk_function ) ( struct pnp_dev * dev ) ; } ;
struct phy_c45_device_ids { u32 devices_in_package ; u32 device_ids [ 8 ] ; } ;
struct phy_fixup { struct list_head list ; char bus_id [ 20 ] ; u32 phy_uid ; u32 phy_uid_mask ; int ( * run ) ( struct phy_device * phydev ) ; } ;
struct mb_cache_entry { struct list_head e_lru_list ; struct mb_cache * e_cache ; unsigned short e_used ; unsigned short e_queued ; struct block_device * e_bdev ; sector_t e_block ; struct list_head e_block_list ; struct { struct list_head o_list ; unsigned int o_key ; } e_index ; } ;
struct dm_dev ;
typedef int ( * dm_ctr_fn ) ( struct dm_target * target , unsigned int argc , char * * argv ) ;
typedef void ( * dm_dtr_fn ) ( struct dm_target * ti ) ;
typedef int ( * dm_map_fn ) ( struct dm_target * ti , struct bio * bio ) ;
typedef int ( * dm_map_request_fn ) ( struct dm_target * ti , struct request * clone , union map_info * map_context ) ;
typedef int ( * dm_endio_fn ) ( struct dm_target * ti , struct bio * bio , int error ) ;
typedef int ( * dm_request_endio_fn ) ( struct dm_target * ti , struct request * clone , int error , union map_info * map_context ) ;
typedef void ( * dm_presuspend_fn ) ( struct dm_target * ti ) ;
typedef void ( * dm_postsuspend_fn ) ( struct dm_target * ti ) ;
typedef int ( * dm_preresume_fn ) ( struct dm_target * ti ) ;
typedef void ( * dm_resume_fn ) ( struct dm_target * ti ) ;
typedef int ( * dm_status_fn ) ( struct dm_target * ti , status_type_t status_type , unsigned status_flags , char * result , unsigned maxlen ) ;
typedef int ( * dm_message_fn ) ( struct dm_target * ti , unsigned argc , char * * argv ) ;
typedef int ( * dm_ioctl_fn ) ( struct dm_target * ti , unsigned int cmd , unsigned long arg ) ;
typedef int ( * dm_merge_fn ) ( struct dm_target * ti , struct bvec_merge_data * bvm , struct bio_vec * biovec , int max_size ) ;
typedef void ( * dm_io_hints_fn ) ( struct dm_target * ti , struct queue_limits * limits ) ;
typedef int ( * dm_busy_fn ) ( struct dm_target * ti ) ;
struct dm_dev { struct block_device * bdev ; fmode_t mode ; char name [ 16 ] ; } ;
struct dm_target_callbacks { struct list_head list ; int ( * congested_fn ) ( struct dm_target_callbacks * , int ) ; } ;
struct ftrace_branch_data { const char * func ; const char * file ; unsigned line ; union { struct { unsigned long correct ; unsigned long incorrect ; } ; struct { unsigned long miss ; unsigned long hit ; } ; unsigned long miss_hit [ 2 ] ; } ; } ;
typedef __kernel_fd_set fd_set ;
typedef __kernel_dev_t dev_t ;
typedef __kernel_uid32_t uid_t ;
typedef __kernel_gid32_t gid_t ;
typedef phys_addr_t resource_size_t ;
struct text_poke_param { void * addr ; const void * opcode ; size_t len ; } ;
struct va_format { const char * fmt ; va_list * va ; } ;
struct user ;
struct pid ;
struct compat_timespec ;
struct exec_domain ;
typedef struct { pteval_t pte ; } pte_t ;
typedef struct pgprot { pgprotval_t pgprot ; } pgprot_t ;
typedef struct { pgdval_t pgd ; } pgd_t ;
typedef struct { pudval_t pud ; } pud_t ;
typedef struct { pmdval_t pmd ; } pmd_t ;
struct tss_struct ;
struct pv_init_ops { unsigned ( * patch ) ( u8 type , u16 clobber , void * insnbuf , unsigned long addr , unsigned len ) ; } ;
struct pv_cpu_ops { unsigned long ( * get_debugreg ) ( int regno ) ; void ( * set_debugreg ) ( int regno , unsigned long value ) ; void ( * clts ) ( void ) ; unsigned long ( * read_cr0 ) ( void ) ; void ( * write_cr0 ) ( unsigned long ) ; unsigned long ( * read_cr4_safe ) ( void ) ; unsigned long ( * read_cr4 ) ( void ) ; void ( * write_cr4 ) ( unsigned long ) ; unsigned long ( * read_cr8 ) ( void ) ; void ( * write_cr8 ) ( unsigned long ) ; void ( * load_tr_desc ) ( void ) ; void ( * load_gdt ) ( const struct desc_ptr * ) ; void ( * load_idt ) ( const struct desc_ptr * ) ; void ( * store_gdt ) ( struct desc_ptr * ) ; void ( * store_idt ) ( struct desc_ptr * ) ; void ( * set_ldt ) ( const void * desc , unsigned entries ) ; unsigned long ( * store_tr ) ( void ) ; void ( * load_tls ) ( struct thread_struct * t , unsigned int cpu ) ; void ( * load_gs_index ) ( unsigned int idx ) ; void ( * write_ldt_entry ) ( struct desc_struct * ldt , int entrynum , const void * desc ) ; void ( * write_gdt_entry ) ( struct desc_struct * , int entrynum , const void * desc , int size ) ; void ( * write_idt_entry ) ( gate_desc * , int entrynum , const gate_desc * gate ) ; void ( * alloc_ldt ) ( struct desc_struct * ldt , unsigned entries ) ; void ( * free_ldt ) ( struct desc_struct * ldt , unsigned entries ) ; void ( * load_sp0 ) ( struct tss_struct * tss , struct thread_struct * t ) ; void ( * set_iopl_mask ) ( unsigned mask ) ; void ( * wbinvd ) ( void ) ; void ( * io_delay ) ( void ) ; void ( * cpuid ) ( unsigned int * eax , unsigned int * ebx , unsigned int * ecx , unsigned int * edx ) ; u64 ( * read_msr ) ( unsigned int msr , int * err ) ; int ( * write_msr ) ( unsigned int msr , unsigned low , unsigned high ) ; u64 ( * read_tsc ) ( void ) ; u64 ( * read_pmc ) ( int counter ) ; unsigned long long ( * read_tscp ) ( unsigned int * aux ) ; void ( * irq_enable_sysexit ) ( void ) ; void ( * usergs_sysret64 ) ( void ) ; void ( * usergs_sysret32 ) ( void ) ; void ( * iret ) ( void ) ; void ( * swapgs ) ( void ) ; void ( * start_context_switch ) ( struct task_struct * prev ) ; void ( * end_context_switch ) ( struct task_struct * next ) ; } ;
struct kernel_vm86_struct { struct kernel_vm86_regs regs ; unsigned long flags ; unsigned long screen_bitmap ; unsigned long cpu_type ; struct revectored_struct int_revectored ; struct revectored_struct int21_revectored ; struct vm86plus_info_struct vm86plus ; struct pt_regs * regs32 ; } ;
struct static_key ;
struct exec_domain ;
struct exec_domain { const char * name ; handler_t handler ; unsigned char pers_low ; unsigned char pers_high ; unsigned long * signal_map ; unsigned long * signal_invmap ; struct map_segment * err_map ; struct map_segment * socktype_map ; struct map_segment * sockopt_map ; struct map_segment * af_map ; struct module * module ; struct exec_domain * next ; } ;
struct tss_struct { struct x86_hw_tss x86_tss ; unsigned long io_bitmap [ ( ( 65536 / 8 ) / sizeof ( long ) ) + 1 ] ; unsigned long stack [ 64 ] ; } __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ;
typedef atomic64_t atomic_long_t ;
struct client_extension { void * return_address_stack [ 8 ] ; unsigned return_stack_size ; void * exit_address ; void ( * iret_handler ) ( void ) ; interrupt_stack_frame pending ; } ;
typedef union { s32 lock ; s32 write ; } arch_rwlock_t ;
struct itimerspec { struct timespec it_interval ; struct timespec it_value ; } ;
struct itimerval { struct timeval it_interval ; struct timeval it_value ; } ;
struct itimerval ;
struct __wait_queue { unsigned int flags ; void * private_ ; wait_queue_func_t func ; struct list_head task_list ; } ;
struct nodemask_scratch { nodemask_t mask1 ; nodemask_t mask2 ; } ;
typedef void call_rcu_func_t ( struct callback_head * head , void ( * func ) ( struct callback_head * head ) ) ;
struct timex { unsigned int modes ; long offset ; long freq ; long maxerror ; long esterror ; int status ; long constant ; long precision ; long tolerance ; struct timeval time ; long tick ; long ppsfreq ; long jitter ; int shift ; long stabil ; long jitcnt ; long calcnt ; long errcnt ; long stbcnt ; int tai ; int : 32 ; int : 32 ; int : 32 ; int : 32 ; int : 32 ; int : 32 ; int : 32 ; int : 32 ; int : 32 ; int : 32 ; int : 32 ; } ;
struct apm_info { struct apm_bios_info bios ; unsigned short connection_version ; int get_power_status_broken ; int get_power_status_swabinminutes ; int allow_ints ; int forbid_idle ; int realmode_power_off ; int disabled ; } ;
struct e820map { __u32 nr_map ; struct e820entry map [ ( 128 + 3 * ( 1 << 6 ) ) ] ; } ;
struct x86_init_mapping { void ( * pagetable_reserve ) ( u64 start , u64 end ) ; } ;
struct local_apic { struct { unsigned int __reserved [ 4 ] ; } __reserved_01 ; struct { unsigned int __reserved [ 4 ] ; } __reserved_02 ; struct { unsigned int __reserved_1 : 24 , phys_apic_id : 4 , __reserved_2 : 4 ; unsigned int __reserved [ 3 ] ; } id ; const struct { unsigned int version : 8 , __reserved_1 : 8 , max_lvt : 8 , __reserved_2 : 8 ; unsigned int __reserved [ 3 ] ; } version ; struct { unsigned int __reserved [ 4 ] ; } __reserved_03 ; struct { unsigned int __reserved [ 4 ] ; } __reserved_04 ; struct { unsigned int __reserved [ 4 ] ; } __reserved_05 ; struct { unsigned int __reserved [ 4 ] ; } __reserved_06 ; struct { unsigned int priority : 8 , __reserved_1 : 24 ; unsigned int __reserved_2 [ 3 ] ; } tpr ; const struct { unsigned int priority : 8 , __reserved_1 : 24 ; unsigned int __reserved_2 [ 3 ] ; } apr ; const struct { unsigned int priority : 8 , __reserved_1 : 24 ; unsigned int __reserved_2 [ 3 ] ; } ppr ; struct { unsigned int eoi ; unsigned int __reserved [ 3 ] ; } eoi ; struct { unsigned int __reserved [ 4 ] ; } __reserved_07 ; struct { unsigned int __reserved_1 : 24 , logical_dest : 8 ; unsigned int __reserved_2 [ 3 ] ; } ldr ; struct { unsigned int __reserved_1 : 28 , model : 4 ; unsigned int __reserved_2 [ 3 ] ; } dfr ; struct { unsigned int spurious_vector : 8 , apic_enabled : 1 , focus_cpu : 1 , __reserved_2 : 22 ; unsigned int __reserved_3 [ 3 ] ; } svr ; struct { unsigned int bitfield ; unsigned int __reserved [ 3 ] ; } isr [ 8 ] ; struct { unsigned int bitfield ; unsigned int __reserved [ 3 ] ; } tmr [ 8 ] ; struct { unsigned int bitfield ; unsigned int __reserved [ 3 ] ; } irr [ 8 ] ; union { struct { unsigned int send_cs_error : 1 , receive_cs_error : 1 , send_accept_error : 1 , receive_accept_error : 1 , __reserved_1 : 1 , send_illegal_vector : 1 , receive_illegal_vector : 1 , illegal_register_address : 1 , __reserved_2 : 24 ; unsigned int __reserved_3 [ 3 ] ; } error_bits ; struct { unsigned int errors ; unsigned int __reserved_3 [ 3 ] ; } all_errors ; } esr ; struct { unsigned int __reserved [ 4 ] ; } __reserved_08 ; struct { unsigned int __reserved [ 4 ] ; } __reserved_09 ; struct { unsigned int __reserved [ 4 ] ; } __reserved_10 ; struct { unsigned int __reserved [ 4 ] ; } __reserved_11 ; struct { unsigned int __reserved [ 4 ] ; } __reserved_12 ; struct { unsigned int __reserved [ 4 ] ; } __reserved_13 ; struct { unsigned int __reserved [ 4 ] ; } __reserved_14 ; struct { unsigned int vector : 8 , delivery_mode : 3 , destination_mode : 1 , delivery_status : 1 , __reserved_1 : 1 , level : 1 , trigger : 1 , __reserved_2 : 2 , shorthand : 2 , __reserved_3 : 12 ; unsigned int __reserved_4 [ 3 ] ; } icr1 ; struct { union { unsigned int __reserved_1 : 24 , phys_dest : 4 , __reserved_2 : 4 ; unsigned int __reserved_3 : 24 , logical_dest : 8 ; } dest ; unsigned int __reserved_4 [ 3 ] ; } icr2 ; struct { unsigned int vector : 8 , __reserved_1 : 4 , delivery_status : 1 , __reserved_2 : 3 , mask : 1 , timer_mode : 1 , __reserved_3 : 14 ; unsigned int __reserved_4 [ 3 ] ; } lvt_timer ; struct { unsigned int vector : 8 , delivery_mode : 3 , __reserved_1 : 1 , delivery_status : 1 , __reserved_2 : 3 , mask : 1 , __reserved_3 : 15 ; unsigned int __reserved_4 [ 3 ] ; } lvt_thermal ; struct { unsigned int vector : 8 , delivery_mode : 3 , __reserved_1 : 1 , delivery_status : 1 , __reserved_2 : 3 , mask : 1 , __reserved_3 : 15 ; unsigned int __reserved_4 [ 3 ] ; } lvt_pc ; struct { unsigned int vector : 8 , delivery_mode : 3 , __reserved_1 : 1 , delivery_status : 1 , polarity : 1 , remote_irr : 1 , trigger : 1 , mask : 1 , __reserved_2 : 15 ; unsigned int __reserved_3 [ 3 ] ; } lvt_lint0 ; struct { unsigned int vector : 8 , delivery_mode : 3 , __reserved_1 : 1 , delivery_status : 1 , polarity : 1 , remote_irr : 1 , trigger : 1 , mask : 1 , __reserved_2 : 15 ; unsigned int __reserved_3 [ 3 ] ; } lvt_lint1 ; struct { unsigned int vector : 8 , __reserved_1 : 4 , delivery_status : 1 , __reserved_2 : 3 , mask : 1 , __reserved_3 : 15 ; unsigned int __reserved_4 [ 3 ] ; } lvt_error ; struct { unsigned int initial_count ; unsigned int __reserved_2 [ 3 ] ; } timer_icr ; const struct { unsigned int curr_count ; unsigned int __reserved_2 [ 3 ] ; } timer_ccr ; struct { unsigned int __reserved [ 4 ] ; } __reserved_16 ; struct { unsigned int __reserved [ 4 ] ; } __reserved_17 ; struct { unsigned int __reserved [ 4 ] ; } __reserved_18 ; struct { unsigned int __reserved [ 4 ] ; } __reserved_19 ; struct { unsigned int divisor : 4 , __reserved_1 : 28 ; unsigned int __reserved_2 [ 3 ] ; } timer_dcr ; struct { unsigned int __reserved [ 4 ] ; } __reserved_20 ; } __attribute__ ( ( packed ) ) ;
struct dev_pm_domain { struct dev_pm_ops ops ; } ;
struct vm_struct { struct vm_struct * next ; void * addr ; unsigned long size ; unsigned long flags ; struct page * * pages ; unsigned int nr_pages ; phys_addr_t phys_addr ; const void * caller ; } ;
typedef uint64_t * __guest_handle_uint64_t ;
typedef uint32_t * __guest_handle_uint32_t ;
struct trap_info { uint8_t vector ; uint8_t flags ; uint16_t cs ; unsigned long address ; } ;
struct iret_context { uint64_t rax , r11 , rcx , flags , rip , cs , rflags , rsp , ss ; } ;
struct mmuext_op { unsigned int cmd ; union { xen_pfn_t mfn ; unsigned long linear_addr ; } arg1 ; union { unsigned int nr_ents ; void * vcpumask ; } arg2 ; } ;
typedef uint16_t domid_t ;
struct mmu_update { uint64_t ptr ; uint64_t val ; } ;
struct vcpu_time_info { uint32_t version ; uint32_t pad0 ; uint64_t tsc_timestamp ; uint64_t system_time ; uint32_t tsc_to_system_mul ; int8_t tsc_shift ; int8_t pad1 [ 3 ] ; } ;
struct vcpu_info { uint8_t evtchn_upcall_pending ; uint8_t evtchn_upcall_mask ; unsigned long evtchn_pending_sel ; struct arch_vcpu_info arch ; struct pvclock_vcpu_time_info time ; } ;
typedef uint64_t cpumap_t ;
typedef uint8_t xen_domain_handle_t [ 16 ] ;
struct timecounter { const struct cyclecounter * cc ; cycle_t cycle_last ; u64 nsec ; } ;
struct pvclock_vsyscall_time_info { struct pvclock_vcpu_time_info pvti ; u32 migrate_count ; } __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ;
union IO_APIC_reg_00 { u32 raw ; struct { u32 __reserved_2 : 14 , LTS : 1 , delivery_type : 1 , __reserved_1 : 8 , ID : 8 ; } __attribute__ ( ( packed ) ) bits ; } ;
union IO_APIC_reg_01 { u32 raw ; struct { u32 version : 8 , __reserved_2 : 7 , PRQ : 1 , entries : 8 , __reserved_1 : 8 ; } __attribute__ ( ( packed ) ) bits ; } ;
union IO_APIC_reg_02 { u32 raw ; struct { u32 __reserved_2 : 24 , arbitration : 4 , __reserved_1 : 4 ; } __attribute__ ( ( packed ) ) bits ; } ;
union IO_APIC_reg_03 { u32 raw ; struct { u32 boot_DT : 1 , __reserved_1 : 31 ; } __attribute__ ( ( packed ) ) bits ; } ;
struct call_single_data { struct list_head list ; smp_call_func_t func ; void * info ; u16 flags ; u16 priv ; } ;
struct pcpu_alloc_info { size_t static_size ; size_t reserved_size ; size_t dyn_size ; size_t unit_size ; size_t atom_size ; size_t alloc_size ; size_t __ai_size ; int nr_groups ; struct pcpu_group_info groups [ ] ; } ;
struct __sysctl_args { int * name ; int nlen ; void * oldval ; size_t * oldlenp ; void * newval ; size_t newlen ; unsigned long __unused [ 4 ] ; } ;
struct nsproxy ;
struct user { struct user_regs_struct regs ; int u_fpvalid ; int pad0 ; struct user_i387_struct i387 ; unsigned long int u_tsize ; unsigned long int u_dsize ; unsigned long int u_ssize ; unsigned long start_code ; unsigned long start_stack ; long int signal ; int reserved ; int pad1 ; unsigned long u_ar0 ; struct user_i387_struct * u_fpstate ; unsigned long magic ; char u_comm [ 32 ] ; unsigned long u_debugreg [ 8 ] ; unsigned long error_code ; unsigned long fault_address ; } ;
struct user_xstateregs { struct { __u64 fpx_space [ 58 ] ; __u64 xstate_fx_sw [ 6 ] ; } i387 ; struct user_xsave_hdr xsave_hdr ; struct user_ymmh_regs ymmh ; } ;
struct attribute { const char * name ; umode_t mode ; } ;
struct kref { atomic_t refcount ; } ;
struct static_key { atomic_t enabled ; } ;
struct symsearch { const struct kernel_symbol * start , * stop ; const unsigned long * crcs ; enum { NOT_GPL_ONLY , GPL_ONLY , WILL_BE_GPL_ONLY , } licence ; bool unused ; } ;
struct pid { atomic_t count ; unsigned int level ; struct hlist_head tasks [ PIDTYPE_MAX ] ; struct callback_head rcu ; struct upid numbers [ 1 ] ; } ;
typedef struct __user_cap_header_struct { __u32 version ; int pid ; } * cap_user_header_t ;
typedef struct __user_cap_data_struct { __u32 effective ; __u32 permitted ; __u32 inheritable ; } * cap_user_data_t ;
typedef struct kernel_cap_struct { __u32 cap [ 2 ] ; } kernel_cap_t ;
struct fiemap { __u64 fm_start ; __u64 fm_length ; __u32 fm_flags ; __u32 fm_mapped_extents ; __u32 fm_extent_count ; __u32 fm_reserved ; struct fiemap_extent fm_extents [ 0 ] ; } ;
struct bio ;
struct bio { sector_t bi_sector ; struct bio * bi_next ; struct block_device * bi_bdev ; unsigned long bi_flags ; unsigned long bi_rw ; unsigned short bi_vcnt ; unsigned short bi_idx ; unsigned int bi_phys_segments ; unsigned int bi_size ; unsigned int bi_seg_front_size ; unsigned int bi_seg_back_size ; bio_end_io_t * bi_end_io ; void * bi_private ; struct io_context * bi_ioc ; struct cgroup_subsys_state * bi_css ; struct bio_integrity_payload * bi_integrity ; unsigned int bi_max_vecs ; atomic_t bi_cnt ; struct bio_vec * bi_io_vec ; struct bio_set * bi_pool ; struct bio_vec bi_inline_vecs [ 0 ] ; } ;
struct export_operations ;
struct poll_table_struct ;
struct kstatfs ;
struct swap_info_struct ;
struct buffer_head ;
typedef int ( get_block_t ) ( struct inode * inode , sector_t iblock , struct buffer_head * bh_result , int create ) ;
typedef struct fs_disk_quota { __s8 d_version ; __s8 d_flags ; __u16 d_fieldmask ; __u32 d_id ; __u64 d_blk_hardlimit ; __u64 d_blk_softlimit ; __u64 d_ino_hardlimit ; __u64 d_ino_softlimit ; __u64 d_bcount ; __u64 d_icount ; __s32 d_itimer ; __s32 d_btimer ; __u16 d_iwarns ; __u16 d_bwarns ; __s32 d_padding2 ; __u64 d_rtb_hardlimit ; __u64 d_rtb_softlimit ; __u64 d_rtbcount ; __s32 d_rtbtimer ; __u16 d_rtbwarns ; __s16 d_padding3 ; char d_padding4 [ 8 ] ; } fs_disk_quota_t ;
typedef struct fs_qfilestat { __u64 qfs_ino ; __u64 qfs_nblks ; __u32 qfs_nextents ; } fs_qfilestat_t ;
typedef __kernel_uid32_t projid_t ;
typedef __kernel_uid32_t qid_t ;
struct mem_dqblk { qsize_t dqb_bhardlimit ; qsize_t dqb_bsoftlimit ; qsize_t dqb_curspace ; qsize_t dqb_rsvspace ; qsize_t dqb_ihardlimit ; qsize_t dqb_isoftlimit ; qsize_t dqb_curinodes ; time_t dqb_btime ; time_t dqb_itime ; } ;
struct dquot_operations { int ( * write_dquot ) ( struct dquot * ) ; struct dquot * ( * alloc_dquot ) ( struct super_block * , int ) ; void ( * destroy_dquot ) ( struct dquot * ) ; int ( * acquire_dquot ) ( struct dquot * ) ; int ( * release_dquot ) ( struct dquot * ) ; int ( * mark_dirty ) ( struct dquot * ) ; int ( * write_info ) ( struct super_block * , int ) ; qsize_t * ( * get_reserved_space ) ( struct inode * ) ; } ;
struct writeback_control ;
struct iov_iter { const struct iovec * iov ; unsigned long nr_segs ; size_t iov_offset ; size_t count ; } ;
struct file_ra_state { unsigned long start ; unsigned int size ; unsigned int async_size ; unsigned int ra_pages ; unsigned int mmap_miss ; loff_t prev_pos ; } ;
struct block_device_operations ;
struct filename { const char * name ; const char * uptr ; struct audit_names * aname ; bool separate ; } ;
struct simple_transaction_argresp { ssize_t size ; char data [ 0 ] ; } ;
struct kcore_list { struct list_head list ; unsigned long addr ; size_t size ; int type ; } ;
struct vmcore { struct list_head list ; unsigned long long paddr ; unsigned long long size ; loff_t offset ; } ;
struct nsproxy ;
typedef __signalfn_t * __sighandler_t ;
typedef __restorefn_t * __sigrestore_t ;
struct sigpending { struct list_head list ; sigset_t signal ; } ;
struct pnp_card_device_id { __u8 id [ 8 ] ; kernel_ulong_t driver_data ; struct { __u8 id [ 8 ] ; } devs [ 8 ] ; } ;
struct pci_cap_saved_state { struct hlist_node next ; struct pci_cap_saved_data cap ; } ;
struct pci_ops { int ( * read ) ( struct pci_bus * bus , unsigned int devfn , int where , int size , u32 * val ) ; int ( * write ) ( struct pci_bus * bus , unsigned int devfn , int where , int size , u32 val ) ; } ;
struct scatterlist { unsigned long page_link ; unsigned int offset ; unsigned int length ; dma_addr_t dma_address ; unsigned int dma_length ; } ;
struct vm_region { struct rb_node vm_rb ; vm_flags_t vm_flags ; unsigned long vm_start ; unsigned long vm_end ; unsigned long vm_top ; unsigned long vm_pgoff ; struct file * vm_file ; int vm_usage ; bool vm_icache_flushed : 1 ; } ;
struct file_ra_state ;
struct writeback_control ;
struct kvec ;
typedef struct scatterlist * ( sg_alloc_fn ) ( unsigned int , gfp_t ) ;
struct sg_mapping_iter { struct page * page ; void * addr ; size_t length ; size_t consumed ; struct scatterlist * __sg ; unsigned int __nents ; unsigned int __offset ; unsigned int __flags ; } ;
struct scatterlist ;
struct scatterlist ;
struct pci_setup_rom { struct setup_data data ; uint16_t vendor ; uint16_t devid ; uint64_t pcilen ; unsigned long segment ; unsigned long bus ; unsigned long device ; unsigned long function ; uint8_t romdata [ 0 ] ; } ;
struct ipc64_perm { __kernel_key_t key ; __kernel_uid32_t uid ; __kernel_gid32_t gid ; __kernel_uid32_t cuid ; __kernel_gid32_t cgid ; __kernel_mode_t mode ; unsigned char __pad1 [ 4 - sizeof ( __kernel_mode_t ) ] ; unsigned short seq ; unsigned short __pad2 ; unsigned long __unused1 ; unsigned long __unused2 ; } ;
struct semid_ds { struct ipc_perm sem_perm ; __kernel_time_t sem_otime ; __kernel_time_t sem_ctime ; struct sem * sem_base ; struct sem_queue * sem_pending ; struct sem_queue * * sem_pending_last ; struct sem_undo * undo ; unsigned short sem_nsems ; } ;
struct rusage { struct timeval ru_utime ; struct timeval ru_stime ; long ru_maxrss ; long ru_ixrss ; long ru_idrss ; long ru_isrss ; long ru_minflt ; long ru_majflt ; long ru_nswap ; long ru_inblock ; long ru_oublock ; long ru_msgsnd ; long ru_msgrcv ; long ru_nsignals ; long ru_nvcsw ; long ru_nivcsw ; } ;
typedef int32_t key_serial_t ;
typedef uint32_t key_perm_t ;
struct exec_domain ;
struct nsproxy ;
struct kvec { void * iov_base ; size_t iov_len ; } ;
struct aio_ring { unsigned id ; unsigned nr ; unsigned head ; unsigned tail ; unsigned magic ; unsigned compat_features ; unsigned incompat_features ; unsigned header_length ; struct io_event io_events [ 0 ] ; } ;
struct sched_group_power { atomic_t ref ; unsigned int power , power_orig ; unsigned long next_update ; atomic_t nr_busy_cpus ; unsigned long cpumask [ 0 ] ; } ;
struct sched_group { struct sched_group * next ; atomic_t ref ; unsigned int group_weight ; struct sched_group_power * sgp ; unsigned long cpumask [ 0 ] ; } ;
struct sched_entity { struct load_weight load ; struct rb_node run_node ; struct list_head group_node ; unsigned int on_rq ; u64 exec_start ; u64 sum_exec_runtime ; u64 vruntime ; u64 prev_sum_exec_runtime ; u64 nr_migrations ; struct sched_statistics statistics ; struct sched_entity * parent ; struct cfs_rq * cfs_rq ; struct cfs_rq * my_q ; struct sched_avg avg ; } ;
struct irq_data ;
struct irq_data { unsigned int irq ; unsigned long hwirq ; unsigned int node ; unsigned int state_use_accessors ; struct irq_chip * chip ; struct irq_domain * domain ; void * handler_data ; void * chip_data ; struct msi_desc * msi_desc ; cpumask_var_t affinity ; } ;
struct irq_cfg { struct irq_pin_list * irq_2_pin ; cpumask_var_t domain ; cpumask_var_t old_domain ; u8 vector ; u8 move_in_progress : 1 ; struct irq_2_iommu irq_2_iommu ; } ;
struct irq_data ;
struct irqaction ;
struct irqaction { irq_handler_t handler ; void * dev_id ; void * percpu_dev_id ; struct irqaction * next ; irq_handler_t thread_fn ; struct task_struct * thread ; unsigned int irq ; unsigned int flags ; unsigned long thread_flags ; unsigned long thread_mask ; const char * name ; struct proc_dir_entry * dir ; } __attribute__ ( ( __aligned__ ( 1 << ( 6 ) ) ) ) ;
struct tasklet_struct { struct tasklet_struct * next ; unsigned long state ; atomic_t count ; void ( * func ) ( unsigned long ) ; unsigned long data ; } ;
struct miscdevice { int minor ; const char * name ; const struct file_operations * fops ; struct list_head list ; struct device * parent ; struct device * this_device ; const char * nodename ; umode_t mode ; } ;
struct dev_pm_qos { struct pm_qos_constraints latency ; struct pm_qos_flags flags ; struct dev_pm_qos_request * latency_req ; struct dev_pm_qos_request * flags_req ; } ;
struct data_chunk { size_t size ; size_t icg ; } ;
struct dma_chan { struct dma_device * device ; dma_cookie_t cookie ; dma_cookie_t completed_cookie ; int chan_id ; struct dma_chan_dev * dev ; struct list_head device_node ; struct dma_chan_percpu * local ; int client_count ; int table_count ; void * private_ ; } ;
struct dma_slave_config { enum dma_transfer_direction direction ; dma_addr_t src_addr ; dma_addr_t dst_addr ; enum dma_slave_buswidth src_addr_width ; enum dma_slave_buswidth dst_addr_width ; u32 src_maxburst ; u32 dst_maxburst ; bool device_fc ; unsigned int slave_id ; } ;
struct dma_tx_state { dma_cookie_t last ; dma_cookie_t used ; u32 residue ; } ;
struct pid ;
struct sockaddr { sa_family_t sa_family ; char sa_data [ 14 ] ; } ;
struct mmsghdr { struct msghdr msg_hdr ; unsigned int msg_len ; } ;
struct user32 { struct user_regs_struct32 regs ; int u_fpvalid ; struct user_i387_ia32_struct i387 ; __u32 u_tsize ; __u32 u_dsize ; __u32 u_ssize ; __u32 start_code ; __u32 start_stack ; __u32 signal ; int reserved ; __u32 u_ar0 ; __u32 u_fpstate ; __u32 magic ; char u_comm [ 32 ] ; int u_debugreg [ 8 ] ; } ;
typedef __kernel_fsid_t compat_fsid_t ;
struct compat_timespec { compat_time_t tv_sec ; s32 tv_nsec ; } ;
struct compat_timeval { compat_time_t tv_sec ; s32 tv_usec ; } ;
struct compat_stat { compat_dev_t st_dev ; u16 __pad1 ; compat_ino_t st_ino ; compat_mode_t st_mode ; compat_nlink_t st_nlink ; __compat_uid_t st_uid ; __compat_gid_t st_gid ; compat_dev_t st_rdev ; u16 __pad2 ; u32 st_size ; u32 st_blksize ; u32 st_blocks ; u32 st_atime ; u32 st_atime_nsec ; u32 st_mtime ; u32 st_mtime_nsec ; u32 st_ctime ; u32 st_ctime_nsec ; u32 __unused4 ; u32 __unused5 ; } ;
struct compat_flock { short l_type ; short l_whence ; compat_off_t l_start ; compat_off_t l_len ; compat_pid_t l_pid ; } ;
struct compat_flock64 { short l_type ; short l_whence ; compat_loff_t l_start ; compat_loff_t l_len ; compat_pid_t l_pid ; } __attribute__ ( ( packed ) ) ;
struct compat_ipc64_perm { compat_key_t key ; __compat_uid32_t uid ; __compat_gid32_t gid ; __compat_uid32_t cuid ; __compat_gid32_t cgid ; unsigned short mode ; unsigned short __pad1 ; unsigned short seq ; unsigned short __pad2 ; compat_ulong_t unused1 ; compat_ulong_t unused2 ; } ;
typedef __compat_uid32_t compat_uid_t ;
typedef __compat_gid32_t compat_gid_t ;
struct rusage ;
struct compat_utimbuf { compat_time_t actime ; compat_time_t modtime ; } ;
struct compat_tms { compat_clock_t tms_utime ; compat_clock_t tms_stime ; compat_clock_t tms_cutime ; compat_clock_t tms_cstime ; } ;
struct compat_iovec { compat_uptr_t iov_base ; compat_size_t iov_len ; } ;
struct compat_rlimit { compat_ulong_t rlim_cur ; compat_ulong_t rlim_max ; } ;
struct compat_dirent { u32 d_ino ; compat_off_t d_off ; u16 d_reclen ; char d_name [ 256 ] ; } ;
struct compat_ustat { compat_daddr_t f_tfree ; compat_ino_t f_tinode ; char f_fname [ 6 ] ; char f_fpack [ 6 ] ; } ;
struct compat_ifmap { compat_ulong_t mem_start ; compat_ulong_t mem_end ; unsigned short base_addr ; unsigned char irq ; unsigned char dma ; unsigned char port ; } ;
struct compat_if_settings { unsigned int type ; unsigned int size ; compat_uptr_t ifs_ifsu ; } ;
struct compat_ifconf { compat_int_t ifc_len ; compat_caddr_t ifcbuf ; } ;
struct compat_robust_list { compat_uptr_t next ; } ;
struct compat_statfs64 ;
struct poll_table_struct ;
struct sockaddr ;
struct kvec ;
struct ts_config ;
struct ts_ops { const char * name ; struct ts_config * ( * init ) ( const void * , unsigned int , gfp_t , int ) ; unsigned int ( * find ) ( struct ts_config * , struct ts_state * ) ; void ( * destroy ) ( struct ts_config * ) ; void * ( * get_pattern ) ( struct ts_config * ) ; unsigned int ( * get_pattern_len ) ( struct ts_config * ) ; struct module * owner ; struct list_head list ; } ;
struct ts_config { struct ts_ops * ops ; int flags ; unsigned int ( * get_next_block ) ( unsigned int consumed , const u8 * * dst , struct ts_config * conf , struct ts_state * state ) ; void ( * finish ) ( struct ts_config * conf , struct ts_state * state ) ; } ;
struct scatterlist ;
struct nf_conntrack { atomic_t use ; } ;
struct nf_bridge_info { atomic_t use ; unsigned int mask ; struct net_device * physindev ; struct net_device * physoutdev ; unsigned long data [ 32 / sizeof ( unsigned long ) ] ; } ;
struct ethhdr { unsigned char h_dest [ 6 ] ; unsigned char h_source [ 6 ] ; __be16 h_proto ; } __attribute__ ( ( packed ) ) ;
struct ethtool_tcpip4_spec { __be32 ip4src ; __be32 ip4dst ; __be16 psrc ; __be16 pdst ; __u8 tos ; } ;
struct ethtool_ah_espip4_spec { __be32 ip4src ; __be32 ip4dst ; __be32 spi ; __u8 tos ; } ;
struct ethtool_usrip4_spec { __be32 ip4src ; __be32 ip4dst ; __be32 l4_4_bytes ; __u8 tos ; __u8 ip_ver ; __u8 proto ; } ;
struct ethtool_flow_ext { __u8 padding [ 2 ] ; unsigned char h_dest [ 6 ] ; __be16 vlan_etype ; __be16 vlan_tci ; __be32 data [ 2 ] ; } ;
struct ethtool_gfeatures { __u32 cmd ; __u32 size ; struct ethtool_get_features_block features [ 0 ] ; } ;
struct ethtool_sfeatures { __u32 cmd ; __u32 size ; struct ethtool_set_features_block features [ 0 ] ; } ;
struct ethtool_ops { int ( * get_settings ) ( struct net_device * , struct ethtool_cmd * ) ; int ( * set_settings ) ( struct net_device * , struct ethtool_cmd * ) ; void ( * get_drvinfo ) ( struct net_device * , struct ethtool_drvinfo * ) ; int ( * get_regs_len ) ( struct net_device * ) ; void ( * get_regs ) ( struct net_device * , struct ethtool_regs * , void * ) ; void ( * get_wol ) ( struct net_device * , struct ethtool_wolinfo * ) ; int ( * set_wol ) ( struct net_device * , struct ethtool_wolinfo * ) ; u32 ( * get_msglevel ) ( struct net_device * ) ; void ( * set_msglevel ) ( struct net_device * , u32 ) ; int ( * nway_reset ) ( struct net_device * ) ; u32 ( * get_link ) ( struct net_device * ) ; int ( * get_eeprom_len ) ( struct net_device * ) ; int ( * get_eeprom ) ( struct net_device * , struct ethtool_eeprom * , u8 * ) ; int ( * set_eeprom ) ( struct net_device * , struct ethtool_eeprom * , u8 * ) ; int ( * get_coalesce ) ( struct net_device * , struct ethtool_coalesce * ) ; int ( * set_coalesce ) ( struct net_device * , struct ethtool_coalesce * ) ; void ( * get_ringparam ) ( struct net_device * , struct ethtool_ringparam * ) ; int ( * set_ringparam ) ( struct net_device * , struct ethtool_ringparam * ) ; void ( * get_pauseparam ) ( struct net_device * , struct ethtool_pauseparam * ) ; int ( * set_pauseparam ) ( struct net_device * , struct ethtool_pauseparam * ) ; void ( * self_test ) ( struct net_device * , struct ethtool_test * , u64 * ) ; void ( * get_strings ) ( struct net_device * , u32 stringset , u8 * ) ; int ( * set_phys_id ) ( struct net_device * , enum ethtool_phys_id_state ) ; void ( * get_ethtool_stats ) ( struct net_device * , struct ethtool_stats * , u64 * ) ; int ( * begin ) ( struct net_device * ) ; void ( * complete ) ( struct net_device * ) ; u32 ( * get_priv_flags ) ( struct net_device * ) ; int ( * set_priv_flags ) ( struct net_device * , u32 ) ; int ( * get_sset_count ) ( struct net_device * , int ) ; int ( * get_rxnfc ) ( struct net_device * , struct ethtool_rxnfc * , u32 * rule_locs ) ; int ( * set_rxnfc ) ( struct net_device * , struct ethtool_rxnfc * ) ; int ( * flash_device ) ( struct net_device * , struct ethtool_flash * ) ; int ( * reset ) ( struct net_device * , u32 * ) ; u32 ( * get_rxfh_indir_size ) ( struct net_device * ) ; int ( * get_rxfh_indir ) ( struct net_device * , u32 * ) ; int ( * set_rxfh_indir ) ( struct net_device * , const u32 * ) ; void ( * get_channels ) ( struct net_device * , struct ethtool_channels * ) ; int ( * set_channels ) ( struct net_device * , struct ethtool_channels * ) ; int ( * get_dump_flag ) ( struct net_device * , struct ethtool_dump * ) ; int ( * get_dump_data ) ( struct net_device * , struct ethtool_dump * , void * ) ; int ( * set_dump ) ( struct net_device * , struct ethtool_dump * ) ; int ( * get_ts_info ) ( struct net_device * , struct ethtool_ts_info * ) ; int ( * get_module_info ) ( struct net_device * , struct ethtool_modinfo * ) ; int ( * get_module_eeprom ) ( struct net_device * , struct ethtool_eeprom * , u8 * ) ; int ( * get_eee ) ( struct net_device * , struct ethtool_eee * ) ; int ( * set_eee ) ( struct net_device * , struct ethtool_eee * ) ; } ;
struct netns_frags { int nqueues ; atomic_t mem ; struct list_head lru_list ; int timeout ; int high_thresh ; int low_thresh ; } ;
struct dst_entry ;
struct in_addr { __be32 s_addr ; } ;
struct ip_mreq_source { __be32 imr_multiaddr ; __be32 imr_interface ; __be32 imr_sourceaddr ; } ;
struct ip_msfilter { __be32 imsf_multiaddr ; __be32 imsf_interface ; __u32 imsf_fmode ; __u32 imsf_numsrc ; __be32 imsf_slist [ 1 ] ; } ;
struct group_req { __u32 gr_interface ; struct __kernel_sockaddr_storage gr_group ; } ;
struct group_source_req { __u32 gsr_interface ; struct __kernel_sockaddr_storage gsr_group ; struct __kernel_sockaddr_storage gsr_source ; } ;
struct group_filter { __u32 gf_interface ; struct __kernel_sockaddr_storage gf_group ; __u32 gf_fmode ; __u32 gf_numsrc ; struct __kernel_sockaddr_storage gf_slist [ 1 ] ; } ;
typedef unsigned int nf_hookfn ( unsigned int hooknum , struct sk_buff * skb , const struct net_device * in , const struct net_device * out , int ( * okfn ) ( struct sk_buff * ) ) ;
struct nf_sockopt_ops { struct list_head list ; u_int8_t pf ; int set_optmin ; int set_optmax ; int ( * set ) ( struct sock * sk , int optval , void * user , unsigned int len ) ; int ( * compat_set ) ( struct sock * sk , int optval , void * user , unsigned int len ) ; int get_optmin ; int get_optmax ; int ( * get ) ( struct sock * sk , int optval , void * user , int * len ) ; int ( * compat_get ) ( struct sock * sk , int optval , void * user , int * len ) ; struct module * owner ; } ;
typedef struct flow_cache_object * ( * flow_resolve_t ) ( struct net * net , const struct flowi * key , u16 family , u8 dir , struct flow_cache_object * oldobj , void * ctx ) ;
struct nfq_ct_nat_hook { void ( * seq_adjust ) ( struct sk_buff * skb , struct nf_conn * ct , u32 ctinfo , int off ) ; } ;
struct netns_xt { struct list_head tables [ NFPROTO_NUMPROTO ] ; bool notrack_deprecated_warning ; struct ebt_table * broute_table ; struct ebt_table * frame_filter ; struct ebt_table * frame_nat ; } ;
struct ip_ct_tcp_state { u_int32_t td_end ; u_int32_t td_maxend ; u_int32_t td_maxwin ; u_int32_t td_maxack ; u_int8_t td_scale ; u_int8_t flags ; } ;
struct nf_ip_net { struct nf_generic_net generic ; struct nf_tcp_net tcp ; struct nf_udp_net udp ; struct nf_icmp_net icmp ; struct nf_icmp_net icmpv6 ; struct ctl_table_header * ctl_table_header ; struct ctl_table * ctl_table ; } ;
struct pernet_operations { struct list_head list ; int ( * init ) ( struct net * net ) ; void ( * exit ) ( struct net * net ) ; void ( * exit_batch ) ( struct list_head * net_exit_list ) ; int * id ; size_t size ; } ;
struct dcb_app_type { int ifindex ; struct dcb_app app ; struct list_head list ; u8 dcbx ; } ;
struct dcbnl_rtnl_ops { int ( * ieee_getets ) ( struct net_device * , struct ieee_ets * ) ; int ( * ieee_setets ) ( struct net_device * , struct ieee_ets * ) ; int ( * ieee_getmaxrate ) ( struct net_device * , struct ieee_maxrate * ) ; int ( * ieee_setmaxrate ) ( struct net_device * , struct ieee_maxrate * ) ; int ( * ieee_getpfc ) ( struct net_device * , struct ieee_pfc * ) ; int ( * ieee_setpfc ) ( struct net_device * , struct ieee_pfc * ) ; int ( * ieee_getapp ) ( struct net_device * , struct dcb_app * ) ; int ( * ieee_setapp ) ( struct net_device * , struct dcb_app * ) ; int ( * ieee_delapp ) ( struct net_device * , struct dcb_app * ) ; int ( * ieee_peer_getets ) ( struct net_device * , struct ieee_ets * ) ; int ( * ieee_peer_getpfc ) ( struct net_device * , struct ieee_pfc * ) ; u8 ( * getstate ) ( struct net_device * ) ; u8 ( * setstate ) ( struct net_device * , u8 ) ; void ( * getpermhwaddr ) ( struct net_device * , u8 * ) ; void ( * setpgtccfgtx ) ( struct net_device * , int , u8 , u8 , u8 , u8 ) ; void ( * setpgbwgcfgtx ) ( struct net_device * , int , u8 ) ; void ( * setpgtccfgrx ) ( struct net_device * , int , u8 , u8 , u8 , u8 ) ; void ( * setpgbwgcfgrx ) ( struct net_device * , int , u8 ) ; void ( * getpgtccfgtx ) ( struct net_device * , int , u8 * , u8 * , u8 * , u8 * ) ; void ( * getpgbwgcfgtx ) ( struct net_device * , int , u8 * ) ; void ( * getpgtccfgrx ) ( struct net_device * , int , u8 * , u8 * , u8 * , u8 * ) ; void ( * getpgbwgcfgrx ) ( struct net_device * , int , u8 * ) ; void ( * setpfccfg ) ( struct net_device * , int , u8 ) ; void ( * getpfccfg ) ( struct net_device * , int , u8 * ) ; u8 ( * setall ) ( struct net_device * ) ; u8 ( * getcap ) ( struct net_device * , int , u8 * ) ; int ( * getnumtcs ) ( struct net_device * , int , u8 * ) ; int ( * setnumtcs ) ( struct net_device * , int , u8 ) ; u8 ( * getpfcstate ) ( struct net_device * ) ; void ( * setpfcstate ) ( struct net_device * , u8 ) ; void ( * getbcncfg ) ( struct net_device * , int , u32 * ) ; void ( * setbcncfg ) ( struct net_device * , int , u32 ) ; void ( * getbcnrp ) ( struct net_device * , int , u8 * ) ; void ( * setbcnrp ) ( struct net_device * , int , u8 ) ; u8 ( * setapp ) ( struct net_device * , u8 , u16 , u8 ) ; u8 ( * getapp ) ( struct net_device * , u8 , u16 ) ; u8 ( * getfeatcfg ) ( struct net_device * , int , u8 * ) ; u8 ( * setfeatcfg ) ( struct net_device * , int , u8 ) ; u8 ( * getdcbx ) ( struct net_device * ) ; u8 ( * setdcbx ) ( struct net_device * , u8 ) ; int ( * peer_getappinfo ) ( struct net_device * , struct dcb_peer_app_info * , u16 * ) ; int ( * peer_getapptable ) ( struct net_device * , struct dcb_app * ) ; int ( * cee_peer_getpg ) ( struct net_device * , struct cee_pg * ) ; int ( * cee_peer_getpfc ) ( struct net_device * , struct cee_pfc * ) ; } ;
struct idr_layer { unsigned long bitmap ; struct idr_layer * ary [ 1 << 6 ] ; int count ; int layer ; struct callback_head callback_head ; } ;
struct xattr { char * name ; void * value ; size_t value_len ; } ;
struct simple_xattr { struct list_head list ; char * name ; size_t size ; char value [ 0 ] ; } ;
struct css_set { atomic_t refcount ; struct hlist_node hlist ; struct list_head tasks ; struct list_head cg_links ; struct cgroup_subsys_state * subsys [ CGROUP_SUBSYS_COUNT ] ; struct callback_head callback_head ; } ;
struct cgroup_map_cb { int ( * fill ) ( struct cgroup_map_cb * cb , const char * key , u64 value ) ; void * state ; } ;
struct xattr ;
struct sockaddr ;
struct dst_entry ;
struct nsproxy { atomic_t count ; struct uts_namespace * uts_ns ; struct ipc_namespace * ipc_ns ; struct mnt_namespace * mnt_ns ; struct pid_namespace * pid_ns ; struct net * net_ns ; } ;
struct nlmsgerr { int error ; struct nlmsghdr msg ; } ;
struct sockaddr_pkt { unsigned short spkt_family ; unsigned char spkt_device [ 14 ] ; __be16 spkt_protocol ; } ;
struct sockaddr_ll { unsigned short sll_family ; __be16 sll_protocol ; int sll_ifindex ; unsigned short sll_hatype ; unsigned char sll_pkttype ; unsigned char sll_halen ; unsigned char sll_addr [ 8 ] ; } ;
struct tpacket_hdr_v1 { __u32 block_status ; __u32 num_pkts ; __u32 offset_to_first_pkt ; __u32 blk_len ; __u64 __attribute__ ( ( aligned ( 8 ) ) ) seq_num ; struct tpacket_bd_ts ts_first_pkt , ts_last_pkt ; } ;
struct ifla_vxlan_port_range { __be16 low ; __be16 high ; } ;
struct neigh_parms ;
struct netdev_hw_addr { struct list_head list ; unsigned char addr [ 32 ] ; unsigned char type ; bool synced ; bool global_use ; int refcount ; struct callback_head callback_head ; } ;
struct rps_map { unsigned int len ; struct callback_head rcu ; u16 cpus [ 0 ] ; } ;
struct xps_map { unsigned int len ; unsigned int alloc_len ; struct callback_head rcu ; u16 queues [ 0 ] ; } ;
struct xps_dev_maps { struct callback_head rcu ; struct xps_map * cpu_map [ 0 ] ; } ;
struct vlan_hdr { __be16 h_vlan_TCI ; __be16 h_vlan_encapsulated_proto ; } ;
struct vlan_ethhdr { unsigned char h_dest [ 6 ] ; unsigned char h_source [ 6 ] ; __be16 h_vlan_proto ; __be16 h_vlan_TCI ; __be16 h_vlan_encapsulated_proto ; } ;
struct firmware { size_t size ; const u8 * data ; struct page * * pages ; void * priv ; } ;
struct iphdr { __u8 ihl : 4 , version : 4 ; __u8 tos ; __be16 tot_len ; __be16 id ; __be16 frag_off ; __u8 ttl ; __u8 protocol ; __sum16 check ; __be32 saddr ; __be32 daddr ; } ;
struct ip_auth_hdr { __u8 nexthdr ; __u8 hdrlen ; __be16 reserved ; __be32 spi ; __be32 seq_no ; __u8 auth_data [ 0 ] ; } ;
struct ip_esp_hdr { __be32 spi ; __be32 seq_no ; __u8 enc_data [ 0 ] ; } ;
struct ip_comp_hdr { __u8 nexthdr ; __u8 flags ; __be16 cpi ; } ;
struct compat_sock_fprog { u16 len ; compat_uptr_t filter ; } ;
struct sk_filter { atomic_t refcnt ; unsigned int len ; unsigned int ( * bpf_func ) ( const struct sk_buff * skb , const struct sock_filter * filter ) ; struct callback_head rcu ; struct sock_filter insns [ 0 ] ; } ;
struct poll_table_struct ;
typedef u16 ( * rtnl_calcit_func ) ( struct sk_buff * , struct nlmsghdr * ) ;
struct neigh_parms { struct net * net ; struct net_device * dev ; struct neigh_parms * next ; int ( * neigh_setup ) ( struct neighbour * ) ; void ( * neigh_cleanup ) ( struct neighbour * ) ; struct neigh_table * tbl ; void * sysctl_table ; int dead ; atomic_t refcnt ; struct callback_head callback_head ; int base_reachable_time ; int retrans_time ; int gc_staletime ; int reachable_time ; int delay_probe_time ; int queue_len_bytes ; int ucast_probes ; int app_probes ; int mcast_probes ; int anycast_delay ; int proxy_delay ; int proxy_qlen ; int locktime ; } ;
struct neigh_hash_table { struct neighbour * * hash_buckets ; unsigned int hash_shift ; __u32 hash_rnd [ 4 ] ; struct callback_head rcu ; } ;
struct dst_entry { struct callback_head callback_head ; struct dst_entry * child ; struct net_device * dev ; struct dst_ops * ops ; unsigned long _metrics ; unsigned long expires ; struct dst_entry * path ; struct dst_entry * from ; struct xfrm_state * xfrm ; int ( * input ) ( struct sk_buff * ) ; int ( * output ) ( struct sk_buff * ) ; unsigned short flags ; unsigned short pending_confirm ; short error ; short obsolete ; unsigned short header_len ; unsigned short trailer_len ; __u32 tclassid ; long __pad_to_align_refcnt [ 2 ] ; atomic_t __refcnt ; int __use ; unsigned long lastuse ; union { struct dst_entry * next ; struct rtable * rt_next ; struct rt6_info * rt6_next ; struct dn_route * dn_next ; } ; } ;
struct sock_iocb { struct list_head list ; int flags ; int size ; struct socket * sock ; struct sock * sk ; struct scm_cookie * scm ; struct msghdr * msg , async_msg ; struct kiocb * kiocb ; } ;
struct dst_entry ;
struct ip_options { __be32 faddr ; __be32 nexthop ; unsigned char optlen ; unsigned char srr ; unsigned char rr ; unsigned char ts ; unsigned char is_strictroute : 1 , srr_is_hit : 1 , is_changed : 1 , rr_needaddr : 1 , ts_needtime : 1 , ts_needaddr : 1 ; unsigned char router_alert ; unsigned char cipso ; unsigned char __pad2 ; unsigned char __data [ 0 ] ; } ;
struct inet_request_sock { struct request_sock req ; u16 inet6_rsk_offset ; __be16 loc_port ; __be32 loc_addr ; __be32 rmt_addr ; __be16 rmt_port ; ; u16 snd_wscale : 4 , rcv_wscale : 4 , tstamp_ok : 1 , sack_ok : 1 , wscale_ok : 1 , ecn_ok : 1 , acked : 1 , no_srccheck : 1 ; ; struct ip_options_rcu * opt ; } ;
struct inet_cork { unsigned int flags ; __be32 addr ; struct ip_options * opt ; unsigned int fragsize ; int length ; struct dst_entry * dst ; u8 tx_flags ; } ;
struct tcphdr { __be16 source ; __be16 dest ; __be32 seq ; __be32 ack_seq ; __u16 res1 : 4 , doff : 4 , fin : 1 , syn : 1 , rst : 1 , psh : 1 , ack : 1 , urg : 1 , ece : 1 , cwr : 1 ; __be16 window ; __sum16 check ; __be16 urg_ptr ; } ;
enum { TCP_FLAG_CWR = ( ( __be32 ) ( ( __u32 ) ( ( ( ( __u32 ) ( ( 0x00800000 ) ) & ( __u32 ) 0x000000ffUL ) << 24 ) | ( ( ( __u32 ) ( ( 0x00800000 ) ) & ( __u32 ) 0x0000ff00UL ) << 8 ) | ( ( ( __u32 ) ( ( 0x00800000 ) ) & ( __u32 ) 0x00ff0000UL ) >> 8 ) | ( ( ( __u32 ) ( ( 0x00800000 ) ) & ( __u32 ) 0xff000000UL ) >> 24 ) ) ) ) , TCP_FLAG_ECE = ( ( __be32 ) ( ( __u32 ) ( ( ( ( __u32 ) ( ( 0x00400000 ) ) & ( __u32 ) 0x000000ffUL ) << 24 ) | ( ( ( __u32 ) ( ( 0x00400000 ) ) & ( __u32 ) 0x0000ff00UL ) << 8 ) | ( ( ( __u32 ) ( ( 0x00400000 ) ) & ( __u32 ) 0x00ff0000UL ) >> 8 ) | ( ( ( __u32 ) ( ( 0x00400000 ) ) & ( __u32 ) 0xff000000UL ) >> 24 ) ) ) ) , TCP_FLAG_URG = ( ( __be32 ) ( ( __u32 ) ( ( ( ( __u32 ) ( ( 0x00200000 ) ) & ( __u32 ) 0x000000ffUL ) << 24 ) | ( ( ( __u32 ) ( ( 0x00200000 ) ) & ( __u32 ) 0x0000ff00UL ) << 8 ) | ( ( ( __u32 ) ( ( 0x00200000 ) ) & ( __u32 ) 0x00ff0000UL ) >> 8 ) | ( ( ( __u32 ) ( ( 0x00200000 ) ) & ( __u32 ) 0xff000000UL ) >> 24 ) ) ) ) , TCP_FLAG_ACK = ( ( __be32 ) ( ( __u32 ) ( ( ( ( __u32 ) ( ( 0x00100000 ) ) & ( __u32 ) 0x000000ffUL ) << 24 ) | ( ( ( __u32 ) ( ( 0x00100000 ) ) & ( __u32 ) 0x0000ff00UL ) << 8 ) | ( ( ( __u32 ) ( ( 0x00100000 ) ) & ( __u32 ) 0x00ff0000UL ) >> 8 ) | ( ( ( __u32 ) ( ( 0x00100000 ) ) & ( __u32 ) 0xff000000UL ) >> 24 ) ) ) ) , TCP_FLAG_PSH = ( ( __be32 ) ( ( __u32 ) ( ( ( ( __u32 ) ( ( 0x00080000 ) ) & ( __u32 ) 0x000000ffUL ) << 24 ) | ( ( ( __u32 ) ( ( 0x00080000 ) ) & ( __u32 ) 0x0000ff00UL ) << 8 ) | ( ( ( __u32 ) ( ( 0x00080000 ) ) & ( __u32 ) 0x00ff0000UL ) >> 8 ) | ( ( ( __u32 ) ( ( 0x00080000 ) ) & ( __u32 ) 0xff000000UL ) >> 24 ) ) ) ) , TCP_FLAG_RST = ( ( __be32 ) ( ( __u32 ) ( ( ( ( __u32 ) ( ( 0x00040000 ) ) & ( __u32 ) 0x000000ffUL ) << 24 ) | ( ( ( __u32 ) ( ( 0x00040000 ) ) & ( __u32 ) 0x0000ff00UL ) << 8 ) | ( ( ( __u32 ) ( ( 0x00040000 ) ) & ( __u32 ) 0x00ff0000UL ) >> 8 ) | ( ( ( __u32 ) ( ( 0x00040000 ) ) & ( __u32 ) 0xff000000UL ) >> 24 ) ) ) ) , TCP_FLAG_SYN = ( ( __be32 ) ( ( __u32 ) ( ( ( ( __u32 ) ( ( 0x00020000 ) ) & ( __u32 ) 0x000000ffUL ) << 24 ) | ( ( ( __u32 ) ( ( 0x00020000 ) ) & ( __u32 ) 0x0000ff00UL ) << 8 ) | ( ( ( __u32 ) ( ( 0x00020000 ) ) & ( __u32 ) 0x00ff0000UL ) >> 8 ) | ( ( ( __u32 ) ( ( 0x00020000 ) ) & ( __u32 ) 0xff000000UL ) >> 24 ) ) ) ) , TCP_FLAG_FIN = ( ( __be32 ) ( ( __u32 ) ( ( ( ( __u32 ) ( ( 0x00010000 ) ) & ( __u32 ) 0x000000ffUL ) << 24 ) | ( ( ( __u32 ) ( ( 0x00010000 ) ) & ( __u32 ) 0x0000ff00UL ) << 8 ) | ( ( ( __u32 ) ( ( 0x00010000 ) ) & ( __u32 ) 0x00ff0000UL ) >> 8 ) | ( ( ( __u32 ) ( ( 0x00010000 ) ) & ( __u32 ) 0xff000000UL ) >> 24 ) ) ) ) , TCP_RESERVED_BITS = ( ( __be32 ) ( ( __u32 ) ( ( ( ( __u32 ) ( ( 0x0F000000 ) ) & ( __u32 ) 0x000000ffUL ) << 24 ) | ( ( ( __u32 ) ( ( 0x0F000000 ) ) & ( __u32 ) 0x0000ff00UL ) << 8 ) | ( ( ( __u32 ) ( ( 0x0F000000 ) ) & ( __u32 ) 0x00ff0000UL ) >> 8 ) | ( ( ( __u32 ) ( ( 0x0F000000 ) ) & ( __u32 ) 0xff000000UL ) >> 24 ) ) ) ) , TCP_DATA_OFFSET = ( ( __be32 ) ( ( __u32 ) ( ( ( ( __u32 ) ( ( 0xF0000000 ) ) & ( __u32 ) 0x000000ffUL ) << 24 ) | ( ( ( __u32 ) ( ( 0xF0000000 ) ) & ( __u32 ) 0x0000ff00UL ) << 8 ) | ( ( ( __u32 ) ( ( 0xF0000000 ) ) & ( __u32 ) 0x00ff0000UL ) >> 8 ) | ( ( ( __u32 ) ( ( 0xF0000000 ) ) & ( __u32 ) 0xff000000UL ) >> 24 ) ) ) ) } ;
struct tcp_md5sig { struct __kernel_sockaddr_storage tcpm_addr ; __u16 __tcpm_pad1 ; __u16 tcpm_keylen ; __u32 __tcpm_pad2 ; __u8 tcpm_key [ 80 ] ; } ;
struct tcp_sack_block_wire { __be32 start_seq ; __be32 end_seq ; } ;
struct udphdr { __be16 source ; __be16 dest ; __be16 len ; __sum16 check ; } ;
struct tc_tbf_qopt { struct tc_ratespec rate ; struct tc_ratespec peakrate ; __u32 limit ; __u32 buffer ; __u32 mtu ; } ;
struct tc_htb_opt { struct tc_ratespec rate ; struct tc_ratespec ceil ; __u32 buffer ; __u32 cbuffer ; __u32 quantum ; __u32 level ; __u32 prio ; } ;
struct tc_police { __u32 index ; int action ; __u32 limit ; __u32 burst ; __u32 mtu ; struct tc_ratespec rate ; struct tc_ratespec peakrate ; int refcnt ; int bindcnt ; __u32 capab ; } ;
struct tc_u32_key { __be32 mask ; __be32 val ; int off ; int offmask ; } ;
struct tc_rsvp_pinfo { struct tc_rsvp_gpi dpi ; struct tc_rsvp_gpi spi ; __u8 protocol ; __u8 tunnelid ; __u8 tunnelhdr ; __u8 pad ; } ;
struct qdisc_rate_table { struct tc_ratespec rate ; u32 data [ 256 ] ; struct qdisc_rate_table * next ; int refcnt ; } ;
struct qdisc_size_table { struct callback_head rcu ; struct list_head list ; struct tc_sizespec szopts ; int refcnt ; u16 data [ ] ; } ;
struct Qdisc_class_ops { struct netdev_queue * ( * select_queue ) ( struct Qdisc * , struct tcmsg * ) ; int ( * graft ) ( struct Qdisc * , unsigned long cl , struct Qdisc * , struct Qdisc * * ) ; struct Qdisc * ( * leaf ) ( struct Qdisc * , unsigned long cl ) ; void ( * qlen_notify ) ( struct Qdisc * , unsigned long ) ; unsigned long ( * get ) ( struct Qdisc * , u32 classid ) ; void ( * put ) ( struct Qdisc * , unsigned long ) ; int ( * change ) ( struct Qdisc * , u32 , u32 , struct nlattr * * , unsigned long * ) ; int ( * delete_ ) ( struct Qdisc * , unsigned long ) ; void ( * walk ) ( struct Qdisc * , struct qdisc_walker * arg ) ; struct tcf_proto * * ( * tcf_chain ) ( struct Qdisc * , unsigned long ) ; unsigned long ( * bind_tcf ) ( struct Qdisc * , unsigned long , u32 classid ) ; void ( * unbind_tcf ) ( struct Qdisc * , unsigned long ) ; int ( * dump ) ( struct Qdisc * , unsigned long , struct sk_buff * skb , struct tcmsg * ) ; int ( * dump_stats ) ( struct Qdisc * , unsigned long , struct gnet_dump * ) ; } ;
struct tcf_proto_ops { struct tcf_proto_ops * next ; char kind [ 16 ] ; int ( * classify ) ( struct sk_buff * , const struct tcf_proto * , struct tcf_result * ) ; int ( * init ) ( struct tcf_proto * ) ; void ( * destroy ) ( struct tcf_proto * ) ; unsigned long ( * get ) ( struct tcf_proto * , u32 handle ) ; void ( * put ) ( struct tcf_proto * , unsigned long ) ; int ( * change ) ( struct sk_buff * , struct tcf_proto * , unsigned long , u32 handle , struct nlattr * * , unsigned long * ) ; int ( * delete_ ) ( struct tcf_proto * , unsigned long ) ; void ( * walk ) ( struct tcf_proto * , struct tcf_walker * arg ) ; int ( * dump ) ( struct tcf_proto * , unsigned long , struct sk_buff * skb , struct tcmsg * ) ; struct module * owner ; } ;
struct tcf_proto { struct tcf_proto * next ; void * root ; int ( * classify ) ( struct sk_buff * , const struct tcf_proto * , struct tcf_result * ) ; __be16 protocol ; u32 prio ; u32 classid ; struct Qdisc * q ; void * data ; const struct tcf_proto_ops * ops ; } ;
struct partition { unsigned char boot_ind ; unsigned char head ; unsigned char sector ; unsigned char cyl ; unsigned char sys_ind ; unsigned char end_head ; unsigned char end_sector ; unsigned char end_cyl ; __le32 start_sect ; __le32 nr_sects ; } __attribute__ ( ( packed ) ) ;
struct disk_part_tbl { struct callback_head callback_head ; int len ; struct hd_struct * last_lookup ; struct hd_struct * part [ ] ; } ;
struct solaris_x86_slice { __le16 s_tag ; __le16 s_flag ; __le32 s_start ; __le32 s_size ; } ;
struct unixware_slice { __le16 s_label ; __le16 s_flags ; __le32 start_sect ; __le32 nr_sects ; } ;
struct writeback_control { long nr_to_write ; long pages_skipped ; loff_t range_start ; loff_t range_end ; enum writeback_sync_modes sync_mode ; unsigned for_kupdate : 1 ; unsigned for_background : 1 ; unsigned tagged_writepages : 1 ; unsigned for_reclaim : 1 ; unsigned range_cyclic : 1 ; } ;
typedef void * ( mempool_alloc_t ) ( gfp_t gfp_mask , void * pool_data ) ;
typedef int ( elevator_set_req_fn ) ( struct request_queue * , struct request * , struct bio * , gfp_t ) ;
struct blk_queue_tag { struct request * * tag_index ; unsigned long * tag_map ; int busy ; int max_depth ; int real_max_depth ; atomic_t refcnt ; } ;
struct block_device_operations { int ( * open ) ( struct block_device * , fmode_t ) ; int ( * release ) ( struct gendisk * , fmode_t ) ; int ( * ioctl ) ( struct block_device * , fmode_t , unsigned , unsigned long ) ; int ( * compat_ioctl ) ( struct block_device * , fmode_t , unsigned , unsigned long ) ; int ( * direct_access ) ( struct block_device * , sector_t , void * * , unsigned long * ) ; unsigned int ( * check_events ) ( struct gendisk * disk , unsigned int clearing ) ; int ( * media_changed ) ( struct gendisk * ) ; void ( * unlock_native_capacity ) ( struct gendisk * ) ; int ( * revalidate_disk ) ( struct gendisk * ) ; int ( * getgeo ) ( struct block_device * , struct hd_geometry * ) ; void ( * swap_slot_free_notify ) ( struct block_device * , unsigned long ) ; struct module * owner ; } ;
struct buffer_head ;
struct buffer_head { unsigned long b_state ; struct buffer_head * b_this_page ; struct page * b_page ; sector_t b_blocknr ; size_t b_size ; char * b_data ; struct block_device * b_bdev ; bh_end_io_t * b_end_io ; void * b_private ; struct list_head b_assoc_buffers ; struct address_space * b_assoc_map ; atomic_t b_count ; } ;
struct buffer_head ;
struct scatterlist ;
struct crypto_async_request ;
struct crypto_async_request { struct list_head list ; crypto_completion_t complete ; void * data ; struct crypto_tfm * tfm ; u32 flags ; } ;
struct cipher_desc { struct crypto_tfm * tfm ; void ( * crfn ) ( struct crypto_tfm * tfm , u8 * dst , const u8 * src ) ; unsigned int ( * prfn ) ( const struct cipher_desc * desc , u8 * dst , const u8 * src , unsigned int nbytes ) ; void * info ; } ;
struct ablkcipher_alg { int ( * setkey ) ( struct crypto_ablkcipher * tfm , const u8 * key , unsigned int keylen ) ; int ( * encrypt ) ( struct ablkcipher_request * req ) ; int ( * decrypt ) ( struct ablkcipher_request * req ) ; int ( * givencrypt ) ( struct skcipher_givcrypt_request * req ) ; int ( * givdecrypt ) ( struct skcipher_givcrypt_request * req ) ; const char * geniv ; unsigned int min_keysize ; unsigned int max_keysize ; unsigned int ivsize ; } ;
struct aead_alg { int ( * setkey ) ( struct crypto_aead * tfm , const u8 * key , unsigned int keylen ) ; int ( * setauthsize ) ( struct crypto_aead * tfm , unsigned int authsize ) ; int ( * encrypt ) ( struct aead_request * req ) ; int ( * decrypt ) ( struct aead_request * req ) ; int ( * givencrypt ) ( struct aead_givcrypt_request * req ) ; int ( * givdecrypt ) ( struct aead_givcrypt_request * req ) ; const char * geniv ; unsigned int ivsize ; unsigned int maxauthsize ; } ;
struct blkcipher_alg { int ( * setkey ) ( struct crypto_tfm * tfm , const u8 * key , unsigned int keylen ) ; int ( * encrypt ) ( struct blkcipher_desc * desc , struct scatterlist * dst , struct scatterlist * src , unsigned int nbytes ) ; int ( * decrypt ) ( struct blkcipher_desc * desc , struct scatterlist * dst , struct scatterlist * src , unsigned int nbytes ) ; const char * geniv ; unsigned int min_keysize ; unsigned int max_keysize ; unsigned int ivsize ; } ;
struct cipher_alg { unsigned int cia_min_keysize ; unsigned int cia_max_keysize ; int ( * cia_setkey ) ( struct crypto_tfm * tfm , const u8 * key , unsigned int keylen ) ; void ( * cia_encrypt ) ( struct crypto_tfm * tfm , u8 * dst , const u8 * src ) ; void ( * cia_decrypt ) ( struct crypto_tfm * tfm , u8 * dst , const u8 * src ) ; } ;
struct compress_alg { int ( * coa_compress ) ( struct crypto_tfm * tfm , const u8 * src , unsigned int slen , u8 * dst , unsigned int * dlen ) ; int ( * coa_decompress ) ( struct crypto_tfm * tfm , const u8 * src , unsigned int slen , u8 * dst , unsigned int * dlen ) ; } ;
struct rng_alg { int ( * rng_make_random ) ( struct crypto_rng * tfm , u8 * rdata , unsigned int dlen ) ; int ( * rng_reset ) ( struct crypto_rng * tfm , u8 * seed , unsigned int slen ) ; unsigned int seedsize ; } ;
struct ablkcipher_tfm { int ( * setkey ) ( struct crypto_ablkcipher * tfm , const u8 * key , unsigned int keylen ) ; int ( * encrypt ) ( struct ablkcipher_request * req ) ; int ( * decrypt ) ( struct ablkcipher_request * req ) ; int ( * givencrypt ) ( struct skcipher_givcrypt_request * req ) ; int ( * givdecrypt ) ( struct skcipher_givcrypt_request * req ) ; struct crypto_ablkcipher * base ; unsigned int ivsize ; unsigned int reqsize ; } ;
struct aead_tfm { int ( * setkey ) ( struct crypto_aead * tfm , const u8 * key , unsigned int keylen ) ; int ( * encrypt ) ( struct aead_request * req ) ; int ( * decrypt ) ( struct aead_request * req ) ; int ( * givencrypt ) ( struct aead_givcrypt_request * req ) ; int ( * givdecrypt ) ( struct aead_givcrypt_request * req ) ; struct crypto_aead * base ; unsigned int ivsize ; unsigned int authsize ; unsigned int reqsize ; } ;
struct blkcipher_tfm { void * iv ; int ( * setkey ) ( struct crypto_tfm * tfm , const u8 * key , unsigned int keylen ) ; int ( * encrypt ) ( struct blkcipher_desc * desc , struct scatterlist * dst , struct scatterlist * src , unsigned int nbytes ) ; int ( * decrypt ) ( struct blkcipher_desc * desc , struct scatterlist * dst , struct scatterlist * src , unsigned int nbytes ) ; } ;
struct cipher_tfm { int ( * cit_setkey ) ( struct crypto_tfm * tfm , const u8 * key , unsigned int keylen ) ; void ( * cit_encrypt_one ) ( struct crypto_tfm * tfm , u8 * dst , const u8 * src ) ; void ( * cit_decrypt_one ) ( struct crypto_tfm * tfm , u8 * dst , const u8 * src ) ; } ;
struct hash_tfm { int ( * init ) ( struct hash_desc * desc ) ; int ( * update ) ( struct hash_desc * desc , struct scatterlist * sg , unsigned int nsg ) ; int ( * final ) ( struct hash_desc * desc , u8 * out ) ; int ( * digest ) ( struct hash_desc * desc , struct scatterlist * sg , unsigned int nsg , u8 * out ) ; int ( * setkey ) ( struct crypto_hash * tfm , const u8 * key , unsigned int keylen ) ; unsigned int digestsize ; } ;
struct compress_tfm { int ( * cot_compress ) ( struct crypto_tfm * tfm , const u8 * src , unsigned int slen , u8 * dst , unsigned int * dlen ) ; int ( * cot_decompress ) ( struct crypto_tfm * tfm , const u8 * src , unsigned int slen , u8 * dst , unsigned int * dlen ) ; } ;
struct rng_tfm { int ( * rng_gen_random ) ( struct crypto_rng * tfm , u8 * rdata , unsigned int dlen ) ; int ( * rng_reset ) ( struct crypto_rng * tfm , u8 * seed , unsigned int slen ) ; } ;
struct commit_header { __be32 h_magic ; __be32 h_blocktype ; __be32 h_sequence ; unsigned char h_chksum_type ; unsigned char h_chksum_size ; unsigned char h_padding [ 2 ] ; __be32 h_chksum [ ( 32 / sizeof ( u32 ) ) ] ; __be64 h_commit_sec ; __be32 h_commit_nsec ; } ;
struct jbd2_journal_block_tail { __be32 t_checksum ; } ;
struct jbd2_journal_revoke_tail { __be32 r_checksum ; } ;
struct transaction_stats_s { unsigned long ts_tid ; struct transaction_run_stats_s run ; } ;
struct writeback_control ;
struct bio ;
union swap_header { struct { char reserved [ ( ( 1UL ) << 12 ) - 10 ] ; char magic [ 10 ] ; } magic ; struct { char bootbits [ 1024 ] ; __u32 version ; __u32 last_page ; __u32 nr_badpages ; unsigned char sws_uuid [ 16 ] ; unsigned char sws_volume [ 16 ] ; __u32 padding [ 117 ] ; __u32 badpages [ 1 ] ; } info ; } ;
struct writeback_control ;
struct swap_info_struct { unsigned long flags ; signed short prio ; signed char type ; signed char next ; unsigned int max ; unsigned char * swap_map ; unsigned int lowest_bit ; unsigned int highest_bit ; unsigned int pages ; unsigned int inuse_pages ; unsigned int cluster_next ; unsigned int cluster_nr ; unsigned int lowest_alloc ; unsigned int highest_alloc ; struct swap_extent * curr_swap_extent ; struct swap_extent first_swap_extent ; struct block_device * bdev ; struct file * swap_file ; unsigned int old_block_size ; } ;
struct statfs { long f_type ; long f_bsize ; long f_blocks ; long f_bfree ; long f_bavail ; long f_files ; long f_ffree ; __kernel_fsid_t f_fsid ; long f_namelen ; long f_frsize ; long f_flags ; long f_spare [ 4 ] ; } ;
struct statfs64 { long f_type ; long f_bsize ; __u64 f_blocks ; __u64 f_bfree ; __u64 f_bavail ; __u64 f_files ; __u64 f_ffree ; __kernel_fsid_t f_fsid ; long f_namelen ; long f_frsize ; long f_flags ; long f_spare [ 4 ] ; } ;
struct compat_statfs64 { __u32 f_type ; __u32 f_bsize ; __u64 f_blocks ; __u64 f_bfree ; __u64 f_bavail ; __u64 f_files ; __u64 f_ffree ; __kernel_fsid_t f_fsid ; __u32 f_namelen ; __u32 f_frsize ; __u32 f_flags ; __u32 f_spare [ 4 ] ; } __attribute__ ( ( packed , aligned ( 4 ) ) ) ;
typedef __kernel_fsid_t fsid_t ;
struct kstatfs { long f_type ; long f_bsize ; u64 f_blocks ; u64 f_bfree ; u64 f_bavail ; u64 f_files ; u64 f_ffree ; __kernel_fsid_t f_fsid ; long f_namelen ; long f_frsize ; long f_flags ; long f_spare [ 4 ] ; } ;
typedef struct match_token match_table_t [ ] ;
typedef struct { char * from ; char * to ; } substring_t ;
struct export_operations { int ( * encode_fh ) ( struct inode * inode , __u32 * fh , int * max_len , struct inode * parent ) ; struct dentry * ( * fh_to_dentry ) ( struct super_block * sb , struct fid * fid , int fh_len , int fh_type ) ; struct dentry * ( * fh_to_parent ) ( struct super_block * sb , struct fid * fid , int fh_len , int fh_type ) ; int ( * get_name ) ( struct dentry * parent , char * name , struct dentry * child ) ; struct dentry * ( * get_parent ) ( struct dentry * child ) ; int ( * commit_metadata ) ( struct inode * inode ) ; } ;
struct ata_bmdma_prd { __le32 addr ; __le32 flags_len ; } ;
struct scsi_varlen_cdb_hdr { __u8 opcode ; __u8 control ; __u8 misc [ 5 ] ; __u8 additional_cdb_length ; __be16 service_action ; } ;
struct acpi_bus_type ;
struct acpi_buffer { acpi_size length ; void * pointer ; } ;
typedef u32 ( * acpi_osd_handler ) ( void * context ) ;
typedef void ( * acpi_gbl_event_handler ) ( u32 event_type , acpi_handle device , u32 event_number , void * context ) ;
typedef u32 ( * acpi_event_handler ) ( void * context ) ;
typedef u32 ( * acpi_gpe_handler ) ( acpi_handle gpe_device , u32 gpe_number , void * context ) ;
typedef void ( * acpi_notify_handler ) ( acpi_handle device , u32 value , void * context ) ;
typedef void ( * acpi_object_handler ) ( acpi_handle object , void * data ) ;
typedef u32 ( * acpi_interface_handler ) ( acpi_string interface_name , u32 supported ) ;
struct acpi_pnp_device_id_list { u32 count ; u32 list_size ; struct acpi_pnp_device_id ids [ 1 ] ; } ;
struct acpi_mem_space_context { u32 length ; acpi_physical_address address ; acpi_physical_address mapped_physical_address ; u8 * mapped_logical_address ; acpi_size mapped_length ; } ;
struct acpi_table_rsdt { struct acpi_table_header header ; u32 table_offset_entry [ 1 ] ; } ;
struct acpi_table_xsdt { struct acpi_table_header header ; u64 table_offset_entry [ 1 ] ; } ;
struct acpi_table_fadt { struct acpi_table_header header ; u32 facs ; u32 dsdt ; u8 model ; u8 preferred_profile ; u16 sci_interrupt ; u32 smi_command ; u8 acpi_enable ; u8 acpi_disable ; u8 s4_bios_request ; u8 pstate_control ; u32 pm1a_event_block ; u32 pm1b_event_block ; u32 pm1a_control_block ; u32 pm1b_control_block ; u32 pm2_control_block ; u32 pm_timer_block ; u32 gpe0_block ; u32 gpe1_block ; u8 pm1_event_length ; u8 pm1_control_length ; u8 pm2_control_length ; u8 pm_timer_length ; u8 gpe0_block_length ; u8 gpe1_block_length ; u8 gpe1_base ; u8 cst_control ; u16 c2_latency ; u16 c3_latency ; u16 flush_size ; u16 flush_stride ; u8 duty_offset ; u8 duty_width ; u8 day_alarm ; u8 month_alarm ; u8 century ; u16 boot_flags ; u8 reserved ; u32 flags ; struct acpi_generic_address reset_register ; u8 reset_value ; u8 reserved4 [ 3 ] ; u64 Xfacs ; u64 Xdsdt ; struct acpi_generic_address xpm1a_event_block ; struct acpi_generic_address xpm1b_event_block ; struct acpi_generic_address xpm1a_control_block ; struct acpi_generic_address xpm1b_control_block ; struct acpi_generic_address xpm2_control_block ; struct acpi_generic_address xpm_timer_block ; struct acpi_generic_address xgpe0_block ; struct acpi_generic_address xgpe1_block ; struct acpi_generic_address sleep_control ; struct acpi_generic_address sleep_status ; } ;
struct acpi_table_desc { acpi_physical_address address ; struct acpi_table_header * pointer ; u32 length ; union acpi_name_union signature ; acpi_owner_id owner_id ; u8 flags ; } ;
struct acpi_whea_header { u8 action ; u8 instruction ; u8 flags ; u8 reserved ; struct acpi_generic_address register_region ; u64 value ; u64 mask ; } ;
struct acpi_table_bert { struct acpi_table_header header ; u32 region_length ; u64 address ; } ;
struct acpi_table_cpep { struct acpi_table_header header ; u64 reserved ; } ;
struct acpi_cpep_polling { struct acpi_subtable_header header ; u8 id ; u8 eid ; u32 interval ; } ;
struct acpi_table_ecdt { struct acpi_table_header header ; struct acpi_generic_address control ; struct acpi_generic_address data ; u32 uid ; u8 gpe ; u8 id [ 1 ] ; } ;
struct acpi_table_einj { struct acpi_table_header header ; u32 header_length ; u8 flags ; u8 reserved [ 3 ] ; u32 entries ; } ;
struct acpi_table_erst { struct acpi_table_header header ; u32 header_length ; u32 reserved ; u32 entries ; } ;
struct acpi_table_hest { struct acpi_table_header header ; u32 error_source_count ; } ;
struct acpi_hest_ia_machine_check { struct acpi_hest_header header ; u16 reserved1 ; u8 flags ; u8 enabled ; u32 records_to_preallocate ; u32 max_sections_per_record ; u64 global_capability_data ; u64 global_control_data ; u8 num_hardware_banks ; u8 reserved3 [ 7 ] ; } ;
struct acpi_hest_ia_corrected { struct acpi_hest_header header ; u16 reserved1 ; u8 flags ; u8 enabled ; u32 records_to_preallocate ; u32 max_sections_per_record ; struct acpi_hest_notify notify ; u8 num_hardware_banks ; u8 reserved2 [ 3 ] ; } ;
struct acpi_hest_ia_nmi { struct acpi_hest_header header ; u32 reserved ; u32 records_to_preallocate ; u32 max_sections_per_record ; u32 max_raw_data_length ; } ;
struct acpi_hest_aer_root { struct acpi_hest_header header ; struct acpi_hest_aer_common aer ; u32 root_error_command ; } ;
struct acpi_hest_aer { struct acpi_hest_header header ; struct acpi_hest_aer_common aer ; } ;
struct acpi_hest_aer_bridge { struct acpi_hest_header header ; struct acpi_hest_aer_common aer ; u32 uncorrectable_mask2 ; u32 uncorrectable_severity2 ; u32 advanced_capabilities2 ; } ;
struct acpi_hest_generic { struct acpi_hest_header header ; u16 related_source_id ; u8 reserved ; u8 enabled ; u32 records_to_preallocate ; u32 max_sections_per_record ; u32 max_raw_data_length ; struct acpi_generic_address error_status_address ; struct acpi_hest_notify notify ; u32 error_block_length ; } ;
struct acpi_table_madt { struct acpi_table_header header ; u32 address ; u32 flags ; } ;
struct acpi_madt_local_apic { struct acpi_subtable_header header ; u8 processor_id ; u8 id ; u32 lapic_flags ; } ;
struct acpi_madt_io_apic { struct acpi_subtable_header header ; u8 id ; u8 reserved ; u32 address ; u32 global_irq_base ; } ;
struct acpi_madt_interrupt_override { struct acpi_subtable_header header ; u8 bus ; u8 source_irq ; u32 global_irq ; u16 inti_flags ; } ;
struct acpi_madt_nmi_source { struct acpi_subtable_header header ; u16 inti_flags ; u32 global_irq ; } ;
struct acpi_madt_local_apic_nmi { struct acpi_subtable_header header ; u8 processor_id ; u16 inti_flags ; u8 lint ; } ;
struct acpi_madt_local_apic_override { struct acpi_subtable_header header ; u16 reserved ; u64 address ; } ;
struct acpi_madt_io_sapic { struct acpi_subtable_header header ; u8 id ; u8 reserved ; u32 global_irq_base ; u64 address ; } ;
struct acpi_madt_local_sapic { struct acpi_subtable_header header ; u8 processor_id ; u8 id ; u8 eid ; u8 reserved [ 3 ] ; u32 lapic_flags ; u32 uid ; char uid_string [ 1 ] ; } ;
struct acpi_madt_interrupt_source { struct acpi_subtable_header header ; u16 inti_flags ; u8 type ; u8 id ; u8 eid ; u8 io_sapic_vector ; u32 global_irq ; u32 flags ; } ;
struct acpi_madt_local_x2apic { struct acpi_subtable_header header ; u16 reserved ; u32 local_apic_id ; u32 lapic_flags ; u32 uid ; } ;
struct acpi_madt_local_x2apic_nmi { struct acpi_subtable_header header ; u16 inti_flags ; u32 uid ; u8 lint ; u8 reserved [ 3 ] ; } ;
struct acpi_madt_generic_interrupt { struct acpi_subtable_header header ; u16 reserved ; u32 gic_id ; u32 uid ; u32 flags ; u32 parking_version ; u32 performance_interrupt ; u64 parked_address ; u64 base_address ; } ;
struct acpi_madt_generic_distributor { struct acpi_subtable_header header ; u16 reserved ; u32 gic_id ; u64 base_address ; u32 global_irq_base ; u32 reserved2 ; } ;
struct acpi_table_msct { struct acpi_table_header header ; u32 proximity_offset ; u32 max_proximity_domains ; u32 max_clock_domains ; u64 max_address ; } ;
struct acpi_table_sbst { struct acpi_table_header header ; u32 warning_level ; u32 low_level ; u32 critical_level ; } ;
struct acpi_table_slit { struct acpi_table_header header ; u64 locality_count ; u8 entry [ 1 ] ; } ;
struct acpi_table_srat { struct acpi_table_header header ; u32 table_revision ; u64 reserved ; } ;
struct acpi_srat_cpu_affinity { struct acpi_subtable_header header ; u8 proximity_domain_lo ; u8 apic_id ; u32 flags ; u8 local_sapic_eid ; u8 proximity_domain_hi [ 3 ] ; u32 reserved ; } ;
struct acpi_srat_mem_affinity { struct acpi_subtable_header header ; u32 proximity_domain ; u16 reserved ; u64 base_address ; u64 length ; u32 reserved1 ; u32 flags ; u64 reserved2 ; } ;
struct acpi_srat_x2apic_cpu_affinity { struct acpi_subtable_header header ; u16 reserved ; u32 proximity_domain ; u32 apic_id ; u32 flags ; u32 clock_domain ; u32 reserved2 ; } ;
struct acpi_table_asf { struct acpi_table_header header ; } ;
struct acpi_asf_info { struct acpi_asf_header header ; u8 min_reset_value ; u8 min_poll_interval ; u16 system_id ; u32 mfg_id ; u8 flags ; u8 reserved2 [ 3 ] ; } ;
struct acpi_asf_alert { struct acpi_asf_header header ; u8 assert_mask ; u8 deassert_mask ; u8 alerts ; u8 data_length ; } ;
struct acpi_asf_remote { struct acpi_asf_header header ; u8 controls ; u8 data_length ; u16 reserved2 ; } ;
struct acpi_asf_rmcp { struct acpi_asf_header header ; u8 capabilities [ 7 ] ; u8 completion_code ; u32 enterprise_id ; u8 command ; u16 parameter ; u16 boot_options ; u16 oem_parameters ; } ;
struct acpi_asf_address { struct acpi_asf_header header ; u8 eprom_address ; u8 devices ; } ;
struct acpi_table_boot { struct acpi_table_header header ; u8 cmos_index ; u8 reserved [ 3 ] ; } ;
struct acpi_table_csrt { struct acpi_table_header header ; } ;
struct acpi_table_dbg2 { struct acpi_table_header header ; u32 info_offset ; u32 info_count ; } ;
struct acpi_table_dbgp { struct acpi_table_header header ; u8 type ; u8 reserved [ 3 ] ; struct acpi_generic_address debug_port ; } ;
struct acpi_table_dmar { struct acpi_table_header header ; u8 width ; u8 flags ; u8 reserved [ 10 ] ; } ;
struct acpi_dmar_hardware_unit { struct acpi_dmar_header header ; u8 flags ; u8 reserved ; u16 segment ; u64 address ; } ;
struct acpi_dmar_reserved_memory { struct acpi_dmar_header header ; u16 reserved ; u16 segment ; u64 base_address ; u64 end_address ; } ;
struct acpi_dmar_atsr { struct acpi_dmar_header header ; u8 flags ; u8 reserved ; u16 segment ; } ;
struct acpi_dmar_rhsa { struct acpi_dmar_header header ; u32 reserved ; u64 base_address ; u32 proximity_domain ; } ;
struct acpi_table_hpet { struct acpi_table_header header ; u32 id ; struct acpi_generic_address address ; u8 sequence ; u16 minimum_tick ; u8 flags ; } ;
struct acpi_table_ibft { struct acpi_table_header header ; u8 reserved [ 12 ] ; } ;
struct acpi_ibft_control { struct acpi_ibft_header header ; u16 extensions ; u16 initiator_offset ; u16 nic0_offset ; u16 target0_offset ; u16 nic1_offset ; u16 target1_offset ; } ;
struct acpi_ibft_initiator { struct acpi_ibft_header header ; u8 sns_server [ 16 ] ; u8 slp_server [ 16 ] ; u8 primary_server [ 16 ] ; u8 secondary_server [ 16 ] ; u16 name_length ; u16 name_offset ; } ;
struct acpi_ibft_nic { struct acpi_ibft_header header ; u8 ip_address [ 16 ] ; u8 subnet_mask_prefix ; u8 origin ; u8 gateway [ 16 ] ; u8 primary_dns [ 16 ] ; u8 secondary_dns [ 16 ] ; u8 dhcp [ 16 ] ; u16 vlan ; u8 mac_address [ 6 ] ; u16 pci_address ; u16 name_length ; u16 name_offset ; } ;
struct acpi_ibft_target { struct acpi_ibft_header header ; u8 target_ip_address [ 16 ] ; u16 target_ip_socket ; u8 target_boot_lun [ 8 ] ; u8 chap_type ; u8 nic_association ; u16 target_name_length ; u16 target_name_offset ; u16 chap_name_length ; u16 chap_name_offset ; u16 chap_secret_length ; u16 chap_secret_offset ; u16 reverse_chap_name_length ; u16 reverse_chap_name_offset ; u16 reverse_chap_secret_length ; u16 reverse_chap_secret_offset ; } ;
struct acpi_table_ivrs { struct acpi_table_header header ; u32 info ; u64 reserved ; } ;
struct acpi_ivrs_hardware { struct acpi_ivrs_header header ; u16 capability_offset ; u64 base_address ; u16 pci_segment_group ; u16 info ; u32 reserved ; } ;
struct acpi_ivrs_device4 { struct acpi_ivrs_de_header header ; } ;
struct acpi_ivrs_device8a { struct acpi_ivrs_de_header header ; u8 reserved1 ; u16 used_id ; u8 reserved2 ; } ;
struct acpi_ivrs_device8b { struct acpi_ivrs_de_header header ; u32 extended_data ; } ;
struct acpi_ivrs_device8c { struct acpi_ivrs_de_header header ; u8 handle ; u16 used_id ; u8 variety ; } ;
struct acpi_ivrs_memory { struct acpi_ivrs_header header ; u16 aux_data ; u64 reserved ; u64 start_address ; u64 memory_length ; } ;
struct acpi_table_mcfg { struct acpi_table_header header ; u8 reserved [ 8 ] ; } ;
struct acpi_table_mchi { struct acpi_table_header header ; u8 interface_type ; u8 protocol ; u64 protocol_data ; u8 interrupt_type ; u8 gpe ; u8 pci_device_flag ; u32 global_interrupt ; struct acpi_generic_address control_register ; u8 pci_segment ; u8 pci_bus ; u8 pci_device ; u8 pci_function ; } ;
struct acpi_table_slic { struct acpi_table_header header ; } ;
struct acpi_slic_key { struct acpi_slic_header header ; u8 key_type ; u8 version ; u16 reserved ; u32 algorithm ; char magic [ 4 ] ; u32 bit_length ; u32 exponent ; u8 modulus [ 128 ] ; } ;
struct acpi_slic_marker { struct acpi_slic_header header ; u32 version ; char oem_id [ 6 ] ; char oem_table_id [ 8 ] ; char windows_flag [ 8 ] ; u32 slic_version ; u8 reserved [ 16 ] ; u8 signature [ 128 ] ; } ;
struct acpi_table_spcr { struct acpi_table_header header ; u8 interface_type ; u8 reserved [ 3 ] ; struct acpi_generic_address serial_port ; u8 interrupt_type ; u8 pc_interrupt ; u32 interrupt ; u8 baud_rate ; u8 parity ; u8 stop_bits ; u8 flow_control ; u8 terminal_type ; u8 reserved1 ; u16 pci_device_id ; u16 pci_vendor_id ; u8 pci_bus ; u8 pci_device ; u8 pci_function ; u32 pci_flags ; u8 pci_segment ; u32 reserved2 ; } ;
struct acpi_table_spmi { struct acpi_table_header header ; u8 interface_type ; u8 reserved ; u16 spec_revision ; u8 interrupt_type ; u8 gpe_number ; u8 reserved1 ; u8 pci_device_flag ; u32 interrupt ; struct acpi_generic_address ipmi_register ; u8 pci_segment ; u8 pci_bus ; u8 pci_device ; u8 pci_function ; u8 reserved2 ; } ;
struct acpi_table_tcpa { struct acpi_table_header header ; u16 reserved ; u32 max_log_length ; u64 log_address ; } ;
struct acpi_table_uefi { struct acpi_table_header header ; u8 identifier [ 16 ] ; u16 data_offset ; } ;
struct acpi_table_waet { struct acpi_table_header header ; u32 flags ; } ;
struct acpi_table_wdat { struct acpi_table_header header ; u32 header_length ; u16 pci_segment ; u8 pci_bus ; u8 pci_device ; u8 pci_function ; u8 reserved [ 3 ] ; u32 timer_period ; u32 max_count ; u32 min_count ; u8 flags ; u8 reserved2 [ 3 ] ; u32 entries ; } ;
struct acpi_wdat_entry { u8 action ; u8 instruction ; u16 reserved ; struct acpi_generic_address register_region ; u32 value ; u32 mask ; } ;
struct acpi_table_wddt { struct acpi_table_header header ; u16 spec_version ; u16 table_version ; u16 pci_vendor_id ; struct acpi_generic_address address ; u16 max_count ; u16 min_count ; u16 period ; u16 status ; u16 capability ; } ;
struct acpi_table_wdrt { struct acpi_table_header header ; struct acpi_generic_address control_register ; struct acpi_generic_address count_register ; u16 pci_device_id ; u16 pci_vendor_id ; u8 pci_bus ; u8 pci_device ; u8 pci_function ; u8 pci_segment ; u16 max_count ; u8 units ; } ;
struct acpi_table_bgrt { struct acpi_table_header header ; u16 version ; u8 status ; u8 image_type ; u64 image_address ; u32 image_offset_x ; u32 image_offset_y ; } ;
struct acpi_table_drtm { struct acpi_table_header header ; u64 entry_base_address ; u64 entry_length ; u32 entry_address32 ; u64 entry_address64 ; u64 exit_address ; u64 log_area_address ; u32 log_area_length ; u64 arch_dependent_address ; u32 flags ; } ;
struct acpi_table_fpdt { struct acpi_table_header header ; } ;
struct acpi_fpdt_boot { struct acpi_fpdt_header header ; u8 reserved [ 4 ] ; u64 reset_end ; u64 load_start ; u64 startup_start ; u64 exit_services_entry ; u64 exit_services_exit ; } ;
struct acpi_fpdt_s3pt_ptr { struct acpi_fpdt_header header ; u8 reserved [ 4 ] ; u64 address ; } ;
struct acpi_s3pt_resume { struct acpi_s3pt_header header ; u32 resume_count ; u64 full_resume ; u64 average_resume ; } ;
struct acpi_s3pt_suspend { struct acpi_s3pt_header header ; u64 suspend_start ; u64 suspend_end ; } ;
struct acpi_table_gtdt { struct acpi_table_header header ; u64 address ; u32 flags ; u32 secure_pl1_interrupt ; u32 secure_pl1_flags ; u32 non_secure_pl1_interrupt ; u32 non_secure_pl1_flags ; u32 virtual_timer_interrupt ; u32 virtual_timer_flags ; u32 non_secure_pl2_interrupt ; u32 non_secure_pl2_flags ; } ;
struct acpi_table_mpst { struct acpi_table_header header ; u8 channel_id ; u8 reserved1 [ 3 ] ; u16 power_node_count ; u16 reserved2 ; } ;
struct acpi_table_pcct { struct acpi_table_header header ; u32 flags ; u32 latency ; u32 reserved ; } ;
struct acpi_pcct_subspace { struct acpi_subtable_header header ; u8 reserved [ 6 ] ; u64 base_address ; u64 length ; struct acpi_generic_address doorbell_register ; u64 preserve_mask ; u64 write_mask ; } ;
struct acpi_table_pmtt { struct acpi_table_header header ; u32 reserved ; } ;
struct acpi_pmtt_socket { struct acpi_pmtt_header header ; u16 socket_id ; u16 reserved ; } ;
struct acpi_pmtt_controller { struct acpi_pmtt_header header ; u32 read_latency ; u32 write_latency ; u32 read_bandwidth ; u32 write_bandwidth ; u16 access_width ; u16 alignment ; u16 reserved ; u16 domain_count ; } ;
struct acpi_pmtt_physical_component { struct acpi_pmtt_header header ; u16 component_id ; u16 reserved ; u32 memory_size ; u32 bios_handle ; } ;
struct acpi_table_rasf { struct acpi_table_header header ; u8 channel_id [ 12 ] ; } ;
union acpi_resource_attribute { struct acpi_memory_attribute mem ; struct acpi_io_attribute io ; u8 type_specific ; } ;
struct acpi_resource_extended_irq { u8 producer_consumer ; u8 triggering ; u8 polarity ; u8 sharable ; u8 interrupt_count ; struct acpi_resource_source resource_source ; u32 interrupts [ 1 ] ; } ;
struct acpi_resource_gpio { u8 revision_id ; u8 connection_type ; u8 producer_consumer ; u8 pin_config ; u8 sharable ; u8 io_restriction ; u8 triggering ; u8 polarity ; u16 drive_strength ; u16 debounce_timeout ; u16 pin_table_length ; u16 vendor_length ; struct acpi_resource_source resource_source ; u16 * pin_table ; u8 * vendor_data ; } ;
struct acpi_resource_common_serialbus { u8 revision_id ; u8 type ; u8 producer_consumer ; u8 slave_mode ; u8 type_revision_id ; u16 type_data_length ; u16 vendor_length ; struct acpi_resource_source resource_source ; u8 * vendor_data ; } ;
struct acpi_resource_i2c_serialbus { u8 revision_id ; u8 type ; u8 producer_consumer ; u8 slave_mode ; u8 type_revision_id ; u16 type_data_length ; u16 vendor_length ; struct acpi_resource_source resource_source ; u8 * vendor_data ; u8 access_mode ; u16 slave_address ; u32 connection_speed ; } ;
struct acpi_resource_spi_serialbus { u8 revision_id ; u8 type ; u8 producer_consumer ; u8 slave_mode ; u8 type_revision_id ; u16 type_data_length ; u16 vendor_length ; struct acpi_resource_source resource_source ; u8 * vendor_data ; u8 wire_mode ; u8 device_polarity ; u8 data_bit_length ; u8 clock_phase ; u8 clock_polarity ; u16 device_selection ; u32 connection_speed ; } ;
struct acpi_resource_uart_serialbus { u8 revision_id ; u8 type ; u8 producer_consumer ; u8 slave_mode ; u8 type_revision_id ; u16 type_data_length ; u16 vendor_length ; struct acpi_resource_source resource_source ; u8 * vendor_data ; u8 endian ; u8 data_bits ; u8 stop_bits ; u8 flow_control ; u8 parity ; u8 lines_enabled ; u16 rx_fifo_size ; u16 tx_fifo_size ; u32 default_baud_rate ; } ;
typedef void ( * acpi_op_notify ) ( struct acpi_device * device , u32 event ) ;
struct acpi_bus_ops { u32 acpi_op_add : 1 ; u32 acpi_op_start : 1 ; } ;
struct acpi_device_power_state { struct { u8 valid : 1 ; u8 os_accessible : 1 ; u8 explicit_set : 1 ; u8 reserved : 6 ; } flags ; int power ; int latency ; struct acpi_handle_list resources ; } ;
struct acpi_device_perf_state { struct { u8 valid : 1 ; u8 reserved : 7 ; } flags ; u8 power ; u8 performance ; int latency ; } ;
struct acpi_device_perf { int state ; struct acpi_device_perf_flags flags ; int state_count ; struct acpi_device_perf_state * states ; } ;
struct acpi_device_wakeup { acpi_handle gpe_device ; u64 gpe_number ; u64 sleep_state ; struct acpi_handle_list resources ; struct acpi_device_wakeup_flags flags ; int prepare_count ; } ;
struct acpi_bus_type { struct list_head list ; struct bus_type * bus ; int ( * find_device ) ( struct device * , acpi_handle * ) ; int ( * find_bridge ) ( struct device * , acpi_handle * ) ; } ;
typedef void ( * wmi_notify_handler ) ( u32 value , void * context ) ;
union cdrom_addr { struct cdrom_msf0 msf ; int lba ; } ;
struct dvd_physical { __u8 type ; __u8 layer_num ; struct dvd_layer layer [ 4 ] ; } ;
struct dvd_host_send_challenge { __u8 type ; unsigned agid : 2 ; dvd_challenge chal ; } ;
struct dvd_send_key { __u8 type ; unsigned agid : 2 ; dvd_key key ; } ;
struct dvd_lu_send_challenge { __u8 type ; unsigned agid : 2 ; dvd_challenge chal ; } ;
struct dvd_lu_send_title_key { __u8 type ; unsigned agid : 2 ; dvd_key title_key ; int lba ; unsigned cpm : 1 ; unsigned cp_sec : 1 ; unsigned cgms : 2 ; } ;
struct mrw_feature_desc { __be16 feature_code ; __u8 curr : 1 ; __u8 persistent : 1 ; __u8 feature_version : 4 ; __u8 reserved1 : 2 ; __u8 add_len ; __u8 write : 1 ; __u8 reserved2 : 7 ; __u8 reserved3 ; __u8 reserved4 ; __u8 reserved5 ; } ;
struct rwrt_feature_desc { __be16 feature_code ; __u8 curr : 1 ; __u8 persistent : 1 ; __u8 feature_version : 4 ; __u8 reserved1 : 2 ; __u8 add_len ; __u32 last_lba ; __u32 block_size ; __u16 blocking ; __u8 page_present : 1 ; __u8 reserved2 : 7 ; __u8 reserved3 ; } ;
struct mode_page_header { __be16 mode_data_length ; __u8 medium_type ; __u8 reserved1 ; __u8 reserved2 ; __u8 reserved3 ; __be16 desc_length ; } ;
struct cdrom_changer_info { struct cdrom_mechstat_header hdr ; struct cdrom_slot slots [ 256 ] ; } ;
typedef struct { __u16 report_key_length ; __u8 reserved1 ; __u8 reserved2 ; __u8 ucca : 3 ; __u8 vra : 3 ; __u8 type_code : 2 ; __u8 region_mask ; __u8 rpc_scheme ; __u8 reserved3 ; } rpc_state_t ;
struct event_header { __be16 data_len ; __u8 notification_class : 3 ; __u8 reserved1 : 4 ; __u8 nea : 1 ; __u8 supp_event_class ; } ;
struct ata_ering { int cursor ; struct ata_ering_entry ring [ ATA_ERING_SIZE ] ; } ;
struct ata_eh_context { struct ata_eh_info i ; int tries [ ATA_MAX_DEVICES ] ; int cmd_timeout_idx [ ATA_MAX_DEVICES ] [ ATA_EH_CMD_TIMEOUT_TABLE_SIZE ] ; unsigned int classes [ ATA_MAX_DEVICES ] ; unsigned int did_probe_mask ; unsigned int unloaded_mask ; unsigned int saved_ncq_enabled ; u8 saved_xfer_mode [ ATA_MAX_DEVICES ] ; unsigned long last_reset ; } ;
struct ata_acpi_gtm { struct ata_acpi_drive drive [ 2 ] ; u32 flags ; } __attribute__ ( ( packed ) ) ;
struct input_event { struct timeval time ; __u16 type ; __u16 code ; __s32 value ; } ;
struct ff_constant_effect { __s16 level ; struct ff_envelope envelope ; } ;
struct ff_ramp_effect { __s16 start_level ; __s16 end_level ; struct ff_envelope envelope ; } ;
struct ff_periodic_effect { __u16 waveform ; __u16 period ; __s16 magnitude ; __s16 offset ; __u16 phase ; struct ff_envelope envelope ; __u32 custom_len ; __s16 * custom_data ; } ;
struct pnp_card_link { struct pnp_card * card ; struct pnp_card_driver * driver ; void * driver_data ; pm_message_t pm_state ; } ;
struct mb_cache { struct list_head c_cache_list ; const char * c_name ; atomic_t c_entry_count ; int c_max_entries ; int c_bucket_bits ; struct kmem_cache * c_entry_cache ; struct list_head * c_block_hash ; struct list_head * c_index_hash ; } ;
struct dm_target ;
typedef int ( * iterate_devices_callout_fn ) ( struct dm_target * ti , struct dm_dev * dev , sector_t start , sector_t len , void * data ) ;
struct dm_target { struct dm_table * table ; struct target_type * type ; sector_t begin ; sector_t len ; uint32_t max_io_len ; unsigned num_flush_requests ; unsigned num_discard_requests ; unsigned num_write_same_requests ; unsigned per_bio_data_size ; void * private_ ; char * error ; bool flush_supported : 1 ; bool discards_supported : 1 ; bool split_discard_requests : 1 ; bool discard_zeroes_data_unsupported : 1 ; } ;
struct desc_struct { union { struct { unsigned int a ; unsigned int b ; } ; struct { u16 limit0 ; u16 base0 ; unsigned base1 : 8 , type : 4 , s : 1 , dpl : 2 , p : 1 ; unsigned limit : 4 , avl : 1 , l : 1 , d : 1 , g : 1 , base2 : 8 ; } ; } ; } __attribute__ ( ( packed ) ) ;
struct desc_struct ;
struct _fpstate { __u16 cwd ; __u16 swd ; __u16 twd ; __u16 fop ; __u64 rip ; __u64 rdp ; __u32 mxcsr ; __u32 mxcsr_mask ; __u32 st_space [ 32 ] ; __u32 xmm_space [ 64 ] ; __u32 reserved2 [ 12 ] ; union { __u32 reserved3 [ 12 ] ; struct _fpx_sw_bytes sw_reserved ; } ; } ;
struct msr { union { struct { u32 l ; u32 h ; } ; u64 q ; } ; } ;
struct i387_fxsave_struct { u16 cwd ; u16 swd ; u16 twd ; u16 fop ; union { struct { u64 rip ; u64 rdp ; } ; struct { u32 fip ; u32 fcs ; u32 foo ; u32 fos ; } ; } ; u32 mxcsr ; u32 mxcsr_mask ; u32 st_space [ 32 ] ; u32 xmm_space [ 64 ] ; u32 padding [ 12 ] ; union { u32 padding1 [ 12 ] ; u32 sw_reserved [ 12 ] ; } ; } __attribute__ ( ( aligned ( 16 ) ) ) ;
typedef uid_t kuid_t ;
typedef gid_t kgid_t ;
struct work_struct ;
struct work_struct { atomic_long_t data ; struct list_head entry ; work_func_t func ; } ;
struct edd_device_params { __u16 length ; __u16 info_flags ; __u32 num_default_cylinders ; __u32 num_default_heads ; __u32 sectors_per_track ; __u64 number_of_sectors ; __u16 bytes_per_sector ; __u32 dpte_ptr ; __u16 key ; __u8 device_path_info_length ; __u8 reserved2 ; __u16 reserved3 ; __u8 host_bus_type [ 4 ] ; __u8 interface_type [ 8 ] ; union { struct { __u16 base_address ; __u16 reserved1 ; __u32 reserved2 ; } __attribute__ ( ( packed ) ) isa ; struct { __u8 bus ; __u8 slot ; __u8 function ; __u8 channel ; __u32 reserved ; } __attribute__ ( ( packed ) ) pci ; struct { __u64 reserved ; } __attribute__ ( ( packed ) ) ibnd ; struct { __u64 reserved ; } __attribute__ ( ( packed ) ) xprs ; struct { __u64 reserved ; } __attribute__ ( ( packed ) ) htpt ; struct { __u64 reserved ; } __attribute__ ( ( packed ) ) unknown ; } interface_path ; union { struct { __u8 device ; __u8 reserved1 ; __u16 reserved2 ; __u32 reserved3 ; __u64 reserved4 ; } __attribute__ ( ( packed ) ) ata ; struct { __u8 device ; __u8 lun ; __u8 reserved1 ; __u8 reserved2 ; __u32 reserved3 ; __u64 reserved4 ; } __attribute__ ( ( packed ) ) atapi ; struct { __u16 id ; __u64 lun ; __u16 reserved1 ; __u32 reserved2 ; } __attribute__ ( ( packed ) ) scsi ; struct { __u64 serial_number ; __u64 reserved ; } __attribute__ ( ( packed ) ) usb ; struct { __u64 eui ; __u64 reserved ; } __attribute__ ( ( packed ) ) i1394 ; struct { __u64 wwid ; __u64 lun ; } __attribute__ ( ( packed ) ) fibre ; struct { __u64 identity_tag ; __u64 reserved ; } __attribute__ ( ( packed ) ) i2o ; struct { __u32 array_number ; __u32 reserved1 ; __u64 reserved2 ; } __attribute__ ( ( packed ) ) raid ; struct { __u8 device ; __u8 reserved1 ; __u16 reserved2 ; __u32 reserved3 ; __u64 reserved4 ; } __attribute__ ( ( packed ) ) sata ; struct { __u64 reserved1 ; __u64 reserved2 ; } __attribute__ ( ( packed ) ) unknown ; } device_path ; __u8 reserved4 ; __u8 checksum ; } __attribute__ ( ( packed ) ) ;
struct resource { resource_size_t start ; resource_size_t end ; const char * name ; unsigned long flags ; struct resource * parent , * sibling , * child ; } ;
struct x86_init_ops { struct x86_init_resources resources ; struct x86_init_mpparse mpparse ; struct x86_init_irqs irqs ; struct x86_init_oem oem ; struct x86_init_mapping mapping ; struct x86_init_paging paging ; struct x86_init_timers timers ; struct x86_init_iommu iommu ; struct x86_init_pci pci ; } ;
struct x86_platform_ops { unsigned long ( * calibrate_tsc ) ( void ) ; unsigned long ( * get_wallclock ) ( void ) ; int ( * set_wallclock ) ( unsigned long nowtime ) ; void ( * iommu_shutdown ) ( void ) ; bool ( * is_untracked_pat_range ) ( u64 start , u64 end ) ; void ( * nmi_init ) ( void ) ; unsigned char ( * get_nmi_reason ) ( void ) ; int ( * i8042_detect ) ( void ) ; void ( * save_sched_clock_state ) ( void ) ; void ( * restore_sched_clock_state ) ( void ) ; void ( * apic_post_init ) ( void ) ; } ;
struct vm_area_struct ;
struct cpu_user_regs { uint64_t r15 ; uint64_t r14 ; uint64_t r13 ; uint64_t r12 ; union { uint64_t rbp , ebp ; uint32_t _ebp ; } ; union { uint64_t rbx , ebx ; uint32_t _ebx ; } ; uint64_t r11 ; uint64_t r10 ; uint64_t r9 ; uint64_t r8 ; union { uint64_t rax , eax ; uint32_t _eax ; } ; union { uint64_t rcx , ecx ; uint32_t _ecx ; } ; union { uint64_t rdx , edx ; uint32_t _edx ; } ; union { uint64_t rsi , esi ; uint32_t _esi ; } ; union { uint64_t rdi , edi ; uint32_t _edi ; } ; uint32_t error_code ; uint32_t entry_vector ; union { uint64_t rip , eip ; uint32_t _eip ; } ; uint16_t cs , _pad0 [ 1 ] ; uint8_t saved_upcall_mask ; uint8_t _pad1 [ 3 ] ; union { uint64_t rflags , eflags ; uint32_t _eflags ; } ; union { uint64_t rsp , esp ; uint32_t _esp ; } ; uint16_t ss , _pad2 [ 3 ] ; uint16_t es , _pad3 [ 3 ] ; uint16_t ds , _pad4 [ 3 ] ; uint16_t fs , _pad5 [ 3 ] ; uint16_t gs , _pad6 [ 3 ] ; } ;
struct shared_info { struct vcpu_info vcpu_info [ 32 ] ; unsigned long evtchn_pending [ sizeof ( unsigned long ) * 8 ] ; unsigned long evtchn_mask [ sizeof ( unsigned long ) * 8 ] ; struct pvclock_wall_clock wc ; struct arch_shared_info arch ; } ;
struct clocksource ;
struct cyclecounter { cycle_t ( * read ) ( const struct cyclecounter * cc ) ; cycle_t mask ; u32 mult ; u32 shift ; } ;
struct clocksource { cycle_t ( * read ) ( struct clocksource * cs ) ; cycle_t cycle_last ; cycle_t mask ; u32 mult ; u32 shift ; u64 max_idle_ns ; u32 maxadj ; struct arch_clocksource_data archdata ; const char * name ; struct list_head list ; int rating ; int ( * enable ) ( struct clocksource * cs ) ; void ( * disable ) ( struct clocksource * cs ) ; unsigned long flags ; void ( * suspend ) ( struct clocksource * cs ) ; void ( * resume ) ( struct clocksource * cs ) ; struct list_head wd_list ; cycle_t cs_last ; cycle_t wd_last ; } __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ;
enum fixed_addresses { VSYSCALL_LAST_PAGE , VSYSCALL_FIRST_PAGE = VSYSCALL_LAST_PAGE + ( ( ( - 2UL << 20 ) - ( - 10UL << 20 ) ) >> 12 ) - 1 , VVAR_PAGE , VSYSCALL_HPET , PVCLOCK_FIXMAP_BEGIN , PVCLOCK_FIXMAP_END = PVCLOCK_FIXMAP_BEGIN + ( ( ( 256 - 1 ) / ( ( ( 1UL ) << 12 ) / sizeof ( struct pvclock_vsyscall_time_info ) ) ) + 1 ) - 1 , FIX_DBGP_BASE , FIX_EARLYCON_MEM_BASE , FIX_APIC_BASE , FIX_IO_APIC_BASE_0 , FIX_IO_APIC_BASE_END = FIX_IO_APIC_BASE_0 + 128 - 1 , FIX_PARAVIRT_BOOTMAP , FIX_TEXT_POKE1 , FIX_TEXT_POKE0 , __end_of_permanent_fixed_addresses , FIX_BTMAP_END = ( __end_of_permanent_fixed_addresses ^ ( __end_of_permanent_fixed_addresses + ( 64 * 4 ) - 1 ) ) & - 512 ? __end_of_permanent_fixed_addresses + ( 64 * 4 ) - ( __end_of_permanent_fixed_addresses & ( ( 64 * 4 ) - 1 ) ) : __end_of_permanent_fixed_addresses , FIX_BTMAP_BEGIN = FIX_BTMAP_END + ( 64 * 4 ) - 1 , FIX_TBOOT_BASE , __end_of_fixed_addresses } ;
struct apic { char * name ; int ( * probe ) ( void ) ; int ( * acpi_madt_oem_check ) ( char * oem_id , char * oem_table_id ) ; int ( * apic_id_valid ) ( int apicid ) ; int ( * apic_id_registered ) ( void ) ; u32 irq_delivery_mode ; u32 irq_dest_mode ; const struct cpumask * ( * target_cpus ) ( void ) ; int disable_esr ; int dest_logical ; unsigned long ( * check_apicid_used ) ( physid_mask_t * map , int apicid ) ; unsigned long ( * check_apicid_present ) ( int apicid ) ; void ( * vector_allocation_domain ) ( int cpu , struct cpumask * retmask , const struct cpumask * mask ) ; void ( * init_apic_ldr ) ( void ) ; void ( * ioapic_phys_id_map ) ( physid_mask_t * phys_map , physid_mask_t * retmap ) ; void ( * setup_apic_routing ) ( void ) ; int ( * multi_timer_check ) ( int apic , int irq ) ; int ( * cpu_present_to_apicid ) ( int mps_cpu ) ; void ( * apicid_to_cpu_present ) ( int phys_apicid , physid_mask_t * retmap ) ; void ( * setup_portio_remap ) ( void ) ; int ( * check_phys_apicid_present ) ( int phys_apicid ) ; void ( * enable_apic_mode ) ( void ) ; int ( * phys_pkg_id ) ( int cpuid_apic , int index_msb ) ; int ( * mps_oem_check ) ( struct mpc_table * mpc , char * oem , char * productid ) ; unsigned int ( * get_apic_id ) ( unsigned long x ) ; unsigned long ( * set_apic_id ) ( unsigned int id ) ; unsigned long apic_id_mask ; int ( * cpu_mask_to_apicid_and ) ( const struct cpumask * cpumask , const struct cpumask * andmask , unsigned int * apicid ) ; void ( * send_IPI_mask ) ( const struct cpumask * mask , int vector ) ; void ( * send_IPI_mask_allbutself ) ( const struct cpumask * mask , int vector ) ; void ( * send_IPI_allbutself ) ( int vector ) ; void ( * send_IPI_all ) ( int vector ) ; void ( * send_IPI_self ) ( int vector ) ; int ( * wakeup_secondary_cpu ) ( int apicid , unsigned long start_eip ) ; int trampoline_phys_low ; int trampoline_phys_high ; void ( * wait_for_init_deassert ) ( atomic_t * deassert ) ; void ( * smp_callin_clear_local_apic ) ( void ) ; void ( * inquire_remote_apic ) ( int apicid ) ; u32 ( * read ) ( u32 reg ) ; void ( * write ) ( u32 reg , u32 v ) ; void ( * eoi_write ) ( u32 reg , u32 v ) ; u64 ( * icr_read ) ( void ) ; void ( * icr_write ) ( u32 low , u32 high ) ; void ( * wait_icr_idle ) ( void ) ; u32 ( * safe_wait_icr_idle ) ( void ) ; } ;
typedef void * ( * pcpu_fc_alloc_fn_t ) ( unsigned int cpu , size_t size , size_t align ) ;
typedef void ( * pcpu_fc_free_fn_t ) ( void * ptr , size_t size ) ;
struct vm_area_struct ;
struct ctl_table_header ;
typedef int proc_handler ( struct ctl_table * ctl , int write , void * buffer , size_t * lenp , loff_t * ppos ) ;
struct ctl_table_header { union { struct { struct ctl_table * ctl_table ; int used ; int count ; int nreg ; } ; struct callback_head rcu ; } ; struct completion * unregistering ; struct ctl_table * ctl_table_arg ; struct ctl_table_root * root ; struct ctl_table_set * set ; struct ctl_dir * parent ; struct ctl_node * node ; } ;
typedef struct elf32_rel { Elf32_Addr r_offset ; Elf32_Word r_info ; } Elf32_Rel ;
typedef struct elf64_rel { Elf64_Addr r_offset ; Elf64_Xword r_info ; } Elf64_Rel ;
typedef struct elf32_rela { Elf32_Addr r_offset ; Elf32_Word r_info ; Elf32_Sword r_addend ; } Elf32_Rela ;
typedef struct elf64_rela { Elf64_Addr r_offset ; Elf64_Xword r_info ; Elf64_Sxword r_addend ; } Elf64_Rela ;
typedef struct elf32_sym { Elf32_Word st_name ; Elf32_Addr st_value ; Elf32_Word st_size ; unsigned char st_info ; unsigned char st_other ; Elf32_Half st_shndx ; } Elf32_Sym ;
typedef struct elf64_sym { Elf64_Word st_name ; unsigned char st_info ; unsigned char st_other ; Elf64_Half st_shndx ; Elf64_Addr st_value ; Elf64_Xword st_size ; } Elf64_Sym ;
typedef struct elf32_hdr { unsigned char e_ident [ 16 ] ; Elf32_Half e_type ; Elf32_Half e_machine ; Elf32_Word e_version ; Elf32_Addr e_entry ; Elf32_Off e_phoff ; Elf32_Off e_shoff ; Elf32_Word e_flags ; Elf32_Half e_ehsize ; Elf32_Half e_phentsize ; Elf32_Half e_phnum ; Elf32_Half e_shentsize ; Elf32_Half e_shnum ; Elf32_Half e_shstrndx ; } Elf32_Ehdr ;
typedef struct elf64_hdr { unsigned char e_ident [ 16 ] ; Elf64_Half e_type ; Elf64_Half e_machine ; Elf64_Word e_version ; Elf64_Addr e_entry ; Elf64_Off e_phoff ; Elf64_Off e_shoff ; Elf64_Word e_flags ; Elf64_Half e_ehsize ; Elf64_Half e_phentsize ; Elf64_Half e_phnum ; Elf64_Half e_shentsize ; Elf64_Half e_shnum ; Elf64_Half e_shstrndx ; } Elf64_Ehdr ;
typedef struct elf32_phdr { Elf32_Word p_type ; Elf32_Off p_offset ; Elf32_Addr p_vaddr ; Elf32_Addr p_paddr ; Elf32_Word p_filesz ; Elf32_Word p_memsz ; Elf32_Word p_flags ; Elf32_Word p_align ; } Elf32_Phdr ;
typedef struct elf64_phdr { Elf64_Word p_type ; Elf64_Word p_flags ; Elf64_Off p_offset ; Elf64_Addr p_vaddr ; Elf64_Addr p_paddr ; Elf64_Xword p_filesz ; Elf64_Xword p_memsz ; Elf64_Xword p_align ; } Elf64_Phdr ;
typedef struct elf32_shdr { Elf32_Word sh_name ; Elf32_Word sh_type ; Elf32_Word sh_flags ; Elf32_Addr sh_addr ; Elf32_Off sh_offset ; Elf32_Word sh_size ; Elf32_Word sh_link ; Elf32_Word sh_info ; Elf32_Word sh_addralign ; Elf32_Word sh_entsize ; } Elf32_Shdr ;
typedef struct elf64_shdr { Elf64_Word sh_name ; Elf64_Word sh_type ; Elf64_Xword sh_flags ; Elf64_Addr sh_addr ; Elf64_Off sh_offset ; Elf64_Xword sh_size ; Elf64_Word sh_link ; Elf64_Word sh_info ; Elf64_Xword sh_addralign ; Elf64_Xword sh_entsize ; } Elf64_Shdr ;
typedef struct elf32_note { Elf32_Word n_namesz ; Elf32_Word n_descsz ; Elf32_Word n_type ; } Elf32_Nhdr ;
typedef struct elf64_note { Elf64_Word n_namesz ; Elf64_Word n_descsz ; Elf64_Word n_type ; } Elf64_Nhdr ;
struct kobject ;
struct kobject ;
struct attribute_group { const char * name ; umode_t ( * is_visible ) ( struct kobject * , struct attribute * , int ) ; struct attribute * * attrs ; } ;
struct vm_area_struct ;
struct bin_attribute { struct attribute attr ; size_t size ; void * private_ ; ssize_t ( * read ) ( struct file * , struct kobject * , struct bin_attribute * , char * , loff_t , size_t ) ; ssize_t ( * write ) ( struct file * , struct kobject * , struct bin_attribute * , char * , loff_t , size_t ) ; int ( * mmap ) ( struct file * , struct kobject * , struct bin_attribute * attr , struct vm_area_struct * vma ) ; } ;
struct sysfs_ops { ssize_t ( * show ) ( struct kobject * , struct attribute * , char * ) ; ssize_t ( * store ) ( struct kobject * , struct attribute * , const char * , size_t ) ; const void * ( * namespace_ ) ( struct kobject * , const struct attribute * ) ; } ;
struct kobject { const char * name ; struct list_head entry ; struct kobject * parent ; struct kset * kset ; struct kobj_type * ktype ; struct sysfs_dirent * sd ; struct kref kref ; unsigned int state_initialized : 1 ; unsigned int state_in_sysfs : 1 ; unsigned int state_add_uevent_sent : 1 ; unsigned int state_remove_uevent_sent : 1 ; unsigned int uevent_suppress : 1 ; } ;
struct kobj_attribute { struct attribute attr ; ssize_t ( * show ) ( struct kobject * kobj , struct kobj_attribute * attr , char * buf ) ; ssize_t ( * store ) ( struct kobject * kobj , struct kobj_attribute * attr , const char * buf , size_t count ) ; } ;
struct static_key_deferred { struct static_key key ; } ;
struct tracepoint ;
struct tracepoint { const char * name ; struct static_key key ; void ( * regfunc ) ( void ) ; void ( * unregfunc ) ( void ) ; struct tracepoint_func * funcs ; } ;
struct module_attribute { struct attribute attr ; ssize_t ( * show ) ( struct module_attribute * , struct module_kobject * , char * ) ; ssize_t ( * store ) ( struct module_attribute * , struct module_kobject * , const char * , size_t count ) ; void ( * setup ) ( struct module * , const char * ) ; int ( * test ) ( struct module * ) ; void ( * free ) ( struct module * ) ; } ;
struct timerqueue_node { struct rb_node node ; ktime_t expires ; } ;
struct qstr { union { struct { u32 hash ; u32 len ; ; } ; u64 hash_len ; } ; const unsigned char * name ; } ;
struct dentry_operations { int ( * d_revalidate ) ( struct dentry * , unsigned int ) ; int ( * d_hash ) ( const struct dentry * , const struct inode * , struct qstr * ) ; int ( * d_compare ) ( const struct dentry * , const struct inode * , const struct dentry * , const struct inode * , unsigned int , const char * , const struct qstr * ) ; int ( * d_delete ) ( const struct dentry * ) ; void ( * d_release ) ( struct dentry * ) ; void ( * d_prune ) ( struct dentry * ) ; void ( * d_iput ) ( struct dentry * , struct inode * ) ; char * ( * d_dname ) ( struct dentry * , char * , int ) ; struct vfsmount * ( * d_automount ) ( struct path * ) ; int ( * d_manage ) ( struct dentry * , bool ) ; } __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ;
struct vfs_cap_data { __le32 magic_etc ; struct { __le32 permitted ; __le32 inheritable ; } data [ 2 ] ; } ;
struct cpu_vfs_cap_data { __u32 magic_etc ; kernel_cap_t permitted ; kernel_cap_t inheritable ; } ;
struct shrinker { int ( * shrink ) ( struct shrinker * , struct shrink_control * sc ) ; int seeks ; long batch ; struct list_head list ; atomic_long_t nr_in_batch ; } ;
struct kiocb ;
struct kobject ;
struct vm_area_struct ;
typedef void ( dio_iodone_t ) ( struct kiocb * iocb , loff_t offset , ssize_t bytes , void * private_ , int ret , bool is_async ) ;
typedef projid_t kprojid_t ;
typedef struct { size_t written ; size_t count ; union { char * buf ; void * data ; } arg ; int error ; } read_descriptor_t ;
typedef int ( * filldir_t ) ( void * , const char * , int , loff_t , u64 , unsigned ) ;
struct super_operations { struct inode * ( * alloc_inode ) ( struct super_block * sb ) ; void ( * destroy_inode ) ( struct inode * ) ; void ( * dirty_inode ) ( struct inode * , int flags ) ; int ( * write_inode ) ( struct inode * , struct writeback_control * wbc ) ; int ( * drop_inode ) ( struct inode * ) ; void ( * evict_inode ) ( struct inode * ) ; void ( * put_super ) ( struct super_block * ) ; int ( * sync_fs ) ( struct super_block * sb , int wait ) ; int ( * freeze_fs ) ( struct super_block * ) ; int ( * unfreeze_fs ) ( struct super_block * ) ; int ( * statfs ) ( struct dentry * , struct kstatfs * ) ; int ( * remount_fs ) ( struct super_block * , int * , char * ) ; void ( * umount_begin ) ( struct super_block * ) ; int ( * show_options ) ( struct seq_file * , struct dentry * ) ; int ( * show_devname ) ( struct seq_file * , struct dentry * ) ; int ( * show_path ) ( struct seq_file * , struct dentry * ) ; int ( * show_stats ) ( struct seq_file * , struct dentry * ) ; ssize_t ( * quota_read ) ( struct super_block * , int , char * , size_t , loff_t ) ; ssize_t ( * quota_write ) ( struct super_block * , int , const char * , size_t , loff_t ) ; int ( * bdev_try_to_free_page ) ( struct super_block * , struct page * , gfp_t ) ; int ( * nr_cached_objects ) ( struct super_block * ) ; void ( * free_cached_objects ) ( struct super_block * , int ) ; } ;
typedef void ( dio_submit_t ) ( int rw , struct bio * bio , struct inode * inode , loff_t file_offset ) ;
typedef int ( read_proc_t ) ( char * page , char * * start , off_t off , int count , int * eof , void * data ) ;
struct ctl_table_header ;
struct sigaction { __sighandler_t sa_handler ; unsigned long sa_flags ; __sigrestore_t sa_restorer ; sigset_t sa_mask ; } ;
typedef struct sigaltstack { void * ss_sp ; int ss_flags ; size_t ss_size ; } stack_t ;
struct klist_node ;
struct klist_node { void * n_klist ; struct list_head n_node ; struct kref n_ref ; } ;
struct device_driver ;
struct class_ ;
struct bus_type ;
struct bus_attribute { struct attribute attr ; ssize_t ( * show ) ( struct bus_type * bus , char * buf ) ; ssize_t ( * store ) ( struct bus_type * bus , const char * buf , size_t count ) ; } ;
struct bus_type { const char * name ; const char * dev_name ; struct device * dev_root ; struct bus_attribute * bus_attrs ; struct device_attribute * dev_attrs ; struct driver_attribute * drv_attrs ; int ( * match ) ( struct device * dev , struct device_driver * drv ) ; int ( * uevent ) ( struct device * dev , struct kobj_uevent_env * env ) ; int ( * probe ) ( struct device * dev ) ; int ( * remove ) ( struct device * dev ) ; void ( * shutdown ) ( struct device * dev ) ; int ( * suspend ) ( struct device * dev , pm_message_t state ) ; int ( * resume ) ( struct device * dev ) ; const struct dev_pm_ops * pm ; struct iommu_ops * iommu_ops ; struct subsys_private * p ; } ;
struct device_driver { const char * name ; struct bus_type * bus ; struct module * owner ; const char * mod_name ; bool suppress_bind_attrs ; const struct of_device_id * of_match_table ; const struct acpi_device_id * acpi_match_table ; int ( * probe ) ( struct device * dev ) ; int ( * remove ) ( struct device * dev ) ; void ( * shutdown ) ( struct device * dev ) ; int ( * suspend ) ( struct device * dev , pm_message_t state ) ; int ( * resume ) ( struct device * dev ) ; const struct attribute_group * * groups ; const struct dev_pm_ops * pm ; struct driver_private * p ; } ;
struct driver_attribute { struct attribute attr ; ssize_t ( * show ) ( struct device_driver * driver , char * buf ) ; ssize_t ( * store ) ( struct device_driver * driver , const char * buf , size_t count ) ; } ;
struct class_ { const char * name ; struct module * owner ; struct class_attribute * class_attrs ; struct device_attribute * dev_attrs ; struct bin_attribute * dev_bin_attrs ; struct kobject * dev_kobj ; int ( * dev_uevent ) ( struct device * dev , struct kobj_uevent_env * env ) ; char * ( * devnode ) ( struct device * dev , umode_t * mode ) ; void ( * class_release ) ( struct class_ * class_ ) ; void ( * dev_release ) ( struct device * dev ) ; int ( * suspend ) ( struct device * dev , pm_message_t state ) ; int ( * resume ) ( struct device * dev ) ; const struct kobj_ns_type_operations * ns_type ; const void * ( * namespace_ ) ( struct device * dev ) ; const struct dev_pm_ops * pm ; struct subsys_private * p ; } ;
struct class_attribute { struct attribute attr ; ssize_t ( * show ) ( struct class_ * class_ , struct class_attribute * attr , char * buf ) ; ssize_t ( * store ) ( struct class_ * class_ , struct class_attribute * attr , const char * buf , size_t count ) ; const void * ( * namespace_ ) ( struct class_ * class_ , const struct class_attribute * attr ) ; } ;
struct device_type { const char * name ; const struct attribute_group * * groups ; int ( * uevent ) ( struct device * dev , struct kobj_uevent_env * env ) ; char * ( * devnode ) ( struct device * dev , umode_t * mode ) ; void ( * release ) ( struct device * dev ) ; const struct dev_pm_ops * pm ; } ;
struct device_attribute { struct attribute attr ; ssize_t ( * show ) ( struct device * dev , struct device_attribute * attr , char * buf ) ; ssize_t ( * store ) ( struct device * dev , struct device_attribute * attr , const char * buf , size_t count ) ; } ;
struct pci_host_bridge_window { struct list_head list ; struct resource * res ; resource_size_t offset ; } ;
struct pci_bus_region { resource_size_t start ; resource_size_t end ; } ;
struct pci_error_handlers { pci_ers_result_t ( * error_detected ) ( struct pci_dev * dev , enum pci_channel_state error ) ; pci_ers_result_t ( * mmio_enabled ) ( struct pci_dev * dev ) ; pci_ers_result_t ( * link_reset ) ( struct pci_dev * dev ) ; pci_ers_result_t ( * slot_reset ) ( struct pci_dev * dev ) ; void ( * resume ) ( struct pci_dev * dev ) ; } ;
typedef int ( * arch_set_vga_state_t ) ( struct pci_dev * pdev , bool decode , unsigned int command_bits , u32 flags ) ;
struct vm_area_struct ;
struct uprobe_consumer { int ( * handler ) ( struct uprobe_consumer * self , struct pt_regs * regs ) ; bool ( * filter ) ( struct uprobe_consumer * self , struct task_struct * task ) ; struct uprobe_consumer * next ; } ;
struct vm_area_struct { unsigned long vm_start ; unsigned long vm_end ; struct vm_area_struct * vm_next , * vm_prev ; struct rb_node vm_rb ; unsigned long rb_subtree_gap ; struct mm_struct * vm_mm ; pgprot_t vm_page_prot ; unsigned long vm_flags ; union { struct { struct rb_node rb ; unsigned long rb_subtree_last ; } linear ; struct list_head nonlinear ; } shared ; struct list_head anon_vma_chain ; struct anon_vma * anon_vma ; const struct vm_operations_struct * vm_ops ; unsigned long vm_pgoff ; struct file * vm_file ; void * vm_private_data ; struct mempolicy * vm_policy ; } ;
struct mm_rss_stat { atomic_long_t count [ NR_MM_COUNTERS ] ; } ;
struct vm_area_struct ;
struct vm_operations_struct { void ( * open ) ( struct vm_area_struct * area ) ; void ( * close ) ( struct vm_area_struct * area ) ; int ( * fault ) ( struct vm_area_struct * vma , struct vm_fault * vmf ) ; int ( * page_mkwrite ) ( struct vm_area_struct * vma , struct vm_fault * vmf ) ; int ( * access ) ( struct vm_area_struct * vma , unsigned long addr , void * buf , int len , int write ) ; int ( * set_policy ) ( struct vm_area_struct * vma , struct mempolicy * new_ ) ; struct mempolicy * ( * get_policy ) ( struct vm_area_struct * vma , unsigned long addr ) ; int ( * migrate ) ( struct vm_area_struct * vma , const nodemask_t * from , const nodemask_t * to , unsigned long flags ) ; int ( * remap_pages ) ( struct vm_area_struct * vma , unsigned long addr , unsigned long size , unsigned long pgoff ) ; } ;
struct dma_map_ops { void * ( * alloc ) ( struct device * dev , size_t size , dma_addr_t * dma_handle , gfp_t gfp , struct dma_attrs * attrs ) ; void ( * free ) ( struct device * dev , size_t size , void * vaddr , dma_addr_t dma_handle , struct dma_attrs * attrs ) ; int ( * mmap ) ( struct device * , struct vm_area_struct * , void * , dma_addr_t , size_t , struct dma_attrs * attrs ) ; int ( * get_sgtable ) ( struct device * dev , struct sg_table * sgt , void * , dma_addr_t , size_t , struct dma_attrs * attrs ) ; dma_addr_t ( * map_page ) ( struct device * dev , struct page * page , unsigned long offset , size_t size , enum dma_data_direction dir , struct dma_attrs * attrs ) ; void ( * unmap_page ) ( struct device * dev , dma_addr_t dma_handle , size_t size , enum dma_data_direction dir , struct dma_attrs * attrs ) ; int ( * map_sg ) ( struct device * dev , struct scatterlist * sg , int nents , enum dma_data_direction dir , struct dma_attrs * attrs ) ; void ( * unmap_sg ) ( struct device * dev , struct scatterlist * sg , int nents , enum dma_data_direction dir , struct dma_attrs * attrs ) ; void ( * sync_single_for_cpu ) ( struct device * dev , dma_addr_t dma_handle , size_t size , enum dma_data_direction dir ) ; void ( * sync_single_for_device ) ( struct device * dev , dma_addr_t dma_handle , size_t size , enum dma_data_direction dir ) ; void ( * sync_sg_for_cpu ) ( struct device * dev , struct scatterlist * sg , int nents , enum dma_data_direction dir ) ; void ( * sync_sg_for_device ) ( struct device * dev , struct scatterlist * sg , int nents , enum dma_data_direction dir ) ; int ( * mapping_error ) ( struct device * dev , dma_addr_t dma_addr ) ; int ( * dma_supported ) ( struct device * dev , u64 mask ) ; int ( * set_dma_mask ) ( struct device * dev , u64 mask ) ; int is_phys ; } ;
struct bus_type ;
struct semid64_ds { struct ipc64_perm sem_perm ; __kernel_time_t sem_otime ; unsigned long __unused1 ; __kernel_time_t sem_ctime ; unsigned long __unused2 ; unsigned long sem_nsems ; unsigned long __unused3 ; unsigned long __unused4 ; } ;
struct kiocb { struct list_head ki_run_list ; unsigned long ki_flags ; int ki_users ; unsigned ki_key ; struct file * ki_filp ; struct kioctx * ki_ctx ; int ( * ki_cancel ) ( struct kiocb * , struct io_event * ) ; ssize_t ( * ki_retry ) ( struct kiocb * ) ; void ( * ki_dtor ) ( struct kiocb * ) ; union { void * user ; struct task_struct * tsk ; } ki_obj ; __u64 ki_user_data ; loff_t ki_pos ; void * private_ ; unsigned short ki_opcode ; size_t ki_nbytes ; char * ki_buf ; size_t ki_left ; struct iovec ki_inline_vec ; struct iovec * ki_iovec ; unsigned long ki_nr_segs ; unsigned long ki_cur_seg ; struct list_head ki_list ; struct list_head ki_batch ; struct eventfd_ctx * ki_eventfd ; } ;
struct sched_domain { struct sched_domain * parent ; struct sched_domain * child ; struct sched_group * groups ; unsigned long min_interval ; unsigned long max_interval ; unsigned int busy_factor ; unsigned int imbalance_pct ; unsigned int cache_nice_tries ; unsigned int busy_idx ; unsigned int idle_idx ; unsigned int newidle_idx ; unsigned int wake_idx ; unsigned int forkexec_idx ; unsigned int smt_gain ; int flags ; int level ; unsigned long last_balance ; unsigned int balance_interval ; unsigned int nr_balance_failed ; u64 last_update ; unsigned int lb_count [ CPU_MAX_IDLE_TYPES ] ; unsigned int lb_failed [ CPU_MAX_IDLE_TYPES ] ; unsigned int lb_balanced [ CPU_MAX_IDLE_TYPES ] ; unsigned int lb_imbalance [ CPU_MAX_IDLE_TYPES ] ; unsigned int lb_gained [ CPU_MAX_IDLE_TYPES ] ; unsigned int lb_hot_gained [ CPU_MAX_IDLE_TYPES ] ; unsigned int lb_nobusyg [ CPU_MAX_IDLE_TYPES ] ; unsigned int lb_nobusyq [ CPU_MAX_IDLE_TYPES ] ; unsigned int alb_count ; unsigned int alb_failed ; unsigned int alb_pushed ; unsigned int sbe_count ; unsigned int sbe_balanced ; unsigned int sbe_pushed ; unsigned int sbf_count ; unsigned int sbf_balanced ; unsigned int sbf_pushed ; unsigned int ttwu_wake_remote ; unsigned int ttwu_move_affine ; unsigned int ttwu_move_balance ; char * name ; union { void * private_ ; struct callback_head rcu ; } ; unsigned int span_weight ; unsigned long span [ 0 ] ; } ;
struct sched_domain ;
struct sched_class { const struct sched_class * next ; void ( * enqueue_task ) ( struct rq * rq , struct task_struct * p , int flags ) ; void ( * dequeue_task ) ( struct rq * rq , struct task_struct * p , int flags ) ; void ( * yield_task ) ( struct rq * rq ) ; bool ( * yield_to_task ) ( struct rq * rq , struct task_struct * p , bool preempt ) ; void ( * check_preempt_curr ) ( struct rq * rq , struct task_struct * p , int flags ) ; struct task_struct * ( * pick_next_task ) ( struct rq * rq ) ; void ( * put_prev_task ) ( struct rq * rq , struct task_struct * p ) ; int ( * select_task_rq ) ( struct task_struct * p , int sd_flag , int flags ) ; void ( * migrate_task_rq ) ( struct task_struct * p , int next_cpu ) ; void ( * pre_schedule ) ( struct rq * this_rq , struct task_struct * task ) ; void ( * post_schedule ) ( struct rq * this_rq ) ; void ( * task_waking ) ( struct task_struct * task ) ; void ( * task_woken ) ( struct rq * this_rq , struct task_struct * task ) ; void ( * set_cpus_allowed ) ( struct task_struct * p , const struct cpumask * newmask ) ; void ( * rq_online ) ( struct rq * rq ) ; void ( * rq_offline ) ( struct rq * rq ) ; void ( * set_curr_task ) ( struct rq * rq ) ; void ( * task_tick ) ( struct rq * rq , struct task_struct * p , int queued ) ; void ( * task_fork ) ( struct task_struct * p ) ; void ( * switched_from ) ( struct rq * this_rq , struct task_struct * task ) ; void ( * switched_to ) ( struct rq * this_rq , struct task_struct * task ) ; void ( * prio_changed ) ( struct rq * this_rq , struct task_struct * task , int oldprio ) ; unsigned int ( * get_rr_interval ) ( struct rq * rq , struct task_struct * task ) ; void ( * task_move_group ) ( struct task_struct * p , int on_rq ) ; } ;
struct irq_chip { const char * name ; unsigned int ( * irq_startup ) ( struct irq_data * data ) ; void ( * irq_shutdown ) ( struct irq_data * data ) ; void ( * irq_enable ) ( struct irq_data * data ) ; void ( * irq_disable ) ( struct irq_data * data ) ; void ( * irq_ack ) ( struct irq_data * data ) ; void ( * irq_mask ) ( struct irq_data * data ) ; void ( * irq_mask_ack ) ( struct irq_data * data ) ; void ( * irq_unmask ) ( struct irq_data * data ) ; void ( * irq_eoi ) ( struct irq_data * data ) ; int ( * irq_set_affinity ) ( struct irq_data * data , const struct cpumask * dest , bool force ) ; int ( * irq_retrigger ) ( struct irq_data * data ) ; int ( * irq_set_type ) ( struct irq_data * data , unsigned int flow_type ) ; int ( * irq_set_wake ) ( struct irq_data * data , unsigned int on ) ; void ( * irq_bus_lock ) ( struct irq_data * data ) ; void ( * irq_bus_sync_unlock ) ( struct irq_data * data ) ; void ( * irq_cpu_online ) ( struct irq_data * data ) ; void ( * irq_cpu_offline ) ( struct irq_data * data ) ; void ( * irq_suspend ) ( struct irq_data * data ) ; void ( * irq_resume ) ( struct irq_data * data ) ; void ( * irq_pm_shutdown ) ( struct irq_data * data ) ; void ( * irq_print_chip ) ( struct irq_data * data , struct seq_file * p ) ; unsigned long flags ; } ;
struct dev_pm_qos_request { enum dev_pm_qos_req_type type ; union { struct plist_node pnode ; struct pm_qos_flags_request flr ; } data ; struct device * dev ; } ;
struct dma_interleaved_template { dma_addr_t src_start ; dma_addr_t dst_start ; enum dma_transfer_direction dir ; bool src_inc ; bool dst_inc ; bool src_sgl ; bool dst_sgl ; size_t numf ; size_t frame_size ; struct data_chunk sgl [ 0 ] ; } ;
typedef bool ( * dma_filter_fn ) ( struct dma_chan * chan , void * filter_param ) ;
struct dma_async_tx_descriptor { dma_cookie_t cookie ; enum dma_ctrl_flags flags ; dma_addr_t phys ; struct dma_chan * chan ; dma_cookie_t ( * tx_submit ) ( struct dma_async_tx_descriptor * tx ) ; dma_async_tx_callback callback ; void * callback_param ; } ;
struct dma_device { unsigned int chancnt ; unsigned int privatecnt ; struct list_head channels ; struct list_head global_node ; dma_cap_mask_t cap_mask ; unsigned short max_xor ; unsigned short max_pq ; u8 copy_align ; u8 xor_align ; u8 pq_align ; u8 fill_align ; int dev_id ; struct device * dev ; int ( * device_alloc_chan_resources ) ( struct dma_chan * chan ) ; void ( * device_free_chan_resources ) ( struct dma_chan * chan ) ; struct dma_async_tx_descriptor * ( * device_prep_dma_memcpy ) ( struct dma_chan * chan , dma_addr_t dest , dma_addr_t src , size_t len , unsigned long flags ) ; struct dma_async_tx_descriptor * ( * device_prep_dma_xor ) ( struct dma_chan * chan , dma_addr_t dest , dma_addr_t * src , unsigned int src_cnt , size_t len , unsigned long flags ) ; struct dma_async_tx_descriptor * ( * device_prep_dma_xor_val ) ( struct dma_chan * chan , dma_addr_t * src , unsigned int src_cnt , size_t len , enum sum_check_flags * result , unsigned long flags ) ; struct dma_async_tx_descriptor * ( * device_prep_dma_pq ) ( struct dma_chan * chan , dma_addr_t * dst , dma_addr_t * src , unsigned int src_cnt , const unsigned char * scf , size_t len , unsigned long flags ) ; struct dma_async_tx_descriptor * ( * device_prep_dma_pq_val ) ( struct dma_chan * chan , dma_addr_t * pq , dma_addr_t * src , unsigned int src_cnt , const unsigned char * scf , size_t len , enum sum_check_flags * pqres , unsigned long flags ) ; struct dma_async_tx_descriptor * ( * device_prep_dma_memset ) ( struct dma_chan * chan , dma_addr_t dest , int value , size_t len , unsigned long flags ) ; struct dma_async_tx_descriptor * ( * device_prep_dma_interrupt ) ( struct dma_chan * chan , unsigned long flags ) ; struct dma_async_tx_descriptor * ( * device_prep_dma_sg ) ( struct dma_chan * chan , struct scatterlist * dst_sg , unsigned int dst_nents , struct scatterlist * src_sg , unsigned int src_nents , unsigned long flags ) ; struct dma_async_tx_descriptor * ( * device_prep_slave_sg ) ( struct dma_chan * chan , struct scatterlist * sgl , unsigned int sg_len , enum dma_transfer_direction direction , unsigned long flags , void * context ) ; struct dma_async_tx_descriptor * ( * device_prep_dma_cyclic ) ( struct dma_chan * chan , dma_addr_t buf_addr , size_t buf_len , size_t period_len , enum dma_transfer_direction direction , unsigned long flags , void * context ) ; struct dma_async_tx_descriptor * ( * device_prep_interleaved_dma ) ( struct dma_chan * chan , struct dma_interleaved_template * xt , unsigned long flags ) ; int ( * device_control ) ( struct dma_chan * chan , enum dma_ctrl_cmd cmd , unsigned long arg ) ; enum dma_status ( * device_tx_status ) ( struct dma_chan * chan , dma_cookie_t cookie , struct dma_tx_state * txstate ) ; void ( * device_issue_pending ) ( struct dma_chan * chan ) ; } ;
struct if_settings { unsigned int type ; unsigned int size ; union { raw_hdlc_proto * raw_hdlc ; cisco_proto * cisco ; fr_proto * fr ; fr_proto_pvc * fr_pvc ; fr_proto_pvc_info * fr_pvc_info ; sync_serial_settings * sync ; te1_settings * te1 ; } ifs_ifsu ; } ;
struct compat_statfs { int f_type ; int f_bsize ; int f_blocks ; int f_bfree ; int f_bavail ; int f_files ; int f_ffree ; compat_fsid_t f_fsid ; int f_namelen ; int f_frsize ; int f_flags ; int f_spare [ 4 ] ; } ;
typedef union compat_sigval { compat_int_t sival_int ; compat_uptr_t sival_ptr ; } compat_sigval_t ;
struct compat_semid64_ds { struct compat_ipc64_perm sem_perm ; compat_time_t sem_otime ; compat_ulong_t __unused1 ; compat_time_t sem_ctime ; compat_ulong_t __unused2 ; compat_ulong_t sem_nsems ; compat_ulong_t __unused3 ; compat_ulong_t __unused4 ; } ;
struct compat_msqid64_ds { struct compat_ipc64_perm msg_perm ; compat_time_t msg_stime ; compat_ulong_t __unused1 ; compat_time_t msg_rtime ; compat_ulong_t __unused2 ; compat_time_t msg_ctime ; compat_ulong_t __unused3 ; compat_ulong_t msg_cbytes ; compat_ulong_t msg_qnum ; compat_ulong_t msg_qbytes ; compat_pid_t msg_lspid ; compat_pid_t msg_lrpid ; compat_ulong_t __unused4 ; compat_ulong_t __unused5 ; } ;
struct compat_shmid64_ds { struct compat_ipc64_perm shm_perm ; compat_size_t shm_segsz ; compat_time_t shm_atime ; compat_ulong_t __unused1 ; compat_time_t shm_dtime ; compat_ulong_t __unused2 ; compat_time_t shm_ctime ; compat_ulong_t __unused3 ; compat_pid_t shm_cpid ; compat_pid_t shm_lpid ; compat_ulong_t shm_nattch ; compat_ulong_t __unused4 ; compat_ulong_t __unused5 ; } ;
typedef struct compat_sigaltstack { compat_uptr_t ss_sp ; int ss_flags ; compat_size_t ss_size ; } compat_stack_t ;
struct compat_itimerspec { struct compat_timespec it_interval ; struct compat_timespec it_value ; } ;
struct compat_itimerval { struct compat_timeval it_interval ; struct compat_timeval it_value ; } ;
struct compat_timex { compat_uint_t modes ; compat_long_t offset ; compat_long_t freq ; compat_long_t maxerror ; compat_long_t esterror ; compat_int_t status ; compat_long_t constant ; compat_long_t precision ; compat_long_t tolerance ; struct compat_timeval time ; compat_long_t tick ; compat_long_t ppsfreq ; compat_long_t jitter ; compat_int_t shift ; compat_long_t stabil ; compat_long_t jitcnt ; compat_long_t calcnt ; compat_long_t errcnt ; compat_long_t stbcnt ; compat_int_t tai ; compat_int_t : 32 ; compat_int_t : 32 ; compat_int_t : 32 ; compat_int_t : 32 ; compat_int_t : 32 ; compat_int_t : 32 ; compat_int_t : 32 ; compat_int_t : 32 ; compat_int_t : 32 ; compat_int_t : 32 ; compat_int_t : 32 ; } ;
typedef struct { compat_sigset_word sig [ ( 64 / 32 ) ] ; } compat_sigset_t ;
struct compat_rusage { struct compat_timeval ru_utime ; struct compat_timeval ru_stime ; compat_long_t ru_maxrss ; compat_long_t ru_ixrss ; compat_long_t ru_idrss ; compat_long_t ru_isrss ; compat_long_t ru_minflt ; compat_long_t ru_majflt ; compat_long_t ru_nswap ; compat_long_t ru_inblock ; compat_long_t ru_oublock ; compat_long_t ru_msgsnd ; compat_long_t ru_msgrcv ; compat_long_t ru_nsignals ; compat_long_t ru_nvcsw ; compat_long_t ru_nivcsw ; } ;
struct compat_robust_list_head { struct compat_robust_list list ; compat_long_t futex_offset ; compat_uptr_t list_op_pending ; } ;
struct compat_statfs ;
struct vm_area_struct ;
struct kiocb ;
struct proto_ops { int family ; struct module * owner ; int ( * release ) ( struct socket * sock ) ; int ( * bind ) ( struct socket * sock , struct sockaddr * myaddr , int sockaddr_len ) ; int ( * connect ) ( struct socket * sock , struct sockaddr * vaddr , int sockaddr_len , int flags ) ; int ( * socketpair ) ( struct socket * sock1 , struct socket * sock2 ) ; int ( * accept ) ( struct socket * sock , struct socket * newsock , int flags ) ; int ( * getname ) ( struct socket * sock , struct sockaddr * addr , int * sockaddr_len , int peer ) ; unsigned int ( * poll ) ( struct file * file , struct socket * sock , struct poll_table_struct * wait ) ; int ( * ioctl ) ( struct socket * sock , unsigned int cmd , unsigned long arg ) ; int ( * compat_ioctl ) ( struct socket * sock , unsigned int cmd , unsigned long arg ) ; int ( * listen ) ( struct socket * sock , int len ) ; int ( * shutdown ) ( struct socket * sock , int flags ) ; int ( * setsockopt ) ( struct socket * sock , int level , int optname , char * optval , unsigned int optlen ) ; int ( * getsockopt ) ( struct socket * sock , int level , int optname , char * optval , int * optlen ) ; int ( * compat_setsockopt ) ( struct socket * sock , int level , int optname , char * optval , unsigned int optlen ) ; int ( * compat_getsockopt ) ( struct socket * sock , int level , int optname , char * optval , int * optlen ) ; int ( * sendmsg ) ( struct kiocb * iocb , struct socket * sock , struct msghdr * m , size_t total_len ) ; int ( * recvmsg ) ( struct kiocb * iocb , struct socket * sock , struct msghdr * m , size_t total_len , int flags ) ; int ( * mmap ) ( struct file * file , struct socket * sock , struct vm_area_struct * vma ) ; ssize_t ( * sendpage ) ( struct socket * sock , struct page * page , int offset , size_t size , int flags ) ; ssize_t ( * splice_read ) ( struct socket * sock , loff_t * ppos , struct pipe_inode_info * pipe , size_t len , unsigned int flags ) ; void ( * set_peek_off ) ( struct sock * sk , int val ) ; } ;
struct in6_addr ;
struct sk_buff ;
struct sk_buff ;
struct skb_shared_hwtstamps { ktime_t hwtstamp ; ktime_t syststamp ; } ;
struct ubuf_info { void ( * callback ) ( struct ubuf_info * , bool zerocopy_success ) ; void * ctx ; unsigned long desc ; } ;
struct sk_buff { struct sk_buff * next ; struct sk_buff * prev ; ktime_t tstamp ; struct sock * sk ; struct net_device * dev ; char cb [ 48 ] __attribute__ ( ( aligned ( 8 ) ) ) ; unsigned long _skb_refdst ; struct sec_path * sp ; unsigned int len , data_len ; __u16 mac_len , hdr_len ; union { __wsum csum ; struct { __u16 csum_start ; __u16 csum_offset ; } ; } ; __u32 priority ; ; __u8 local_df : 1 , cloned : 1 , ip_summed : 2 , nohdr : 1 , nfctinfo : 3 ; __u8 pkt_type : 3 , fclone : 2 , ipvs_property : 1 , peeked : 1 , nf_trace : 1 ; ; __be16 protocol ; void ( * destructor ) ( struct sk_buff * skb ) ; struct nf_conntrack * nfct ; struct sk_buff * nfct_reasm ; struct nf_bridge_info * nf_bridge ; int skb_iif ; __u32 rxhash ; __u16 vlan_tci ; __u16 tc_index ; __u16 tc_verd ; __u16 queue_mapping ; ; __u8 ndisc_nodetype : 2 ; __u8 pfmemalloc : 1 ; __u8 ooo_okay : 1 ; __u8 l4_rxhash : 1 ; __u8 wifi_acked_valid : 1 ; __u8 wifi_acked : 1 ; __u8 no_fcs : 1 ; __u8 head_frag : 1 ; __u8 encapsulation : 1 ; ; dma_cookie_t dma_cookie ; __u32 secmark ; union { __u32 mark ; __u32 dropcount ; __u32 avail_size ; } ; sk_buff_data_t inner_transport_header ; sk_buff_data_t inner_network_header ; sk_buff_data_t transport_header ; sk_buff_data_t network_header ; sk_buff_data_t mac_header ; sk_buff_data_t tail ; sk_buff_data_t end ; unsigned char * head , * data ; unsigned int truesize ; atomic_t users ; } ;
union ethtool_flow_union { struct ethtool_tcpip4_spec tcp_ip4_spec ; struct ethtool_tcpip4_spec udp_ip4_spec ; struct ethtool_tcpip4_spec sctp_ip4_spec ; struct ethtool_ah_espip4_spec ah_ip4_spec ; struct ethtool_ah_espip4_spec esp_ip4_spec ; struct ethtool_usrip4_spec usr_ip4_spec ; struct ethhdr ether_spec ; __u8 hdata [ 52 ] ; } ;
struct ctl_table_header ;
struct icmpmsg_mib { atomic_long_t mibs [ 512 ] ; } ;
struct icmpv6_mib_device { atomic_long_t mibs [ __ICMP6_MIB_MAX ] ; } ;
struct icmpv6msg_mib { atomic_long_t mibs [ 512 ] ; } ;
struct icmpv6msg_mib_device { atomic_long_t mibs [ 512 ] ; } ;
struct ctl_table_header ;
struct ctl_table_header ;
struct sk_buff ;
struct ctl_table_header ;
struct netns_nf_frag { struct netns_sysctl_ipv6 sysctl ; struct netns_frags frags ; } ;
struct ctl_table_header ;
struct ip_mreq { struct in_addr imr_multiaddr ; struct in_addr imr_interface ; } ;
struct ip_mreqn { struct in_addr imr_multiaddr ; struct in_addr imr_address ; int imr_ifindex ; } ;
struct in_pktinfo { int ipi_ifindex ; struct in_addr ipi_spec_dst ; struct in_addr ipi_addr ; } ;
struct sockaddr_in { __kernel_sa_family_t sin_family ; __be16 sin_port ; struct in_addr sin_addr ; unsigned char __pad [ 16 - sizeof ( short int ) - sizeof ( unsigned short int ) - sizeof ( struct in_addr ) ] ; } ;
struct in6_addr { union { __u8 u6_addr8 [ 16 ] ; __be16 u6_addr16 [ 8 ] ; __be32 u6_addr32 [ 4 ] ; } in6_u ; } ;
struct sk_buff ;
struct nf_hook_ops { struct list_head list ; nf_hookfn * hook ; struct module * owner ; u_int8_t pf ; unsigned int hooknum ; int priority ; } ;
struct nf_afinfo { unsigned short family ; __sum16 ( * checksum ) ( struct sk_buff * skb , unsigned int hook , unsigned int dataoff , u_int8_t protocol ) ; __sum16 ( * checksum_partial ) ( struct sk_buff * skb , unsigned int hook , unsigned int dataoff , unsigned int len , u_int8_t protocol ) ; int ( * route ) ( struct net * net , struct dst_entry * * dst , struct flowi * fl , bool strict ) ; void ( * saveroute ) ( const struct sk_buff * skb , struct nf_queue_entry * entry ) ; int ( * reroute ) ( struct sk_buff * skb , const struct nf_queue_entry * entry ) ; int route_key_size ; } ;
union flowi_uli { struct { __be16 dport ; __be16 sport ; } ports ; struct { __u8 type ; __u8 code ; } icmpt ; struct { __le16 dport ; __le16 sport ; } dnports ; __be32 spi ; __be32 gre_key ; struct { __u8 type ; } mht ; } ;
struct nfq_ct_hook { size_t ( * build_size ) ( const struct nf_conn * ct ) ; int ( * build ) ( struct sk_buff * skb , struct nf_conn * ct ) ; int ( * parse ) ( const struct nlattr * attr , struct nf_conn * ct ) ; } ;
struct ip_ct_tcp { struct ip_ct_tcp_state seen [ 2 ] ; u_int8_t state ; u_int8_t last_dir ; u_int8_t retrans ; u_int8_t last_index ; u_int32_t last_seq ; u_int32_t last_ack ; u_int32_t last_end ; u_int16_t last_win ; u_int8_t last_wscale ; u_int8_t last_flags ; } ;
struct ctl_table_header ;
struct netns_ct { atomic_t count ; unsigned int expect_count ; unsigned int htable_size ; struct kmem_cache * nf_conntrack_cachep ; struct hlist_nulls_head * hash ; struct hlist_head * expect_hash ; struct hlist_nulls_head unconfirmed ; struct hlist_nulls_head dying ; struct hlist_nulls_head tmpl ; struct ip_conntrack_stat * stat ; struct nf_ct_event_notifier * nf_conntrack_event_cb ; struct nf_exp_event_notifier * nf_expect_event_cb ; int sysctl_events ; unsigned int sysctl_events_retry_timeout ; int sysctl_acct ; int sysctl_tstamp ; int sysctl_checksum ; unsigned int sysctl_log_invalid ; int sysctl_auto_assign_helper ; bool auto_assign_helper_warned ; struct nf_ip_net nf_ct_proto ; struct ctl_table_header * sysctl_header ; struct ctl_table_header * acct_sysctl_header ; struct ctl_table_header * tstamp_sysctl_header ; struct ctl_table_header * event_sysctl_header ; struct ctl_table_header * helper_sysctl_header ; char * slabname ; } ;
typedef union { __be32 a4 ; __be32 a6 [ 4 ] ; } xfrm_address_t ;
struct ctl_table_header ;
struct ctl_table_header ;
struct seq_operations ;
struct seq_operations { void * ( * start ) ( struct seq_file * m , loff_t * pos ) ; void ( * stop ) ( struct seq_file * m , void * v ) ; void * ( * next ) ( struct seq_file * m , void * v , loff_t * pos ) ; int ( * show ) ( struct seq_file * m , void * v ) ; } ;
struct ctl_table_header ;
struct dsa_switch_driver { struct list_head list ; __be16 tag_protocol ; int priv_size ; char * ( * probe ) ( struct mii_bus * bus , int sw_addr ) ; int ( * setup ) ( struct dsa_switch * ds ) ; int ( * set_addr ) ( struct dsa_switch * ds , u8 * addr ) ; int ( * phy_read ) ( struct dsa_switch * ds , int port , int regnum ) ; int ( * phy_write ) ( struct dsa_switch * ds , int port , int regnum , u16 val ) ; void ( * poll_link ) ( struct dsa_switch * ds ) ; void ( * get_strings ) ( struct dsa_switch * ds , int port , uint8_t * data ) ; void ( * get_ethtool_stats ) ( struct dsa_switch * ds , int port , uint64_t * data ) ; int ( * get_sset_count ) ( struct dsa_switch * ds ) ; } ;
struct xattr_handler { const char * prefix ; int flags ; size_t ( * list ) ( struct dentry * dentry , char * list , size_t list_size , const char * name , size_t name_len , int handler_flags ) ; int ( * get ) ( struct dentry * dentry , const char * name , void * buffer , size_t size , int handler_flags ) ; int ( * set ) ( struct dentry * dentry , const char * name , const void * buffer , size_t size , int flags , int handler_flags ) ; } ;
struct qstr ;
struct sk_buff ;
struct tpacket3_hdr { __u32 tp_next_offset ; __u32 tp_sec ; __u32 tp_nsec ; __u32 tp_snaplen ; __u32 tp_len ; __u32 tp_status ; __u16 tp_mac ; __u16 tp_net ; union { struct tpacket_hdr_variant1 hv1 ; } ; } ;
union tpacket_bd_header_u { struct tpacket_hdr_v1 bh1 ; } ;
struct sk_buff ;
struct header_ops { int ( * create ) ( struct sk_buff * skb , struct net_device * dev , unsigned short type , const void * daddr , const void * saddr , unsigned int len ) ; int ( * parse ) ( const struct sk_buff * skb , unsigned char * haddr ) ; int ( * rebuild ) ( struct sk_buff * skb ) ; int ( * cache ) ( const struct neighbour * neigh , struct hh_cache * hh , __be16 type ) ; void ( * cache_update ) ( struct hh_cache * hh , const struct net_device * dev , const unsigned char * haddr ) ; } ;
struct net_device_ops { int ( * ndo_init ) ( struct net_device * dev ) ; void ( * ndo_uninit ) ( struct net_device * dev ) ; int ( * ndo_open ) ( struct net_device * dev ) ; int ( * ndo_stop ) ( struct net_device * dev ) ; netdev_tx_t ( * ndo_start_xmit ) ( struct sk_buff * skb , struct net_device * dev ) ; u16 ( * ndo_select_queue ) ( struct net_device * dev , struct sk_buff * skb ) ; void ( * ndo_change_rx_flags ) ( struct net_device * dev , int flags ) ; void ( * ndo_set_rx_mode ) ( struct net_device * dev ) ; int ( * ndo_set_mac_address ) ( struct net_device * dev , void * addr ) ; int ( * ndo_validate_addr ) ( struct net_device * dev ) ; int ( * ndo_do_ioctl ) ( struct net_device * dev , struct ifreq * ifr , int cmd ) ; int ( * ndo_set_config ) ( struct net_device * dev , struct ifmap * map ) ; int ( * ndo_change_mtu ) ( struct net_device * dev , int new_mtu ) ; int ( * ndo_neigh_setup ) ( struct net_device * dev , struct neigh_parms * ) ; void ( * ndo_tx_timeout ) ( struct net_device * dev ) ; struct rtnl_link_stats64 * ( * ndo_get_stats64 ) ( struct net_device * dev , struct rtnl_link_stats64 * storage ) ; struct net_device_stats * ( * ndo_get_stats ) ( struct net_device * dev ) ; int ( * ndo_vlan_rx_add_vid ) ( struct net_device * dev , unsigned short vid ) ; int ( * ndo_vlan_rx_kill_vid ) ( struct net_device * dev , unsigned short vid ) ; void ( * ndo_poll_controller ) ( struct net_device * dev ) ; int ( * ndo_netpoll_setup ) ( struct net_device * dev , struct netpoll_info * info , gfp_t gfp ) ; void ( * ndo_netpoll_cleanup ) ( struct net_device * dev ) ; int ( * ndo_set_vf_mac ) ( struct net_device * dev , int queue , u8 * mac ) ; int ( * ndo_set_vf_vlan ) ( struct net_device * dev , int queue , u16 vlan , u8 qos ) ; int ( * ndo_set_vf_tx_rate ) ( struct net_device * dev , int vf , int rate ) ; int ( * ndo_set_vf_spoofchk ) ( struct net_device * dev , int vf , bool setting ) ; int ( * ndo_get_vf_config ) ( struct net_device * dev , int vf , struct ifla_vf_info * ivf ) ; int ( * ndo_set_vf_port ) ( struct net_device * dev , int vf , struct nlattr * port [ ] ) ; int ( * ndo_get_vf_port ) ( struct net_device * dev , int vf , struct sk_buff * skb ) ; int ( * ndo_setup_tc ) ( struct net_device * dev , u8 tc ) ; int ( * ndo_fcoe_enable ) ( struct net_device * dev ) ; int ( * ndo_fcoe_disable ) ( struct net_device * dev ) ; int ( * ndo_fcoe_ddp_setup ) ( struct net_device * dev , u16 xid , struct scatterlist * sgl , unsigned int sgc ) ; int ( * ndo_fcoe_ddp_done ) ( struct net_device * dev , u16 xid ) ; int ( * ndo_fcoe_ddp_target ) ( struct net_device * dev , u16 xid , struct scatterlist * sgl , unsigned int sgc ) ; int ( * ndo_fcoe_get_hbainfo ) ( struct net_device * dev , struct netdev_fcoe_hbainfo * hbainfo ) ; int ( * ndo_fcoe_get_wwn ) ( struct net_device * dev , u64 * wwn , int type ) ; int ( * ndo_rx_flow_steer ) ( struct net_device * dev , const struct sk_buff * skb , u16 rxq_index , u32 flow_id ) ; int ( * ndo_add_slave ) ( struct net_device * dev , struct net_device * slave_dev ) ; int ( * ndo_del_slave ) ( struct net_device * dev , struct net_device * slave_dev ) ; netdev_features_t ( * ndo_fix_features ) ( struct net_device * dev , netdev_features_t features ) ; int ( * ndo_set_features ) ( struct net_device * dev , netdev_features_t features ) ; int ( * ndo_neigh_construct ) ( struct neighbour * n ) ; void ( * ndo_neigh_destroy ) ( struct neighbour * n ) ; int ( * ndo_fdb_add ) ( struct ndmsg * ndm , struct nlattr * tb [ ] , struct net_device * dev , const unsigned char * addr , u16 flags ) ; int ( * ndo_fdb_del ) ( struct ndmsg * ndm , struct net_device * dev , const unsigned char * addr ) ; int ( * ndo_fdb_dump ) ( struct sk_buff * skb , struct netlink_callback * cb , struct net_device * dev , int idx ) ; int ( * ndo_bridge_setlink ) ( struct net_device * dev , struct nlmsghdr * nlh ) ; int ( * ndo_bridge_getlink ) ( struct sk_buff * skb , u32 pid , u32 seq , struct net_device * dev ) ; } ;
struct packet_type { __be16 type ; struct net_device * dev ; int ( * func ) ( struct sk_buff * , struct net_device * , struct packet_type * , struct net_device * ) ; bool ( * id_match ) ( struct packet_type * ptype , struct sock * sk ) ; void * af_packet_priv ; struct list_head list ; } ;
struct offload_callbacks { struct sk_buff * ( * gso_segment ) ( struct sk_buff * skb , netdev_features_t features ) ; int ( * gso_send_check ) ( struct sk_buff * skb ) ; struct sk_buff * * ( * gro_receive ) ( struct sk_buff * * head , struct sk_buff * skb ) ; int ( * gro_complete ) ( struct sk_buff * skb ) ; } ;
struct rta_session { __u8 proto ; __u8 pad1 ; __u16 pad2 ; union { struct { __u16 sport ; __u16 dport ; } ports ; struct { __u8 type ; __u8 code ; __u16 ident ; } icmpt ; __u32 spi ; } u ; } ;
struct in6_addr ;
struct sk_buff ;
typedef struct poll_table_struct { poll_queue_proc _qproc ; unsigned long _key ; } poll_table ;
struct rtnl_link_ops { struct list_head list ; const char * kind ; size_t priv_size ; void ( * setup ) ( struct net_device * dev ) ; int maxtype ; const struct nla_policy * policy ; int ( * validate ) ( struct nlattr * tb [ ] , struct nlattr * data [ ] ) ; int ( * newlink ) ( struct net * src_net , struct net_device * dev , struct nlattr * tb [ ] , struct nlattr * data [ ] ) ; int ( * changelink ) ( struct net_device * dev , struct nlattr * tb [ ] , struct nlattr * data [ ] ) ; void ( * dellink ) ( struct net_device * dev , struct list_head * head ) ; size_t ( * get_size ) ( const struct net_device * dev ) ; int ( * fill_info ) ( struct sk_buff * skb , const struct net_device * dev ) ; size_t ( * get_xstats_size ) ( const struct net_device * dev ) ; int ( * fill_xstats ) ( struct sk_buff * skb , const struct net_device * dev ) ; unsigned int ( * get_num_tx_queues ) ( void ) ; unsigned int ( * get_num_rx_queues ) ( void ) ; } ;
struct rtnl_af_ops { struct list_head list ; int family ; int ( * fill_link_af ) ( struct sk_buff * skb , const struct net_device * dev ) ; size_t ( * get_link_af_size ) ( const struct net_device * dev ) ; int ( * validate_link_af ) ( const struct net_device * dev , const struct nlattr * attr ) ; int ( * set_link_af ) ( struct net_device * dev , const struct nlattr * attr ) ; } ;
struct neigh_seq_state { struct seq_net_private p ; struct neigh_table * tbl ; struct neigh_hash_table * nht ; void * ( * neigh_sub_iter ) ( struct neigh_seq_state * state , struct neighbour * n , loff_t * pos ) ; unsigned int bucket ; unsigned int flags ; } ;
struct sk_buff ;
struct proto ;
struct proto { void ( * close ) ( struct sock * sk , long timeout ) ; int ( * connect ) ( struct sock * sk , struct sockaddr * uaddr , int addr_len ) ; int ( * disconnect ) ( struct sock * sk , int flags ) ; struct sock * ( * accept ) ( struct sock * sk , int flags , int * err ) ; int ( * ioctl ) ( struct sock * sk , int cmd , unsigned long arg ) ; int ( * init ) ( struct sock * sk ) ; void ( * destroy ) ( struct sock * sk ) ; void ( * shutdown ) ( struct sock * sk , int how ) ; int ( * setsockopt ) ( struct sock * sk , int level , int optname , char * optval , unsigned int optlen ) ; int ( * getsockopt ) ( struct sock * sk , int level , int optname , char * optval , int * option ) ; int ( * compat_setsockopt ) ( struct sock * sk , int level , int optname , char * optval , unsigned int optlen ) ; int ( * compat_getsockopt ) ( struct sock * sk , int level , int optname , char * optval , int * option ) ; int ( * compat_ioctl ) ( struct sock * sk , unsigned int cmd , unsigned long arg ) ; int ( * sendmsg ) ( struct kiocb * iocb , struct sock * sk , struct msghdr * msg , size_t len ) ; int ( * recvmsg ) ( struct kiocb * iocb , struct sock * sk , struct msghdr * msg , size_t len , int noblock , int flags , int * addr_len ) ; int ( * sendpage ) ( struct sock * sk , struct page * page , int offset , size_t size , int flags ) ; int ( * bind ) ( struct sock * sk , struct sockaddr * uaddr , int addr_len ) ; int ( * backlog_rcv ) ( struct sock * sk , struct sk_buff * skb ) ; void ( * release_cb ) ( struct sock * sk ) ; void ( * mtu_reduced ) ( struct sock * sk ) ; void ( * hash ) ( struct sock * sk ) ; void ( * unhash ) ( struct sock * sk ) ; void ( * rehash ) ( struct sock * sk ) ; int ( * get_port ) ( struct sock * sk , unsigned short snum ) ; void ( * clear_sk ) ( struct sock * sk , int size ) ; unsigned int inuse_idx ; void ( * enter_memory_pressure ) ( struct sock * sk ) ; atomic_long_t * memory_allocated ; struct percpu_counter * sockets_allocated ; int * memory_pressure ; long * sysctl_mem ; int * sysctl_wmem ; int * sysctl_rmem ; int max_header ; bool no_autobind ; struct kmem_cache * slab ; unsigned int obj_size ; int slab_flags ; struct percpu_counter * orphan_count ; struct request_sock_ops * rsk_prot ; struct timewait_sock_ops * twsk_prot ; union { struct inet_hashinfo * hashinfo ; struct udp_table * udp_table ; struct raw_hashinfo * raw_hash ; } h ; struct module * owner ; char name [ 32 ] ; struct list_head node ; } ;
struct sk_buff ;
struct proto ;
struct ip_options_rcu { struct callback_head rcu ; struct ip_options opt ; } ;
struct inet_connection_sock_af_ops { int ( * queue_xmit ) ( struct sk_buff * skb , struct flowi * fl ) ; void ( * send_check ) ( struct sock * sk , struct sk_buff * skb ) ; int ( * rebuild_header ) ( struct sock * sk ) ; void ( * sk_rx_dst_set ) ( struct sock * sk , const struct sk_buff * skb ) ; int ( * conn_request ) ( struct sock * sk , struct sk_buff * skb ) ; struct sock * ( * syn_recv_sock ) ( struct sock * sk , struct sk_buff * skb , struct request_sock * req , struct dst_entry * dst ) ; u16 net_header_len ; u16 net_frag_header_len ; u16 sockaddr_len ; int ( * setsockopt ) ( struct sock * sk , int level , int optname , char * optval , unsigned int optlen ) ; int ( * getsockopt ) ( struct sock * sk , int level , int optname , char * optval , int * optlen ) ; int ( * compat_setsockopt ) ( struct sock * sk , int level , int optname , char * optval , unsigned int optlen ) ; int ( * compat_getsockopt ) ( struct sock * sk , int level , int optname , char * optval , int * optlen ) ; void ( * addr2sockaddr ) ( struct sock * sk , struct sockaddr * ) ; int ( * bind_conflict ) ( const struct sock * sk , const struct inet_bind_bucket * tb , bool relax ) ; } ;
union tcp_word_hdr { struct tcphdr hdr ; __be32 words [ 5 ] ; } ;
struct tcp_request_sock { struct inet_request_sock req ; const struct tcp_request_sock_ops * af_specific ; struct sock * listener ; u32 rcv_isn ; u32 snt_isn ; u32 snt_synack ; u32 rcv_nxt ; } ;
struct tc_u32_sel { unsigned char flags ; unsigned char offshift ; unsigned char nkeys ; __be16 offmask ; __u16 off ; short offoff ; short hoff ; __be32 hmask ; struct tc_u32_key keys [ 0 ] ; } ;
struct solaris_x86_vtoc { unsigned int v_bootinfo [ 3 ] ; __le32 v_sanity ; __le32 v_version ; char v_volume [ 8 ] ; __le16 v_sectorsz ; __le16 v_nparts ; unsigned int v_reserved [ 10 ] ; struct solaris_x86_slice v_slice [ 16 ] ; unsigned int timestamp [ 16 ] ; char v_asciilabel [ 128 ] ; } ;
struct bsd_disklabel { __le32 d_magic ; __s16 d_type ; __s16 d_subtype ; char d_typename [ 16 ] ; char d_packname [ 16 ] ; __u32 d_secsize ; __u32 d_nsectors ; __u32 d_ntracks ; __u32 d_ncylinders ; __u32 d_secpercyl ; __u32 d_secperunit ; __u16 d_sparespertrack ; __u16 d_sparespercyl ; __u32 d_acylinders ; __u16 d_rpm ; __u16 d_interleave ; __u16 d_trackskew ; __u16 d_cylskew ; __u32 d_headswitch ; __u32 d_trkseek ; __u32 d_flags ; __u32 d_drivedata [ 5 ] ; __u32 d_spare [ 5 ] ; __le32 d_magic2 ; __le16 d_checksum ; __le16 d_npartitions ; __le32 d_bbsize ; __le32 d_sbsize ; struct bsd_partition { __le32 p_size ; __le32 p_offset ; __le32 p_fsize ; __u8 p_fstype ; __u8 p_frag ; __le16 p_cpg ; } d_partitions [ 16 ] ; } ;
struct io_cq { struct request_queue * q ; struct io_context * ioc ; union { struct list_head q_node ; struct kmem_cache * __rcu_icq_cache ; } ; union { struct hlist_node ioc_node ; struct callback_head __rcu_head ; } ; unsigned int flags ; } ;
struct bsg_class_device { struct device * class_dev ; struct device * parent ; int minor ; struct request_queue * queue ; struct kref ref ; void ( * release ) ( struct device * ) ; } ;
struct io_cq ;
struct elevator_ops { elevator_merge_fn * elevator_merge_fn ; elevator_merged_fn * elevator_merged_fn ; elevator_merge_req_fn * elevator_merge_req_fn ; elevator_allow_merge_fn * elevator_allow_merge_fn ; elevator_bio_merged_fn * elevator_bio_merged_fn ; elevator_dispatch_fn * elevator_dispatch_fn ; elevator_add_req_fn * elevator_add_req_fn ; elevator_activate_req_fn * elevator_activate_req_fn ; elevator_deactivate_req_fn * elevator_deactivate_req_fn ; elevator_completed_req_fn * elevator_completed_req_fn ; elevator_request_list_fn * elevator_former_req_fn ; elevator_request_list_fn * elevator_latter_req_fn ; elevator_init_icq_fn * elevator_init_icq_fn ; elevator_exit_icq_fn * elevator_exit_icq_fn ; elevator_set_req_fn * elevator_set_req_fn ; elevator_put_req_fn * elevator_put_req_fn ; elevator_may_queue_fn * elevator_may_queue_fn ; elevator_init_fn * elevator_init_fn ; elevator_exit_fn * elevator_exit_fn ; } ;
struct elv_fs_entry { struct attribute attr ; ssize_t ( * show ) ( struct elevator_queue * , char * ) ; ssize_t ( * store ) ( struct elevator_queue * , const char * , size_t ) ; } ;
typedef void ( * blk_plug_cb_fn ) ( struct blk_plug_cb * , bool ) ;
struct work_struct ;
struct ablkcipher_request { struct crypto_async_request base ; unsigned int nbytes ; void * info ; struct scatterlist * src ; struct scatterlist * dst ; void * __ctx [ ] __attribute__ ( ( __aligned__ ( __alignof__ ( unsigned long long ) ) ) ) ; } ;
struct aead_request { struct crypto_async_request base ; unsigned int assoclen ; unsigned int cryptlen ; u8 * iv ; struct scatterlist * assoc ; struct scatterlist * src ; struct scatterlist * dst ; void * __ctx [ ] __attribute__ ( ( __aligned__ ( __alignof__ ( unsigned long long ) ) ) ) ; } ;
struct ahash_request { struct crypto_async_request base ; unsigned int nbytes ; struct scatterlist * src ; u8 * result ; void * priv ; void * __ctx [ ] __attribute__ ( ( __aligned__ ( __alignof__ ( unsigned long long ) ) ) ) ; } ;
typedef struct journal_header_s { __be32 h_magic ; __be32 h_blocktype ; __be32 h_sequence ; } journal_header_t ;
typedef struct journal_block_tag_s { __be32 t_blocknr ; __be16 t_checksum ; __be16 t_flags ; __be32 t_blocknr_high ; } journal_block_tag_t ;
struct jbd2_buffer_trigger_type { void ( * t_frozen ) ( struct jbd2_buffer_trigger_type * type , struct buffer_head * bh , void * mapped_data , size_t size ) ; void ( * t_abort ) ( struct jbd2_buffer_trigger_type * type , struct buffer_head * bh ) ; } ;
struct fid { union { struct { u32 ino ; u32 gen ; u32 parent_ino ; u32 parent_gen ; } i32 ; struct { u32 block ; u16 partref ; u16 parent_partref ; u32 generation ; u32 parent_block ; u32 parent_generation ; } udf ; __u32 raw [ 0 ] ; } ; } ;
struct cleancache_filekey { union { ino_t ino ; __u32 fh [ 6 ] ; u32 key [ 6 ] ; } u ; } ;
struct scsi_host_template { struct module * module ; const char * name ; int ( * detect ) ( struct scsi_host_template * ) ; int ( * release ) ( struct Scsi_Host * ) ; const char * ( * info ) ( struct Scsi_Host * ) ; int ( * ioctl ) ( struct scsi_device * dev , int cmd , void * arg ) ; int ( * compat_ioctl ) ( struct scsi_device * dev , int cmd , void * arg ) ; int ( * queuecommand ) ( struct Scsi_Host * , struct scsi_cmnd * ) ; int ( * transfer_response ) ( struct scsi_cmnd * , void ( * done ) ( struct scsi_cmnd * ) ) ; int ( * eh_abort_handler ) ( struct scsi_cmnd * ) ; int ( * eh_device_reset_handler ) ( struct scsi_cmnd * ) ; int ( * eh_target_reset_handler ) ( struct scsi_cmnd * ) ; int ( * eh_bus_reset_handler ) ( struct scsi_cmnd * ) ; int ( * eh_host_reset_handler ) ( struct scsi_cmnd * ) ; int ( * slave_alloc ) ( struct scsi_device * ) ; int ( * slave_configure ) ( struct scsi_device * ) ; void ( * slave_destroy ) ( struct scsi_device * ) ; int ( * target_alloc ) ( struct scsi_target * ) ; void ( * target_destroy ) ( struct scsi_target * ) ; int ( * scan_finished ) ( struct Scsi_Host * , unsigned long ) ; void ( * scan_start ) ( struct Scsi_Host * ) ; int ( * change_queue_depth ) ( struct scsi_device * , int , int ) ; int ( * change_queue_type ) ( struct scsi_device * , int ) ; int ( * bios_param ) ( struct scsi_device * , struct block_device * , sector_t , int [ ] ) ; void ( * unlock_native_capacity ) ( struct scsi_device * ) ; int ( * proc_info ) ( struct Scsi_Host * , char * , char * * , off_t , int , int ) ; enum blk_eh_timer_return ( * eh_timed_out ) ( struct scsi_cmnd * ) ; int ( * host_reset ) ( struct Scsi_Host * shost , int reset_type ) ; const char * proc_name ; struct proc_dir_entry * proc_dir ; int can_queue ; int this_id ; unsigned short sg_tablesize ; unsigned short sg_prot_tablesize ; unsigned short max_sectors ; unsigned long dma_boundary ; short cmd_per_lun ; unsigned char present ; unsigned supported_mode : 2 ; unsigned unchecked_isa_dma : 1 ; unsigned use_clustering : 1 ; unsigned emulated : 1 ; unsigned skip_settle_delay : 1 ; unsigned ordered_tag : 1 ; unsigned int max_host_blocked ; struct device_attribute * * shost_attrs ; struct device_attribute * * sdev_attrs ; struct list_head legacy_hosts ; u64 vendor_id ; } ;
typedef acpi_status ( * acpi_sleep_function ) ( u8 sleep_state ) ;
union acpi_object { acpi_object_type type ; struct { acpi_object_type type ; u64 value ; } integer ; struct { acpi_object_type type ; u32 length ; char * pointer ; } string ; struct { acpi_object_type type ; u32 length ; u8 * pointer ; } buffer ; struct { acpi_object_type type ; u32 count ; union acpi_object * elements ; } package ; struct { acpi_object_type type ; acpi_object_type actual_type ; acpi_handle handle ; } reference ; struct { acpi_object_type type ; u32 proc_id ; acpi_io_address pblk_address ; u32 pblk_length ; } processor ; struct { acpi_object_type type ; u32 system_level ; u32 resource_order ; } power_resource ; } ;
typedef acpi_status ( * acpi_init_handler ) ( acpi_handle object , u32 function ) ;
typedef acpi_status ( * acpi_exception_handler ) ( acpi_status aml_status , acpi_name name , u16 opcode , u32 aml_offset , void * context ) ;
typedef acpi_status ( * acpi_tbl_handler ) ( u32 event , void * table , void * context ) ;
typedef acpi_status ( * acpi_adr_space_handler ) ( u32 function , acpi_physical_address address , u32 bit_width , u64 * value , void * handler_context , void * region_context ) ;
typedef acpi_status ( * acpi_adr_space_setup ) ( acpi_handle region_handle , u32 function , void * handler_context , void * * region_context ) ;
typedef acpi_status ( * acpi_walk_callback ) ( acpi_handle object , u32 nesting_level , void * context , void * * return_value ) ;
struct acpi_device_info { u32 info_size ; u32 name ; acpi_object_type type ; u8 param_count ; u8 valid ; u8 flags ; u8 highest_dstates [ 4 ] ; u8 lowest_dstates [ 5 ] ; u32 current_status ; u64 address ; struct acpi_pnp_device_id hardware_id ; struct acpi_pnp_device_id unique_id ; struct acpi_pnp_device_id subsystem_id ; struct acpi_pnp_device_id_list compatible_id_list ; } ;
struct acpi_einj_entry { struct acpi_whea_header whea_header ; } ;
struct acpi_erst_entry { struct acpi_whea_header whea_header ; } ;
struct acpi_resource_address { u8 resource_type ; u8 producer_consumer ; u8 decode ; u8 min_address_fixed ; u8 max_address_fixed ; union acpi_resource_attribute info ; } ;
struct acpi_resource_address16 { u8 resource_type ; u8 producer_consumer ; u8 decode ; u8 min_address_fixed ; u8 max_address_fixed ; union acpi_resource_attribute info ; u16 granularity ; u16 minimum ; u16 maximum ; u16 translation_offset ; u16 address_length ; struct acpi_resource_source resource_source ; } ;
struct acpi_resource_address32 { u8 resource_type ; u8 producer_consumer ; u8 decode ; u8 min_address_fixed ; u8 max_address_fixed ; union acpi_resource_attribute info ; u32 granularity ; u32 minimum ; u32 maximum ; u32 translation_offset ; u32 address_length ; struct acpi_resource_source resource_source ; } ;
struct acpi_resource_address64 { u8 resource_type ; u8 producer_consumer ; u8 decode ; u8 min_address_fixed ; u8 max_address_fixed ; union acpi_resource_attribute info ; u64 granularity ; u64 minimum ; u64 maximum ; u64 translation_offset ; u64 address_length ; struct acpi_resource_source resource_source ; } ;
struct acpi_resource_extended_address64 { u8 resource_type ; u8 producer_consumer ; u8 decode ; u8 min_address_fixed ; u8 max_address_fixed ; union acpi_resource_attribute info ; u8 revision_ID ; u64 granularity ; u64 minimum ; u64 maximum ; u64 translation_offset ; u64 address_length ; u64 type_specific ; } ;
typedef acpi_status ( * acpi_walk_resource_callback ) ( struct acpi_resource * resource , void * context ) ;
struct acpi_device_ops { acpi_op_add add ; acpi_op_remove remove ; acpi_op_start start ; acpi_op_bind bind ; acpi_op_unbind unbind ; acpi_op_notify notify ; } ;
struct acpi_device_power { int state ; struct acpi_device_power_flags flags ; struct acpi_device_power_state states [ 5 ] ; } ;
struct acpi_dock_ops { acpi_notify_handler handler ; acpi_notify_handler uevent ; } ;
struct acpi_osc_context { char * uuid_str ; int rev ; struct acpi_buffer cap ; struct acpi_buffer ret ; } ;
struct cdrom_subchnl { __u8 cdsc_format ; __u8 cdsc_audiostatus ; __u8 cdsc_adr : 4 ; __u8 cdsc_ctrl : 4 ; __u8 cdsc_trk ; __u8 cdsc_ind ; union cdrom_addr cdsc_absaddr ; union cdrom_addr cdsc_reladdr ; } ;
struct cdrom_tocentry { __u8 cdte_track ; __u8 cdte_adr : 4 ; __u8 cdte_ctrl : 4 ; __u8 cdte_format ; union cdrom_addr cdte_addr ; __u8 cdte_datamode ; } ;
struct cdrom_read_audio { union cdrom_addr addr ; __u8 addr_format ; int nframes ; __u8 * buf ; } ;
struct cdrom_multisession { union cdrom_addr addr ; __u8 xa_flag ; __u8 addr_format ; } ;
typedef struct { __be16 disc_information_length ; __u8 disc_status : 2 ; __u8 border_status : 2 ; __u8 erasable : 1 ; __u8 reserved1 : 3 ; __u8 n_first_track ; __u8 n_sessions_lsb ; __u8 first_track_lsb ; __u8 last_track_lsb ; __u8 mrw_status : 2 ; __u8 dbit : 1 ; __u8 reserved2 : 2 ; __u8 uru : 1 ; __u8 dbc_v : 1 ; __u8 did_v : 1 ; __u8 disc_type ; __u8 n_sessions_msb ; __u8 first_track_msb ; __u8 last_track_msb ; __u32 disc_id ; __u32 lead_in ; __u32 lead_out ; __u8 disc_bar_code [ 8 ] ; __u8 reserved3 ; __u8 n_opc ; } disc_information ;
typedef struct { __be16 track_information_length ; __u8 track_lsb ; __u8 session_lsb ; __u8 reserved1 ; __u8 track_mode : 4 ; __u8 copy : 1 ; __u8 damage : 1 ; __u8 reserved2 : 2 ; __u8 data_mode : 4 ; __u8 fp : 1 ; __u8 packet : 1 ; __u8 blank : 1 ; __u8 rt : 1 ; __u8 nwa_v : 1 ; __u8 lra_v : 1 ; __u8 reserved3 : 6 ; __be32 track_start ; __be32 next_writable ; __be32 free_blocks ; __be32 fixed_packet_size ; __be32 track_size ; __be32 last_rec_address ; } track_information ;
typedef struct { __u8 page_code : 6 ; __u8 reserved1 : 1 ; __u8 ps : 1 ; __u8 page_length ; __u8 write_type : 4 ; __u8 test_write : 1 ; __u8 ls_v : 1 ; __u8 bufe : 1 ; __u8 reserved2 : 1 ; __u8 track_mode : 4 ; __u8 copy : 1 ; __u8 fp : 1 ; __u8 multi_session : 2 ; __u8 data_block_type : 4 ; __u8 reserved3 : 4 ; __u8 link_size ; __u8 reserved4 ; __u8 app_code : 6 ; __u8 reserved5 : 2 ; __u8 session_format ; __u8 reserved6 ; __be32 packet_size ; __u16 audio_pause ; __u8 mcn [ 16 ] ; __u8 isrc [ 16 ] ; __u8 subhdr0 ; __u8 subhdr1 ; __u8 subhdr2 ; __u8 subhdr3 ; } __attribute__ ( ( packed ) ) write_param_page ;
struct ata_port_operations ;
struct ata_queued_cmd ;
struct ata_queued_cmd { struct ata_port * ap ; struct ata_device * dev ; struct scsi_cmnd * scsicmd ; void ( * scsidone ) ( struct scsi_cmnd * ) ; struct ata_taskfile tf ; u8 cdb [ ATAPI_CDB_LEN ] ; unsigned long flags ; unsigned int tag ; unsigned int n_elem ; unsigned int orig_n_elem ; int dma_dir ; unsigned int sect_size ; unsigned int nbytes ; unsigned int extrabytes ; unsigned int curbytes ; struct scatterlist sgent ; struct scatterlist * sg ; struct scatterlist * cursg ; unsigned int cursg_ofs ; unsigned int err_mask ; struct ata_taskfile result_tf ; ata_qc_cb_t complete_fn ; void * private_data ; void * lldd_task ; } ;
struct ata_port_operations { int ( * qc_defer ) ( struct ata_queued_cmd * qc ) ; int ( * check_atapi_dma ) ( struct ata_queued_cmd * qc ) ; void ( * qc_prep ) ( struct ata_queued_cmd * qc ) ; unsigned int ( * qc_issue ) ( struct ata_queued_cmd * qc ) ; bool ( * qc_fill_rtf ) ( struct ata_queued_cmd * qc ) ; int ( * cable_detect ) ( struct ata_port * ap ) ; unsigned long ( * mode_filter ) ( struct ata_device * dev , unsigned long xfer_mask ) ; void ( * set_piomode ) ( struct ata_port * ap , struct ata_device * dev ) ; void ( * set_dmamode ) ( struct ata_port * ap , struct ata_device * dev ) ; int ( * set_mode ) ( struct ata_link * link , struct ata_device * * r_failed_dev ) ; unsigned int ( * read_id ) ( struct ata_device * dev , struct ata_taskfile * tf , u16 * id ) ; void ( * dev_config ) ( struct ata_device * dev ) ; void ( * freeze ) ( struct ata_port * ap ) ; void ( * thaw ) ( struct ata_port * ap ) ; ata_prereset_fn_t prereset ; ata_reset_fn_t softreset ; ata_reset_fn_t hardreset ; ata_postreset_fn_t postreset ; ata_prereset_fn_t pmp_prereset ; ata_reset_fn_t pmp_softreset ; ata_reset_fn_t pmp_hardreset ; ata_postreset_fn_t pmp_postreset ; void ( * error_handler ) ( struct ata_port * ap ) ; void ( * lost_interrupt ) ( struct ata_port * ap ) ; void ( * post_internal_cmd ) ( struct ata_queued_cmd * qc ) ; void ( * sched_eh ) ( struct ata_port * ap ) ; void ( * end_eh ) ( struct ata_port * ap ) ; int ( * scr_read ) ( struct ata_link * link , unsigned int sc_reg , u32 * val ) ; int ( * scr_write ) ( struct ata_link * link , unsigned int sc_reg , u32 val ) ; void ( * pmp_attach ) ( struct ata_port * ap ) ; void ( * pmp_detach ) ( struct ata_port * ap ) ; int ( * set_lpm ) ( struct ata_link * link , enum ata_lpm_policy policy , unsigned hints ) ; int ( * port_suspend ) ( struct ata_port * ap , pm_message_t mesg ) ; int ( * port_resume ) ( struct ata_port * ap ) ; int ( * port_start ) ( struct ata_port * ap ) ; void ( * port_stop ) ( struct ata_port * ap ) ; void ( * host_stop ) ( struct ata_host * host ) ; void ( * sff_dev_select ) ( struct ata_port * ap , unsigned int device ) ; void ( * sff_set_devctl ) ( struct ata_port * ap , u8 ctl ) ; u8 ( * sff_check_status ) ( struct ata_port * ap ) ; u8 ( * sff_check_altstatus ) ( struct ata_port * ap ) ; void ( * sff_tf_load ) ( struct ata_port * ap , const struct ata_taskfile * tf ) ; void ( * sff_tf_read ) ( struct ata_port * ap , struct ata_taskfile * tf ) ; void ( * sff_exec_command ) ( struct ata_port * ap , const struct ata_taskfile * tf ) ; unsigned int ( * sff_data_xfer ) ( struct ata_device * dev , unsigned char * buf , unsigned int buflen , int rw ) ; void ( * sff_irq_on ) ( struct ata_port * ) ; bool ( * sff_irq_check ) ( struct ata_port * ) ; void ( * sff_irq_clear ) ( struct ata_port * ) ; void ( * sff_drain_fifo ) ( struct ata_queued_cmd * qc ) ; void ( * bmdma_setup ) ( struct ata_queued_cmd * qc ) ; void ( * bmdma_start ) ( struct ata_queued_cmd * qc ) ; void ( * bmdma_stop ) ( struct ata_queued_cmd * qc ) ; u8 ( * bmdma_status ) ( struct ata_port * ap ) ; ssize_t ( * em_show ) ( struct ata_port * ap , char * buf ) ; ssize_t ( * em_store ) ( struct ata_port * ap , const char * message , size_t size ) ; ssize_t ( * sw_activity_show ) ( struct ata_device * dev , char * buf ) ; ssize_t ( * sw_activity_store ) ( struct ata_device * dev , enum sw_activity val ) ; void ( * phy_reset ) ( struct ata_port * ap ) ; void ( * eng_timeout ) ( struct ata_port * ap ) ; const struct ata_port_operations * inherits ; } ;
struct input_handler { void * private_ ; void ( * event ) ( struct input_handle * handle , unsigned int type , unsigned int code , int value ) ; void ( * events ) ( struct input_handle * handle , const struct input_value * vals , unsigned int count ) ; bool ( * filter ) ( struct input_handle * handle , unsigned int type , unsigned int code , int value ) ; bool ( * match ) ( struct input_handler * handler , struct input_dev * dev ) ; int ( * connect ) ( struct input_handler * handler , struct input_dev * dev , const struct input_device_id * id ) ; void ( * disconnect ) ( struct input_handle * handle ) ; void ( * start ) ( struct input_handle * handle ) ; bool legacy_minors ; int minor ; const char * name ; const struct input_device_id * id_table ; struct list_head h_list ; struct list_head node ; } ;
struct sk_buff ;
struct dm_target_io { struct dm_io * io ; struct dm_target * ti ; union map_info info ; unsigned target_request_nr ; struct bio clone ; } ;
struct restart_block { long ( * fn ) ( struct restart_block * ) ; union { struct { u32 * uaddr ; u32 val ; u32 flags ; u32 bitset ; u64 time ; u32 * uaddr2 ; } futex ; struct { clockid_t clockid ; struct timespec * rmtp ; struct compat_timespec * compat_rmtp ; u64 expires ; } nanosleep ; struct { struct pollfd * ufds ; int nfds ; int has_timeout ; unsigned long tv_sec ; unsigned long tv_nsec ; } poll ; } ; } ;
struct thread_struct ;
struct pv_mmu_ops { unsigned long ( * read_cr2 ) ( void ) ; void ( * write_cr2 ) ( unsigned long ) ; unsigned long ( * read_cr3 ) ( void ) ; void ( * write_cr3 ) ( unsigned long ) ; void ( * activate_mm ) ( struct mm_struct * prev , struct mm_struct * next ) ; void ( * dup_mmap ) ( struct mm_struct * oldmm , struct mm_struct * mm ) ; void ( * exit_mmap ) ( struct mm_struct * mm ) ; void ( * flush_tlb_user ) ( void ) ; void ( * flush_tlb_kernel ) ( void ) ; void ( * flush_tlb_single ) ( unsigned long addr ) ; void ( * flush_tlb_others ) ( const struct cpumask * cpus , struct mm_struct * mm , unsigned long start , unsigned long end ) ; int ( * pgd_alloc ) ( struct mm_struct * mm ) ; void ( * pgd_free ) ( struct mm_struct * mm , pgd_t * pgd ) ; void ( * alloc_pte ) ( struct mm_struct * mm , unsigned long pfn ) ; void ( * alloc_pmd ) ( struct mm_struct * mm , unsigned long pfn ) ; void ( * alloc_pud ) ( struct mm_struct * mm , unsigned long pfn ) ; void ( * release_pte ) ( unsigned long pfn ) ; void ( * release_pmd ) ( unsigned long pfn ) ; void ( * release_pud ) ( unsigned long pfn ) ; void ( * set_pte ) ( pte_t * ptep , pte_t pteval ) ; void ( * set_pte_at ) ( struct mm_struct * mm , unsigned long addr , pte_t * ptep , pte_t pteval ) ; void ( * set_pmd ) ( pmd_t * pmdp , pmd_t pmdval ) ; void ( * set_pmd_at ) ( struct mm_struct * mm , unsigned long addr , pmd_t * pmdp , pmd_t pmdval ) ; void ( * pte_update ) ( struct mm_struct * mm , unsigned long addr , pte_t * ptep ) ; void ( * pte_update_defer ) ( struct mm_struct * mm , unsigned long addr , pte_t * ptep ) ; void ( * pmd_update ) ( struct mm_struct * mm , unsigned long addr , pmd_t * pmdp ) ; void ( * pmd_update_defer ) ( struct mm_struct * mm , unsigned long addr , pmd_t * pmdp ) ; pte_t ( * ptep_modify_prot_start ) ( struct mm_struct * mm , unsigned long addr , pte_t * ptep ) ; void ( * ptep_modify_prot_commit ) ( struct mm_struct * mm , unsigned long addr , pte_t * ptep , pte_t pte ) ; struct paravirt_callee_save pte_val ; struct paravirt_callee_save make_pte ; struct paravirt_callee_save pgd_val ; struct paravirt_callee_save make_pgd ; void ( * set_pud ) ( pud_t * pudp , pud_t pudval ) ; struct paravirt_callee_save pmd_val ; struct paravirt_callee_save make_pmd ; struct paravirt_callee_save pud_val ; struct paravirt_callee_save make_pud ; void ( * set_pgd ) ( pgd_t * pudp , pgd_t pgdval ) ; struct pv_lazy_ops lazy_mode ; void ( * set_fixmap ) ( unsigned idx , phys_addr_t phys , pgprot_t flags ) ; } ;
struct arch_spinlock ;
struct _xstate { struct _fpstate fpstate ; struct _xsave_hdr xstate_hdr ; struct _ymmh_state ymmh ; } ;
struct msr_info { u32 msr_no ; struct msr reg ; struct msr * msrs ; int err ; } ;
struct xsave_struct { struct i387_fxsave_struct i387 ; struct xsave_hdr_struct xsave_hdr ; struct ymmh_struct ymmh ; } __attribute__ ( ( packed , aligned ( 64 ) ) ) ;
struct thread_struct { struct desc_struct tls_array [ 3 ] ; unsigned long sp0 ; unsigned long sp ; unsigned long usersp ; unsigned short es ; unsigned short ds ; unsigned short fsindex ; unsigned short gsindex ; unsigned long fs ; unsigned long gs ; struct perf_event * ptrace_bps [ 4 ] ; unsigned long debugreg6 ; unsigned long ptrace_dr7 ; unsigned long cr2 ; unsigned long trap_nr ; unsigned long error_code ; struct fpu fpu ; unsigned long * io_bitmap_ptr ; unsigned long iopl ; unsigned io_bitmap_max ; } ;
typedef struct { arch_rwlock_t raw_lock ; } rwlock_t ;
struct kstat { u64 ino ; dev_t dev ; umode_t mode ; unsigned int nlink ; kuid_t uid ; kgid_t gid ; dev_t rdev ; loff_t size ; struct timespec atime ; struct timespec mtime ; struct timespec ctime ; unsigned long blksize ; unsigned long long blocks ; } ;
struct wait_bit_queue { struct wait_bit_key key ; wait_queue_t wait ; } ;
struct hrtimer ;
struct delayed_work { struct work_struct work ; struct timer_list timer ; int cpu ; } ;
struct execute_work { struct work_struct work ; } ;
struct ctl_table ;
struct edd_info { __u8 device ; __u8 version ; __u16 interface_support ; __u16 legacy_max_cylinder ; __u8 legacy_max_head ; __u8 legacy_sectors_per_track ; struct edd_device_params params ; } __attribute__ ( ( packed ) ) ;
struct vcpu_guest_context { struct { char x [ 512 ] ; } fpu_ctxt ; unsigned long flags ; struct cpu_user_regs user_regs ; struct trap_info trap_ctxt [ 256 ] ; unsigned long ldt_base , ldt_ents ; unsigned long gdt_frames [ 16 ] , gdt_ents ; unsigned long kernel_ss , kernel_sp ; unsigned long ctrlreg [ 8 ] ; unsigned long debugreg [ 8 ] ; unsigned long event_callback_eip ; unsigned long failsafe_callback_eip ; unsigned long syscall_callback_eip ; unsigned long vm_assist ; uint64_t fs_base ; uint64_t gs_base_kernel ; uint64_t gs_base_user ; } ;
struct start_info { char magic [ 32 ] ; unsigned long nr_pages ; unsigned long shared_info ; uint32_t flags ; xen_pfn_t store_mfn ; uint32_t store_evtchn ; union { struct { xen_pfn_t mfn ; uint32_t evtchn ; } domU ; struct { uint32_t info_off ; uint32_t info_size ; } dom0 ; } console ; unsigned long pt_base ; unsigned long nr_pt_frames ; unsigned long mfn_list ; unsigned long mod_start ; unsigned long mod_len ; int8_t cmd_line [ 1024 ] ; } ;
struct dom0_vga_console_info { uint8_t video_type ; union { struct { uint16_t font_height ; uint16_t cursor_x , cursor_y ; uint16_t rows , columns ; } text_mode_3 ; struct { uint16_t width , height ; uint16_t bytes_per_line ; uint16_t bits_per_pixel ; uint32_t lfb_base ; uint32_t lfb_size ; uint8_t red_pos , red_size ; uint8_t green_pos , green_size ; uint8_t blue_pos , blue_size ; uint8_t rsvd_pos , rsvd_size ; uint32_t gbl_caps ; uint16_t mode_attrs ; } vesa_lfb ; } u ; } ;
struct tmem_op { uint32_t cmd ; int32_t pool_id ; union { struct { uint64_t uuid [ 2 ] ; uint32_t flags ; } new_ ; struct { uint64_t oid [ 3 ] ; uint32_t index ; uint32_t tmem_offset ; uint32_t pfn_offset ; uint32_t len ; __guest_handle_void gmfn ; } gen ; } u ; } ;
struct ctl_table ;
struct ctl_dir ;
struct ctl_table { const char * procname ; void * data ; int maxlen ; umode_t mode ; struct ctl_table * child ; proc_handler * proc_handler ; struct ctl_table_poll * poll ; void * extra1 ; void * extra2 ; } ;
struct ctl_dir { struct ctl_table_header header ; struct rb_root root ; } ;
struct cred ;
struct subprocess_info { struct work_struct work ; struct completion * complete ; char * path ; char * * argv ; char * * envp ; int wait ; int retval ; int ( * init ) ( struct subprocess_info * info , struct cred * new_ ) ; void ( * cleanup ) ( struct subprocess_info * info ) ; void * data ; } ;
typedef struct dynamic { Elf32_Sword d_tag ; union { Elf32_Sword d_val ; Elf32_Addr d_ptr ; } d_un ; } Elf32_Dyn ;
typedef struct { Elf64_Sxword d_tag ; union { Elf64_Xword d_val ; Elf64_Addr d_ptr ; } d_un ; } Elf64_Dyn ;
struct module_kobject { struct kobject kobj ; struct module * mod ; struct kobject * drivers_dir ; struct module_param_attrs * mp ; } ;
struct module_version_attribute { struct module_attribute mattr ; const char * module_name ; const char * version ; } __attribute__ ( ( __aligned__ ( sizeof ( void * ) ) ) ) ;
struct hrtimer_clock_base ;
struct hrtimer { struct timerqueue_node node ; ktime_t _softexpires ; enum hrtimer_restart ( * function ) ( struct hrtimer * ) ; struct hrtimer_clock_base * base ; unsigned long state ; int start_pid ; void * start_site ; char start_comm [ 16 ] ; } ;
struct hrtimer_clock_base { struct hrtimer_cpu_base * cpu_base ; int index ; clockid_t clockid ; struct timerqueue_head active ; ktime_t resolution ; ktime_t ( * get_time ) ( void ) ; ktime_t softirq_time ; ktime_t offset ; } ;
struct clock_event_device ;
struct nameidata ;
struct bio_integrity_payload ;
struct cgroup_subsys_state ;
struct nameidata ;
struct cred ;
struct iattr { unsigned int ia_valid ; umode_t ia_mode ; kuid_t ia_uid ; kgid_t ia_gid ; loff_t ia_size ; struct timespec ia_atime ; struct timespec ia_mtime ; struct timespec ia_ctime ; struct file * ia_file ; } ;
typedef struct fs_quota_stat { __s8 qs_version ; __u16 qs_flags ; __s8 qs_pad ; fs_qfilestat_t qs_uquota ; fs_qfilestat_t qs_gquota ; __u32 qs_incoredqs ; __s32 qs_btimelimit ; __s32 qs_itimelimit ; __s32 qs_rtbtimelimit ; __u16 qs_bwarnlimit ; __u16 qs_iwarnlimit ; } fs_quota_stat_t ;
struct inode_operations { struct dentry * ( * lookup ) ( struct inode * , struct dentry * , unsigned int ) ; void * ( * follow_link ) ( struct dentry * , struct nameidata * ) ; int ( * permission ) ( struct inode * , int ) ; struct posix_acl * ( * get_acl ) ( struct inode * , int ) ; int ( * readlink ) ( struct dentry * , char * , int ) ; void ( * put_link ) ( struct dentry * , struct nameidata * , void * ) ; int ( * create ) ( struct inode * , struct dentry * , umode_t , bool ) ; int ( * link ) ( struct dentry * , struct inode * , struct dentry * ) ; int ( * unlink ) ( struct inode * , struct dentry * ) ; int ( * symlink ) ( struct inode * , struct dentry * , const char * ) ; int ( * mkdir ) ( struct inode * , struct dentry * , umode_t ) ; int ( * rmdir ) ( struct inode * , struct dentry * ) ; int ( * mknod ) ( struct inode * , struct dentry * , umode_t , dev_t ) ; int ( * rename ) ( struct inode * , struct dentry * , struct inode * , struct dentry * ) ; int ( * setattr ) ( struct dentry * , struct iattr * ) ; int ( * getattr ) ( struct vfsmount * mnt , struct dentry * , struct kstat * ) ; int ( * setxattr ) ( struct dentry * , const char * , const void * , size_t , int ) ; ssize_t ( * getxattr ) ( struct dentry * , const char * , void * , size_t ) ; ssize_t ( * listxattr ) ( struct dentry * , char * , size_t ) ; int ( * removexattr ) ( struct dentry * , const char * ) ; int ( * fiemap ) ( struct inode * , struct fiemap_extent_info * , u64 start , u64 len ) ; int ( * update_time ) ( struct inode * , struct timespec * , int ) ; int ( * atomic_open ) ( struct inode * , struct dentry * , struct file * , unsigned open_flag , umode_t create_mode , int * opened ) ; } __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ;
struct ctl_table ;
struct kmem_cache { struct kmem_cache_cpu * cpu_slab ; unsigned long flags ; unsigned long min_partial ; int size ; int object_size ; int offset ; int cpu_partial ; struct kmem_cache_order_objects oo ; struct kmem_cache_order_objects max ; struct kmem_cache_order_objects min ; gfp_t allocflags ; int refcount ; void ( * ctor ) ( void * ) ; int inuse ; int align ; int reserved ; const char * name ; struct list_head list ; struct kobject kobj ; int remote_node_defrag_ratio ; struct kmem_cache_node * node [ ( 1 << 6 ) ] ; } ;
struct ctl_table ;
struct siginfo ;
struct k_sigaction { struct sigaction sa ; } ;
struct siginfo ;
struct class_attribute_string { struct class_attribute attr ; char * str ; } ;
struct dev_ext_attribute { struct device_attribute attr ; void * var ; } ;
struct clock_event_device ;
struct clock_event_device { void ( * event_handler ) ( struct clock_event_device * ) ; int ( * set_next_event ) ( unsigned long evt , struct clock_event_device * ) ; int ( * set_next_ktime ) ( ktime_t expires , struct clock_event_device * ) ; ktime_t next_event ; u64 max_delta_ns ; u64 min_delta_ns ; u32 mult ; u32 shift ; enum clock_event_mode mode ; unsigned int features ; unsigned long retries ; void ( * broadcast ) ( const struct cpumask * mask ) ; void ( * set_mode ) ( enum clock_event_mode mode , struct clock_event_device * ) ; void ( * suspend ) ( struct clock_event_device * ) ; void ( * resume ) ( struct clock_event_device * ) ; unsigned long min_delta_ticks ; unsigned long max_delta_ticks ; const char * name ; int rating ; int irq ; const struct cpumask * cpumask ; struct list_head list ; } __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ;
struct pci_slot { struct pci_bus * bus ; struct list_head list ; struct hotplug_slot * hotplug ; unsigned char number ; struct kobject kobj ; } ;
struct user_struct ;
struct mm_walk { int ( * pgd_entry ) ( pgd_t * , unsigned long , unsigned long , struct mm_walk * ) ; int ( * pud_entry ) ( pud_t * , unsigned long , unsigned long , struct mm_walk * ) ; int ( * pmd_entry ) ( pmd_t * , unsigned long , unsigned long , struct mm_walk * ) ; int ( * pte_entry ) ( pte_t * , unsigned long , unsigned long , struct mm_walk * ) ; int ( * pte_hole ) ( unsigned long , unsigned long , struct mm_walk * ) ; int ( * hugetlb_entry ) ( pte_t * , unsigned long , unsigned long , unsigned long , struct mm_walk * ) ; struct mm_struct * mm ; void * private_ ; } ;
typedef int ( * pte_fn_t ) ( pte_t * pte , pgtable_t token , unsigned long addr , void * data ) ;
struct user_struct ;
struct cred ;
struct user_struct ;
struct cred ;
struct group_info { atomic_t usage ; int ngroups ; int nblocks ; kgid_t small_block [ 32 ] ; kgid_t * blocks [ 0 ] ; } ;
struct cred { atomic_t usage ; kuid_t uid ; kgid_t gid ; kuid_t suid ; kgid_t sgid ; kuid_t euid ; kgid_t egid ; kuid_t fsuid ; kgid_t fsgid ; unsigned securebits ; kernel_cap_t cap_inheritable ; kernel_cap_t cap_permitted ; kernel_cap_t cap_effective ; kernel_cap_t cap_bset ; unsigned char jit_keyring ; struct key * session_keyring ; struct key * process_keyring ; struct key * thread_keyring ; struct key * request_key_auth ; void * security ; struct user_struct * user ; struct user_namespace * user_ns ; struct group_info * group_info ; struct callback_head rcu ; } ;
struct user_struct { atomic_t __count ; atomic_t processes ; atomic_t files ; atomic_t sigpending ; atomic_t inotify_watches ; atomic_t inotify_devs ; atomic_t fanotify_listeners ; atomic_long_t epoll_watches ; unsigned long mq_bytes ; unsigned long locked_shm ; struct key * uid_keyring ; struct key * session_keyring ; struct hlist_node uidhash_node ; kuid_t uid ; atomic_long_t locked_vm ; } ;
struct irq_affinity_notify ;
struct irq_chip_type { struct irq_chip chip ; struct irq_chip_regs regs ; irq_flow_handler_t handler ; u32 type ; } ;
struct irq_affinity_notify { unsigned int irq ; struct kref kref ; struct work_struct work ; void ( * notify ) ( struct irq_affinity_notify * , const cpumask_t * mask ) ; void ( * release ) ( struct kref * ref ) ; } ;
struct cred ;
struct compat_ifreq { union { char ifrn_name [ 16 ] ; } ifr_ifrn ; union { struct sockaddr ifru_addr ; struct sockaddr ifru_dstaddr ; struct sockaddr ifru_broadaddr ; struct sockaddr ifru_netmask ; struct sockaddr ifru_hwaddr ; short ifru_flags ; compat_int_t ifru_ivalue ; compat_int_t ifru_mtu ; struct compat_ifmap ifru_map ; char ifru_slave [ 16 ] ; char ifru_newname [ 16 ] ; compat_caddr_t ifru_data ; struct compat_if_settings ifru_settings ; } ifr_ifru ; } ;
struct skb_shared_info { unsigned char nr_frags ; __u8 tx_flags ; unsigned short gso_size ; unsigned short gso_segs ; unsigned short gso_type ; struct sk_buff * frag_list ; struct skb_shared_hwtstamps hwtstamps ; __be32 ip6_frag_id ; atomic_t dataref ; void * destructor_arg ; skb_frag_t frags [ ( 65536 / ( ( 1UL ) << 12 ) + 1 ) ] ; } ;
struct ethtool_rx_flow_spec { __u32 flow_type ; union ethtool_flow_union h_u ; struct ethtool_flow_ext h_ext ; union ethtool_flow_union m_u ; struct ethtool_flow_ext m_ext ; __u64 ring_cookie ; __u32 location ; } ;
struct ethtool_rx_ntuple_flow_spec { __u32 flow_type ; union { struct ethtool_tcpip4_spec tcp_ip4_spec ; struct ethtool_tcpip4_spec udp_ip4_spec ; struct ethtool_tcpip4_spec sctp_ip4_spec ; struct ethtool_ah_espip4_spec ah_ip4_spec ; struct ethtool_ah_espip4_spec esp_ip4_spec ; struct ethtool_usrip4_spec usr_ip4_spec ; struct ethhdr ether_spec ; __u8 hdata [ 72 ] ; } h_u , m_u ; __u16 vlan_tag ; __u16 vlan_tag_mask ; __u64 data ; __u64 data_mask ; __s32 action ; } ;
struct compat_ethtool_rx_flow_spec { u32 flow_type ; union ethtool_flow_union h_u ; struct ethtool_flow_ext h_ext ; union ethtool_flow_union m_u ; struct ethtool_flow_ext m_ext ; compat_u64 ring_cookie ; u32 location ; } ;
struct netns_ipv4 { struct ctl_table_header * forw_hdr ; struct ctl_table_header * frags_hdr ; struct ctl_table_header * ipv4_hdr ; struct ctl_table_header * route_hdr ; struct ipv4_devconf * devconf_all ; struct ipv4_devconf * devconf_dflt ; struct fib_rules_ops * rules_ops ; bool fib_has_custom_rules ; struct fib_table * fib_local ; struct fib_table * fib_main ; struct fib_table * fib_default ; int fib_num_tclassid_users ; struct hlist_head * fib_table_hash ; struct sock * fibnl ; struct sock * * icmp_sk ; struct inet_peer_base * peers ; struct tcpm_hash_bucket * tcp_metrics_hash ; unsigned int tcp_metrics_hash_log ; struct netns_frags frags ; struct xt_table * iptable_filter ; struct xt_table * iptable_mangle ; struct xt_table * iptable_raw ; struct xt_table * arptable_filter ; struct xt_table * iptable_security ; struct xt_table * nat_table ; int sysctl_icmp_echo_ignore_all ; int sysctl_icmp_echo_ignore_broadcasts ; int sysctl_icmp_ignore_bogus_error_responses ; int sysctl_icmp_ratelimit ; int sysctl_icmp_ratemask ; int sysctl_icmp_errors_use_inbound_ifaddr ; kgid_t sysctl_ping_group_range [ 2 ] ; long sysctl_tcp_mem [ 3 ] ; atomic_t dev_addr_genid ; struct mr_table * mrt ; } ;
struct sockaddr_in6 { unsigned short int sin6_family ; __be16 sin6_port ; __be32 sin6_flowinfo ; struct in6_addr sin6_addr ; __u32 sin6_scope_id ; } ;
struct ipv6_mreq { struct in6_addr ipv6mr_multiaddr ; int ipv6mr_ifindex ; } ;
struct in6_flowlabel_req { struct in6_addr flr_dst ; __be32 flr_label ; __u8 flr_action ; __u8 flr_share ; __u16 flr_flags ; __u16 flr_expires ; __u16 flr_linger ; __u32 __flr_pad ; } ;
union nf_inet_addr { __u32 all [ 4 ] ; __be32 ip ; __be32 ip6 [ 4 ] ; struct in_addr in ; struct in6_addr in6 ; } ;
struct flowi4 { struct flowi_common __fl_common ; __be32 saddr ; __be32 daddr ; union flowi_uli uli ; } __attribute__ ( ( __aligned__ ( 64 / 8 ) ) ) ;
struct flowi6 { struct flowi_common __fl_common ; struct in6_addr daddr ; struct in6_addr saddr ; __be32 flowlabel ; union flowi_uli uli ; } __attribute__ ( ( __aligned__ ( 64 / 8 ) ) ) ;
struct flowidn { struct flowi_common __fl_common ; __le16 daddr ; __le16 saddr ; union flowi_uli uli ; } __attribute__ ( ( __aligned__ ( 64 / 8 ) ) ) ;
struct xfrm_id { xfrm_address_t daddr ; __be32 spi ; __u8 proto ; } ;
struct xfrm_selector { xfrm_address_t daddr ; xfrm_address_t saddr ; __be16 dport ; __be16 dport_mask ; __be16 sport ; __be16 sport_mask ; __u16 family ; __u8 prefixlen_d ; __u8 prefixlen_s ; __u8 proto ; int ifindex ; __kernel_uid32_t user ; } ;
struct xfrm_encap_tmpl { __u16 encap_type ; __be16 encap_sport ; __be16 encap_dport ; xfrm_address_t encap_oa ; } ;
struct xfrm_usersa_id { xfrm_address_t daddr ; __be32 spi ; __u16 family ; __u8 proto ; } ;
struct xfrm_user_kmaddress { xfrm_address_t local ; xfrm_address_t remote ; __u32 reserved ; __u16 family ; } ;
struct xfrm_user_migrate { xfrm_address_t old_daddr ; xfrm_address_t old_saddr ; xfrm_address_t new_daddr ; xfrm_address_t new_saddr ; __u8 proto ; __u8 mode ; __u16 reserved ; __u32 reqid ; __u16 old_family ; __u16 new_family ; } ;
struct ctl_table ;
struct dsa_switch_tree { struct dsa_platform_data * pd ; struct net_device * master_netdev ; __be16 tag_protocol ; s8 cpu_switch ; s8 cpu_port ; int link_poll_needed ; struct work_struct link_poll_work ; struct timer_list link_poll_timer ; struct dsa_switch * ds [ 4 ] ; } ;
struct cgroup_subsys_state { struct cgroup * cgroup ; atomic_t refcnt ; unsigned long flags ; struct css_id * id ; struct work_struct dput_work ; } ;
struct cred ;
struct siginfo ;
struct nameidata ;
struct iattr ;
struct ctl_table ;
struct xfrm_selector ;
struct scm_creds { u32 pid ; kuid_t uid ; kgid_t gid ; } ;
struct tpacket_block_desc { __u32 version ; __u32 offset_to_priv ; union tpacket_bd_header_u hdr ; } ;
struct rps_dev_flow_table { unsigned int mask ; struct callback_head rcu ; struct work_struct free_work ; struct rps_dev_flow flows [ 0 ] ; } ;
struct netdev_rx_queue { struct rps_map * rps_map ; struct rps_dev_flow_table * rps_flow_table ; struct kobject kobj ; struct net_device * dev ; } __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ;
struct packet_offload { __be16 type ; struct offload_callbacks callbacks ; struct list_head list ; } ;
struct in6_pktinfo { struct in6_addr ipi6_addr ; int ipi6_ifindex ; } ;
struct in6_ifreq { struct in6_addr ifr6_addr ; __u32 ifr6_prefixlen ; int ifr6_ifindex ; } ;
struct rt0_hdr { struct ipv6_rt_hdr rt_hdr ; __u32 reserved ; struct in6_addr addr [ 0 ] ; } ;
struct rt2_hdr { struct ipv6_rt_hdr rt_hdr ; __u32 reserved ; struct in6_addr addr ; } ;
struct ipv6_destopt_hao { __u8 type ; __u8 length ; struct in6_addr addr ; } __attribute__ ( ( packed ) ) ;
struct ipv6hdr { __u8 priority : 4 , version : 4 ; __u8 flow_lbl [ 3 ] ; __be16 payload_len ; __u8 nexthdr ; __u8 hop_limit ; struct in6_addr saddr ; struct in6_addr daddr ; } ;
struct icmp6hdr { __u8 icmp6_type ; __u8 icmp6_code ; __sum16 icmp6_cksum ; union { __be32 un_data32 [ 1 ] ; __be16 un_data16 [ 2 ] ; __u8 un_data8 [ 4 ] ; struct icmpv6_echo { __be16 identifier ; __be16 sequence ; } u_echo ; struct icmpv6_nd_advt { __u32 reserved : 5 , override : 1 , solicited : 1 , router : 1 , reserved2 : 24 ; } u_nd_advt ; struct icmpv6_nd_ra { __u8 hop_limit ; __u8 reserved : 3 , router_pref : 2 , home_agent : 1 , other : 1 , managed : 1 ; __be16 rt_lifetime ; } u_nd_ra ; } icmp6_dataun ; } ;
struct flowi6 ;
struct kmem_cache ;
struct poll_table_entry { struct file * filp ; unsigned long key ; wait_queue_t wait ; wait_queue_head_t * wait_address ; } ;
struct sock_common { union { __addrpair skc_addrpair ; struct { __be32 skc_daddr ; __be32 skc_rcv_saddr ; } ; } ; union { unsigned int skc_hash ; __u16 skc_u16hashes [ 2 ] ; } ; union { __portpair skc_portpair ; struct { __be16 skc_dport ; __u16 skc_num ; } ; } ; unsigned short skc_family ; volatile unsigned char skc_state ; unsigned char skc_reuse ; int skc_bound_dev_if ; union { struct hlist_node skc_bind_node ; struct hlist_nulls_node skc_portaddr_node ; } ; struct proto * skc_prot ; struct net * skc_net ; int skc_dontcopy_begin [ 0 ] ; union { struct hlist_node skc_node ; struct hlist_nulls_node skc_nulls_node ; } ; int skc_tx_queue_mapping ; atomic_t skc_refcnt ; int skc_dontcopy_end [ 0 ] ; } ;
struct ip_options_data { struct ip_options_rcu opt ; char data [ 40 ] ; } ;
struct inet6_request_sock { struct in6_addr loc_addr ; struct in6_addr rmt_addr ; struct sk_buff * pktopts ; int iif ; } ;
struct inet6_timewait_sock { struct in6_addr tw_v6_daddr ; struct in6_addr tw_v6_rcv_saddr ; } ;
struct blk_scsi_cmd_filter { unsigned long read_ok [ ( ( 256 ) / ( sizeof ( long ) * 8 ) ) ] ; unsigned long write_ok [ ( ( 256 ) / ( sizeof ( long ) * 8 ) ) ] ; struct kobject kobj ; } ;
struct unixware_disklabel { __le32 d_type ; __le32 d_magic ; __le32 d_version ; char d_serial [ 12 ] ; __le32 d_ncylinders ; __le32 d_ntracks ; __le32 d_nsectors ; __le32 d_secsize ; __le32 d_part_start ; __le32 d_unknown1 [ 12 ] ; __le32 d_alt_tbl ; __le32 d_alt_len ; __le32 d_phys_cyl ; __le32 d_phys_trk ; __le32 d_phys_sec ; __le32 d_phys_bytes ; __le32 d_unknown2 ; __le32 d_unknown3 ; __le32 d_pad [ 8 ] ; struct unixware_vtoc { __le32 v_magic ; __le32 v_version ; char v_name [ 8 ] ; __le16 v_nslices ; __le16 v_unknown1 ; __le32 v_reserved [ 10 ] ; struct unixware_slice v_slice [ 16 ] ; } vtoc ; } ;
struct ctl_table ;
struct kmem_cache ;
struct bio_integrity_payload { struct bio * bip_bio ; sector_t bip_sector ; void * bip_buf ; bio_end_io_t * bip_end_io ; unsigned int bip_size ; unsigned short bip_slab ; unsigned short bip_vcnt ; unsigned short bip_idx ; struct work_struct bip_work ; struct bio_vec bip_vec [ 0 ] ; } ;
struct request ;
struct request ;
struct request { struct list_head queuelist ; struct call_single_data csd ; struct request_queue * q ; unsigned int cmd_flags ; enum rq_cmd_type_bits cmd_type ; unsigned long atomic_flags ; int cpu ; unsigned int __data_len ; sector_t __sector ; struct bio * bio ; struct bio * biotail ; struct hlist_node hash ; union { struct rb_node rb_node ; void * completion_data ; } ; union { struct { struct io_cq * icq ; void * priv [ 2 ] ; } elv ; struct { unsigned int seq ; struct list_head list ; rq_end_io_fn * saved_end_io ; } flush ; } ; struct gendisk * rq_disk ; struct hd_struct * part ; unsigned long start_time ; struct request_list * rl ; unsigned long long start_time_ns ; unsigned long long io_start_time_ns ; unsigned short nr_phys_segments ; unsigned short nr_integrity_segments ; unsigned short ioprio ; int ref_count ; void * special ; char * buffer ; int tag ; int errors ; unsigned char __cmd [ 16 ] ; unsigned char * cmd ; unsigned short cmd_len ; unsigned int extra_len ; unsigned int sense_len ; unsigned int resid_len ; void * sense ; unsigned long deadline ; struct list_head timeout_list ; unsigned int timeout ; int retries ; rq_end_io_fn * end_io ; void * end_io_data ; struct request * next_rq ; } ;
struct elevator_type { struct kmem_cache * icq_cache ; struct elevator_ops ops ; size_t icq_size ; size_t icq_align ; struct elv_fs_entry * elevator_attrs ; char elevator_name [ ( 16 ) ] ; struct module * elevator_owner ; char icq_cache_name [ ( 16 ) + 5 ] ; struct list_head list ; } ;
struct blk_plug_cb ;
struct blk_plug_cb { struct list_head list ; blk_plug_cb_fn callback ; void * data ; } ;
struct blk_integrity { integrity_gen_fn * generate_fn ; integrity_vrfy_fn * verify_fn ; integrity_set_tag_fn * set_tag_fn ; integrity_get_tag_fn * get_tag_fn ; unsigned short flags ; unsigned short tuple_size ; unsigned short sector_size ; unsigned short tag_size ; const char * name ; struct kobject kobj ; } ;
struct crypto_tfm ;
struct crypto_alg { struct list_head cra_list ; struct list_head cra_users ; u32 cra_flags ; unsigned int cra_blocksize ; unsigned int cra_ctxsize ; unsigned int cra_alignmask ; int cra_priority ; atomic_t cra_refcnt ; char cra_name [ 64 ] ; char cra_driver_name [ 64 ] ; const struct crypto_type * cra_type ; union { struct ablkcipher_alg ablkcipher ; struct aead_alg aead ; struct blkcipher_alg blkcipher ; struct cipher_alg cipher ; struct compress_alg compress ; struct rng_alg rng ; } cra_u ; int ( * cra_init ) ( struct crypto_tfm * tfm ) ; void ( * cra_exit ) ( struct crypto_tfm * tfm ) ; void ( * cra_destroy ) ( struct crypto_alg * alg ) ; struct module * cra_module ; } ;
struct crypto_tfm { u32 crt_flags ; union { struct ablkcipher_tfm ablkcipher ; struct aead_tfm aead ; struct blkcipher_tfm blkcipher ; struct cipher_tfm cipher ; struct hash_tfm hash ; struct compress_tfm compress ; struct rng_tfm rng ; } crt_u ; void ( * exit ) ( struct crypto_tfm * tfm ) ; struct crypto_alg * __crt_alg ; void * __crt_ctx [ ] __attribute__ ( ( __aligned__ ( __alignof__ ( unsigned long long ) ) ) ) ; } ;
struct nameidata { struct path path ; struct qstr last ; struct path root ; struct inode * inode ; unsigned int flags ; unsigned seq ; int last_type ; unsigned depth ; char * saved_names [ MAX_NESTED_LINKS + 1 ] ; } ;
struct acpi_sleep_functions { acpi_sleep_function legacy_function ; acpi_sleep_function extended_function ; } ;
union acpi_resource_data { struct acpi_resource_irq irq ; struct acpi_resource_dma dma ; struct acpi_resource_start_dependent start_dpf ; struct acpi_resource_io io ; struct acpi_resource_fixed_io fixed_io ; struct acpi_resource_fixed_dma fixed_dma ; struct acpi_resource_vendor vendor ; struct acpi_resource_vendor_typed vendor_typed ; struct acpi_resource_end_tag end_tag ; struct acpi_resource_memory24 memory24 ; struct acpi_resource_memory32 memory32 ; struct acpi_resource_fixed_memory32 fixed_memory32 ; struct acpi_resource_address16 address16 ; struct acpi_resource_address32 address32 ; struct acpi_resource_address64 address64 ; struct acpi_resource_extended_address64 ext_address64 ; struct acpi_resource_extended_irq extended_irq ; struct acpi_resource_generic_register generic_reg ; struct acpi_resource_gpio gpio ; struct acpi_resource_i2c_serialbus i2c_serial_bus ; struct acpi_resource_spi_serialbus spi_serial_bus ; struct acpi_resource_uart_serialbus uart_serial_bus ; struct acpi_resource_common_serialbus common_serial_bus ; struct acpi_resource_address address ; } ;
struct acpi_driver ;
struct acpi_driver { char name [ 80 ] ; char class_ [ 80 ] ; const struct acpi_device_id * ids ; unsigned int flags ; struct acpi_device_ops ops ; struct device_driver drv ; struct module * owner ; } ;
struct acpi_pci_root { struct list_head node ; struct acpi_device * device ; struct acpi_pci_id id ; struct pci_bus * bus ; u16 segment ; struct resource secondary ; u32 osc_support_set ; u32 osc_control_set ; phys_addr_t mcfg_addr ; } ;
struct resource_list_entry { struct list_head node ; struct resource res ; } ;
typedef union { __u8 type ; struct dvd_physical physical ; struct dvd_copyright copyright ; struct dvd_disckey disckey ; struct dvd_bca bca ; struct dvd_manufact manufact ; } dvd_struct ;
typedef union { __u8 type ; struct dvd_lu_send_agid lsa ; struct dvd_host_send_challenge hsc ; struct dvd_send_key lsk ; struct dvd_lu_send_challenge lsc ; struct dvd_send_key hsk ; struct dvd_lu_send_title_key lstk ; struct dvd_lu_send_asf lsasf ; struct dvd_host_send_rpcstate hrpcs ; struct dvd_lu_send_rpcstate lrpcs ; } dvd_authinfo ;
struct ff_effect { __u16 type ; __s16 id ; __u16 direction ; struct ff_trigger trigger ; struct ff_replay replay ; union { struct ff_constant_effect constant ; struct ff_ramp_effect ramp ; struct ff_periodic_effect periodic ; struct ff_condition_effect condition [ 2 ] ; struct ff_rumble_effect rumble ; } u ; } ;
struct pnp_driver { char * name ; const struct pnp_device_id * id_table ; unsigned int flags ; int ( * probe ) ( struct pnp_dev * dev , const struct pnp_device_id * dev_id ) ; void ( * remove ) ( struct pnp_dev * dev ) ; void ( * shutdown ) ( struct pnp_dev * dev ) ; int ( * suspend ) ( struct pnp_dev * dev , pm_message_t state ) ; int ( * resume ) ( struct pnp_dev * dev ) ; struct device_driver driver ; } ;
struct phy_driver { u32 phy_id ; char * name ; unsigned int phy_id_mask ; u32 features ; u32 flags ; int ( * config_init ) ( struct phy_device * phydev ) ; int ( * probe ) ( struct phy_device * phydev ) ; int ( * suspend ) ( struct phy_device * phydev ) ; int ( * resume ) ( struct phy_device * phydev ) ; int ( * config_aneg ) ( struct phy_device * phydev ) ; int ( * read_status ) ( struct phy_device * phydev ) ; int ( * ack_interrupt ) ( struct phy_device * phydev ) ; int ( * config_intr ) ( struct phy_device * phydev ) ; int ( * did_interrupt ) ( struct phy_device * phydev ) ; void ( * remove ) ( struct phy_device * phydev ) ; int ( * match_phy_device ) ( struct phy_device * phydev ) ; int ( * ts_info ) ( struct phy_device * phydev , struct ethtool_ts_info * ti ) ; int ( * hwtstamp ) ( struct phy_device * phydev , struct ifreq * ifr ) ; bool ( * rxtstamp ) ( struct phy_device * dev , struct sk_buff * skb , int type ) ; void ( * txtstamp ) ( struct phy_device * dev , struct sk_buff * skb , int type ) ; struct device_driver driver ; } ;
typedef int ( * dm_iterate_devices_fn ) ( struct dm_target * ti , iterate_devices_callout_fn fn , void * data ) ;
struct module ;
struct paravirt_patch_template { struct pv_init_ops pv_init_ops ; struct pv_time_ops pv_time_ops ; struct pv_cpu_ops pv_cpu_ops ; struct pv_irq_ops pv_irq_ops ; struct pv_apic_ops pv_apic_ops ; struct pv_mmu_ops pv_mmu_ops ; struct pv_lock_ops pv_lock_ops ; } ;
union thread_xstate { struct i387_fsave_struct fsave ; struct i387_fxsave_struct fxsave ; struct i387_soft_struct soft ; struct xsave_struct xsave ; } ;
struct thread_info { unsigned long int spill_slot [ 4 ] ; struct task_struct * task ; struct exec_domain * exec_domain ; __u32 flags ; __u32 status ; __u32 cpu ; int preempt_count ; mm_segment_t addr_limit ; struct restart_block restart_block ; void * sysenter_return ; unsigned int sig_on_uaccess_error : 1 ; unsigned int uaccess_err : 1 ; struct client_extension client_data ; } ;
typedef struct arch_spinlock { union { __ticketpair_t head_tail ; struct { __ticket_t head , tail ; } tickets ; } ; } arch_spinlock_t ;
struct edd { unsigned int mbr_signature [ 16 ] ; struct edd_info edd_info [ 6 ] ; unsigned char mbr_signature_nr ; unsigned char edd_info_nr ; } ;
struct boot_params { struct screen_info screen_info ; struct apm_bios_info apm_bios_info ; __u8 _pad2 [ 4 ] ; __u64 tboot_addr ; struct ist_info ist_info ; __u8 _pad3 [ 16 ] ; __u8 hd0_info [ 16 ] ; __u8 hd1_info [ 16 ] ; struct sys_desc_table sys_desc_table ; struct olpc_ofw_header olpc_ofw_header ; __u8 _pad4 [ 128 ] ; struct edid_info edid_info ; struct efi_info efi_info ; __u32 alt_mem_k ; __u32 scratch ; __u8 e820_entries ; __u8 eddbuf_entries ; __u8 edd_mbr_sig_buf_entries ; __u8 _pad6 [ 6 ] ; struct setup_header hdr ; __u8 _pad7 [ 0x290 - 0x1f1 - sizeof ( struct setup_header ) ] ; __u32 edd_mbr_sig_buffer [ 16 ] ; struct e820entry e820_map [ 128 ] ; __u8 _pad8 [ 48 ] ; struct edd_info eddbuf [ 6 ] ; __u8 _pad9 [ 276 ] ; } __attribute__ ( ( packed ) ) ;
struct ctl_table_set { int ( * is_seen ) ( struct ctl_table_set * ) ; struct ctl_dir dir ; } ;
struct module ;
struct module ;
struct module ;
struct module ;
struct module ;
struct module { enum module_state state ; struct list_head list ; char name [ ( 64 - sizeof ( unsigned long ) ) ] ; struct module_kobject mkobj ; struct module_attribute * modinfo_attrs ; const char * version ; const char * srcversion ; struct kobject * holders_dir ; const struct kernel_symbol * syms ; const unsigned long * crcs ; unsigned int num_syms ; struct kernel_param * kp ; unsigned int num_kp ; unsigned int num_gpl_syms ; const struct kernel_symbol * gpl_syms ; const unsigned long * gpl_crcs ; const struct kernel_symbol * unused_syms ; const unsigned long * unused_crcs ; unsigned int num_unused_syms ; unsigned int num_unused_gpl_syms ; const struct kernel_symbol * unused_gpl_syms ; const unsigned long * unused_gpl_crcs ; const struct kernel_symbol * gpl_future_syms ; const unsigned long * gpl_future_crcs ; unsigned int num_gpl_future_syms ; unsigned int num_exentries ; struct exception_table_entry * extable ; int ( * init ) ( void ) ; void * module_init ; void * module_core ; unsigned int init_size , core_size ; unsigned int init_text_size , core_text_size ; unsigned int init_ro_size , core_ro_size ; struct mod_arch_specific arch ; unsigned int taints ; unsigned num_bugs ; struct list_head bug_list ; struct bug_entry * bug_table ; Elf64_Sym * symtab , * core_symtab ; unsigned int num_symtab , core_num_syms ; char * strtab , * core_strtab ; struct module_sect_attrs * sect_attrs ; struct module_notes_attrs * notes_attrs ; char * args ; void * percpu ; unsigned int percpu_size ; unsigned int num_tracepoints ; struct tracepoint * const * tracepoints_ptrs ; unsigned int num_trace_bprintk_fmt ; const char * * trace_bprintk_fmt_start ; struct ftrace_event_call * * trace_events ; unsigned int num_trace_events ; unsigned int num_ftrace_callsites ; unsigned long * ftrace_callsites ; struct list_head source_list ; struct list_head target_list ; struct task_struct * waiter ; void ( * exit ) ( void ) ; struct module_ref * refptr ; } ;
struct hrtimer_sleeper { struct hrtimer timer ; struct task_struct * task ; } ;
struct kqid { union { kuid_t uid ; kgid_t gid ; kprojid_t projid ; } ; enum quota_type type ; } ;
typedef int ( * read_actor_t ) ( read_descriptor_t * , struct page * , unsigned long , unsigned long ) ;
struct address_space_operations { int ( * writepage ) ( struct page * page , struct writeback_control * wbc ) ; int ( * readpage ) ( struct file * , struct page * ) ; int ( * writepages ) ( struct address_space * , struct writeback_control * ) ; int ( * set_page_dirty ) ( struct page * page ) ; int ( * readpages ) ( struct file * filp , struct address_space * mapping , struct list_head * pages , unsigned nr_pages ) ; int ( * write_begin ) ( struct file * , struct address_space * mapping , loff_t pos , unsigned len , unsigned flags , struct page * * pagep , void * * fsdata ) ; int ( * write_end ) ( struct file * , struct address_space * mapping , loff_t pos , unsigned len , unsigned copied , struct page * page , void * fsdata ) ; sector_t ( * bmap ) ( struct address_space * , sector_t ) ; void ( * invalidatepage ) ( struct page * , unsigned long ) ; int ( * releasepage ) ( struct page * , gfp_t ) ; void ( * freepage ) ( struct page * ) ; ssize_t ( * direct_IO ) ( int , struct kiocb * , const struct iovec * iov , loff_t offset , unsigned long nr_segs ) ; int ( * get_xip_mem ) ( struct address_space * , unsigned long , int , void * * , unsigned long * ) ; int ( * migratepage ) ( struct address_space * , struct page * , struct page * , enum migrate_mode ) ; int ( * launder_page ) ( struct page * ) ; int ( * is_partially_uptodate ) ( struct page * , read_descriptor_t * , unsigned long ) ; int ( * error_remove_page ) ( struct address_space * , struct page * ) ; int ( * swap_activate ) ( struct swap_info_struct * sis , struct file * file , sector_t * span ) ; void ( * swap_deactivate ) ( struct file * file ) ; } ;
struct fown_struct { rwlock_t lock ; struct pid * pid ; enum pid_type pid_type ; kuid_t uid , euid ; int signum ; } ;
struct file_operations { struct module * owner ; loff_t ( * llseek ) ( struct file * , loff_t , int ) ; ssize_t ( * read ) ( struct file * , char * , size_t , loff_t * ) ; ssize_t ( * write ) ( struct file * , const char * , size_t , loff_t * ) ; ssize_t ( * aio_read ) ( struct kiocb * , const struct iovec * , unsigned long , loff_t ) ; ssize_t ( * aio_write ) ( struct kiocb * , const struct iovec * , unsigned long , loff_t ) ; int ( * readdir ) ( struct file * , void * , filldir_t ) ; unsigned int ( * poll ) ( struct file * , struct poll_table_struct * ) ; long ( * unlocked_ioctl ) ( struct file * , unsigned int , unsigned long ) ; long ( * compat_ioctl ) ( struct file * , unsigned int , unsigned long ) ; int ( * mmap ) ( struct file * , struct vm_area_struct * ) ; int ( * open ) ( struct inode * , struct file * ) ; int ( * flush ) ( struct file * , fl_owner_t id ) ; int ( * release ) ( struct inode * , struct file * ) ; int ( * fsync ) ( struct file * , loff_t , loff_t , int datasync ) ; int ( * aio_fsync ) ( struct kiocb * , int datasync ) ; int ( * fasync ) ( int , struct file * , int ) ; int ( * lock ) ( struct file * , int , struct file_lock * ) ; ssize_t ( * sendpage ) ( struct file * , struct page * , int , size_t , loff_t * , int ) ; unsigned long ( * get_unmapped_area ) ( struct file * , unsigned long , unsigned long , unsigned long , unsigned long ) ; int ( * check_flags ) ( int ) ; int ( * flock ) ( struct file * , int , struct file_lock * ) ; ssize_t ( * splice_write ) ( struct pipe_inode_info * , struct file * , loff_t * , size_t , unsigned int ) ; ssize_t ( * splice_read ) ( struct file * , loff_t * , struct pipe_inode_info * , size_t , unsigned int ) ; int ( * setlease ) ( struct file * , long , struct file_lock * * ) ; long ( * fallocate ) ( struct file * file , int mode , loff_t offset , loff_t len ) ; int ( * show_fdinfo ) ( struct seq_file * m , struct file * f ) ; } ;
typedef struct siginfo { int si_signo ; int si_errno ; int si_code ; union { int _pad [ ( ( 128 - ( 4 * sizeof ( int ) ) ) / sizeof ( int ) ) ] ; struct { __kernel_pid_t _pid ; __kernel_uid32_t _uid ; } _kill ; struct { __kernel_timer_t _tid ; int _overrun ; char _pad [ sizeof ( __kernel_uid32_t ) - sizeof ( int ) ] ; sigval_t _sigval ; int _sys_private ; } _timer ; struct { __kernel_pid_t _pid ; __kernel_uid32_t _uid ; sigval_t _sigval ; } _rt ; struct { __kernel_pid_t _pid ; __kernel_uid32_t _uid ; int _status ; __kernel_clock_t _utime ; __kernel_clock_t _stime ; } _sigchld ; struct { void * _addr ; short _addr_lsb ; } _sigfault ; struct { long _band ; int _fd ; } _sigpoll ; struct { void * _call_addr ; int _syscall ; unsigned int _arch ; } _sigsys ; } _sifields ; } siginfo_t ;
struct module ;
struct tick_sched { struct hrtimer sched_timer ; unsigned long check_clocks ; enum tick_nohz_mode nohz_mode ; ktime_t last_tick ; int inidle ; int tick_stopped ; unsigned long idle_jiffies ; unsigned long idle_calls ; unsigned long idle_sleeps ; int idle_active ; ktime_t idle_entrytime ; ktime_t idle_waketime ; ktime_t idle_exittime ; ktime_t idle_sleeptime ; ktime_t iowait_sleeptime ; ktime_t sleep_length ; unsigned long last_jiffies ; unsigned long next_jiffies ; ktime_t idle_expires ; int do_timer_last ; } ;
struct module ;
struct hrtimer_sleeper ;
struct module ;
struct module ;
struct tasklet_hrtimer { struct hrtimer timer ; struct tasklet_struct tasklet ; enum hrtimer_restart ( * function ) ( struct hrtimer * ) ; } ;
struct pm_qos_request { struct plist_node node ; int pm_qos_class ; struct delayed_work work ; } ;
struct ifreq { union { char ifrn_name [ 16 ] ; } ifr_ifrn ; union { struct sockaddr ifru_addr ; struct sockaddr ifru_dstaddr ; struct sockaddr ifru_broadaddr ; struct sockaddr ifru_netmask ; struct sockaddr ifru_hwaddr ; short ifru_flags ; int ifru_ivalue ; int ifru_mtu ; struct ifmap ifru_map ; char ifru_slave [ 16 ] ; char ifru_newname [ 16 ] ; void * ifru_data ; struct if_settings ifru_settings ; } ifr_ifru ; } ;
typedef struct compat_sigevent { compat_sigval_t sigev_value ; compat_int_t sigev_signo ; compat_int_t sigev_notify ; union { compat_int_t _pad [ ( ( 64 / sizeof ( int ) ) - 3 ) ] ; compat_int_t _tid ; struct { compat_uptr_t _function ; compat_uptr_t _attribute ; } _sigev_thread ; } _sigev_un ; } compat_sigevent_t ;
struct module ;
struct module ;
struct ethtool_rxnfc { __u32 cmd ; __u32 flow_type ; __u64 data ; struct ethtool_rx_flow_spec fs ; __u32 rule_cnt ; __u32 rule_locs [ 0 ] ; } ;
struct ethtool_rx_ntuple { __u32 cmd ; struct ethtool_rx_ntuple_flow_spec fs ; } ;
struct compat_ethtool_rxnfc { u32 cmd ; u32 flow_type ; compat_u64 data ; struct compat_ethtool_rx_flow_spec fs ; u32 rule_cnt ; u32 rule_locs [ 0 ] ; } ;
struct netns_mib { __typeof__ ( struct tcp_mib ) * tcp_statistics [ 1 ] ; __typeof__ ( struct ipstats_mib ) * ip_statistics [ 1 ] ; __typeof__ ( struct linux_mib ) * net_statistics [ 1 ] ; __typeof__ ( struct udp_mib ) * udp_statistics [ 1 ] ; __typeof__ ( struct udp_mib ) * udplite_statistics [ 1 ] ; __typeof__ ( struct icmp_mib ) * icmp_statistics [ 1 ] ; __typeof__ ( struct icmpmsg_mib ) * icmpmsg_statistics ; struct proc_dir_entry * proc_net_devsnmp6 ; __typeof__ ( struct udp_mib ) * udp_stats_in6 [ 1 ] ; __typeof__ ( struct udp_mib ) * udplite_stats_in6 [ 1 ] ; __typeof__ ( struct ipstats_mib ) * ipv6_statistics [ 1 ] ; __typeof__ ( struct icmpv6_mib ) * icmpv6_statistics [ 1 ] ; __typeof__ ( struct icmpv6msg_mib ) * icmpv6msg_statistics ; } ;
struct inet_frags { struct hlist_head hash [ 64 ] ; rwlock_t lock ; u32 rnd ; int qsize ; int secret_interval ; struct timer_list secret_timer ; unsigned int ( * hashfn ) ( struct inet_frag_queue * ) ; void ( * constructor ) ( struct inet_frag_queue * q , void * arg ) ; void ( * destructor ) ( struct inet_frag_queue * ) ; void ( * skb_free ) ( struct sk_buff * ) ; bool ( * match ) ( struct inet_frag_queue * q , void * arg ) ; void ( * frag_expire ) ( unsigned long data ) ; } ;
struct xfrm_user_tmpl { struct xfrm_id id ; __u16 family ; xfrm_address_t saddr ; __u32 reqid ; __u8 mode ; __u8 share ; __u8 optional ; __u32 aalgos ; __u32 ealgos ; __u32 calgos ; } ;
struct xfrm_usersa_info { struct xfrm_selector sel ; struct xfrm_id id ; xfrm_address_t saddr ; struct xfrm_lifetime_cfg lft ; struct xfrm_lifetime_cur curlft ; struct xfrm_stats stats ; __u32 seq ; __u32 reqid ; __u16 family ; __u8 mode ; __u8 replay_window ; __u8 flags ; } ;
struct xfrm_aevent_id { struct xfrm_usersa_id sa_id ; xfrm_address_t saddr ; __u32 flags ; __u32 reqid ; } ;
struct xfrm_userpolicy_info { struct xfrm_selector sel ; struct xfrm_lifetime_cfg lft ; struct xfrm_lifetime_cur curlft ; __u32 priority ; __u32 index ; __u8 dir ; __u8 action ; __u8 flags ; __u8 share ; } ;
struct xfrm_userpolicy_id { struct xfrm_selector sel ; __u32 index ; __u8 dir ; } ;
struct xfrm_user_report { __u8 proto ; struct xfrm_selector sel ; } ;
struct xfrm_user_mapping { struct xfrm_usersa_id id ; __u32 reqid ; xfrm_address_t old_saddr ; xfrm_address_t new_saddr ; __be16 old_sport ; __be16 new_sport ; } ;
struct fown_struct ;
struct file_operations ;
struct security_operations { char name [ 10 + 1 ] ; int ( * ptrace_access_check ) ( struct task_struct * child , unsigned int mode ) ; int ( * ptrace_traceme ) ( struct task_struct * parent ) ; int ( * capget ) ( struct task_struct * target , kernel_cap_t * effective , kernel_cap_t * inheritable , kernel_cap_t * permitted ) ; int ( * capset ) ( struct cred * new_ , const struct cred * old , const kernel_cap_t * effective , const kernel_cap_t * inheritable , const kernel_cap_t * permitted ) ; int ( * capable ) ( const struct cred * cred , struct user_namespace * ns , int cap , int audit ) ; int ( * quotactl ) ( int cmds , int type , int id , struct super_block * sb ) ; int ( * quota_on ) ( struct dentry * dentry ) ; int ( * syslog ) ( int type ) ; int ( * settime ) ( const struct timespec * ts , const struct timezone * tz ) ; int ( * vm_enough_memory ) ( struct mm_struct * mm , long pages ) ; int ( * bprm_set_creds ) ( struct linux_binprm * bprm ) ; int ( * bprm_check_security ) ( struct linux_binprm * bprm ) ; int ( * bprm_secureexec ) ( struct linux_binprm * bprm ) ; void ( * bprm_committing_creds ) ( struct linux_binprm * bprm ) ; void ( * bprm_committed_creds ) ( struct linux_binprm * bprm ) ; int ( * sb_alloc_security ) ( struct super_block * sb ) ; void ( * sb_free_security ) ( struct super_block * sb ) ; int ( * sb_copy_data ) ( char * orig , char * copy ) ; int ( * sb_remount ) ( struct super_block * sb , void * data ) ; int ( * sb_kern_mount ) ( struct super_block * sb , int flags , void * data ) ; int ( * sb_show_options ) ( struct seq_file * m , struct super_block * sb ) ; int ( * sb_statfs ) ( struct dentry * dentry ) ; int ( * sb_mount ) ( const char * dev_name , struct path * path , const char * type , unsigned long flags , void * data ) ; int ( * sb_umount ) ( struct vfsmount * mnt , int flags ) ; int ( * sb_pivotroot ) ( struct path * old_path , struct path * new_path ) ; int ( * sb_set_mnt_opts ) ( struct super_block * sb , struct security_mnt_opts * opts ) ; void ( * sb_clone_mnt_opts ) ( const struct super_block * oldsb , struct super_block * newsb ) ; int ( * sb_parse_opts_str ) ( char * options , struct security_mnt_opts * opts ) ; int ( * path_unlink ) ( struct path * dir , struct dentry * dentry ) ; int ( * path_mkdir ) ( struct path * dir , struct dentry * dentry , umode_t mode ) ; int ( * path_rmdir ) ( struct path * dir , struct dentry * dentry ) ; int ( * path_mknod ) ( struct path * dir , struct dentry * dentry , umode_t mode , unsigned int dev ) ; int ( * path_truncate ) ( struct path * path ) ; int ( * path_symlink ) ( struct path * dir , struct dentry * dentry , const char * old_name ) ; int ( * path_link ) ( struct dentry * old_dentry , struct path * new_dir , struct dentry * new_dentry ) ; int ( * path_rename ) ( struct path * old_dir , struct dentry * old_dentry , struct path * new_dir , struct dentry * new_dentry ) ; int ( * path_chmod ) ( struct path * path , umode_t mode ) ; int ( * path_chown ) ( struct path * path , kuid_t uid , kgid_t gid ) ; int ( * path_chroot ) ( struct path * path ) ; int ( * inode_alloc_security ) ( struct inode * inode ) ; void ( * inode_free_security ) ( struct inode * inode ) ; int ( * inode_init_security ) ( struct inode * inode , struct inode * dir , const struct qstr * qstr , char * * name , void * * value , size_t * len ) ; int ( * inode_create ) ( struct inode * dir , struct dentry * dentry , umode_t mode ) ; int ( * inode_link ) ( struct dentry * old_dentry , struct inode * dir , struct dentry * new_dentry ) ; int ( * inode_unlink ) ( struct inode * dir , struct dentry * dentry ) ; int ( * inode_symlink ) ( struct inode * dir , struct dentry * dentry , const char * old_name ) ; int ( * inode_mkdir ) ( struct inode * dir , struct dentry * dentry , umode_t mode ) ; int ( * inode_rmdir ) ( struct inode * dir , struct dentry * dentry ) ; int ( * inode_mknod ) ( struct inode * dir , struct dentry * dentry , umode_t mode , dev_t dev ) ; int ( * inode_rename ) ( struct inode * old_dir , struct dentry * old_dentry , struct inode * new_dir , struct dentry * new_dentry ) ; int ( * inode_readlink ) ( struct dentry * dentry ) ; int ( * inode_follow_link ) ( struct dentry * dentry , struct nameidata * nd ) ; int ( * inode_permission ) ( struct inode * inode , int mask ) ; int ( * inode_setattr ) ( struct dentry * dentry , struct iattr * attr ) ; int ( * inode_getattr ) ( struct vfsmount * mnt , struct dentry * dentry ) ; int ( * inode_setxattr ) ( struct dentry * dentry , const char * name , const void * value , size_t size , int flags ) ; void ( * inode_post_setxattr ) ( struct dentry * dentry , const char * name , const void * value , size_t size , int flags ) ; int ( * inode_getxattr ) ( struct dentry * dentry , const char * name ) ; int ( * inode_listxattr ) ( struct dentry * dentry ) ; int ( * inode_removexattr ) ( struct dentry * dentry , const char * name ) ; int ( * inode_need_killpriv ) ( struct dentry * dentry ) ; int ( * inode_killpriv ) ( struct dentry * dentry ) ; int ( * inode_getsecurity ) ( const struct inode * inode , const char * name , void * * buffer , bool alloc ) ; int ( * inode_setsecurity ) ( struct inode * inode , const char * name , const void * value , size_t size , int flags ) ; int ( * inode_listsecurity ) ( struct inode * inode , char * buffer , size_t buffer_size ) ; void ( * inode_getsecid ) ( const struct inode * inode , u32 * secid ) ; int ( * file_permission ) ( struct file * file , int mask ) ; int ( * file_alloc_security ) ( struct file * file ) ; void ( * file_free_security ) ( struct file * file ) ; int ( * file_ioctl ) ( struct file * file , unsigned int cmd , unsigned long arg ) ; int ( * mmap_addr ) ( unsigned long addr ) ; int ( * mmap_file ) ( struct file * file , unsigned long reqprot , unsigned long prot , unsigned long flags ) ; int ( * file_mprotect ) ( struct vm_area_struct * vma , unsigned long reqprot , unsigned long prot ) ; int ( * file_lock ) ( struct file * file , unsigned int cmd ) ; int ( * file_fcntl ) ( struct file * file , unsigned int cmd , unsigned long arg ) ; int ( * file_set_fowner ) ( struct file * file ) ; int ( * file_send_sigiotask ) ( struct task_struct * tsk , struct fown_struct * fown , int sig ) ; int ( * file_receive ) ( struct file * file ) ; int ( * file_open ) ( struct file * file , const struct cred * cred ) ; int ( * task_create ) ( unsigned long clone_flags ) ; void ( * task_free ) ( struct task_struct * task ) ; int ( * cred_alloc_blank ) ( struct cred * cred , gfp_t gfp ) ; void ( * cred_free ) ( struct cred * cred ) ; int ( * cred_prepare ) ( struct cred * new_ , const struct cred * old , gfp_t gfp ) ; void ( * cred_transfer ) ( struct cred * new_ , const struct cred * old ) ; int ( * kernel_act_as ) ( struct cred * new_ , u32 secid ) ; int ( * kernel_create_files_as ) ( struct cred * new_ , struct inode * inode ) ; int ( * kernel_module_request ) ( char * kmod_name ) ; int ( * kernel_module_from_file ) ( struct file * file ) ; int ( * task_fix_setuid ) ( struct cred * new_ , const struct cred * old , int flags ) ; int ( * task_setpgid ) ( struct task_struct * p , pid_t pgid ) ; int ( * task_getpgid ) ( struct task_struct * p ) ; int ( * task_getsid ) ( struct task_struct * p ) ; void ( * task_getsecid ) ( struct task_struct * p , u32 * secid ) ; int ( * task_setnice ) ( struct task_struct * p , int nice ) ; int ( * task_setioprio ) ( struct task_struct * p , int ioprio ) ; int ( * task_getioprio ) ( struct task_struct * p ) ; int ( * task_setrlimit ) ( struct task_struct * p , unsigned int resource , struct rlimit * new_rlim ) ; int ( * task_setscheduler ) ( struct task_struct * p ) ; int ( * task_getscheduler ) ( struct task_struct * p ) ; int ( * task_movememory ) ( struct task_struct * p ) ; int ( * task_kill ) ( struct task_struct * p , struct siginfo * info , int sig , u32 secid ) ; int ( * task_wait ) ( struct task_struct * p ) ; int ( * task_prctl ) ( int option , unsigned long arg2 , unsigned long arg3 , unsigned long arg4 , unsigned long arg5 ) ; void ( * task_to_inode ) ( struct task_struct * p , struct inode * inode ) ; int ( * ipc_permission ) ( struct kern_ipc_perm * ipcp , short flag ) ; void ( * ipc_getsecid ) ( struct kern_ipc_perm * ipcp , u32 * secid ) ; int ( * msg_msg_alloc_security ) ( struct msg_msg * msg ) ; void ( * msg_msg_free_security ) ( struct msg_msg * msg ) ; int ( * msg_queue_alloc_security ) ( struct msg_queue * msq ) ; void ( * msg_queue_free_security ) ( struct msg_queue * msq ) ; int ( * msg_queue_associate ) ( struct msg_queue * msq , int msqflg ) ; int ( * msg_queue_msgctl ) ( struct msg_queue * msq , int cmd ) ; int ( * msg_queue_msgsnd ) ( struct msg_queue * msq , struct msg_msg * msg , int msqflg ) ; int ( * msg_queue_msgrcv ) ( struct msg_queue * msq , struct msg_msg * msg , struct task_struct * target , long type , int mode ) ; int ( * shm_alloc_security ) ( struct shmid_kernel * shp ) ; void ( * shm_free_security ) ( struct shmid_kernel * shp ) ; int ( * shm_associate ) ( struct shmid_kernel * shp , int shmflg ) ; int ( * shm_shmctl ) ( struct shmid_kernel * shp , int cmd ) ; int ( * shm_shmat ) ( struct shmid_kernel * shp , char * shmaddr , int shmflg ) ; int ( * sem_alloc_security ) ( struct sem_array * sma ) ; void ( * sem_free_security ) ( struct sem_array * sma ) ; int ( * sem_associate ) ( struct sem_array * sma , int semflg ) ; int ( * sem_semctl ) ( struct sem_array * sma , int cmd ) ; int ( * sem_semop ) ( struct sem_array * sma , struct sembuf * sops , unsigned nsops , int alter ) ; int ( * netlink_send ) ( struct sock * sk , struct sk_buff * skb ) ; void ( * d_instantiate ) ( struct dentry * dentry , struct inode * inode ) ; int ( * getprocattr ) ( struct task_struct * p , char * name , char * * value ) ; int ( * setprocattr ) ( struct task_struct * p , char * name , void * value , size_t size ) ; int ( * secid_to_secctx ) ( u32 secid , char * * secdata , u32 * seclen ) ; int ( * secctx_to_secid ) ( const char * secdata , u32 seclen , u32 * secid ) ; void ( * release_secctx ) ( char * secdata , u32 seclen ) ; int ( * inode_notifysecctx ) ( struct inode * inode , void * ctx , u32 ctxlen ) ; int ( * inode_setsecctx ) ( struct dentry * dentry , void * ctx , u32 ctxlen ) ; int ( * inode_getsecctx ) ( struct inode * inode , void * * ctx , u32 * ctxlen ) ; int ( * unix_stream_connect ) ( struct sock * sock , struct sock * other , struct sock * newsk ) ; int ( * unix_may_send ) ( struct socket * sock , struct socket * other ) ; int ( * socket_create ) ( int family , int type , int protocol , int kern ) ; int ( * socket_post_create ) ( struct socket * sock , int family , int type , int protocol , int kern ) ; int ( * socket_bind ) ( struct socket * sock , struct sockaddr * address , int addrlen ) ; int ( * socket_connect ) ( struct socket * sock , struct sockaddr * address , int addrlen ) ; int ( * socket_listen ) ( struct socket * sock , int backlog ) ; int ( * socket_accept ) ( struct socket * sock , struct socket * newsock ) ; int ( * socket_sendmsg ) ( struct socket * sock , struct msghdr * msg , int size ) ; int ( * socket_recvmsg ) ( struct socket * sock , struct msghdr * msg , int size , int flags ) ; int ( * socket_getsockname ) ( struct socket * sock ) ; int ( * socket_getpeername ) ( struct socket * sock ) ; int ( * socket_getsockopt ) ( struct socket * sock , int level , int optname ) ; int ( * socket_setsockopt ) ( struct socket * sock , int level , int optname ) ; int ( * socket_shutdown ) ( struct socket * sock , int how ) ; int ( * socket_sock_rcv_skb ) ( struct sock * sk , struct sk_buff * skb ) ; int ( * socket_getpeersec_stream ) ( struct socket * sock , char * optval , int * optlen , unsigned len ) ; int ( * socket_getpeersec_dgram ) ( struct socket * sock , struct sk_buff * skb , u32 * secid ) ; int ( * sk_alloc_security ) ( struct sock * sk , int family , gfp_t priority ) ; void ( * sk_free_security ) ( struct sock * sk ) ; void ( * sk_clone_security ) ( const struct sock * sk , struct sock * newsk ) ; void ( * sk_getsecid ) ( struct sock * sk , u32 * secid ) ; void ( * sock_graft ) ( struct sock * sk , struct socket * parent ) ; int ( * inet_conn_request ) ( struct sock * sk , struct sk_buff * skb , struct request_sock * req ) ; void ( * inet_csk_clone ) ( struct sock * newsk , const struct request_sock * req ) ; void ( * inet_conn_established ) ( struct sock * sk , struct sk_buff * skb ) ; int ( * secmark_relabel_packet ) ( u32 secid ) ; void ( * secmark_refcount_inc ) ( void ) ; void ( * secmark_refcount_dec ) ( void ) ; void ( * req_classify_flow ) ( const struct request_sock * req , struct flowi * fl ) ; int ( * tun_dev_alloc_security ) ( void * * security ) ; void ( * tun_dev_free_security ) ( void * security ) ; int ( * tun_dev_create ) ( void ) ; int ( * tun_dev_attach_queue ) ( void * security ) ; int ( * tun_dev_attach ) ( struct sock * sk , void * security ) ; int ( * tun_dev_open ) ( void * security ) ; int ( * key_alloc ) ( struct key * key , const struct cred * cred , unsigned long flags ) ; void ( * key_free ) ( struct key * key ) ; int ( * key_permission ) ( key_ref_t key_ref , const struct cred * cred , key_perm_t perm ) ; int ( * key_getsecurity ) ( struct key * key , char * * _buffer ) ; int ( * audit_rule_init ) ( u32 field , u32 op , char * rulestr , void * * lsmrule ) ; int ( * audit_rule_known ) ( struct audit_krule * krule ) ; int ( * audit_rule_match ) ( u32 secid , u32 field , u32 op , void * lsmrule , struct audit_context * actx ) ; void ( * audit_rule_free ) ( void * lsmrule ) ; } ;
struct scm_cookie { struct pid * pid ; const struct cred * cred ; struct scm_fp_list * fp ; struct scm_creds creds ; u32 secid ; } ;
struct netlink_skb_parms { struct scm_creds creds ; __u32 portid ; __u32 dst_group ; struct sock * ssk ; } ;
struct module ;
struct ip6_mtuinfo { struct sockaddr_in6 ip6m_addr ; __u32 ip6m_mtu ; } ;
struct poll_wqueues { poll_table pt ; struct poll_table_page * table ; struct task_struct * polling_task ; int triggered ; int error ; int inline_index ; struct poll_table_entry inline_entries [ ( ( 832 - 256 ) / sizeof ( struct poll_table_entry ) ) ] ; } ;
struct module ;
struct request_sock_queue { struct request_sock * rskq_accept_head ; struct request_sock * rskq_accept_tail ; rwlock_t syn_wait_lock ; u8 rskq_defer_accept ; struct listen_sock * listen_opt ; struct fastopen_queue * fastopenq ; } ;
struct ipv6_pinfo ;
struct inet_timewait_sock { struct sock_common __tw_common ; int tw_timeout ; volatile unsigned char tw_substate ; unsigned char tw_rcv_wscale ; __be16 tw_sport ; ; unsigned int tw_ipv6only : 1 , tw_transparent : 1 , tw_pad : 6 , tw_tos : 8 , tw_ipv6_offset : 16 ; ; unsigned long tw_ttd ; struct inet_bind_bucket * tw_tb ; struct hlist_node tw_death_node ; } ;
struct tcp6_request_sock { struct tcp_request_sock tcp6rsk_tcp ; struct inet6_request_sock tcp6rsk_inet6 ; } ;
struct ipv6_pinfo { struct in6_addr saddr ; struct in6_addr rcv_saddr ; struct in6_addr daddr ; struct in6_pktinfo sticky_pktinfo ; const struct in6_addr * daddr_cache ; const struct in6_addr * saddr_cache ; __be32 flow_label ; __u32 frag_size ; __u16 __unused_1 : 7 ; __s16 hop_limit : 9 ; __u16 mc_loop : 1 , __unused_2 : 6 ; __s16 mcast_hops : 9 ; int ucast_oif ; int mcast_oif ; union { struct { __u16 srcrt : 1 , osrcrt : 1 , rxinfo : 1 , rxoinfo : 1 , rxhlim : 1 , rxohlim : 1 , hopopts : 1 , ohopopts : 1 , dstopts : 1 , odstopts : 1 , rxflow : 1 , rxtclass : 1 , rxpmtu : 1 , rxorigdstaddr : 1 ; } bits ; __u16 all ; } rxopt ; __u16 recverr : 1 , sndflow : 1 , pmtudisc : 2 , ipv6only : 1 , srcprefs : 3 , dontfrag : 1 ; __u8 min_hopcount ; __u8 tclass ; __u8 rcv_tclass ; __u32 dst_cookie ; __u32 rx_dst_cookie ; struct ipv6_mc_socklist * ipv6_mc_list ; struct ipv6_ac_socklist * ipv6_ac_list ; struct ipv6_fl_socklist * ipv6_fl_list ; struct ipv6_txoptions * opt ; struct sk_buff * pktoptions ; struct sk_buff * rxpmtu ; struct { struct ipv6_txoptions * opt ; u8 hop_limit ; u8 tclass ; } cork ; } ;
struct module ;
struct qdisc_watchdog { struct hrtimer timer ; struct Qdisc * qdisc ; } ;
struct bio_pair { struct bio bio1 , bio2 ; struct bio_vec bv1 , bv2 ; struct bio_integrity_payload bip1 , bip2 ; struct bio_vec iv1 , iv2 ; atomic_t cnt ; int error ; } ;
struct module ;
struct crypto_ablkcipher ;
struct crypto_aead ;
struct crypto_blkcipher ;
struct crypto_hash ;
struct crypto_rng ;
struct crypto_ablkcipher { struct crypto_tfm base ; } ;
struct crypto_aead { struct crypto_tfm base ; } ;
struct crypto_blkcipher { struct crypto_tfm base ; } ;
struct crypto_cipher { struct crypto_tfm base ; } ;
struct crypto_comp { struct crypto_tfm base ; } ;
struct crypto_hash { struct crypto_tfm base ; } ;
struct crypto_rng { struct crypto_tfm base ; } ;
struct crypto_ahash ;
struct hash_alg_common { unsigned int digestsize ; unsigned int statesize ; struct crypto_alg base ; } ;
struct shash_alg { int ( * init ) ( struct shash_desc * desc ) ; int ( * update ) ( struct shash_desc * desc , const u8 * data , unsigned int len ) ; int ( * final ) ( struct shash_desc * desc , u8 * out ) ; int ( * finup ) ( struct shash_desc * desc , const u8 * data , unsigned int len , u8 * out ) ; int ( * digest ) ( struct shash_desc * desc , const u8 * data , unsigned int len , u8 * out ) ; int ( * export_ ) ( struct shash_desc * desc , void * out ) ; int ( * import ) ( struct shash_desc * desc , const void * in ) ; int ( * setkey ) ( struct crypto_shash * tfm , const u8 * key , unsigned int keylen ) ; unsigned int descsize ; unsigned int digestsize __attribute__ ( ( aligned ( __alignof__ ( struct hash_alg_common ) ) ) ) ; unsigned int statesize ; struct crypto_alg base ; } ;
struct crypto_ahash { int ( * init ) ( struct ahash_request * req ) ; int ( * update ) ( struct ahash_request * req ) ; int ( * final ) ( struct ahash_request * req ) ; int ( * finup ) ( struct ahash_request * req ) ; int ( * digest ) ( struct ahash_request * req ) ; int ( * export_ ) ( struct ahash_request * req , void * out ) ; int ( * import ) ( struct ahash_request * req , const void * in ) ; int ( * setkey ) ( struct crypto_ahash * tfm , const u8 * key , unsigned int keylen ) ; unsigned int reqsize ; struct crypto_tfm base ; } ;
struct crypto_shash { unsigned int descsize ; struct crypto_tfm base ; } ;
typedef struct jbd2_journal_revoke_header_s { journal_header_t r_header ; __be32 r_count ; } jbd2_journal_revoke_header_t ;
typedef struct journal_superblock_s { journal_header_t s_header ; __be32 s_blocksize ; __be32 s_maxlen ; __be32 s_first ; __be32 s_sequence ; __be32 s_start ; __be32 s_errno ; __be32 s_feature_compat ; __be32 s_feature_incompat ; __be32 s_feature_ro_compat ; __u8 s_uuid [ 16 ] ; __be32 s_nr_users ; __be32 s_dynsuper ; __be32 s_max_transaction ; __be32 s_max_trans_data ; __u8 s_checksum_type ; __u8 s_padding2 [ 3 ] ; __u32 s_padding [ 42 ] ; __be32 s_checksum ; __u8 s_users [ 16 * 48 ] ; } journal_superblock_t ;
struct cleancache_ops { int ( * init_fs ) ( size_t ) ; int ( * init_shared_fs ) ( char * uuid , size_t ) ; int ( * get_page ) ( int , struct cleancache_filekey , unsigned long , struct page * ) ; void ( * put_page ) ( int , struct cleancache_filekey , unsigned long , struct page * ) ; void ( * invalidate_page ) ( int , struct cleancache_filekey , unsigned long ) ; void ( * invalidate_inode ) ( int , struct cleancache_filekey ) ; void ( * invalidate_fs ) ( int ) ; } ;
struct module ;
struct acpi_resource { u32 type ; u32 length ; union acpi_resource_data data ; } ;
struct pnp_card_driver { struct list_head global_list ; char * name ; const struct pnp_card_device_id * id_table ; unsigned int flags ; int ( * probe ) ( struct pnp_card_link * card , const struct pnp_card_device_id * card_id ) ; void ( * remove ) ( struct pnp_card_link * card ) ; int ( * suspend ) ( struct pnp_card_link * card , pm_message_t state ) ; int ( * resume ) ( struct pnp_card_link * card ) ; struct pnp_driver link ; } ;
struct posix_acl_entry { short e_tag ; unsigned short e_perm ; union { kuid_t e_uid ; kgid_t e_gid ; unsigned int e_id ; } ; } ;
struct target_type { uint64_t features ; const char * name ; struct module * module ; unsigned version [ 3 ] ; dm_ctr_fn ctr ; dm_dtr_fn dtr ; dm_map_fn map ; dm_map_request_fn map_rq ; dm_endio_fn end_io ; dm_request_endio_fn rq_end_io ; dm_presuspend_fn presuspend ; dm_postsuspend_fn postsuspend ; dm_preresume_fn preresume ; dm_resume_fn resume ; dm_status_fn status ; dm_message_fn message ; dm_ioctl_fn ioctl ; dm_merge_fn merge ; dm_busy_fn busy ; dm_iterate_devices_fn iterate_devices ; dm_io_hints_fn io_hints ; struct list_head list ; } ;
struct ctl_table_root ;
struct ctl_table_root { struct ctl_table_set default_set ; struct ctl_table_set * ( * lookup ) ( struct ctl_table_root * root , struct nsproxy * namespaces ) ; int ( * permissions ) ( struct ctl_table_header * head , struct ctl_table * table ) ; } ;
struct posix_acl ;
struct memcg_cache_params { bool is_root_cache ; union { struct kmem_cache * memcg_caches [ 0 ] ; struct { struct mem_cgroup * memcg ; struct list_head list ; struct kmem_cache * root_cache ; bool dead ; atomic_t nr_pages ; struct work_struct destroy ; } ; } ; } ;
typedef struct sigevent { sigval_t sigev_value ; int sigev_signo ; int sigev_notify ; union { int _pad [ ( ( 64 - ( sizeof ( int ) * 2 + sizeof ( sigval_t ) ) ) / sizeof ( int ) ) ] ; int _tid ; struct { void ( * _function ) ( sigval_t ) ; void * _attribute ; } _sigev_thread ; } _sigev_un ; } sigevent_t ;
struct sigqueue { struct list_head list ; int flags ; siginfo_t info ; struct user_struct * user ; } ;
union thread_union { struct thread_info thread_info ; unsigned long stack [ ( ( ( 1UL ) << 12 ) << 2 ) / sizeof ( long ) ] ; } ;
struct compat_siginfo ;
struct flowi ;
struct flowi { union { struct flowi_common __fl_common ; struct flowi4 ip4 ; struct flowi6 ip6 ; struct flowidn dn ; } u ; } __attribute__ ( ( __aligned__ ( 64 / 8 ) ) ) ;
struct xfrm_userspi_info { struct xfrm_usersa_info info ; __u32 min ; __u32 max ; } ;
struct xfrm_user_acquire { struct xfrm_id id ; xfrm_address_t saddr ; struct xfrm_selector sel ; struct xfrm_userpolicy_info policy ; __u32 aalgos ; __u32 ealgos ; __u32 calgos ; __u32 seq ; } ;
struct xfrm_user_expire { struct xfrm_usersa_info state ; __u8 hard ; } ;
struct xfrm_user_polexpire { struct xfrm_userpolicy_info pol ; __u8 hard ; } ;
struct flowi ;
struct flowi ;
struct tcp_timewait_sock { struct inet_timewait_sock tw_sk ; u32 tw_rcv_nxt ; u32 tw_snd_nxt ; u32 tw_rcv_wnd ; u32 tw_ts_recent ; long tw_ts_recent_stamp ; struct tcp_md5sig_key * tw_md5_key ; struct tcp_cookie_values * tw_cookie_values ; } ;
struct ahash_alg { int ( * init ) ( struct ahash_request * req ) ; int ( * update ) ( struct ahash_request * req ) ; int ( * final ) ( struct ahash_request * req ) ; int ( * finup ) ( struct ahash_request * req ) ; int ( * digest ) ( struct ahash_request * req ) ; int ( * export_ ) ( struct ahash_request * req , void * out ) ; int ( * import ) ( struct ahash_request * req , const void * in ) ; int ( * setkey ) ( struct crypto_ahash * tfm , const u8 * key , unsigned int keylen ) ; struct hash_alg_common halg ; } ;
struct posix_acl { union { atomic_t a_refcount ; struct callback_head a_rcu ; } ; unsigned int a_count ; struct posix_acl_entry a_entries [ 0 ] ; } ;
typedef struct raw_spinlock { arch_spinlock_t raw_lock ; } raw_spinlock_t ;
struct quotactl_ops { int ( * quota_on ) ( struct super_block * , int , int , struct path * ) ; int ( * quota_on_meta ) ( struct super_block * , int , int ) ; int ( * quota_off ) ( struct super_block * , int ) ; int ( * quota_sync ) ( struct super_block * , int ) ; int ( * get_info ) ( struct super_block * , int , struct if_dqinfo * ) ; int ( * set_info ) ( struct super_block * , int , struct if_dqinfo * ) ; int ( * get_dqblk ) ( struct super_block * , struct kqid , struct fs_disk_quota * ) ; int ( * set_dqblk ) ( struct super_block * , struct kqid , struct fs_disk_quota * ) ; int ( * get_xstate ) ( struct super_block * , struct fs_quota_stat * ) ; int ( * set_xstate ) ( struct super_block * , unsigned int , int ) ; } ;
typedef struct compat_siginfo { int si_signo ; int si_errno ; int si_code ; union { int _pad [ 128 / sizeof ( int ) - 3 ] ; struct { unsigned int _pid ; unsigned int _uid ; } _kill ; struct { compat_timer_t _tid ; int _overrun ; compat_sigval_t _sigval ; int _sys_private ; int _overrun_incr ; } _timer ; struct { unsigned int _pid ; unsigned int _uid ; compat_sigval_t _sigval ; } _rt ; struct { unsigned int _pid ; unsigned int _uid ; int _status ; compat_clock_t _utime ; compat_clock_t _stime ; } _sigchld ; struct { unsigned int _pid ; unsigned int _uid ; int _status ; compat_s64 _utime ; compat_s64 _stime ; } _sigchld_x32 ; struct { unsigned int _addr ; } _sigfault ; struct { int _band ; int _fd ; } _sigpoll ; struct { unsigned int _call_addr ; int _syscall ; unsigned int _arch ; } _sigsys ; } _sifields ; } compat_siginfo_t ;
struct inet_cork_full { struct inet_cork base ; struct flowi fl ; } ;
struct tcp6_timewait_sock { struct tcp_timewait_sock tcp6tw_tcp ; struct inet6_timewait_sock tcp6tw_inet6 ; } ;
struct rw_semaphore ;
struct rw_semaphore { long count ; raw_spinlock_t wait_lock ; struct list_head wait_list ; } ;
struct hrtimer_cpu_base ;
struct hrtimer_cpu_base { raw_spinlock_t lock ; unsigned int active_bases ; unsigned int clock_was_set ; ktime_t expires_next ; int hres_active ; int hang_detected ; unsigned long nr_events ; unsigned long nr_retries ; unsigned long nr_hangs ; ktime_t max_hang_time ; struct hrtimer_clock_base clock_base [ HRTIMER_MAX_CLOCK_BASES ] ; } ;
struct semaphore { raw_spinlock_t lock ; unsigned int count ; struct list_head wait_list ; } ;
struct percpu_counter { raw_spinlock_t lock ; s64 count ; struct list_head list ; s32 * counters ; } ;
struct ratelimit_state { raw_spinlock_t lock ; int interval ; int burst ; int printed ; int missed ; unsigned long begin ; } ;
struct prop_local_single { unsigned long events ; unsigned long period ; int shift ; raw_spinlock_t lock ; } ;
struct rt_mutex { raw_spinlock_t wait_lock ; struct plist_head wait_list ; struct task_struct * owner ; } ;
struct thread_group_cputimer { struct task_cputime cputime ; int running ; raw_spinlock_t lock ; } ;
struct irq_chip_generic { raw_spinlock_t lock ; void * reg_base ; unsigned int irq_base ; unsigned int irq_cnt ; u32 mask_cache ; u32 type_cache ; u32 polarity_cache ; u32 wake_enabled ; u32 wake_active ; unsigned int num_ct ; void * private_ ; struct list_head list ; struct irq_chip_type chip_types [ 0 ] ; } ;
struct fprop_local_single { unsigned long events ; unsigned int period ; raw_spinlock_t lock ; } ;
typedef struct spinlock { union { struct raw_spinlock rlock ; } ; } spinlock_t ;
struct blocking_notifier_head { struct rw_semaphore rwsem ; struct notifier_block * head ; } ;
struct dqstats { int stat [ _DQST_DQSTAT_LAST ] ; struct percpu_counter counter [ _DQST_DQSTAT_LAST ] ; } ;
struct prop_global { int shift ; struct percpu_counter events ; } ;
struct prop_local_percpu { struct percpu_counter events ; int shift ; unsigned long period ; raw_spinlock_t lock ; } ;
struct key ;
struct key { atomic_t usage ; key_serial_t serial ; union { struct list_head graveyard_link ; struct rb_node serial_node ; } ; struct key_type * type ; struct rw_semaphore sem ; struct key_user * user ; void * security ; union { time_t expiry ; time_t revoked_at ; } ; time_t last_used_at ; kuid_t uid ; kgid_t gid ; key_perm_t perm ; unsigned short quotalen ; unsigned short datalen ; unsigned long flags ; char * description ; union { struct list_head link ; unsigned long x [ 2 ] ; void * p [ 2 ] ; int reject_error ; } type_data ; union { unsigned long value ; void * rcudata ; void * data ; struct keyring_list * subscriptions ; } payload ; } ;
struct dst_ops { unsigned short family ; __be16 protocol ; unsigned int gc_thresh ; int ( * gc ) ( struct dst_ops * ops ) ; struct dst_entry * ( * check ) ( struct dst_entry * , __u32 cookie ) ; unsigned int ( * default_advmss ) ( const struct dst_entry * ) ; unsigned int ( * mtu ) ( const struct dst_entry * ) ; u32 * ( * cow_metrics ) ( struct dst_entry * , unsigned long ) ; void ( * destroy ) ( struct dst_entry * ) ; void ( * ifdown ) ( struct dst_entry * , struct net_device * dev , int how ) ; struct dst_entry * ( * negative_advice ) ( struct dst_entry * ) ; void ( * link_failure ) ( struct sk_buff * ) ; void ( * update_pmtu ) ( struct dst_entry * dst , struct sock * sk , struct sk_buff * skb , u32 mtu ) ; void ( * redirect ) ( struct dst_entry * dst , struct sock * sk , struct sk_buff * skb ) ; int ( * local_out ) ( struct sk_buff * skb ) ; struct neighbour * ( * neigh_lookup ) ( const struct dst_entry * dst , struct sk_buff * skb , const void * daddr ) ; struct kmem_cache * kmem_cachep ; struct percpu_counter pcpuc_entries __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; } ;
struct fprop_global { struct percpu_counter events ; unsigned int period ; seqcount_t sequence ; } ;
struct fprop_local_percpu { struct percpu_counter events ; unsigned int period ; raw_spinlock_t lock ; } ;
struct file ;
struct __wait_queue_head { spinlock_t lock ; struct list_head task_list ; } ;
struct mutex { atomic_t count ; spinlock_t wait_lock ; struct list_head wait_list ; struct task_struct * owner ; } ;
struct srcu_struct { unsigned completed ; struct srcu_struct_array * per_cpu_ref ; spinlock_t queue_lock ; bool running ; struct rcu_batch batch_queue ; struct rcu_batch batch_check0 ; struct rcu_batch batch_check1 ; struct rcu_batch batch_done ; struct delayed_work work ; } ;
struct atomic_notifier_head { spinlock_t lock ; struct notifier_block * head ; } ;
struct wakeup_source ;
struct pm_subsys_data { spinlock_t lock ; unsigned int refcount ; } ;
struct file ;
struct file ;
struct file ;
struct kset { struct list_head list ; spinlock_t list_lock ; struct kobject kobj ; const struct kset_uevent_ops * uevent_ops ; } ;
struct dentry { unsigned int d_flags ; seqcount_t d_seq ; struct hlist_bl_node d_hash ; struct dentry * d_parent ; struct qstr d_name ; struct inode * d_inode ; unsigned char d_iname [ 32 ] ; unsigned int d_count ; spinlock_t d_lock ; const struct dentry_operations * d_op ; struct super_block * d_sb ; unsigned long d_time ; void * d_fsdata ; struct list_head d_lru ; union { struct list_head d_child ; struct callback_head d_rcu ; } d_u ; struct list_head d_subdirs ; struct hlist_node d_alias ; } ;
struct dentry ;
struct dentry ;
struct io_context ;
struct file { union { struct list_head fu_list ; struct callback_head fu_rcuhead ; } f_u ; struct path f_path ; const struct file_operations * f_op ; spinlock_t f_lock ; int f_sb_list_cpu ; atomic_long_t f_count ; unsigned int f_flags ; fmode_t f_mode ; loff_t f_pos ; struct fown_struct f_owner ; const struct cred * f_cred ; struct file_ra_state f_ra ; u64 f_version ; void * f_security ; void * private_data ; struct list_head f_ep_links ; struct list_head f_tfile_llink ; struct address_space * f_mapping ; } ;
struct fasync_struct { spinlock_t fa_lock ; int magic ; int fa_fd ; struct fasync_struct * fa_next ; struct file * fa_file ; struct callback_head fa_rcu ; } ;
struct kmem_cache_node { spinlock_t list_lock ; unsigned long nr_partial ; struct list_head partial ; atomic_long_t nr_slabs ; atomic_long_t total_objects ; struct list_head full ; } ;
struct proc_dir_entry { unsigned int low_ino ; umode_t mode ; nlink_t nlink ; kuid_t uid ; kgid_t gid ; loff_t size ; const struct inode_operations * proc_iops ; const struct file_operations * proc_fops ; struct proc_dir_entry * next , * parent , * subdir ; void * data ; read_proc_t * read_proc ; write_proc_t * write_proc ; atomic_t count ; int pde_users ; struct completion * pde_unload_completion ; struct list_head pde_openers ; spinlock_t pde_unload_lock ; u8 namelen ; char name [ ] ; } ;
struct klist { spinlock_t k_lock ; struct list_head k_list ; void ( * get ) ( struct klist_node * ) ; void ( * put ) ( struct klist_node * ) ; } __attribute__ ( ( aligned ( sizeof ( void * ) ) ) ) ;
struct wakeup_source { const char * name ; struct list_head entry ; spinlock_t lock ; struct timer_list timer ; unsigned long timer_expires ; ktime_t total_time ; ktime_t max_time ; ktime_t last_time ; ktime_t start_prevent_time ; ktime_t prevent_sleep_time ; unsigned long event_count ; unsigned long active_count ; unsigned long relax_count ; unsigned long expire_count ; unsigned long wakeup_count ; bool active : 1 ; bool autosleep_enabled : 1 ; } ;
struct pci_dynids { spinlock_t lock ; struct list_head list ; } ;
struct kern_ipc_perm { spinlock_t lock ; int deleted ; int id ; key_t key ; kuid_t uid ; kgid_t gid ; kuid_t cuid ; kgid_t cgid ; umode_t mode ; unsigned long seq ; void * security ; } ;
struct kern_ipc_perm ;
struct aio_ring_info { unsigned long mmap_base ; unsigned long mmap_size ; struct page * * ring_pages ; spinlock_t ring_lock ; long nr_pages ; unsigned nr , tail ; struct page * internal_pages [ 8 ] ; } ;
struct task_delay_info { spinlock_t lock ; unsigned int flags ; struct timespec blkio_start , blkio_end ; u64 blkio_delay ; u64 swapin_delay ; u32 blkio_count ; u32 swapin_count ; struct timespec freepages_start , freepages_end ; u64 freepages_delay ; u32 freepages_count ; } ;
struct io_context ;
struct proc_dir_entry ;
struct proc_dir_entry ;
struct file ;
struct sk_buff_head { struct sk_buff * next ; struct sk_buff * prev ; __u32 qlen ; spinlock_t lock ; } ;
struct inet_frag_queue { struct hlist_node list ; struct netns_frags * net ; struct list_head lru_list ; spinlock_t lock ; atomic_t refcnt ; struct timer_list timer ; struct sk_buff * fragments ; struct sk_buff * fragments_tail ; ktime_t stamp ; int len ; int meat ; __u8 last_in ; u16 max_size ; } ;
struct netns_ipv6 { struct netns_sysctl_ipv6 sysctl ; struct ipv6_devconf * devconf_all ; struct ipv6_devconf * devconf_dflt ; struct inet_peer_base * peers ; struct netns_frags frags ; struct xt_table * ip6table_filter ; struct xt_table * ip6table_mangle ; struct xt_table * ip6table_raw ; struct xt_table * ip6table_security ; struct xt_table * ip6table_nat ; struct rt6_info * ip6_null_entry ; struct rt6_statistics * rt6_stats ; struct timer_list ip6_fib_timer ; struct hlist_head * fib_table_hash ; struct fib6_table * fib6_main_tbl ; struct dst_ops ip6_dst_ops ; unsigned int ip6_rt_gc_expire ; unsigned long ip6_rt_last_gc ; struct rt6_info * ip6_prohibit_entry ; struct rt6_info * ip6_blk_hole_entry ; struct fib6_table * fib6_local_tbl ; struct fib_rules_ops * fib6_rules_ops ; struct sock * * icmp_sk ; struct sock * ndisc_sk ; struct sock * tcp_sk ; struct sock * igmp_sk ; struct list_head mr6_tables ; struct fib_rules_ops * mr6_rules_ops ; } ;
struct proc_dir_entry ;
struct netns_sctp { __typeof__ ( struct sctp_mib ) * sctp_statistics [ 1 ] ; struct proc_dir_entry * proc_net_sctp ; struct ctl_table_header * sysctl_header ; struct sock * ctl_sock ; struct list_head local_addr_list ; struct list_head addr_waitq ; struct timer_list addr_wq_timer ; struct list_head auto_asconf_splist ; spinlock_t addr_wq_lock ; spinlock_t local_addr_lock ; unsigned int rto_initial ; unsigned int rto_min ; unsigned int rto_max ; int rto_alpha ; int rto_beta ; int max_burst ; int cookie_preserve_enable ; char * sctp_hmac_alg ; unsigned int valid_cookie_life ; unsigned int sack_timeout ; unsigned int hb_interval ; int max_retrans_association ; int max_retrans_path ; int max_retrans_init ; int pf_retrans ; int sndbuf_policy ; int rcvbuf_policy ; int default_auto_asconf ; int addip_enable ; int addip_noauth ; int prsctp_enable ; int auth_enable ; int scope_policy ; int rwnd_upd_shift ; unsigned long max_autoclose ; } ;
struct proc_dir_entry ;
struct file ;
struct dentry ;
struct idr { struct idr_layer * top ; struct idr_layer * id_free ; int layers ; int id_free_cnt ; spinlock_t lock ; } ;
struct dentry ;
struct simple_xattrs { struct list_head head ; spinlock_t lock ; } ;
struct kern_ipc_perm ;
struct dentry ;
struct file ;
struct napi_struct { struct list_head poll_list ; unsigned long state ; int weight ; unsigned int gro_count ; int ( * poll ) ( struct napi_struct * , int ) ; spinlock_t poll_lock ; int poll_owner ; struct net_device * dev ; struct sk_buff * gro_list ; struct sk_buff * skb ; struct list_head dev_list ; } ;
struct netdev_queue { struct net_device * dev ; struct Qdisc * qdisc ; struct Qdisc * qdisc_sleeping ; struct kobject kobj ; int numa_node ; spinlock_t _xmit_lock __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; int xmit_lock_owner ; unsigned long trans_start ; unsigned long trans_timeout ; unsigned long state ; struct dql dql ; } __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ;
struct res_counter { unsigned long long usage ; unsigned long long max_usage ; unsigned long long limit ; unsigned long long soft_limit ; unsigned long long failcnt ; spinlock_t lock ; struct res_counter * parent ; } ;
struct fastopen_queue { struct request_sock * rskq_rst_head ; struct request_sock * rskq_rst_tail ; spinlock_t lock ; int qlen ; int max_qlen ; } ;
struct inet_timewait_death_row { int twcal_hand ; unsigned long twcal_jiffie ; struct timer_list twcal_timer ; struct hlist_head twcal_row [ ( 1 << 5 ) ] ; spinlock_t death_lock ; int tw_count ; int period ; u32 thread_slots ; struct work_struct twkill_work ; struct timer_list tw_timer ; int slot ; struct hlist_head cells [ 8 ] ; struct inet_hashinfo * hashinfo ; int sysctl_tw_recycle ; int sysctl_max_tw_buckets ; } ;
struct gnet_dump { spinlock_t * lock ; struct sk_buff * skb ; struct nlattr * tail ; int compat_tc_stats ; int compat_xstats ; void * xstats ; int xstats_len ; struct tc_stats tc_stats ; } ;
struct bdi_writeback ;
struct dentry ;
struct bdi_writeback { struct backing_dev_info * bdi ; unsigned int nr ; unsigned long last_old_flush ; unsigned long last_active ; struct task_struct * task ; struct timer_list wakeup_timer ; struct list_head b_dirty ; struct list_head b_io ; struct list_head b_more_io ; spinlock_t list_lock ; } ;
struct io_context { atomic_long_t refcount ; atomic_t active_ref ; atomic_t nr_tasks ; spinlock_t lock ; unsigned short ioprio ; int nr_batch_requests ; unsigned long last_waited ; struct radix_tree_root icq_tree ; struct io_cq * icq_hint ; struct hlist_head icq_list ; struct work_struct release_work ; } ;
struct transaction_s { journal_t * t_journal ; tid_t t_tid ; enum { T_RUNNING , T_LOCKED , T_FLUSH , T_COMMIT , T_COMMIT_DFLUSH , T_COMMIT_JFLUSH , T_FINISHED } t_state ; unsigned long t_log_start ; int t_nr_buffers ; struct journal_head * t_reserved_list ; struct journal_head * t_buffers ; struct journal_head * t_forget ; struct journal_head * t_checkpoint_list ; struct journal_head * t_checkpoint_io_list ; struct journal_head * t_iobuf_list ; struct journal_head * t_shadow_list ; struct journal_head * t_log_list ; struct list_head t_inode_list ; spinlock_t t_handle_lock ; unsigned long t_max_wait ; unsigned long t_start ; struct transaction_chp_stats_s t_chp_stats ; atomic_t t_updates ; atomic_t t_outstanding_credits ; transaction_t * t_cpnext , * t_cpprev ; unsigned long t_expires ; ktime_t t_start_time ; atomic_t t_handle_count ; unsigned int t_synchronous_commit : 1 ; int t_need_data_flush ; struct list_head t_private_list ; } ;
struct bgl_lock { spinlock_t lock ; } __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ;
struct dentry ;
struct file ;
struct dentry ;
struct kthread_worker { spinlock_t lock ; struct list_head work_list ; struct task_struct * task ; struct kthread_work * current_work ; } ;
struct page ;
struct task_struct ;
struct task_struct ;
struct seq_file ;
struct page ;
struct task_struct ;
struct task_struct ;
struct task_struct ;
struct task_struct ;
typedef struct { unsigned sequence ; spinlock_t lock ; } seqlock_t ;
struct task_struct ;
struct page ;
struct srcu_notifier_head { struct mutex mutex ; struct srcu_struct srcu ; struct notifier_block * head ; } ;
struct page ;
struct task_struct ;
struct page ;
struct task_struct ;
struct task_struct ;
struct page ;
struct block_device ;
struct seq_file ;
struct quota_info { unsigned int flags ; struct mutex dqio_mutex ; struct mutex dqonoff_mutex ; struct rw_semaphore dqptr_sem ; struct inode * files [ 2 ] ; struct mem_dqinfo info [ 2 ] ; const struct quota_format_ops * ops [ 2 ] ; } ;
struct page ;
struct address_space ;
struct backing_dev_info ;
struct address_space { struct inode * host ; struct radix_tree_root page_tree ; spinlock_t tree_lock ; unsigned int i_mmap_writable ; struct rb_root i_mmap ; struct list_head i_mmap_nonlinear ; struct mutex i_mmap_mutex ; unsigned long nrpages ; unsigned long writeback_index ; const struct address_space_operations * a_ops ; unsigned long flags ; struct backing_dev_info * backing_dev_info ; spinlock_t private_lock ; struct list_head private_list ; void * private_data ; } __attribute__ ( ( aligned ( sizeof ( long ) ) ) ) ;
struct block_device { dev_t bd_dev ; int bd_openers ; struct inode * bd_inode ; struct super_block * bd_super ; struct mutex bd_mutex ; struct list_head bd_inodes ; void * bd_claiming ; void * bd_holder ; int bd_holders ; bool bd_write_holder ; struct list_head bd_holder_disks ; struct block_device * bd_contains ; unsigned bd_block_size ; struct hd_struct * bd_part ; unsigned bd_part_count ; int bd_invalidated ; struct gendisk * bd_disk ; struct request_queue * bd_queue ; struct list_head bd_list ; unsigned long bd_private ; int bd_fsfreeze_count ; struct mutex bd_fsfreeze_mutex ; } ;
struct seq_file ;
struct task_struct ;
struct pci_driver { struct list_head node ; const char * name ; const struct pci_device_id * id_table ; int ( * probe ) ( struct pci_dev * dev , const struct pci_device_id * id ) ; void ( * remove ) ( struct pci_dev * dev ) ; int ( * suspend ) ( struct pci_dev * dev , pm_message_t state ) ; int ( * suspend_late ) ( struct pci_dev * dev , pm_message_t state ) ; int ( * resume_early ) ( struct pci_dev * dev ) ; int ( * resume ) ( struct pci_dev * dev ) ; void ( * shutdown ) ( struct pci_dev * dev ) ; int ( * sriov_configure ) ( struct pci_dev * dev , int num_vfs ) ; const struct pci_error_handlers * err_handler ; struct device_driver driver ; struct pci_dynids dynids ; } ;
struct task_struct ;
struct task_struct ;
struct address_space ;
struct page { unsigned long flags ; struct address_space * mapping ; struct { union { unsigned long index ; void * freelist ; bool pfmemalloc ; } ; union { unsigned long counters ; struct { union { atomic_t _mapcount ; struct { unsigned inuse : 16 ; unsigned objects : 15 ; unsigned frozen : 1 ; } ; int units ; } ; atomic_t _count ; } ; } ; } ; union { struct list_head lru ; struct { struct page * next ; int pages ; int pobjects ; } ; struct list_head list ; struct slab * slab_page ; } ; union { unsigned long private_ ; spinlock_t ptl ; struct kmem_cache * slab_cache ; struct page * first_page ; } ; } __attribute__ ( ( aligned ( 2 * sizeof ( unsigned long ) ) ) ) ;
struct page ;
struct page ;
struct task_struct ;
struct sem_array { struct kern_ipc_perm __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) sem_perm ; time_t sem_otime ; time_t sem_ctime ; struct sem * sem_base ; struct list_head sem_pending ; struct list_head list_id ; int sem_nsems ; int complex_count ; } ;
struct prop_descriptor { int index ; struct prop_global pg [ 2 ] ; struct mutex mutex ; } ;
struct task_struct ;
struct task_struct ;
struct seq_file ;
struct seq_file ;
struct task_struct ;
struct backing_dev_info ;
struct task_struct { volatile long state ; void * stack ; atomic_t usage ; unsigned int flags ; unsigned int ptrace ; struct llist_node wake_entry ; int on_cpu ; int on_rq ; int prio , static_prio , normal_prio ; unsigned int rt_priority ; const struct sched_class * sched_class ; struct sched_entity se ; struct sched_rt_entity rt ; struct task_group * sched_task_group ; struct hlist_head preempt_notifiers ; unsigned char fpu_counter ; unsigned int btrace_seq ; unsigned int policy ; int nr_cpus_allowed ; cpumask_t cpus_allowed ; struct sched_info sched_info ; struct list_head tasks ; struct plist_node pushable_tasks ; struct mm_struct * mm , * active_mm ; struct task_rss_stat rss_stat ; int exit_state ; int exit_code , exit_signal ; int pdeath_signal ; unsigned int jobctl ; unsigned int personality ; unsigned did_exec : 1 ; unsigned in_execve : 1 ; unsigned in_iowait : 1 ; unsigned no_new_privs : 1 ; unsigned sched_reset_on_fork : 1 ; unsigned sched_contributes_to_load : 1 ; pid_t pid ; pid_t tgid ; unsigned long stack_canary ; struct task_struct * real_parent ; struct task_struct * parent ; struct list_head children ; struct list_head sibling ; struct task_struct * group_leader ; struct list_head ptraced ; struct list_head ptrace_entry ; struct pid_link pids [ PIDTYPE_MAX ] ; struct list_head thread_group ; struct completion * vfork_done ; int * set_child_tid ; int * clear_child_tid ; cputime_t utime , stime , utimescaled , stimescaled ; cputime_t gtime ; struct cputime prev_cputime ; unsigned long nvcsw , nivcsw ; struct timespec start_time ; struct timespec real_start_time ; unsigned long min_flt , maj_flt ; struct task_cputime cputime_expires ; struct list_head cpu_timers [ 3 ] ; const struct cred * real_cred ; const struct cred * cred ; char comm [ 16 ] ; int link_count , total_link_count ; struct sysv_sem sysvsem ; unsigned long last_switch_count ; struct thread_struct thread ; struct fs_struct * fs ; struct files_struct * files ; struct nsproxy * nsproxy ; struct signal_struct * signal ; struct sighand_struct * sighand ; sigset_t blocked , real_blocked ; sigset_t saved_sigmask ; struct sigpending pending ; unsigned long sas_ss_sp ; size_t sas_ss_size ; int ( * notifier ) ( void * priv ) ; void * notifier_data ; sigset_t * notifier_mask ; struct callback_head * task_works ; struct audit_context * audit_context ; kuid_t loginuid ; unsigned int sessionid ; struct seccomp seccomp ; u32 parent_exec_id ; u32 self_exec_id ; spinlock_t alloc_lock ; raw_spinlock_t pi_lock ; struct plist_head pi_waiters ; struct rt_mutex_waiter * pi_blocked_on ; void * journal_info ; struct bio_list * bio_list ; struct blk_plug * plug ; struct reclaim_state * reclaim_state ; struct backing_dev_info * backing_dev_info ; struct io_context * io_context ; unsigned long ptrace_message ; siginfo_t * last_siginfo ; struct task_io_accounting ioac ; u64 acct_rss_mem1 ; u64 acct_vm_mem1 ; cputime_t acct_timexpd ; nodemask_t mems_allowed ; seqcount_t mems_allowed_seq ; int cpuset_mem_spread_rotor ; int cpuset_slab_spread_rotor ; struct css_set * cgroups ; struct list_head cg_list ; struct robust_list_head * robust_list ; struct compat_robust_list_head * compat_robust_list ; struct list_head pi_state_list ; struct futex_pi_state * pi_state_cache ; struct perf_event_context * perf_event_ctxp [ perf_nr_task_contexts ] ; struct mutex perf_event_mutex ; struct list_head perf_event_list ; struct mempolicy * mempolicy ; short il_next ; short pref_node_fork ; struct callback_head rcu ; struct pipe_inode_info * splice_pipe ; struct page_frag task_frag ; struct task_delay_info * delays ; int nr_dirtied ; int nr_dirtied_pause ; unsigned long dirty_paused_when ; int latency_record_count ; struct latency_record latency_record [ 32 ] ; unsigned long timer_slack_ns ; unsigned long default_timer_slack_ns ; int curr_ret_stack ; struct ftrace_ret_stack * ret_stack ; unsigned long long ftrace_timestamp ; atomic_t trace_overrun ; atomic_t tracing_graph_pause ; unsigned long trace ; unsigned long trace_recursion ; atomic_t ptrace_bp_refcnt ; } ;
struct task_struct ;
struct seq_file ;
struct task_struct ;
struct seq_file ;
struct seq_file ;
struct page ;
struct netns_packet { struct mutex sklist_lock ; struct hlist_head sklist ; } ;
struct seq_file { char * buf ; size_t size ; size_t from ; size_t count ; loff_t index ; loff_t read_pos ; u64 version ; struct mutex lock ; const struct seq_operations * op ; int poll_event ; void * private_ ; } ;
struct ida { struct idr idr ; struct ida_bitmap * free_bitmap ; } ;
struct cgroup_subsys ;
struct cgroup ;
struct cgroup { unsigned long flags ; atomic_t count ; int id ; struct list_head sibling ; struct list_head children ; struct list_head files ; struct cgroup * parent ; struct dentry * dentry ; struct cgroup_subsys_state * subsys [ CGROUP_SUBSYS_COUNT ] ; struct cgroupfs_root * root ; struct cgroup * top_cgroup ; struct list_head css_sets ; struct list_head allcg_node ; struct list_head cft_q_node ; struct list_head release_list ; struct list_head pidlists ; struct mutex pidlist_mutex ; struct callback_head callback_head ; struct list_head event_list ; spinlock_t event_list_lock ; struct simple_xattrs xattrs ; } ;
struct cftype { char name [ 64 ] ; int private_ ; umode_t mode ; size_t max_write_len ; unsigned int flags ; struct simple_xattrs xattrs ; int ( * open ) ( struct inode * inode , struct file * file ) ; ssize_t ( * read ) ( struct cgroup * cgrp , struct cftype * cft , struct file * file , char * buf , size_t nbytes , loff_t * ppos ) ; u64 ( * read_u64 ) ( struct cgroup * cgrp , struct cftype * cft ) ; s64 ( * read_s64 ) ( struct cgroup * cgrp , struct cftype * cft ) ; int ( * read_map ) ( struct cgroup * cont , struct cftype * cft , struct cgroup_map_cb * cb ) ; int ( * read_seq_string ) ( struct cgroup * cont , struct cftype * cft , struct seq_file * m ) ; ssize_t ( * write ) ( struct cgroup * cgrp , struct cftype * cft , struct file * file , const char * buf , size_t nbytes , loff_t * ppos ) ; int ( * write_u64 ) ( struct cgroup * cgrp , struct cftype * cft , u64 val ) ; int ( * write_s64 ) ( struct cgroup * cgrp , struct cftype * cft , s64 val ) ; int ( * write_string ) ( struct cgroup * cgrp , struct cftype * cft , const char * buffer ) ; int ( * trigger ) ( struct cgroup * cgrp , unsigned int event ) ; int ( * release ) ( struct inode * inode , struct file * file ) ; int ( * register_event ) ( struct cgroup * cgrp , struct cftype * cft , struct eventfd_ctx * eventfd , const char * args ) ; void ( * unregister_event ) ( struct cgroup * cgrp , struct cftype * cft , struct eventfd_ctx * eventfd ) ; } ;
struct cgroup_subsys { struct cgroup_subsys_state * ( * css_alloc ) ( struct cgroup * cgrp ) ; int ( * css_online ) ( struct cgroup * cgrp ) ; void ( * css_offline ) ( struct cgroup * cgrp ) ; void ( * css_free ) ( struct cgroup * cgrp ) ; int ( * can_attach ) ( struct cgroup * cgrp , struct cgroup_taskset * tset ) ; void ( * cancel_attach ) ( struct cgroup * cgrp , struct cgroup_taskset * tset ) ; void ( * attach ) ( struct cgroup * cgrp , struct cgroup_taskset * tset ) ; void ( * fork ) ( struct task_struct * task ) ; void ( * exit ) ( struct cgroup * cgrp , struct cgroup * old_cgrp , struct task_struct * task ) ; void ( * bind ) ( struct cgroup * root ) ; int subsys_id ; int active ; int disabled ; int early_init ; bool use_id ; bool broken_hierarchy ; bool warned_broken_hierarchy ; const char * name ; struct cgroupfs_root * root ; struct list_head sibling ; struct idr idr ; spinlock_t id_lock ; struct list_head cftsets ; struct cftype * base_cftypes ; struct cftype_set base_cftset ; struct module * module ; } ;
struct sem_array ;
struct seq_file ;
struct softnet_data { struct Qdisc * output_queue ; struct Qdisc * * output_queue_tailp ; struct list_head poll_list ; struct sk_buff * completion_queue ; struct sk_buff_head process_queue ; unsigned int processed ; unsigned int time_squeeze ; unsigned int cpu_collision ; unsigned int received_rps ; struct softnet_data * rps_ipi_list ; struct call_single_data csd __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; struct softnet_data * rps_ipi_next ; unsigned int cpu ; unsigned int input_queue_head ; unsigned int input_queue_tail ; unsigned int dropped ; struct sk_buff_head input_pkt_queue ; struct napi_struct backlog ; } ;
struct page ;
struct neigh_table { struct neigh_table * next ; int family ; int entry_size ; int key_len ; __u32 ( * hash ) ( const void * pkey , const struct net_device * dev , __u32 * hash_rnd ) ; int ( * constructor ) ( struct neighbour * ) ; int ( * pconstructor ) ( struct pneigh_entry * ) ; void ( * pdestructor ) ( struct pneigh_entry * ) ; void ( * proxy_redo ) ( struct sk_buff * skb ) ; char * id ; struct neigh_parms parms ; int gc_interval ; int gc_thresh1 ; int gc_thresh2 ; int gc_thresh3 ; unsigned long last_flush ; struct delayed_work gc_work ; struct timer_list proxy_timer ; struct sk_buff_head proxy_queue ; atomic_t entries ; rwlock_t lock ; unsigned long last_rand ; struct neigh_statistics * stats ; struct neigh_hash_table * nht ; struct pneigh_entry * * phash_buckets ; } ;
struct cgroup ;
struct cgroup_subsys ;
struct Qdisc { int ( * enqueue ) ( struct sk_buff * skb , struct Qdisc * dev ) ; struct sk_buff * ( * dequeue ) ( struct Qdisc * dev ) ; unsigned int flags ; int padded ; const struct Qdisc_ops * ops ; struct qdisc_size_table * stab ; struct list_head list ; u32 handle ; u32 parent ; atomic_t refcnt ; struct gnet_stats_rate_est rate_est ; int ( * reshape_fail ) ( struct sk_buff * skb , struct Qdisc * q ) ; void * u32_node ; struct Qdisc * __parent ; struct netdev_queue * dev_queue ; struct Qdisc * next_sched ; struct sk_buff * gso_skb ; unsigned long state ; struct sk_buff_head q ; struct gnet_stats_basic_packed bstats ; unsigned int __state ; struct gnet_stats_queue qstats ; struct callback_head callback_head ; spinlock_t busylock ; u32 limit ; } ;
struct backing_dev_info ;
struct page ;
struct backing_dev_info { struct list_head bdi_list ; unsigned long ra_pages ; unsigned long state ; unsigned int capabilities ; congested_fn * congested_fn ; void * congested_data ; char * name ; struct percpu_counter bdi_stat [ NR_BDI_STAT_ITEMS ] ; unsigned long bw_time_stamp ; unsigned long dirtied_stamp ; unsigned long written_stamp ; unsigned long write_bandwidth ; unsigned long avg_write_bandwidth ; unsigned long dirty_ratelimit ; unsigned long balanced_dirty_ratelimit ; struct fprop_local_percpu completions ; int dirty_exceeded ; unsigned int min_ratio ; unsigned int max_ratio , max_prop_frac ; struct bdi_writeback wb ; spinlock_t wb_lock ; struct list_head work_list ; struct device * dev ; struct timer_list laptop_mode_wb_timer ; struct dentry * debug_dir ; struct dentry * debug_stats ; } ;
struct task_struct ;
struct elevator_queue ;
struct elevator_queue { struct elevator_type * type ; void * elevator_data ; struct kobject kobj ; struct mutex sysfs_lock ; struct hlist_head * hash ; unsigned int registered : 1 ; } ;
struct page ;
struct address_space ;
struct blockgroup_lock { struct bgl_lock locks [ 128 ] ; } ;
struct address_space ;
struct backing_dev_info ;
struct block_device ;
struct ata_host { spinlock_t lock ; struct device * dev ; void * const * iomap ; unsigned int n_ports ; void * private_data ; struct ata_port_operations * ops ; unsigned long flags ; struct mutex eh_mutex ; struct task_struct * eh_owner ; struct ata_port * simplex_claimed ; struct ata_port * ports [ 0 ] ; } ;
struct ff_device { int ( * upload ) ( struct input_dev * dev , struct ff_effect * effect , struct ff_effect * old ) ; int ( * erase ) ( struct input_dev * dev , int effect_id ) ; int ( * playback ) ( struct input_dev * dev , int effect_id , int value ) ; void ( * set_gain ) ( struct input_dev * dev , u16 gain ) ; void ( * set_autocenter ) ( struct input_dev * dev , u16 magnitude ) ; void ( * destroy ) ( struct ff_device * ) ; void * private_ ; unsigned long ffbit [ ( ( ( ( 0x7f + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; struct mutex mutex ; int max_effects ; struct ff_effect * effects ; struct file * effect_owners [ ] ; } ;
struct completion ;
struct zone { unsigned long watermark [ NR_WMARK ] ; unsigned long percpu_drift_mark ; unsigned long lowmem_reserve [ 4 ] ; unsigned long dirty_balance_reserve ; int node ; unsigned long min_unmapped_pages ; unsigned long min_slab_pages ; struct per_cpu_pageset * pageset ; spinlock_t lock ; int all_unreclaimable ; bool compact_blockskip_flush ; unsigned long compact_cached_free_pfn ; unsigned long compact_cached_migrate_pfn ; seqlock_t span_seqlock ; struct free_area free_area [ 11 ] ; unsigned int compact_considered ; unsigned int compact_defer_shift ; int compact_order_failed ; struct zone_padding _pad1_ ; spinlock_t lru_lock ; struct lruvec lruvec ; unsigned long pages_scanned ; unsigned long flags ; atomic_long_t vm_stat [ NR_VM_ZONE_STAT_ITEMS ] ; unsigned int inactive_ratio ; struct zone_padding _pad2_ ; wait_queue_head_t * wait_table ; unsigned long wait_table_hash_nr_entries ; unsigned long wait_table_bits ; struct pglist_data * zone_pgdat ; unsigned long zone_start_pfn ; unsigned long spanned_pages ; unsigned long present_pages ; unsigned long managed_pages ; const char * name ; } __attribute__ ( ( __aligned__ ( 1 << ( 6 ) ) ) ) ;
struct completion { unsigned int done ; wait_queue_head_t wait ; } ;
struct zone ;
typedef struct { void * ldt ; int size ; unsigned short ia32_compat ; struct mutex lock ; void * vdso ; } mm_context_t ;
struct completion ;
struct ctl_table_poll { atomic_t event ; wait_queue_head_t wait ; } ;
struct inode ;
struct percpu_rw_semaphore { unsigned int * fast_read_ctr ; atomic_t write_ctr ; struct rw_semaphore rw_sem ; atomic_t slow_read_ctr ; wait_queue_head_t write_waitq ; } ;
struct dquot ;
struct dquot { struct hlist_node dq_hash ; struct list_head dq_inuse ; struct list_head dq_free ; struct list_head dq_dirty ; struct mutex dq_lock ; atomic_t dq_count ; wait_queue_head_t dq_wait_unused ; struct super_block * dq_sb ; struct kqid dq_id ; loff_t dq_off ; unsigned long dq_flags ; struct mem_dqblk dq_dqb ; } ;
struct inode { umode_t i_mode ; unsigned short i_opflags ; kuid_t i_uid ; kgid_t i_gid ; unsigned int i_flags ; struct posix_acl * i_acl ; struct posix_acl * i_default_acl ; const struct inode_operations * i_op ; struct super_block * i_sb ; struct address_space * i_mapping ; void * i_security ; unsigned long i_ino ; union { const unsigned int i_nlink ; unsigned int __i_nlink ; } ; dev_t i_rdev ; loff_t i_size ; struct timespec i_atime ; struct timespec i_mtime ; struct timespec i_ctime ; spinlock_t i_lock ; unsigned short i_bytes ; unsigned int i_blkbits ; blkcnt_t i_blocks ; unsigned long i_state ; struct mutex i_mutex ; unsigned long dirtied_when ; struct hlist_node i_hash ; struct list_head i_wb_list ; struct list_head i_lru ; struct list_head i_sb_list ; union { struct hlist_head i_dentry ; struct callback_head i_rcu ; } ; u64 i_version ; atomic_t i_count ; atomic_t i_dio_count ; atomic_t i_writecount ; const struct file_operations * i_fop ; struct file_lock * i_flock ; struct address_space i_data ; struct dquot * i_dquot [ 2 ] ; struct list_head i_devices ; union { struct pipe_inode_info * i_pipe ; struct block_device * i_bdev ; struct cdev * i_cdev ; } ; __u32 i_generation ; __u32 i_fsnotify_mask ; struct hlist_head i_fsnotify_marks ; void * i_private ; } ;
struct file_lock { struct file_lock * fl_next ; struct list_head fl_link ; struct list_head fl_block ; fl_owner_t fl_owner ; unsigned int fl_flags ; unsigned char fl_type ; unsigned int fl_pid ; struct pid * fl_nspid ; wait_queue_head_t fl_wait ; struct file * fl_file ; loff_t fl_start ; loff_t fl_end ; struct fasync_struct * fl_fasync ; unsigned long fl_break_time ; unsigned long fl_downgrade_time ; const struct file_lock_operations * fl_ops ; const struct lock_manager_operations * fl_lmops ; union { struct nfs_lock_info nfs_fl ; struct nfs4_lock_info nfs4_fl ; struct { struct list_head link ; int state ; } afs ; } fl_u ; } ;
struct sb_writers { struct percpu_counter counter [ ( SB_FREEZE_COMPLETE - 1 ) ] ; wait_queue_head_t wait ; int frozen ; wait_queue_head_t wait_unfrozen ; } ;
struct completion ;
struct inode ;
struct inode ;
struct signal_struct ;
struct inode ;
struct kioctx ;
struct kioctx { atomic_t users ; int dead ; struct mm_struct * mm ; unsigned long user_id ; struct hlist_node list ; wait_queue_head_t wait ; spinlock_t ctx_lock ; int reqs_active ; struct list_head active_reqs ; struct list_head run_list ; unsigned max_reqs ; struct aio_ring_info ring_info ; struct delayed_work wq ; struct callback_head callback_head ; } ;
struct sighand_struct { atomic_t count ; struct k_sigaction action [ 64 ] ; spinlock_t siglock ; wait_queue_head_t signalfd_wqh ; } ;
struct signal_struct { atomic_t sigcnt ; atomic_t live ; int nr_threads ; wait_queue_head_t wait_chldexit ; struct task_struct * curr_target ; struct sigpending shared_pending ; int group_exit_code ; int notify_count ; struct task_struct * group_exit_task ; int group_stop_count ; unsigned int flags ; unsigned int is_child_subreaper : 1 ; unsigned int has_child_subreaper : 1 ; struct list_head posix_timers ; struct hrtimer real_timer ; struct pid * leader_pid ; ktime_t it_real_incr ; struct cpu_itimer it [ 2 ] ; struct thread_group_cputimer cputimer ; struct task_cputime cputime_expires ; struct list_head cpu_timers [ 3 ] ; struct pid * tty_old_pgrp ; int leader ; struct tty_struct * tty ; struct autogroup * autogroup ; cputime_t utime , stime , cutime , cstime ; cputime_t gtime ; cputime_t cgtime ; struct cputime prev_cputime ; unsigned long nvcsw , nivcsw , cnvcsw , cnivcsw ; unsigned long min_flt , maj_flt , cmin_flt , cmaj_flt ; unsigned long inblock , oublock , cinblock , coublock ; unsigned long maxrss , cmaxrss ; struct task_io_accounting ioac ; unsigned long long sum_sched_runtime ; struct rlimit rlim [ 16 ] ; struct pacct_struct pacct ; struct taskstats * stats ; unsigned audit_tty ; struct tty_audit_buf * tty_audit_buf ; struct rw_semaphore group_rwsem ; oom_flags_t oom_flags ; short oom_score_adj ; short oom_score_adj_min ; struct mutex cred_guard_mutex ; } ;
struct irq_desc ;
struct irq_desc ;
struct irq_desc { struct irq_data irq_data ; unsigned int * kstat_irqs ; irq_flow_handler_t handle_irq ; struct irqaction * action ; unsigned int status_use_accessors ; unsigned int core_internal_state__do_not_mess_with_it ; unsigned int depth ; unsigned int wake_depth ; unsigned int irq_count ; unsigned long last_unhandled ; unsigned int irqs_unhandled ; raw_spinlock_t lock ; struct cpumask * percpu_enabled ; const struct cpumask * affinity_hint ; struct irq_affinity_notify * affinity_notify ; cpumask_var_t pending_mask ; unsigned long threads_oneshot ; atomic_t threads_active ; wait_queue_head_t wait_for_threads ; struct proc_dir_entry * dir ; int parent_irq ; struct module * owner ; const char * name ; } __attribute__ ( ( __aligned__ ( 1 << ( 6 ) ) ) ) ;
struct inode ;
struct socket_wq { wait_queue_head_t wait ; struct fasync_struct * fasync_list ; struct callback_head rcu ; } __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ;
struct netns_xfrm { struct list_head state_all ; struct hlist_head * state_bydst ; struct hlist_head * state_bysrc ; struct hlist_head * state_byspi ; unsigned int state_hmask ; unsigned int state_num ; struct work_struct state_hash_work ; struct hlist_head state_gc_list ; struct work_struct state_gc_work ; wait_queue_head_t km_waitq ; struct list_head policy_all ; struct hlist_head * policy_byidx ; unsigned int policy_idx_hmask ; struct hlist_head policy_inexact [ XFRM_POLICY_MAX * 2 ] ; struct xfrm_policy_hash policy_bydst [ XFRM_POLICY_MAX * 2 ] ; unsigned int policy_count [ XFRM_POLICY_MAX * 2 ] ; struct work_struct policy_hash_work ; struct sock * nlsk ; struct sock * nlsk_stash ; u32 sysctl_aevent_etime ; u32 sysctl_aevent_rseqth ; int sysctl_larval_drop ; u32 sysctl_acq_expires ; struct ctl_table_header * sysctl_hdr ; struct dst_ops xfrm4_dst_ops ; struct dst_ops xfrm6_dst_ops ; } ;
struct inode ;
struct inode ;
struct inode ;
struct inode ;
struct hh_cache { u16 hh_len ; u16 __pad ; seqlock_t hh_lock ; unsigned long hh_data [ ( ( ( 128 ) + ( 16 - 1 ) ) & ~ ( 16 - 1 ) ) / sizeof ( long ) ] ; } ;
struct journal_s { unsigned long j_flags ; int j_errno ; struct buffer_head * j_sb_buffer ; journal_superblock_t * j_superblock ; int j_format_version ; rwlock_t j_state_lock ; int j_barrier_count ; struct mutex j_barrier ; transaction_t * j_running_transaction ; transaction_t * j_committing_transaction ; transaction_t * j_checkpoint_transactions ; wait_queue_head_t j_wait_transaction_locked ; wait_queue_head_t j_wait_logspace ; wait_queue_head_t j_wait_done_commit ; wait_queue_head_t j_wait_checkpoint ; wait_queue_head_t j_wait_commit ; wait_queue_head_t j_wait_updates ; struct mutex j_checkpoint_mutex ; struct buffer_head * j_chkpt_bhs [ 64 ] ; unsigned long j_head ; unsigned long j_tail ; unsigned long j_free ; unsigned long j_first ; unsigned long j_last ; struct block_device * j_dev ; int j_blocksize ; unsigned long long j_blk_offset ; char j_devname [ 32 + 24 ] ; struct block_device * j_fs_dev ; unsigned int j_maxlen ; spinlock_t j_list_lock ; struct inode * j_inode ; tid_t j_tail_sequence ; tid_t j_transaction_sequence ; tid_t j_commit_sequence ; tid_t j_commit_request ; __u8 j_uuid [ 16 ] ; struct task_struct * j_task ; int j_max_transaction_buffers ; unsigned long j_commit_interval ; struct timer_list j_commit_timer ; spinlock_t j_revoke_lock ; struct jbd2_revoke_table_s * j_revoke ; struct jbd2_revoke_table_s * j_revoke_table [ 2 ] ; struct buffer_head * * j_wbuf ; int j_wbufsize ; pid_t j_last_sync_writer ; u64 j_average_commit_time ; u32 j_min_batch_time ; u32 j_max_batch_time ; void ( * j_commit_callback ) ( journal_t * , transaction_t * ) ; spinlock_t j_history_lock ; struct proc_dir_entry * j_proc_entry ; struct transaction_stats_s j_stats ; unsigned int j_failed_commit ; void * j_private ; struct crypto_shash * j_chksum_driver ; __u32 j_csum_seed ; } ;
struct zone ;
struct inode ;
struct kthread_work ;
struct kthread_work { struct list_head node ; kthread_work_func_t func ; wait_queue_head_t done ; struct kthread_worker * worker ; } ;
struct completion ;
struct mm_struct ;
struct mm_struct ;
struct pglist_data ;
struct pglist_data ;
struct dev_pm_info { pm_message_t power_state ; unsigned int can_wakeup : 1 ; unsigned int async_suspend : 1 ; bool is_prepared : 1 ; bool is_suspended : 1 ; bool ignore_children : 1 ; bool early_init : 1 ; spinlock_t lock ; struct list_head entry ; struct completion completion ; struct wakeup_source * wakeup ; bool wakeup_path : 1 ; bool syscore : 1 ; struct timer_list suspend_timer ; unsigned long timer_expires ; struct work_struct work ; wait_queue_head_t wait_queue ; atomic_t usage_count ; atomic_t child_count ; unsigned int disable_depth : 3 ; unsigned int idle_notification : 1 ; unsigned int request_pending : 1 ; unsigned int deferred_resume : 1 ; unsigned int run_wake : 1 ; unsigned int runtime_auto : 1 ; unsigned int no_callbacks : 1 ; unsigned int irq_safe : 1 ; unsigned int use_autosuspend : 1 ; unsigned int timer_autosuspends : 1 ; enum rpm_request request ; enum rpm_status runtime_status ; int runtime_error ; int autosuspend_delay ; unsigned long last_busy ; unsigned long active_jiffies ; unsigned long suspended_jiffies ; unsigned long accounting_timestamp ; struct pm_subsys_data * subsys_data ; struct dev_pm_qos * qos ; } ;
struct super_block ;
struct net ;
struct mm_struct ;
struct super_block { struct list_head s_list ; dev_t s_dev ; unsigned char s_blocksize_bits ; unsigned long s_blocksize ; loff_t s_maxbytes ; struct file_system_type * s_type ; const struct super_operations * s_op ; const struct dquot_operations * dq_op ; const struct quotactl_ops * s_qcop ; const struct export_operations * s_export_op ; unsigned long s_flags ; unsigned long s_magic ; struct dentry * s_root ; struct rw_semaphore s_umount ; int s_count ; atomic_t s_active ; void * s_security ; const struct xattr_handler * * s_xattr ; struct list_head s_inodes ; struct hlist_bl_head s_anon ; struct list_head * s_files ; struct list_head s_mounts ; struct list_head s_dentry_lru ; int s_nr_dentry_unused ; spinlock_t s_inode_lru_lock __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; struct list_head s_inode_lru ; int s_nr_inodes_unused ; struct block_device * s_bdev ; struct backing_dev_info * s_bdi ; struct mtd_info * s_mtd ; struct hlist_node s_instances ; struct quota_info s_dquot ; struct sb_writers s_writers ; char s_id [ 32 ] ; u8 s_uuid [ 16 ] ; void * s_fs_info ; unsigned int s_max_links ; fmode_t s_mode ; u32 s_time_gran ; struct mutex s_vfs_rename_mutex ; char * s_subtype ; char * s_options ; const struct dentry_operations * s_d_op ; int cleancache_poolid ; struct shrinker s_shrink ; atomic_long_t s_remove_count ; int s_readonly_remount ; } ;
struct net ;
struct mm_struct ;
struct proc_inode { struct pid * pid ; int fd ; union proc_op op ; struct proc_dir_entry * pde ; struct ctl_table_header * sysctl ; struct ctl_table * sysctl_entry ; void * ns ; const struct proc_ns_operations * ns_ops ; struct inode vfs_inode ; } ;
struct mm_struct ;
struct core_state { atomic_t nr_threads ; struct core_thread dumper ; struct completion startup ; } ;
struct mm_struct { struct vm_area_struct * mmap ; struct rb_root mm_rb ; struct vm_area_struct * mmap_cache ; unsigned long ( * get_unmapped_area ) ( struct file * filp , unsigned long addr , unsigned long len , unsigned long pgoff , unsigned long flags ) ; void ( * unmap_area ) ( struct mm_struct * mm , unsigned long addr ) ; unsigned long mmap_base ; unsigned long task_size ; unsigned long cached_hole_size ; unsigned long free_area_cache ; unsigned long highest_vm_end ; pgd_t * pgd ; atomic_t mm_users ; atomic_t mm_count ; int map_count ; spinlock_t page_table_lock ; struct rw_semaphore mmap_sem ; struct list_head mmlist ; unsigned long hiwater_rss ; unsigned long hiwater_vm ; unsigned long total_vm ; unsigned long locked_vm ; unsigned long pinned_vm ; unsigned long shared_vm ; unsigned long exec_vm ; unsigned long stack_vm ; unsigned long def_flags ; unsigned long nr_ptes ; unsigned long start_code , end_code , start_data , end_data ; unsigned long start_brk , brk , start_stack ; unsigned long arg_start , arg_end , env_start , env_end ; unsigned long saved_auxv [ ( 2 * ( 0 + 19 + 1 ) ) ] ; struct mm_rss_stat rss_stat ; struct linux_binfmt * binfmt ; cpumask_var_t cpu_vm_mask_var ; mm_context_t context ; unsigned long flags ; struct core_state * core_state ; spinlock_t ioctx_lock ; struct hlist_head ioctx_list ; struct file * exe_file ; struct mmu_notifier_mm * mmu_notifier_mm ; pgtable_t pmd_huge_pte ; struct uprobes_state uprobes_state ; } ;
struct mm_struct ;
struct mm_struct ;
struct mm_struct ;
struct net ;
struct net ;
struct net { atomic_t passive ; atomic_t count ; spinlock_t rules_mod_lock ; struct list_head list ; struct list_head cleanup_list ; struct list_head exit_list ; struct user_namespace * user_ns ; unsigned int proc_inum ; struct proc_dir_entry * proc_net ; struct proc_dir_entry * proc_net_stat ; struct ctl_table_set sysctls ; struct sock * rtnl ; struct sock * genl_sock ; struct list_head dev_base_head ; struct hlist_head * dev_name_head ; struct hlist_head * dev_index_head ; unsigned int dev_base_seq ; int ifindex ; struct list_head rules_ops ; struct net_device * loopback_dev ; struct netns_core core ; struct netns_mib mib ; struct netns_packet packet ; struct netns_unix unx ; struct netns_ipv4 ipv4 ; struct netns_ipv6 ipv6 ; struct netns_sctp sctp ; struct netns_dccp dccp ; struct netns_xt xt ; struct netns_ct ct ; struct netns_nf_frag nf_frag ; struct sock * nfnl ; struct sock * nfnl_stash ; struct sk_buff_head wext_nlevents ; struct net_generic * gen ; struct netns_xfrm xfrm ; struct netns_ipvs * ipvs ; struct sock * diag_nlsk ; atomic_t rt_genid ; } ;
struct net ;
struct super_block ;
struct mm_struct ;
struct net ;
struct neighbour ;
struct mm_struct ;
struct neighbour ;
struct neighbour { struct neighbour * next ; struct neigh_table * tbl ; struct neigh_parms * parms ; unsigned long confirmed ; unsigned long updated ; rwlock_t lock ; atomic_t refcnt ; struct sk_buff_head arp_queue ; unsigned int arp_queue_len_bytes ; struct timer_list timer ; unsigned long used ; atomic_t probes ; __u8 flags ; __u8 nud_state ; __u8 type ; __u8 dead ; seqlock_t ha_lock ; unsigned char ha [ ( ( ( ( 32 ) ) + ( ( decltype ( ( 32 ) ) ) ( ( sizeof ( unsigned long ) ) ) - 1 ) ) & ~ ( ( decltype ( ( 32 ) ) ) ( ( sizeof ( unsigned long ) ) ) - 1 ) ) ] ; struct hh_cache hh ; int ( * output ) ( struct neighbour * , struct sk_buff * ) ; const struct neigh_ops * ops ; struct callback_head rcu ; struct net_device * dev ; u8 primary_key [ 0 ] ; } ;
typedef struct { spinlock_t slock ; int owned ; wait_queue_head_t wq ; } socket_lock_t ;
struct net ;
struct socket_alloc { struct socket socket ; struct inode vfs_inode ; } ;
struct net ;
typedef struct mempool_s { spinlock_t lock ; int min_nr ; int curr_nr ; void * * elements ; void * pool_data ; mempool_alloc_t * alloc ; mempool_free_t * free ; wait_queue_head_t wait ; } mempool_t ;
struct super_block ;
struct super_block ;
typedef struct pglist_data { struct zone node_zones [ 4 ] ; struct zonelist node_zonelists [ 2 ] ; int nr_zones ; spinlock_t node_size_lock ; unsigned long node_start_pfn ; unsigned long node_present_pages ; unsigned long node_spanned_pages ; int node_id ; nodemask_t reclaim_nodes ; wait_queue_head_t kswapd_wait ; wait_queue_head_t pfmemalloc_wait ; struct task_struct * kswapd ; int kswapd_max_order ; enum zone_type classzone_idx ; } pg_data_t ;
struct device ;
struct device ;
struct device ;
struct sock ;
struct sock ;
struct bio_set ;
struct device ;
struct device { struct device * parent ; struct device_private * p ; struct kobject kobj ; const char * init_name ; const struct device_type * type ; struct mutex mutex ; struct bus_type * bus ; struct device_driver * driver ; void * platform_data ; struct dev_pm_info power ; struct dev_pm_domain * pm_domain ; int numa_node ; u64 * dma_mask ; u64 coherent_dma_mask ; struct device_dma_parameters * dma_parms ; struct list_head dma_pools ; struct dma_coherent_mem * dma_mem ; struct dev_archdata archdata ; struct device_node * of_node ; struct acpi_dev_node acpi_node ; dev_t devt ; u32 id ; spinlock_t devres_lock ; struct list_head devres_head ; struct klist_node knode_class ; struct class_ * class_ ; const struct attribute_group * * groups ; void ( * release ) ( struct device * dev ) ; struct iommu_group * iommu_group ; } ;
struct device ;
struct device ;
struct device ;
struct device ;
struct device ;
struct device ;
struct sock ;
struct sock ;
struct sock ;
struct sock ;
struct sock ;
struct sock ;
struct sock ;
struct sock ;
struct device ;
struct device ;
struct sock ;
struct sock ;
struct sock ;
struct sock { struct sock_common __sk_common ; socket_lock_t sk_lock ; struct sk_buff_head sk_receive_queue ; struct { atomic_t rmem_alloc ; int len ; struct sk_buff * head ; struct sk_buff * tail ; } sk_backlog ; int sk_forward_alloc ; __u32 sk_rxhash ; atomic_t sk_drops ; int sk_rcvbuf ; struct sk_filter * sk_filter ; struct socket_wq * sk_wq ; struct sk_buff_head sk_async_wait_queue ; struct xfrm_policy * sk_policy [ 2 ] ; unsigned long sk_flags ; struct dst_entry * sk_rx_dst ; struct dst_entry * sk_dst_cache ; spinlock_t sk_dst_lock ; atomic_t sk_wmem_alloc ; atomic_t sk_omem_alloc ; int sk_sndbuf ; struct sk_buff_head sk_write_queue ; ; unsigned int sk_shutdown : 2 , sk_no_check : 2 , sk_userlocks : 4 , sk_protocol : 8 , sk_type : 16 ; ; int sk_wmem_queued ; gfp_t sk_allocation ; netdev_features_t sk_route_caps ; netdev_features_t sk_route_nocaps ; int sk_gso_type ; unsigned int sk_gso_max_size ; u16 sk_gso_max_segs ; int sk_rcvlowat ; unsigned long sk_lingertime ; struct sk_buff_head sk_error_queue ; struct proto * sk_prot_creator ; rwlock_t sk_callback_lock ; int sk_err , sk_err_soft ; unsigned short sk_ack_backlog ; unsigned short sk_max_ack_backlog ; __u32 sk_priority ; struct pid * sk_peer_pid ; const struct cred * sk_peer_cred ; long sk_rcvtimeo ; long sk_sndtimeo ; void * sk_protinfo ; struct timer_list sk_timer ; ktime_t sk_stamp ; struct socket * sk_socket ; void * sk_user_data ; struct page_frag sk_frag ; struct sk_buff * sk_send_head ; __s32 sk_peek_off ; int sk_write_pending ; void * sk_security ; __u32 sk_mark ; u32 sk_classid ; struct cg_proto * sk_cgrp ; void ( * sk_state_change ) ( struct sock * sk ) ; void ( * sk_data_ready ) ( struct sock * sk , int bytes ) ; void ( * sk_write_space ) ( struct sock * sk ) ; void ( * sk_error_report ) ( struct sock * sk ) ; int ( * sk_backlog_rcv ) ( struct sock * sk , struct sk_buff * skb ) ; void ( * sk_destruct ) ( struct sock * sk ) ; } ;
struct device ;
struct bio_set { struct kmem_cache * bio_slab ; unsigned int front_pad ; mempool_t * bio_pool ; mempool_t * bio_integrity_pool ; mempool_t * bvec_pool ; } ;
struct request_list { struct request_queue * q ; struct blkcg_gq * blkg ; int count [ 2 ] ; int starved [ 2 ] ; mempool_t * rq_pool ; wait_queue_head_t wait [ 2 ] ; unsigned int flags ; } ;
struct device ;
struct pci_dev ;
struct pci_bus ;
struct pci_dev ;
struct pci_dev ;
struct request_queue ;
struct pci_dev { struct list_head bus_list ; struct pci_bus * bus ; struct pci_bus * subordinate ; void * sysdata ; struct proc_dir_entry * procent ; struct pci_slot * slot ; unsigned int devfn ; unsigned short vendor ; unsigned short device ; unsigned short subsystem_vendor ; unsigned short subsystem_device ; unsigned int class_ ; u8 revision ; u8 hdr_type ; u8 pcie_cap ; u8 pcie_mpss : 3 ; u8 rom_base_reg ; u8 pin ; u16 pcie_flags_reg ; struct pci_driver * driver ; u64 dma_mask ; struct device_dma_parameters dma_parms ; pci_power_t current_state ; int pm_cap ; unsigned int pme_support : 5 ; unsigned int pme_interrupt : 1 ; unsigned int pme_poll : 1 ; unsigned int d1_support : 1 ; unsigned int d2_support : 1 ; unsigned int no_d1d2 : 1 ; unsigned int no_d3cold : 1 ; unsigned int d3cold_allowed : 1 ; unsigned int mmio_always_on : 1 ; unsigned int wakeup_prepared : 1 ; unsigned int runtime_d3cold : 1 ; unsigned int d3_delay ; unsigned int d3cold_delay ; struct pcie_link_state * link_state ; pci_channel_state_t error_state ; struct device dev ; int cfg_size ; unsigned int irq ; struct resource resource [ DEVICE_COUNT_RESOURCE ] ; unsigned int transparent : 1 ; unsigned int multifunction : 1 ; unsigned int is_added : 1 ; unsigned int is_busmaster : 1 ; unsigned int no_msi : 1 ; unsigned int block_cfg_access : 1 ; unsigned int broken_parity_status : 1 ; unsigned int irq_reroute_variant : 2 ; unsigned int msi_enabled : 1 ; unsigned int msix_enabled : 1 ; unsigned int ari_enabled : 1 ; unsigned int is_managed : 1 ; unsigned int is_pcie : 1 ; unsigned int needs_freset : 1 ; unsigned int state_saved : 1 ; unsigned int is_physfn : 1 ; unsigned int is_virtfn : 1 ; unsigned int reset_fn : 1 ; unsigned int is_hotplug_bridge : 1 ; unsigned int __aer_firmware_first_valid : 1 ; unsigned int __aer_firmware_first : 1 ; unsigned int broken_intx_masking : 1 ; unsigned int io_window_1k : 1 ; pci_dev_flags_t dev_flags ; atomic_t enable_cnt ; u32 saved_config_space [ 16 ] ; struct hlist_head saved_cap_space ; struct bin_attribute * rom_attr ; int rom_attr_enabled ; struct bin_attribute * res_attr [ DEVICE_COUNT_RESOURCE ] ; struct bin_attribute * res_attr_wc [ DEVICE_COUNT_RESOURCE ] ; struct list_head msi_list ; struct kset * msi_kset ; struct pci_vpd * vpd ; union { struct pci_sriov * sriov ; struct pci_dev * physfn ; } ; struct pci_ats * ats ; phys_addr_t rom ; size_t romlen ; } ;
struct pci_host_bridge { struct device dev ; struct pci_bus * bus ; struct list_head windows ; void ( * release_fn ) ( struct pci_host_bridge * ) ; void * release_data ; } ;
struct pci_bus { struct list_head node ; struct pci_bus * parent ; struct list_head children ; struct list_head devices ; struct pci_dev * self ; struct list_head slots ; struct resource * resource [ 4 ] ; struct list_head resources ; struct resource busn_res ; struct pci_ops * ops ; void * sysdata ; struct proc_dir_entry * procdir ; unsigned char number ; unsigned char primary ; unsigned char max_bus_speed ; unsigned char cur_bus_speed ; char name [ 48 ] ; unsigned short bridge_ctl ; pci_bus_flags_t bus_flags ; struct device * bridge ; struct device dev ; struct bin_attribute * legacy_io ; struct bin_attribute * legacy_mem ; unsigned int is_added : 1 ; } ;
struct dma_chan_dev { struct dma_chan * chan ; struct device device ; int dev_id ; atomic_t * idr_ref ; } ;
struct net_device ;
struct net_device ;
struct net_device ;
struct net_device ;
struct phy_device ;
struct net_device { char name [ 16 ] ; struct hlist_node name_hlist ; char * ifalias ; unsigned long mem_end ; unsigned long mem_start ; unsigned long base_addr ; unsigned int irq ; unsigned long state ; struct list_head dev_list ; struct list_head napi_list ; struct list_head unreg_list ; netdev_features_t features ; netdev_features_t hw_features ; netdev_features_t wanted_features ; netdev_features_t vlan_features ; netdev_features_t hw_enc_features ; int ifindex ; int iflink ; struct net_device_stats stats ; atomic_long_t rx_dropped ; const struct iw_handler_def * wireless_handlers ; struct iw_public_data * wireless_data ; const struct net_device_ops * netdev_ops ; const struct ethtool_ops * ethtool_ops ; const struct header_ops * header_ops ; unsigned int flags ; unsigned int priv_flags ; unsigned short gflags ; unsigned short padded ; unsigned char operstate ; unsigned char link_mode ; unsigned char if_port ; unsigned char dma ; unsigned int mtu ; unsigned short type ; unsigned short hard_header_len ; unsigned short needed_headroom ; unsigned short needed_tailroom ; unsigned char perm_addr [ 32 ] ; unsigned char addr_assign_type ; unsigned char addr_len ; unsigned char neigh_priv_len ; unsigned short dev_id ; spinlock_t addr_list_lock ; struct netdev_hw_addr_list uc ; struct netdev_hw_addr_list mc ; bool uc_promisc ; unsigned int promiscuity ; unsigned int allmulti ; struct vlan_info * vlan_info ; struct dsa_switch_tree * dsa_ptr ; void * atalk_ptr ; struct in_device * ip_ptr ; struct dn_dev * dn_ptr ; struct inet6_dev * ip6_ptr ; void * ax25_ptr ; struct wireless_dev * ieee80211_ptr ; unsigned long last_rx ; struct net_device * master ; unsigned char * dev_addr ; struct netdev_hw_addr_list dev_addrs ; unsigned char broadcast [ 32 ] ; struct kset * queues_kset ; struct netdev_rx_queue * _rx ; unsigned int num_rx_queues ; unsigned int real_num_rx_queues ; struct cpu_rmap * rx_cpu_rmap ; rx_handler_func_t * rx_handler ; void * rx_handler_data ; struct netdev_queue * ingress_queue ; struct netdev_queue * _tx __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; unsigned int num_tx_queues ; unsigned int real_num_tx_queues ; struct Qdisc * qdisc ; unsigned long tx_queue_len ; spinlock_t tx_global_lock ; struct xps_dev_maps * xps_maps ; unsigned long trans_start ; int watchdog_timeo ; struct timer_list watchdog_timer ; int * pcpu_refcnt ; struct list_head todo_list ; struct hlist_node index_hlist ; struct list_head link_watch_list ; enum { NETREG_UNINITIALIZED = 0 , NETREG_REGISTERED , NETREG_UNREGISTERING , NETREG_UNREGISTERED , NETREG_RELEASED , NETREG_DUMMY , } reg_state : 8 ; bool dismantle ; enum { RTNL_LINK_INITIALIZED , RTNL_LINK_INITIALIZING , } rtnl_link_state : 16 ; void ( * destructor ) ( struct net_device * dev ) ; struct netpoll_info * npinfo ; struct net * nd_net ; union { void * ml_priv ; struct pcpu_lstats * lstats ; struct pcpu_tstats * tstats ; struct pcpu_dstats * dstats ; } ; struct garp_port * garp_port ; struct device dev ; const struct attribute_group * sysfs_groups [ 4 ] ; const struct rtnl_link_ops * rtnl_link_ops ; unsigned int gso_max_size ; u16 gso_max_segs ; const struct dcbnl_rtnl_ops * dcbnl_ops ; u8 num_tc ; struct netdev_tc_txq tc_to_txq [ 16 ] ; u8 prio_tc_map [ 15 + 1 ] ; unsigned int fcoe_ddp_xid ; struct phy_device * phydev ; struct lock_class_key * qdisc_tx_busylock ; int group ; struct pm_qos_request pm_qos_req ; } ;
struct inet_sock { struct sock sk ; struct ipv6_pinfo * pinet6 ; __be32 inet_saddr ; __s16 uc_ttl ; __u16 cmsg_flags ; __be16 inet_sport ; __u16 inet_id ; struct ip_options_rcu * inet_opt ; int rx_dst_ifindex ; __u8 tos ; __u8 min_ttl ; __u8 mc_ttl ; __u8 pmtudisc ; __u8 recverr : 1 , is_icsk : 1 , freebind : 1 , hdrincl : 1 , mc_loop : 1 , transparent : 1 , mc_all : 1 , nodefrag : 1 ; __u8 rcv_tos ; int uc_index ; int mc_index ; __be32 mc_addr ; struct ip_mc_socklist * mc_list ; struct inet_cork_full cork ; } ;
struct hd_struct { sector_t start_sect ; sector_t nr_sects ; seqcount_t nr_sects_seq ; sector_t alignment_offset ; unsigned int discard_alignment ; struct device __dev ; struct kobject * holder_dir ; int policy , partno ; struct partition_meta_info * info ; unsigned long stamp ; atomic_t in_flight [ 2 ] ; struct disk_stats * dkstats ; atomic_t ref ; struct callback_head callback_head ; } ;
struct request_queue ;
struct request_queue ;
struct request_queue { struct list_head queue_head ; struct request * last_merge ; struct elevator_queue * elevator ; int nr_rqs [ 2 ] ; int nr_rqs_elvpriv ; struct request_list root_rl ; request_fn_proc * request_fn ; make_request_fn * make_request_fn ; prep_rq_fn * prep_rq_fn ; unprep_rq_fn * unprep_rq_fn ; merge_bvec_fn * merge_bvec_fn ; softirq_done_fn * softirq_done_fn ; rq_timed_out_fn * rq_timed_out_fn ; dma_drain_needed_fn * dma_drain_needed ; lld_busy_fn * lld_busy_fn ; sector_t end_sector ; struct request * boundary_rq ; struct delayed_work delay_work ; struct backing_dev_info backing_dev_info ; void * queuedata ; unsigned long queue_flags ; int id ; gfp_t bounce_gfp ; spinlock_t __queue_lock ; spinlock_t * queue_lock ; struct kobject kobj ; unsigned long nr_requests ; unsigned int nr_congestion_on ; unsigned int nr_congestion_off ; unsigned int nr_batching ; unsigned int dma_drain_size ; void * dma_drain_buffer ; unsigned int dma_pad_mask ; unsigned int dma_alignment ; struct blk_queue_tag * queue_tags ; struct list_head tag_busy_list ; unsigned int nr_sorted ; unsigned int in_flight [ 2 ] ; unsigned int request_fn_active ; unsigned int rq_timeout ; struct timer_list timeout ; struct list_head timeout_list ; struct list_head icq_list ; unsigned long blkcg_pols [ ( ( ( 2 ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; struct blkcg_gq * root_blkg ; struct list_head blkg_list ; struct queue_limits limits ; unsigned int sg_timeout ; unsigned int sg_reserved_size ; int node ; struct blk_trace * blk_trace ; unsigned int flush_flags ; unsigned int flush_not_queueable : 1 ; unsigned int flush_queue_delayed : 1 ; unsigned int flush_pending_idx : 1 ; unsigned int flush_running_idx : 1 ; unsigned long flush_pending_since ; struct list_head flush_queue [ 2 ] ; struct list_head flush_data_in_flight ; struct request flush_rq ; struct mutex sysfs_lock ; int bypass_depth ; bsg_job_fn * bsg_job_fn ; int bsg_job_size ; struct bsg_class_device bsg_dev ; struct list_head all_q_node ; struct throtl_data * td ; } ;
struct node { struct device dev ; struct work_struct node_work ; } ;
struct request_queue ;
struct Scsi_Host ;
struct Scsi_Host { struct list_head __devices ; struct list_head __targets ; struct scsi_host_cmd_pool * cmd_pool ; spinlock_t free_list_lock ; struct list_head free_list ; struct list_head starved_list ; spinlock_t default_lock ; spinlock_t * host_lock ; struct mutex scan_mutex ; struct list_head eh_cmd_q ; struct task_struct * ehandler ; struct completion * eh_action ; wait_queue_head_t host_wait ; struct scsi_host_template * hostt ; struct scsi_transport_template * transportt ; struct blk_queue_tag * bqt ; unsigned int host_busy ; unsigned int host_failed ; unsigned int host_eh_scheduled ; unsigned int host_no ; int resetting ; unsigned long last_reset ; unsigned int max_id ; unsigned int max_lun ; unsigned int max_channel ; unsigned int unique_id ; unsigned short max_cmd_len ; int this_id ; int can_queue ; short cmd_per_lun ; short unsigned int sg_tablesize ; short unsigned int sg_prot_tablesize ; short unsigned int max_sectors ; unsigned long dma_boundary ; unsigned long cmd_serial_number ; unsigned active_mode : 2 ; unsigned unchecked_isa_dma : 1 ; unsigned use_clustering : 1 ; unsigned use_blk_tcq : 1 ; unsigned host_self_blocked : 1 ; unsigned reverse_ordering : 1 ; unsigned ordered_tag : 1 ; unsigned tmf_in_progress : 1 ; unsigned async_scan : 1 ; unsigned eh_noresume : 1 ; char work_q_name [ 20 ] ; struct workqueue_struct * work_q ; unsigned int host_blocked ; unsigned int max_host_blocked ; unsigned int prot_capabilities ; unsigned char prot_guard_type ; struct request_queue * uspace_req_q ; unsigned long base ; unsigned long io_port ; unsigned char n_io_port ; unsigned char dma_channel ; unsigned int irq ; enum scsi_host_state shost_state ; struct device shost_gendev , shost_dev ; struct list_head sht_legacy_list ; void * shost_data ; struct device * dma_dev ; unsigned long hostdata [ 0 ] __attribute__ ( ( aligned ( sizeof ( unsigned long ) ) ) ) ; } ;
struct acpi_device ;
struct acpi_device { int device_type ; acpi_handle handle ; struct acpi_device * parent ; struct list_head children ; struct list_head node ; struct list_head wakeup_list ; struct acpi_device_status status ; struct acpi_device_flags flags ; struct acpi_device_pnp pnp ; struct acpi_device_power power ; struct acpi_device_wakeup wakeup ; struct acpi_device_perf performance ; struct acpi_device_dir dir ; struct acpi_device_ops ops ; struct acpi_driver * driver ; void * driver_data ; struct device dev ; struct acpi_bus_ops bus_ops ; enum acpi_bus_removal_type removal_type ; u8 physical_node_count ; struct list_head physical_node_list ; struct mutex physical_node_lock ; unsigned long physical_node_id_bitmap [ ( ( ( 32 ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; } ;
struct pci_bus ;
struct pci_dev ;
struct ata_device { struct ata_link * link ; unsigned int devno ; unsigned int horkage ; unsigned long flags ; struct scsi_device * sdev ; void * private_data ; union acpi_object * gtf_cache ; unsigned int gtf_filter ; struct device tdev ; u64 n_sectors ; u64 n_native_sectors ; unsigned int class_ ; unsigned long unpark_deadline ; u8 pio_mode ; u8 dma_mode ; u8 xfer_mode ; unsigned int xfer_shift ; unsigned int multi_count ; unsigned int max_sectors ; unsigned int cdb_len ; unsigned long pio_mask ; unsigned long mwdma_mask ; unsigned long udma_mask ; u16 cylinders ; u16 heads ; u16 sectors ; union { u16 id [ ATA_ID_WORDS ] ; u32 gscr [ SATA_PMP_GSCR_DWORDS ] ; } ; u8 devslp_timing [ ATA_LOG_DEVSLP_SIZE ] ; int spdn_cnt ; struct ata_ering ering ; } ;
struct pci_dev ;
struct input_dev { const char * name ; const char * phys ; const char * uniq ; struct input_id id ; unsigned long propbit [ ( ( ( ( 0x1f + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long evbit [ ( ( ( ( 0x1f + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long keybit [ ( ( ( ( 0x2ff + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long relbit [ ( ( ( ( 0x0f + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long absbit [ ( ( ( ( 0x3f + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long mscbit [ ( ( ( ( 0x07 + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long ledbit [ ( ( ( ( 0x0f + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long sndbit [ ( ( ( ( 0x07 + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long ffbit [ ( ( ( ( 0x7f + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long swbit [ ( ( ( ( 0x0f + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned int hint_events_per_packet ; unsigned int keycodemax ; unsigned int keycodesize ; void * keycode ; int ( * setkeycode ) ( struct input_dev * dev , const struct input_keymap_entry * ke , unsigned int * old_keycode ) ; int ( * getkeycode ) ( struct input_dev * dev , struct input_keymap_entry * ke ) ; struct ff_device * ff ; unsigned int repeat_key ; struct timer_list timer ; int rep [ ( 0x01 + 1 ) ] ; struct input_mt * mt ; struct input_absinfo * absinfo ; unsigned long key [ ( ( ( ( 0x2ff + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long led [ ( ( ( ( 0x0f + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long snd [ ( ( ( ( 0x07 + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long sw [ ( ( ( ( 0x0f + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; int ( * open ) ( struct input_dev * dev ) ; void ( * close ) ( struct input_dev * dev ) ; int ( * flush ) ( struct input_dev * dev , struct file * file ) ; int ( * event ) ( struct input_dev * dev , unsigned int type , unsigned int code , int value ) ; struct input_handle * grab ; spinlock_t event_lock ; struct mutex mutex ; unsigned int users ; bool going_away ; struct device dev ; struct list_head h_list ; struct list_head node ; unsigned int num_vals ; unsigned int max_vals ; struct input_value * vals ; bool devres_managed ; } ;
struct pnp_protocol ;
struct pnp_dev ;
struct pnp_card { struct device dev ; unsigned char number ; struct list_head global_list ; struct list_head protocol_list ; struct list_head devices ; struct pnp_protocol * protocol ; struct pnp_id * id ; char name [ 50 ] ; unsigned char pnpver ; unsigned char productver ; unsigned int serial ; unsigned char checksum ; struct proc_dir_entry * procdir ; } ;
struct pnp_dev { struct device dev ; u64 dma_mask ; unsigned int number ; int status ; struct list_head global_list ; struct list_head protocol_list ; struct list_head card_list ; struct list_head rdev_list ; struct pnp_protocol * protocol ; struct pnp_card * card ; struct pnp_driver * driver ; struct pnp_card_link * card_link ; struct pnp_id * id ; int active ; int capabilities ; unsigned int num_dependent_sets ; struct list_head resources ; struct list_head options ; char name [ 50 ] ; int flags ; struct proc_dir_entry * procent ; void * data ; } ;
struct pnp_protocol { struct list_head protocol_list ; char * name ; int ( * get ) ( struct pnp_dev * dev ) ; int ( * set ) ( struct pnp_dev * dev ) ; int ( * disable ) ( struct pnp_dev * dev ) ; bool ( * can_wakeup ) ( struct pnp_dev * dev ) ; int ( * suspend ) ( struct pnp_dev * dev , pm_message_t state ) ; int ( * resume ) ( struct pnp_dev * dev ) ; unsigned char number ; struct device dev ; struct list_head cards ; struct list_head devices ; } ;
struct mii_bus { const char * name ; char id [ ( 20 - 3 ) ] ; void * priv ; int ( * read ) ( struct mii_bus * bus , int phy_id , int regnum ) ; int ( * write ) ( struct mii_bus * bus , int phy_id , int regnum , u16 val ) ; int ( * reset ) ( struct mii_bus * bus ) ; struct mutex mdio_lock ; struct device * parent ; enum { MDIOBUS_ALLOCATED = 1 , MDIOBUS_REGISTERED , MDIOBUS_UNREGISTERED , MDIOBUS_RELEASED , } state ; struct device dev ; struct phy_device * phy_map [ 32 ] ; u32 phy_mask ; int * irq ; } ;
struct phy_device { struct phy_driver * drv ; struct mii_bus * bus ; struct device dev ; u32 phy_id ; struct phy_c45_device_ids c45_ids ; bool is_c45 ; enum phy_state state ; u32 dev_flags ; phy_interface_t interface ; int addr ; int speed ; int duplex ; int pause ; int asym_pause ; int link ; u32 interrupts ; u32 supported ; u32 advertising ; int autoneg ; int link_timeout ; int irq ; void * priv ; struct work_struct phy_queue ; struct delayed_work state_queue ; atomic_t irq_disable ; struct mutex lock ; struct net_device * attached_dev ; void ( * adjust_link ) ( struct net_device * dev ) ; void ( * adjust_state ) ( struct net_device * dev ) ; } ;
struct inet_connection_sock { struct inet_sock icsk_inet ; struct request_sock_queue icsk_accept_queue ; struct inet_bind_bucket * icsk_bind_hash ; unsigned long icsk_timeout ; struct timer_list icsk_retransmit_timer ; struct timer_list icsk_delack_timer ; __u32 icsk_rto ; __u32 icsk_pmtu_cookie ; const struct tcp_congestion_ops * icsk_ca_ops ; const struct inet_connection_sock_af_ops * icsk_af_ops ; unsigned int ( * icsk_sync_mss ) ( struct sock * sk , u32 pmtu ) ; __u8 icsk_ca_state ; __u8 icsk_retransmits ; __u8 icsk_pending ; __u8 icsk_backoff ; __u8 icsk_syn_retries ; __u8 icsk_probes_out ; __u16 icsk_ext_hdr_len ; struct { __u8 pending ; __u8 quick ; __u8 pingpong ; __u8 blocked ; __u32 ato ; unsigned long timeout ; __u32 lrcvtime ; __u16 last_seg_size ; __u16 rcv_mss ; } icsk_ack ; struct { int enabled ; int search_high ; int search_low ; int probe_size ; } icsk_mtup ; u32 icsk_ca_priv [ 16 ] ; u32 icsk_user_timeout ; } ;
struct udp_sock { struct inet_sock inet ; int pending ; unsigned int corkflag ; __u16 encap_type ; __u16 len ; __u16 pcslen ; __u16 pcrlen ; __u8 pcflag ; __u8 unused [ 3 ] ; int ( * encap_rcv ) ( struct sock * sk , struct sk_buff * skb ) ; } ;
struct raw6_sock { struct inet_sock inet ; __u32 checksum ; __u32 offset ; struct icmp6_filter filter ; __u32 ip6mr_table ; struct ipv6_pinfo inet6 ; } ;
struct gendisk { int major ; int first_minor ; int minors ; char disk_name [ 32 ] ; char * ( * devnode ) ( struct gendisk * gd , umode_t * mode ) ; unsigned int events ; unsigned int async_events ; struct disk_part_tbl * part_tbl ; struct hd_struct part0 ; const struct block_device_operations * fops ; struct request_queue * queue ; void * private_data ; int flags ; struct device * driverfs_dev ; struct kobject * slave_dir ; struct timer_rand_state * random ; atomic_t sync_io ; struct disk_events * ev ; struct blk_integrity * integrity ; int node_id ; } ;
struct ata_link ;
struct ata_link { struct ata_port * ap ; int pmp ; struct device tdev ; unsigned int active_tag ; u32 sactive ; unsigned int flags ; u32 saved_scontrol ; unsigned int hw_sata_spd_limit ; unsigned int sata_spd_limit ; unsigned int sata_spd ; enum ata_lpm_policy lpm_policy ; struct ata_eh_info eh_info ; struct ata_eh_context eh_context ; struct ata_device device [ ATA_MAX_DEVICES ] ; } ;
struct tcp_sock { struct inet_connection_sock inet_conn ; u16 tcp_header_len ; u16 xmit_size_goal_segs ; __be32 pred_flags ; u32 rcv_nxt ; u32 copied_seq ; u32 rcv_wup ; u32 snd_nxt ; u32 snd_una ; u32 snd_sml ; u32 rcv_tstamp ; u32 lsndtime ; struct list_head tsq_node ; unsigned long tsq_flags ; struct { struct sk_buff_head prequeue ; struct task_struct * task ; struct iovec * iov ; int memory ; int len ; struct dma_chan * dma_chan ; int wakeup ; struct dma_pinned_list * pinned_list ; dma_cookie_t dma_cookie ; } ucopy ; u32 snd_wl1 ; u32 snd_wnd ; u32 max_window ; u32 mss_cache ; u32 window_clamp ; u32 rcv_ssthresh ; u32 frto_highmark ; u16 advmss ; u8 frto_counter ; u8 nonagle : 4 , thin_lto : 1 , thin_dupack : 1 , repair : 1 , unused : 1 ; u8 repair_queue ; u8 do_early_retrans : 1 , early_retrans_delayed : 1 , syn_data : 1 , syn_fastopen : 1 , syn_data_acked : 1 ; u32 srtt ; u32 mdev ; u32 mdev_max ; u32 rttvar ; u32 rtt_seq ; u32 packets_out ; u32 retrans_out ; u16 urg_data ; u8 ecn_flags ; u8 reordering ; u32 snd_up ; u8 keepalive_probes ; struct tcp_options_received rx_opt ; u32 snd_ssthresh ; u32 snd_cwnd ; u32 snd_cwnd_cnt ; u32 snd_cwnd_clamp ; u32 snd_cwnd_used ; u32 snd_cwnd_stamp ; u32 prior_cwnd ; u32 prr_delivered ; u32 prr_out ; u32 rcv_wnd ; u32 write_seq ; u32 pushed_seq ; u32 lost_out ; u32 sacked_out ; u32 fackets_out ; u32 tso_deferred ; u32 bytes_acked ; struct sk_buff * lost_skb_hint ; struct sk_buff * scoreboard_skb_hint ; struct sk_buff * retransmit_skb_hint ; struct sk_buff_head out_of_order_queue ; struct tcp_sack_block duplicate_sack [ 1 ] ; struct tcp_sack_block selective_acks [ 4 ] ; struct tcp_sack_block recv_sack_cache [ 4 ] ; struct sk_buff * highest_sack ; int lost_cnt_hint ; u32 retransmit_high ; u32 lost_retrans_low ; u32 prior_ssthresh ; u32 high_seq ; u32 retrans_stamp ; u32 undo_marker ; int undo_retrans ; u32 total_retrans ; u32 urg_seq ; unsigned int keepalive_time ; unsigned int keepalive_intvl ; int linger2 ; struct { u32 rtt ; u32 seq ; u32 time ; } rcv_rtt_est ; struct { int space ; u32 seq ; u32 time ; } rcvq_space ; struct { u32 probe_seq_start ; u32 probe_seq_end ; } mtu_probe ; u32 mtu_info ; const struct tcp_sock_af_ops * af_specific ; struct tcp_md5sig_info * md5sig_info ; struct tcp_cookie_values * cookie_values ; struct tcp_fastopen_request * fastopen_req ; struct request_sock * fastopen_rsk ; } ;
struct udp6_sock { struct udp_sock udp ; struct ipv6_pinfo inet6 ; } ;
struct ata_port ;
struct ata_port { struct Scsi_Host * scsi_host ; struct ata_port_operations * ops ; spinlock_t * lock ; unsigned long flags ; unsigned int pflags ; unsigned int print_id ; unsigned int port_no ; struct ata_ioports ioaddr ; u8 ctl ; u8 last_ctl ; struct ata_link * sff_pio_task_link ; struct delayed_work sff_pio_task ; struct ata_bmdma_prd * bmdma_prd ; dma_addr_t bmdma_prd_dma ; unsigned int pio_mask ; unsigned int mwdma_mask ; unsigned int udma_mask ; unsigned int cbl ; struct ata_queued_cmd qcmd [ ATA_MAX_QUEUE ] ; unsigned long qc_allocated ; unsigned int qc_active ; int nr_active_links ; struct ata_link link ; struct ata_link * slave_link ; int nr_pmp_links ; struct ata_link * pmp_link ; struct ata_link * excl_link ; struct ata_port_stats stats ; struct ata_host * host ; struct device * dev ; struct device tdev ; struct mutex scsi_scan_mutex ; struct delayed_work hotplug_task ; struct work_struct scsi_rescan_task ; unsigned int hsm_task_state ; u32 msg_enable ; struct list_head eh_done_q ; wait_queue_head_t eh_wait_q ; int eh_tries ; struct completion park_req_pending ; pm_message_t pm_mesg ; int * pm_result ; enum ata_lpm_policy target_lpm_policy ; struct timer_list fastdrain_timer ; unsigned long fastdrain_cnt ; int em_message_type ; void * private_data ; struct ata_acpi_gtm __acpi_init_gtm ; u8 sector_buf [ ATA_SECT_SIZE ] __attribute__ ( ( __aligned__ ( ( 1 << ( 6 ) ) ) ) ) ; } ;
struct tcp6_sock { struct tcp_sock tcp ; struct ipv6_pinfo inet6 ; } ;
extern unsigned int __sw_hweight8 ( unsigned int w ) ;
extern unsigned int __sw_hweight16 ( unsigned int w ) ;
extern unsigned int __sw_hweight32 ( unsigned int w ) ;
extern unsigned long __sw_hweight64 ( __u64 w ) ;
extern void alternative_instructions ( void ) ;
extern void apply_alternatives ( struct alt_instr * start , struct alt_instr * end ) ;
extern void alternatives_smp_module_add ( struct module * mod , char * name , void * locks , void * locks_end , void * text , void * text_end ) ;
extern void alternatives_smp_module_del ( struct module * mod ) ;
extern void alternatives_enable_smp ( void ) ;
extern int alternatives_text_reserved ( void * start , void * end ) ;
void apply_paravirt ( struct paravirt_patch_site * start , struct paravirt_patch_site * end ) ;
extern void * text_poke_early ( void * addr , const void * opcode , size_t len ) ;
extern void * text_poke ( void * addr , const void * opcode , size_t len ) ;
extern void * text_poke_smp ( void * addr , const void * opcode , size_t len ) ;
extern void text_poke_smp_batch ( struct text_poke_param * params , int n ) ;
extern unsigned long find_next_bit ( const unsigned long * addr , unsigned long size , unsigned long offset ) ;
extern unsigned long find_next_zero_bit ( const unsigned long * addr , unsigned long size , unsigned long offset ) ;
extern unsigned long find_first_bit ( const unsigned long * addr , unsigned long size ) ;
extern unsigned long find_first_zero_bit ( const unsigned long * addr , unsigned long size ) ;
extern unsigned long find_last_bit ( const unsigned long * addr , unsigned long size ) ;
extern __attribute__ ( ( const , noreturn ) ) int ____ilog2_NaN ( void ) ;
extern int do_one_initcall ( initcall_t fn ) ;
void setup_arch ( char * * ) ;
void prepare_namespace ( void ) ;
void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) parse_early_param ( void ) ;
void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) parse_early_options ( char * cmdline ) ;
extern __attribute__ ( ( format ( printf , 1 , 2 ) ) ) void early_printk ( const char * fmt , ... ) ;
extern int printk_needs_cpu ( int cpu ) ;
extern void printk_tick ( void ) ;
__attribute__ ( ( format ( printf , 5 , 0 ) ) ) int vprintk_emit ( int facility , int level , const char * dict , size_t dictlen , const char * fmt , va_list args ) ;
__attribute__ ( ( format ( printf , 1 , 0 ) ) ) int vprintk ( const char * fmt , va_list args ) ;
__attribute__ ( ( format ( printf , 5 , 6 ) ) ) __attribute__ ( ( __cold__ ) ) int printk_emit ( int facility , int level , const char * dict , size_t dictlen , const char * fmt , ... ) ;
__attribute__ ( ( format ( printf , 1 , 2 ) ) ) __attribute__ ( ( __cold__ ) ) int printk ( const char * fmt , ... ) ;
__attribute__ ( ( format ( printf , 1 , 2 ) ) ) __attribute__ ( ( __cold__ ) ) int printk_sched ( const char * fmt , ... ) ;
extern int __printk_ratelimit ( const char * func ) ;
extern bool printk_timed_ratelimit ( unsigned long * caller_jiffies , unsigned int interval_msec ) ;
void log_buf_kexec_setup ( void ) ;
void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) setup_log_buf ( int early ) ;
extern void dump_stack ( void ) __attribute__ ( ( __cold__ ) ) ;
extern void hex_dump_to_buffer ( const void * buf , size_t len , int rowsize , int groupsize , char * linebuf , size_t linebuflen , bool ascii ) ;
extern void print_hex_dump ( const char * level , const char * prefix_str , int prefix_type , int rowsize , int groupsize , const void * buf , size_t len , bool ascii ) ;
extern void print_hex_dump_bytes ( const char * prefix_str , int prefix_type , const void * buf , size_t len ) ;
int ddebug_add_module ( struct _ddebug * tab , unsigned int n , const char * modname ) ;
extern char * strndup_user ( const char * , long ) ;
extern void * memdup_user ( const void * , size_t ) ;
extern void * memcpy ( void * to , const void * from , size_t len ) ;
void * memset ( void * s , int c , size_t n ) ;
void * memmove ( void * dest , const void * src , size_t count ) ;
int memcmp ( const void * cs , const void * ct , size_t count ) ;
size_t strlen ( const char * s ) ;
char * strcpy ( char * dest , const char * src ) ;
char * strcat ( char * dest , const char * src ) ;
int strcmp ( const char * cs , const char * ct ) ;
extern char * strcpy ( char * , const char * ) ;
extern char * strncpy ( char * , const char * , __kernel_size_t ) ;
size_t strlcpy ( char * , const char * , size_t ) ;
extern char * strcat ( char * , const char * ) ;
extern char * strncat ( char * , const char * , __kernel_size_t ) ;
extern size_t strlcat ( char * , const char * , __kernel_size_t ) ;
extern int strcmp ( const char * , const char * ) ;
extern int strncmp ( const char * , const char * , __kernel_size_t ) ;
extern int strnicmp ( const char * , const char * , __kernel_size_t ) ;
extern int strcasecmp ( const char * s1 , const char * s2 ) ;
extern int strncasecmp ( const char * s1 , const char * s2 , size_t n ) ;
//extern char * strchr ( const char * , int ) ;
extern char * strnchr ( const char * , size_t , int ) ;
//extern char * strrchr ( const char * , int ) ;
extern char * skip_spaces ( const char * ) ;
extern char * strim ( char * ) ;
//extern char * strstr ( const char * , const char * ) ;
extern char * strnstr ( const char * , const char * , size_t ) ;
extern __kernel_size_t strlen ( const char * ) ;
extern __kernel_size_t strnlen ( const char * , __kernel_size_t ) ;
//extern char * strpbrk ( const char * , const char * ) ;
extern char * strsep ( char * * , const char * ) ;
extern __kernel_size_t strspn ( const char * , const char * ) ;
extern __kernel_size_t strcspn ( const char * , const char * ) ;
extern void * memscan ( void * , int , __kernel_size_t ) ;
extern int memcmp ( const void * , const void * , __kernel_size_t ) ;
//extern void * memchr ( const void * , int , __kernel_size_t ) ;
void * memchr_inv ( const void * s , int c , size_t n ) ;
extern char * kstrdup ( const char * s , gfp_t gfp ) ;
extern char * kstrndup ( const char * s , size_t len , gfp_t gfp ) ;
extern void * kmemdup ( const void * src , size_t len , gfp_t gfp ) ;
extern char * * argv_split ( gfp_t gfp , const char * str , int * argcp ) ;
extern void argv_free ( char * * argv ) ;
extern bool sysfs_streq ( const char * s1 , const char * s2 ) ;
extern int strtobool ( const char * s , bool * res ) ;
//int vbin_printf ( u32 * bin_buf , size_t size , const char * fmt , va_list args ) ;
int bstr_printf ( char * buf , size_t size , const char * fmt , const u32 * bin_buf ) ;
int bprintf ( u32 * bin_buf , size_t size , const char * fmt , ... ) __attribute__ ( ( format ( printf , 3 , 4 ) ) ) ;
extern ssize_t memory_read_from_buffer ( void * to , size_t count , loff_t * ppos , const void * from , size_t available ) ;
extern size_t memweight ( const void * ptr , size_t bytes ) ;
extern int _cond_resched ( void ) ;
__attribute__ ( ( format ( printf , 1 , 2 ) ) ) void panic ( const char * fmt , ... ) __attribute__ ( ( noreturn ) ) __attribute__ ( ( __cold__ ) ) ;
extern void oops_enter ( void ) ;
extern void oops_exit ( void ) ;
void print_oops_end_marker ( void ) ;
extern int oops_may_print ( void ) ;
void do_exit ( long error_code ) __attribute__ ( ( noreturn ) ) ;
void complete_and_exit ( struct completion * , long ) __attribute__ ( ( noreturn ) ) ;
int _kstrtoul ( const char * s , unsigned int base , unsigned long * res ) ;
int _kstrtol ( const char * s , unsigned int base , long * res ) ;
int kstrtoull ( const char * s , unsigned int base , unsigned long long * res ) ;
int kstrtoll ( const char * s , unsigned int base , long long * res ) ;
int kstrtouint ( const char * s , unsigned int base , unsigned int * res ) ;
int kstrtoint ( const char * s , unsigned int base , int * res ) ;
int kstrtou16 ( const char * s , unsigned int base , u16 * res ) ;
int kstrtos16 ( const char * s , unsigned int base , s16 * res ) ;
int kstrtou8 ( const char * s , unsigned int base , u8 * res ) ;
int kstrtos8 ( const char * s , unsigned int base , s8 * res ) ;
int kstrtoull_from_user ( const char * s , size_t count , unsigned int base , unsigned long long * res ) ;
int kstrtoll_from_user ( const char * s , size_t count , unsigned int base , long long * res ) ;
int kstrtoul_from_user ( const char * s , size_t count , unsigned int base , unsigned long * res ) ;
int kstrtol_from_user ( const char * s , size_t count , unsigned int base , long * res ) ;
int kstrtouint_from_user ( const char * s , size_t count , unsigned int base , unsigned int * res ) ;
int kstrtoint_from_user ( const char * s , size_t count , unsigned int base , int * res ) ;
int kstrtou16_from_user ( const char * s , size_t count , unsigned int base , u16 * res ) ;
int kstrtos16_from_user ( const char * s , size_t count , unsigned int base , s16 * res ) ;
int kstrtou8_from_user ( const char * s , size_t count , unsigned int base , u8 * res ) ;
int kstrtos8_from_user ( const char * s , size_t count , unsigned int base , s8 * res ) ;
extern unsigned long simple_strtoul ( const char * , char * * , unsigned int ) ;
extern long simple_strtol ( const char * , char * * , unsigned int ) ;
extern unsigned long long simple_strtoull ( const char * , char * * , unsigned int ) ;
extern long long simple_strtoll ( const char * , char * * , unsigned int ) ;
extern int num_to_str ( char * buf , int size , unsigned long long num ) ;
extern __attribute__ ( ( format ( printf , 2 , 3 ) ) ) int sprintf ( char * buf , const char * fmt , ... ) ;
extern __attribute__ ( ( format ( printf , 2 , 0 ) ) ) int vsprintf ( char * buf , const char * , va_list ) ;
extern __attribute__ ( ( format ( printf , 3 , 4 ) ) ) int snprintf ( char * buf , size_t size , const char * fmt , ... ) ;
extern __attribute__ ( ( format ( printf , 3 , 0 ) ) ) int vsnprintf ( char * buf , size_t size , const char * fmt , va_list args ) ;
extern __attribute__ ( ( format ( printf , 3 , 4 ) ) ) int scnprintf ( char * buf , size_t size , const char * fmt , ... ) ;
extern __attribute__ ( ( format ( printf , 3 , 0 ) ) ) int vscnprintf ( char * buf , size_t size , const char * fmt , va_list args ) ;
extern __attribute__ ( ( format ( printf , 2 , 3 ) ) ) char * kasprintf ( gfp_t gfp , const char * fmt , ... ) ;
extern char * kvasprintf ( gfp_t gfp , const char * fmt , va_list args ) ;
extern __attribute__ ( ( format ( scanf , 2 , 3 ) ) ) int sscanf ( const char * , const char * , ... ) ;
extern __attribute__ ( ( format ( scanf , 2 , 0 ) ) ) int vsscanf ( const char * , const char * , va_list ) ;
extern int get_option ( char * * str , int * pint ) ;
extern char * get_options ( const char * str , int nints , int * ints ) ;
extern unsigned long long memparse ( const char * ptr , char * * retptr ) ;
extern int core_kernel_text ( unsigned long addr ) ;
extern int core_kernel_data ( unsigned long addr ) ;
extern int __kernel_text_address ( unsigned long addr ) ;
extern int kernel_text_address ( unsigned long addr ) ;
extern int func_ptr_is_kernel_text ( void * ptr ) ;
extern struct pid * session_of_pgrp ( struct pid * pgrp ) ;
unsigned long int_sqrt ( unsigned long ) ;
extern void bust_spinlocks ( int yes ) ;
extern void wake_up_klogd ( void ) ;
extern const char * print_tainted ( void ) ;
extern void add_taint ( unsigned flag ) ;
extern int test_taint ( unsigned flag ) ;
extern unsigned long get_taint ( void ) ;
extern int hex_to_bin ( char ch ) ;
extern int hex2bin ( u8 * dst , const char * src , size_t count ) ;
void tracing_off_permanent ( void ) ;
void tracing_on ( void ) ;
void tracing_off ( void ) ;
int tracing_is_on ( void ) ;
extern void tracing_start ( void ) ;
extern void tracing_stop ( void ) ;
extern void ftrace_off_permanent ( void ) ;
extern __attribute__ ( ( format ( printf , 2 , 3 ) ) ) int __trace_bprintk ( unsigned long ip , const char * fmt , ... ) ;
extern __attribute__ ( ( format ( printf , 2 , 3 ) ) ) int __trace_printk ( unsigned long ip , const char * fmt , ... ) ;
extern void trace_dump_stack ( void ) ;
extern int __ftrace_vbprintk ( unsigned long ip , const char * fmt , va_list ap ) ;
extern int __ftrace_vprintk ( unsigned long ip , const char * fmt , va_list ap ) ;
extern void ftrace_dump ( enum ftrace_dump_mode oops_dump_mode ) ;
extern int do_sysinfo ( struct sysinfo * info ) ;
extern __attribute__ ( ( format ( printf , 3 , 4 ) ) ) void warn_slowpath_fmt ( const char * file , const int line , const char * fmt , ... ) ;
extern __attribute__ ( ( format ( printf , 4 , 5 ) ) ) void warn_slowpath_fmt_taint ( const char * file , const int line , unsigned taint , const char * fmt , ... ) ;
extern void warn_slowpath_null ( const char * file , const int line ) ;
extern void show_regs_common ( void ) ;
const struct bug_entry * find_bug ( unsigned long bugaddr ) ;
enum bug_trap_type report_bug ( unsigned long bug_addr , struct pt_regs * regs ) ;
int is_valid_bugaddr ( unsigned long addr ) ;
extern long do_no_restart_syscall ( struct restart_block * parm ) ;
void clear_page ( void * page ) ;
void copy_page ( void * to , void * from ) ;
extern unsigned long __phys_addr ( unsigned long ) ;
extern void init_extra_mapping_uc ( unsigned long phys , unsigned long size ) ;
extern void init_extra_mapping_wb ( unsigned long phys , unsigned long size ) ;
extern int devmem_is_allowed ( unsigned long pagenr ) ;
extern unsigned long init_memory_mapping ( unsigned long start , unsigned long end ) ;
extern void initmem_init ( void ) ;
extern bool __virt_addr_valid ( unsigned long kaddr ) ;
extern void set_nx ( void ) ;
extern pgprot_t pgprot_writecombine ( pgprot_t prot ) ;
pgprot_t phys_mem_access_prot ( struct file * file , unsigned long pfn , unsigned long size , pgprot_t vma_prot ) ;
int phys_mem_access_prot_allowed ( struct file * file , unsigned long pfn , unsigned long size , pgprot_t * vma_prot ) ;
void set_pte_vaddr ( unsigned long vaddr , pte_t pte ) ;
extern void native_pagetable_reserve ( u64 start , u64 end ) ;
extern void arch_report_meminfo ( struct seq_file * m ) ;
extern void update_page_count ( int level , unsigned long pages ) ;
extern pte_t * lookup_address ( unsigned long address , unsigned int * level ) ;
unsigned paravirt_patch_nop ( void ) ;
unsigned paravirt_patch_ident_32 ( void * insnbuf , unsigned len ) ;
unsigned paravirt_patch_ident_64 ( void * insnbuf , unsigned len ) ;
unsigned paravirt_patch_ignore ( unsigned len ) ;
unsigned paravirt_patch_call ( void * insnbuf , const void * target , u16 tgt_clobbers , unsigned long addr , u16 site_clobbers , unsigned len ) ;
unsigned paravirt_patch_jmp ( void * insnbuf , const void * target , unsigned long addr , unsigned len ) ;
unsigned paravirt_patch_default ( u8 type , u16 clobbers , void * insnbuf , unsigned long addr , unsigned len ) ;
unsigned paravirt_patch_insns ( void * insnbuf , unsigned len , const char * start , const char * end ) ;
unsigned native_patch ( u8 type , u16 clobbers , void * ibuf , unsigned long addr , unsigned len ) ;
int paravirt_disable_iospace ( void ) ;
enum paravirt_lazy_mode paravirt_get_lazy_mode ( void ) ;
void paravirt_start_context_switch ( struct task_struct * prev ) ;
void paravirt_end_context_switch ( struct task_struct * next ) ;
void paravirt_enter_lazy_mmu ( void ) ;
void paravirt_leave_lazy_mmu ( void ) ;
void _paravirt_nop ( void ) ;
u32 _paravirt_ident_32 ( u32 ) ;
u64 _paravirt_ident_64 ( u64 ) ;
extern unsigned long profile_pc ( struct pt_regs * regs ) ;
extern unsigned long convert_ip_to_linear ( struct task_struct * child , struct pt_regs * regs ) ;
extern void send_sigtrap ( struct task_struct * tsk , struct pt_regs * regs , int error_code , int si_code ) ;
extern long syscall_trace_enter ( struct pt_regs * ) ;
extern void syscall_trace_leave ( struct pt_regs * ) ;
extern int regs_query_register_offset ( const char * name ) ;
extern const char * regs_query_register_name ( unsigned int offset ) ;
extern int do_get_thread_area ( struct task_struct * p , int idx , struct user_desc * info ) ;
extern int do_set_thread_area ( struct task_struct * p , int idx , struct user_desc * info , int can_allocate ) ;
extern void __bad_percpu_size ( void ) ;
extern void setup_per_cpu_areas ( void ) ;
extern int __bitmap_empty ( const unsigned long * bitmap , int bits ) ;
extern int __bitmap_full ( const unsigned long * bitmap , int bits ) ;
extern int __bitmap_equal ( const unsigned long * bitmap1 , const unsigned long * bitmap2 , int bits ) ;
extern void __bitmap_complement ( unsigned long * dst , const unsigned long * src , int bits ) ;
extern void __bitmap_shift_right ( unsigned long * dst , const unsigned long * src , int shift , int bits ) ;
extern void __bitmap_shift_left ( unsigned long * dst , const unsigned long * src , int shift , int bits ) ;
extern int __bitmap_and ( unsigned long * dst , const unsigned long * bitmap1 , const unsigned long * bitmap2 , int bits ) ;
extern void __bitmap_or ( unsigned long * dst , const unsigned long * bitmap1 , const unsigned long * bitmap2 , int bits ) ;
extern void __bitmap_xor ( unsigned long * dst , const unsigned long * bitmap1 , const unsigned long * bitmap2 , int bits ) ;
extern int __bitmap_andnot ( unsigned long * dst , const unsigned long * bitmap1 , const unsigned long * bitmap2 , int bits ) ;
extern int __bitmap_intersects ( const unsigned long * bitmap1 , const unsigned long * bitmap2 , int bits ) ;
extern int __bitmap_subset ( const unsigned long * bitmap1 , const unsigned long * bitmap2 , int bits ) ;
extern int __bitmap_weight ( const unsigned long * bitmap , int bits ) ;
extern void bitmap_set ( unsigned long * map , int i , int len ) ;
extern void bitmap_clear ( unsigned long * map , int start , int nr ) ;
extern unsigned long bitmap_find_next_zero_area ( unsigned long * map , unsigned long size , unsigned long start , unsigned int nr , unsigned long align_mask ) ;
extern int bitmap_scnprintf ( char * buf , unsigned int len , const unsigned long * src , int nbits ) ;
extern int __bitmap_parse ( const char * buf , unsigned int buflen , int is_user , unsigned long * dst , int nbits ) ;
extern int bitmap_parse_user ( const char * ubuf , unsigned int ulen , unsigned long * dst , int nbits ) ;
extern int bitmap_scnlistprintf ( char * buf , unsigned int len , const unsigned long * src , int nbits ) ;
extern int bitmap_parselist ( const char * buf , unsigned long * maskp , int nmaskbits ) ;
extern int bitmap_parselist_user ( const char * ubuf , unsigned int ulen , unsigned long * dst , int nbits ) ;
extern void bitmap_remap ( unsigned long * dst , const unsigned long * src , const unsigned long * old , const unsigned long * new_ , int bits ) ;
extern int bitmap_bitremap ( int oldbit , const unsigned long * old , const unsigned long * new_ , int bits ) ;
extern void bitmap_onto ( unsigned long * dst , const unsigned long * orig , const unsigned long * relmap , int bits ) ;
extern void bitmap_fold ( unsigned long * dst , const unsigned long * orig , int sz , int bits ) ;
extern int bitmap_find_free_region ( unsigned long * bitmap , int bits , int order ) ;
extern void bitmap_release_region ( unsigned long * bitmap , int pos , int order ) ;
extern int bitmap_allocate_region ( unsigned long * bitmap , int pos , int order ) ;
extern void bitmap_copy_le ( void * dst , const unsigned long * src , int nbits ) ;
extern int bitmap_ord_to_pos ( const unsigned long * bitmap , int n , int bits ) ;
int cpumask_next_and ( int n , const struct cpumask * , const struct cpumask * ) ;
int cpumask_any_but ( const struct cpumask * mask , unsigned int cpu ) ;
void set_cpu_possible ( unsigned int cpu , bool possible ) ;
void set_cpu_present ( unsigned int cpu , bool present ) ;
void set_cpu_online ( unsigned int cpu , bool online ) ;
void set_cpu_active ( unsigned int cpu , bool active ) ;
void init_cpu_present ( const struct cpumask * src ) ;
void init_cpu_possible ( const struct cpumask * src ) ;
void init_cpu_online ( const struct cpumask * src ) ;
int __first_cpu ( const cpumask_t * srcp ) ;
int __next_cpu ( int n , const cpumask_t * srcp ) ;
int __next_cpu_nr ( int n , const cpumask_t * srcp ) ;
extern void setup_cpu_local_masks ( void ) ;
extern unsigned long long native_read_tsc ( void ) ;
extern int rdmsr_safe_regs ( u32 regs [ 8 ] ) ;
extern int wrmsr_safe_regs ( u32 regs [ 8 ] ) ;
void arch_flush_lazy_mmu_mode ( void ) ;
extern void default_banner ( void ) ;
struct msr * msrs_alloc ( void ) ;
void msrs_free ( struct msr * msrs ) ;
int rdmsr_on_cpu ( unsigned int cpu , u32 msr_no , u32 * l , u32 * h ) ;
int wrmsr_on_cpu ( unsigned int cpu , u32 msr_no , u32 l , u32 h ) ;
void rdmsr_on_cpus ( const struct cpumask * mask , u32 msr_no , struct msr * msrs ) ;
void wrmsr_on_cpus ( const struct cpumask * mask , u32 msr_no , struct msr * msrs ) ;
int rdmsr_safe_on_cpu ( unsigned int cpu , u32 msr_no , u32 * l , u32 * h ) ;
int wrmsr_safe_on_cpu ( unsigned int cpu , u32 msr_no , u32 l , u32 h ) ;
int rdmsr_safe_regs_on_cpu ( unsigned int cpu , u32 regs [ 8 ] ) ;
int wrmsr_safe_regs_on_cpu ( unsigned int cpu , u32 regs [ 8 ] ) ;
extern void arch_init_ideal_nops ( void ) ;
extern void native_load_gs_index ( unsigned ) ;
extern int register_exec_domain ( struct exec_domain * ) ;
extern int unregister_exec_domain ( struct exec_domain * ) ;
extern int __set_personality ( unsigned int ) ;
u32 iter_div_u64_rem ( u64 dividend , u32 divisor , u64 * remainder ) ;
extern void cpu_detect ( struct cpuinfo_x86 * c ) ;
extern void early_cpu_init ( void ) ;
extern void identify_boot_cpu ( void ) ;
extern void identify_secondary_cpu ( struct cpuinfo_x86 * ) ;
extern void print_cpu_info ( struct cpuinfo_x86 * ) ;
void print_cpu_msr ( struct cpuinfo_x86 * ) ;
extern void init_scattered_cpuid_features ( struct cpuinfo_x86 * c ) ;
extern unsigned int init_intel_cacheinfo ( struct cpuinfo_x86 * c ) ;
extern void init_amd_cacheinfo ( struct cpuinfo_x86 * c ) ;
extern void detect_extended_topology ( struct cpuinfo_x86 * c ) ;
extern void detect_ht ( struct cpuinfo_x86 * c ) ;
extern void ignore_sysret ( void ) ;
extern void free_thread_xstate ( struct task_struct * ) ;
extern void release_thread ( struct task_struct * ) ;
unsigned long get_wchan ( struct task_struct * p ) ;
extern void select_idle_routine ( const struct cpuinfo_x86 * c ) ;
extern void init_amd_e400_c1e_mask ( void ) ;
extern void enable_sep_cpu ( void ) ;
extern int sysenter_setup ( void ) ;
extern void early_trap_init ( void ) ;
extern void cpu_set_gdt ( int ) ;
extern void switch_to_new_gdt ( int ) ;
extern void load_percpu_segment ( int ) ;
extern void cpu_init ( void ) ;
extern void set_task_blockstep ( struct task_struct * task , bool on ) ;
extern unsigned long KSTK_ESP ( struct task_struct * task ) ;
extern void start_thread ( struct pt_regs * regs , unsigned long new_ip , unsigned long new_sp ) ;
extern int get_tsc_mode ( unsigned long adr ) ;
extern int set_tsc_mode ( unsigned int val ) ;
extern int amd_get_nb_id ( int cpu ) ;
extern bool cpu_has_amd_erratum ( const int * ) ;
extern unsigned long arch_align_stack ( unsigned long sp ) ;
extern void free_init_pages ( char * what , unsigned long begin , unsigned long end ) ;
void default_idle ( void ) ;
bool set_pm_idle_to_default ( void ) ;
void stop_this_cpu ( void * dummy ) ;
extern void mcount ( void ) ;
extern void __fentry__ ( void ) ;
int ftrace_int3_handler ( struct pt_regs * regs ) ;
extern void __xchg_wrong_size ( void ) __attribute__ ( ( error ( "Bad argument size for xchg" ) ) ) ;
extern void __cmpxchg_wrong_size ( void ) __attribute__ ( ( error ( "Bad argument size for cmpxchg" ) ) ) ;
extern void __xadd_wrong_size ( void ) __attribute__ ( ( error ( "Bad argument size for xadd" ) ) ) ;
extern void __add_wrong_size ( void ) __attribute__ ( ( error ( "Bad argument size for add" ) ) ) ;
extern void arch_task_cache_init ( void ) ;
extern int arch_dup_task_struct ( struct task_struct * dst , struct task_struct * src ) ;
extern void arch_release_task_struct ( struct task_struct * tsk ) ;
void preempt_notifier_register ( struct preempt_notifier * notifier ) ;
void preempt_notifier_unregister ( struct preempt_notifier * notifier ) ;
extern void local_bh_disable ( void ) ;
extern void _local_bh_enable ( void ) ;
extern void local_bh_enable ( void ) ;
extern void local_bh_enable_ip ( unsigned long ip ) ;
int in_lock_functions ( unsigned long addr ) ;
void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_spin_lock ( raw_spinlock_t * lock ) ;
void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_spin_lock_nested ( raw_spinlock_t * lock , int subclass ) ;
void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_spin_lock_nest_lock ( raw_spinlock_t * lock , struct lockdep_map * map ) ;
void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_spin_lock_bh ( raw_spinlock_t * lock ) ;
void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_spin_lock_irq ( raw_spinlock_t * lock ) ;
unsigned long __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_spin_lock_irqsave ( raw_spinlock_t * lock ) ;
unsigned long __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_spin_lock_irqsave_nested ( raw_spinlock_t * lock , int subclass ) ;
int __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_spin_trylock ( raw_spinlock_t * lock ) ;
int __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_spin_trylock_bh ( raw_spinlock_t * lock ) ;
void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_spin_unlock ( raw_spinlock_t * lock ) ;
void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_spin_unlock_bh ( raw_spinlock_t * lock ) ;
void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_spin_unlock_irq ( raw_spinlock_t * lock ) ;
void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_spin_unlock_irqrestore ( raw_spinlock_t * lock , unsigned long flags ) ;
void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_read_lock ( rwlock_t * lock ) ;
void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_write_lock ( rwlock_t * lock ) ;
void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_read_lock_bh ( rwlock_t * lock ) ;
void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_write_lock_bh ( rwlock_t * lock ) ;
void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_read_lock_irq ( rwlock_t * lock ) ;
void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_write_lock_irq ( rwlock_t * lock ) ;
unsigned long __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_read_lock_irqsave ( rwlock_t * lock ) ;
unsigned long __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_write_lock_irqsave ( rwlock_t * lock ) ;
int __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_read_trylock ( rwlock_t * lock ) ;
int __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_write_trylock ( rwlock_t * lock ) ;
void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_read_unlock ( rwlock_t * lock ) ;
void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_write_unlock ( rwlock_t * lock ) ;
void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_read_unlock_bh ( rwlock_t * lock ) ;
void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_write_unlock_bh ( rwlock_t * lock ) ;
void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_read_unlock_irq ( rwlock_t * lock ) ;
void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_write_unlock_irq ( rwlock_t * lock ) ;
void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_read_unlock_irqrestore ( rwlock_t * lock , unsigned long flags ) ;
void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _raw_write_unlock_irqrestore ( rwlock_t * lock , unsigned long flags ) ;
extern int _atomic_dec_and_lock ( atomic_t * atomic , spinlock_t * lock ) ;
extern unsigned long mktime ( const unsigned int year , const unsigned int mon , const unsigned int day , const unsigned int hour , const unsigned int min , const unsigned int sec ) ;
extern void set_normalized_timespec ( struct timespec * ts , time_t sec , s64 nsec ) ;
extern struct timespec timespec_add_safe ( const struct timespec lhs , const struct timespec rhs ) ;
extern void read_persistent_clock ( struct timespec * ts ) ;
extern void read_boot_clock ( struct timespec * ts ) ;
extern int update_persistent_clock ( struct timespec now ) ;
void timekeeping_init ( void ) ;
unsigned long get_seconds ( void ) ;
struct timespec current_kernel_time ( void ) ;
struct timespec __current_kernel_time ( void ) ;
struct timespec get_monotonic_coarse ( void ) ;
void get_xtime_and_monotonic_and_sleep_offset ( struct timespec * xtim , struct timespec * wtom , struct timespec * sleep ) ;
void timekeeping_inject_sleeptime ( struct timespec * delta ) ;
extern void do_gettimeofday ( struct timeval * tv ) ;
extern int do_settimeofday ( const struct timespec * tv ) ;
extern int do_sys_settimeofday ( const struct timespec * tv , const struct timezone * tz ) ;
extern long do_utimes ( int dfd , const char * filename , struct timespec * times , int flags ) ;
extern int do_setitimer ( int which , struct itimerval * value , struct itimerval * ovalue ) ;
extern unsigned int alarm_setitimer ( unsigned int seconds ) ;
extern int do_getitimer ( int which , struct itimerval * value ) ;
extern void getnstimeofday ( struct timespec * tv ) ;
extern void getrawmonotonic ( struct timespec * ts ) ;
extern void getnstime_raw_and_real ( struct timespec * ts_raw , struct timespec * ts_real ) ;
extern void getboottime ( struct timespec * ts ) ;
extern void monotonic_to_bootbased ( struct timespec * ts ) ;
extern void get_monotonic_boottime ( struct timespec * ts ) ;
extern struct timespec timespec_trunc ( struct timespec t , unsigned gran ) ;
extern int timekeeping_valid_for_hres ( void ) ;
extern u64 timekeeping_max_deferment ( void ) ;
extern int timekeeping_inject_offset ( struct timespec * ts ) ;
extern void do_sys_times ( struct tms * ) ;
void time_to_tm ( time_t totalsecs , int offset , struct tm * result ) ;
extern struct timespec ns_to_timespec ( const s64 nsec ) ;
extern struct timeval ns_to_timeval ( const s64 nsec ) ;
extern void __bad_uid ( void ) ;
extern void __bad_gid ( void ) ;
int default_wake_function ( wait_queue_t * wait , unsigned mode , int flags , void * key ) ;
extern void __init_waitqueue_head ( wait_queue_head_t * q , const char * name , struct lock_class_key * ) ;
extern void add_wait_queue ( wait_queue_head_t * q , wait_queue_t * wait ) ;
extern void add_wait_queue_exclusive ( wait_queue_head_t * q , wait_queue_t * wait ) ;
extern void remove_wait_queue ( wait_queue_head_t * q , wait_queue_t * wait ) ;
void __wake_up ( wait_queue_head_t * q , unsigned int mode , int nr , void * key ) ;
void __wake_up_locked_key ( wait_queue_head_t * q , unsigned int mode , void * key ) ;
void __wake_up_sync_key ( wait_queue_head_t * q , unsigned int mode , int nr , void * key ) ;
void __wake_up_locked ( wait_queue_head_t * q , unsigned int mode , int nr ) ;
void __wake_up_sync ( wait_queue_head_t * q , unsigned int mode , int nr ) ;
void __wake_up_bit ( wait_queue_head_t * , void * , int ) ;
int __wait_on_bit ( wait_queue_head_t * , struct wait_bit_queue * , int ( * ) ( void * ) , unsigned ) ;
int __wait_on_bit_lock ( wait_queue_head_t * , struct wait_bit_queue * , int ( * ) ( void * ) , unsigned ) ;
void wake_up_bit ( void * , int ) ;
int out_of_line_wait_on_bit ( void * , int , int ( * ) ( void * ) , unsigned ) ;
int out_of_line_wait_on_bit_lock ( void * , int , int ( * ) ( void * ) , unsigned ) ;
wait_queue_head_t * bit_waitqueue ( void * , int ) ;
extern void sleep_on ( wait_queue_head_t * q ) ;
extern long sleep_on_timeout ( wait_queue_head_t * q , signed long timeout ) ;
extern void interruptible_sleep_on ( wait_queue_head_t * q ) ;
extern long interruptible_sleep_on_timeout ( wait_queue_head_t * q , signed long timeout ) ;
void prepare_to_wait ( wait_queue_head_t * q , wait_queue_t * wait , int state ) ;
void prepare_to_wait_exclusive ( wait_queue_head_t * q , wait_queue_t * wait , int state ) ;
void finish_wait ( wait_queue_head_t * q , wait_queue_t * wait ) ;
void abort_exclusive_wait ( wait_queue_head_t * q , wait_queue_t * wait , unsigned int mode , void * key ) ;
int autoremove_wake_function ( wait_queue_t * wait , unsigned mode , int sync , void * key ) ;
int wake_bit_function ( wait_queue_t * wait , unsigned mode , int sync , void * key ) ;
extern int node_random ( const nodemask_t * maskp ) ;
unsigned long get_pageblock_flags_group ( struct page * page , int start_bitidx , int end_bitidx ) ;
void set_pageblock_flags_group ( struct page * page , unsigned long flags , int start_bitidx , int end_bitidx ) ;
extern void __mutex_init ( struct mutex * lock , const char * name , struct lock_class_key * key ) ;
extern void mutex_lock ( struct mutex * lock ) ;
extern int mutex_lock_interruptible ( struct mutex * lock ) ;
extern int mutex_lock_killable ( struct mutex * lock ) ;
extern int mutex_trylock ( struct mutex * lock ) ;
extern void mutex_unlock ( struct mutex * lock ) ;
extern int atomic_dec_and_mutex_lock ( atomic_t * cnt , struct mutex * lock ) ;
extern struct rw_semaphore * rwsem_down_read_failed ( struct rw_semaphore * sem ) ;
extern struct rw_semaphore * rwsem_down_write_failed ( struct rw_semaphore * sem ) ;
extern struct rw_semaphore * rwsem_wake ( struct rw_semaphore * ) ;
extern struct rw_semaphore * rwsem_downgrade_wake ( struct rw_semaphore * sem ) ;
extern void __init_rwsem ( struct rw_semaphore * sem , const char * name , struct lock_class_key * key ) ;
extern void down_read ( struct rw_semaphore * sem ) ;
extern int down_read_trylock ( struct rw_semaphore * sem ) ;
extern void down_write ( struct rw_semaphore * sem ) ;
extern int down_write_trylock ( struct rw_semaphore * sem ) ;
extern void up_read ( struct rw_semaphore * sem ) ;
extern void up_write ( struct rw_semaphore * sem ) ;
extern void downgrade_write ( struct rw_semaphore * sem ) ;
extern void wait_for_completion ( struct completion * ) ;
extern int wait_for_completion_interruptible ( struct completion * x ) ;
extern int wait_for_completion_killable ( struct completion * x ) ;
extern unsigned long wait_for_completion_timeout ( struct completion * x , unsigned long timeout ) ;
extern long wait_for_completion_interruptible_timeout ( struct completion * x , unsigned long timeout ) ;
extern long wait_for_completion_killable_timeout ( struct completion * x , unsigned long timeout ) ;
extern bool try_wait_for_completion ( struct completion * x ) ;
extern bool completion_done ( struct completion * x ) ;
extern void complete ( struct completion * ) ;
extern void complete_all ( struct completion * ) ;
extern void rcutorture_record_test_transition ( void ) ;
extern void rcutorture_record_progress ( unsigned long vernum ) ;
extern void do_trace_rcu_torture_read ( char * rcutorturename , struct callback_head * rhp ) ;
extern void call_rcu_bh ( struct callback_head * head , void ( * func ) ( struct callback_head * head ) ) ;
extern void call_rcu_sched ( struct callback_head * head , void ( * func ) ( struct callback_head * rcu ) ) ;
extern void synchronize_sched ( void ) ;
extern void rcu_sched_qs ( int cpu ) ;
extern void rcu_bh_qs ( int cpu ) ;
extern void rcu_check_callbacks ( int cpu , int user ) ;
extern void rcu_idle_enter ( void ) ;
extern void rcu_idle_exit ( void ) ;
extern void rcu_irq_enter ( void ) ;
extern void rcu_irq_exit ( void ) ;
extern void exit_rcu ( void ) ;
void wait_rcu_gp ( call_rcu_func_t crf ) ;
extern void rcu_init ( void ) ;
extern void rcu_note_context_switch ( int cpu ) ;
extern int rcu_needs_cpu ( int cpu , unsigned long * delta_jiffies ) ;
extern void rcu_cpu_stall_reset ( void ) ;
extern void synchronize_rcu_bh ( void ) ;
extern void synchronize_sched_expedited ( void ) ;
extern void synchronize_rcu_expedited ( void ) ;
void kfree_call_rcu ( struct callback_head * head , void ( * func ) ( struct callback_head * rcu ) ) ;
extern void rcu_barrier ( void ) ;
extern void rcu_barrier_bh ( void ) ;
extern void rcu_barrier_sched ( void ) ;
extern long rcu_batches_completed ( void ) ;
extern long rcu_batches_completed_bh ( void ) ;
extern long rcu_batches_completed_sched ( void ) ;
extern void rcu_force_quiescent_state ( void ) ;
extern void rcu_bh_force_quiescent_state ( void ) ;
extern void rcu_sched_force_quiescent_state ( void ) ;
extern void rcu_scheduler_starting ( void ) ;
extern int rcu_is_cpu_idle ( void ) ;
extern void disable_TSC ( void ) ;
extern void tsc_init ( void ) ;
extern void mark_tsc_unstable ( char * reason ) ;
extern int unsynchronized_tsc ( void ) ;
extern int check_tsc_unstable ( void ) ;
extern unsigned long native_calibrate_tsc ( void ) ;
extern void check_tsc_sync_source ( int cpu ) ;
extern void check_tsc_sync_target ( void ) ;
extern int notsc_setup ( char * ) ;
extern void tsc_save_sched_clock_state ( void ) ;
extern void tsc_restore_sched_clock_state ( void ) ;
extern void ntp_init ( void ) ;
extern void ntp_clear ( void ) ;
extern u64 ntp_tick_length ( void ) ;
extern int second_overflow ( unsigned long secs ) ;
extern int do_adjtimex ( struct timex * ) ;
extern void hardpps ( const struct timespec * , const struct timespec * ) ;
int read_current_timer ( unsigned long * timer_val ) ;
extern int register_refined_jiffies ( long clock_tick_rate ) ;
extern unsigned int jiffies_to_msecs ( const unsigned long j ) ;
extern unsigned int jiffies_to_usecs ( const unsigned long j ) ;
extern unsigned long msecs_to_jiffies ( const unsigned int m ) ;
extern unsigned long usecs_to_jiffies ( const unsigned int u ) ;
extern unsigned long timespec_to_jiffies ( const struct timespec * value ) ;
extern void jiffies_to_timespec ( const unsigned long jiffies , struct timespec * value ) ;
extern unsigned long timeval_to_jiffies ( const struct timeval * value ) ;
extern void jiffies_to_timeval ( const unsigned long jiffies , struct timeval * value ) ;
extern clock_t jiffies_to_clock_t ( unsigned long x ) ;
extern unsigned long clock_t_to_jiffies ( unsigned long x ) ;
extern u64 jiffies_64_to_clock_t ( u64 x ) ;
extern u64 nsec_to_clock_t ( u64 x ) ;
extern u64 nsecs_to_jiffies64 ( u64 n ) ;
extern unsigned long nsecs_to_jiffies ( u64 n ) ;
extern ktime_t ktime_add_safe ( const ktime_t lhs , const ktime_t rhs ) ;
extern void ktime_get_ts ( struct timespec * ts ) ;
void init_timer_key ( struct timer_list * timer , unsigned int flags , const char * name , struct lock_class_key * key ) ;
extern void add_timer_on ( struct timer_list * timer , int cpu ) ;
extern int del_timer ( struct timer_list * timer ) ;
extern int mod_timer ( struct timer_list * timer , unsigned long expires ) ;
extern int mod_timer_pending ( struct timer_list * timer , unsigned long expires ) ;
extern int mod_timer_pinned ( struct timer_list * timer , unsigned long expires ) ;
extern void set_timer_slack ( struct timer_list * time , int slack_hz ) ;
extern unsigned long get_next_timer_interrupt ( unsigned long now ) ;
extern void init_timer_stats ( void ) ;
extern void timer_stats_update_stats ( void * timer , pid_t pid , void * startf , void * timerf , char * comm , unsigned int timer_flag ) ;
extern void __timer_stats_timer_set_start_info ( struct timer_list * timer , void * addr ) ;
extern void add_timer ( struct timer_list * timer ) ;
extern int try_to_del_timer_sync ( struct timer_list * timer ) ;
extern int del_timer_sync ( struct timer_list * timer ) ;
extern void init_timers ( void ) ;
extern void run_local_timers ( void ) ;
extern enum hrtimer_restart it_real_fn ( struct hrtimer * ) ;
unsigned long __round_jiffies ( unsigned long j , int cpu ) ;
unsigned long __round_jiffies_relative ( unsigned long j , int cpu ) ;
unsigned long round_jiffies ( unsigned long j ) ;
unsigned long round_jiffies_relative ( unsigned long j ) ;
unsigned long __round_jiffies_up ( unsigned long j , int cpu ) ;
unsigned long __round_jiffies_up_relative ( unsigned long j , int cpu ) ;
unsigned long round_jiffies_up ( unsigned long j ) ;
unsigned long round_jiffies_up_relative ( unsigned long j ) ;
void delayed_work_timer_fn ( unsigned long __data ) ;
extern struct workqueue_struct * __alloc_workqueue_key ( const char * fmt , unsigned int flags , int max_active , struct lock_class_key * key , const char * lock_name , ... ) __attribute__ ( ( format ( printf , 1 , 6 ) ) ) ;
extern void destroy_workqueue ( struct workqueue_struct * wq ) ;
extern bool queue_work_on ( int cpu , struct workqueue_struct * wq , struct work_struct * work ) ;
extern bool queue_work ( struct workqueue_struct * wq , struct work_struct * work ) ;
extern bool queue_delayed_work_on ( int cpu , struct workqueue_struct * wq , struct delayed_work * work , unsigned long delay ) ;
extern bool queue_delayed_work ( struct workqueue_struct * wq , struct delayed_work * work , unsigned long delay ) ;
extern bool mod_delayed_work_on ( int cpu , struct workqueue_struct * wq , struct delayed_work * dwork , unsigned long delay ) ;
extern bool mod_delayed_work ( struct workqueue_struct * wq , struct delayed_work * dwork , unsigned long delay ) ;
extern void flush_workqueue ( struct workqueue_struct * wq ) ;
extern void drain_workqueue ( struct workqueue_struct * wq ) ;
extern void flush_scheduled_work ( void ) ;
extern bool schedule_work_on ( int cpu , struct work_struct * work ) ;
extern bool schedule_work ( struct work_struct * work ) ;
extern bool schedule_delayed_work_on ( int cpu , struct delayed_work * work , unsigned long delay ) ;
extern bool schedule_delayed_work ( struct delayed_work * work , unsigned long delay ) ;
extern int schedule_on_each_cpu ( work_func_t func ) ;
extern int keventd_up ( void ) ;
int execute_in_process_context ( work_func_t fn , struct execute_work * ) ;
extern bool flush_work ( struct work_struct * work ) ;
extern bool cancel_work_sync ( struct work_struct * work ) ;
extern bool flush_delayed_work ( struct delayed_work * dwork ) ;
extern bool cancel_delayed_work ( struct delayed_work * dwork ) ;
extern bool cancel_delayed_work_sync ( struct delayed_work * dwork ) ;
extern void workqueue_set_max_active ( struct workqueue_struct * wq , int max_active ) ;
extern bool workqueue_congested ( unsigned int cpu , struct workqueue_struct * wq ) ;
extern unsigned int work_cpu ( struct work_struct * work ) ;
extern unsigned int work_busy ( struct work_struct * work ) ;
long work_on_cpu ( unsigned int cpu , long ( * fn ) ( void * ) , void * arg ) ;
extern void freeze_workqueues_begin ( void ) ;
extern bool freeze_workqueues_busy ( void ) ;
extern void thaw_workqueues ( void ) ;
int init_srcu_struct ( struct srcu_struct * sp ) ;
void process_srcu ( struct work_struct * work ) ;
void call_srcu ( struct srcu_struct * sp , struct callback_head * head , void ( * func ) ( struct callback_head * head ) ) ;
void cleanup_srcu_struct ( struct srcu_struct * sp ) ;
int __srcu_read_lock ( struct srcu_struct * sp ) ;
void __srcu_read_unlock ( struct srcu_struct * sp , int idx ) ;
void synchronize_srcu ( struct srcu_struct * sp ) ;
void synchronize_srcu_expedited ( struct srcu_struct * sp ) ;
long srcu_batches_completed ( struct srcu_struct * sp ) ;
void srcu_barrier ( struct srcu_struct * sp ) ;
extern void srcu_init_notifier_head ( struct srcu_notifier_head * nh ) ;
extern int atomic_notifier_chain_register ( struct atomic_notifier_head * nh , struct notifier_block * nb ) ;
extern int blocking_notifier_chain_register ( struct blocking_notifier_head * nh , struct notifier_block * nb ) ;
extern int raw_notifier_chain_register ( struct raw_notifier_head * nh , struct notifier_block * nb ) ;
extern int srcu_notifier_chain_register ( struct srcu_notifier_head * nh , struct notifier_block * nb ) ;
extern int blocking_notifier_chain_cond_register ( struct blocking_notifier_head * nh , struct notifier_block * nb ) ;
extern int atomic_notifier_chain_unregister ( struct atomic_notifier_head * nh , struct notifier_block * nb ) ;
extern int blocking_notifier_chain_unregister ( struct blocking_notifier_head * nh , struct notifier_block * nb ) ;
extern int raw_notifier_chain_unregister ( struct raw_notifier_head * nh , struct notifier_block * nb ) ;
extern int srcu_notifier_chain_unregister ( struct srcu_notifier_head * nh , struct notifier_block * nb ) ;
extern int atomic_notifier_call_chain ( struct atomic_notifier_head * nh , unsigned long val , void * v ) ;
extern int __atomic_notifier_call_chain ( struct atomic_notifier_head * nh , unsigned long val , void * v , int nr_to_call , int * nr_calls ) ;
extern int blocking_notifier_call_chain ( struct blocking_notifier_head * nh , unsigned long val , void * v ) ;
extern int __blocking_notifier_call_chain ( struct blocking_notifier_head * nh , unsigned long val , void * v , int nr_to_call , int * nr_calls ) ;
extern int raw_notifier_call_chain ( struct raw_notifier_head * nh , unsigned long val , void * v ) ;
extern int __raw_notifier_call_chain ( struct raw_notifier_head * nh , unsigned long val , void * v , int nr_to_call , int * nr_calls ) ;
extern int srcu_notifier_call_chain ( struct srcu_notifier_head * nh , unsigned long val , void * v ) ;
extern int __srcu_notifier_call_chain ( struct srcu_notifier_head * nh , unsigned long val , void * v , int nr_to_call , int * nr_calls ) ;
extern int zone_grow_free_lists ( struct zone * zone , unsigned long new_nr_pages ) ;
extern int zone_grow_waitqueues ( struct zone * zone , unsigned long nr_pages ) ;
extern int add_one_highpage ( struct page * page , int pfn , int bad_ppro ) ;
extern int online_pages ( unsigned long , unsigned long , int ) ;
extern void __offline_isolated_pages ( unsigned long , unsigned long ) ;
extern int set_online_page_callback ( online_page_callback_t callback ) ;
extern int restore_online_page_callback ( online_page_callback_t callback ) ;
extern void __online_page_set_limits ( struct page * page ) ;
extern void __online_page_increment_counters ( struct page * page ) ;
extern void __online_page_free ( struct page * page ) ;
extern bool is_pageblock_removable_nolock ( struct page * page ) ;
extern int __add_pages ( int nid , struct zone * zone , unsigned long start_pfn , unsigned long nr_pages ) ;
extern int __remove_pages ( struct zone * zone , unsigned long start_pfn , unsigned long nr_pages ) ;
extern int memory_add_physaddr_to_nid ( u64 start ) ;
void lock_memory_hotplug ( void ) ;
void unlock_memory_hotplug ( void ) ;
extern int is_mem_section_removable ( unsigned long pfn , unsigned long nr_pages ) ;
extern int mem_online_node ( int nid ) ;
extern int add_memory ( int nid , u64 start , u64 size ) ;
extern int arch_add_memory ( int nid , u64 start , u64 size ) ;
extern int offline_pages ( unsigned long start_pfn , unsigned long nr_pages ) ;
extern int offline_memory_block ( struct memory_block * mem ) ;
extern int remove_memory ( u64 start , u64 size ) ;
extern int sparse_add_one_section ( struct zone * zone , unsigned long start_pfn , int nr_pages ) ;
extern void sparse_remove_one_section ( struct zone * zone , struct mem_section * ms ) ;
extern struct page * sparse_decode_mem_map ( unsigned long coded_mem_map , unsigned long pnum ) ;
void build_all_zonelists ( pg_data_t * pgdat , struct zone * zone ) ;
void wakeup_kswapd ( struct zone * zone , int order , enum zone_type classzone_idx ) ;
bool zone_watermark_ok ( struct zone * z , int order , unsigned long mark , int classzone_idx , int alloc_flags ) ;
bool zone_watermark_ok_safe ( struct zone * z , int order , unsigned long mark , int classzone_idx , int alloc_flags ) ;
extern int init_currently_empty_zone ( struct zone * zone , unsigned long start_pfn , unsigned long size , enum memmap_context context ) ;
extern void lruvec_init ( struct lruvec * lruvec ) ;
void memory_present ( int nid , unsigned long start , unsigned long end ) ;
int min_free_kbytes_sysctl_handler ( struct ctl_table * , int , void * , size_t * , loff_t * ) ;
int lowmem_reserve_ratio_sysctl_handler ( struct ctl_table * , int , void * , size_t * , loff_t * ) ;
int percpu_pagelist_fraction_sysctl_handler ( struct ctl_table * , int , void * , size_t * , loff_t * ) ;
int sysctl_min_unmapped_ratio_sysctl_handler ( struct ctl_table * , int , void * , size_t * , loff_t * ) ;
int sysctl_min_slab_ratio_sysctl_handler ( struct ctl_table * , int , void * , size_t * , loff_t * ) ;
extern int numa_zonelist_order_handler ( struct ctl_table * , int , void * , size_t * , loff_t * ) ;
extern int e820_any_mapped ( u64 start , u64 end , unsigned type ) ;
extern int e820_all_mapped ( u64 start , u64 end , unsigned type ) ;
extern void e820_add_region ( u64 start , u64 size , int type ) ;
extern void e820_print_map ( char * who ) ;
extern int sanitize_e820_map ( struct e820entry * biosmap , int max_nr_map , u32 * pnr_map ) ;
extern u64 e820_update_range ( u64 start , u64 size , unsigned old_type , unsigned new_type ) ;
extern u64 e820_remove_range ( u64 start , u64 size , unsigned old_type , int checktype ) ;
extern void update_e820 ( void ) ;
extern void e820_setup_gap ( void ) ;
extern int e820_search_gap ( unsigned long * gapstart , unsigned long * gapsize , unsigned long start_addr , unsigned long long end_addr ) ;
extern void parse_e820_ext ( struct setup_data * data ) ;
extern void e820_mark_nosave_regions ( unsigned long limit_pfn ) ;
extern unsigned long e820_end_of_ram_pfn ( void ) ;
extern unsigned long e820_end_of_low_ram_pfn ( void ) ;
extern u64 early_reserve_e820 ( u64 sizet , u64 align ) ;
void memblock_x86_fill ( void ) ;
void memblock_find_dma_reserve ( void ) ;
extern void finish_e820_parsing ( void ) ;
extern void e820_reserve_resources ( void ) ;
extern void e820_reserve_resources_late ( void ) ;
extern void setup_memory_map ( void ) ;
extern char * default_machine_specific_memory_setup ( void ) ;
extern struct resource * request_resource_conflict ( struct resource * root , struct resource * new_ ) ;
extern int request_resource ( struct resource * root , struct resource * new_ ) ;
extern int release_resource ( struct resource * new_ ) ;
void release_child_resources ( struct resource * new_ ) ;
extern void reserve_region_with_split ( struct resource * root , resource_size_t start , resource_size_t end , const char * name ) ;
extern struct resource * insert_resource_conflict ( struct resource * parent , struct resource * new_ ) ;
extern int insert_resource ( struct resource * parent , struct resource * new_ ) ;
extern void insert_resource_expand_to_fit ( struct resource * root , struct resource * new_ ) ;
extern void arch_remove_reservations ( struct resource * avail ) ;
extern int allocate_resource ( struct resource * root , struct resource * new_ , resource_size_t size , resource_size_t min , resource_size_t max , resource_size_t align , resource_size_t ( * alignf ) ( void * , const struct resource * , resource_size_t , resource_size_t ) , void * alignf_data ) ;
struct resource * lookup_resource ( struct resource * root , resource_size_t start ) ;
int adjust_resource ( struct resource * res , resource_size_t start , resource_size_t size ) ;
resource_size_t resource_alignment ( struct resource * res ) ;
extern struct resource * __request_region ( struct resource * , resource_size_t start , resource_size_t n , const char * name , int flags ) ;
extern int __check_region ( struct resource * , resource_size_t , resource_size_t ) ;
extern void __release_region ( struct resource * , resource_size_t , resource_size_t ) ;
extern struct resource * __devm_request_region ( struct device * dev , struct resource * parent , resource_size_t start , resource_size_t n , const char * name ) ;
extern void __devm_release_region ( struct device * dev , struct resource * parent , resource_size_t start , resource_size_t n ) ;
extern int iomem_map_sanity_check ( resource_size_t addr , unsigned long size ) ;
extern int iomem_is_exclusive ( u64 addr ) ;
extern int walk_system_ram_range ( unsigned long start_pfn , unsigned long nr_pages , void * arg , int ( * func ) ( unsigned long , unsigned long , void * ) ) ;
extern void x86_init_noop ( void ) ;
extern void x86_init_uint_noop ( unsigned int unused ) ;
extern void early_reserve_e820_mpc_new ( void ) ;
extern int default_mpc_apic_id ( struct mpc_cpu * m ) ;
extern void default_smp_read_mpc_oem ( struct mpc_table * mpc ) ;
extern void default_mpc_oem_bus_info ( struct mpc_bus * m , char * str ) ;
extern void default_find_smp_config ( void ) ;
extern void default_get_smp_config ( unsigned int early ) ;
void __attribute__ ( ( __section__ ( ".cpuinit.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) generic_processor_info ( int apicid , int version ) ;
extern void mp_register_ioapic ( int id , u32 address , u32 gsi_base ) ;
extern void mp_override_legacy_irq ( u8 bus_irq , u8 polarity , u8 trigger , u32 gsi ) ;
extern void mp_config_acpi_legacy_irqs ( void ) ;
extern int mp_register_gsi ( struct device * dev , u32 gsi , int edge_level , int active_high_low ) ;
extern int generic_mps_oem_check ( struct mpc_table * , char * , char * ) ;
extern int default_acpi_madt_oem_check ( char * , char * ) ;
extern void update_pm_runtime_accounting ( struct device * dev ) ;
extern int dev_pm_get_subsys_data ( struct device * dev ) ;
extern int dev_pm_put_subsys_data ( struct device * dev ) ;
extern void device_pm_lock ( void ) ;
extern void dpm_resume_start ( pm_message_t state ) ;
extern void dpm_resume_end ( pm_message_t state ) ;
extern void dpm_resume ( pm_message_t state ) ;
extern void dpm_complete ( pm_message_t state ) ;
extern void device_pm_unlock ( void ) ;
extern int dpm_suspend_end ( pm_message_t state ) ;
extern int dpm_suspend_start ( pm_message_t state ) ;
extern int dpm_suspend ( pm_message_t state ) ;
extern int dpm_prepare ( pm_message_t state ) ;
extern void __suspend_report_result ( const char * function , void * fn , int ret ) ;
extern int device_pm_wait_for_dev ( struct device * sub , struct device * dev ) ;
extern void dpm_for_each_dev ( void * data , void ( * fn ) ( struct device * , void * ) ) ;
extern int pm_generic_prepare ( struct device * dev ) ;
extern int pm_generic_suspend_late ( struct device * dev ) ;
extern int pm_generic_suspend_noirq ( struct device * dev ) ;
extern int pm_generic_suspend ( struct device * dev ) ;
extern int pm_generic_resume_early ( struct device * dev ) ;
extern int pm_generic_resume_noirq ( struct device * dev ) ;
extern int pm_generic_resume ( struct device * dev ) ;
extern int pm_generic_freeze_noirq ( struct device * dev ) ;
extern int pm_generic_freeze_late ( struct device * dev ) ;
extern int pm_generic_freeze ( struct device * dev ) ;
extern int pm_generic_thaw_noirq ( struct device * dev ) ;
extern int pm_generic_thaw_early ( struct device * dev ) ;
extern int pm_generic_thaw ( struct device * dev ) ;
extern int pm_generic_restore_noirq ( struct device * dev ) ;
extern int pm_generic_restore_early ( struct device * dev ) ;
extern int pm_generic_restore ( struct device * dev ) ;
extern int pm_generic_poweroff_noirq ( struct device * dev ) ;
extern int pm_generic_poweroff_late ( struct device * dev ) ;
extern int pm_generic_poweroff ( struct device * dev ) ;
extern void pm_generic_complete ( struct device * dev ) ;
extern void setup_node_to_cpumask_map ( void ) ;
extern int __node_distance ( int , int ) ;
extern const struct cpumask * cpu_coregroup_mask ( int cpu ) ;
void x86_pci_root_bus_resources ( int bus , struct list_head * resources ) ;
extern int get_mp_bus_to_node ( int busnum ) ;
extern void set_mp_bus_to_node ( int busnum , int node ) ;
extern int __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) numa_add_memblk ( int nodeid , u64 start , u64 end ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) numa_set_distance ( int from , int to , int distance ) ;
extern int __attribute__ ( ( __section__ ( ".cpuinit.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) numa_cpu_node ( int cpu ) ;
extern unsigned long numa_free_all_bootmem ( void ) ;
extern void __attribute__ ( ( __section__ ( ".cpuinit.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) numa_set_node ( int cpu , int node ) ;
extern void __attribute__ ( ( __section__ ( ".cpuinit.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) numa_clear_node ( int cpu ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) init_cpu_to_node ( void ) ;
extern void __attribute__ ( ( __section__ ( ".cpuinit.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) numa_add_cpu ( int cpu ) ;
extern void __attribute__ ( ( __section__ ( ".cpuinit.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) numa_remove_cpu ( int cpu ) ;
void leave_mm ( int cpu ) ;
extern void * ioremap_nocache ( resource_size_t offset , unsigned long size ) ;
extern void * ioremap_cache ( resource_size_t offset , unsigned long size ) ;
extern void * ioremap_prot ( resource_size_t offset , unsigned long size , unsigned long prot_val ) ;
extern void iounmap ( volatile void * addr ) ;
extern void set_iounmap_nonlazy ( void ) ;
extern unsigned int ioread8 ( void * ) ;
extern unsigned int ioread16 ( void * ) ;
extern unsigned int ioread16be ( void * ) ;
extern unsigned int ioread32 ( void * ) ;
extern unsigned int ioread32be ( void * ) ;
extern void iowrite8 ( u8 , void * ) ;
extern void iowrite16 ( u16 , void * ) ;
extern void iowrite16be ( u16 , void * ) ;
extern void iowrite32 ( u32 , void * ) ;
extern void iowrite32be ( u32 , void * ) ;
extern void ioread8_rep ( void * port , void * buf , unsigned long count ) ;
extern void ioread16_rep ( void * port , void * buf , unsigned long count ) ;
extern void ioread32_rep ( void * port , void * buf , unsigned long count ) ;
extern void iowrite8_rep ( void * port , const void * buf , unsigned long count ) ;
extern void iowrite16_rep ( void * port , const void * buf , unsigned long count ) ;
extern void iowrite32_rep ( void * port , const void * buf , unsigned long count ) ;
extern void * ioport_map ( unsigned long port , unsigned int nr ) ;
extern void ioport_unmap ( void * ) ;
extern void pci_iounmap ( struct pci_dev * dev , void * ) ;
extern void * pci_iomap ( struct pci_dev * dev , int bar , unsigned long max ) ;
extern void vm_unmap_ram ( const void * mem , unsigned int count ) ;
extern void * vm_map_ram ( struct page * * pages , unsigned int count , int node , pgprot_t prot ) ;
extern void vm_unmap_aliases ( void ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) vmalloc_init ( void ) ;
extern void * vmalloc ( unsigned long size ) ;
extern void * vzalloc ( unsigned long size ) ;
extern void * vmalloc_user ( unsigned long size ) ;
extern void * vmalloc_node ( unsigned long size , int node ) ;
extern void * vzalloc_node ( unsigned long size , int node ) ;
extern void * vmalloc_exec ( unsigned long size ) ;
extern void * vmalloc_32 ( unsigned long size ) ;
extern void * vmalloc_32_user ( unsigned long size ) ;
extern void * __vmalloc ( unsigned long size , gfp_t gfp_mask , pgprot_t prot ) ;
extern void * __vmalloc_node_range ( unsigned long size , unsigned long align , unsigned long start , unsigned long end , gfp_t gfp_mask , pgprot_t prot , int node , const void * caller ) ;
extern void vfree ( const void * addr ) ;
extern void * vmap ( struct page * * pages , unsigned int count , unsigned long flags , pgprot_t prot ) ;
extern void vunmap ( const void * addr ) ;
extern int remap_vmalloc_range ( struct vm_area_struct * vma , void * addr , unsigned long pgoff ) ;
void vmalloc_sync_all ( void ) ;
extern struct vm_struct * get_vm_area ( unsigned long size , unsigned long flags ) ;
extern struct vm_struct * get_vm_area_caller ( unsigned long size , unsigned long flags , const void * caller ) ;
extern struct vm_struct * __get_vm_area ( unsigned long size , unsigned long flags , unsigned long start , unsigned long end ) ;
extern struct vm_struct * __get_vm_area_caller ( unsigned long size , unsigned long flags , unsigned long start , unsigned long end , const void * caller ) ;
extern struct vm_struct * remove_vm_area ( const void * addr ) ;
extern struct vm_struct * find_vm_area ( const void * addr ) ;
extern int map_vm_area ( struct vm_struct * area , pgprot_t prot , struct page * * * pages ) ;
extern int map_kernel_range_noflush ( unsigned long start , unsigned long size , pgprot_t prot , struct page * * pages ) ;
extern void unmap_kernel_range_noflush ( unsigned long addr , unsigned long size ) ;
extern void unmap_kernel_range ( unsigned long addr , unsigned long size ) ;
extern struct vm_struct * alloc_vm_area ( size_t size , pte_t * * ptes ) ;
extern void free_vm_area ( struct vm_struct * area ) ;
extern long vread ( char * buf , char * addr , unsigned long count ) ;
extern long vwrite ( char * buf , char * addr , unsigned long count ) ;
extern __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) void vm_area_add_early ( struct vm_struct * vm ) ;
extern __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) void vm_area_register_early ( struct vm_struct * vm , size_t align ) ;
struct vm_struct * * pcpu_get_vm_areas ( const unsigned long * offsets , const size_t * sizes , int nr_vms , size_t align ) ;
void pcpu_free_vm_areas ( struct vm_struct * * vms , int nr_vms ) ;
extern void native_io_delay ( void ) ;
extern void io_delay_init ( void ) ;
extern void * xlate_dev_mem_ptr ( unsigned long phys ) ;
extern void unxlate_dev_mem_ptr ( unsigned long phys , void * addr ) ;
extern int ioremap_change_attr ( unsigned long vaddr , unsigned long size , unsigned long prot_val ) ;
extern void * ioremap_wc ( resource_size_t offset , unsigned long size ) ;
extern void early_ioremap_init ( void ) ;
extern void early_ioremap_reset ( void ) ;
extern void * early_ioremap ( resource_size_t phys_addr , unsigned long size ) ;
extern void * early_memremap ( resource_size_t phys_addr , unsigned long size ) ;
extern void early_iounmap ( void * addr , unsigned long size ) ;
extern void fixup_early_ioremap ( void ) ;
extern bool is_early_ioremap_ptep ( pte_t * ptep ) ;
extern bool xen_hvm_need_lapic ( void ) ;
extern bool xen_biovec_phys_mergeable ( const struct bio_vec * vec1 , const struct bio_vec * vec2 ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) setup_real_mode ( void ) ;
int __acpi_acquire_global_lock ( unsigned int * lock ) ;
int __acpi_release_global_lock ( unsigned int * lock ) ;
void acpi_pic_sci_set_trigger ( unsigned int , u16 ) ;
extern int acpi_gsi_to_irq ( u32 gsi , unsigned int * irq ) ;
extern int acpi_suspend_lowlevel ( void ) ;
extern int x86_acpi_numa_init ( void ) ;
extern void timecounter_init ( struct timecounter * tc , const struct cyclecounter * cc , u64 start_tstamp ) ;
extern u64 timecounter_read ( struct timecounter * tc ) ;
extern u64 timecounter_cyc2time ( struct timecounter * tc , cycle_t cycle_tstamp ) ;
extern int clocksource_register ( struct clocksource * ) ;
extern void clocksource_unregister ( struct clocksource * ) ;
extern void clocksource_touch_watchdog ( void ) ;
extern struct clocksource * clocksource_get_next ( void ) ;
extern void clocksource_change_rating ( struct clocksource * cs , int rating ) ;
extern void clocksource_suspend ( void ) ;
extern void clocksource_resume ( void ) ;
extern struct clocksource * __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) __attribute__ ( ( weak ) ) clocksource_default_clock ( void ) ;
extern void clocksource_mark_unstable ( struct clocksource * cs ) ;
extern void clocks_calc_mult_shift ( u32 * mult , u32 * shift , u32 from , u32 to , u32 minsec ) ;
extern int __clocksource_register_scale ( struct clocksource * cs , u32 scale , u32 freq ) ;
extern void __clocksource_updatefreq_scale ( struct clocksource * cs , u32 scale , u32 freq ) ;
extern void timekeeping_notify ( struct clocksource * clock ) ;
extern cycle_t clocksource_mmio_readl_up ( struct clocksource * ) ;
extern cycle_t clocksource_mmio_readl_down ( struct clocksource * ) ;
extern cycle_t clocksource_mmio_readw_up ( struct clocksource * ) ;
extern cycle_t clocksource_mmio_readw_down ( struct clocksource * ) ;
extern int clocksource_mmio_init ( void * , const char * , unsigned long , int , unsigned , cycle_t ( * ) ( struct clocksource * ) ) ;
extern int clocksource_i8253_init ( void ) ;
cycle_t pvclock_clocksource_read ( struct pvclock_vcpu_time_info * src ) ;
u8 pvclock_read_flags ( struct pvclock_vcpu_time_info * src ) ;
void pvclock_set_flags ( u8 flags ) ;
unsigned long pvclock_tsc_khz ( struct pvclock_vcpu_time_info * src ) ;
void pvclock_read_wallclock ( struct pvclock_wall_clock * wall , struct pvclock_vcpu_time_info * vcpu , struct timespec * ts ) ;
void pvclock_resume ( void ) ;
int __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) pvclock_init_vsyscall ( struct pvclock_vsyscall_time_info * i , int size ) ;
struct pvclock_vcpu_time_info * pvclock_get_vsyscall_time_info ( int cpu ) ;
extern void reserve_top_address ( unsigned long reserve ) ;
void __native_set_fixmap ( enum fixed_addresses idx , pte_t pte ) ;
void native_set_fixmap ( enum fixed_addresses idx , phys_addr_t phys , pgprot_t flags ) ;
extern void __this_fixmap_does_not_exist ( void ) ;
extern void __inquire_remote_apic ( int apicid ) ;
extern int is_vsmp_box ( void ) ;
extern void xapic_wait_icr_idle ( void ) ;
extern u32 safe_xapic_wait_icr_idle ( void ) ;
extern void xapic_icr_write ( u32 , u32 ) ;
extern int setup_profiling_timer ( unsigned int ) ;
extern void native_apic_wait_icr_idle ( void ) ;
extern u32 native_safe_apic_wait_icr_idle ( void ) ;
extern void native_apic_icr_write ( u32 low , u32 id ) ;
extern u64 native_apic_icr_read ( void ) ;
extern void check_x2apic ( void ) ;
extern void enable_x2apic ( void ) ;
extern void x2apic_icr_write ( u32 low , u32 id ) ;
extern void enable_IR_x2apic ( void ) ;
extern int get_physical_broadcast ( void ) ;
extern int lapic_get_maxlvt ( void ) ;
extern void clear_local_APIC ( void ) ;
extern void connect_bsp_APIC ( void ) ;
extern void disconnect_bsp_APIC ( int virt_wire_setup ) ;
extern void disable_local_APIC ( void ) ;
extern void lapic_shutdown ( void ) ;
extern int verify_local_APIC ( void ) ;
extern void sync_Arb_IDs ( void ) ;
extern void init_bsp_APIC ( void ) ;
extern void setup_local_APIC ( void ) ;
extern void end_local_APIC_setup ( void ) ;
extern void bsp_end_local_APIC_setup ( void ) ;
extern void init_apic_mappings ( void ) ;
void register_lapic_address ( unsigned long address ) ;
extern void setup_boot_APIC_clock ( void ) ;
extern void setup_secondary_APIC_clock ( void ) ;
extern int APIC_init_uniprocessor ( void ) ;
extern int apic_force_enable ( unsigned long addr ) ;
extern int apic_is_clustered_box ( void ) ;
extern int setup_APIC_eilvt ( u8 lvt_off , u8 vector , u8 msg_type , u8 mask ) ;
extern int wakeup_secondary_cpu_via_nmi ( int apicid , unsigned long start_eip ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) apic_set_eoi_write ( void ( * eoi_write ) ( u32 reg , u32 v ) ) ;
extern int default_acpi_madt_oem_check ( char * , char * ) ;
extern void apic_send_IPI_self ( int vector ) ;
extern int default_cpu_present_to_apicid ( int mps_cpu ) ;
extern int default_check_phys_apicid_present ( int phys_apicid ) ;
extern void generic_bigsmp_probe ( void ) ;
extern void default_setup_apic_routing ( void ) ;
extern int default_cpu_mask_to_apicid_and ( const struct cpumask * cpumask , const struct cpumask * andmask , unsigned int * apicid ) ;
extern int default_cpu_present_to_apicid ( int mps_cpu ) ;
extern int default_check_phys_apicid_present ( int phys_apicid ) ;
extern int mpc_ioapic_id ( int ioapic ) ;
extern unsigned int mpc_ioapic_addr ( int ioapic ) ;
extern struct mp_ioapic_gsi * mp_ioapic_gsi_routing ( int ioapic ) ;
extern int io_apic_set_pci_routing ( struct device * dev , int irq , struct io_apic_irq_attr * irq_attr ) ;
void setup_IO_APIC_irq_extra ( u32 gsi ) ;
extern void ioapic_insert_resources ( void ) ;
int io_apic_setup_irq_pin_once ( unsigned int irq , int node , struct io_apic_irq_attr * attr ) ;
extern int save_ioapic_entries ( void ) ;
extern void mask_ioapic_entries ( void ) ;
extern int restore_ioapic_entries ( void ) ;
extern int get_nr_irqs_gsi ( void ) ;
extern void setup_ioapic_ids_from_mpc ( void ) ;
extern void setup_ioapic_ids_from_mpc_nocheck ( void ) ;
int mp_find_ioapic ( u32 gsi ) ;
int mp_find_ioapic_pin ( int ioapic , u32 gsi ) ;
void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) mp_register_ioapic ( int id , u32 address , u32 gsi_base ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) pre_init_apic_IRQ0 ( void ) ;
extern void mp_save_irq ( struct mpc_intsrc * m ) ;
extern void disable_ioapic_support ( void ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) native_io_apic_init_mappings ( void ) ;
extern unsigned int native_io_apic_read ( unsigned int apic , unsigned int reg ) ;
extern void native_io_apic_write ( unsigned int apic , unsigned int reg , unsigned int val ) ;
extern void native_io_apic_modify ( unsigned int apic , unsigned int reg , unsigned int val ) ;
extern void set_cpu_sibling_map ( int cpu ) ;
void cpu_disable_common ( void ) ;
void native_smp_prepare_boot_cpu ( void ) ;
void native_smp_prepare_cpus ( unsigned int max_cpus ) ;
void native_smp_cpus_done ( unsigned int max_cpus ) ;
int native_cpu_up ( unsigned int cpunum , struct task_struct * tidle ) ;
int native_cpu_disable ( void ) ;
void native_cpu_die ( unsigned int cpu ) ;
void native_play_dead ( void ) ;
void play_dead_common ( void ) ;
void wbinvd_on_cpu ( int cpu ) ;
int wbinvd_on_all_cpus ( void ) ;
void native_send_call_func_ipi ( const struct cpumask * mask ) ;
void native_send_call_func_single_ipi ( int cpu ) ;
void x86_idle_thread_init ( unsigned int cpu , struct task_struct * idle ) ;
void smp_store_boot_cpu_info ( void ) ;
void smp_store_cpu_info ( int id ) ;
extern int hard_smp_processor_id ( void ) ;
extern struct pglist_data * first_online_pgdat ( void ) ;
extern struct pglist_data * next_online_pgdat ( struct pglist_data * pgdat ) ;
extern struct zone * next_zone ( struct zone * zone ) ;
struct zoneref * next_zones_zonelist ( struct zoneref * z , enum zone_type highest_zoneidx , nodemask_t * nodes , struct zone * * zone ) ;
extern int __section_nr ( struct mem_section * ms ) ;
extern unsigned long usemap_size ( void ) ;
void sparse_init ( void ) ;
bool early_pfn_in_nid ( unsigned long pfn , int nid ) ;
void memory_present ( int nid , unsigned long start , unsigned long end ) ;
unsigned long __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) node_memmap_size_bytes ( int , unsigned long , unsigned long ) ;
extern void cpu_idle ( void ) ;
int smp_call_function_single ( int cpuid , smp_call_func_t func , void * info , int wait ) ;
extern void smp_send_stop ( void ) ;
extern void smp_send_reschedule ( int cpu ) ;
extern void smp_prepare_cpus ( unsigned int max_cpus ) ;
extern int __cpu_up ( unsigned int cpunum , struct task_struct * tidle ) ;
extern void smp_cpus_done ( unsigned int max_cpus ) ;
int smp_call_function ( smp_call_func_t func , void * info , int wait ) ;
void smp_call_function_many ( const struct cpumask * mask , smp_call_func_t func , void * info , bool wait ) ;
void __smp_call_function_single ( int cpuid , struct call_single_data * data , int wait ) ;
int smp_call_function_any ( const struct cpumask * mask , smp_call_func_t func , void * info , int wait ) ;
void kick_all_cpus_sync ( void ) ;
void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) call_function_init ( void ) ;
void generic_smp_call_function_single_interrupt ( void ) ;
void generic_smp_call_function_interrupt ( void ) ;
int on_each_cpu ( smp_call_func_t func , void * info , int wait ) ;
void on_each_cpu_mask ( const struct cpumask * mask , smp_call_func_t func , void * info , bool wait ) ;
void on_each_cpu_cond ( bool ( * cond_func ) ( int cpu , void * info ) , smp_call_func_t func , void * info , bool wait , gfp_t gfp_flags ) ;
void smp_prepare_boot_cpu ( void ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) setup_nr_cpu_ids ( void ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) smp_init ( void ) ;
extern void arch_disable_smp_support ( void ) ;
void smp_setup_processor_id ( void ) ;
extern struct pcpu_alloc_info * __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) pcpu_alloc_alloc_info ( int nr_groups , int nr_units ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) pcpu_free_alloc_info ( struct pcpu_alloc_info * ai ) ;
extern int __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) pcpu_setup_first_chunk ( const struct pcpu_alloc_info * ai , void * base_addr ) ;
extern int __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) pcpu_embed_first_chunk ( size_t reserved_size , size_t dyn_size , size_t atom_size , pcpu_fc_cpu_distance_fn_t cpu_distance_fn , pcpu_fc_alloc_fn_t alloc_fn , pcpu_fc_free_fn_t free_fn ) ;
extern int __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) pcpu_page_first_chunk ( size_t reserved_size , pcpu_fc_alloc_fn_t alloc_fn , pcpu_fc_free_fn_t free_fn , pcpu_fc_populate_pte_fn_t populate_pte_fn ) ;
extern void * __alloc_reserved_percpu ( size_t size , size_t align ) ;
extern bool is_kernel_percpu_address ( unsigned long addr ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) percpu_init_late ( void ) ;
extern void * __alloc_percpu ( size_t size , size_t align ) ;
extern void free_percpu ( void * __pdata ) ;
extern phys_addr_t per_cpu_ptr_to_phys ( void * addr ) ;
extern void __bad_size_call_parameter ( void ) ;
int arch_update_cpu_topology ( void ) ;
struct page * __alloc_pages_nodemask ( gfp_t gfp_mask , unsigned int order , struct zonelist * zonelist , nodemask_t * nodemask ) ;
extern struct page * alloc_pages_current ( gfp_t gfp_mask , unsigned order ) ;
extern struct page * alloc_pages_vma ( gfp_t gfp_mask , int order , struct vm_area_struct * vma , unsigned long addr , int node ) ;
extern unsigned long __get_free_pages ( gfp_t gfp_mask , unsigned int order ) ;
extern unsigned long get_zeroed_page ( gfp_t gfp_mask ) ;
void * alloc_pages_exact ( size_t size , gfp_t gfp_mask ) ;
void free_pages_exact ( void * virt , size_t size ) ;
void * alloc_pages_exact_nid ( int nid , size_t size , gfp_t gfp_mask ) ;
extern void __free_pages ( struct page * page , unsigned int order ) ;
extern void free_pages ( unsigned long addr , unsigned int order ) ;
extern void free_hot_cold_page ( struct page * page , int cold ) ;
extern void free_hot_cold_page_list ( struct list_head * list , int cold ) ;
extern void __free_memcg_kmem_pages ( struct page * page , unsigned int order ) ;
extern void free_memcg_kmem_pages ( unsigned long addr , unsigned int order ) ;
void page_alloc_init ( void ) ;
void drain_zone_pages ( struct zone * zone , struct per_cpu_pages * pcp ) ;
void drain_all_pages ( void ) ;
void drain_local_pages ( void * dummy ) ;
bool gfp_pfmemalloc_allowed ( gfp_t gfp_mask ) ;
extern void pm_restrict_gfp_mask ( void ) ;
extern void pm_restore_gfp_mask ( void ) ;
extern bool pm_suspended_storage ( void ) ;
extern void rb_insert_color ( struct rb_node * , struct rb_root * ) ;
extern void rb_erase ( struct rb_node * , struct rb_root * ) ;
extern struct rb_node * rb_next ( const struct rb_node * ) ;
extern struct rb_node * rb_prev ( const struct rb_node * ) ;
extern struct rb_node * rb_first ( const struct rb_root * ) ;
extern struct rb_node * rb_last ( const struct rb_root * ) ;
extern void rb_replace_node ( struct rb_node * victim , struct rb_node * new_ , struct rb_root * root ) ;
extern int proc_dostring ( struct ctl_table * , int , void * , size_t * , loff_t * ) ;
extern int proc_dointvec ( struct ctl_table * , int , void * , size_t * , loff_t * ) ;
extern int proc_dointvec_minmax ( struct ctl_table * , int , void * , size_t * , loff_t * ) ;
extern int proc_dointvec_jiffies ( struct ctl_table * , int , void * , size_t * , loff_t * ) ;
extern int proc_dointvec_userhz_jiffies ( struct ctl_table * , int , void * , size_t * , loff_t * ) ;
extern int proc_dointvec_ms_jiffies ( struct ctl_table * , int , void * , size_t * , loff_t * ) ;
extern int proc_doulongvec_minmax ( struct ctl_table * , int , void * , size_t * , loff_t * ) ;
extern int proc_doulongvec_ms_jiffies_minmax ( struct ctl_table * table , int , void * , size_t * , loff_t * ) ;
extern int proc_do_large_bitmap ( struct ctl_table * , int , void * , size_t * , loff_t * ) ;
void proc_sys_poll_notify ( struct ctl_table_poll * poll ) ;
extern void setup_sysctl_set ( struct ctl_table_set * p , struct ctl_table_root * root , int ( * is_seen ) ( struct ctl_table_set * ) ) ;
extern void retire_sysctl_set ( struct ctl_table_set * set ) ;
void register_sysctl_root ( struct ctl_table_root * root ) ;
struct ctl_table_header * __register_sysctl_table ( struct ctl_table_set * set , const char * path , struct ctl_table * table ) ;
struct ctl_table_header * __register_sysctl_paths ( struct ctl_table_set * set , const struct ctl_path * path , struct ctl_table * table ) ;
struct ctl_table_header * register_sysctl ( const char * path , struct ctl_table * table ) ;
struct ctl_table_header * register_sysctl_table ( struct ctl_table * table ) ;
struct ctl_table_header * register_sysctl_paths ( const struct ctl_path * path , struct ctl_table * table ) ;
void unregister_sysctl_table ( struct ctl_table_header * table ) ;
extern int sysctl_init ( void ) ;
extern __attribute__ ( ( format ( printf , 2 , 3 ) ) ) int __request_module ( bool wait , const char * name , ... ) ;
extern int call_usermodehelper_fns ( char * path , char * * argv , char * * envp , int wait , int ( * init ) ( struct subprocess_info * info , struct cred * new_ ) , void ( * cleanup ) ( struct subprocess_info * ) , void * data ) ;
extern void usermodehelper_init ( void ) ;
extern int __usermodehelper_disable ( enum umh_disable_depth depth ) ;
extern void __usermodehelper_set_disable_depth ( enum umh_disable_depth depth ) ;
extern int usermodehelper_read_trylock ( void ) ;
extern long usermodehelper_read_lock_wait ( long timeout ) ;
extern void usermodehelper_read_unlock ( void ) ;
void start_thread_ia32 ( struct pt_regs * regs , u32 new_ip , u32 new_sp ) ;
void set_personality_ia32 ( bool ) ;
extern void set_personality_64bit ( void ) ;
extern int arch_setup_additional_pages ( struct linux_binprm * bprm , int uses_interp ) ;
extern int x32_setup_additional_pages ( struct linux_binprm * bprm , int uses_interp ) ;
extern int syscall32_setup_pages ( struct linux_binprm * , int exstack ) ;
extern unsigned long arch_randomize_brk ( struct mm_struct * mm ) ;
extern unsigned long align_vdso_addr ( unsigned long ) ;
int kobj_ns_type_register ( const struct kobj_ns_type_operations * ops ) ;
int kobj_ns_type_registered ( enum kobj_ns_type type ) ;
const struct kobj_ns_type_operations * kobj_child_ns_ops ( struct kobject * parent ) ;
const struct kobj_ns_type_operations * kobj_ns_ops ( struct kobject * kobj ) ;
void * kobj_ns_grab_current ( enum kobj_ns_type type ) ;
const void * kobj_ns_netlink ( enum kobj_ns_type type , struct sock * sk ) ;
const void * kobj_ns_initial ( enum kobj_ns_type type ) ;
void kobj_ns_drop ( enum kobj_ns_type type , void * ns ) ;
int sysfs_schedule_callback ( struct kobject * kobj , void ( * func ) ( void * ) , void * data , struct module * owner ) ;
int sysfs_create_dir ( struct kobject * kobj ) ;
void sysfs_remove_dir ( struct kobject * kobj ) ;
int sysfs_rename_dir ( struct kobject * kobj , const char * new_name ) ;
int sysfs_move_dir ( struct kobject * kobj , struct kobject * new_parent_kobj ) ;
int sysfs_create_file ( struct kobject * kobj , const struct attribute * attr ) ;
int sysfs_create_files ( struct kobject * kobj , const struct attribute * * attr ) ;
int sysfs_chmod_file ( struct kobject * kobj , const struct attribute * attr , umode_t mode ) ;
void sysfs_remove_file ( struct kobject * kobj , const struct attribute * attr ) ;
void sysfs_remove_files ( struct kobject * kobj , const struct attribute * * attr ) ;
int sysfs_create_bin_file ( struct kobject * kobj , const struct bin_attribute * attr ) ;
void sysfs_remove_bin_file ( struct kobject * kobj , const struct bin_attribute * attr ) ;
int sysfs_create_link ( struct kobject * kobj , struct kobject * target , const char * name ) ;
int sysfs_create_link_nowarn ( struct kobject * kobj , struct kobject * target , const char * name ) ;
void sysfs_remove_link ( struct kobject * kobj , const char * name ) ;
int sysfs_rename_link ( struct kobject * kobj , struct kobject * target , const char * old_name , const char * new_name ) ;
void sysfs_delete_link ( struct kobject * dir , struct kobject * targ , const char * name ) ;
int sysfs_create_group ( struct kobject * kobj , const struct attribute_group * grp ) ;
int sysfs_update_group ( struct kobject * kobj , const struct attribute_group * grp ) ;
void sysfs_remove_group ( struct kobject * kobj , const struct attribute_group * grp ) ;
int sysfs_add_file_to_group ( struct kobject * kobj , const struct attribute * attr , const char * group ) ;
void sysfs_remove_file_from_group ( struct kobject * kobj , const struct attribute * attr , const char * group ) ;
int sysfs_merge_group ( struct kobject * kobj , const struct attribute_group * grp ) ;
void sysfs_unmerge_group ( struct kobject * kobj , const struct attribute_group * grp ) ;
void sysfs_notify ( struct kobject * kobj , const char * dir , const char * attr ) ;
void sysfs_notify_dirent ( struct sysfs_dirent * sd ) ;
struct sysfs_dirent * sysfs_get_dirent ( struct sysfs_dirent * parent_sd , const void * ns , const unsigned char * name ) ;
struct sysfs_dirent * sysfs_get ( struct sysfs_dirent * sd ) ;
void sysfs_put ( struct sysfs_dirent * sd ) ;
int sysfs_init ( void ) ;
extern __attribute__ ( ( format ( printf , 2 , 3 ) ) ) int kobject_set_name ( struct kobject * kobj , const char * name , ... ) ;
extern int kobject_set_name_vargs ( struct kobject * kobj , const char * fmt , va_list vargs ) ;
extern void kobject_init ( struct kobject * kobj , struct kobj_type * ktype ) ;
extern __attribute__ ( ( format ( printf , 3 , 4 ) ) ) int kobject_add ( struct kobject * kobj , struct kobject * parent , const char * fmt , ... ) ;
extern __attribute__ ( ( format ( printf , 4 , 5 ) ) ) int kobject_init_and_add ( struct kobject * kobj , struct kobj_type * ktype , struct kobject * parent , const char * fmt , ... ) ;
extern void kobject_del ( struct kobject * kobj ) ;
extern struct kobject * kobject_create ( void ) ;
extern struct kobject * kobject_create_and_add ( const char * name , struct kobject * parent ) ;
extern int kobject_rename ( struct kobject * , const char * new_name ) ;
extern int kobject_move ( struct kobject * , struct kobject * ) ;
extern struct kobject * kobject_get ( struct kobject * kobj ) ;
extern void kobject_put ( struct kobject * kobj ) ;
extern char * kobject_get_path ( struct kobject * kobj , gfp_t flag ) ;
extern void kset_init ( struct kset * kset ) ;
extern int kset_register ( struct kset * kset ) ;
extern void kset_unregister ( struct kset * kset ) ;
extern struct kset * kset_create_and_add ( const char * name , const struct kset_uevent_ops * u , struct kobject * parent_kobj ) ;
extern struct kobject * kset_find_obj ( struct kset * , const char * ) ;
int kobject_uevent ( struct kobject * kobj , enum kobject_action action ) ;
int kobject_uevent_env ( struct kobject * kobj , enum kobject_action action , char * envp [ ] ) ;
__attribute__ ( ( format ( printf , 2 , 3 ) ) ) int add_uevent_var ( struct kobj_uevent_env * env , const char * format , ... ) ;
int kobject_action_type ( const char * buf , size_t count , enum kobject_action * type ) ;
extern void __kernel_param_lock ( void ) ;
extern void __kernel_param_unlock ( void ) ;
extern bool parameq ( const char * name1 , const char * name2 ) ;
extern bool parameqn ( const char * name1 , const char * name2 , size_t n ) ;
extern int parse_args ( const char * name , char * args , const struct kernel_param * params , unsigned num , s16 level_min , s16 level_max , int ( * unknown ) ( char * param , char * val , const char * doing ) ) ;
extern void destroy_params ( const struct kernel_param * params , unsigned num ) ;
extern int param_set_byte ( const char * val , const struct kernel_param * kp ) ;
extern int param_get_byte ( char * buffer , const struct kernel_param * kp ) ;
extern int param_set_short ( const char * val , const struct kernel_param * kp ) ;
extern int param_get_short ( char * buffer , const struct kernel_param * kp ) ;
extern int param_set_ushort ( const char * val , const struct kernel_param * kp ) ;
extern int param_get_ushort ( char * buffer , const struct kernel_param * kp ) ;
extern int param_set_int ( const char * val , const struct kernel_param * kp ) ;
extern int param_get_int ( char * buffer , const struct kernel_param * kp ) ;
extern int param_set_uint ( const char * val , const struct kernel_param * kp ) ;
extern int param_get_uint ( char * buffer , const struct kernel_param * kp ) ;
extern int param_set_long ( const char * val , const struct kernel_param * kp ) ;
extern int param_get_long ( char * buffer , const struct kernel_param * kp ) ;
extern int param_set_ulong ( const char * val , const struct kernel_param * kp ) ;
extern int param_get_ulong ( char * buffer , const struct kernel_param * kp ) ;
extern int param_set_charp ( const char * val , const struct kernel_param * kp ) ;
extern int param_get_charp ( char * buffer , const struct kernel_param * kp ) ;
extern int param_set_bool ( const char * val , const struct kernel_param * kp ) ;
extern int param_get_bool ( char * buffer , const struct kernel_param * kp ) ;
extern int param_set_invbool ( const char * val , const struct kernel_param * kp ) ;
extern int param_get_invbool ( char * buffer , const struct kernel_param * kp ) ;
extern int param_set_bint ( const char * val , const struct kernel_param * kp ) ;
extern int param_set_copystring ( const char * val , const struct kernel_param * ) ;
extern int param_get_string ( char * buffer , const struct kernel_param * kp ) ;
extern int module_param_sysfs_setup ( struct module * mod , const struct kernel_param * kparam , unsigned int num_params ) ;
extern void module_param_sysfs_remove ( struct module * mod ) ;
extern int tracepoint_probe_register ( const char * name , void * probe , void * data ) ;
extern int tracepoint_probe_unregister ( const char * name , void * probe , void * data ) ;
extern int tracepoint_probe_register_noupdate ( const char * name , void * probe , void * data ) ;
extern int tracepoint_probe_unregister_noupdate ( const char * name , void * probe , void * data ) ;
extern void tracepoint_probe_update_all ( void ) ;
extern void tracepoint_iter_start ( struct tracepoint_iter * iter ) ;
extern void tracepoint_iter_next ( struct tracepoint_iter * iter ) ;
extern void tracepoint_iter_stop ( struct tracepoint_iter * iter ) ;
extern void tracepoint_iter_reset ( struct tracepoint_iter * iter ) ;
extern ssize_t __modver_version_show ( struct module_attribute * , struct module_kobject * , char * ) ;
extern int init_module ( void ) ;
extern void cleanup_module ( void ) ;
const struct exception_table_entry * search_extable ( const struct exception_table_entry * first , const struct exception_table_entry * last , unsigned long value ) ;
void sort_extable ( struct exception_table_entry * start , struct exception_table_entry * finish ) ;
void sort_main_extable ( void ) ;
void trim_init_extable ( struct module * m ) ;
const struct exception_table_entry * search_exception_tables ( unsigned long add ) ;
void * __symbol_get ( const char * symbol ) ;
void * __symbol_get_gpl ( const char * symbol ) ;
struct module * __module_text_address ( unsigned long addr ) ;
struct module * __module_address ( unsigned long addr ) ;
bool is_module_address ( unsigned long addr ) ;
bool is_module_percpu_address ( unsigned long addr ) ;
bool is_module_text_address ( unsigned long addr ) ;
struct module * find_module ( const char * name ) ;
const struct kernel_symbol * find_symbol ( const char * name , struct module * * owner , const unsigned long * * crc , bool gplok , bool warn ) ;
bool each_symbol_section ( bool ( * fn ) ( const struct symsearch * arr , struct module * owner , void * data ) , void * data ) ;
int module_get_kallsym ( unsigned int symnum , unsigned long * value , char * type , char * name , char * module_name , int * exported ) ;
unsigned long module_kallsyms_lookup_name ( const char * name ) ;
int module_kallsyms_on_each_symbol ( int ( * fn ) ( void * , const char * , struct module * , unsigned long ) , void * data ) ;
extern void __module_put_and_exit ( struct module * mod , long code ) __attribute__ ( ( noreturn ) ) ;
unsigned long module_refcount ( struct module * mod ) ;
void __symbol_put ( const char * symbol ) ;
void symbol_put_addr ( void * addr ) ;
extern void __module_get ( struct module * module ) ;
extern bool try_module_get ( struct module * module ) ;
extern void module_put ( struct module * module ) ;
int ref_module ( struct module * a , struct module * b ) ;
const char * module_address_lookup ( unsigned long addr , unsigned long * symbolsize , unsigned long * offset , char * * modname , char * namebuf ) ;
int lookup_module_symbol_name ( unsigned long addr , char * symname ) ;
int lookup_module_symbol_attrs ( unsigned long addr , unsigned long * size , unsigned long * offset , char * modname , char * name ) ;
const struct exception_table_entry * search_module_extables ( unsigned long addr ) ;
int register_module_notifier ( struct notifier_block * nb ) ;
int unregister_module_notifier ( struct notifier_block * nb ) ;
extern void print_modules ( void ) ;
extern void set_all_modules_text_rw ( void ) ;
extern void set_all_modules_text_ro ( void ) ;
void module_bug_finalize ( const Elf64_Ehdr * , const Elf64_Shdr * , struct module * ) ;
void module_bug_cleanup ( struct module * ) ;
extern void timerqueue_add ( struct timerqueue_head * head , struct timerqueue_node * node ) ;
extern void timerqueue_del ( struct timerqueue_head * head , struct timerqueue_node * node ) ;
extern struct timerqueue_node * timerqueue_iterate_next ( struct timerqueue_node * node ) ;
extern void hrtimer_interrupt ( struct clock_event_device * dev ) ;
extern void hrtimer_peek_ahead_timers ( void ) ;
extern void clock_was_set_delayed ( void ) ;
extern void clock_was_set ( void ) ;
extern void timerfd_clock_was_set ( void ) ;
extern void hrtimers_resume ( void ) ;
extern ktime_t ktime_get ( void ) ;
extern ktime_t ktime_get_real ( void ) ;
extern ktime_t ktime_get_boottime ( void ) ;
extern ktime_t ktime_get_monotonic_offset ( void ) ;
extern ktime_t ktime_get_update_offsets ( ktime_t * offs_real , ktime_t * offs_boot ) ;
extern void hrtimer_init ( struct hrtimer * timer , clockid_t which_clock , enum hrtimer_mode mode ) ;
extern int hrtimer_start ( struct hrtimer * timer , ktime_t tim , const enum hrtimer_mode mode ) ;
extern int hrtimer_start_range_ns ( struct hrtimer * timer , ktime_t tim , unsigned long range_ns , const enum hrtimer_mode mode ) ;
extern int __hrtimer_start_range_ns ( struct hrtimer * timer , ktime_t tim , unsigned long delta_ns , const enum hrtimer_mode mode , int wakeup ) ;
extern int hrtimer_cancel ( struct hrtimer * timer ) ;
extern int hrtimer_try_to_cancel ( struct hrtimer * timer ) ;
extern ktime_t hrtimer_get_remaining ( const struct hrtimer * timer ) ;
extern int hrtimer_get_res ( const clockid_t which_clock , struct timespec * tp ) ;
extern ktime_t hrtimer_get_next_event ( void ) ;
extern u64 hrtimer_forward ( struct hrtimer * timer , ktime_t now , ktime_t interval ) ;
extern long hrtimer_nanosleep ( struct timespec * rqtp , struct timespec * rmtp , const enum hrtimer_mode mode , const clockid_t clockid ) ;
extern long hrtimer_nanosleep_restart ( struct restart_block * restart_block ) ;
extern void hrtimer_init_sleeper ( struct hrtimer_sleeper * sl , struct task_struct * tsk ) ;
extern int schedule_hrtimeout_range ( ktime_t * expires , unsigned long delta , const enum hrtimer_mode mode ) ;
extern int schedule_hrtimeout_range_clock ( ktime_t * expires , unsigned long delta , const enum hrtimer_mode mode , int clock ) ;
extern int schedule_hrtimeout ( ktime_t * expires , const enum hrtimer_mode mode ) ;
extern void hrtimer_run_queues ( void ) ;
extern void hrtimer_run_pending ( void ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) hrtimers_init ( void ) ;
extern void sysrq_timer_list_show ( void ) ;
extern unsigned int full_name_hash ( const unsigned char * , unsigned int ) ;
extern void d_instantiate ( struct dentry * , struct inode * ) ;
extern struct dentry * d_instantiate_unique ( struct dentry * , struct inode * ) ;
extern struct dentry * d_materialise_unique ( struct dentry * , struct inode * ) ;
extern void __d_drop ( struct dentry * dentry ) ;
extern void d_drop ( struct dentry * dentry ) ;
extern void d_delete ( struct dentry * ) ;
extern void d_set_d_op ( struct dentry * dentry , const struct dentry_operations * op ) ;
extern struct dentry * d_alloc ( struct dentry * , const struct qstr * ) ;
extern struct dentry * d_alloc_pseudo ( struct super_block * , const struct qstr * ) ;
extern struct dentry * d_splice_alias ( struct inode * , struct dentry * ) ;
extern struct dentry * d_add_ci ( struct dentry * , struct inode * , struct qstr * ) ;
extern struct dentry * d_find_any_alias ( struct inode * inode ) ;
extern struct dentry * d_obtain_alias ( struct inode * ) ;
extern void shrink_dcache_sb ( struct super_block * ) ;
extern void shrink_dcache_parent ( struct dentry * ) ;
extern void shrink_dcache_for_umount ( struct super_block * ) ;
extern int d_invalidate ( struct dentry * ) ;
extern struct dentry * d_make_root ( struct inode * ) ;
extern void d_genocide ( struct dentry * ) ;
extern struct dentry * d_find_alias ( struct inode * ) ;
extern void d_prune_aliases ( struct inode * ) ;
extern int have_submounts ( struct dentry * ) ;
extern void d_rehash ( struct dentry * ) ;
extern void dentry_update_name_case ( struct dentry * , struct qstr * ) ;
extern void d_move ( struct dentry * , struct dentry * ) ;
extern struct dentry * d_ancestor ( struct dentry * , struct dentry * ) ;
extern struct dentry * d_lookup ( struct dentry * , struct qstr * ) ;
extern struct dentry * d_hash_and_lookup ( struct dentry * , struct qstr * ) ;
extern struct dentry * __d_lookup ( struct dentry * , struct qstr * ) ;
extern struct dentry * __d_lookup_rcu ( const struct dentry * parent , const struct qstr * name , unsigned * seq , struct inode * inode ) ;
extern int d_validate ( struct dentry * , struct dentry * ) ;
extern char * dynamic_dname ( struct dentry * , char * , int , const char * , ... ) ;
extern char * __d_path ( const struct path * , const struct path * , char * , int ) ;
extern char * d_absolute_path ( const struct path * , char * , int ) ;
extern char * d_path ( const struct path * , char * , int ) ;
extern char * d_path_with_unreachable ( const struct path * , char * , int ) ;
extern char * dentry_path_raw ( struct dentry * , char * , int ) ;
extern char * dentry_path ( struct dentry * , char * , int ) ;
extern struct dentry * dget_parent ( struct dentry * dentry ) ;
extern void dput ( struct dentry * ) ;
extern void path_get ( struct path * ) ;
extern void path_put ( struct path * ) ;
int radix_tree_insert ( struct radix_tree_root * , unsigned long , void * ) ;
void * radix_tree_lookup ( struct radix_tree_root * , unsigned long ) ;
void * * radix_tree_lookup_slot ( struct radix_tree_root * , unsigned long ) ;
void * radix_tree_delete ( struct radix_tree_root * , unsigned long ) ;
unsigned int radix_tree_gang_lookup ( struct radix_tree_root * root , void * * results , unsigned long first_index , unsigned int max_items ) ;
unsigned int radix_tree_gang_lookup_slot ( struct radix_tree_root * root , void * * * results , unsigned long * indices , unsigned long first_index , unsigned int max_items ) ;
unsigned long radix_tree_next_hole ( struct radix_tree_root * root , unsigned long index , unsigned long max_scan ) ;
unsigned long radix_tree_prev_hole ( struct radix_tree_root * root , unsigned long index , unsigned long max_scan ) ;
int radix_tree_preload ( gfp_t gfp_mask ) ;
void radix_tree_init ( void ) ;
void * radix_tree_tag_set ( struct radix_tree_root * root , unsigned long index , unsigned int tag ) ;
void * radix_tree_tag_clear ( struct radix_tree_root * root , unsigned long index , unsigned int tag ) ;
int radix_tree_tag_get ( struct radix_tree_root * root , unsigned long index , unsigned int tag ) ;
unsigned int radix_tree_gang_lookup_tag ( struct radix_tree_root * root , void * * results , unsigned long first_index , unsigned int max_items , unsigned int tag ) ;
unsigned int radix_tree_gang_lookup_tag_slot ( struct radix_tree_root * root , void * * * results , unsigned long first_index , unsigned int max_items , unsigned int tag ) ;
unsigned long radix_tree_range_tag_if_tagged ( struct radix_tree_root * root , unsigned long * first_indexp , unsigned long last_index , unsigned long nr_to_tag , unsigned int fromtag , unsigned int totag ) ;
int radix_tree_tagged ( struct radix_tree_root * root , unsigned int tag ) ;
unsigned long radix_tree_locate_item ( struct radix_tree_root * root , void * item ) ;
void * * radix_tree_next_chunk ( struct radix_tree_root * root , struct radix_tree_iter * iter , unsigned flags ) ;
extern void put_pid ( struct pid * pid ) ;
extern struct task_struct * pid_task ( struct pid * pid , enum pid_type ) ;
extern struct task_struct * get_pid_task ( struct pid * pid , enum pid_type ) ;
extern struct pid * get_task_pid ( struct task_struct * task , enum pid_type type ) ;
extern void attach_pid ( struct task_struct * task , enum pid_type type , struct pid * pid ) ;
extern void detach_pid ( struct task_struct * task , enum pid_type ) ;
extern void change_pid ( struct task_struct * task , enum pid_type , struct pid * pid ) ;
extern void transfer_pid ( struct task_struct * old , struct task_struct * new_ , enum pid_type ) ;
extern struct pid * find_pid_ns ( int nr , struct pid_namespace * ns ) ;
extern struct pid * find_vpid ( int nr ) ;
extern struct pid * find_get_pid ( int nr ) ;
extern struct pid * find_ge_pid ( int nr , struct pid_namespace * ) ;
int next_pidmap ( struct pid_namespace * pid_ns , unsigned int last ) ;
extern struct pid * alloc_pid ( struct pid_namespace * ns ) ;
extern void free_pid ( struct pid * pid ) ;
extern void disable_pid_allocation ( struct pid_namespace * ns ) ;
pid_t pid_nr_ns ( struct pid * pid , struct pid_namespace * ns ) ;
pid_t pid_vnr ( struct pid * pid ) ;
struct user_namespace * current_user_ns ( void ) ;
extern bool has_capability ( struct task_struct * t , int cap ) ;
extern bool has_ns_capability ( struct task_struct * t , struct user_namespace * ns , int cap ) ;
extern bool has_capability_noaudit ( struct task_struct * t , int cap ) ;
extern bool has_ns_capability_noaudit ( struct task_struct * t , struct user_namespace * ns , int cap ) ;
extern bool capable ( int cap ) ;
extern bool ns_capable ( struct user_namespace * ns , int cap ) ;
extern bool nsown_capable ( int cap ) ;
extern bool inode_capable ( const struct inode * inode , int cap ) ;
extern int get_vfs_caps_from_disk ( const struct dentry * dentry , struct cpu_vfs_cap_data * cpu_caps ) ;
extern void down ( struct semaphore * sem ) ;
extern int down_interruptible ( struct semaphore * sem ) ;
extern int down_killable ( struct semaphore * sem ) ;
extern int down_trylock ( struct semaphore * sem ) ;
extern int down_timeout ( struct semaphore * sem , long jiffies ) ;
extern void up ( struct semaphore * sem ) ;
extern void register_shrinker ( struct shrinker * ) ;
extern void unregister_shrinker ( struct shrinker * ) ;
extern void percpu_down_read ( struct percpu_rw_semaphore * ) ;
extern void percpu_up_read ( struct percpu_rw_semaphore * ) ;
extern void percpu_down_write ( struct percpu_rw_semaphore * ) ;
extern void percpu_up_write ( struct percpu_rw_semaphore * ) ;
extern int __percpu_init_rwsem ( struct percpu_rw_semaphore * , const char * , struct lock_class_key * ) ;
extern void percpu_free_rwsem ( struct percpu_rw_semaphore * ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) inode_init ( void ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) inode_init_early ( void ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) files_init ( unsigned long ) ;
extern unsigned long get_max_files ( void ) ;
int __percpu_counter_init ( struct percpu_counter * fbc , s64 amount , struct lock_class_key * key ) ;
void percpu_counter_destroy ( struct percpu_counter * fbc ) ;
void percpu_counter_set ( struct percpu_counter * fbc , s64 amount ) ;
void __percpu_counter_add ( struct percpu_counter * fbc , s64 amount , s32 batch ) ;
s64 __percpu_counter_sum ( struct percpu_counter * fbc ) ;
int percpu_counter_compare ( struct percpu_counter * fbc , s64 rhs ) ;
int qtree_write_dquot ( struct qtree_mem_dqinfo * info , struct dquot * dquot ) ;
int qtree_read_dquot ( struct qtree_mem_dqinfo * info , struct dquot * dquot ) ;
int qtree_delete_dquot ( struct qtree_mem_dqinfo * info , struct dquot * dquot ) ;
int qtree_release_dquot ( struct qtree_mem_dqinfo * info , struct dquot * dquot ) ;
int qtree_entry_unused ( struct qtree_mem_dqinfo * info , char * disk ) ;
extern bool qid_eq ( struct kqid left , struct kqid right ) ;
extern bool qid_lt ( struct kqid left , struct kqid right ) ;
extern qid_t from_kqid ( struct user_namespace * to , struct kqid qid ) ;
extern qid_t from_kqid_munged ( struct user_namespace * to , struct kqid qid ) ;
extern bool qid_valid ( struct kqid qid ) ;
extern void mark_info_dirty ( struct super_block * sb , int type ) ;
extern void quota_send_warning ( struct kqid qid , dev_t dev , const char warntype ) ;
int register_quota_format ( struct quota_format_type * fmt ) ;
void unregister_quota_format ( struct quota_format_type * fmt ) ;
size_t iov_iter_copy_from_user_atomic ( struct page * page , struct iov_iter * i , unsigned long offset , size_t bytes ) ;
size_t iov_iter_copy_from_user ( struct page * page , struct iov_iter * i , unsigned long offset , size_t bytes ) ;
void iov_iter_advance ( struct iov_iter * i , size_t bytes ) ;
int iov_iter_fault_in_readable ( struct iov_iter * i , size_t bytes ) ;
size_t iov_iter_single_seg_count ( struct iov_iter * i ) ;
int pagecache_write_begin ( struct file * , struct address_space * mapping , loff_t pos , unsigned len , unsigned flags , struct page * * pagep , void * * fsdata ) ;
int pagecache_write_end ( struct file * , struct address_space * mapping , loff_t pos , unsigned len , unsigned copied , struct page * page , void * fsdata ) ;
int mapping_tagged ( struct address_space * mapping , int tag ) ;
extern struct block_device * I_BDEV ( struct inode * inode ) ;
void locks_start_grace ( struct net * , struct lock_manager * ) ;
void locks_end_grace ( struct lock_manager * ) ;
int locks_in_grace ( struct net * ) ;
extern void send_sigio ( struct fown_struct * fown , int fd , int band ) ;
extern int fcntl_getlk ( struct file * , struct flock * ) ;
extern int fcntl_setlk ( unsigned int , struct file * , unsigned int , struct flock * ) ;
extern int fcntl_setlease ( unsigned int fd , struct file * filp , long arg ) ;
extern int fcntl_getlease ( struct file * filp ) ;
void locks_free_lock ( struct file_lock * fl ) ;
extern void locks_init_lock ( struct file_lock * ) ;
extern struct file_lock * locks_alloc_lock ( void ) ;
extern void locks_copy_lock ( struct file_lock * , struct file_lock * ) ;
extern void __locks_copy_lock ( struct file_lock * , const struct file_lock * ) ;
extern void locks_remove_posix ( struct file * , fl_owner_t ) ;
extern void locks_remove_flock ( struct file * ) ;
extern void locks_release_private ( struct file_lock * ) ;
extern void posix_test_lock ( struct file * , struct file_lock * ) ;
extern int posix_lock_file ( struct file * , struct file_lock * , struct file_lock * ) ;
extern int posix_lock_file_wait ( struct file * , struct file_lock * ) ;
extern int posix_unblock_lock ( struct file * , struct file_lock * ) ;
extern int vfs_test_lock ( struct file * , struct file_lock * ) ;
extern int vfs_lock_file ( struct file * , unsigned int , struct file_lock * , struct file_lock * ) ;
extern int vfs_cancel_lock ( struct file * filp , struct file_lock * fl ) ;
extern int flock_lock_file_wait ( struct file * filp , struct file_lock * fl ) ;
extern int __break_lease ( struct inode * inode , unsigned int flags ) ;
extern void lease_get_mtime ( struct inode * , struct timespec * time ) ;
extern int generic_setlease ( struct file * , long , struct file_lock * * ) ;
extern int vfs_setlease ( struct file * , long , struct file_lock * * ) ;
extern int lease_modify ( struct file_lock * * , int ) ;
extern int lock_may_read ( struct inode * , loff_t start , unsigned long count ) ;
extern int lock_may_write ( struct inode * , loff_t start , unsigned long count ) ;
extern void locks_delete_block ( struct file_lock * waiter ) ;
extern void lock_flocks ( void ) ;
extern void unlock_flocks ( void ) ;
extern int fasync_helper ( int , struct file * , int , struct fasync_struct * * ) ;
extern struct fasync_struct * fasync_insert_entry ( int , struct file * , struct fasync_struct * * , struct fasync_struct * ) ;
extern int fasync_remove_entry ( struct file * , struct fasync_struct * * ) ;
extern struct fasync_struct * fasync_alloc ( void ) ;
extern void fasync_free ( struct fasync_struct * ) ;
extern void kill_fasync ( struct fasync_struct * * , int , int ) ;
extern int __f_setown ( struct file * filp , struct pid * , enum pid_type , int force ) ;
extern int f_setown ( struct file * filp , unsigned long arg , int force ) ;
extern void f_delown ( struct file * filp ) ;
extern pid_t f_getown ( struct file * filp ) ;
extern int send_sigurg ( struct fown_struct * fown ) ;
extern void prune_icache_sb ( struct super_block * sb , int nr_to_scan ) ;
extern void prune_dcache_sb ( struct super_block * sb , int nr_to_scan ) ;
extern struct timespec current_fs_time ( struct super_block * sb ) ;
void __sb_end_write ( struct super_block * sb , int level ) ;
int __sb_start_write ( struct super_block * sb , int level , bool wait ) ;
extern bool inode_owner_or_capable ( const struct inode * inode ) ;
extern int vfs_create ( struct inode * , struct dentry * , umode_t , bool ) ;
extern int vfs_mkdir ( struct inode * , struct dentry * , umode_t ) ;
extern int vfs_mknod ( struct inode * , struct dentry * , umode_t , dev_t ) ;
extern int vfs_symlink ( struct inode * , struct dentry * , const char * ) ;
extern int vfs_link ( struct dentry * , struct inode * , struct dentry * ) ;
extern int vfs_rmdir ( struct inode * , struct dentry * ) ;
extern int vfs_unlink ( struct inode * , struct dentry * ) ;
extern int vfs_rename ( struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
extern void dentry_unhash ( struct dentry * dentry ) ;
extern void inode_init_owner ( struct inode * inode , const struct inode * dir , umode_t mode ) ;
int fiemap_fill_next_extent ( struct fiemap_extent_info * info , u64 logical , u64 phys , u64 len , u32 flags ) ;
int fiemap_check_flags ( struct fiemap_extent_info * fieinfo , u32 fs_flags ) ;
ssize_t rw_copy_check_uvector ( int type , const struct iovec * uvector , unsigned long nr_segs , unsigned long fast_segs , struct iovec * fast_pointer , struct iovec * * ret_pointer ) ;
extern ssize_t vfs_read ( struct file * , char * , size_t , loff_t * ) ;
extern ssize_t vfs_write ( struct file * , const char * , size_t , loff_t * ) ;
extern ssize_t vfs_readv ( struct file * , const struct iovec * , unsigned long , loff_t * ) ;
extern ssize_t vfs_writev ( struct file * , const struct iovec * , unsigned long , loff_t * ) ;
extern void __mark_inode_dirty ( struct inode * , int ) ;
extern void inc_nlink ( struct inode * inode ) ;
extern void drop_nlink ( struct inode * inode ) ;
extern void clear_nlink ( struct inode * inode ) ;
extern void set_nlink ( struct inode * inode , unsigned int nlink ) ;
extern void touch_atime ( struct path * ) ;
int sync_inode ( struct inode * inode , struct writeback_control * wbc ) ;
int sync_inode_metadata ( struct inode * inode , int wait ) ;
extern struct dentry * mount_ns ( struct file_system_type * fs_type , int flags , void * data , int ( * fill_super ) ( struct super_block * , void * , int ) ) ;
extern struct dentry * mount_bdev ( struct file_system_type * fs_type , int flags , const char * dev_name , void * data , int ( * fill_super ) ( struct super_block * , void * , int ) ) ;
extern struct dentry * mount_single ( struct file_system_type * fs_type , int flags , void * data , int ( * fill_super ) ( struct super_block * , void * , int ) ) ;
extern struct dentry * mount_nodev ( struct file_system_type * fs_type , int flags , void * data , int ( * fill_super ) ( struct super_block * , void * , int ) ) ;
extern struct dentry * mount_subtree ( struct vfsmount * mnt , const char * path ) ;
void generic_shutdown_super ( struct super_block * sb ) ;
void kill_block_super ( struct super_block * sb ) ;
void kill_anon_super ( struct super_block * sb ) ;
void kill_litter_super ( struct super_block * sb ) ;
void deactivate_super ( struct super_block * sb ) ;
void deactivate_locked_super ( struct super_block * sb ) ;
int set_anon_super ( struct super_block * s , void * data ) ;
int get_anon_bdev ( dev_t * ) ;
void free_anon_bdev ( dev_t ) ;
struct super_block * sget ( struct file_system_type * type , int ( * test ) ( struct super_block * , void * ) , int ( * set ) ( struct super_block * , void * ) , int flags , void * data ) ;
extern struct dentry * mount_pseudo ( struct file_system_type * , char * , const struct super_operations * ops , const struct dentry_operations * dops , unsigned long ) ;
extern int register_filesystem ( struct file_system_type * ) ;
extern int unregister_filesystem ( struct file_system_type * ) ;
extern struct vfsmount * kern_mount_data ( struct file_system_type * , void * data ) ;
extern void kern_unmount ( struct vfsmount * mnt ) ;
extern int may_umount_tree ( struct vfsmount * ) ;
extern int may_umount ( struct vfsmount * ) ;
extern long do_mount ( const char * , const char * , const char * , unsigned long , void * ) ;
extern struct vfsmount * collect_mounts ( struct path * ) ;
extern void drop_collected_mounts ( struct vfsmount * ) ;
extern int iterate_mounts ( int ( * ) ( struct vfsmount * , void * ) , void * , struct vfsmount * ) ;
extern int vfs_statfs ( struct path * , struct kstatfs * ) ;
extern int user_statfs ( const char * , struct kstatfs * ) ;
extern int fd_statfs ( int , struct kstatfs * ) ;
extern int vfs_ustat ( dev_t , struct kstatfs * ) ;
extern int freeze_super ( struct super_block * super ) ;
extern int thaw_super ( struct super_block * super ) ;
extern bool our_mnt ( struct vfsmount * mnt ) ;
extern int current_umask ( void ) ;
extern int rw_verify_area ( int , struct file * , loff_t * , size_t ) ;
extern int locks_mandatory_locked ( struct inode * ) ;
extern int locks_mandatory_area ( int , struct inode * , struct file * , loff_t , size_t ) ;
extern long vfs_truncate ( struct path * , loff_t ) ;
extern int do_truncate ( struct dentry * , loff_t start , unsigned int time_attrs , struct file * filp ) ;
extern int do_fallocate ( struct file * file , int mode , loff_t offset , loff_t len ) ;
extern long do_sys_open ( int dfd , const char * filename , int flags , umode_t mode ) ;
extern struct file * file_open_name ( struct filename * , int , umode_t ) ;
extern struct file * filp_open ( const char * , int , umode_t ) ;
extern struct file * file_open_root ( struct dentry * , struct vfsmount * , const char * , int ) ;
extern struct file * dentry_open ( const struct path * , int , const struct cred * ) ;
extern int filp_close ( struct file * , fl_owner_t id ) ;
extern struct filename * getname ( const char * ) ;
extern int finish_open ( struct file * file , struct dentry * dentry , int ( * open ) ( struct inode * , struct file * ) , int * opened ) ;
extern int finish_no_open ( struct file * file , struct dentry * dentry ) ;
extern int ioctl_preallocate ( struct file * filp , void * argp ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) vfs_caches_init_early ( void ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) vfs_caches_init ( unsigned long ) ;
extern void final_putname ( struct filename * name ) ;
extern void putname ( struct filename * name ) ;
extern int register_blkdev ( unsigned int , const char * ) ;
extern void unregister_blkdev ( unsigned int , const char * ) ;
extern struct block_device * bdget ( dev_t ) ;
extern struct block_device * bdgrab ( struct block_device * bdev ) ;
extern void bd_set_size ( struct block_device * , loff_t size ) ;
extern void bd_forget ( struct inode * inode ) ;
extern void bdput ( struct block_device * ) ;
extern void invalidate_bdev ( struct block_device * ) ;
extern void iterate_bdevs ( void ( * ) ( struct block_device * , void * ) , void * ) ;
extern int sync_blockdev ( struct block_device * bdev ) ;
extern void kill_bdev ( struct block_device * ) ;
extern struct super_block * freeze_bdev ( struct block_device * ) ;
extern void emergency_thaw_all ( void ) ;
extern int thaw_bdev ( struct block_device * bdev , struct super_block * sb ) ;
extern int fsync_bdev ( struct block_device * ) ;
extern int sync_filesystem ( struct super_block * ) ;
extern int ioctl_by_bdev ( struct block_device * , unsigned , unsigned long ) ;
extern int blkdev_ioctl ( struct block_device * , fmode_t , unsigned , unsigned long ) ;
extern long compat_blkdev_ioctl ( struct file * , unsigned , unsigned long ) ;
extern int blkdev_get ( struct block_device * bdev , fmode_t mode , void * holder ) ;
extern struct block_device * blkdev_get_by_path ( const char * path , fmode_t mode , void * holder ) ;
extern struct block_device * blkdev_get_by_dev ( dev_t dev , fmode_t mode , void * holder ) ;
extern int blkdev_put ( struct block_device * bdev , fmode_t mode ) ;
extern int bd_link_disk_holder ( struct block_device * bdev , struct gendisk * disk ) ;
extern void bd_unlink_disk_holder ( struct block_device * bdev , struct gendisk * disk ) ;
extern int alloc_chrdev_region ( dev_t * , unsigned , unsigned , const char * ) ;
extern int register_chrdev_region ( dev_t , unsigned , const char * ) ;
extern int __register_chrdev ( unsigned int major , unsigned int baseminor , unsigned int count , const char * name , const struct file_operations * fops ) ;
extern void __unregister_chrdev ( unsigned int major , unsigned int baseminor , unsigned int count , const char * name ) ;
extern void unregister_chrdev_region ( dev_t , unsigned ) ;
extern void chrdev_show ( struct seq_file * , off_t ) ;
extern const char * __bdevname ( dev_t , char * buffer ) ;
extern const char * bdevname ( struct block_device * bdev , char * buffer ) ;
extern struct block_device * lookup_bdev ( const char * ) ;
extern void blkdev_show ( struct seq_file * , off_t ) ;
extern void init_special_inode ( struct inode * , umode_t , dev_t ) ;
extern void make_bad_inode ( struct inode * ) ;
extern int is_bad_inode ( struct inode * ) ;
extern void check_disk_size_change ( struct gendisk * disk , struct block_device * bdev ) ;
extern int revalidate_disk ( struct gendisk * ) ;
extern int check_disk_change ( struct block_device * ) ;
extern int __invalidate_device ( struct block_device * , bool ) ;
extern int invalidate_partition ( struct gendisk * , int ) ;
unsigned long invalidate_mapping_pages ( struct address_space * mapping , unsigned long start , unsigned long end ) ;
extern int invalidate_inode_pages2 ( struct address_space * mapping ) ;
extern int invalidate_inode_pages2_range ( struct address_space * mapping , unsigned long start , unsigned long end ) ;
extern int write_inode_now ( struct inode * , int ) ;
extern int filemap_fdatawrite ( struct address_space * ) ;
extern int filemap_flush ( struct address_space * ) ;
extern int filemap_fdatawait ( struct address_space * ) ;
extern int filemap_fdatawait_range ( struct address_space * , loff_t lstart , loff_t lend ) ;
extern int filemap_write_and_wait ( struct address_space * mapping ) ;
extern int filemap_write_and_wait_range ( struct address_space * mapping , loff_t lstart , loff_t lend ) ;
extern int __filemap_fdatawrite_range ( struct address_space * mapping , loff_t start , loff_t end , int sync_mode ) ;
extern int filemap_fdatawrite_range ( struct address_space * mapping , loff_t start , loff_t end ) ;
extern int vfs_fsync_range ( struct file * file , loff_t start , loff_t end , int datasync ) ;
extern int vfs_fsync ( struct file * file , int datasync ) ;
extern int generic_write_sync ( struct file * file , loff_t pos , loff_t count ) ;
extern void emergency_sync ( void ) ;
extern void emergency_remount ( void ) ;
extern sector_t bmap ( struct inode * , sector_t ) ;
extern int notify_change ( struct dentry * , struct iattr * ) ;
extern int inode_permission ( struct inode * , int ) ;
extern int generic_permission ( struct inode * , int ) ;
extern int do_pipe_flags ( int * , int ) ;
extern int kernel_read ( struct file * , loff_t , char * , unsigned long ) ;
extern struct file * open_exec ( const char * ) ;
extern int is_subdir ( struct dentry * , struct dentry * ) ;
extern int path_is_under ( struct path * , struct path * ) ;
extern ino_t find_inode_number ( struct dentry * , struct qstr * ) ;
extern loff_t default_llseek ( struct file * file , loff_t offset , int whence ) ;
extern loff_t vfs_llseek ( struct file * file , loff_t offset , int whence ) ;
extern int inode_init_always ( struct super_block * , struct inode * ) ;
extern void inode_init_once ( struct inode * ) ;
extern void address_space_init_once ( struct address_space * mapping ) ;
extern void ihold ( struct inode * inode ) ;
extern void iput ( struct inode * ) ;
extern struct inode * igrab ( struct inode * ) ;
extern ino_t iunique ( struct super_block * , ino_t ) ;
extern int inode_needs_sync ( struct inode * inode ) ;
extern int generic_delete_inode ( struct inode * inode ) ;
extern struct inode * ilookup5_nowait ( struct super_block * sb , unsigned long hashval , int ( * test ) ( struct inode * , void * ) , void * data ) ;
extern struct inode * ilookup5 ( struct super_block * sb , unsigned long hashval , int ( * test ) ( struct inode * , void * ) , void * data ) ;
extern struct inode * ilookup ( struct super_block * sb , unsigned long ino ) ;
extern struct inode * iget5_locked ( struct super_block * , unsigned long , int ( * test ) ( struct inode * , void * ) , int ( * set ) ( struct inode * , void * ) , void * ) ;
extern struct inode * iget_locked ( struct super_block * , unsigned long ) ;
extern int insert_inode_locked4 ( struct inode * , unsigned long , int ( * test ) ( struct inode * , void * ) , void * ) ;
extern int insert_inode_locked ( struct inode * ) ;
extern void unlock_new_inode ( struct inode * ) ;
extern unsigned int get_next_ino ( void ) ;
extern void __iget ( struct inode * inode ) ;
extern void iget_failed ( struct inode * ) ;
extern void clear_inode ( struct inode * ) ;
extern void __destroy_inode ( struct inode * ) ;
extern struct inode * new_inode_pseudo ( struct super_block * sb ) ;
extern struct inode * new_inode ( struct super_block * sb ) ;
extern void free_inode_nonrcu ( struct inode * inode ) ;
extern int should_remove_suid ( struct dentry * ) ;
extern int file_remove_suid ( struct file * ) ;
extern void __insert_inode_hash ( struct inode * , unsigned long hashval ) ;
extern void __remove_inode_hash ( struct inode * ) ;
extern void inode_sb_list_add ( struct inode * inode ) ;
extern void submit_bio ( int , struct bio * ) ;
extern int bdev_read_only ( struct block_device * ) ;
extern int set_blocksize ( struct block_device * , int ) ;
extern int sb_set_blocksize ( struct super_block * , int ) ;
extern int sb_min_blocksize ( struct super_block * , int ) ;
extern int generic_file_mmap ( struct file * , struct vm_area_struct * ) ;
extern int generic_file_readonly_mmap ( struct file * , struct vm_area_struct * ) ;
extern int generic_file_remap_pages ( struct vm_area_struct * , unsigned long addr , unsigned long size , unsigned long pgoff ) ;
extern int file_read_actor ( read_descriptor_t * desc , struct page * page , unsigned long offset , unsigned long size ) ;
int generic_write_checks ( struct file * file , loff_t * pos , size_t * count , int isblk ) ;
extern ssize_t generic_file_aio_read ( struct kiocb * , const struct iovec * , unsigned long , loff_t ) ;
extern ssize_t __generic_file_aio_write ( struct kiocb * , const struct iovec * , unsigned long , loff_t * ) ;
extern ssize_t generic_file_aio_write ( struct kiocb * , const struct iovec * , unsigned long , loff_t ) ;
extern ssize_t generic_file_direct_write ( struct kiocb * , const struct iovec * , unsigned long * , loff_t , loff_t * , size_t , size_t ) ;
extern ssize_t generic_file_buffered_write ( struct kiocb * , const struct iovec * , unsigned long , loff_t , loff_t * , size_t , ssize_t ) ;
extern ssize_t do_sync_read ( struct file * filp , char * buf , size_t len , loff_t * ppos ) ;
extern ssize_t do_sync_write ( struct file * filp , const char * buf , size_t len , loff_t * ppos ) ;
extern int generic_segment_checks ( const struct iovec * iov , unsigned long * nr_segs , size_t * count , int access_flags ) ;
extern ssize_t blkdev_aio_write ( struct kiocb * iocb , const struct iovec * iov , unsigned long nr_segs , loff_t pos ) ;
extern int blkdev_fsync ( struct file * filp , loff_t start , loff_t end , int datasync ) ;
extern void block_sync_page ( struct page * page ) ;
extern ssize_t generic_file_splice_read ( struct file * , loff_t * , struct pipe_inode_info * , size_t , unsigned int ) ;
extern ssize_t default_file_splice_read ( struct file * , loff_t * , struct pipe_inode_info * , size_t , unsigned int ) ;
extern ssize_t generic_file_splice_write ( struct pipe_inode_info * , struct file * , loff_t * , size_t , unsigned int ) ;
extern ssize_t generic_splice_sendpage ( struct pipe_inode_info * pipe , struct file * out , loff_t * , size_t len , unsigned int flags ) ;
extern long do_splice_direct ( struct file * in , loff_t * ppos , struct file * out , size_t len , unsigned int flags ) ;
extern void file_ra_state_init ( struct file_ra_state * ra , struct address_space * mapping ) ;
extern loff_t noop_llseek ( struct file * file , loff_t offset , int whence ) ;
extern loff_t no_llseek ( struct file * file , loff_t offset , int whence ) ;
extern loff_t generic_file_llseek ( struct file * file , loff_t offset , int whence ) ;
extern loff_t generic_file_llseek_size ( struct file * file , loff_t offset , int whence , loff_t maxsize , loff_t eof ) ;
extern int generic_file_open ( struct inode * inode , struct file * filp ) ;
extern int nonseekable_open ( struct inode * inode , struct file * filp ) ;
void dio_end_io ( struct bio * bio , int error ) ;
ssize_t __blockdev_direct_IO ( int rw , struct kiocb * iocb , struct inode * inode , struct block_device * bdev , const struct iovec * iov , loff_t offset , unsigned long nr_segs , get_block_t get_block , dio_iodone_t end_io , dio_submit_t submit_io , int flags ) ;
void inode_dio_wait ( struct inode * inode ) ;
void inode_dio_done ( struct inode * inode ) ;
extern int vfs_readlink ( struct dentry * , char * , int , const char * ) ;
extern int vfs_follow_link ( struct nameidata * , const char * ) ;
extern int page_readlink ( struct dentry * , char * , int ) ;
extern void * page_follow_link_light ( struct dentry * , struct nameidata * ) ;
extern void page_put_link ( struct dentry * , struct nameidata * , void * ) ;
extern int __page_symlink ( struct inode * inode , const char * symname , int len , int nofs ) ;
extern int page_symlink ( struct inode * inode , const char * symname , int len ) ;
extern int generic_readlink ( struct dentry * , char * , int ) ;
extern void generic_fillattr ( struct inode * , struct kstat * ) ;
extern int vfs_getattr ( struct vfsmount * , struct dentry * , struct kstat * ) ;
void __inode_add_bytes ( struct inode * inode , loff_t bytes ) ;
void inode_add_bytes ( struct inode * inode , loff_t bytes ) ;
void inode_sub_bytes ( struct inode * inode , loff_t bytes ) ;
loff_t inode_get_bytes ( struct inode * inode ) ;
void inode_set_bytes ( struct inode * inode , loff_t bytes ) ;
extern int vfs_readdir ( struct file * , filldir_t , void * ) ;
extern int vfs_stat ( const char * , struct kstat * ) ;
extern int vfs_lstat ( const char * , struct kstat * ) ;
extern int vfs_fstat ( unsigned int , struct kstat * ) ;
extern int vfs_fstatat ( int , const char * , struct kstat * , int ) ;
extern int do_vfs_ioctl ( struct file * filp , unsigned int fd , unsigned int cmd , unsigned long arg ) ;
extern int __generic_block_fiemap ( struct inode * inode , struct fiemap_extent_info * fieinfo , loff_t start , loff_t len , get_block_t * get_block ) ;
extern int generic_block_fiemap ( struct inode * inode , struct fiemap_extent_info * fieinfo , u64 start , u64 len , get_block_t * get_block ) ;
extern void get_filesystem ( struct file_system_type * fs ) ;
extern void put_filesystem ( struct file_system_type * fs ) ;
extern struct file_system_type * get_fs_type ( const char * name ) ;
extern struct super_block * get_super ( struct block_device * ) ;
extern struct super_block * get_super_thawed ( struct block_device * ) ;
extern struct super_block * get_active_super ( struct block_device * bdev ) ;
extern void drop_super ( struct super_block * sb ) ;
extern void iterate_supers ( void ( * ) ( struct super_block * , void * ) , void * ) ;
extern void iterate_supers_type ( struct file_system_type * , void ( * ) ( struct super_block * , void * ) , void * ) ;
extern int dcache_dir_open ( struct inode * , struct file * ) ;
extern int dcache_dir_close ( struct inode * , struct file * ) ;
extern loff_t dcache_dir_lseek ( struct file * , loff_t , int ) ;
extern int dcache_readdir ( struct file * , void * , filldir_t ) ;
extern int simple_setattr ( struct dentry * , struct iattr * ) ;
extern int simple_getattr ( struct vfsmount * , struct dentry * , struct kstat * ) ;
extern int simple_statfs ( struct dentry * , struct kstatfs * ) ;
extern int simple_open ( struct inode * inode , struct file * file ) ;
extern int simple_link ( struct dentry * , struct inode * , struct dentry * ) ;
extern int simple_unlink ( struct inode * , struct dentry * ) ;
extern int simple_rmdir ( struct inode * , struct dentry * ) ;
extern int simple_rename ( struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
extern int noop_fsync ( struct file * , loff_t , loff_t , int ) ;
extern int simple_empty ( struct dentry * ) ;
extern int simple_readpage ( struct file * file , struct page * page ) ;
extern int simple_write_begin ( struct file * file , struct address_space * mapping , loff_t pos , unsigned len , unsigned flags , struct page * * pagep , void * * fsdata ) ;
extern int simple_write_end ( struct file * file , struct address_space * mapping , loff_t pos , unsigned len , unsigned copied , struct page * page , void * fsdata ) ;
extern struct dentry * simple_lookup ( struct inode * , struct dentry * , unsigned int flags ) ;
extern ssize_t generic_read_dir ( struct file * , char * , size_t , loff_t * ) ;
struct dentry * d_alloc_name ( struct dentry * , const char * ) ;
extern int simple_fill_super ( struct super_block * , unsigned long , struct tree_descr * ) ;
extern int simple_pin_fs ( struct file_system_type * , struct vfsmount * * mount , int * count ) ;
extern void simple_release_fs ( struct vfsmount * * mount , int * count ) ;
extern ssize_t simple_read_from_buffer ( void * to , size_t count , loff_t * ppos , const void * from , size_t available ) ;
extern ssize_t simple_write_to_buffer ( void * to , size_t available , loff_t * ppos , const void * from , size_t count ) ;
extern int generic_file_fsync ( struct file * , loff_t , loff_t , int ) ;
extern int generic_check_addressable ( unsigned , u64 ) ;
extern int buffer_migrate_page ( struct address_space * , struct page * , struct page * , enum migrate_mode ) ;
extern int inode_change_ok ( const struct inode * , struct iattr * ) ;
extern int inode_newsize_ok ( const struct inode * , loff_t offset ) ;
extern void setattr_copy ( struct inode * inode , const struct iattr * attr ) ;
extern int file_update_time ( struct file * file ) ;
extern int generic_show_options ( struct seq_file * m , struct dentry * root ) ;
extern void save_mount_options ( struct super_block * sb , char * options ) ;
extern void replace_mount_options ( struct super_block * sb , char * options ) ;
char * simple_transaction_get ( struct file * file , const char * buf , size_t size ) ;
ssize_t simple_transaction_read ( struct file * file , char * buf , size_t size , loff_t * pos ) ;
int simple_transaction_release ( struct inode * inode , struct file * file ) ;
void simple_transaction_set ( struct file * file , size_t n ) ;
int simple_attr_open ( struct inode * inode , struct file * file , int ( * get ) ( void * , u64 * ) , int ( * set ) ( void * , u64 ) , const char * fmt ) ;
int simple_attr_release ( struct inode * inode , struct file * file ) ;
ssize_t simple_attr_read ( struct file * file , char * buf , size_t len , loff_t * ppos ) ;
ssize_t simple_attr_write ( struct file * file , const char * buf , size_t len , loff_t * ppos ) ;
int proc_nr_files ( struct ctl_table * table , int write , void * buffer , size_t * lenp , loff_t * ppos ) ;
int proc_nr_dentry ( struct ctl_table * table , int write , void * buffer , size_t * lenp , loff_t * ppos ) ;
int proc_nr_inodes ( struct ctl_table * table , int write , void * buffer , size_t * lenp , loff_t * ppos ) ;
int __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) get_filesystem_list ( char * buf ) ;
void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) kmem_cache_init ( void ) ;
int slab_is_available ( void ) ;
struct kmem_cache * kmem_cache_create ( const char * , size_t , size_t , unsigned long , void ( * ) ( void * ) ) ;
struct kmem_cache * kmem_cache_create_memcg ( struct mem_cgroup * , const char * , size_t , size_t , unsigned long , void ( * ) ( void * ) , struct kmem_cache * ) ;
void kmem_cache_destroy ( struct kmem_cache * ) ;
int kmem_cache_shrink ( struct kmem_cache * ) ;
void kmem_cache_free ( struct kmem_cache * , void * ) ;
int memcg_update_all_caches ( int num_memcgs ) ;
int cache_show ( struct kmem_cache * s , struct seq_file * m ) ;
void print_slabinfo_header ( struct seq_file * m ) ;
void * __krealloc ( const void * , size_t , gfp_t ) ;
void * krealloc ( const void * , size_t , gfp_t ) ;
void kfree ( const void * ) ;
void kzfree ( const void * ) ;
size_t ksize ( const void * ) ;
void * kmem_cache_alloc ( struct kmem_cache * , gfp_t ) ;
void * __kmalloc ( size_t size , gfp_t flags ) ;
extern bool verify_mem_not_deleted ( const void * x ) ;
extern void * kmem_cache_alloc_trace ( struct kmem_cache * s , gfp_t gfpflags , size_t size ) ;
extern void * kmalloc_order_trace ( size_t size , gfp_t flags , unsigned int order ) ;
void * __kmalloc_node ( size_t size , gfp_t flags , int node ) ;
void * kmem_cache_alloc_node ( struct kmem_cache * , gfp_t flags , int node ) ;
extern void * kmem_cache_alloc_node_trace ( struct kmem_cache * s , gfp_t gfpflags , int node , size_t size ) ;
extern void * __kmalloc_track_caller ( size_t , gfp_t , unsigned long ) ;
extern void * __kmalloc_node_track_caller ( size_t , gfp_t , int , unsigned long ) ;
void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) kmem_cache_init_late ( void ) ;
extern void proc_root_init ( void ) ;
void proc_flush_task ( struct task_struct * task ) ;
extern struct proc_dir_entry * create_proc_entry ( const char * name , umode_t mode , struct proc_dir_entry * parent ) ;
struct proc_dir_entry * proc_create_data ( const char * name , umode_t mode , struct proc_dir_entry * parent , const struct file_operations * proc_fops , void * data ) ;
extern void remove_proc_entry ( const char * name , struct proc_dir_entry * parent ) ;
extern int pid_ns_prepare_proc ( struct pid_namespace * ns ) ;
extern void pid_ns_release_proc ( struct pid_namespace * ns ) ;
extern void proc_tty_init ( void ) ;
extern void proc_tty_register_driver ( struct tty_driver * driver ) ;
extern void proc_tty_unregister_driver ( struct tty_driver * driver ) ;
extern struct proc_dir_entry * proc_symlink ( const char * , struct proc_dir_entry * , const char * ) ;
extern struct proc_dir_entry * proc_mkdir ( const char * , struct proc_dir_entry * ) ;
extern struct proc_dir_entry * proc_mkdir_mode ( const char * name , umode_t mode , struct proc_dir_entry * parent ) ;
extern struct proc_dir_entry * proc_net_fops_create ( struct net * net , const char * name , umode_t mode , const struct file_operations * fops ) ;
extern void proc_net_remove ( struct net * net , const char * name ) ;
extern struct proc_dir_entry * proc_net_mkdir ( struct net * net , const char * name , struct proc_dir_entry * parent ) ;
extern struct file * proc_ns_fget ( int fd ) ;
extern bool proc_ns_inode ( struct inode * inode ) ;
extern int proc_alloc_inum ( unsigned int * pino ) ;
extern void proc_free_inum ( unsigned int inum ) ;
extern void kclist_add ( struct kcore_list * , void * , size_t , int type ) ;
extern void do_notify_resume ( struct pt_regs * , void * , __u32 ) ;
void do_schedule_next_timer ( struct siginfo * info ) ;
extern int copy_siginfo_to_user ( struct siginfo * to , struct siginfo * from ) ;
extern void flush_sigqueue ( struct sigpending * queue ) ;
extern int next_signal ( struct sigpending * pending , sigset_t * mask ) ;
extern int do_send_sig_info ( int sig , struct siginfo * info , struct task_struct * p , bool group ) ;
extern int group_send_sig_info ( int sig , struct siginfo * info , struct task_struct * p ) ;
extern int __group_send_sig_info ( int , struct siginfo * , struct task_struct * ) ;
extern long do_rt_tgsigqueueinfo ( pid_t tgid , pid_t pid , int sig , siginfo_t * info ) ;
extern long do_sigpending ( void * , unsigned long ) ;
extern int do_sigtimedwait ( const sigset_t * , siginfo_t * , const struct timespec * ) ;
extern int sigprocmask ( int , sigset_t * , sigset_t * ) ;
extern void set_current_blocked ( sigset_t * ) ;
extern void __set_current_blocked ( const sigset_t * ) ;
extern int sigsuspend ( sigset_t * ) ;
extern int get_signal_to_deliver ( siginfo_t * info , struct k_sigaction * return_ka , struct pt_regs * regs , void * cookie ) ;
extern void signal_delivered ( int sig , siginfo_t * info , struct k_sigaction * ka , struct pt_regs * regs , int stepping ) ;
extern void exit_signals ( struct task_struct * tsk ) ;
int unhandled_signal ( struct task_struct * tsk , int sig ) ;
void signals_init ( void ) ;
int restore_altstack ( const stack_t * ) ;
int __save_altstack ( stack_t * , unsigned long ) ;
void render_sigset_t ( struct seq_file * m , const char * header , sigset_t * set ) ;
extern void klist_init ( struct klist * k , void ( * get ) ( struct klist_node * ) , void ( * put ) ( struct klist_node * ) ) ;
extern void klist_add_tail ( struct klist_node * n , struct klist * k ) ;
extern void klist_add_head ( struct klist_node * n , struct klist * k ) ;
extern void klist_add_after ( struct klist_node * n , struct klist_node * pos ) ;
extern void klist_add_before ( struct klist_node * n , struct klist_node * pos ) ;
extern void klist_del ( struct klist_node * n ) ;
extern void klist_remove ( struct klist_node * n ) ;
extern int klist_node_attached ( struct klist_node * n ) ;
extern void klist_iter_init ( struct klist * k , struct klist_iter * i ) ;
extern void klist_iter_init_node ( struct klist * k , struct klist_iter * i , struct klist_node * n ) ;
extern void klist_iter_exit ( struct klist_iter * i ) ;
extern struct klist_node * klist_next ( struct klist_iter * i ) ;
extern int ___ratelimit ( struct ratelimit_state * rs , const char * func ) ;
extern int bus_create_file ( struct bus_type * , struct bus_attribute * ) ;
extern void bus_remove_file ( struct bus_type * , struct bus_attribute * ) ;
extern int __bus_register ( struct bus_type * bus , struct lock_class_key * key ) ;
extern void bus_unregister ( struct bus_type * bus ) ;
extern int bus_rescan_devices ( struct bus_type * bus ) ;
void subsys_dev_iter_init ( struct subsys_dev_iter * iter , struct bus_type * subsys , struct device * start , const struct device_type * type ) ;
struct device * subsys_dev_iter_next ( struct subsys_dev_iter * iter ) ;
void subsys_dev_iter_exit ( struct subsys_dev_iter * iter ) ;
int bus_for_each_dev ( struct bus_type * bus , struct device * start , void * data , int ( * fn ) ( struct device * dev , void * data ) ) ;
struct device * bus_find_device ( struct bus_type * bus , struct device * start , void * data , int ( * match ) ( struct device * dev , void * data ) ) ;
struct device * bus_find_device_by_name ( struct bus_type * bus , struct device * start , const char * name ) ;
struct device * subsys_find_device_by_id ( struct bus_type * bus , unsigned int id , struct device * hint ) ;
int bus_for_each_drv ( struct bus_type * bus , struct device_driver * start , void * data , int ( * fn ) ( struct device_driver * , void * ) ) ;
void bus_sort_breadthfirst ( struct bus_type * bus , int ( * compare ) ( const struct device * a , const struct device * b ) ) ;
extern int bus_register_notifier ( struct bus_type * bus , struct notifier_block * nb ) ;
extern int bus_unregister_notifier ( struct bus_type * bus , struct notifier_block * nb ) ;
extern struct kset * bus_get_kset ( struct bus_type * bus ) ;
extern struct klist * bus_get_device_klist ( struct bus_type * bus ) ;
extern int driver_register ( struct device_driver * drv ) ;
extern void driver_unregister ( struct device_driver * drv ) ;
extern struct device_driver * driver_find ( const char * name , struct bus_type * bus ) ;
extern int driver_probe_done ( void ) ;
extern void wait_for_device_probe ( void ) ;
extern int driver_create_file ( struct device_driver * driver , const struct driver_attribute * attr ) ;
extern void driver_remove_file ( struct device_driver * driver , const struct driver_attribute * attr ) ;
extern int driver_for_each_device ( struct device_driver * drv , struct device * start , void * data , int ( * fn ) ( struct device * dev , void * ) ) ;
struct device * driver_find_device ( struct device_driver * drv , struct device * start , void * data , int ( * match ) ( struct device * dev , void * data ) ) ;
int subsys_interface_register ( struct subsys_interface * sif ) ;
void subsys_interface_unregister ( struct subsys_interface * sif ) ;
int subsys_system_register ( struct bus_type * subsys , const struct attribute_group * * groups ) ;
extern int __class_register ( struct class_ * class_ , struct lock_class_key * key ) ;
extern void class_unregister ( struct class_ * class_ ) ;
struct class_compat * class_compat_register ( const char * name ) ;
void class_compat_unregister ( struct class_compat * cls ) ;
int class_compat_create_link ( struct class_compat * cls , struct device * dev , struct device * device_link ) ;
void class_compat_remove_link ( struct class_compat * cls , struct device * dev , struct device * device_link ) ;
extern void class_dev_iter_init ( struct class_dev_iter * iter , struct class_ * class_ , struct device * start , const struct device_type * type ) ;
extern struct device * class_dev_iter_next ( struct class_dev_iter * iter ) ;
extern void class_dev_iter_exit ( struct class_dev_iter * iter ) ;
extern int class_for_each_device ( struct class_ * class_ , struct device * start , void * data , int ( * fn ) ( struct device * dev , void * data ) ) ;
extern struct device * class_find_device ( struct class_ * class_ , struct device * start , void * data , int ( * match ) ( struct device * , void * ) ) ;
extern int class_create_file ( struct class_ * class_ , const struct class_attribute * attr ) ;
extern void class_remove_file ( struct class_ * class_ , const struct class_attribute * attr ) ;
extern ssize_t show_class_attr_string ( struct class_ * class_ , struct class_attribute * attr , char * buf ) ;
extern int class_interface_register ( struct class_interface * ) ;
extern void class_interface_unregister ( struct class_interface * ) ;
extern struct class_ * __class_create ( struct module * owner , const char * name , struct lock_class_key * key ) ;
extern void class_destroy ( struct class_ * cls ) ;
ssize_t device_show_ulong ( struct device * dev , struct device_attribute * attr , char * buf ) ;
ssize_t device_store_ulong ( struct device * dev , struct device_attribute * attr , const char * buf , size_t count ) ;
ssize_t device_show_int ( struct device * dev , struct device_attribute * attr , char * buf ) ;
ssize_t device_store_int ( struct device * dev , struct device_attribute * attr , const char * buf , size_t count ) ;
ssize_t device_show_bool ( struct device * dev , struct device_attribute * attr , char * buf ) ;
ssize_t device_store_bool ( struct device * dev , struct device_attribute * attr , const char * buf , size_t count ) ;
extern int device_create_file ( struct device * device , const struct device_attribute * entry ) ;
extern void device_remove_file ( struct device * dev , const struct device_attribute * attr ) ;
extern int device_create_bin_file ( struct device * dev , const struct bin_attribute * attr ) ;
extern void device_remove_bin_file ( struct device * dev , const struct bin_attribute * attr ) ;
extern int device_schedule_callback_owner ( struct device * dev , void ( * func ) ( struct device * dev ) , struct module * owner ) ;
extern void * devres_alloc ( dr_release_t release , size_t size , gfp_t gfp ) ;
extern void devres_for_each_res ( struct device * dev , dr_release_t release , dr_match_t match , void * match_data , void ( * fn ) ( struct device * , void * , void * ) , void * data ) ;
extern void devres_free ( void * res ) ;
extern void devres_add ( struct device * dev , void * res ) ;
extern void * devres_find ( struct device * dev , dr_release_t release , dr_match_t match , void * match_data ) ;
extern void * devres_get ( struct device * dev , void * new_res , dr_match_t match , void * match_data ) ;
extern void * devres_remove ( struct device * dev , dr_release_t release , dr_match_t match , void * match_data ) ;
extern int devres_destroy ( struct device * dev , dr_release_t release , dr_match_t match , void * match_data ) ;
extern int devres_release ( struct device * dev , dr_release_t release , dr_match_t match , void * match_data ) ;
extern void * devres_open_group ( struct device * dev , void * id , gfp_t gfp ) ;
extern void devres_close_group ( struct device * dev , void * id ) ;
extern void devres_remove_group ( struct device * dev , void * id ) ;
extern int devres_release_group ( struct device * dev , void * id ) ;
extern void * devm_kzalloc ( struct device * dev , size_t size , gfp_t gfp ) ;
extern void devm_kfree ( struct device * dev , void * p ) ;
void * devm_request_and_ioremap ( struct device * dev , struct resource * res ) ;
extern void wakeup_source_prepare ( struct wakeup_source * ws , const char * name ) ;
extern struct wakeup_source * wakeup_source_create ( const char * name ) ;
extern void wakeup_source_drop ( struct wakeup_source * ws ) ;
extern void wakeup_source_destroy ( struct wakeup_source * ws ) ;
extern void wakeup_source_add ( struct wakeup_source * ws ) ;
extern void wakeup_source_remove ( struct wakeup_source * ws ) ;
extern struct wakeup_source * wakeup_source_register ( const char * name ) ;
extern void wakeup_source_unregister ( struct wakeup_source * ws ) ;
extern int device_wakeup_enable ( struct device * dev ) ;
extern int device_wakeup_disable ( struct device * dev ) ;
extern void device_set_wakeup_capable ( struct device * dev , bool capable ) ;
extern int device_init_wakeup ( struct device * dev , bool val ) ;
extern int device_set_wakeup_enable ( struct device * dev , bool enable ) ;
extern void __pm_stay_awake ( struct wakeup_source * ws ) ;
extern void pm_stay_awake ( struct device * dev ) ;
extern void __pm_relax ( struct wakeup_source * ws ) ;
extern void pm_relax ( struct device * dev ) ;
extern void __pm_wakeup_event ( struct wakeup_source * ws , unsigned int msec ) ;
extern void pm_wakeup_event ( struct device * dev , unsigned int msec ) ;
extern __attribute__ ( ( format ( printf , 2 , 3 ) ) ) int dev_set_name ( struct device * dev , const char * name , ... ) ;
void driver_init ( void ) ;
extern int device_register ( struct device * dev ) ;
extern void device_unregister ( struct device * dev ) ;
extern void device_initialize ( struct device * dev ) ;
extern int device_add ( struct device * dev ) ;
extern void device_del ( struct device * dev ) ;
extern int device_for_each_child ( struct device * dev , void * data , int ( * fn ) ( struct device * dev , void * data ) ) ;
extern struct device * device_find_child ( struct device * dev , void * data , int ( * match ) ( struct device * dev , void * data ) ) ;
extern int device_rename ( struct device * dev , const char * new_name ) ;
extern int device_move ( struct device * dev , struct device * new_parent , enum dpm_order dpm_order ) ;
extern const char * device_get_devnode ( struct device * dev , umode_t * mode , const char * * tmp ) ;
extern void * dev_get_drvdata ( const struct device * dev ) ;
extern int dev_set_drvdata ( struct device * dev , void * data ) ;
extern struct device * __root_device_register ( const char * name , struct module * owner ) ;
extern void root_device_unregister ( struct device * root ) ;
extern int device_bind_driver ( struct device * dev ) ;
extern void device_release_driver ( struct device * dev ) ;
extern int device_attach ( struct device * dev ) ;
extern int driver_attach ( struct device_driver * drv ) ;
extern int device_reprobe ( struct device * dev ) ;
extern struct device * device_create_vargs ( struct class_ * cls , struct device * parent , dev_t devt , void * drvdata , const char * fmt , va_list vargs ) ;
extern __attribute__ ( ( format ( printf , 5 , 6 ) ) ) struct device * device_create ( struct class_ * cls , struct device * parent , dev_t devt , void * drvdata , const char * fmt , ... ) ;
extern void device_destroy ( struct class_ * cls , dev_t devt ) ;
extern struct device * get_device ( struct device * dev ) ;
extern void put_device ( struct device * dev ) ;
extern int devtmpfs_create_node ( struct device * dev ) ;
extern int devtmpfs_delete_node ( struct device * dev ) ;
extern int devtmpfs_mount ( const char * mntdir ) ;
extern void device_shutdown ( void ) ;
extern const char * dev_driver_string ( const struct device * dev ) ;
extern __attribute__ ( ( format ( printf , 3 , 0 ) ) ) int dev_vprintk_emit ( int level , const struct device * dev , const char * fmt , va_list args ) ;
extern __attribute__ ( ( format ( printf , 3 , 4 ) ) ) int dev_printk_emit ( int level , const struct device * dev , const char * fmt , ... ) ;
extern __attribute__ ( ( format ( printf , 3 , 4 ) ) ) int dev_printk ( const char * level , const struct device * dev , const char * fmt , ... ) ;
extern __attribute__ ( ( format ( printf , 2 , 3 ) ) ) int dev_emerg ( const struct device * dev , const char * fmt , ... ) ;
extern __attribute__ ( ( format ( printf , 2 , 3 ) ) ) int dev_alert ( const struct device * dev , const char * fmt , ... ) ;
extern __attribute__ ( ( format ( printf , 2 , 3 ) ) ) int dev_crit ( const struct device * dev , const char * fmt , ... ) ;
extern __attribute__ ( ( format ( printf , 2 , 3 ) ) ) int dev_err ( const struct device * dev , const char * fmt , ... ) ;
extern __attribute__ ( ( format ( printf , 2 , 3 ) ) ) int dev_warn ( const struct device * dev , const char * fmt , ... ) ;
extern __attribute__ ( ( format ( printf , 2 , 3 ) ) ) int dev_notice ( const struct device * dev , const char * fmt , ... ) ;
extern __attribute__ ( ( format ( printf , 2 , 3 ) ) ) int _dev_info ( const struct device * dev , const char * fmt , ... ) ;
extern u64 clockevent_delta2ns ( unsigned long latch , struct clock_event_device * evt ) ;
extern void clockevents_register_device ( struct clock_event_device * dev ) ;
extern void clockevents_config ( struct clock_event_device * dev , u32 freq ) ;
extern void clockevents_config_and_register ( struct clock_event_device * dev , u32 freq , unsigned long min_delta , unsigned long max_delta ) ;
extern int clockevents_update_freq ( struct clock_event_device * ce , u32 freq ) ;
extern void clockevents_exchange_device ( struct clock_event_device * old , struct clock_event_device * new_ ) ;
extern void clockevents_set_mode ( struct clock_event_device * dev , enum clock_event_mode mode ) ;
extern int clockevents_register_notifier ( struct notifier_block * nb ) ;
extern int clockevents_program_event ( struct clock_event_device * dev , ktime_t expires , bool force ) ;
extern void clockevents_handle_noop ( struct clock_event_device * dev ) ;
extern void clockevents_suspend ( void ) ;
extern void clockevents_resume ( void ) ;
extern void clockevents_notify ( unsigned long reason , void * arg ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) tick_init ( void ) ;
extern int tick_is_oneshot_available ( void ) ;
extern struct tick_device * tick_get_device ( int cpu ) ;
extern int tick_init_highres ( void ) ;
extern int tick_program_event ( ktime_t expires , int force ) ;
extern void tick_setup_sched_timer ( void ) ;
extern void tick_cancel_sched_timer ( int cpu ) ;
extern struct tick_device * tick_get_broadcast_device ( void ) ;
extern struct cpumask * tick_get_broadcast_mask ( void ) ;
extern struct cpumask * tick_get_broadcast_oneshot_mask ( void ) ;
extern void tick_clock_notify ( void ) ;
extern int tick_check_oneshot_change ( int allow_nohz ) ;
extern struct tick_sched * tick_get_tick_sched ( int cpu ) ;
extern void tick_check_idle ( int cpu ) ;
extern int tick_oneshot_mode_active ( void ) ;
extern void tick_nohz_idle_enter ( void ) ;
extern void tick_nohz_idle_exit ( void ) ;
extern void tick_nohz_irq_exit ( void ) ;
extern ktime_t tick_nohz_get_sleep_length ( void ) ;
extern u64 get_cpu_idle_time_us ( int cpu , u64 * last_update_time ) ;
extern u64 get_cpu_iowait_time_us ( int cpu , u64 * last_update_time ) ;
extern void menu_hrtimer_cancel ( void ) ;
void __iowrite32_copy ( void * to , const void * from , size_t count ) ;
void __iowrite64_copy ( void * to , const void * from , size_t count ) ;
int ioremap_page_range ( unsigned long addr , unsigned long end , phys_addr_t phys_addr , pgprot_t prot ) ;
void * devm_ioport_map ( struct device * dev , unsigned long port , unsigned int nr ) ;
void devm_ioport_unmap ( struct device * dev , void * addr ) ;
void * devm_ioremap ( struct device * dev , resource_size_t offset , unsigned long size ) ;
void * devm_ioremap_nocache ( struct device * dev , resource_size_t offset , unsigned long size ) ;
void devm_iounmap ( struct device * dev , void * addr ) ;
int check_signature ( const volatile void * io_addr , const unsigned char * signature , int length ) ;
void devm_ioremap_release ( struct device * dev , void * res ) ;
extern struct pci_dev * alloc_pci_dev ( void ) ;
void pci_set_host_bridge_release ( struct pci_host_bridge * bridge , void ( * release_fn ) ( struct pci_host_bridge * ) , void * release_data ) ;
extern int raw_pci_read ( unsigned int domain , unsigned int bus , unsigned int devfn , int reg , int len , u32 * val ) ;
extern int raw_pci_write ( unsigned int domain , unsigned int bus , unsigned int devfn , int reg , int len , u32 val ) ;
extern void pcie_bus_configure_settings ( struct pci_bus * bus , u8 smpss ) ;
extern int no_pci_devices ( void ) ;
void pcibios_fixup_bus ( struct pci_bus * ) ;
int pcibios_enable_device ( struct pci_dev * , int mask ) ;
char * pcibios_setup ( char * str ) ;
resource_size_t pcibios_align_resource ( void * , const struct resource * , resource_size_t , resource_size_t ) ;
void pcibios_update_irq ( struct pci_dev * , int irq ) ;
void pci_fixup_cardbus ( struct pci_bus * ) ;
void pcibios_resource_to_bus ( struct pci_dev * dev , struct pci_bus_region * region , struct resource * res ) ;
void pcibios_bus_to_resource ( struct pci_dev * dev , struct resource * res , struct pci_bus_region * region ) ;
void pcibios_scan_specific_bus ( int busn ) ;
extern struct pci_bus * pci_find_bus ( int domain , int busnr ) ;
void pci_bus_add_devices ( const struct pci_bus * bus ) ;
struct pci_bus * pci_scan_bus_parented ( struct device * parent , int bus , struct pci_ops * ops , void * sysdata ) ;
struct pci_bus * pci_scan_bus ( int bus , struct pci_ops * ops , void * sysdata ) ;
struct pci_bus * pci_create_root_bus ( struct device * parent , int bus , struct pci_ops * ops , void * sysdata , struct list_head * resources ) ;
int pci_bus_insert_busn_res ( struct pci_bus * b , int bus , int busmax ) ;
int pci_bus_update_busn_res_end ( struct pci_bus * b , int busmax ) ;
void pci_bus_release_busn_res ( struct pci_bus * b ) ;
struct pci_bus * pci_scan_root_bus ( struct device * parent , int bus , struct pci_ops * ops , void * sysdata , struct list_head * resources ) ;
struct pci_bus * pci_add_new_bus ( struct pci_bus * parent , struct pci_dev * dev , int busnr ) ;
void pcie_update_link_speed ( struct pci_bus * bus , u16 link_status ) ;
struct pci_slot * pci_create_slot ( struct pci_bus * parent , int slot_nr , const char * name , struct hotplug_slot * hotplug ) ;
void pci_destroy_slot ( struct pci_slot * slot ) ;
void pci_renumber_slot ( struct pci_slot * slot , int slot_nr ) ;
int pci_scan_slot ( struct pci_bus * bus , int devfn ) ;
struct pci_dev * pci_scan_single_device ( struct pci_bus * bus , int devfn ) ;
void pci_device_add ( struct pci_dev * dev , struct pci_bus * bus ) ;
unsigned int pci_scan_child_bus ( struct pci_bus * bus ) ;
int pci_bus_add_device ( struct pci_dev * dev ) ;
void pci_read_bridge_bases ( struct pci_bus * child ) ;
struct resource * pci_find_parent_resource ( const struct pci_dev * dev , struct resource * res ) ;
u8 pci_swizzle_interrupt_pin ( const struct pci_dev * dev , u8 pin ) ;
int pci_get_interrupt_pin ( struct pci_dev * dev , struct pci_dev * * bridge ) ;
u8 pci_common_swizzle ( struct pci_dev * dev , u8 * pinp ) ;
extern struct pci_dev * pci_dev_get ( struct pci_dev * dev ) ;
extern void pci_dev_put ( struct pci_dev * dev ) ;
extern void pci_remove_bus ( struct pci_bus * b ) ;
extern void pci_stop_and_remove_bus_device ( struct pci_dev * dev ) ;
void pci_stop_root_bus ( struct pci_bus * bus ) ;
void pci_remove_root_bus ( struct pci_bus * bus ) ;
void pci_setup_cardbus ( struct pci_bus * bus ) ;
extern void pci_sort_breadthfirst ( void ) ;
enum pci_lost_interrupt_reason pci_lost_interrupt ( struct pci_dev * dev ) ;
int pci_find_capability ( struct pci_dev * dev , int cap ) ;
int pci_find_next_capability ( struct pci_dev * dev , u8 pos , int cap ) ;
int pci_find_ext_capability ( struct pci_dev * dev , int cap ) ;
int pci_find_next_ext_capability ( struct pci_dev * dev , int pos , int cap ) ;
int pci_find_ht_capability ( struct pci_dev * dev , int ht_cap ) ;
int pci_find_next_ht_capability ( struct pci_dev * dev , int pos , int ht_cap ) ;
struct pci_bus * pci_find_next_bus ( const struct pci_bus * from ) ;
struct pci_dev * pci_get_device ( unsigned int vendor , unsigned int device , struct pci_dev * from ) ;
struct pci_dev * pci_get_subsys ( unsigned int vendor , unsigned int device , unsigned int ss_vendor , unsigned int ss_device , struct pci_dev * from ) ;
struct pci_dev * pci_get_slot ( struct pci_bus * bus , unsigned int devfn ) ;
struct pci_dev * pci_get_domain_bus_and_slot ( int domain , unsigned int bus , unsigned int devfn ) ;
struct pci_dev * pci_get_class ( unsigned int class_ , struct pci_dev * from ) ;
int pci_dev_present ( const struct pci_device_id * ids ) ;
int pci_bus_read_config_byte ( struct pci_bus * bus , unsigned int devfn , int where , u8 * val ) ;
int pci_bus_read_config_word ( struct pci_bus * bus , unsigned int devfn , int where , u16 * val ) ;
int pci_bus_read_config_dword ( struct pci_bus * bus , unsigned int devfn , int where , u32 * val ) ;
int pci_bus_write_config_byte ( struct pci_bus * bus , unsigned int devfn , int where , u8 val ) ;
int pci_bus_write_config_word ( struct pci_bus * bus , unsigned int devfn , int where , u16 val ) ;
int pci_bus_write_config_dword ( struct pci_bus * bus , unsigned int devfn , int where , u32 val ) ;
struct pci_ops * pci_bus_set_ops ( struct pci_bus * bus , struct pci_ops * ops ) ;
int pcie_capability_read_word ( struct pci_dev * dev , int pos , u16 * val ) ;
int pcie_capability_read_dword ( struct pci_dev * dev , int pos , u32 * val ) ;
int pcie_capability_write_word ( struct pci_dev * dev , int pos , u16 val ) ;
int pcie_capability_write_dword ( struct pci_dev * dev , int pos , u32 val ) ;
int pcie_capability_clear_and_set_word ( struct pci_dev * dev , int pos , u16 clear , u16 set ) ;
int pcie_capability_clear_and_set_dword ( struct pci_dev * dev , int pos , u32 clear , u32 set ) ;
int pci_user_read_config_byte ( struct pci_dev * dev , int where , u8 * val ) ;
int pci_user_read_config_word ( struct pci_dev * dev , int where , u16 * val ) ;
int pci_user_read_config_dword ( struct pci_dev * dev , int where , u32 * val ) ;
int pci_user_write_config_byte ( struct pci_dev * dev , int where , u8 val ) ;
int pci_user_write_config_word ( struct pci_dev * dev , int where , u16 val ) ;
int pci_user_write_config_dword ( struct pci_dev * dev , int where , u32 val ) ;
int pci_enable_device ( struct pci_dev * dev ) ;
int pci_enable_device_io ( struct pci_dev * dev ) ;
int pci_enable_device_mem ( struct pci_dev * dev ) ;
int pci_reenable_device ( struct pci_dev * ) ;
int pcim_enable_device ( struct pci_dev * pdev ) ;
void pcim_pin_device ( struct pci_dev * pdev ) ;
void pci_disable_device ( struct pci_dev * dev ) ;
void pci_set_master ( struct pci_dev * dev ) ;
void pci_clear_master ( struct pci_dev * dev ) ;
int pci_set_pcie_reset_state ( struct pci_dev * dev , enum pcie_reset_state state ) ;
int pci_set_cacheline_size ( struct pci_dev * dev ) ;
int pci_set_mwi ( struct pci_dev * dev ) ;
int pci_try_set_mwi ( struct pci_dev * dev ) ;
void pci_clear_mwi ( struct pci_dev * dev ) ;
void pci_intx ( struct pci_dev * dev , int enable ) ;
bool pci_intx_mask_supported ( struct pci_dev * dev ) ;
bool pci_check_and_mask_intx ( struct pci_dev * dev ) ;
bool pci_check_and_unmask_intx ( struct pci_dev * dev ) ;
void pci_msi_off ( struct pci_dev * dev ) ;
int pci_set_dma_max_seg_size ( struct pci_dev * dev , unsigned int size ) ;
int pci_set_dma_seg_boundary ( struct pci_dev * dev , unsigned long mask ) ;
int pcix_get_max_mmrbc ( struct pci_dev * dev ) ;
int pcix_get_mmrbc ( struct pci_dev * dev ) ;
int pcix_set_mmrbc ( struct pci_dev * dev , int mmrbc ) ;
int pcie_get_readrq ( struct pci_dev * dev ) ;
int pcie_set_readrq ( struct pci_dev * dev , int rq ) ;
int pcie_get_mps ( struct pci_dev * dev ) ;
int pcie_set_mps ( struct pci_dev * dev , int mps ) ;
int __pci_reset_function ( struct pci_dev * dev ) ;
int __pci_reset_function_locked ( struct pci_dev * dev ) ;
int pci_reset_function ( struct pci_dev * dev ) ;
void pci_update_resource ( struct pci_dev * dev , int resno ) ;
int pci_assign_resource ( struct pci_dev * dev , int i ) ;
int pci_reassign_resource ( struct pci_dev * dev , int i , resource_size_t add_size , resource_size_t align ) ;
int pci_select_bars ( struct pci_dev * dev , unsigned long flags ) ;
int pci_enable_rom ( struct pci_dev * pdev ) ;
void pci_disable_rom ( struct pci_dev * pdev ) ;
void * pci_map_rom ( struct pci_dev * pdev , size_t * size ) ;
void pci_unmap_rom ( struct pci_dev * pdev , void * rom ) ;
size_t pci_get_rom_size ( struct pci_dev * pdev , void * rom , size_t size ) ;
int pci_save_state ( struct pci_dev * dev ) ;
void pci_restore_state ( struct pci_dev * dev ) ;
struct pci_saved_state * pci_store_saved_state ( struct pci_dev * dev ) ;
int pci_load_saved_state ( struct pci_dev * dev , struct pci_saved_state * state ) ;
int pci_load_and_free_saved_state ( struct pci_dev * dev , struct pci_saved_state * * state ) ;
int __pci_complete_power_transition ( struct pci_dev * dev , pci_power_t state ) ;
int pci_set_power_state ( struct pci_dev * dev , pci_power_t state ) ;
pci_power_t pci_choose_state ( struct pci_dev * dev , pm_message_t state ) ;
bool pci_pme_capable ( struct pci_dev * dev , pci_power_t state ) ;
void pci_pme_active ( struct pci_dev * dev , bool enable ) ;
int __pci_enable_wake ( struct pci_dev * dev , pci_power_t state , bool runtime , bool enable ) ;
int pci_wake_from_d3 ( struct pci_dev * dev , bool enable ) ;
pci_power_t pci_target_state ( struct pci_dev * dev ) ;
int pci_prepare_to_sleep ( struct pci_dev * dev ) ;
int pci_back_from_sleep ( struct pci_dev * dev ) ;
bool pci_dev_run_wake ( struct pci_dev * dev ) ;
bool pci_check_pme_status ( struct pci_dev * dev ) ;
void pci_pme_wakeup_bus ( struct pci_bus * bus ) ;
void pci_enable_ido ( struct pci_dev * dev , unsigned long type ) ;
void pci_disable_ido ( struct pci_dev * dev , unsigned long type ) ;
int pci_enable_obff ( struct pci_dev * dev , enum pci_obff_signal_type ) ;
void pci_disable_obff ( struct pci_dev * dev ) ;
int pci_enable_ltr ( struct pci_dev * dev ) ;
void pci_disable_ltr ( struct pci_dev * dev ) ;
int pci_set_ltr ( struct pci_dev * dev , int snoop_lat_ns , int nosnoop_lat_ns ) ;
void set_pcie_port_type ( struct pci_dev * pdev ) ;
void set_pcie_hotplug_bridge ( struct pci_dev * pdev ) ;
int pci_bus_find_capability ( struct pci_bus * bus , unsigned int devfn , int cap ) ;
unsigned int pci_rescan_bus_bridge_resize ( struct pci_dev * bridge ) ;
unsigned int pci_rescan_bus ( struct pci_bus * bus ) ;
ssize_t pci_read_vpd ( struct pci_dev * dev , loff_t pos , size_t count , void * buf ) ;
ssize_t pci_write_vpd ( struct pci_dev * dev , loff_t pos , size_t count , const void * buf ) ;
int pci_vpd_truncate ( struct pci_dev * dev , size_t size ) ;
resource_size_t pcibios_retrieve_fw_addr ( struct pci_dev * dev , int idx ) ;
void pci_bus_assign_resources ( const struct pci_bus * bus ) ;
void pci_bus_size_bridges ( struct pci_bus * bus ) ;
int pci_claim_resource ( struct pci_dev * , int ) ;
void pci_assign_unassigned_resources ( void ) ;
void pci_assign_unassigned_bridge_resources ( struct pci_dev * bridge ) ;
void pci_assign_unassigned_bus_resources ( struct pci_bus * bus ) ;
void pdev_enable_device ( struct pci_dev * ) ;
int pci_enable_resources ( struct pci_dev * , int mask ) ;
void pci_fixup_irqs ( u8 ( * ) ( struct pci_dev * , u8 * ) , int ( * ) ( const struct pci_dev * , u8 , u8 ) ) ;
int pci_request_regions ( struct pci_dev * , const char * ) ;
int pci_request_regions_exclusive ( struct pci_dev * , const char * ) ;
void pci_release_regions ( struct pci_dev * ) ;
int pci_request_region ( struct pci_dev * , int , const char * ) ;
int pci_request_region_exclusive ( struct pci_dev * , int , const char * ) ;
void pci_release_region ( struct pci_dev * , int ) ;
int pci_request_selected_regions ( struct pci_dev * , int , const char * ) ;
int pci_request_selected_regions_exclusive ( struct pci_dev * , int , const char * ) ;
void pci_release_selected_regions ( struct pci_dev * , int ) ;
void pci_add_resource ( struct list_head * resources , struct resource * res ) ;
void pci_add_resource_offset ( struct list_head * resources , struct resource * res , resource_size_t offset ) ;
void pci_free_resource_list ( struct list_head * resources ) ;
void pci_bus_add_resource ( struct pci_bus * bus , struct resource * res , unsigned int flags ) ;
struct resource * pci_bus_resource_n ( const struct pci_bus * bus , int n ) ;
void pci_bus_remove_resources ( struct pci_bus * bus ) ;
int pci_bus_alloc_resource ( struct pci_bus * bus , struct resource * res , resource_size_t size , resource_size_t align , resource_size_t min , unsigned int type_mask , resource_size_t ( * alignf ) ( void * , const struct resource * , resource_size_t , resource_size_t ) , void * alignf_data ) ;
void pci_enable_bridges ( struct pci_bus * bus ) ;
int __pci_register_driver ( struct pci_driver * , struct module * , const char * mod_name ) ;
void pci_unregister_driver ( struct pci_driver * dev ) ;
struct pci_driver * pci_dev_driver ( const struct pci_dev * dev ) ;
int pci_add_dynid ( struct pci_driver * drv , unsigned int vendor , unsigned int device , unsigned int subvendor , unsigned int subdevice , unsigned int class_ , unsigned int class_mask , unsigned long driver_data ) ;
const struct pci_device_id * pci_match_id ( const struct pci_device_id * ids , struct pci_dev * dev ) ;
int pci_scan_bridge ( struct pci_bus * bus , struct pci_dev * dev , int max , int pass ) ;
void pci_walk_bus ( struct pci_bus * top , int ( * cb ) ( struct pci_dev * , void * ) , void * userdata ) ;
int pci_cfg_space_size_ext ( struct pci_dev * dev ) ;
int pci_cfg_space_size ( struct pci_dev * dev ) ;
unsigned char pci_bus_max_busnr ( struct pci_bus * bus ) ;
void pci_setup_bridge ( struct pci_bus * bus ) ;
resource_size_t pcibios_window_alignment ( struct pci_bus * bus , unsigned long type ) ;
int pci_set_vga_state ( struct pci_dev * pdev , bool decode , unsigned int command_bits , u32 flags ) ;
struct dma_pool * dma_pool_create ( const char * name , struct device * dev , size_t size , size_t align , size_t allocation ) ;
void dma_pool_destroy ( struct dma_pool * pool ) ;
void * dma_pool_alloc ( struct dma_pool * pool , gfp_t mem_flags , dma_addr_t * handle ) ;
void dma_pool_free ( struct dma_pool * pool , void * vaddr , dma_addr_t addr ) ;
struct dma_pool * dmam_pool_create ( const char * name , struct device * dev , size_t size , size_t align , size_t allocation ) ;
void dmam_pool_destroy ( struct dma_pool * pool ) ;
extern int pci_enable_msi_block ( struct pci_dev * dev , unsigned int nvec ) ;
extern void pci_msi_shutdown ( struct pci_dev * dev ) ;
extern void pci_disable_msi ( struct pci_dev * dev ) ;
extern int pci_msix_table_size ( struct pci_dev * dev ) ;
extern int pci_enable_msix ( struct pci_dev * dev , struct msix_entry * entries , int nvec ) ;
extern void pci_msix_shutdown ( struct pci_dev * dev ) ;
extern void pci_disable_msix ( struct pci_dev * dev ) ;
extern void msi_remove_pci_irq_vectors ( struct pci_dev * dev ) ;
extern void pci_restore_msi_state ( struct pci_dev * dev ) ;
extern int pci_msi_enabled ( void ) ;
extern int pcie_aspm_enabled ( void ) ;
extern bool pcie_aspm_support_enabled ( void ) ;
void pci_no_aer ( void ) ;
bool pci_aer_available ( void ) ;
int ht_create_irq ( struct pci_dev * dev , int idx ) ;
void ht_destroy_irq ( unsigned int irq ) ;
extern void pci_cfg_access_lock ( struct pci_dev * dev ) ;
extern bool pci_cfg_access_trylock ( struct pci_dev * dev ) ;
extern void pci_cfg_access_unlock ( struct pci_dev * dev ) ;
extern void pci_register_set_vga_state ( arch_set_vga_state_t func ) ;
extern int debug_locks_off ( void ) ;
extern int arch_uprobe_analyze_insn ( struct arch_uprobe * aup , struct mm_struct * mm , unsigned long addr ) ;
extern int arch_uprobe_pre_xol ( struct arch_uprobe * aup , struct pt_regs * regs ) ;
extern int arch_uprobe_post_xol ( struct arch_uprobe * aup , struct pt_regs * regs ) ;
extern bool arch_uprobe_xol_was_trapped ( struct task_struct * tsk ) ;
extern int arch_uprobe_exception_notify ( struct notifier_block * self , unsigned long val , void * data ) ;
extern void arch_uprobe_abort_xol ( struct arch_uprobe * aup , struct pt_regs * regs ) ;
int add_range ( struct range * range , int az , int nr_range , u64 start , u64 end ) ;
int add_range_with_merge ( struct range * range , int az , int nr_range , u64 start , u64 end ) ;
void subtract_range ( struct range * range , int az , u64 start , u64 end ) ;
int clean_sort_range ( struct range * range , int az ) ;
void sort_range ( struct range * range , int nr_range ) ;
extern struct mm_struct * pgd_page_get_mm ( struct page * page ) ;
pmd_t * populate_extra_pmd ( unsigned long vaddr ) ;
pte_t * populate_extra_pte ( unsigned long vaddr ) ;
extern void paging_init ( void ) ;
void set_pte_vaddr_pud ( pud_t * pud_page , unsigned long vaddr , pte_t new_pte ) ;
extern void sync_global_pgds ( unsigned long start , unsigned long end ) ;
extern int kern_addr_valid ( unsigned long addr ) ;
extern void cleanup_highmap ( void ) ;
extern int ptep_set_access_flags ( struct vm_area_struct * vma , unsigned long address , pte_t * ptep , pte_t entry , int dirty ) ;
extern int ptep_test_and_clear_young ( struct vm_area_struct * vma , unsigned long addr , pte_t * ptep ) ;
extern int ptep_clear_flush_young ( struct vm_area_struct * vma , unsigned long address , pte_t * ptep ) ;
extern int pmdp_set_access_flags ( struct vm_area_struct * vma , unsigned long address , pmd_t * pmdp , pmd_t entry , int dirty ) ;
extern int pmdp_test_and_clear_young ( struct vm_area_struct * vma , unsigned long addr , pmd_t * pmdp ) ;
extern int pmdp_clear_flush_young ( struct vm_area_struct * vma , unsigned long address , pmd_t * pmdp ) ;
extern void pmdp_splitting_flush ( struct vm_area_struct * vma , unsigned long addr , pmd_t * pmdp ) ;
extern pte_t ptep_clear_flush ( struct vm_area_struct * vma , unsigned long address , pte_t * ptep ) ;
extern pmd_t pmdp_clear_flush ( struct vm_area_struct * vma , unsigned long address , pmd_t * pmdp ) ;
extern void pgtable_trans_huge_deposit ( struct mm_struct * mm , pgtable_t pgtable ) ;
extern pgtable_t pgtable_trans_huge_withdraw ( struct mm_struct * mm ) ;
extern void pmdp_invalidate ( struct vm_area_struct * vma , unsigned long address , pmd_t * pmdp ) ;
void pgd_clear_bad ( pgd_t * ) ;
void pud_clear_bad ( pud_t * ) ;
void pmd_clear_bad ( pmd_t * ) ;
extern int track_pfn_remap ( struct vm_area_struct * vma , pgprot_t * prot , unsigned long pfn , unsigned long addr , unsigned long size ) ;
extern int track_pfn_insert ( struct vm_area_struct * vma , pgprot_t * prot , unsigned long pfn ) ;
extern int track_pfn_copy ( struct vm_area_struct * vma ) ;
extern void untrack_pfn ( struct vm_area_struct * vma , unsigned long pfn , unsigned long size ) ;
u64 stable_page_flags ( struct page * page ) ;
extern void cancel_dirty_page ( struct page * page , unsigned int account_size ) ;
int test_clear_page_writeback ( struct page * page ) ;
int test_set_page_writeback ( struct page * page ) ;
extern int do_huge_pmd_anonymous_page ( struct mm_struct * mm , struct vm_area_struct * vma , unsigned long address , pmd_t * pmd , unsigned int flags ) ;
extern int copy_huge_pmd ( struct mm_struct * dst_mm , struct mm_struct * src_mm , pmd_t * dst_pmd , pmd_t * src_pmd , unsigned long addr , struct vm_area_struct * vma ) ;
extern void huge_pmd_set_accessed ( struct mm_struct * mm , struct vm_area_struct * vma , unsigned long address , pmd_t * pmd , pmd_t orig_pmd , int dirty ) ;
extern int do_huge_pmd_wp_page ( struct mm_struct * mm , struct vm_area_struct * vma , unsigned long address , pmd_t * pmd , pmd_t orig_pmd ) ;
extern struct page * follow_trans_huge_pmd ( struct vm_area_struct * vma , unsigned long addr , pmd_t * pmd , unsigned int flags ) ;
extern int zap_huge_pmd ( struct mmu_gather * tlb , struct vm_area_struct * vma , pmd_t * pmd , unsigned long addr ) ;
extern int mincore_huge_pmd ( struct vm_area_struct * vma , pmd_t * pmd , unsigned long addr , unsigned long end , unsigned char * vec ) ;
extern int move_huge_pmd ( struct vm_area_struct * vma , struct vm_area_struct * new_vma , unsigned long old_addr , unsigned long new_addr , unsigned long old_end , pmd_t * old_pmd , pmd_t * new_pmd ) ;
extern int change_huge_pmd ( struct vm_area_struct * vma , pmd_t * pmd , unsigned long addr , pgprot_t newprot , int prot_numa ) ;
extern pmd_t * page_check_address_pmd ( struct page * page , struct mm_struct * mm , unsigned long address , enum page_check_address_pmd_flag flag ) ;
extern bool is_vma_temporary_stack ( struct vm_area_struct * vma ) ;
extern int copy_pte_range ( struct mm_struct * dst_mm , struct mm_struct * src_mm , pmd_t * dst_pmd , pmd_t * src_pmd , struct vm_area_struct * vma , unsigned long addr , unsigned long end ) ;
extern int handle_pte_fault ( struct mm_struct * mm , struct vm_area_struct * vma , unsigned long address , pte_t * pte , pmd_t * pmd , unsigned int flags ) ;
extern int split_huge_page ( struct page * page ) ;
extern void __split_huge_page_pmd ( struct vm_area_struct * vma , unsigned long address , pmd_t * pmd ) ;
extern void split_huge_page_pmd_mm ( struct mm_struct * mm , unsigned long address , pmd_t * pmd ) ;
extern int hugepage_madvise ( struct vm_area_struct * vma , unsigned long * vm_flags , int advice ) ;
extern void __vma_adjust_trans_huge ( struct vm_area_struct * vma , unsigned long start , unsigned long end , long adjust_next ) ;
extern int __pmd_trans_huge_lock ( pmd_t * pmd , struct vm_area_struct * vma ) ;
extern int do_huge_pmd_numa_page ( struct mm_struct * mm , struct vm_area_struct * vma , unsigned long addr , pmd_t pmd , pmd_t * pmdp ) ;
extern int page_is_ram ( unsigned long pfn ) ;
struct page * vmalloc_to_page ( const void * addr ) ;
unsigned long vmalloc_to_pfn ( const void * addr ) ;
extern int is_vmalloc_or_module_addr ( const void * x ) ;
extern bool __get_page_tail ( struct page * page ) ;
void put_page ( struct page * page ) ;
void put_pages_list ( struct list_head * pages ) ;
void split_page ( struct page * page , unsigned int order ) ;
int split_free_page ( struct page * page ) ;
extern void all_vm_events ( unsigned long * ) ;
extern void vm_events_fold_cpu ( int cpu ) ;
extern unsigned long global_reclaimable_pages ( void ) ;
extern unsigned long zone_reclaimable_pages ( struct zone * zone ) ;
extern void zone_statistics ( struct zone * , struct zone * , gfp_t gfp ) ;
extern void inc_zone_state ( struct zone * , enum zone_stat_item ) ;
void __mod_zone_page_state ( struct zone * , enum zone_stat_item item , int ) ;
void __inc_zone_page_state ( struct page * , enum zone_stat_item ) ;
void __dec_zone_page_state ( struct page * , enum zone_stat_item ) ;
void mod_zone_page_state ( struct zone * , enum zone_stat_item , int ) ;
void inc_zone_page_state ( struct page * , enum zone_stat_item ) ;
void dec_zone_page_state ( struct page * , enum zone_stat_item ) ;
extern void inc_zone_state ( struct zone * , enum zone_stat_item ) ;
extern void __inc_zone_state ( struct zone * , enum zone_stat_item ) ;
extern void dec_zone_state ( struct zone * , enum zone_stat_item ) ;
extern void __dec_zone_state ( struct zone * , enum zone_stat_item ) ;
void refresh_cpu_vm_stats ( int ) ;
void refresh_zone_stat_thresholds ( void ) ;
void drain_zonestat ( struct zone * zone , struct per_cpu_pageset * ) ;
int calculate_pressure_threshold ( struct zone * zone ) ;
int calculate_normal_threshold ( struct zone * zone ) ;
void set_pgdat_percpu_threshold ( pg_data_t * pgdat , int ( * calculate_pressure ) ( struct zone * ) ) ;
extern struct address_space * __page_file_mapping ( struct page * ) ;
extern unsigned long __page_file_index ( struct page * page ) ;
extern void pagefault_out_of_memory ( void ) ;
extern void show_free_areas ( unsigned int flags ) ;
extern bool skip_free_areas_node ( unsigned int flags , int nid ) ;
int shmem_zero_setup ( struct vm_area_struct * ) ;
extern int can_do_mlock ( void ) ;
extern int user_shm_lock ( size_t , struct user_struct * ) ;
extern void user_shm_unlock ( size_t , struct user_struct * ) ;
struct page * vm_normal_page ( struct vm_area_struct * vma , unsigned long addr , pte_t pte ) ;
int zap_vma_ptes ( struct vm_area_struct * vma , unsigned long address , unsigned long size ) ;
void zap_page_range ( struct vm_area_struct * vma , unsigned long address , unsigned long size , struct zap_details * ) ;
void unmap_vmas ( struct mmu_gather * tlb , struct vm_area_struct * start_vma , unsigned long start , unsigned long end ) ;
int walk_page_range ( unsigned long addr , unsigned long end , struct mm_walk * walk ) ;
void free_pgd_range ( struct mmu_gather * tlb , unsigned long addr , unsigned long end , unsigned long floor , unsigned long ceiling ) ;
int copy_page_range ( struct mm_struct * dst , struct mm_struct * src , struct vm_area_struct * vma ) ;
void unmap_mapping_range ( struct address_space * mapping , loff_t const holebegin , loff_t const holelen , int even_cows ) ;
int follow_pfn ( struct vm_area_struct * vma , unsigned long address , unsigned long * pfn ) ;
int follow_phys ( struct vm_area_struct * vma , unsigned long address , unsigned int flags , unsigned long * prot , resource_size_t * phys ) ;
int generic_access_phys ( struct vm_area_struct * vma , unsigned long addr , void * buf , int len , int write ) ;
extern void truncate_pagecache ( struct inode * inode , loff_t old , loff_t new_ ) ;
extern void truncate_setsize ( struct inode * inode , loff_t newsize ) ;
void truncate_pagecache_range ( struct inode * inode , loff_t offset , loff_t end ) ;
int truncate_inode_page ( struct address_space * mapping , struct page * page ) ;
int generic_error_remove_page ( struct address_space * mapping , struct page * page ) ;
int invalidate_inode_page ( struct page * page ) ;
extern int handle_mm_fault ( struct mm_struct * mm , struct vm_area_struct * vma , unsigned long address , unsigned int flags ) ;
extern int fixup_user_fault ( struct task_struct * tsk , struct mm_struct * mm , unsigned long address , unsigned int fault_flags ) ;
extern int make_pages_present ( unsigned long addr , unsigned long end ) ;
extern int access_process_vm ( struct task_struct * tsk , unsigned long addr , void * buf , int len , int write ) ;
extern int access_remote_vm ( struct mm_struct * mm , unsigned long addr , void * buf , int len , int write ) ;
int __get_user_pages ( struct task_struct * tsk , struct mm_struct * mm , unsigned long start , int len , unsigned int foll_flags , struct page * * pages , struct vm_area_struct * * vmas , int * nonblocking ) ;
int get_user_pages ( struct task_struct * tsk , struct mm_struct * mm , unsigned long start , int nr_pages , int write , int force , struct page * * pages , struct vm_area_struct * * vmas ) ;
int get_user_pages_fast ( unsigned long start , int nr_pages , int write , struct page * * pages ) ;
int get_kernel_pages ( const struct kvec * iov , int nr_pages , int write , struct page * * pages ) ;
int get_kernel_page ( unsigned long start , int write , struct page * * pages ) ;
struct page * get_dump_page ( unsigned long addr ) ;
extern int try_to_release_page ( struct page * page , gfp_t gfp_mask ) ;
extern void do_invalidatepage ( struct page * page , unsigned long offset ) ;
int __set_page_dirty_nobuffers ( struct page * page ) ;
int __set_page_dirty_no_writeback ( struct page * page ) ;
int redirty_page_for_writepage ( struct writeback_control * wbc , struct page * page ) ;
void account_page_dirtied ( struct page * page , struct address_space * mapping ) ;
void account_page_writeback ( struct page * page ) ;
int set_page_dirty ( struct page * page ) ;
int set_page_dirty_lock ( struct page * page ) ;
int clear_page_dirty_for_io ( struct page * page ) ;
extern pid_t vm_is_stack ( struct task_struct * task , struct vm_area_struct * vma , int in_group ) ;
extern unsigned long move_page_tables ( struct vm_area_struct * vma , unsigned long old_addr , struct vm_area_struct * new_vma , unsigned long new_addr , unsigned long len , bool need_rmap_locks ) ;
extern unsigned long do_mremap ( unsigned long addr , unsigned long old_len , unsigned long new_len , unsigned long flags , unsigned long new_addr ) ;
extern unsigned long change_protection ( struct vm_area_struct * vma , unsigned long start , unsigned long end , pgprot_t newprot , int dirty_accountable , int prot_numa ) ;
extern int mprotect_fixup ( struct vm_area_struct * vma , struct vm_area_struct * * pprev , unsigned long start , unsigned long end , unsigned long newflags ) ;
int __get_user_pages_fast ( unsigned long start , int nr_pages , int write , struct page * * pages ) ;
void sync_mm_rss ( struct mm_struct * mm ) ;
int vma_wants_writenotify ( struct vm_area_struct * vma ) ;
extern pte_t * __get_locked_pte ( struct mm_struct * mm , unsigned long addr , spinlock_t * * ptl ) ;
int __pud_alloc ( struct mm_struct * mm , pgd_t * pgd , unsigned long address ) ;
int __pmd_alloc ( struct mm_struct * mm , pud_t * pud , unsigned long address ) ;
int __pte_alloc ( struct mm_struct * mm , struct vm_area_struct * vma , pmd_t * pmd , unsigned long address ) ;
int __pte_alloc_kernel ( pmd_t * pmd , unsigned long address ) ;
extern void free_area_init ( unsigned long * zones_size ) ;
extern void free_area_init_node ( int nid , unsigned long * zones_size , unsigned long zone_start_pfn , unsigned long * zholes_size ) ;
extern void free_initmem ( void ) ;
extern void free_area_init_nodes ( unsigned long * max_zone_pfn ) ;
unsigned long node_map_pfn_alignment ( void ) ;
unsigned long __absent_pages_in_range ( int nid , unsigned long start_pfn , unsigned long end_pfn ) ;
extern unsigned long absent_pages_in_range ( unsigned long start_pfn , unsigned long end_pfn ) ;
extern void get_pfn_range_for_nid ( unsigned int nid , unsigned long * start_pfn , unsigned long * end_pfn ) ;
extern unsigned long find_min_pfn_with_active_regions ( void ) ;
extern void free_bootmem_with_active_regions ( int nid , unsigned long max_low_pfn ) ;
extern void sparse_memory_present_with_active_regions ( int nid ) ;
extern int __attribute__ ( ( __section__ ( ".meminit.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) early_pfn_to_nid ( unsigned long pfn ) ;
extern void set_dma_reserve ( unsigned long new_dma_reserve ) ;
extern void memmap_init_zone ( unsigned long , int , unsigned long , unsigned long , enum memmap_context ) ;
extern void setup_per_zone_wmarks ( void ) ;
extern int __attribute__ ( ( __section__ ( ".meminit.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) init_per_zone_wmark_min ( void ) ;
extern void mem_init ( void ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) mmap_init ( void ) ;
extern void show_mem ( unsigned int flags ) ;
extern void si_meminfo ( struct sysinfo * val ) ;
extern void si_meminfo_node ( struct sysinfo * val , int nid ) ;
extern __attribute__ ( ( format ( printf , 3 , 4 ) ) ) void warn_alloc_failed ( gfp_t gfp_mask , int order , const char * fmt , ... ) ;
extern void setup_per_cpu_pageset ( void ) ;
extern void zone_pcp_update ( struct zone * zone ) ;
extern void zone_pcp_reset ( struct zone * zone ) ;
extern int nommu_shrink_inode_mappings ( struct inode * , size_t , size_t ) ;
void vma_interval_tree_insert ( struct vm_area_struct * node , struct rb_root * root ) ;
void vma_interval_tree_insert_after ( struct vm_area_struct * node , struct vm_area_struct * prev , struct rb_root * root ) ;
void vma_interval_tree_remove ( struct vm_area_struct * node , struct rb_root * root ) ;
struct vm_area_struct * vma_interval_tree_iter_first ( struct rb_root * root , unsigned long start , unsigned long last ) ;
struct vm_area_struct * vma_interval_tree_iter_next ( struct vm_area_struct * node , unsigned long start , unsigned long last ) ;
void anon_vma_interval_tree_insert ( struct anon_vma_chain * node , struct rb_root * root ) ;
void anon_vma_interval_tree_remove ( struct anon_vma_chain * node , struct rb_root * root ) ;
struct anon_vma_chain * anon_vma_interval_tree_iter_first ( struct rb_root * root , unsigned long start , unsigned long last ) ;
struct anon_vma_chain * anon_vma_interval_tree_iter_next ( struct anon_vma_chain * node , unsigned long start , unsigned long last ) ;
extern int __vm_enough_memory ( struct mm_struct * mm , long pages , int cap_sys_admin ) ;
extern int vma_adjust ( struct vm_area_struct * vma , unsigned long start , unsigned long end , unsigned long pgoff , struct vm_area_struct * insert ) ;
extern struct vm_area_struct * vma_merge ( struct mm_struct * , struct vm_area_struct * prev , unsigned long addr , unsigned long end , unsigned long vm_flags , struct anon_vma * , struct file * , unsigned long , struct mempolicy * ) ;
extern struct anon_vma * find_mergeable_anon_vma ( struct vm_area_struct * ) ;
extern int split_vma ( struct mm_struct * , struct vm_area_struct * , unsigned long addr , int new_below ) ;
extern int insert_vm_struct ( struct mm_struct * , struct vm_area_struct * ) ;
extern void __vma_link_rb ( struct mm_struct * , struct vm_area_struct * , struct rb_node * * , struct rb_node * ) ;
extern void unlink_file_vma ( struct vm_area_struct * ) ;
extern struct vm_area_struct * copy_vma ( struct vm_area_struct * * , unsigned long addr , unsigned long len , unsigned long pgoff , bool * need_rmap_locks ) ;
extern void exit_mmap ( struct mm_struct * ) ;
extern int mm_take_all_locks ( struct mm_struct * mm ) ;
extern void mm_drop_all_locks ( struct mm_struct * mm ) ;
extern void set_mm_exe_file ( struct mm_struct * mm , struct file * new_exe_file ) ;
extern struct file * get_mm_exe_file ( struct mm_struct * mm ) ;
extern int may_expand_vm ( struct mm_struct * mm , unsigned long npages ) ;
extern int install_special_mapping ( struct mm_struct * mm , unsigned long addr , unsigned long len , unsigned long flags , struct page * * pages ) ;
extern unsigned long get_unmapped_area ( struct file * , unsigned long , unsigned long , unsigned long , unsigned long ) ;
extern unsigned long mmap_region ( struct file * file , unsigned long addr , unsigned long len , unsigned long flags , vm_flags_t vm_flags , unsigned long pgoff ) ;
extern unsigned long do_mmap_pgoff ( struct file * , unsigned long , unsigned long , unsigned long , unsigned long , unsigned long ) ;
extern int do_munmap ( struct mm_struct * , unsigned long , size_t ) ;
extern unsigned long vm_brk ( unsigned long , unsigned long ) ;
extern int vm_munmap ( unsigned long , size_t ) ;
extern unsigned long vm_mmap ( struct file * , unsigned long , unsigned long , unsigned long , unsigned long , unsigned long ) ;
extern unsigned long unmapped_area ( struct vm_unmapped_area_info * info ) ;
extern unsigned long unmapped_area_topdown ( struct vm_unmapped_area_info * info ) ;
extern void truncate_inode_pages ( struct address_space * , loff_t ) ;
extern void truncate_inode_pages_range ( struct address_space * , loff_t lstart , loff_t lend ) ;
extern int filemap_fault ( struct vm_area_struct * , struct vm_fault * ) ;
extern int filemap_page_mkwrite ( struct vm_area_struct * vma , struct vm_fault * vmf ) ;
int write_one_page ( struct page * page , int wait ) ;
void task_dirty_inc ( struct task_struct * tsk ) ;
int force_page_cache_readahead ( struct address_space * mapping , struct file * filp , unsigned long offset , unsigned long nr_to_read ) ;
void page_cache_sync_readahead ( struct address_space * mapping , struct file_ra_state * ra , struct file * filp , unsigned long offset , unsigned long size ) ;
void page_cache_async_readahead ( struct address_space * mapping , struct file_ra_state * ra , struct file * filp , struct page * pg , unsigned long offset , unsigned long size ) ;
unsigned long max_sane_readahead ( unsigned long nr ) ;
unsigned long ra_submit ( struct file_ra_state * ra , struct address_space * mapping , struct file * filp ) ;
extern int expand_stack ( struct vm_area_struct * vma , unsigned long address ) ;
extern int expand_downwards ( struct vm_area_struct * vma , unsigned long address ) ;
extern struct vm_area_struct * find_vma ( struct mm_struct * mm , unsigned long addr ) ;
extern struct vm_area_struct * find_vma_prev ( struct mm_struct * mm , unsigned long addr , struct vm_area_struct * * pprev ) ;
pgprot_t vm_get_page_prot ( unsigned long vm_flags ) ;
struct vm_area_struct * find_extend_vma ( struct mm_struct * , unsigned long addr ) ;
int remap_pfn_range ( struct vm_area_struct * , unsigned long addr , unsigned long pfn , unsigned long size , pgprot_t ) ;
int vm_insert_page ( struct vm_area_struct * , unsigned long addr , struct page * ) ;
int vm_insert_pfn ( struct vm_area_struct * vma , unsigned long addr , unsigned long pfn ) ;
int vm_insert_mixed ( struct vm_area_struct * vma , unsigned long addr , unsigned long pfn ) ;
struct page * follow_page ( struct vm_area_struct * , unsigned long address , unsigned int foll_flags ) ;
extern int apply_to_page_range ( struct mm_struct * mm , unsigned long address , unsigned long size , pte_fn_t fn , void * data ) ;
void vm_stat_account ( struct mm_struct * , unsigned long , struct file * , long ) ;
extern struct vm_area_struct * get_gate_vma ( struct mm_struct * mm ) ;
int in_gate_area_no_mm ( unsigned long addr ) ;
int in_gate_area ( struct mm_struct * mm , unsigned long addr ) ;
int drop_caches_sysctl_handler ( struct ctl_table * , int , void * , size_t * , loff_t * ) ;
unsigned long shrink_slab ( struct shrink_control * shrink , unsigned long nr_pages_scanned , unsigned long lru_pages ) ;
const char * arch_vma_name ( struct vm_area_struct * vma ) ;
void print_vma_addr ( char * prefix , unsigned long rip ) ;
void sparse_mem_maps_populate_node ( struct page * * map_map , unsigned long pnum_begin , unsigned long pnum_end , unsigned long map_count , int nodeid ) ;
struct page * sparse_mem_map_populate ( unsigned long pnum , int nid ) ;
pgd_t * vmemmap_pgd_populate ( unsigned long addr , int node ) ;
pud_t * vmemmap_pud_populate ( pgd_t * pgd , unsigned long addr , int node ) ;
pmd_t * vmemmap_pmd_populate ( pud_t * pud , unsigned long addr , int node ) ;
pte_t * vmemmap_pte_populate ( pmd_t * pmd , unsigned long addr , int node ) ;
void * vmemmap_alloc_block ( unsigned long size , int node ) ;
void * vmemmap_alloc_block_buf ( unsigned long size , int node ) ;
void vmemmap_verify ( pte_t * , int , unsigned long , unsigned long ) ;
int vmemmap_populate_basepages ( struct page * start_page , unsigned long pages , int node ) ;
int vmemmap_populate ( struct page * start_page , unsigned long pages , int node ) ;
void vmemmap_populate_print_last ( void ) ;
extern int memory_failure ( unsigned long pfn , int trapno , int flags ) ;
extern void memory_failure_queue ( unsigned long pfn , int trapno , int flags ) ;
extern int unpoison_memory ( unsigned long pfn ) ;
extern void shake_page ( struct page * p , int access ) ;
extern int soft_offline_page ( struct page * page , int flags ) ;
extern void dump_page ( struct page * page ) ;
extern void clear_huge_page ( struct page * page , unsigned long addr , unsigned int pages_per_huge_page ) ;
extern void copy_user_huge_page ( struct page * dst , struct page * src , unsigned long addr , struct vm_area_struct * vma , unsigned int pages_per_huge_page ) ;
extern struct pci_bus * pci_scan_bus_on_node ( int busno , struct pci_ops * ops , int node ) ;
extern struct pci_bus * pci_scan_bus_with_sysdata ( int busno ) ;
extern unsigned int pcibios_assign_all_busses ( void ) ;
extern int pci_legacy_init ( void ) ;
void pcibios_config_init ( void ) ;
struct pci_bus * pcibios_scan_root ( int bus ) ;
void pcibios_set_master ( struct pci_dev * dev ) ;
void pcibios_penalize_isa_irq ( int irq , int active ) ;
struct irq_routing_table * pcibios_get_irq_routing_table ( void ) ;
int pcibios_set_irq_routing ( struct pci_dev * dev , int pin , int irq ) ;
extern int pci_mmap_page_range ( struct pci_dev * dev , struct vm_area_struct * vma , enum pci_mmap_state mmap_state , int write_combine ) ;
extern void early_quirks ( void ) ;
extern void pci_iommu_alloc ( void ) ;
int native_setup_msi_irqs ( struct pci_dev * dev , int nvec , int type ) ;
void native_teardown_msi_irq ( unsigned int irq ) ;
void native_restore_msi_irqs ( struct pci_dev * dev , int irq ) ;
void default_teardown_msi_irqs ( struct pci_dev * dev ) ;
void default_restore_msi_irqs ( struct pci_dev * dev , int irq ) ;
int sg_nents ( struct scatterlist * sg ) ;
struct scatterlist * sg_next ( struct scatterlist * ) ;
struct scatterlist * sg_last ( struct scatterlist * s , unsigned int ) ;
void sg_init_table ( struct scatterlist * , unsigned int ) ;
void sg_init_one ( struct scatterlist * , const void * , unsigned int ) ;
void __sg_free_table ( struct sg_table * , unsigned int , sg_free_fn * ) ;
void sg_free_table ( struct sg_table * ) ;
int __sg_alloc_table ( struct sg_table * , unsigned int , unsigned int , gfp_t , sg_alloc_fn * ) ;
int sg_alloc_table ( struct sg_table * , unsigned int , gfp_t ) ;
int sg_alloc_table_from_pages ( struct sg_table * sgt , struct page * * pages , unsigned int n_pages , unsigned long offset , unsigned long size , gfp_t gfp_mask ) ;
size_t sg_copy_from_buffer ( struct scatterlist * sgl , unsigned int nents , void * buf , size_t buflen ) ;
size_t sg_copy_to_buffer ( struct scatterlist * sgl , unsigned int nents , void * buf , size_t buflen ) ;
void sg_miter_start ( struct sg_mapping_iter * miter , struct scatterlist * sgl , unsigned int nents , unsigned int flags ) ;
bool sg_miter_next ( struct sg_mapping_iter * miter ) ;
void sg_miter_stop ( struct sg_mapping_iter * miter ) ;
extern void swiotlb_init ( int verbose ) ;
extern void swiotlb_init_with_tbl ( char * tlb , unsigned long nslabs , int verbose ) ;
extern unsigned long swiotlb_nr_tbl ( void ) ;
extern int swiotlb_late_init_with_tbl ( char * tlb , unsigned long nslabs ) ;
extern phys_addr_t swiotlb_tbl_map_single ( struct device * hwdev , dma_addr_t tbl_dma_addr , phys_addr_t phys , size_t size , enum dma_data_direction dir ) ;
extern void swiotlb_tbl_unmap_single ( struct device * hwdev , phys_addr_t tlb_addr , size_t size , enum dma_data_direction dir ) ;
extern void swiotlb_tbl_sync_single ( struct device * hwdev , phys_addr_t tlb_addr , size_t size , enum dma_data_direction dir , enum dma_sync_target target ) ;
extern void * swiotlb_alloc_coherent ( struct device * hwdev , size_t size , dma_addr_t * dma_handle , gfp_t flags ) ;
extern void swiotlb_free_coherent ( struct device * hwdev , size_t size , void * vaddr , dma_addr_t dma_handle ) ;
extern dma_addr_t swiotlb_map_page ( struct device * dev , struct page * page , unsigned long offset , size_t size , enum dma_data_direction dir , struct dma_attrs * attrs ) ;
extern void swiotlb_unmap_page ( struct device * hwdev , dma_addr_t dev_addr , size_t size , enum dma_data_direction dir , struct dma_attrs * attrs ) ;
extern int swiotlb_map_sg ( struct device * hwdev , struct scatterlist * sg , int nents , enum dma_data_direction dir ) ;
extern void swiotlb_unmap_sg ( struct device * hwdev , struct scatterlist * sg , int nents , enum dma_data_direction dir ) ;
extern int swiotlb_map_sg_attrs ( struct device * hwdev , struct scatterlist * sgl , int nelems , enum dma_data_direction dir , struct dma_attrs * attrs ) ;
extern void swiotlb_unmap_sg_attrs ( struct device * hwdev , struct scatterlist * sgl , int nelems , enum dma_data_direction dir , struct dma_attrs * attrs ) ;
extern void swiotlb_sync_single_for_cpu ( struct device * hwdev , dma_addr_t dev_addr , size_t size , enum dma_data_direction dir ) ;
extern void swiotlb_sync_sg_for_cpu ( struct device * hwdev , struct scatterlist * sg , int nelems , enum dma_data_direction dir ) ;
extern void swiotlb_sync_single_for_device ( struct device * hwdev , dma_addr_t dev_addr , size_t size , enum dma_data_direction dir ) ;
extern void swiotlb_sync_sg_for_device ( struct device * hwdev , struct scatterlist * sg , int nelems , enum dma_data_direction dir ) ;
extern int swiotlb_dma_mapping_error ( struct device * hwdev , dma_addr_t dma_addr ) ;
extern int swiotlb_dma_supported ( struct device * hwdev , u64 mask ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) swiotlb_free ( void ) ;
extern void swiotlb_print_info ( void ) ;
extern int __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) pci_swiotlb_detect_override ( void ) ;
extern int __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) pci_swiotlb_detect_4gb ( void ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) pci_swiotlb_init ( void ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) pci_swiotlb_late_init ( void ) ;
extern int dma_common_mmap ( struct device * dev , struct vm_area_struct * vma , void * cpu_addr , dma_addr_t dma_addr , size_t size ) ;
int dma_common_get_sgtable ( struct device * dev , struct sg_table * sgt , void * cpu_addr , dma_addr_t dma_addr , size_t size ) ;
extern int dma_supported ( struct device * hwdev , u64 mask ) ;
extern int dma_set_mask ( struct device * dev , u64 mask ) ;
extern void * dma_generic_alloc_coherent ( struct device * dev , size_t size , dma_addr_t * dma_addr , gfp_t flag , struct dma_attrs * attrs ) ;
extern void dma_generic_free_coherent ( struct device * dev , size_t size , void * vaddr , dma_addr_t dma_addr , struct dma_attrs * attrs ) ;
extern u64 dma_get_required_mask ( struct device * dev ) ;
extern void * dmam_alloc_coherent ( struct device * dev , size_t size , dma_addr_t * dma_handle , gfp_t gfp ) ;
extern void dmam_free_coherent ( struct device * dev , size_t size , void * vaddr , dma_addr_t dma_handle ) ;
extern void * dmam_alloc_noncoherent ( struct device * dev , size_t size , dma_addr_t * dma_handle , gfp_t gfp ) ;
extern void dmam_free_noncoherent ( struct device * dev , size_t size , void * vaddr , dma_addr_t dma_handle ) ;
void pci_fixup_device ( enum pci_fixup_pass pass , struct pci_dev * dev ) ;
struct pci_dev * pci_get_dma_source ( struct pci_dev * dev ) ;
int pci_dev_specific_acs_enabled ( struct pci_dev * dev , u16 acs_flags ) ;
void * pcim_iomap ( struct pci_dev * pdev , int bar , unsigned long maxlen ) ;
void pcim_iounmap ( struct pci_dev * pdev , void * addr ) ;
void * const * pcim_iomap_table ( struct pci_dev * pdev ) ;
int pcim_iomap_regions ( struct pci_dev * pdev , int mask , const char * name ) ;
int pcim_iomap_regions_request_all ( struct pci_dev * pdev , int mask , const char * name ) ;
void pcim_iounmap_regions ( struct pci_dev * pdev , int mask ) ;
int pcibios_add_platform_entries ( struct pci_dev * dev ) ;
void pcibios_disable_device ( struct pci_dev * dev ) ;
void pcibios_set_master ( struct pci_dev * dev ) ;
int pcibios_set_pcie_reset_state ( struct pci_dev * dev , enum pcie_reset_state state ) ;
int pcibios_add_device ( struct pci_dev * dev ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) pci_mmcfg_early_init ( void ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) pci_mmcfg_late_init ( void ) ;
int pci_ext_cfg_avail ( void ) ;
void * pci_ioremap_bar ( struct pci_dev * pdev , int bar ) ;
extern int pci_enable_sriov ( struct pci_dev * dev , int nr_virtfn ) ;
extern void pci_disable_sriov ( struct pci_dev * dev ) ;
extern irqreturn_t pci_sriov_migration ( struct pci_dev * dev ) ;
extern int pci_num_vf ( struct pci_dev * dev ) ;
extern int pci_sriov_set_totalvfs ( struct pci_dev * dev , u16 numvfs ) ;
extern int pci_sriov_get_totalvfs ( struct pci_dev * dev ) ;
extern void pci_hp_create_module_link ( struct pci_slot * pci_slot ) ;
extern void pci_hp_remove_module_link ( struct pci_slot * pci_slot ) ;
void pci_request_acs ( void ) ;
bool pci_acs_enabled ( struct pci_dev * pdev , u16 acs_flags ) ;
bool pci_acs_path_enabled ( struct pci_dev * start , struct pci_dev * end , u16 acs_flags ) ;
int pci_vpd_find_tag ( const u8 * buf , unsigned int off , unsigned int len , u8 rdt ) ;
int pci_vpd_find_info_keyword ( const u8 * buf , unsigned int off , unsigned int len , const char * kw ) ;
struct pci_dev * pci_find_upstream_pcie_bridge ( struct pci_dev * pdev ) ;
extern int copy_semundo ( unsigned long clone_flags , struct task_struct * tsk ) ;
extern void exit_sem ( struct task_struct * tsk ) ;
int prop_descriptor_init ( struct prop_descriptor * pd , int shift ) ;
void prop_change_shift ( struct prop_descriptor * pd , int new_shift ) ;
int prop_local_init_percpu ( struct prop_local_percpu * pl ) ;
void prop_local_destroy_percpu ( struct prop_local_percpu * pl ) ;
void __prop_inc_percpu ( struct prop_descriptor * pd , struct prop_local_percpu * pl ) ;
void prop_fraction_percpu ( struct prop_descriptor * pd , struct prop_local_percpu * pl , long * numerator , long * denominator ) ;
void __prop_inc_percpu_max ( struct prop_descriptor * pd , struct prop_local_percpu * pl , long frac ) ;
int prop_local_init_single ( struct prop_local_single * pl ) ;
void prop_local_destroy_single ( struct prop_local_single * pl ) ;
void __prop_inc_single ( struct prop_descriptor * pd , struct prop_local_single * pl ) ;
void prop_fraction_single ( struct prop_descriptor * pd , struct prop_local_single * pl , long * numerator , long * denominator ) ;
extern int __secure_computing ( int ) ;
extern long prctl_get_seccomp ( void ) ;
extern long prctl_set_seccomp ( unsigned long , char * ) ;
extern void put_seccomp_filter ( struct task_struct * tsk ) ;
extern void get_seccomp_filter ( struct task_struct * tsk ) ;
extern u32 seccomp_bpf_load ( int off ) ;
extern void plist_add ( struct plist_node * node , struct plist_head * head ) ;
extern void plist_del ( struct plist_node * node , struct plist_head * head ) ;
extern void __rt_mutex_init ( struct rt_mutex * lock , const char * name ) ;
extern void rt_mutex_destroy ( struct rt_mutex * lock ) ;
extern void rt_mutex_lock ( struct rt_mutex * lock ) ;
extern int rt_mutex_lock_interruptible ( struct rt_mutex * lock , int detect_deadlock ) ;
extern int rt_mutex_timed_lock ( struct rt_mutex * lock , struct hrtimer_sleeper * timeout , int detect_deadlock ) ;
extern int rt_mutex_trylock ( struct rt_mutex * lock ) ;
extern void rt_mutex_unlock ( struct rt_mutex * lock ) ;
int getrusage ( struct task_struct * p , int who , struct rusage * ru ) ;
int do_prlimit ( struct task_struct * tsk , unsigned int resource , struct rlimit * new_rlim , struct rlimit * old_rlim ) ;
void __account_scheduler_latency ( struct task_struct * task , int usecs , int inter ) ;
void clear_all_latency_tracing ( struct task_struct * p ) ;
extern struct key * key_alloc ( struct key_type * type , const char * desc , kuid_t uid , kgid_t gid , const struct cred * cred , key_perm_t perm , unsigned long flags ) ;
extern void key_revoke ( struct key * key ) ;
extern void key_invalidate ( struct key * key ) ;
extern void key_put ( struct key * key ) ;
extern struct key * request_key ( struct key_type * type , const char * description , const char * callout_info ) ;
extern struct key * request_key_with_auxdata ( struct key_type * type , const char * description , const void * callout_info , size_t callout_len , void * aux ) ;
extern struct key * request_key_async ( struct key_type * type , const char * description , const void * callout_info , size_t callout_len ) ;
extern struct key * request_key_async_with_auxdata ( struct key_type * type , const char * description , const void * callout_info , size_t callout_len , void * aux ) ;
extern int wait_for_key_construction ( struct key * key , bool intr ) ;
extern int key_validate ( const struct key * key ) ;
extern key_ref_t key_create_or_update ( key_ref_t keyring , const char * type , const char * description , const void * payload , size_t plen , key_perm_t perm , unsigned long flags ) ;
extern int key_update ( key_ref_t key , const void * payload , size_t plen ) ;
extern int key_link ( struct key * keyring , struct key * key ) ;
extern int key_unlink ( struct key * keyring , struct key * key ) ;
extern struct key * keyring_alloc ( const char * description , kuid_t uid , kgid_t gid , const struct cred * cred , key_perm_t perm , unsigned long flags , struct key * dest ) ;
extern int keyring_clear ( struct key * keyring ) ;
extern key_ref_t keyring_search ( key_ref_t keyring , struct key_type * type , const char * description ) ;
extern int keyring_add_key ( struct key * keyring , struct key * key ) ;
extern struct key * key_lookup ( key_serial_t id ) ;
extern void key_set_timeout ( struct key * , unsigned ) ;
extern int install_thread_keyring_to_cred ( struct cred * cred ) ;
extern void key_fsuid_changed ( struct task_struct * tsk ) ;
extern void key_fsgid_changed ( struct task_struct * tsk ) ;
extern void key_init ( void ) ;
bool selinux_is_enabled ( void ) ;
extern struct group_info * groups_alloc ( int ) ;
extern void groups_free ( struct group_info * ) ;
extern int set_current_groups ( struct group_info * ) ;
extern int set_groups ( struct cred * , struct group_info * ) ;
extern int groups_search ( const struct group_info * , kgid_t ) ;
extern int in_group_p ( kgid_t ) ;
extern int in_egroup_p ( kgid_t ) ;
extern void __put_cred ( struct cred * ) ;
extern void exit_creds ( struct task_struct * ) ;
extern int copy_creds ( struct task_struct * , unsigned long ) ;
extern const struct cred * get_task_cred ( struct task_struct * ) ;
extern struct cred * cred_alloc_blank ( void ) ;
extern struct cred * prepare_creds ( void ) ;
extern struct cred * prepare_exec_creds ( void ) ;
extern int commit_creds ( struct cred * ) ;
extern void abort_creds ( struct cred * ) ;
extern const struct cred * override_creds ( const struct cred * ) ;
extern void revert_creds ( const struct cred * ) ;
extern struct cred * prepare_kernel_cred ( struct task_struct * ) ;
extern int change_create_files_as ( struct cred * , struct inode * ) ;
extern int set_security_override ( struct cred * , u32 ) ;
extern int set_security_override_from_ctx ( struct cred * , const char * ) ;
extern int set_create_files_as ( struct cred * , struct inode * ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) cred_init ( void ) ;
extern bool llist_add_batch ( struct llist_node * new_first , struct llist_node * new_last , struct llist_head * head ) ;
extern struct llist_node * llist_del_first ( struct llist_head * head ) ;
extern void get_avenrun ( unsigned long * loads , unsigned long offset , int shift ) ;
extern int nr_processes ( void ) ;
extern unsigned long nr_running ( void ) ;
extern unsigned long nr_uninterruptible ( void ) ;
extern unsigned long nr_iowait ( void ) ;
extern unsigned long nr_iowait_cpu ( int cpu ) ;
extern unsigned long this_cpu_load ( void ) ;
extern void calc_global_load ( unsigned long ticks ) ;
extern void update_cpu_load_nohz ( void ) ;
extern void register_task_migration_notifier ( struct notifier_block * n ) ;
extern unsigned long get_parent_ip ( unsigned long addr ) ;
extern void dump_cpu_task ( int cpu ) ;
extern void proc_sched_show_task ( struct task_struct * p , struct seq_file * m ) ;
extern void proc_sched_set_task ( struct task_struct * p ) ;
extern void print_cfs_rq ( struct seq_file * m , int cpu , struct cfs_rq * cfs_rq ) ;
extern void sched_init ( void ) ;
extern void sched_init_smp ( void ) ;
extern void schedule_tail ( struct task_struct * prev ) ;
extern void init_idle ( struct task_struct * idle , int cpu ) ;
extern void init_idle_bootup_task ( struct task_struct * idle ) ;
extern int runqueue_is_locked ( int cpu ) ;
extern void nohz_balance_enter_idle ( int cpu ) ;
extern void set_cpu_sd_state_idle ( void ) ;
extern int get_nohz_timer_target ( void ) ;
extern void show_state_filter ( unsigned long state_filter ) ;
extern void show_regs ( struct pt_regs * ) ;
extern void show_stack ( struct task_struct * task , unsigned long * sp ) ;
void io_schedule ( void ) ;
long io_schedule_timeout ( long timeout ) ;
extern void cpu_init ( void ) ;
extern void trap_init ( void ) ;
extern void update_process_times ( int user ) ;
extern void scheduler_tick ( void ) ;
extern void sched_show_task ( struct task_struct * p ) ;
extern void touch_softlockup_watchdog ( void ) ;
extern void touch_softlockup_watchdog_sync ( void ) ;
extern void touch_all_softlockup_watchdogs ( void ) ;
extern int proc_dowatchdog_thresh ( struct ctl_table * table , int write , void * buffer , size_t * lenp , loff_t * ppos ) ;
void lockup_detector_init ( void ) ;
extern int proc_dohung_task_timeout_secs ( struct ctl_table * table , int write , void * buffer , size_t * lenp , loff_t * ppos ) ;
extern int in_sched_functions ( unsigned long addr ) ;
extern signed long schedule_timeout ( signed long timeout ) ;
extern signed long schedule_timeout_interruptible ( signed long timeout ) ;
extern signed long schedule_timeout_killable ( signed long timeout ) ;
extern signed long schedule_timeout_uninterruptible ( signed long timeout ) ;
void schedule ( void ) ;
extern void schedule_preempt_disabled ( void ) ;
extern int mutex_spin_on_owner ( struct mutex * lock , struct task_struct * owner ) ;
unsigned long iov_shorten ( struct iovec * iov , unsigned long nr_segs , size_t to ) ;
extern ssize_t wait_on_sync_kiocb ( struct kiocb * iocb ) ;
extern int aio_put_req ( struct kiocb * iocb ) ;
extern void kick_iocb ( struct kiocb * iocb ) ;
extern int aio_complete ( struct kiocb * iocb , long res , long res2 ) ;
extern void exit_aio ( struct mm_struct * mm ) ;
extern long do_io_submit ( aio_context_t ctx_id , long nr , struct iocb * * iocbpp , bool compat ) ;
extern void arch_pick_mmap_layout ( struct mm_struct * mm ) ;
extern unsigned long arch_get_unmapped_area ( struct file * , unsigned long , unsigned long , unsigned long , unsigned long ) ;
extern unsigned long arch_get_unmapped_area_topdown ( struct file * filp , unsigned long addr , unsigned long len , unsigned long pgoff , unsigned long flags ) ;
extern void arch_unmap_area ( struct mm_struct * , unsigned long ) ;
extern void arch_unmap_area_topdown ( struct mm_struct * , unsigned long ) ;
extern void set_dumpable ( struct mm_struct * mm , int value ) ;
extern int get_dumpable ( struct mm_struct * mm ) ;
extern int uids_sysfs_init ( void ) ;
extern struct user_struct * find_user ( kuid_t ) ;
extern int __attribute__ ( ( weak ) ) arch_sd_sibiling_asym_packing ( void ) ;
extern void partition_sched_domains ( int ndoms_new , cpumask_var_t doms_new [ ] , struct sched_domain_attr * dattr_new ) ;
cpumask_var_t * alloc_sched_domains ( unsigned int ndoms ) ;
void free_sched_domains ( cpumask_var_t doms [ ] , unsigned int ndoms ) ;
unsigned long default_scale_freq_power ( struct sched_domain * sd , int cpu ) ;
unsigned long default_scale_smt_power ( struct sched_domain * sd , int cpu ) ;
bool cpus_share_cache ( int this_cpu , int that_cpu ) ;
pid_t __task_pid_nr_ns ( struct task_struct * task , enum pid_type type , struct pid_namespace * ns ) ;
pid_t task_tgid_nr_ns ( struct task_struct * tsk , struct pid_namespace * ns ) ;
extern void free_task ( struct task_struct * tsk ) ;
extern void __put_task_struct ( struct task_struct * t ) ;
extern void task_cputime_adjusted ( struct task_struct * p , cputime_t * ut , cputime_t * st ) ;
extern void thread_group_cputime_adjusted ( struct task_struct * p , cputime_t * ut , cputime_t * st ) ;
extern bool task_set_jobctl_pending ( struct task_struct * task , unsigned int mask ) ;
extern void task_clear_jobctl_trapping ( struct task_struct * task ) ;
extern void task_clear_jobctl_pending ( struct task_struct * task , unsigned int mask ) ;
extern void do_set_cpus_allowed ( struct task_struct * p , const struct cpumask * new_mask ) ;
extern int set_cpus_allowed_ptr ( struct task_struct * p , const struct cpumask * new_mask ) ;
void calc_load_enter_idle ( void ) ;
void calc_load_exit_idle ( void ) ;
extern unsigned long long __attribute__ ( ( no_instrument_function ) ) sched_clock ( void ) ;
extern u64 cpu_clock ( int cpu ) ;
extern u64 local_clock ( void ) ;
extern u64 sched_clock_cpu ( int cpu ) ;
extern void sched_clock_init ( void ) ;
extern void sched_clock_tick ( void ) ;
extern void sched_clock_idle_sleep_event ( void ) ;
extern void sched_clock_idle_wakeup_event ( u64 delta_ns ) ;
extern unsigned long long task_sched_runtime ( struct task_struct * task ) ;
extern void sched_exec ( void ) ;
extern void sched_clock_idle_sleep_event ( void ) ;
extern void sched_clock_idle_wakeup_event ( u64 delta_ns ) ;
extern void idle_task_exit ( void ) ;
extern void wake_up_idle_cpu ( int cpu ) ;
int sched_proc_update_handler ( struct ctl_table * table , int write , void * buffer , size_t * length , loff_t * ppos ) ;
int sched_rt_handler ( struct ctl_table * table , int write , void * buffer , size_t * lenp , loff_t * ppos ) ;
extern void sched_autogroup_create_attach ( struct task_struct * p ) ;
extern void sched_autogroup_detach ( struct task_struct * p ) ;
extern void sched_autogroup_fork ( struct signal_struct * sig ) ;
extern void sched_autogroup_exit ( struct signal_struct * sig ) ;
extern void proc_sched_autogroup_show_task ( struct task_struct * p , struct seq_file * m ) ;
extern int proc_sched_autogroup_set_nice ( struct task_struct * p , int nice ) ;
extern int rt_mutex_getprio ( struct task_struct * p ) ;
extern void rt_mutex_setprio ( struct task_struct * p , int prio ) ;
extern void rt_mutex_adjust_pi ( struct task_struct * p ) ;
extern bool yield_to ( struct task_struct * p , bool preempt ) ;
extern void set_user_nice ( struct task_struct * p , long nice ) ;
extern int task_prio ( const struct task_struct * p ) ;
extern int task_nice ( const struct task_struct * p ) ;
extern int can_nice ( const struct task_struct * p , const int nice ) ;
extern int task_curr ( const struct task_struct * p ) ;
extern int idle_cpu ( int cpu ) ;
extern int sched_setscheduler ( struct task_struct * , int , const struct sched_param * ) ;
extern int sched_setscheduler_nocheck ( struct task_struct * , int , const struct sched_param * ) ;
extern struct task_struct * idle_task ( int cpu ) ;
extern struct task_struct * curr_task ( int cpu ) ;
extern void set_curr_task ( int cpu , struct task_struct * p ) ;
void yield ( void ) ;
extern struct task_struct * find_task_by_vpid ( pid_t nr ) ;
extern struct task_struct * find_task_by_pid_ns ( pid_t nr , struct pid_namespace * ns ) ;
extern void __set_special_pids ( struct pid * pid ) ;
extern struct user_struct * alloc_uid ( kuid_t ) ;
extern void free_uid ( struct user_struct * ) ;
extern void xtime_update ( unsigned long ticks ) ;
extern int wake_up_state ( struct task_struct * tsk , unsigned int state ) ;
extern int wake_up_process ( struct task_struct * tsk ) ;
extern void wake_up_new_task ( struct task_struct * tsk ) ;
extern void kick_process ( struct task_struct * tsk ) ;
extern void sched_fork ( struct task_struct * p ) ;
extern void sched_dead ( struct task_struct * p ) ;
extern void proc_caches_init ( void ) ;
extern void flush_signals ( struct task_struct * ) ;
extern void __flush_signals ( struct task_struct * ) ;
extern void ignore_signals ( struct task_struct * ) ;
extern void flush_signal_handlers ( struct task_struct * , int force_default ) ;
extern int dequeue_signal ( struct task_struct * tsk , sigset_t * mask , siginfo_t * info ) ;
extern void block_all_signals ( int ( * notifier ) ( void * priv ) , void * priv , sigset_t * mask ) ;
extern void unblock_all_signals ( void ) ;
extern void release_task ( struct task_struct * p ) ;
extern int send_sig_info ( int , struct siginfo * , struct task_struct * ) ;
extern int force_sigsegv ( int , struct task_struct * ) ;
extern int force_sig_info ( int , struct siginfo * , struct task_struct * ) ;
extern int __kill_pgrp_info ( int sig , struct siginfo * info , struct pid * pgrp ) ;
extern int kill_pid_info ( int sig , struct siginfo * info , struct pid * pid ) ;
extern int kill_pid_info_as_cred ( int , struct siginfo * , struct pid * , const struct cred * , u32 ) ;
extern int kill_pgrp ( struct pid * pid , int sig , int priv ) ;
extern int kill_pid ( struct pid * pid , int sig , int priv ) ;
extern int kill_proc_info ( int , struct siginfo * , pid_t ) ;
extern bool do_notify_parent ( struct task_struct * , int ) ;
extern void __wake_up_parent ( struct task_struct * p , struct task_struct * parent ) ;
extern void force_sig ( int , struct task_struct * ) ;
extern int send_sig ( int , struct task_struct * , int ) ;
extern int zap_other_threads ( struct task_struct * p ) ;
extern struct sigqueue * sigqueue_alloc ( void ) ;
extern void sigqueue_free ( struct sigqueue * ) ;
extern int send_sigqueue ( struct sigqueue * , struct task_struct * , int group ) ;
extern int do_sigaction ( int , struct k_sigaction * , struct k_sigaction * ) ;
extern int do_sigaltstack ( const stack_t * , stack_t * , unsigned long ) ;
extern struct mm_struct * mm_alloc ( void ) ;
extern void __mmdrop ( struct mm_struct * ) ;
extern void mmput ( struct mm_struct * ) ;
extern struct mm_struct * get_task_mm ( struct task_struct * task ) ;
extern struct mm_struct * mm_access ( struct task_struct * task , unsigned int mode ) ;
extern void mm_release ( struct task_struct * , struct mm_struct * ) ;
extern struct mm_struct * dup_mm ( struct task_struct * tsk ) ;
extern int copy_thread ( unsigned long , unsigned long , unsigned long , struct task_struct * ) ;
extern void flush_thread ( void ) ;
extern void exit_thread ( void ) ;
extern void exit_files ( struct task_struct * ) ;
extern void __cleanup_sighand ( struct sighand_struct * ) ;
extern void exit_itimers ( struct signal_struct * ) ;
extern void flush_itimer_signals ( void ) ;
extern void do_group_exit ( int ) ;
extern int allow_signal ( int ) ;
extern int disallow_signal ( int ) ;
extern int do_execve ( const char * , const char * const * , const char * const * ) ;
extern long do_fork ( unsigned long , unsigned long , unsigned long , int * , int * ) ;
struct task_struct * fork_idle ( int ) ;
extern pid_t kernel_thread ( int ( * fn ) ( void * ) , void * arg , unsigned long flags ) ;
extern void set_task_comm ( struct task_struct * tsk , char * from ) ;
extern char * get_task_comm ( char * to , struct task_struct * tsk ) ;
void scheduler_ipi ( void ) ;
extern unsigned long wait_task_inactive ( struct task_struct * , long match_state ) ;
extern bool current_is_single_threaded ( void ) ;
extern struct sighand_struct * __lock_task_sighand ( struct task_struct * tsk , unsigned long * flags ) ;
extern void thread_info_cache_init ( void ) ;
extern int _cond_resched ( void ) ;
extern int __cond_resched_lock ( spinlock_t * lock ) ;
extern int __cond_resched_softirq ( void ) ;
void thread_group_cputime ( struct task_struct * tsk , struct task_cputime * times ) ;
void thread_group_cputimer ( struct task_struct * tsk , struct task_cputime * times ) ;
extern void recalc_sigpending_and_wake ( struct task_struct * t ) ;
extern void recalc_sigpending ( void ) ;
extern void signal_wake_up_state ( struct task_struct * t , unsigned int state ) ;
extern void set_task_cpu ( struct task_struct * p , unsigned int cpu ) ;
extern long sched_setaffinity ( pid_t pid , const struct cpumask * new_mask ) ;
extern long sched_getaffinity ( pid_t pid , struct cpumask * mask ) ;
extern void normalize_rt_tasks ( void ) ;
extern struct task_group * sched_create_group ( struct task_group * parent ) ;
extern void sched_destroy_group ( struct task_group * tg ) ;
extern void sched_move_task ( struct task_struct * tsk ) ;
extern int sched_group_set_shares ( struct task_group * tg , unsigned long shares ) ;
extern unsigned long sched_group_shares ( struct task_group * tg ) ;
extern int sched_group_set_rt_runtime ( struct task_group * tg , long rt_runtime_us ) ;
extern long sched_group_rt_runtime ( struct task_group * tg ) ;
extern int sched_group_set_rt_period ( struct task_group * tg , long rt_period_us ) ;
extern long sched_group_rt_period ( struct task_group * tg ) ;
extern int sched_rt_can_attach ( struct task_group * tg , struct task_struct * tsk ) ;
extern int task_can_switch_user ( struct user_struct * up , struct task_struct * tsk ) ;
extern struct irq_desc * irq_to_desc ( unsigned int irq ) ;
unsigned int irq_get_next_irq ( unsigned int offset ) ;
extern void fixup_irqs ( void ) ;
extern void irq_force_complete_move ( int ) ;
extern void native_init_IRQ ( void ) ;
extern bool handle_irq ( unsigned irq , struct pt_regs * regs ) ;
extern unsigned int do_IRQ ( struct pt_regs * regs ) ;
extern int vector_used_by_percpu_irq ( unsigned int vector ) ;
extern void init_ISA_irqs ( void ) ;
int generic_handle_irq ( unsigned int irq ) ;
void create_prof_cpu_mask ( struct proc_dir_entry * de ) ;
int create_proc_profile ( void ) ;
int profile_init ( void ) ;
int profile_setup ( char * str ) ;
void profile_tick ( int type ) ;
void profile_hits ( int type , void * ip , unsigned int nr_hits ) ;
void profile_task_exit ( struct task_struct * task ) ;
int profile_handoff_task ( struct task_struct * task ) ;
void profile_munmap ( unsigned long addr ) ;
int task_handoff_register ( struct notifier_block * n ) ;
int task_handoff_unregister ( struct notifier_block * n ) ;
int profile_event_register ( enum profile_type , struct notifier_block * n ) ;
int profile_event_unregister ( enum profile_type , struct notifier_block * n ) ;
int register_timer_hook ( int ( * hook ) ( struct pt_regs * ) ) ;
void unregister_timer_hook ( int ( * hook ) ( struct pt_regs * ) ) ;
extern int fixup_exception ( struct pt_regs * regs ) ;
extern int early_fixup_exception ( unsigned long * ip ) ;
extern int __get_user_1 ( void ) ;
extern int __get_user_2 ( void ) ;
extern int __get_user_4 ( void ) ;
extern int __get_user_8 ( void ) ;
extern int __get_user_bad ( void ) ;
extern void __put_user_bad ( void ) ;
extern void __put_user_1 ( void ) ;
extern void __put_user_2 ( void ) ;
extern void __put_user_4 ( void ) ;
extern void __put_user_8 ( void ) ;
extern unsigned long copy_from_user_nmi ( void * to , const void * from , unsigned long n ) ;
extern long strncpy_from_user ( char * dst , const char * src , long count ) ;
extern long strlen_user ( const char * str ) ;
extern long strnlen_user ( const char * str , long n ) ;
unsigned long clear_user ( void * mem , unsigned long len ) ;
unsigned long __clear_user ( void * mem , unsigned long len ) ;
unsigned long copy_user_enhanced_fast_string ( void * to , const void * from , unsigned len ) ;
unsigned long copy_user_generic_string ( void * to , const void * from , unsigned len ) ;
unsigned long copy_user_generic_unrolled ( void * to , const void * from , unsigned len ) ;
unsigned long _copy_to_user ( void * to , const void * from , unsigned len ) ;
unsigned long _copy_from_user ( void * to , const void * from , unsigned len ) ;
unsigned long copy_in_user ( void * to , const void * from , unsigned len ) ;
extern long __copy_user_nocache ( void * dst , const void * src , unsigned size , int zerorest ) ;
unsigned long copy_user_handle_tail ( char * to , char * from , unsigned len , unsigned zerorest ) ;
extern void apic_timer_interrupt ( void ) ;
extern void x86_platform_ipi ( void ) ;
extern void error_interrupt ( void ) ;
extern void irq_work_interrupt ( void ) ;
extern void spurious_interrupt ( void ) ;
extern void thermal_interrupt ( void ) ;
extern void reschedule_interrupt ( void ) ;
extern void invalidate_interrupt ( void ) ;
extern void invalidate_interrupt0 ( void ) ;
extern void invalidate_interrupt1 ( void ) ;
extern void invalidate_interrupt2 ( void ) ;
extern void invalidate_interrupt3 ( void ) ;
extern void invalidate_interrupt4 ( void ) ;
extern void invalidate_interrupt5 ( void ) ;
extern void invalidate_interrupt6 ( void ) ;
extern void invalidate_interrupt7 ( void ) ;
extern void invalidate_interrupt8 ( void ) ;
extern void invalidate_interrupt9 ( void ) ;
extern void invalidate_interrupt10 ( void ) ;
extern void invalidate_interrupt11 ( void ) ;
extern void invalidate_interrupt12 ( void ) ;
extern void invalidate_interrupt13 ( void ) ;
extern void invalidate_interrupt14 ( void ) ;
extern void invalidate_interrupt15 ( void ) ;
extern void invalidate_interrupt16 ( void ) ;
extern void invalidate_interrupt17 ( void ) ;
extern void invalidate_interrupt18 ( void ) ;
extern void invalidate_interrupt19 ( void ) ;
extern void invalidate_interrupt20 ( void ) ;
extern void invalidate_interrupt21 ( void ) ;
extern void invalidate_interrupt22 ( void ) ;
extern void invalidate_interrupt23 ( void ) ;
extern void invalidate_interrupt24 ( void ) ;
extern void invalidate_interrupt25 ( void ) ;
extern void invalidate_interrupt26 ( void ) ;
extern void invalidate_interrupt27 ( void ) ;
extern void invalidate_interrupt28 ( void ) ;
extern void invalidate_interrupt29 ( void ) ;
extern void invalidate_interrupt30 ( void ) ;
extern void invalidate_interrupt31 ( void ) ;
extern void irq_move_cleanup_interrupt ( void ) ;
extern void reboot_interrupt ( void ) ;
extern void threshold_interrupt ( void ) ;
extern void call_function_interrupt ( void ) ;
extern void call_function_single_interrupt ( void ) ;
extern void init_VISWS_APIC_irqs ( void ) ;
extern void setup_IO_APIC ( void ) ;
extern void disable_IO_APIC ( void ) ;
extern int assign_irq_vector ( int , struct irq_cfg * , const struct cpumask * ) ;
extern void send_cleanup_vector ( struct irq_cfg * ) ;
int __ioapic_set_affinity ( struct irq_data * , const struct cpumask * , unsigned int * dest_id ) ;
extern int IO_APIC_get_PCI_irq_vector ( int bus , int devfn , int pin , struct io_apic_irq_attr * irq_attr ) ;
extern void setup_ioapic_dest ( void ) ;
extern void enable_IO_APIC ( void ) ;
extern void eisa_set_level_irq ( unsigned int irq ) ;
extern void smp_apic_timer_interrupt ( struct pt_regs * ) ;
extern void smp_spurious_interrupt ( struct pt_regs * ) ;
extern void smp_x86_platform_ipi ( struct pt_regs * ) ;
extern void smp_error_interrupt ( struct pt_regs * ) ;
extern void smp_irq_move_cleanup_interrupt ( void ) ;
extern void smp_reschedule_interrupt ( struct pt_regs * ) ;
extern void smp_call_function_interrupt ( struct pt_regs * ) ;
extern void smp_call_function_single_interrupt ( struct pt_regs * ) ;
extern void smp_invalidate_interrupt ( struct pt_regs * ) ;
extern void setup_vector_irq ( int cpu ) ;
extern void lock_vector_lock ( void ) ;
extern void unlock_vector_lock ( void ) ;
extern void __setup_vector_irq ( int cpu ) ;
extern int setup_irq ( unsigned int irq , struct irqaction * new_ ) ;
extern void remove_irq ( unsigned int irq , struct irqaction * act ) ;
extern int setup_percpu_irq ( unsigned int irq , struct irqaction * new_ ) ;
extern void remove_percpu_irq ( unsigned int irq , struct irqaction * act ) ;
extern void irq_cpu_online ( void ) ;
extern void irq_cpu_offline ( void ) ;
extern int __irq_set_affinity_locked ( struct irq_data * data , const struct cpumask * cpumask ) ;
void irq_move_irq ( struct irq_data * data ) ;
void irq_move_masked_irq ( struct irq_data * data ) ;
extern void handle_level_irq ( unsigned int irq , struct irq_desc * desc ) ;
extern void handle_fasteoi_irq ( unsigned int irq , struct irq_desc * desc ) ;
extern void handle_edge_irq ( unsigned int irq , struct irq_desc * desc ) ;
extern void handle_edge_eoi_irq ( unsigned int irq , struct irq_desc * desc ) ;
extern void handle_simple_irq ( unsigned int irq , struct irq_desc * desc ) ;
extern void handle_percpu_irq ( unsigned int irq , struct irq_desc * desc ) ;
extern void handle_percpu_devid_irq ( unsigned int irq , struct irq_desc * desc ) ;
extern void handle_bad_irq ( unsigned int irq , struct irq_desc * desc ) ;
extern void handle_nested_irq ( unsigned int irq ) ;
extern void note_interrupt ( unsigned int irq , struct irq_desc * desc , irqreturn_t action_ret ) ;
extern int noirqdebug_setup ( char * str ) ;
extern int can_request_irq ( unsigned int irq , unsigned long irqflags ) ;
extern void irq_set_chip_and_handler_name ( unsigned int irq , struct irq_chip * chip , irq_flow_handler_t handle , const char * name ) ;
extern int irq_set_percpu_devid ( unsigned int irq ) ;
extern void __irq_set_handler ( unsigned int irq , irq_flow_handler_t handle , int is_chained , const char * name ) ;
void irq_modify_status ( unsigned int irq , unsigned long clr , unsigned long set ) ;
extern unsigned int create_irq_nr ( unsigned int irq_want , int node ) ;
extern int create_irq ( void ) ;
extern void destroy_irq ( unsigned int irq ) ;
extern void dynamic_irq_cleanup ( unsigned int irq ) ;
extern int irq_set_chip ( unsigned int irq , struct irq_chip * chip ) ;
extern int irq_set_handler_data ( unsigned int irq , void * data ) ;
extern int irq_set_chip_data ( unsigned int irq , void * data ) ;
extern int irq_set_irq_type ( unsigned int irq , unsigned int type ) ;
extern int irq_set_msi_desc ( unsigned int irq , struct msi_desc * entry ) ;
extern struct irq_data * irq_get_irq_data ( unsigned int irq ) ;
int __irq_alloc_descs ( int irq , unsigned int from , unsigned int cnt , int node , struct module * owner ) ;
void irq_free_descs ( unsigned int irq , unsigned int cnt ) ;
int irq_reserve_irqs ( unsigned int from , unsigned int cnt ) ;
void irq_gc_noop ( struct irq_data * d ) ;
void irq_gc_mask_disable_reg ( struct irq_data * d ) ;
void irq_gc_mask_set_bit ( struct irq_data * d ) ;
void irq_gc_mask_clr_bit ( struct irq_data * d ) ;
void irq_gc_unmask_enable_reg ( struct irq_data * d ) ;
void irq_gc_ack_set_bit ( struct irq_data * d ) ;
void irq_gc_ack_clr_bit ( struct irq_data * d ) ;
void irq_gc_mask_disable_reg_and_ack ( struct irq_data * d ) ;
void irq_gc_eoi ( struct irq_data * d ) ;
int irq_gc_set_wake ( struct irq_data * d , unsigned int on ) ;
struct irq_chip_generic * irq_alloc_generic_chip ( const char * name , int nr_ct , unsigned int irq_base , void * reg_base , irq_flow_handler_t handler ) ;
void irq_setup_generic_chip ( struct irq_chip_generic * gc , u32 msk , enum irq_gc_flags flags , unsigned int clr , unsigned int set ) ;
int irq_setup_alt_chip ( struct irq_data * d , unsigned int type ) ;
void irq_remove_generic_chip ( struct irq_chip_generic * gc , u32 msk , unsigned int clr , unsigned int set ) ;
extern void ack_bad_irq ( unsigned int irq ) ;
extern u64 arch_irq_stat_cpu ( unsigned int cpu ) ;
extern u64 arch_irq_stat ( void ) ;
extern void synchronize_irq ( unsigned int irq ) ;
extern void rcu_nmi_enter ( void ) ;
extern void rcu_nmi_exit ( void ) ;
extern void irq_enter ( void ) ;
extern void irq_exit ( void ) ;
extern irqreturn_t no_action ( int cpl , void * dev_id ) ;
extern int request_threaded_irq ( unsigned int irq , irq_handler_t handler , irq_handler_t thread_fn , unsigned long flags , const char * name , void * dev ) ;
extern int request_any_context_irq ( unsigned int irq , irq_handler_t handler , unsigned long flags , const char * name , void * dev_id ) ;
extern int request_percpu_irq ( unsigned int irq , irq_handler_t handler , const char * devname , void * percpu_dev_id ) ;
extern void free_irq ( unsigned int , void * ) ;
extern void free_percpu_irq ( unsigned int , void * ) ;
extern int devm_request_threaded_irq ( struct device * dev , unsigned int irq , irq_handler_t handler , irq_handler_t thread_fn , unsigned long irqflags , const char * devname , void * dev_id ) ;
extern void devm_free_irq ( struct device * dev , unsigned int irq , void * dev_id ) ;
extern void disable_irq_nosync ( unsigned int irq ) ;
extern void disable_irq ( unsigned int irq ) ;
extern void disable_percpu_irq ( unsigned int irq ) ;
extern void enable_irq ( unsigned int irq ) ;
extern void enable_percpu_irq ( unsigned int irq , unsigned int type ) ;
extern void suspend_device_irqs ( void ) ;
extern void resume_device_irqs ( void ) ;
extern int check_wakeup_irqs ( void ) ;
extern int irq_set_affinity ( unsigned int irq , const struct cpumask * cpumask ) ;
extern int irq_can_set_affinity ( unsigned int irq ) ;
extern int irq_select_affinity ( unsigned int irq ) ;
extern int irq_set_affinity_hint ( unsigned int irq , const struct cpumask * m ) ;
extern int irq_set_affinity_notifier ( unsigned int irq , struct irq_affinity_notify * notify ) ;
extern int irq_set_irq_wake ( unsigned int irq , unsigned int on ) ;
void do_softirq ( void ) ;
void __do_softirq ( void ) ;
extern void open_softirq ( int nr , void ( * action ) ( struct softirq_action * ) ) ;
extern void softirq_init ( void ) ;
extern void __raise_softirq_irqoff ( unsigned int nr ) ;
extern void raise_softirq_irqoff ( unsigned int nr ) ;
extern void raise_softirq ( unsigned int nr ) ;
extern void send_remote_softirq ( struct call_single_data * cp , int cpu , int softirq ) ;
extern void __send_remote_softirq ( struct call_single_data * cp , int cpu , int this_cpu , int softirq ) ;
extern void __tasklet_schedule ( struct tasklet_struct * t ) ;
extern void __tasklet_hi_schedule ( struct tasklet_struct * t ) ;
extern void __tasklet_hi_schedule_first ( struct tasklet_struct * t ) ;
extern void tasklet_kill ( struct tasklet_struct * t ) ;
extern void tasklet_kill_immediate ( struct tasklet_struct * t , unsigned int cpu ) ;
extern void tasklet_init ( struct tasklet_struct * t , void ( * func ) ( unsigned long ) , unsigned long data ) ;
extern void tasklet_hrtimer_init ( struct tasklet_hrtimer * ttimer , enum hrtimer_restart ( * function ) ( struct hrtimer * ) , clockid_t which_clock , enum hrtimer_mode mode ) ;
extern unsigned long probe_irq_on ( void ) ;
extern int probe_irq_off ( unsigned long ) ;
extern unsigned int probe_irq_mask ( unsigned long ) ;
extern void init_irq_proc ( void ) ;
int show_interrupts ( struct seq_file * p , void * v ) ;
int arch_show_interrupts ( struct seq_file * p , int prec ) ;
extern int early_irq_init ( void ) ;
extern int arch_probe_nr_irqs ( void ) ;
extern int arch_early_irq_init ( void ) ;
extern void __bad_udelay ( void ) ;
extern void __bad_ndelay ( void ) ;
extern void __udelay ( unsigned long usecs ) ;
extern void __ndelay ( unsigned long nsecs ) ;
extern void __const_udelay ( unsigned long xloops ) ;
extern void __delay ( unsigned long loops ) ;
void use_tsc_delay ( void ) ;
void calibrate_delay ( void ) ;
void msleep ( unsigned int msecs ) ;
unsigned long msleep_interruptible ( unsigned int msecs ) ;
void usleep_range ( unsigned long min , unsigned long max ) ;
extern int misc_register ( struct miscdevice * misc ) ;
extern int misc_deregister ( struct miscdevice * misc ) ;
int pm_qos_update_target ( struct pm_qos_constraints * c , struct plist_node * node , enum pm_qos_req_action action , int value ) ;
bool pm_qos_update_flags ( struct pm_qos_flags * pqf , struct pm_qos_flags_request * req , enum pm_qos_req_action action , s32 val ) ;
void pm_qos_add_request ( struct pm_qos_request * req , int pm_qos_class , s32 value ) ;
void pm_qos_update_request ( struct pm_qos_request * req , s32 new_value ) ;
void pm_qos_update_request_timeout ( struct pm_qos_request * req , s32 new_value , unsigned long timeout_us ) ;
void pm_qos_remove_request ( struct pm_qos_request * req ) ;
int pm_qos_request ( int pm_qos_class ) ;
int pm_qos_add_notifier ( int pm_qos_class , struct notifier_block * notifier ) ;
int pm_qos_remove_notifier ( int pm_qos_class , struct notifier_block * notifier ) ;
int pm_qos_request_active ( struct pm_qos_request * req ) ;
s32 pm_qos_read_value ( struct pm_qos_constraints * c ) ;
enum pm_qos_flags_status __dev_pm_qos_flags ( struct device * dev , s32 mask ) ;
enum pm_qos_flags_status dev_pm_qos_flags ( struct device * dev , s32 mask ) ;
s32 __dev_pm_qos_read_value ( struct device * dev ) ;
s32 dev_pm_qos_read_value ( struct device * dev ) ;
int dev_pm_qos_add_request ( struct device * dev , struct dev_pm_qos_request * req , enum dev_pm_qos_req_type type , s32 value ) ;
int dev_pm_qos_update_request ( struct dev_pm_qos_request * req , s32 new_value ) ;
int dev_pm_qos_remove_request ( struct dev_pm_qos_request * req ) ;
int dev_pm_qos_add_notifier ( struct device * dev , struct notifier_block * notifier ) ;
int dev_pm_qos_remove_notifier ( struct device * dev , struct notifier_block * notifier ) ;
int dev_pm_qos_add_global_notifier ( struct notifier_block * notifier ) ;
int dev_pm_qos_remove_global_notifier ( struct notifier_block * notifier ) ;
void dev_pm_qos_constraints_init ( struct device * dev ) ;
void dev_pm_qos_constraints_destroy ( struct device * dev ) ;
int dev_pm_qos_add_ancestor_request ( struct device * dev , struct dev_pm_qos_request * req , s32 value ) ;
int dev_pm_qos_expose_latency_limit ( struct device * dev , s32 value ) ;
void dev_pm_qos_hide_latency_limit ( struct device * dev ) ;
int dev_pm_qos_expose_flags ( struct device * dev , s32 value ) ;
void dev_pm_qos_hide_flags ( struct device * dev ) ;
int dev_pm_qos_update_flags ( struct device * dev , s32 mask , bool set ) ;
void dma_chan_cleanup ( struct kref * kref ) ;
void dmaengine_get ( void ) ;
void dmaengine_put ( void ) ;
dma_cookie_t dma_async_memcpy_buf_to_buf ( struct dma_chan * chan , void * dest , void * src , size_t len ) ;
dma_cookie_t dma_async_memcpy_buf_to_pg ( struct dma_chan * chan , struct page * page , unsigned int offset , void * kdata , size_t len ) ;
dma_cookie_t dma_async_memcpy_pg_to_pg ( struct dma_chan * chan , struct page * dest_pg , unsigned int dest_off , struct page * src_pg , unsigned int src_off , size_t len ) ;
void dma_async_tx_descriptor_init ( struct dma_async_tx_descriptor * tx , struct dma_chan * chan ) ;
enum dma_status dma_sync_wait ( struct dma_chan * chan , dma_cookie_t cookie ) ;
enum dma_status dma_wait_for_async_tx ( struct dma_async_tx_descriptor * tx ) ;
void dma_issue_pending_all ( void ) ;
struct dma_chan * __dma_request_channel ( dma_cap_mask_t * mask , dma_filter_fn fn , void * fn_param ) ;
void dma_release_channel ( struct dma_chan * chan ) ;
int dma_async_device_register ( struct dma_device * device ) ;
void dma_async_device_unregister ( struct dma_device * device ) ;
void dma_run_dependencies ( struct dma_async_tx_descriptor * tx ) ;
struct dma_chan * dma_find_channel ( enum dma_transaction_type tx_type ) ;
struct dma_chan * net_dma_find_channel ( void ) ;
struct dma_pinned_list * dma_pin_iovec_pages ( struct iovec * iov , size_t len ) ;
void dma_unpin_iovec_pages ( struct dma_pinned_list * pinned_list ) ;
dma_cookie_t dma_memcpy_to_iovec ( struct dma_chan * chan , struct iovec * iov , struct dma_pinned_list * pinned_list , unsigned char * kdata , size_t len ) ;
dma_cookie_t dma_memcpy_pg_to_iovec ( struct dma_chan * chan , struct iovec * iov , struct dma_pinned_list * pinned_list , struct page * page , unsigned int offset , size_t len ) ;
void dql_completed ( struct dql * dql , unsigned int count ) ;
void dql_reset ( struct dql * dql ) ;
int dql_init ( struct dql * dql , unsigned hold_time ) ;
extern void socket_seq_show ( struct seq_file * seq ) ;
extern void cred_to_ucred ( struct pid * pid , const struct cred * cred , struct ucred * ucred ) ;
extern int memcpy_fromiovec ( unsigned char * kdata , struct iovec * iov , int len ) ;
extern int memcpy_fromiovecend ( unsigned char * kdata , const struct iovec * iov , int offset , int len ) ;
extern int csum_partial_copy_fromiovecend ( unsigned char * kdata , struct iovec * iov , int offset , unsigned int len , __wsum * csump ) ;
extern int verify_iovec ( struct msghdr * m , struct iovec * iov , struct __kernel_sockaddr_storage * address , int mode ) ;
extern int memcpy_toiovec ( struct iovec * v , unsigned char * kdata , int len ) ;
extern int memcpy_toiovecend ( const struct iovec * v , unsigned char * kdata , int offset , int len ) ;
extern int move_addr_to_kernel ( void * uaddr , int ulen , struct __kernel_sockaddr_storage * kaddr ) ;
extern int put_cmsg ( struct msghdr * , int level , int type , int len , void * data ) ;
extern int __sys_recvmmsg ( int fd , struct mmsghdr * mmsg , unsigned int vlen , unsigned int flags , struct timespec * timeout ) ;
extern int __sys_sendmmsg ( int fd , struct mmsghdr * mmsg , unsigned int vlen , unsigned int flags ) ;
extern int get_compat_timespec ( struct timespec * , const struct compat_timespec * ) ;
extern int put_compat_timespec ( const struct timespec * , struct compat_timespec * ) ;
extern int get_compat_timeval ( struct timeval * , const struct compat_timeval * ) ;
extern int put_compat_timeval ( const struct timeval * , struct compat_timeval * ) ;
extern int compat_get_timespec ( struct timespec * , const void * ) ;
extern int compat_put_timespec ( const struct timespec * , void * ) ;
extern int compat_get_timeval ( struct timeval * , const void * ) ;
extern int compat_put_timeval ( const struct timeval * , void * ) ;
extern int put_compat_rusage ( const struct rusage * , struct compat_rusage * ) ;
extern long compat_sys_waitid ( int , compat_pid_t , struct compat_siginfo * , int , struct compat_rusage * ) ;
extern void compat_exit_robust_list ( struct task_struct * curr ) ;
long compat_sys_set_robust_list ( struct compat_robust_list_head * head , compat_size_t len ) ;
long compat_sys_get_robust_list ( int pid , compat_uptr_t * head_ptr , compat_size_t * len_ptr ) ;
long compat_sys_semctl ( int first , int second , int third , void * uptr ) ;
long compat_sys_msgsnd ( int first , int second , int third , void * uptr ) ;
long compat_sys_msgrcv ( int first , int second , int msgtyp , int third , int version , void * uptr ) ;
long compat_sys_shmat ( int first , int second , compat_uptr_t third , int version , void * uptr ) ;
long compat_sys_msgctl ( int first , int second , void * uptr ) ;
long compat_sys_shmctl ( int first , int second , void * uptr ) ;
long compat_sys_semtimedop ( int semid , struct sembuf * tsems , unsigned nsems , const struct compat_timespec * timeout ) ;
long compat_sys_keyctl ( u32 option , u32 arg2 , u32 arg3 , u32 arg4 , u32 arg5 ) ;
long compat_sys_ustat ( unsigned dev , struct compat_ustat * u32 ) ;
ssize_t compat_sys_readv ( unsigned long fd , const struct compat_iovec * vec , unsigned long vlen ) ;
ssize_t compat_sys_writev ( unsigned long fd , const struct compat_iovec * vec , unsigned long vlen ) ;
ssize_t compat_sys_preadv ( unsigned long fd , const struct compat_iovec * vec , unsigned long vlen , u32 pos_low , u32 pos_high ) ;
ssize_t compat_sys_pwritev ( unsigned long fd , const struct compat_iovec * vec , unsigned long vlen , u32 pos_low , u32 pos_high ) ;
long compat_sys_execve ( const char * filename , const compat_uptr_t * argv , const compat_uptr_t * envp ) ;
long compat_sys_select ( int n , compat_ulong_t * inp , compat_ulong_t * outp , compat_ulong_t * exp , struct compat_timeval * tvp ) ;
long compat_sys_old_select ( struct compat_sel_arg_struct * arg ) ;
long compat_sys_wait4 ( compat_pid_t pid , compat_uint_t * stat_addr , int options , struct compat_rusage * ru ) ;
long compat_get_bitmap ( unsigned long * mask , const compat_ulong_t * umask , unsigned long bitmap_size ) ;
long compat_put_bitmap ( compat_ulong_t * umask , unsigned long * mask , unsigned long bitmap_size ) ;
int copy_siginfo_from_user32 ( siginfo_t * to , struct compat_siginfo * from ) ;
int copy_siginfo_to_user32 ( struct compat_siginfo * to , siginfo_t * from ) ;
int get_compat_sigevent ( struct sigevent * event , const struct compat_sigevent * u_event ) ;
long compat_sys_rt_tgsigqueueinfo ( compat_pid_t tgid , compat_pid_t pid , int sig , struct compat_siginfo * uinfo ) ;
extern int get_compat_itimerspec ( struct itimerspec * dst , const struct compat_itimerspec * src ) ;
extern int put_compat_itimerspec ( struct compat_itimerspec * dst , const struct itimerspec * src ) ;
long compat_sys_gettimeofday ( struct compat_timeval * tv , struct timezone * tz ) ;
long compat_sys_settimeofday ( struct compat_timeval * tv , struct timezone * tz ) ;
long compat_sys_adjtimex ( struct compat_timex * utp ) ;
extern int compat_printk ( const char * fmt , ... ) ;
extern void sigset_from_compat ( sigset_t * set , compat_sigset_t * compat ) ;
long compat_sys_migrate_pages ( compat_pid_t pid , compat_ulong_t maxnode , const compat_ulong_t * old_nodes , const compat_ulong_t * new_nodes ) ;
extern int compat_ptrace_request ( struct task_struct * child , compat_long_t request , compat_ulong_t addr , compat_ulong_t data ) ;
extern long compat_arch_ptrace ( struct task_struct * child , compat_long_t request , compat_ulong_t addr , compat_ulong_t data ) ;
long compat_sys_ptrace ( compat_long_t request , compat_long_t pid , compat_long_t addr , compat_long_t data ) ;
long compat_sys_epoll_pwait ( int epfd , struct epoll_event * events , int maxevents , int timeout , const compat_sigset_t * sigmask , compat_size_t sigsetsize ) ;
long compat_sys_utime ( const char * filename , struct compat_utimbuf * t ) ;
long compat_sys_utimensat ( unsigned int dfd , const char * filename , struct compat_timespec * t , int flags ) ;
long compat_sys_time ( compat_time_t * tloc ) ;
long compat_sys_stime ( compat_time_t * tptr ) ;
long compat_sys_signalfd ( int ufd , const compat_sigset_t * sigmask , compat_size_t sigsetsize ) ;
long compat_sys_timerfd_settime ( int ufd , int flags , const struct compat_itimerspec * utmr , struct compat_itimerspec * otmr ) ;
long compat_sys_timerfd_gettime ( int ufd , struct compat_itimerspec * otmr ) ;
long compat_sys_move_pages ( pid_t pid , unsigned long nr_page , __u32 * pages , const int * nodes , int * status , int flags ) ;
long compat_sys_futimesat ( unsigned int dfd , const char * filename , struct compat_timeval * t ) ;
long compat_sys_utimes ( const char * filename , struct compat_timeval * t ) ;
long compat_sys_newstat ( const char * filename , struct compat_stat * statbuf ) ;
long compat_sys_newlstat ( const char * filename , struct compat_stat * statbuf ) ;
long compat_sys_newfstatat ( unsigned int dfd , const char * filename , struct compat_stat * statbuf , int flag ) ;
long compat_sys_newfstat ( unsigned int fd , struct compat_stat * statbuf ) ;
long compat_sys_statfs ( const char * pathname , struct compat_statfs * buf ) ;
long compat_sys_fstatfs ( unsigned int fd , struct compat_statfs * buf ) ;
long compat_sys_statfs64 ( const char * pathname , compat_size_t sz , struct compat_statfs64 * buf ) ;
long compat_sys_fstatfs64 ( unsigned int fd , compat_size_t sz , struct compat_statfs64 * buf ) ;
long compat_sys_fcntl64 ( unsigned int fd , unsigned int cmd , unsigned long arg ) ;
long compat_sys_fcntl ( unsigned int fd , unsigned int cmd , unsigned long arg ) ;
long compat_sys_io_setup ( unsigned nr_reqs , u32 * ctx32p ) ;
long compat_sys_io_getevents ( aio_context_t ctx_id , unsigned long min_nr , unsigned long nr , struct io_event * events , struct compat_timespec * timeout ) ;
long compat_sys_io_submit ( aio_context_t ctx_id , int nr , u32 * iocb ) ;
long compat_sys_mount ( const char * dev_name , const char * dir_name , const char * type , unsigned long flags , const void * data ) ;
long compat_sys_old_readdir ( unsigned int fd , struct compat_old_linux_dirent * , unsigned int count ) ;
long compat_sys_getdents ( unsigned int fd , struct compat_linux_dirent * dirent , unsigned int count ) ;
long compat_sys_getdents64 ( unsigned int fd , struct linux_dirent64 * dirent , unsigned int count ) ;
long compat_sys_vmsplice ( int fd , const struct compat_iovec * , unsigned int nr_segs , unsigned int flags ) ;
long compat_sys_open ( const char * filename , int flags , umode_t mode ) ;
long compat_sys_openat ( unsigned int dfd , const char * filename , int flags , umode_t mode ) ;
long compat_sys_open_by_handle_at ( int mountdirfd , struct file_handle * handle , int flags ) ;
long compat_sys_pselect6 ( int n , compat_ulong_t * inp , compat_ulong_t * outp , compat_ulong_t * exp , struct compat_timespec * tsp , void * sig ) ;
long compat_sys_ppoll ( struct pollfd * ufds , unsigned int nfds , struct compat_timespec * tsp , const compat_sigset_t * sigmask , compat_size_t sigsetsize ) ;
long compat_sys_signalfd4 ( int ufd , const compat_sigset_t * sigmask , compat_size_t sigsetsize , int flags ) ;
long compat_sys_get_mempolicy ( int * policy , compat_ulong_t * nmask , compat_ulong_t maxnode , compat_ulong_t addr , compat_ulong_t flags ) ;
long compat_sys_set_mempolicy ( int mode , compat_ulong_t * nmask , compat_ulong_t maxnode ) ;
long compat_sys_mbind ( compat_ulong_t start , compat_ulong_t len , compat_ulong_t mode , compat_ulong_t * nmask , compat_ulong_t maxnode , compat_ulong_t flags ) ;
long compat_sys_setsockopt ( int fd , int level , int optname , char * optval , unsigned int optlen ) ;
long compat_sys_sendmsg ( int fd , struct compat_msghdr * msg , unsigned flags ) ;
long compat_sys_sendmmsg ( int fd , struct compat_mmsghdr * mmsg , unsigned vlen , unsigned int flags ) ;
long compat_sys_recvmsg ( int fd , struct compat_msghdr * msg , unsigned int flags ) ;
long compat_sys_recv ( int fd , void * buf , size_t len , unsigned flags ) ;
long compat_sys_recvfrom ( int fd , void * buf , size_t len , unsigned flags , struct sockaddr * addr , int * addrlen ) ;
long compat_sys_recvmmsg ( int fd , struct compat_mmsghdr * mmsg , unsigned vlen , unsigned int flags , struct compat_timespec * timeout ) ;
long compat_sys_nanosleep ( struct compat_timespec * rqtp , struct compat_timespec * rmtp ) ;
long compat_sys_getitimer ( int which , struct compat_itimerval * it ) ;
long compat_sys_setitimer ( int which , struct compat_itimerval * in , struct compat_itimerval * out ) ;
long compat_sys_times ( struct compat_tms * tbuf ) ;
long compat_sys_setrlimit ( unsigned int resource , struct compat_rlimit * rlim ) ;
long compat_sys_getrlimit ( unsigned int resource , struct compat_rlimit * rlim ) ;
long compat_sys_getrusage ( int who , struct compat_rusage * ru ) ;
long compat_sys_sched_setaffinity ( compat_pid_t pid , unsigned int len , compat_ulong_t * user_mask_ptr ) ;
long compat_sys_sched_getaffinity ( compat_pid_t pid , unsigned int len , compat_ulong_t * user_mask_ptr ) ;
long compat_sys_timer_create ( clockid_t which_clock , struct compat_sigevent * timer_event_spec , timer_t * created_timer_id ) ;
long compat_sys_timer_settime ( timer_t timer_id , int flags , struct compat_itimerspec * new_ , struct compat_itimerspec * old ) ;
long compat_sys_timer_gettime ( timer_t timer_id , struct compat_itimerspec * setting ) ;
long compat_sys_clock_settime ( clockid_t which_clock , struct compat_timespec * tp ) ;
long compat_sys_clock_gettime ( clockid_t which_clock , struct compat_timespec * tp ) ;
long compat_sys_clock_adjtime ( clockid_t which_clock , struct compat_timex * tp ) ;
long compat_sys_clock_getres ( clockid_t which_clock , struct compat_timespec * tp ) ;
long compat_sys_clock_nanosleep ( clockid_t which_clock , int flags , struct compat_timespec * rqtp , struct compat_timespec * rmtp ) ;
long compat_sys_rt_sigtimedwait ( compat_sigset_t * uthese , struct compat_siginfo * uinfo , struct compat_timespec * uts , compat_size_t sigsetsize ) ;
long compat_sys_rt_sigsuspend ( compat_sigset_t * unewset , compat_size_t sigsetsize ) ;
long compat_sys_sysinfo ( struct compat_sysinfo * info ) ;
long compat_sys_ioctl ( unsigned int fd , unsigned int cmd , unsigned long arg ) ;
long compat_sys_futex ( u32 * uaddr , int op , u32 val , struct compat_timespec * utime , u32 * uaddr2 , u32 val3 ) ;
long compat_sys_getsockopt ( int fd , int level , int optname , char * optval , int * optlen ) ;
long compat_sys_kexec_load ( unsigned long entry , unsigned long nr_segments , struct compat_kexec_segment * , unsigned long flags ) ;
long compat_sys_mq_getsetattr ( mqd_t mqdes , const struct compat_mq_attr * u_mqstat , struct compat_mq_attr * u_omqstat ) ;
long compat_sys_mq_notify ( mqd_t mqdes , const struct compat_sigevent * u_notification ) ;
long compat_sys_mq_open ( const char * u_name , int oflag , compat_mode_t mode , struct compat_mq_attr * u_attr ) ;
long compat_sys_mq_timedsend ( mqd_t mqdes , const char * u_msg_ptr , size_t msg_len , unsigned int msg_prio , const struct compat_timespec * u_abs_timeout ) ;
ssize_t compat_sys_mq_timedreceive ( mqd_t mqdes , char * u_msg_ptr , size_t msg_len , unsigned int * u_msg_prio , const struct compat_timespec * u_abs_timeout ) ;
long compat_sys_socketcall ( int call , u32 * args ) ;
long compat_sys_sysctl ( struct compat_sysctl_args * args ) ;
extern ssize_t compat_rw_copy_check_uvector ( int type , const struct compat_iovec * uvector , unsigned long nr_segs , unsigned long fast_segs , struct iovec * fast_pointer , struct iovec * * ret_pointer ) ;
extern void * compat_alloc_user_space ( unsigned long len ) ;
ssize_t compat_sys_process_vm_readv ( compat_pid_t pid , const struct compat_iovec * lvec , unsigned long liovcnt , const struct compat_iovec * rvec , unsigned long riovcnt , unsigned long flags ) ;
ssize_t compat_sys_process_vm_writev ( compat_pid_t pid , const struct compat_iovec * lvec , unsigned long liovcnt , const struct compat_iovec * rvec , unsigned long riovcnt , unsigned long flags ) ;
long compat_sys_sendfile ( int out_fd , int in_fd , compat_off_t * offset , compat_size_t count ) ;
long compat_sys_sigaltstack ( const compat_stack_t * uss_ptr , compat_stack_t * uoss_ptr ) ;
int compat_restore_altstack ( const compat_stack_t * uss ) ;
int __compat_save_altstack ( compat_stack_t * , unsigned long ) ;
long compat_sys_sched_rr_get_interval ( compat_pid_t pid , struct compat_timespec * interval ) ;
extern void add_device_randomness ( const void * , unsigned int ) ;
extern void add_input_randomness ( unsigned int type , unsigned int code , unsigned int value ) ;
extern void add_interrupt_randomness ( int irq , int irq_flags ) ;
extern void get_random_bytes ( void * buf , int nbytes ) ;
extern void get_random_bytes_arch ( void * buf , int nbytes ) ;
void generate_random_uuid ( unsigned char uuid_out [ 16 ] ) ;
unsigned int get_random_int ( void ) ;
unsigned long randomize_range ( unsigned long start , unsigned long end , unsigned long len ) ;
u32 prandom_u32 ( void ) ;
void prandom_bytes ( void * buf , int nbytes ) ;
void prandom_seed ( u32 seed ) ;
u32 prandom_u32_state ( struct rnd_state * ) ;
void prandom_bytes_state ( struct rnd_state * state , void * buf , int nbytes ) ;
extern void x86_init_rdrand ( struct cpuinfo_x86 * c ) ;
extern int sock_wake_async ( struct socket * sk , int how , int band ) ;
extern int sock_register ( const struct net_proto_family * fam ) ;
extern void sock_unregister ( int family ) ;
extern int __sock_create ( struct net * net , int family , int type , int proto , struct socket * * res , int kern ) ;
extern int sock_create ( int family , int type , int proto , struct socket * * res ) ;
extern int sock_create_kern ( int family , int type , int proto , struct socket * * res ) ;
extern int sock_create_lite ( int family , int type , int proto , struct socket * * res ) ;
extern void sock_release ( struct socket * sock ) ;
extern int sock_sendmsg ( struct socket * sock , struct msghdr * msg , size_t len ) ;
extern int sock_recvmsg ( struct socket * sock , struct msghdr * msg , size_t size , int flags ) ;
extern struct file * sock_alloc_file ( struct socket * sock , int flags , const char * dname ) ;
extern struct socket * sockfd_lookup ( int fd , int * err ) ;
extern struct socket * sock_from_file ( struct file * file , int * err ) ;
extern int net_ratelimit ( void ) ;
extern int kernel_sendmsg ( struct socket * sock , struct msghdr * msg , struct kvec * vec , size_t num , size_t len ) ;
extern int kernel_recvmsg ( struct socket * sock , struct msghdr * msg , struct kvec * vec , size_t num , size_t len , int flags ) ;
extern int kernel_bind ( struct socket * sock , struct sockaddr * addr , int addrlen ) ;
extern int kernel_listen ( struct socket * sock , int backlog ) ;
extern int kernel_accept ( struct socket * sock , struct socket * * newsock , int flags ) ;
extern int kernel_connect ( struct socket * sock , struct sockaddr * addr , int addrlen , int flags ) ;
extern int kernel_getsockname ( struct socket * sock , struct sockaddr * addr , int * addrlen ) ;
extern int kernel_getpeername ( struct socket * sock , struct sockaddr * addr , int * addrlen ) ;
extern int kernel_getsockopt ( struct socket * sock , int level , int optname , char * optval , int * optlen ) ;
extern int kernel_setsockopt ( struct socket * sock , int level , int optname , char * optval , unsigned int optlen ) ;
extern int kernel_sendpage ( struct socket * sock , struct page * page , int offset , size_t size , int flags ) ;
extern int kernel_sock_ioctl ( struct socket * sock , int cmd , unsigned long arg ) ;
extern int kernel_sock_shutdown ( struct socket * sock , enum sock_shutdown_cmd how ) ;
extern int textsearch_register ( struct ts_ops * ) ;
extern int textsearch_unregister ( struct ts_ops * ) ;
extern struct ts_config * textsearch_prepare ( const char * , const void * , unsigned int , gfp_t , int ) ;
extern void textsearch_destroy ( struct ts_config * conf ) ;
extern unsigned int textsearch_find_continuous ( struct ts_config * , struct ts_state * , const void * , unsigned int ) ;
extern __wsum csum_partial ( const void * buff , int len , __wsum sum ) ;
extern __wsum csum_partial_copy_generic ( const void * src , const void * dst , int len , __wsum sum , int * src_err_ptr , int * dst_err_ptr ) ;
extern __wsum csum_partial_copy_from_user ( const void * src , void * dst , int len , __wsum isum , int * errp ) ;
extern __wsum csum_partial_copy_to_user ( const void * src , void * dst , int len , __wsum isum , int * errp ) ;
extern __wsum csum_partial_copy_nocheck ( const void * src , void * dst , int len , __wsum sum ) ;
extern __sum16 ip_compute_csum ( const void * buff , int len ) ;
extern __sum16 csum_ipv6_magic ( const struct in6_addr * saddr , const struct in6_addr * daddr , __u32 len , unsigned short proto , __wsum sum ) ;
extern void inet_proto_csum_replace4 ( __sum16 * sum , struct sk_buff * skb , __be32 from , __be32 to , int pseudohdr ) ;
extern void inet_proto_csum_replace16 ( __sum16 * sum , struct sk_buff * skb , const __be32 * from , const __be32 * to , int pseudohdr ) ;
extern void skb_dst_set_noref ( struct sk_buff * skb , struct dst_entry * dst ) ;
extern void kfree_skb ( struct sk_buff * skb ) ;
extern void skb_tx_error ( struct sk_buff * skb ) ;
extern void consume_skb ( struct sk_buff * skb ) ;
extern void __kfree_skb ( struct sk_buff * skb ) ;
extern void kfree_skb_partial ( struct sk_buff * skb , bool head_stolen ) ;
extern bool skb_try_coalesce ( struct sk_buff * to , struct sk_buff * from , bool * fragstolen , int * delta_truesize ) ;
extern struct sk_buff * __alloc_skb ( unsigned int size , gfp_t priority , int flags , int node ) ;
extern struct sk_buff * build_skb ( void * data , unsigned int frag_size ) ;
extern struct sk_buff * skb_morph ( struct sk_buff * dst , struct sk_buff * src ) ;
extern int skb_copy_ubufs ( struct sk_buff * skb , gfp_t gfp_mask ) ;
extern struct sk_buff * skb_clone ( struct sk_buff * skb , gfp_t priority ) ;
extern struct sk_buff * skb_copy ( const struct sk_buff * skb , gfp_t priority ) ;
extern struct sk_buff * __pskb_copy ( struct sk_buff * skb , int headroom , gfp_t gfp_mask ) ;
extern int pskb_expand_head ( struct sk_buff * skb , int nhead , int ntail , gfp_t gfp_mask ) ;
extern struct sk_buff * skb_realloc_headroom ( struct sk_buff * skb , unsigned int headroom ) ;
extern struct sk_buff * skb_copy_expand ( const struct sk_buff * skb , int newheadroom , int newtailroom , gfp_t priority ) ;
extern int skb_to_sgvec ( struct sk_buff * skb , struct scatterlist * sg , int offset , int len ) ;
extern int skb_cow_data ( struct sk_buff * skb , int tailbits , struct sk_buff * * trailer ) ;
extern int skb_pad ( struct sk_buff * skb , int pad ) ;
extern int skb_append_datato_frags ( struct sock * sk , struct sk_buff * skb , int getfrag ( void * from , char * to , int offset , int len , int odd , struct sk_buff * skb ) , void * from , int length ) ;
extern void skb_prepare_seq_read ( struct sk_buff * skb , unsigned int from , unsigned int to , struct skb_seq_state * st ) ;
extern unsigned int skb_seq_read ( unsigned int consumed , const u8 * * data , struct skb_seq_state * st ) ;
extern void skb_abort_seq_read ( struct skb_seq_state * st ) ;
extern unsigned int skb_find_text ( struct sk_buff * skb , unsigned int from , unsigned int to , struct ts_config * config , struct ts_state * state ) ;
extern void __skb_get_rxhash ( struct sk_buff * skb ) ;
extern void skb_insert ( struct sk_buff * old , struct sk_buff * newsk , struct sk_buff_head * list ) ;
extern void skb_append ( struct sk_buff * old , struct sk_buff * newsk , struct sk_buff_head * list ) ;
extern void skb_queue_head ( struct sk_buff_head * list , struct sk_buff * newsk ) ;
extern void skb_queue_tail ( struct sk_buff_head * list , struct sk_buff * newsk ) ;
extern void skb_unlink ( struct sk_buff * skb , struct sk_buff_head * list ) ;
extern struct sk_buff * skb_dequeue ( struct sk_buff_head * list ) ;
extern struct sk_buff * skb_dequeue_tail ( struct sk_buff_head * list ) ;
extern void skb_add_rx_frag ( struct sk_buff * skb , int i , struct page * page , int off , int size , unsigned int truesize ) ;
extern unsigned char * skb_put ( struct sk_buff * skb , unsigned int len ) ;
extern unsigned char * skb_push ( struct sk_buff * skb , unsigned int len ) ;
extern unsigned char * skb_pull ( struct sk_buff * skb , unsigned int len ) ;
extern unsigned char * __pskb_pull_tail ( struct sk_buff * skb , int delta ) ;
extern int ___pskb_trim ( struct sk_buff * skb , unsigned int len ) ;
extern void skb_trim ( struct sk_buff * skb , unsigned int len ) ;
extern void skb_queue_purge ( struct sk_buff_head * list ) ;
extern void * netdev_alloc_frag ( unsigned int fragsz ) ;
extern struct sk_buff * __netdev_alloc_skb ( struct net_device * dev , unsigned int length , gfp_t gfp_mask ) ;
unsigned char * skb_pull_rcsum ( struct sk_buff * skb , unsigned int len ) ;
extern struct sk_buff * __skb_recv_datagram ( struct sock * sk , unsigned flags , int * peeked , int * off , int * err ) ;
extern struct sk_buff * skb_recv_datagram ( struct sock * sk , unsigned flags , int noblock , int * err ) ;
extern unsigned int datagram_poll ( struct file * file , struct socket * sock , struct poll_table_struct * wait ) ;
extern int skb_copy_datagram_iovec ( const struct sk_buff * from , int offset , struct iovec * to , int size ) ;
extern int skb_copy_and_csum_datagram_iovec ( struct sk_buff * skb , int hlen , struct iovec * iov ) ;
extern int skb_copy_datagram_from_iovec ( struct sk_buff * skb , int offset , const struct iovec * from , int from_offset , int len ) ;
extern int skb_copy_datagram_const_iovec ( const struct sk_buff * from , int offset , const struct iovec * to , int to_offset , int size ) ;
extern void skb_free_datagram ( struct sock * sk , struct sk_buff * skb ) ;
extern void skb_free_datagram_locked ( struct sock * sk , struct sk_buff * skb ) ;
extern int skb_kill_datagram ( struct sock * sk , struct sk_buff * skb , unsigned int flags ) ;
extern __wsum skb_checksum ( const struct sk_buff * skb , int offset , int len , __wsum csum ) ;
extern int skb_copy_bits ( const struct sk_buff * skb , int offset , void * to , int len ) ;
extern int skb_store_bits ( struct sk_buff * skb , int offset , const void * from , int len ) ;
extern __wsum skb_copy_and_csum_bits ( const struct sk_buff * skb , int offset , u8 * to , int len , __wsum csum ) ;
extern int skb_splice_bits ( struct sk_buff * skb , unsigned int offset , struct pipe_inode_info * pipe , unsigned int len , unsigned int flags ) ;
extern void skb_copy_and_csum_dev ( const struct sk_buff * skb , u8 * to ) ;
extern void skb_split ( struct sk_buff * skb , struct sk_buff * skb1 , const u32 len ) ;
extern int skb_shift ( struct sk_buff * tgt , struct sk_buff * skb , int shiftlen ) ;
extern struct sk_buff * skb_segment ( struct sk_buff * skb , netdev_features_t features ) ;
extern void skb_init ( void ) ;
extern void skb_timestamping_init ( void ) ;
void skb_complete_tx_timestamp ( struct sk_buff * skb , struct skb_shared_hwtstamps * hwtstamps ) ;
extern void skb_tstamp_tx ( struct sk_buff * orig_skb , struct skb_shared_hwtstamps * hwtstamps ) ;
void skb_complete_wifi_ack ( struct sk_buff * skb , bool acked ) ;
extern __sum16 __skb_checksum_complete_head ( struct sk_buff * skb , int len ) ;
extern __sum16 __skb_checksum_complete ( struct sk_buff * skb ) ;
extern void nf_conntrack_destroy ( struct nf_conntrack * nfct ) ;
extern u16 __skb_tx_hash ( const struct net_device * dev , const struct sk_buff * skb , unsigned int num_tx_queues ) ;
extern void __skb_warn_lro_forwarding ( const struct sk_buff * skb ) ;
bool skb_partial_csum_set ( struct sk_buff * skb , u16 start , u16 off ) ;
int eth_header_parse ( const struct sk_buff * skb , unsigned char * haddr ) ;
int mac_pton ( const char * s , u8 * mac ) ;
extern ssize_t sysfs_format_mac ( char * buf , const unsigned char * addr , int len ) ;
extern int __ethtool_get_settings ( struct net_device * dev , struct ethtool_cmd * cmd ) ;
u32 ethtool_op_get_link ( struct net_device * dev ) ;
int ethtool_op_get_ts_info ( struct net_device * dev , struct ethtool_ts_info * eti ) ;
void inet_frags_init ( struct inet_frags * ) ;
void inet_frags_fini ( struct inet_frags * ) ;
void inet_frags_init_net ( struct netns_frags * nf ) ;
void inet_frags_exit_net ( struct netns_frags * nf , struct inet_frags * f ) ;
void inet_frag_kill ( struct inet_frag_queue * q , struct inet_frags * f ) ;
void inet_frag_destroy ( struct inet_frag_queue * q , struct inet_frags * f , int * work ) ;
int inet_frag_evictor ( struct netns_frags * nf , struct inet_frags * f , bool force ) ;
struct inet_frag_queue * inet_frag_find ( struct netns_frags * nf , struct inet_frags * f , void * key , unsigned int hash ) ;
extern void netfilter_init ( void ) ;
int nf_register_hook ( struct nf_hook_ops * reg ) ;
void nf_unregister_hook ( struct nf_hook_ops * reg ) ;
int nf_register_hooks ( struct nf_hook_ops * reg , unsigned int n ) ;
void nf_unregister_hooks ( struct nf_hook_ops * reg , unsigned int n ) ;
int nf_register_sockopt ( struct nf_sockopt_ops * reg ) ;
void nf_unregister_sockopt ( struct nf_sockopt_ops * reg ) ;
int nf_hook_slow ( u_int8_t pf , unsigned int hook , struct sk_buff * skb , struct net_device * indev , struct net_device * outdev , int ( * okfn ) ( struct sk_buff * ) , int thresh ) ;
int nf_setsockopt ( struct sock * sk , u_int8_t pf , int optval , char * opt , unsigned int len ) ;
int nf_getsockopt ( struct sock * sk , u_int8_t pf , int optval , char * opt , int * len ) ;
int compat_nf_setsockopt ( struct sock * sk , u_int8_t pf , int optval , char * opt , unsigned int len ) ;
int compat_nf_getsockopt ( struct sock * sk , u_int8_t pf , int optval , char * opt , int * len ) ;
extern int skb_make_writable ( struct sk_buff * skb , unsigned int writable_len ) ;
extern int nf_register_afinfo ( const struct nf_afinfo * afinfo ) ;
extern void nf_unregister_afinfo ( const struct nf_afinfo * afinfo ) ;
extern struct flow_cache_object * flow_cache_lookup ( struct net * net , const struct flowi * key , u16 family , u8 dir , flow_resolve_t resolver , void * ctx ) ;
extern void flow_cache_flush ( void ) ;
extern void flow_cache_flush_deferred ( void ) ;
extern void nf_ct_attach ( struct sk_buff * , struct sk_buff * ) ;
char * mangle_path ( char * s , const char * p , const char * esc ) ;
int seq_open ( struct file * , const struct seq_operations * ) ;
ssize_t seq_read ( struct file * , char * , size_t , loff_t * ) ;
loff_t seq_lseek ( struct file * , loff_t , int ) ;
int seq_release ( struct inode * , struct file * ) ;
int seq_escape ( struct seq_file * , const char * , const char * ) ;
int seq_putc ( struct seq_file * m , char c ) ;
int seq_puts ( struct seq_file * m , const char * s ) ;
int seq_write ( struct seq_file * seq , const void * data , size_t len ) ;
__attribute__ ( ( format ( printf , 2 , 3 ) ) ) int seq_printf ( struct seq_file * , const char * , ... ) ;
__attribute__ ( ( format ( printf , 2 , 0 ) ) ) int seq_vprintf ( struct seq_file * , const char * , va_list args ) ;
int seq_path ( struct seq_file * , const struct path * , const char * ) ;
int seq_dentry ( struct seq_file * , struct dentry * , const char * ) ;
int seq_path_root ( struct seq_file * m , const struct path * path , const struct path * root , const char * esc ) ;
int seq_bitmap ( struct seq_file * m , const unsigned long * bits , unsigned int nr_bits ) ;
int seq_bitmap_list ( struct seq_file * m , const unsigned long * bits , unsigned int nr_bits ) ;
int single_open ( struct file * , int ( * ) ( struct seq_file * , void * ) , void * ) ;
int single_release ( struct inode * , struct file * ) ;
void * __seq_open_private ( struct file * , const struct seq_operations * , int ) ;
int seq_open_private ( struct file * , const struct seq_operations * , int ) ;
int seq_release_private ( struct inode * , struct file * ) ;
int seq_put_decimal_ull ( struct seq_file * m , char delimiter , unsigned long long num ) ;
int seq_put_decimal_ll ( struct seq_file * m , char delimiter , long long num ) ;
extern struct list_head * seq_list_start ( struct list_head * head , loff_t pos ) ;
extern struct list_head * seq_list_start_head ( struct list_head * head , loff_t pos ) ;
extern struct list_head * seq_list_next ( void * v , struct list_head * head , loff_t * ppos ) ;
extern struct hlist_node * seq_hlist_start ( struct hlist_head * head , loff_t pos ) ;
extern struct hlist_node * seq_hlist_start_head ( struct hlist_head * head , loff_t pos ) ;
extern struct hlist_node * seq_hlist_next ( void * v , struct hlist_head * head , loff_t * ppos ) ;
extern struct hlist_node * seq_hlist_start_rcu ( struct hlist_head * head , loff_t pos ) ;
extern struct hlist_node * seq_hlist_start_head_rcu ( struct hlist_head * head , loff_t pos ) ;
extern struct hlist_node * seq_hlist_next_rcu ( void * v , struct hlist_head * head , loff_t * ppos ) ;
int seq_open_net ( struct inode * , struct file * , const struct seq_operations * , int ) ;
int single_open_net ( struct inode * , struct file * file , int ( * show ) ( struct seq_file * , void * ) ) ;
int seq_release_net ( struct inode * , struct file * ) ;
int single_release_net ( struct inode * , struct file * ) ;
extern struct net * copy_net_ns ( unsigned long flags , struct user_namespace * user_ns , struct net * old_net ) ;
extern struct net * get_net_ns_by_pid ( pid_t pid ) ;
extern struct net * get_net_ns_by_fd ( int pid ) ;
extern void __put_net ( struct net * net ) ;
extern void net_drop_ns ( void * ) ;
extern int register_pernet_subsys ( struct pernet_operations * ) ;
extern void unregister_pernet_subsys ( struct pernet_operations * ) ;
extern int register_pernet_device ( struct pernet_operations * ) ;
extern void unregister_pernet_device ( struct pernet_operations * ) ;
extern int net_sysctl_init ( void ) ;
extern struct ctl_table_header * register_net_sysctl ( struct net * net , const char * path , struct ctl_table * table ) ;
extern void unregister_net_sysctl_table ( struct ctl_table_header * header ) ;
void register_switch_driver ( struct dsa_switch_driver * type ) ;
void unregister_switch_driver ( struct dsa_switch_driver * type ) ;
int dcb_setapp ( struct net_device * , struct dcb_app * ) ;
u8 dcb_getapp ( struct net_device * , struct dcb_app * ) ;
int dcb_ieee_setapp ( struct net_device * , struct dcb_app * ) ;
int dcb_ieee_delapp ( struct net_device * , struct dcb_app * ) ;
u8 dcb_ieee_getapp_mask ( struct net_device * , struct dcb_app * ) ;
int dcbnl_ieee_notify ( struct net_device * dev , int event , int cmd , u32 seq , u32 pid ) ;
int dcbnl_cee_notify ( struct net_device * dev , int event , int cmd , u32 seq , u32 pid ) ;
extern int heap_init ( struct ptr_heap * heap , size_t size , gfp_t gfp_mask , int ( * gt ) ( void * , void * ) ) ;
void heap_free ( struct ptr_heap * heap ) ;
extern void * heap_insert ( struct ptr_heap * heap , void * p ) ;
void * idr_find ( struct idr * idp , int id ) ;
int idr_pre_get ( struct idr * idp , gfp_t gfp_mask ) ;
int idr_get_new ( struct idr * idp , void * ptr , int * id ) ;
int idr_get_new_above ( struct idr * idp , void * ptr , int starting_id , int * id ) ;
int idr_for_each ( struct idr * idp , int ( * fn ) ( int id , void * p , void * data ) , void * data ) ;
void * idr_get_next ( struct idr * idp , int * nextid ) ;
void * idr_replace ( struct idr * idp , void * ptr , int id ) ;
void idr_remove ( struct idr * idp , int id ) ;
void idr_remove_all ( struct idr * idp ) ;
void idr_destroy ( struct idr * idp ) ;
void idr_init ( struct idr * idp ) ;
int ida_pre_get ( struct ida * ida , gfp_t gfp_mask ) ;
int ida_get_new_above ( struct ida * ida , int starting_id , int * p_id ) ;
int ida_get_new ( struct ida * ida , int * p_id ) ;
void ida_remove ( struct ida * ida , int id ) ;
void ida_destroy ( struct ida * ida ) ;
void ida_init ( struct ida * ida ) ;
int ida_simple_get ( struct ida * ida , unsigned int start , unsigned int end , gfp_t gfp_mask ) ;
void ida_simple_remove ( struct ida * ida , unsigned int id ) ;
void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) idr_init_cache ( void ) ;
ssize_t xattr_getsecurity ( struct inode * , const char * , void * , size_t ) ;
ssize_t vfs_getxattr ( struct dentry * , const char * , void * , size_t ) ;
ssize_t vfs_listxattr ( struct dentry * d , char * list , size_t size ) ;
int __vfs_setxattr_noperm ( struct dentry * , const char * , const void * , size_t , int ) ;
int vfs_setxattr ( struct dentry * , const char * , const void * , size_t , int ) ;
int vfs_removexattr ( struct dentry * , const char * ) ;
ssize_t generic_getxattr ( struct dentry * dentry , const char * name , void * buffer , size_t size ) ;
ssize_t generic_listxattr ( struct dentry * dentry , char * buffer , size_t buffer_size ) ;
int generic_setxattr ( struct dentry * dentry , const char * name , const void * value , size_t size , int flags ) ;
int generic_removexattr ( struct dentry * dentry , const char * name ) ;
ssize_t vfs_getxattr_alloc ( struct dentry * dentry , const char * name , char * * xattr_value , size_t size , gfp_t flags ) ;
int vfs_xattr_cmp ( struct dentry * dentry , const char * xattr_name , const char * value , size_t size , gfp_t flags ) ;
struct simple_xattr * simple_xattr_alloc ( const void * value , size_t size ) ;
int simple_xattr_get ( struct simple_xattrs * xattrs , const char * name , void * buffer , size_t size ) ;
int simple_xattr_set ( struct simple_xattrs * xattrs , const char * name , const void * value , size_t size , int flags ) ;
int simple_xattr_remove ( struct simple_xattrs * xattrs , const char * name ) ;
ssize_t simple_xattr_list ( struct simple_xattrs * xattrs , char * buffer , size_t size ) ;
void simple_xattr_list_add ( struct simple_xattrs * xattrs , struct simple_xattr * new_xattr ) ;
extern int cgroup_init_early ( void ) ;
extern int cgroup_init ( void ) ;
extern void cgroup_lock ( void ) ;
extern int cgroup_lock_is_held ( void ) ;
extern bool cgroup_lock_live_group ( struct cgroup * cgrp ) ;
extern void cgroup_unlock ( void ) ;
extern void cgroup_fork ( struct task_struct * p ) ;
extern void cgroup_post_fork ( struct task_struct * p ) ;
extern void cgroup_exit ( struct task_struct * p , int run_callbacks ) ;
extern int cgroupstats_build ( struct cgroupstats * stats , struct dentry * dentry ) ;
extern int cgroup_load_subsys ( struct cgroup_subsys * ss ) ;
extern void cgroup_unload_subsys ( struct cgroup_subsys * ss ) ;
extern bool __css_tryget ( struct cgroup_subsys_state * css ) ;
extern void __css_put ( struct cgroup_subsys_state * css ) ;
int cgroup_add_cftypes ( struct cgroup_subsys * ss , struct cftype * cfts ) ;
int cgroup_rm_cftypes ( struct cgroup_subsys * ss , struct cftype * cfts ) ;
int cgroup_is_removed ( const struct cgroup * cgrp ) ;
int cgroup_path ( const struct cgroup * cgrp , char * buf , int buflen ) ;
int cgroup_task_count ( const struct cgroup * cgrp ) ;
int cgroup_is_descendant ( const struct cgroup * cgrp , struct task_struct * task ) ;
struct task_struct * cgroup_taskset_first ( struct cgroup_taskset * tset ) ;
struct task_struct * cgroup_taskset_next ( struct cgroup_taskset * tset ) ;
struct cgroup * cgroup_taskset_cur_cgroup ( struct cgroup_taskset * tset ) ;
int cgroup_taskset_size ( struct cgroup_taskset * tset ) ;
struct cgroup * cgroup_next_descendant_pre ( struct cgroup * pos , struct cgroup * cgroup ) ;
struct cgroup * cgroup_next_descendant_post ( struct cgroup * pos , struct cgroup * cgroup ) ;
void cgroup_iter_start ( struct cgroup * cgrp , struct cgroup_iter * it ) ;
struct task_struct * cgroup_iter_next ( struct cgroup * cgrp , struct cgroup_iter * it ) ;
void cgroup_iter_end ( struct cgroup * cgrp , struct cgroup_iter * it ) ;
int cgroup_scan_tasks ( struct cgroup_scanner * scan ) ;
int cgroup_attach_task ( struct cgroup * , struct task_struct * ) ;
int cgroup_attach_task_all ( struct task_struct * from , struct task_struct * ) ;
void free_css_id ( struct cgroup_subsys * ss , struct cgroup_subsys_state * css ) ;
struct cgroup_subsys_state * css_lookup ( struct cgroup_subsys * ss , int id ) ;
struct cgroup_subsys_state * css_get_next ( struct cgroup_subsys * ss , int id , struct cgroup_subsys_state * root , int * foundid ) ;
bool css_is_ancestor ( struct cgroup_subsys_state * cg , const struct cgroup_subsys_state * root ) ;
unsigned short css_id ( struct cgroup_subsys_state * css ) ;
unsigned short css_depth ( struct cgroup_subsys_state * css ) ;
struct cgroup_subsys_state * cgroup_css_from_dir ( struct file * f , int id ) ;
extern int cap_capable ( const struct cred * cred , struct user_namespace * ns , int cap , int audit ) ;
extern int cap_settime ( const struct timespec * ts , const struct timezone * tz ) ;
extern int cap_ptrace_access_check ( struct task_struct * child , unsigned int mode ) ;
extern int cap_ptrace_traceme ( struct task_struct * parent ) ;
extern int cap_capget ( struct task_struct * target , kernel_cap_t * effective , kernel_cap_t * inheritable , kernel_cap_t * permitted ) ;
extern int cap_capset ( struct cred * new_ , const struct cred * old , const kernel_cap_t * effective , const kernel_cap_t * inheritable , const kernel_cap_t * permitted ) ;
extern int cap_bprm_set_creds ( struct linux_binprm * bprm ) ;
extern int cap_bprm_secureexec ( struct linux_binprm * bprm ) ;
extern int cap_inode_setxattr ( struct dentry * dentry , const char * name , const void * value , size_t size , int flags ) ;
extern int cap_inode_removexattr ( struct dentry * dentry , const char * name ) ;
extern int cap_inode_need_killpriv ( struct dentry * dentry ) ;
extern int cap_inode_killpriv ( struct dentry * dentry ) ;
extern int cap_mmap_addr ( unsigned long addr ) ;
extern int cap_mmap_file ( struct file * file , unsigned long reqprot , unsigned long prot , unsigned long flags ) ;
extern int cap_task_fix_setuid ( struct cred * new_ , const struct cred * old , int flags ) ;
extern int cap_task_prctl ( int option , unsigned long arg2 , unsigned long arg3 , unsigned long arg4 , unsigned long arg5 ) ;
extern int cap_task_setscheduler ( struct task_struct * p ) ;
extern int cap_task_setioprio ( struct task_struct * p , int ioprio ) ;
extern int cap_task_setnice ( struct task_struct * p , int nice ) ;
extern int cap_vm_enough_memory ( struct mm_struct * mm , long pages ) ;
extern int cap_netlink_send ( struct sock * sk , struct sk_buff * skb ) ;
void reset_security_ops ( void ) ;
extern int mmap_min_addr_handler ( struct ctl_table * table , int write , void * buffer , size_t * lenp , loff_t * ppos ) ;
extern int security_init ( void ) ;
extern int security_module_enable ( struct security_operations * ops ) ;
extern int register_security ( struct security_operations * ops ) ;
extern void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) security_fixup_ops ( struct security_operations * ops ) ;
int security_ptrace_access_check ( struct task_struct * child , unsigned int mode ) ;
int security_ptrace_traceme ( struct task_struct * parent ) ;
int security_capget ( struct task_struct * target , kernel_cap_t * effective , kernel_cap_t * inheritable , kernel_cap_t * permitted ) ;
int security_capset ( struct cred * new_ , const struct cred * old , const kernel_cap_t * effective , const kernel_cap_t * inheritable , const kernel_cap_t * permitted ) ;
int security_capable ( const struct cred * cred , struct user_namespace * ns , int cap ) ;
int security_capable_noaudit ( const struct cred * cred , struct user_namespace * ns , int cap ) ;
int security_quotactl ( int cmds , int type , int id , struct super_block * sb ) ;
int security_quota_on ( struct dentry * dentry ) ;
int security_syslog ( int type ) ;
int security_settime ( const struct timespec * ts , const struct timezone * tz ) ;
int security_vm_enough_memory_mm ( struct mm_struct * mm , long pages ) ;
int security_bprm_set_creds ( struct linux_binprm * bprm ) ;
int security_bprm_check ( struct linux_binprm * bprm ) ;
void security_bprm_committing_creds ( struct linux_binprm * bprm ) ;
void security_bprm_committed_creds ( struct linux_binprm * bprm ) ;
int security_bprm_secureexec ( struct linux_binprm * bprm ) ;
int security_sb_alloc ( struct super_block * sb ) ;
void security_sb_free ( struct super_block * sb ) ;
int security_sb_copy_data ( char * orig , char * copy ) ;
int security_sb_remount ( struct super_block * sb , void * data ) ;
int security_sb_kern_mount ( struct super_block * sb , int flags , void * data ) ;
int security_sb_show_options ( struct seq_file * m , struct super_block * sb ) ;
int security_sb_statfs ( struct dentry * dentry ) ;
int security_sb_mount ( const char * dev_name , struct path * path , const char * type , unsigned long flags , void * data ) ;
int security_sb_umount ( struct vfsmount * mnt , int flags ) ;
int security_sb_pivotroot ( struct path * old_path , struct path * new_path ) ;
int security_sb_set_mnt_opts ( struct super_block * sb , struct security_mnt_opts * opts ) ;
void security_sb_clone_mnt_opts ( const struct super_block * oldsb , struct super_block * newsb ) ;
int security_sb_parse_opts_str ( char * options , struct security_mnt_opts * opts ) ;
int security_inode_alloc ( struct inode * inode ) ;
void security_inode_free ( struct inode * inode ) ;
int security_inode_init_security ( struct inode * inode , struct inode * dir , const struct qstr * qstr , initxattrs initxattrs , void * fs_data ) ;
int security_old_inode_init_security ( struct inode * inode , struct inode * dir , const struct qstr * qstr , char * * name , void * * value , size_t * len ) ;
int security_inode_create ( struct inode * dir , struct dentry * dentry , umode_t mode ) ;
int security_inode_link ( struct dentry * old_dentry , struct inode * dir , struct dentry * new_dentry ) ;
int security_inode_unlink ( struct inode * dir , struct dentry * dentry ) ;
int security_inode_symlink ( struct inode * dir , struct dentry * dentry , const char * old_name ) ;
int security_inode_mkdir ( struct inode * dir , struct dentry * dentry , umode_t mode ) ;
int security_inode_rmdir ( struct inode * dir , struct dentry * dentry ) ;
int security_inode_mknod ( struct inode * dir , struct dentry * dentry , umode_t mode , dev_t dev ) ;
int security_inode_rename ( struct inode * old_dir , struct dentry * old_dentry , struct inode * new_dir , struct dentry * new_dentry ) ;
int security_inode_readlink ( struct dentry * dentry ) ;
int security_inode_follow_link ( struct dentry * dentry , struct nameidata * nd ) ;
int security_inode_permission ( struct inode * inode , int mask ) ;
int security_inode_setattr ( struct dentry * dentry , struct iattr * attr ) ;
int security_inode_getattr ( struct vfsmount * mnt , struct dentry * dentry ) ;
int security_inode_setxattr ( struct dentry * dentry , const char * name , const void * value , size_t size , int flags ) ;
void security_inode_post_setxattr ( struct dentry * dentry , const char * name , const void * value , size_t size , int flags ) ;
int security_inode_getxattr ( struct dentry * dentry , const char * name ) ;
int security_inode_listxattr ( struct dentry * dentry ) ;
int security_inode_removexattr ( struct dentry * dentry , const char * name ) ;
int security_inode_need_killpriv ( struct dentry * dentry ) ;
int security_inode_killpriv ( struct dentry * dentry ) ;
int security_inode_getsecurity ( const struct inode * inode , const char * name , void * * buffer , bool alloc ) ;
int security_inode_setsecurity ( struct inode * inode , const char * name , const void * value , size_t size , int flags ) ;
int security_inode_listsecurity ( struct inode * inode , char * buffer , size_t buffer_size ) ;
void security_inode_getsecid ( const struct inode * inode , u32 * secid ) ;
int security_file_permission ( struct file * file , int mask ) ;
int security_file_alloc ( struct file * file ) ;
void security_file_free ( struct file * file ) ;
int security_file_ioctl ( struct file * file , unsigned int cmd , unsigned long arg ) ;
int security_mmap_file ( struct file * file , unsigned long prot , unsigned long flags ) ;
int security_mmap_addr ( unsigned long addr ) ;
int security_file_mprotect ( struct vm_area_struct * vma , unsigned long reqprot , unsigned long prot ) ;
int security_file_lock ( struct file * file , unsigned int cmd ) ;
int security_file_fcntl ( struct file * file , unsigned int cmd , unsigned long arg ) ;
int security_file_set_fowner ( struct file * file ) ;
int security_file_send_sigiotask ( struct task_struct * tsk , struct fown_struct * fown , int sig ) ;
int security_file_receive ( struct file * file ) ;
int security_file_open ( struct file * file , const struct cred * cred ) ;
int security_task_create ( unsigned long clone_flags ) ;
void security_task_free ( struct task_struct * task ) ;
int security_cred_alloc_blank ( struct cred * cred , gfp_t gfp ) ;
void security_cred_free ( struct cred * cred ) ;
int security_prepare_creds ( struct cred * new_ , const struct cred * old , gfp_t gfp ) ;
void security_transfer_creds ( struct cred * new_ , const struct cred * old ) ;
int security_kernel_act_as ( struct cred * new_ , u32 secid ) ;
int security_kernel_create_files_as ( struct cred * new_ , struct inode * inode ) ;
int security_kernel_module_request ( char * kmod_name ) ;
int security_kernel_module_from_file ( struct file * file ) ;
int security_task_fix_setuid ( struct cred * new_ , const struct cred * old , int flags ) ;
int security_task_setpgid ( struct task_struct * p , pid_t pgid ) ;
int security_task_getpgid ( struct task_struct * p ) ;
int security_task_getsid ( struct task_struct * p ) ;
void security_task_getsecid ( struct task_struct * p , u32 * secid ) ;
int security_task_setnice ( struct task_struct * p , int nice ) ;
int security_task_setioprio ( struct task_struct * p , int ioprio ) ;
int security_task_getioprio ( struct task_struct * p ) ;
int security_task_setrlimit ( struct task_struct * p , unsigned int resource , struct rlimit * new_rlim ) ;
int security_task_setscheduler ( struct task_struct * p ) ;
int security_task_getscheduler ( struct task_struct * p ) ;
int security_task_movememory ( struct task_struct * p ) ;
int security_task_kill ( struct task_struct * p , struct siginfo * info , int sig , u32 secid ) ;
int security_task_wait ( struct task_struct * p ) ;
int security_task_prctl ( int option , unsigned long arg2 , unsigned long arg3 , unsigned long arg4 , unsigned long arg5 ) ;
void security_task_to_inode ( struct task_struct * p , struct inode * inode ) ;
int security_ipc_permission ( struct kern_ipc_perm * ipcp , short flag ) ;
void security_ipc_getsecid ( struct kern_ipc_perm * ipcp , u32 * secid ) ;
int security_msg_msg_alloc ( struct msg_msg * msg ) ;
void security_msg_msg_free ( struct msg_msg * msg ) ;
int security_msg_queue_alloc ( struct msg_queue * msq ) ;
void security_msg_queue_free ( struct msg_queue * msq ) ;
int security_msg_queue_associate ( struct msg_queue * msq , int msqflg ) ;
int security_msg_queue_msgctl ( struct msg_queue * msq , int cmd ) ;
int security_msg_queue_msgsnd ( struct msg_queue * msq , struct msg_msg * msg , int msqflg ) ;
int security_msg_queue_msgrcv ( struct msg_queue * msq , struct msg_msg * msg , struct task_struct * target , long type , int mode ) ;
int security_shm_alloc ( struct shmid_kernel * shp ) ;
void security_shm_free ( struct shmid_kernel * shp ) ;
int security_shm_associate ( struct shmid_kernel * shp , int shmflg ) ;
int security_shm_shmctl ( struct shmid_kernel * shp , int cmd ) ;
int security_shm_shmat ( struct shmid_kernel * shp , char * shmaddr , int shmflg ) ;
int security_sem_alloc ( struct sem_array * sma ) ;
void security_sem_free ( struct sem_array * sma ) ;
int security_sem_associate ( struct sem_array * sma , int semflg ) ;
int security_sem_semctl ( struct sem_array * sma , int cmd ) ;
int security_sem_semop ( struct sem_array * sma , struct sembuf * sops , unsigned nsops , int alter ) ;
void security_d_instantiate ( struct dentry * dentry , struct inode * inode ) ;
int security_getprocattr ( struct task_struct * p , char * name , char * * value ) ;
int security_setprocattr ( struct task_struct * p , char * name , void * value , size_t size ) ;
int security_netlink_send ( struct sock * sk , struct sk_buff * skb ) ;
int security_secid_to_secctx ( u32 secid , char * * secdata , u32 * seclen ) ;
int security_secctx_to_secid ( const char * secdata , u32 seclen , u32 * secid ) ;
void security_release_secctx ( char * secdata , u32 seclen ) ;
int security_inode_notifysecctx ( struct inode * inode , void * ctx , u32 ctxlen ) ;
int security_inode_setsecctx ( struct dentry * dentry , void * ctx , u32 ctxlen ) ;
int security_inode_getsecctx ( struct inode * inode , void * * ctx , u32 * ctxlen ) ;
int security_unix_stream_connect ( struct sock * sock , struct sock * other , struct sock * newsk ) ;
int security_unix_may_send ( struct socket * sock , struct socket * other ) ;
int security_socket_create ( int family , int type , int protocol , int kern ) ;
int security_socket_post_create ( struct socket * sock , int family , int type , int protocol , int kern ) ;
int security_socket_bind ( struct socket * sock , struct sockaddr * address , int addrlen ) ;
int security_socket_connect ( struct socket * sock , struct sockaddr * address , int addrlen ) ;
int security_socket_listen ( struct socket * sock , int backlog ) ;
int security_socket_accept ( struct socket * sock , struct socket * newsock ) ;
int security_socket_sendmsg ( struct socket * sock , struct msghdr * msg , int size ) ;
int security_socket_recvmsg ( struct socket * sock , struct msghdr * msg , int size , int flags ) ;
int security_socket_getsockname ( struct socket * sock ) ;
int security_socket_getpeername ( struct socket * sock ) ;
int security_socket_getsockopt ( struct socket * sock , int level , int optname ) ;
int security_socket_setsockopt ( struct socket * sock , int level , int optname ) ;
int security_socket_shutdown ( struct socket * sock , int how ) ;
int security_sock_rcv_skb ( struct sock * sk , struct sk_buff * skb ) ;
int security_socket_getpeersec_stream ( struct socket * sock , char * optval , int * optlen , unsigned len ) ;
int security_socket_getpeersec_dgram ( struct socket * sock , struct sk_buff * skb , u32 * secid ) ;
int security_sk_alloc ( struct sock * sk , int family , gfp_t priority ) ;
void security_sk_free ( struct sock * sk ) ;
void security_sk_clone ( const struct sock * sk , struct sock * newsk ) ;
void security_sk_classify_flow ( struct sock * sk , struct flowi * fl ) ;
void security_req_classify_flow ( const struct request_sock * req , struct flowi * fl ) ;
void security_sock_graft ( struct sock * sk , struct socket * parent ) ;
int security_inet_conn_request ( struct sock * sk , struct sk_buff * skb , struct request_sock * req ) ;
void security_inet_csk_clone ( struct sock * newsk , const struct request_sock * req ) ;
void security_inet_conn_established ( struct sock * sk , struct sk_buff * skb ) ;
int security_secmark_relabel_packet ( u32 secid ) ;
void security_secmark_refcount_inc ( void ) ;
void security_secmark_refcount_dec ( void ) ;
int security_tun_dev_alloc_security ( void * * security ) ;
void security_tun_dev_free_security ( void * security ) ;
int security_tun_dev_create ( void ) ;
int security_tun_dev_attach_queue ( void * security ) ;
int security_tun_dev_attach ( struct sock * sk , void * security ) ;
int security_tun_dev_open ( void * security ) ;
int security_path_unlink ( struct path * dir , struct dentry * dentry ) ;
int security_path_mkdir ( struct path * dir , struct dentry * dentry , umode_t mode ) ;
int security_path_rmdir ( struct path * dir , struct dentry * dentry ) ;
int security_path_mknod ( struct path * dir , struct dentry * dentry , umode_t mode , unsigned int dev ) ;
int security_path_truncate ( struct path * path ) ;
int security_path_symlink ( struct path * dir , struct dentry * dentry , const char * old_name ) ;
int security_path_link ( struct dentry * old_dentry , struct path * new_dir , struct dentry * new_dentry ) ;
int security_path_rename ( struct path * old_dir , struct dentry * old_dentry , struct path * new_dir , struct dentry * new_dentry ) ;
int security_path_chmod ( struct path * path , umode_t mode ) ;
int security_path_chown ( struct path * path , kuid_t uid , kgid_t gid ) ;
int security_path_chroot ( struct path * path ) ;
int security_key_alloc ( struct key * key , const struct cred * cred , unsigned long flags ) ;
void security_key_free ( struct key * key ) ;
int security_key_permission ( key_ref_t key_ref , const struct cred * cred , key_perm_t perm ) ;
int security_key_getsecurity ( struct key * key , char * * _buffer ) ;
int security_audit_rule_init ( u32 field , u32 op , char * rulestr , void * * lsmrule ) ;
int security_audit_rule_known ( struct audit_krule * krule ) ;
int security_audit_rule_match ( u32 secid , u32 field , u32 op , void * lsmrule , struct audit_context * actx ) ;
void security_audit_rule_free ( void * lsmrule ) ;
extern struct dentry * securityfs_create_file ( const char * name , umode_t mode , struct dentry * parent , void * data , const struct file_operations * fops ) ;
extern struct dentry * securityfs_create_dir ( const char * name , struct dentry * parent ) ;
extern void securityfs_remove ( struct dentry * dentry ) ;
extern int yama_ptrace_access_check ( struct task_struct * child , unsigned int mode ) ;
extern int yama_ptrace_traceme ( struct task_struct * parent ) ;
extern void yama_task_free ( struct task_struct * task ) ;
extern int yama_task_prctl ( int option , unsigned long arg2 , unsigned long arg3 , unsigned long arg4 , unsigned long arg5 ) ;
int copy_namespaces ( unsigned long flags , struct task_struct * tsk ) ;
void exit_task_namespaces ( struct task_struct * tsk ) ;
void switch_task_namespaces ( struct task_struct * tsk , struct nsproxy * new_ ) ;
void free_nsproxy ( struct nsproxy * ns ) ;
int unshare_nsproxy_namespaces ( unsigned long , struct nsproxy * * , struct cred * , struct fs_struct * ) ;
int __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) nsproxy_cache_init ( void ) ;
extern void scm_detach_fds ( struct msghdr * msg , struct scm_cookie * scm ) ;
extern void scm_detach_fds_compat ( struct msghdr * msg , struct scm_cookie * scm ) ;
extern int __scm_send ( struct socket * sock , struct msghdr * msg , struct scm_cookie * scm ) ;
extern void __scm_destroy ( struct scm_cookie * scm ) ;
extern struct scm_fp_list * scm_fp_dup ( struct scm_fp_list * fpl ) ;
extern void netlink_table_grab ( void ) ;
extern void netlink_table_ungrab ( void ) ;
extern struct sock * __netlink_kernel_create ( struct net * net , int unit , struct module * module , struct netlink_kernel_cfg * cfg ) ;
extern void netlink_kernel_release ( struct sock * sk ) ;
extern int __netlink_change_ngroups ( struct sock * sk , unsigned int groups ) ;
extern int netlink_change_ngroups ( struct sock * sk , unsigned int groups ) ;
extern void __netlink_clear_multicast_users ( struct sock * sk , unsigned int group ) ;
extern void netlink_clear_multicast_users ( struct sock * sk , unsigned int group ) ;
extern void netlink_ack ( struct sk_buff * in_skb , struct nlmsghdr * nlh , int err ) ;
extern int netlink_has_listeners ( struct sock * sk , unsigned int group ) ;
extern int netlink_unicast ( struct sock * ssk , struct sk_buff * skb , __u32 portid , int nonblock ) ;
extern int netlink_broadcast ( struct sock * ssk , struct sk_buff * skb , __u32 portid , __u32 group , gfp_t allocation ) ;
extern int netlink_broadcast_filtered ( struct sock * ssk , struct sk_buff * skb , __u32 portid , __u32 group , gfp_t allocation , int ( * filter ) ( struct sock * dsk , struct sk_buff * skb , void * data ) , void * filter_data ) ;
extern int netlink_set_err ( struct sock * ssk , __u32 portid , __u32 group , int code ) ;
extern int netlink_register_notifier ( struct notifier_block * nb ) ;
extern int netlink_unregister_notifier ( struct notifier_block * nb ) ;
struct sock * netlink_getsockbyfilp ( struct file * filp ) ;
int netlink_attachskb ( struct sock * sk , struct sk_buff * skb , long * timeo , struct sock * ssk ) ;
void netlink_detachskb ( struct sock * sk , struct sk_buff * skb ) ;
int netlink_sendskb ( struct sock * sk , struct sk_buff * skb ) ;
struct nlmsghdr * __nlmsg_put ( struct sk_buff * skb , u32 portid , u32 seq , int type , int len , int flags ) ;
extern int __netlink_dump_start ( struct sock * ssk , struct sk_buff * skb , const struct nlmsghdr * nlh , struct netlink_dump_control * control ) ;
extern void netdev_set_default_ethtool_ops ( struct net_device * dev , const struct ethtool_ops * ops ) ;
extern int __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) netdev_boot_setup ( char * str ) ;
extern void __napi_schedule ( struct napi_struct * n ) ;
extern void __napi_complete ( struct napi_struct * n ) ;
extern void napi_complete ( struct napi_struct * n ) ;
extern bool rps_may_expire_flow ( struct net_device * dev , u16 rxq_index , u32 flow_id , u16 filter_id ) ;
extern struct netdev_queue * netdev_pick_tx ( struct net_device * dev , struct sk_buff * skb ) ;
void netif_napi_add ( struct net_device * dev , struct napi_struct * napi , int ( * poll ) ( struct napi_struct * , int ) , int weight ) ;
void netif_napi_del ( struct napi_struct * napi ) ;
extern int register_netdevice_notifier ( struct notifier_block * nb ) ;
extern int unregister_netdevice_notifier ( struct notifier_block * nb ) ;
extern int call_netdevice_notifiers ( unsigned long val , struct net_device * dev ) ;
extern int netdev_boot_setup_check ( struct net_device * dev ) ;
extern unsigned long netdev_boot_base ( const char * prefix , int unit ) ;
extern struct net_device * dev_getbyhwaddr_rcu ( struct net * net , unsigned short type , const char * hwaddr ) ;
extern struct net_device * dev_getfirstbyhwtype ( struct net * net , unsigned short type ) ;
extern struct net_device * __dev_getfirstbyhwtype ( struct net * net , unsigned short type ) ;
extern void dev_add_pack ( struct packet_type * pt ) ;
extern void dev_remove_pack ( struct packet_type * pt ) ;
extern void __dev_remove_pack ( struct packet_type * pt ) ;
extern void dev_add_offload ( struct packet_offload * po ) ;
extern void dev_remove_offload ( struct packet_offload * po ) ;
extern void __dev_remove_offload ( struct packet_offload * po ) ;
extern struct net_device * dev_get_by_flags_rcu ( struct net * net , unsigned short flags , unsigned short mask ) ;
extern struct net_device * dev_get_by_name ( struct net * net , const char * name ) ;
extern struct net_device * dev_get_by_name_rcu ( struct net * net , const char * name ) ;
extern struct net_device * __dev_get_by_name ( struct net * net , const char * name ) ;
extern int dev_alloc_name ( struct net_device * dev , const char * name ) ;
extern int dev_open ( struct net_device * dev ) ;
extern int dev_close ( struct net_device * dev ) ;
extern void dev_disable_lro ( struct net_device * dev ) ;
extern int dev_loopback_xmit ( struct sk_buff * newskb ) ;
extern int dev_queue_xmit ( struct sk_buff * skb ) ;
extern int register_netdevice ( struct net_device * dev ) ;
extern void unregister_netdevice_queue ( struct net_device * dev , struct list_head * head ) ;
extern void unregister_netdevice_many ( struct list_head * head ) ;
extern int netdev_refcnt_read ( const struct net_device * dev ) ;
extern void free_netdev ( struct net_device * dev ) ;
extern void synchronize_net ( void ) ;
extern int init_dummy_netdev ( struct net_device * dev ) ;
extern void netdev_resync_ops ( struct net_device * dev ) ;
extern struct net_device * dev_get_by_index ( struct net * net , int ifindex ) ;
extern struct net_device * __dev_get_by_index ( struct net * net , int ifindex ) ;
extern struct net_device * dev_get_by_index_rcu ( struct net * net , int ifindex ) ;
extern int dev_restart ( struct net_device * dev ) ;
extern int skb_gro_receive ( struct sk_buff * * head , struct sk_buff * skb ) ;
extern int register_gifconf ( unsigned int family , gifconf_func_t * gifconf ) ;
extern void __netif_schedule ( struct Qdisc * q ) ;
extern int netif_set_real_num_tx_queues ( struct net_device * dev , unsigned int txq ) ;
extern int netif_set_real_num_rx_queues ( struct net_device * dev , unsigned int rxq ) ;
extern int netif_get_num_default_rss_queues ( void ) ;
extern void dev_kfree_skb_irq ( struct sk_buff * skb ) ;
extern void dev_kfree_skb_any ( struct sk_buff * skb ) ;
extern int netif_rx ( struct sk_buff * skb ) ;
extern int netif_rx_ni ( struct sk_buff * skb ) ;
extern int netif_receive_skb ( struct sk_buff * skb ) ;
extern gro_result_t napi_gro_receive ( struct napi_struct * napi , struct sk_buff * skb ) ;
extern void napi_gro_flush ( struct napi_struct * napi , bool flush_old ) ;
extern struct sk_buff * napi_get_frags ( struct napi_struct * napi ) ;
extern gro_result_t napi_gro_frags ( struct napi_struct * napi ) ;
extern int netdev_rx_handler_register ( struct net_device * dev , rx_handler_func_t * rx_handler , void * rx_handler_data ) ;
extern void netdev_rx_handler_unregister ( struct net_device * dev ) ;
extern bool dev_valid_name ( const char * name ) ;
extern int dev_ioctl ( struct net * net , unsigned int cmd , void * ) ;
extern int dev_ethtool ( struct net * net , struct ifreq * ) ;
extern unsigned int dev_get_flags ( const struct net_device * ) ;
extern int __dev_change_flags ( struct net_device * , unsigned int flags ) ;
extern int dev_change_flags ( struct net_device * , unsigned int ) ;
extern void __dev_notify_flags ( struct net_device * , unsigned int old_flags ) ;
extern int dev_change_name ( struct net_device * , const char * ) ;
extern int dev_set_alias ( struct net_device * , const char * , size_t ) ;
extern int dev_change_net_namespace ( struct net_device * , struct net * , const char * ) ;
extern int dev_set_mtu ( struct net_device * , int ) ;
extern void dev_set_group ( struct net_device * , int ) ;
extern int dev_set_mac_address ( struct net_device * , struct sockaddr * ) ;
extern int dev_hard_start_xmit ( struct sk_buff * skb , struct net_device * dev , struct netdev_queue * txq ) ;
extern int dev_forward_skb ( struct net_device * dev , struct sk_buff * skb ) ;
extern void netdev_run_todo ( void ) ;
extern void linkwatch_init_dev ( struct net_device * dev ) ;
extern void linkwatch_fire_event ( struct net_device * dev ) ;
extern void linkwatch_forget_dev ( struct net_device * dev ) ;
extern unsigned long dev_trans_start ( struct net_device * dev ) ;
extern void __netdev_watchdog_up ( struct net_device * dev ) ;
extern void netif_carrier_on ( struct net_device * dev ) ;
extern void netif_carrier_off ( struct net_device * dev ) ;
extern void netif_device_detach ( struct net_device * dev ) ;
extern void netif_device_attach ( struct net_device * dev ) ;
extern void ether_setup ( struct net_device * dev ) ;
extern struct net_device * alloc_netdev_mqs ( int sizeof_priv , const char * name , void ( * setup ) ( struct net_device * ) , unsigned int txqs , unsigned int rxqs ) ;
extern int register_netdev ( struct net_device * dev ) ;
extern void unregister_netdev ( struct net_device * dev ) ;
extern int __hw_addr_add_multiple ( struct netdev_hw_addr_list * to_list , struct netdev_hw_addr_list * from_list , int addr_len , unsigned char addr_type ) ;
extern void __hw_addr_del_multiple ( struct netdev_hw_addr_list * to_list , struct netdev_hw_addr_list * from_list , int addr_len , unsigned char addr_type ) ;
extern int __hw_addr_sync ( struct netdev_hw_addr_list * to_list , struct netdev_hw_addr_list * from_list , int addr_len ) ;
extern void __hw_addr_unsync ( struct netdev_hw_addr_list * to_list , struct netdev_hw_addr_list * from_list , int addr_len ) ;
extern void __hw_addr_flush ( struct netdev_hw_addr_list * list ) ;
extern void __hw_addr_init ( struct netdev_hw_addr_list * list ) ;
extern int dev_addr_add ( struct net_device * dev , const unsigned char * addr , unsigned char addr_type ) ;
extern int dev_addr_del ( struct net_device * dev , const unsigned char * addr , unsigned char addr_type ) ;
extern int dev_addr_add_multiple ( struct net_device * to_dev , struct net_device * from_dev , unsigned char addr_type ) ;
extern int dev_addr_del_multiple ( struct net_device * to_dev , struct net_device * from_dev , unsigned char addr_type ) ;
extern void dev_addr_flush ( struct net_device * dev ) ;
extern int dev_addr_init ( struct net_device * dev ) ;
extern int dev_uc_add ( struct net_device * dev , const unsigned char * addr ) ;
extern int dev_uc_add_excl ( struct net_device * dev , const unsigned char * addr ) ;
extern int dev_uc_del ( struct net_device * dev , const unsigned char * addr ) ;
extern int dev_uc_sync ( struct net_device * to , struct net_device * from ) ;
extern void dev_uc_unsync ( struct net_device * to , struct net_device * from ) ;
extern void dev_uc_flush ( struct net_device * dev ) ;
extern void dev_uc_init ( struct net_device * dev ) ;
extern int dev_mc_add ( struct net_device * dev , const unsigned char * addr ) ;
extern int dev_mc_add_global ( struct net_device * dev , const unsigned char * addr ) ;
extern int dev_mc_add_excl ( struct net_device * dev , const unsigned char * addr ) ;
extern int dev_mc_del ( struct net_device * dev , const unsigned char * addr ) ;
extern int dev_mc_del_global ( struct net_device * dev , const unsigned char * addr ) ;
extern int dev_mc_sync ( struct net_device * to , struct net_device * from ) ;
extern void dev_mc_unsync ( struct net_device * to , struct net_device * from ) ;
extern void dev_mc_flush ( struct net_device * dev ) ;
extern void dev_mc_init ( struct net_device * dev ) ;
extern void dev_set_rx_mode ( struct net_device * dev ) ;
extern void __dev_set_rx_mode ( struct net_device * dev ) ;
extern int dev_set_promiscuity ( struct net_device * dev , int inc ) ;
extern int dev_set_allmulti ( struct net_device * dev , int inc ) ;
extern void netdev_state_change ( struct net_device * dev ) ;
extern void netdev_notify_peers ( struct net_device * dev ) ;
extern void netdev_features_change ( struct net_device * dev ) ;
extern void dev_load ( struct net * net , const char * name ) ;
extern void dev_mcast_init ( void ) ;
extern struct rtnl_link_stats64 * dev_get_stats ( struct net_device * dev , struct rtnl_link_stats64 * storage ) ;
extern void netdev_stats_to_stats64 ( struct rtnl_link_stats64 * stats64 , const struct net_device_stats * netdev_stats ) ;
extern int netdev_set_master ( struct net_device * dev , struct net_device * master ) ;
extern int netdev_set_bond_master ( struct net_device * dev , struct net_device * master ) ;
extern int skb_checksum_help ( struct sk_buff * skb ) ;
extern struct sk_buff * skb_gso_segment ( struct sk_buff * skb , netdev_features_t features ) ;
extern void netdev_rx_csum_fault ( struct net_device * dev ) ;
extern void net_enable_timestamp ( void ) ;
extern void net_disable_timestamp ( void ) ;
extern void * dev_seq_start ( struct seq_file * seq , loff_t * pos ) ;
extern void * dev_seq_next ( struct seq_file * seq , void * v , loff_t * pos ) ;
extern void dev_seq_stop ( struct seq_file * seq , void * v ) ;
extern int netdev_class_create_file ( struct class_attribute * class_attr ) ;
extern void netdev_class_remove_file ( struct class_attribute * class_attr ) ;
extern const char * netdev_drivername ( const struct net_device * dev ) ;
extern void linkwatch_run_queue ( void ) ;
netdev_features_t netdev_increment_features ( netdev_features_t all , netdev_features_t one , netdev_features_t mask ) ;
int __netdev_update_features ( struct net_device * dev ) ;
void netdev_update_features ( struct net_device * dev ) ;
void netdev_change_features ( struct net_device * dev ) ;
void netif_stacked_transfer_operstate ( const struct net_device * rootdev , struct net_device * dev ) ;
netdev_features_t netif_skb_features ( struct sk_buff * skb ) ;
extern __attribute__ ( ( format ( printf , 3 , 4 ) ) ) int netdev_printk ( const char * level , const struct net_device * dev , const char * format , ... ) ;
extern __attribute__ ( ( format ( printf , 2 , 3 ) ) ) int netdev_emerg ( const struct net_device * dev , const char * format , ... ) ;
extern __attribute__ ( ( format ( printf , 2 , 3 ) ) ) int netdev_alert ( const struct net_device * dev , const char * format , ... ) ;
extern __attribute__ ( ( format ( printf , 2 , 3 ) ) ) int netdev_crit ( const struct net_device * dev , const char * format , ... ) ;
extern __attribute__ ( ( format ( printf , 2 , 3 ) ) ) int netdev_err ( const struct net_device * dev , const char * format , ... ) ;
extern __attribute__ ( ( format ( printf , 2 , 3 ) ) ) int netdev_warn ( const struct net_device * dev , const char * format , ... ) ;
extern __attribute__ ( ( format ( printf , 2 , 3 ) ) ) int netdev_notice ( const struct net_device * dev , const char * format , ... ) ;
extern __attribute__ ( ( format ( printf , 2 , 3 ) ) ) int netdev_info ( const struct net_device * dev , const char * format , ... ) ;
extern void __bad_unaligned_access_size ( void ) ;
extern __be16 eth_type_trans ( struct sk_buff * skb , struct net_device * dev ) ;
extern int eth_header ( struct sk_buff * skb , struct net_device * dev , unsigned short type , const void * daddr , const void * saddr , unsigned len ) ;
extern int eth_rebuild_header ( struct sk_buff * skb ) ;
extern int eth_header_parse ( const struct sk_buff * skb , unsigned char * haddr ) ;
extern int eth_header_cache ( const struct neighbour * neigh , struct hh_cache * hh , __be16 type ) ;
extern void eth_header_cache_update ( struct hh_cache * hh , const struct net_device * dev , const unsigned char * haddr ) ;
extern int eth_mac_addr ( struct net_device * dev , void * p ) ;
extern int eth_change_mtu ( struct net_device * dev , int new_mtu ) ;
extern int eth_validate_addr ( struct net_device * dev ) ;
extern struct net_device * alloc_etherdev_mqs ( int sizeof_priv , unsigned int txqs , unsigned int rxqs ) ;
extern int mii_link_ok ( struct mii_if_info * mii ) ;
extern int mii_nway_restart ( struct mii_if_info * mii ) ;
extern int mii_ethtool_gset ( struct mii_if_info * mii , struct ethtool_cmd * ecmd ) ;
extern int mii_ethtool_sset ( struct mii_if_info * mii , struct ethtool_cmd * ecmd ) ;
extern int mii_check_gmii_support ( struct mii_if_info * mii ) ;
extern void mii_check_link ( struct mii_if_info * mii ) ;
extern unsigned int mii_check_media ( struct mii_if_info * mii , unsigned int ok_to_print , unsigned int init_media ) ;
extern int generic_mii_ioctl ( struct mii_if_info * mii_if , struct mii_ioctl_data * mii_data , int cmd , unsigned int * duplex_changed ) ;
extern int rtnetlink_send ( struct sk_buff * skb , struct net * net , u32 pid , u32 group , int echo ) ;
extern int rtnl_unicast ( struct sk_buff * skb , struct net * net , u32 pid ) ;
extern void rtnl_notify ( struct sk_buff * skb , struct net * net , u32 pid , u32 group , struct nlmsghdr * nlh , gfp_t flags ) ;
extern void rtnl_set_sk_err ( struct net * net , u32 group , int error ) ;
extern int rtnetlink_put_metrics ( struct sk_buff * skb , u32 * metrics ) ;
extern int rtnl_put_cacheinfo ( struct sk_buff * skb , struct dst_entry * dst , u32 id , long expires , u32 error ) ;
extern void rtmsg_ifinfo ( int type , struct net_device * dev , unsigned change ) ;
extern void rtnl_lock ( void ) ;
extern void rtnl_unlock ( void ) ;
extern int rtnl_trylock ( void ) ;
extern int rtnl_is_locked ( void ) ;
extern struct netdev_queue * dev_ingress_queue_create ( struct net_device * dev ) ;
extern void rtnetlink_init ( void ) ;
extern void __rtnl_unlock ( void ) ;
extern int ndo_dflt_fdb_dump ( struct sk_buff * skb , struct netlink_callback * cb , struct net_device * dev , int idx ) ;
extern int ndo_dflt_bridge_getlink ( struct sk_buff * skb , u32 pid , u32 seq , struct net_device * dev , u16 mode ) ;
extern void vlan_ioctl_set ( int ( * hook ) ( struct net * , void * ) ) ;
extern struct net_device * __vlan_find_dev_deep ( struct net_device * real_dev , u16 vlan_id ) ;
extern struct net_device * vlan_dev_real_dev ( const struct net_device * dev ) ;
extern u16 vlan_dev_vlan_id ( const struct net_device * dev ) ;
extern bool vlan_do_receive ( struct sk_buff * * skb ) ;
extern struct sk_buff * vlan_untag ( struct sk_buff * skb ) ;
extern int vlan_vid_add ( struct net_device * dev , unsigned short vid ) ;
extern void vlan_vid_del ( struct net_device * dev , unsigned short vid ) ;
extern int vlan_vids_add_by_dev ( struct net_device * dev , const struct net_device * by_dev ) ;
extern void vlan_vids_del_by_dev ( struct net_device * dev , const struct net_device * by_dev ) ;
extern bool vlan_uses_dev ( const struct net_device * dev ) ;
int request_firmware ( const struct firmware * * fw , const char * name , struct device * device ) ;
int request_firmware_nowait ( struct module * module , bool uevent , const char * name , struct device * device , gfp_t gfp , void * context , void ( * cont ) ( const struct firmware * fw , void * context ) ) ;
void release_firmware ( const struct firmware * fw ) ;
int cache_firmware ( const char * name ) ;
int uncache_firmware ( const char * name ) ;
extern long probe_kernel_read ( void * dst , const void * src , size_t size ) ;
extern long __probe_kernel_read ( void * dst , const void * src , size_t size ) ;
extern long __attribute__ ( ( no_instrument_function ) ) probe_kernel_write ( void * dst , const void * src , size_t size ) ;
extern long __attribute__ ( ( no_instrument_function ) ) __probe_kernel_write ( void * dst , const void * src , size_t size ) ;
int _set_memory_uc ( unsigned long addr , int numpages ) ;
int _set_memory_wc ( unsigned long addr , int numpages ) ;
int _set_memory_wb ( unsigned long addr , int numpages ) ;
int set_memory_uc ( unsigned long addr , int numpages ) ;
int set_memory_wc ( unsigned long addr , int numpages ) ;
int set_memory_wb ( unsigned long addr , int numpages ) ;
int set_memory_x ( unsigned long addr , int numpages ) ;
int set_memory_nx ( unsigned long addr , int numpages ) ;
int set_memory_ro ( unsigned long addr , int numpages ) ;
int set_memory_rw ( unsigned long addr , int numpages ) ;
int set_memory_np ( unsigned long addr , int numpages ) ;
int set_memory_4k ( unsigned long addr , int numpages ) ;
int set_memory_array_uc ( unsigned long * addr , int addrinarray ) ;
int set_memory_array_wc ( unsigned long * addr , int addrinarray ) ;
int set_memory_array_wb ( unsigned long * addr , int addrinarray ) ;
int set_pages_array_uc ( struct page * * pages , int addrinarray ) ;
int set_pages_array_wc ( struct page * * pages , int addrinarray ) ;
int set_pages_array_wb ( struct page * * pages , int addrinarray ) ;
int set_pages_uc ( struct page * page , int numpages ) ;
int set_pages_wb ( struct page * page , int numpages ) ;
int set_pages_x ( struct page * page , int numpages ) ;
int set_pages_nx ( struct page * page , int numpages ) ;
int set_pages_ro ( struct page * page , int numpages ) ;
int set_pages_rw ( struct page * page , int numpages ) ;
void clflush_cache_range ( void * addr , unsigned int size ) ;
void mark_rodata_ro ( void ) ;
void set_kernel_text_rw ( void ) ;
void set_kernel_text_ro ( void ) ;
void release_pages ( struct page * * pages , int nr , int cold ) ;
extern struct page * __page_cache_alloc ( gfp_t gfp ) ;
extern struct page * find_get_page ( struct address_space * mapping , unsigned long index ) ;
extern struct page * find_lock_page ( struct address_space * mapping , unsigned long index ) ;
extern struct page * find_or_create_page ( struct address_space * mapping , unsigned long index , gfp_t gfp_mask ) ;
unsigned find_get_pages ( struct address_space * mapping , unsigned long start , unsigned int nr_pages , struct page * * pages ) ;
unsigned find_get_pages_contig ( struct address_space * mapping , unsigned long start , unsigned int nr_pages , struct page * * pages ) ;
unsigned find_get_pages_tag ( struct address_space * mapping , unsigned long * index , int tag , unsigned int nr_pages , struct page * * pages ) ;
struct page * grab_cache_page_write_begin ( struct address_space * mapping , unsigned long index , unsigned flags ) ;
extern struct page * grab_cache_page_nowait ( struct address_space * mapping , unsigned long index ) ;
extern struct page * read_cache_page_async ( struct address_space * mapping , unsigned long index , filler_t * filler , void * data ) ;
extern struct page * read_cache_page ( struct address_space * mapping , unsigned long index , filler_t * filler , void * data ) ;
extern struct page * read_cache_page_gfp ( struct address_space * mapping , unsigned long index , gfp_t gfp_mask ) ;
extern int read_cache_pages ( struct address_space * mapping , struct list_head * pages , filler_t * filler , void * data ) ;
extern unsigned long linear_hugepage_index ( struct vm_area_struct * vma , unsigned long address ) ;
extern void __lock_page ( struct page * page ) ;
extern int __lock_page_killable ( struct page * page ) ;
extern int __lock_page_or_retry ( struct page * page , struct mm_struct * mm , unsigned int flags ) ;
extern void unlock_page ( struct page * page ) ;
extern void wait_on_page_bit ( struct page * page , int bit_nr ) ;
extern int wait_on_page_bit_killable ( struct page * page , int bit_nr ) ;
extern void end_page_writeback ( struct page * page ) ;
extern void add_page_wait_queue ( struct page * page , wait_queue_t * waiter ) ;
int add_to_page_cache_locked ( struct page * page , struct address_space * mapping , unsigned long index , gfp_t gfp_mask ) ;
int add_to_page_cache_lru ( struct page * page , struct address_space * mapping , unsigned long index , gfp_t gfp_mask ) ;
extern void delete_from_page_cache ( struct page * page ) ;
extern void __delete_from_page_cache ( struct page * page ) ;
int replace_page_cache_page ( struct page * old , struct page * new_ , gfp_t gfp_mask ) ;
extern void icmpv6_send ( struct sk_buff * skb , u8 type , u8 code , __u32 info ) ;
extern int icmpv6_init ( void ) ;
extern int icmpv6_err_convert ( u8 type , u8 code , int * err ) ;
extern void icmpv6_cleanup ( void ) ;
extern void icmpv6_param_prob ( struct sk_buff * skb , u8 code , int pos ) ;
extern void icmpv6_flow_init ( struct sock * sk , struct flowi6 * fl6 , u8 type , const struct in6_addr * saddr , const struct in6_addr * daddr , int oif ) ;
u64 res_counter_read_u64 ( struct res_counter * counter , int member ) ;
ssize_t res_counter_read ( struct res_counter * counter , int member , const char * buf , size_t nbytes , loff_t * pos , int ( * read_strategy ) ( unsigned long long val , char * s ) ) ;
int res_counter_memparse_write_strategy ( const char * buf , unsigned long long * res ) ;
void res_counter_init ( struct res_counter * counter , struct res_counter * parent ) ;
int res_counter_charge_locked ( struct res_counter * counter , unsigned long val , bool force ) ;
int res_counter_charge ( struct res_counter * counter , unsigned long val , struct res_counter * * limit_fail_at ) ;
int res_counter_charge_nofail ( struct res_counter * counter , unsigned long val , struct res_counter * * limit_fail_at ) ;
u64 res_counter_uncharge_locked ( struct res_counter * counter , unsigned long val ) ;
u64 res_counter_uncharge ( struct res_counter * counter , unsigned long val ) ;
u64 res_counter_uncharge_until ( struct res_counter * counter , struct res_counter * top , unsigned long val ) ;
extern int sk_filter ( struct sock * sk , struct sk_buff * skb ) ;
extern unsigned int sk_run_filter ( const struct sk_buff * skb , const struct sock_filter * filter ) ;
extern int sk_unattached_filter_create ( struct sk_filter * * pfp , struct sock_fprog * fprog ) ;
extern void sk_unattached_filter_destroy ( struct sk_filter * fp ) ;
extern int sk_attach_filter ( struct sock_fprog * fprog , struct sock * sk ) ;
extern int sk_detach_filter ( struct sock * sk ) ;
extern int sk_chk_filter ( struct sock_filter * filter , unsigned int flen ) ;
extern int sk_get_filter ( struct sock * sk , struct sock_filter * filter , unsigned len ) ;
extern void bpf_jit_compile ( struct sk_filter * fp ) ;
extern void bpf_jit_free ( struct sk_filter * fp ) ;
extern void poll_initwait ( struct poll_wqueues * pwq ) ;
extern void poll_freewait ( struct poll_wqueues * pwq ) ;
extern int poll_schedule_timeout ( struct poll_wqueues * pwq , int state , ktime_t * expires , unsigned long slack ) ;
extern long select_estimate_accuracy ( struct timespec * tv ) ;
extern int do_select ( int n , fd_set_bits * fds , struct timespec * end_time ) ;
extern int do_sys_poll ( struct pollfd * ufds , unsigned int nfds , struct timespec * end_time ) ;
extern int core_sys_select ( int n , fd_set * inp , fd_set * outp , fd_set * exp , struct timespec * end_time ) ;
extern int poll_select_set_timeout ( struct timespec * to , long sec , long nsec ) ;
extern int netlink_rcv_skb ( struct sk_buff * skb , int ( * cb ) ( struct sk_buff * , struct nlmsghdr * ) ) ;
extern int nlmsg_notify ( struct sock * sk , struct sk_buff * skb , u32 portid , unsigned int group , int report , gfp_t flags ) ;
extern int nla_validate ( const struct nlattr * head , int len , int maxtype , const struct nla_policy * policy ) ;
extern int nla_parse ( struct nlattr * * tb , int maxtype , const struct nlattr * head , int len , const struct nla_policy * policy ) ;
extern int nla_policy_len ( const struct nla_policy * , int ) ;
extern struct nlattr * nla_find ( const struct nlattr * head , int len , int attrtype ) ;
extern size_t nla_strlcpy ( char * dst , const struct nlattr * nla , size_t dstsize ) ;
extern int nla_memcpy ( void * dest , const struct nlattr * src , int count ) ;
extern int nla_memcmp ( const struct nlattr * nla , const void * data , size_t size ) ;
extern int nla_strcmp ( const struct nlattr * nla , const char * str ) ;
extern struct nlattr * __nla_reserve ( struct sk_buff * skb , int attrtype , int attrlen ) ;
extern void * __nla_reserve_nohdr ( struct sk_buff * skb , int attrlen ) ;
extern struct nlattr * nla_reserve ( struct sk_buff * skb , int attrtype , int attrlen ) ;
extern void * nla_reserve_nohdr ( struct sk_buff * skb , int attrlen ) ;
extern void __nla_put ( struct sk_buff * skb , int attrtype , int attrlen , const void * data ) ;
extern void __nla_put_nohdr ( struct sk_buff * skb , int attrlen , const void * data ) ;
extern int nla_put ( struct sk_buff * skb , int attrtype , int attrlen , const void * data ) ;
extern int nla_put_nohdr ( struct sk_buff * skb , int attrlen , const void * data ) ;
extern int nla_append ( struct sk_buff * skb , int attrlen , const void * data ) ;
extern int __rtnl_register ( int protocol , int msgtype , rtnl_doit_func , rtnl_dumpit_func , rtnl_calcit_func ) ;
extern void rtnl_register ( int protocol , int msgtype , rtnl_doit_func , rtnl_dumpit_func , rtnl_calcit_func ) ;
extern int rtnl_unregister ( int protocol , int msgtype ) ;
extern void rtnl_unregister_all ( int protocol ) ;
extern int __rtnl_link_register ( struct rtnl_link_ops * ops ) ;
extern void __rtnl_link_unregister ( struct rtnl_link_ops * ops ) ;
extern int rtnl_link_register ( struct rtnl_link_ops * ops ) ;
extern void rtnl_link_unregister ( struct rtnl_link_ops * ops ) ;
extern int __rtnl_af_register ( struct rtnl_af_ops * ops ) ;
extern void __rtnl_af_unregister ( struct rtnl_af_ops * ops ) ;
extern int rtnl_af_register ( struct rtnl_af_ops * ops ) ;
extern void rtnl_af_unregister ( struct rtnl_af_ops * ops ) ;
extern struct net * rtnl_link_get_net ( struct net * src_net , struct nlattr * tb [ ] ) ;
extern struct net_device * rtnl_create_link ( struct net * net , char * ifname , const struct rtnl_link_ops * ops , struct nlattr * tb [ ] ) ;
extern int rtnl_configure_link ( struct net_device * dev , const struct ifinfomsg * ifm ) ;
extern void neigh_table_init ( struct neigh_table * tbl ) ;
extern int neigh_table_clear ( struct neigh_table * tbl ) ;
extern struct neighbour * neigh_lookup ( struct neigh_table * tbl , const void * pkey , struct net_device * dev ) ;
extern struct neighbour * neigh_lookup_nodev ( struct neigh_table * tbl , struct net * net , const void * pkey ) ;
extern struct neighbour * __neigh_create ( struct neigh_table * tbl , const void * pkey , struct net_device * dev , bool want_ref ) ;
extern void neigh_destroy ( struct neighbour * neigh ) ;
extern int __neigh_event_send ( struct neighbour * neigh , struct sk_buff * skb ) ;
extern int neigh_update ( struct neighbour * neigh , const u8 * lladdr , u8 new_ , u32 flags ) ;
extern void neigh_changeaddr ( struct neigh_table * tbl , struct net_device * dev ) ;
extern int neigh_ifdown ( struct neigh_table * tbl , struct net_device * dev ) ;
extern int neigh_resolve_output ( struct neighbour * neigh , struct sk_buff * skb ) ;
extern int neigh_connected_output ( struct neighbour * neigh , struct sk_buff * skb ) ;
extern int neigh_compat_output ( struct neighbour * neigh , struct sk_buff * skb ) ;
extern int neigh_direct_output ( struct neighbour * neigh , struct sk_buff * skb ) ;
extern struct neighbour * neigh_event_ns ( struct neigh_table * tbl , u8 * lladdr , void * saddr , struct net_device * dev ) ;
extern struct neigh_parms * neigh_parms_alloc ( struct net_device * dev , struct neigh_table * tbl ) ;
extern void neigh_parms_release ( struct neigh_table * tbl , struct neigh_parms * parms ) ;
extern unsigned long neigh_rand_reach_time ( unsigned long base ) ;
extern void pneigh_enqueue ( struct neigh_table * tbl , struct neigh_parms * p , struct sk_buff * skb ) ;
extern struct pneigh_entry * pneigh_lookup ( struct neigh_table * tbl , struct net * net , const void * key , struct net_device * dev , int creat ) ;
extern struct pneigh_entry * __pneigh_lookup ( struct neigh_table * tbl , struct net * net , const void * key , struct net_device * dev ) ;
extern int pneigh_delete ( struct neigh_table * tbl , struct net * net , const void * key , struct net_device * dev ) ;
extern void neigh_app_ns ( struct neighbour * n ) ;
extern void neigh_for_each ( struct neigh_table * tbl , void ( * cb ) ( struct neighbour * , void * ) , void * cookie ) ;
extern void __neigh_for_each_release ( struct neigh_table * tbl , int ( * cb ) ( struct neighbour * ) ) ;
extern void pneigh_for_each ( struct neigh_table * tbl , void ( * cb ) ( struct pneigh_entry * ) ) ;
extern void * neigh_seq_start ( struct seq_file * , loff_t * , struct neigh_table * , unsigned int ) ;
extern void * neigh_seq_next ( struct seq_file * , void * , loff_t * ) ;
extern void neigh_seq_stop ( struct seq_file * , void * ) ;
extern int neigh_sysctl_register ( struct net_device * dev , struct neigh_parms * p , char * p_name , proc_handler * proc_handler ) ;
extern void neigh_sysctl_unregister ( struct neigh_parms * p ) ;
extern u32 * dst_cow_metrics_generic ( struct dst_entry * dst , unsigned long old ) ;
extern void __dst_destroy_metrics_generic ( struct dst_entry * dst , unsigned long old ) ;
extern void dst_release ( struct dst_entry * dst ) ;
extern int dst_discard ( struct sk_buff * skb ) ;
extern void * dst_alloc ( struct dst_ops * ops , struct net_device * dev , int initial_ref , int initial_obsolete , unsigned short flags ) ;
extern void __dst_free ( struct dst_entry * dst ) ;
extern struct dst_entry * dst_destroy ( struct dst_entry * dst ) ;
extern void dst_init ( void ) ;
extern struct dst_entry * xfrm_lookup ( struct net * net , struct dst_entry * dst_orig , const struct flowi * fl , struct sock * sk , int flags ) ;
int mem_cgroup_sockets_init ( struct mem_cgroup * memcg , struct cgroup_subsys * ss ) ;
void mem_cgroup_sockets_destroy ( struct mem_cgroup * memcg ) ;
extern void sk_stream_write_space ( struct sock * sk ) ;
extern int __sk_backlog_rcv ( struct sock * sk , struct sk_buff * skb ) ;
extern int sk_stream_wait_connect ( struct sock * sk , long * timeo_p ) ;
extern int sk_stream_wait_memory ( struct sock * sk , long * timeo_p ) ;
extern void sk_stream_wait_close ( struct sock * sk , long timeo_p ) ;
extern int sk_stream_error ( struct sock * sk , int flags , int err ) ;
extern void sk_stream_kill_queues ( struct sock * sk ) ;
extern void sk_set_memalloc ( struct sock * sk ) ;
extern void sk_clear_memalloc ( struct sock * sk ) ;
extern int sk_wait_data ( struct sock * sk , long * timeo ) ;
extern int proto_register ( struct proto * prot , int alloc_slab ) ;
extern void proto_unregister ( struct proto * prot ) ;
extern void sock_prot_inuse_add ( struct net * net , struct proto * prot , int inc ) ;
extern int sock_prot_inuse_get ( struct net * net , struct proto * proto ) ;
void sk_prot_clear_portaddr_nulls ( struct sock * sk , int size ) ;
extern int __sk_mem_schedule ( struct sock * sk , int size , int kind ) ;
extern void __sk_mem_reclaim ( struct sock * sk ) ;
extern void lock_sock_nested ( struct sock * sk , int subclass ) ;
extern void release_sock ( struct sock * sk ) ;
extern bool lock_sock_fast ( struct sock * sk ) ;
extern struct sock * sk_alloc ( struct net * net , int family , gfp_t priority , struct proto * prot ) ;
extern void sk_free ( struct sock * sk ) ;
extern void sk_release_kernel ( struct sock * sk ) ;
extern struct sock * sk_clone_lock ( const struct sock * sk , const gfp_t priority ) ;
extern struct sk_buff * sock_wmalloc ( struct sock * sk , unsigned long size , int force , gfp_t priority ) ;
extern struct sk_buff * sock_rmalloc ( struct sock * sk , unsigned long size , int force , gfp_t priority ) ;
extern void sock_wfree ( struct sk_buff * skb ) ;
extern void sock_rfree ( struct sk_buff * skb ) ;
extern void sock_edemux ( struct sk_buff * skb ) ;
extern int sock_setsockopt ( struct socket * sock , int level , int op , char * optval , unsigned int optlen ) ;
extern int sock_getsockopt ( struct socket * sock , int level , int op , char * optval , int * optlen ) ;
extern struct sk_buff * sock_alloc_send_skb ( struct sock * sk , unsigned long size , int noblock , int * errcode ) ;
extern struct sk_buff * sock_alloc_send_pskb ( struct sock * sk , unsigned long header_len , unsigned long data_len , int noblock , int * errcode ) ;
extern void * sock_kmalloc ( struct sock * sk , int size , gfp_t priority ) ;
extern void sock_kfree_s ( struct sock * sk , void * mem , int size ) ;
extern void sk_send_sigurg ( struct sock * sk ) ;
extern int sock_no_bind ( struct socket * , struct sockaddr * , int ) ;
extern int sock_no_connect ( struct socket * , struct sockaddr * , int , int ) ;
extern int sock_no_socketpair ( struct socket * , struct socket * ) ;
extern int sock_no_accept ( struct socket * , struct socket * , int ) ;
extern int sock_no_getname ( struct socket * , struct sockaddr * , int * , int ) ;
extern unsigned int sock_no_poll ( struct file * , struct socket * , struct poll_table_struct * ) ;
extern int sock_no_ioctl ( struct socket * , unsigned int , unsigned long ) ;
extern int sock_no_listen ( struct socket * , int ) ;
extern int sock_no_shutdown ( struct socket * , int ) ;
extern int sock_no_getsockopt ( struct socket * , int , int , char * , int * ) ;
extern int sock_no_setsockopt ( struct socket * , int , int , char * , unsigned int ) ;
extern int sock_no_sendmsg ( struct kiocb * , struct socket * , struct msghdr * , size_t ) ;
extern int sock_no_recvmsg ( struct kiocb * , struct socket * , struct msghdr * , size_t , int ) ;
extern int sock_no_mmap ( struct file * file , struct socket * sock , struct vm_area_struct * vma ) ;
extern ssize_t sock_no_sendpage ( struct socket * sock , struct page * page , int offset , size_t size , int flags ) ;
extern int sock_common_getsockopt ( struct socket * sock , int level , int optname , char * optval , int * optlen ) ;
extern int sock_common_recvmsg ( struct kiocb * iocb , struct socket * sock , struct msghdr * msg , size_t size , int flags ) ;
extern int sock_common_setsockopt ( struct socket * sock , int level , int optname , char * optval , unsigned int optlen ) ;
extern int compat_sock_common_getsockopt ( struct socket * sock , int level , int optname , char * optval , int * optlen ) ;
extern int compat_sock_common_setsockopt ( struct socket * sock , int level , int optname , char * optval , unsigned int optlen ) ;
extern void sk_common_release ( struct sock * sk ) ;
extern void sock_init_data ( struct socket * sock , struct sock * sk ) ;
extern void sk_filter_release_rcu ( struct callback_head * rcu ) ;
extern int sk_receive_skb ( struct sock * sk , struct sk_buff * skb , const int nested ) ;
extern kuid_t sock_i_uid ( struct sock * sk ) ;
extern unsigned long sock_i_ino ( struct sock * sk ) ;
extern void sk_reset_txq ( struct sock * sk ) ;
extern struct dst_entry * __sk_dst_check ( struct sock * sk , u32 cookie ) ;
extern struct dst_entry * sk_dst_check ( struct sock * sk , u32 cookie ) ;
extern void sk_setup_caps ( struct sock * sk , struct dst_entry * dst ) ;
extern void sk_reset_timer ( struct sock * sk , struct timer_list * timer , unsigned long expires ) ;
extern void sk_stop_timer ( struct sock * sk , struct timer_list * timer ) ;
extern int sock_queue_rcv_skb ( struct sock * sk , struct sk_buff * skb ) ;
extern int sock_queue_err_skb ( struct sock * sk , struct sk_buff * skb ) ;
struct sk_buff * sk_stream_alloc_skb ( struct sock * sk , int size , gfp_t gfp ) ;
extern bool sk_page_frag_refill ( struct sock * sk , struct page_frag * pfrag ) ;
extern void __sock_recv_timestamp ( struct msghdr * msg , struct sock * sk , struct sk_buff * skb ) ;
extern void __sock_recv_wifi_status ( struct msghdr * msg , struct sock * sk , struct sk_buff * skb ) ;
extern void __sock_recv_ts_and_drops ( struct msghdr * msg , struct sock * sk , struct sk_buff * skb ) ;
extern int sock_tx_timestamp ( struct sock * sk , __u8 * tx_flags ) ;
extern void sock_enable_timestamp ( struct sock * sk , int flag ) ;
extern int sock_get_timestamp ( struct sock * , struct timeval * ) ;
extern int sock_get_timestampns ( struct sock * , struct timespec * ) ;
extern int inet_rtx_syn_ack ( struct sock * parent , struct request_sock * req ) ;
extern int reqsk_queue_alloc ( struct request_sock_queue * queue , unsigned int nr_table_entries ) ;
extern void __reqsk_queue_destroy ( struct request_sock_queue * queue ) ;
extern void reqsk_queue_destroy ( struct request_sock_queue * queue ) ;
extern void reqsk_fastopen_remove ( struct sock * sk , struct request_sock * req , bool reset ) ;
extern int inet_sk_rebuild_header ( struct sock * sk ) ;
extern void build_ehash_secret ( void ) ;
extern struct sock * inet_csk_clone_lock ( const struct sock * sk , const struct request_sock * req , const gfp_t priority ) ;
extern void inet_csk_init_xmit_timers ( struct sock * sk , void ( * retransmit_handler ) ( unsigned long ) , void ( * delack_handler ) ( unsigned long ) , void ( * keepalive_handler ) ( unsigned long ) ) ;
extern void inet_csk_clear_xmit_timers ( struct sock * sk ) ;
extern void inet_csk_delete_keepalive_timer ( struct sock * sk ) ;
extern void inet_csk_reset_keepalive_timer ( struct sock * sk , unsigned long timeout ) ;
extern struct sock * inet_csk_accept ( struct sock * sk , int flags , int * err ) ;
extern struct request_sock * inet_csk_search_req ( const struct sock * sk , struct request_sock * * * prevp , const __be16 rport , const __be32 raddr , const __be32 laddr ) ;
extern int inet_csk_bind_conflict ( const struct sock * sk , const struct inet_bind_bucket * tb , bool relax ) ;
extern int inet_csk_get_port ( struct sock * sk , unsigned short snum ) ;
extern struct dst_entry * inet_csk_route_req ( struct sock * sk , struct flowi4 * fl4 , const struct request_sock * req ) ;
extern struct dst_entry * inet_csk_route_child_sock ( struct sock * sk , struct sock * newsk , const struct request_sock * req ) ;
extern void inet_csk_reqsk_queue_hash_add ( struct sock * sk , struct request_sock * req , unsigned long timeout ) ;
extern void inet_csk_reqsk_queue_prune ( struct sock * parent , const unsigned long interval , const unsigned long timeout , const unsigned long max_rto ) ;
extern void inet_csk_destroy_sock ( struct sock * sk ) ;
extern void inet_csk_prepare_forced_close ( struct sock * sk ) ;
extern int inet_csk_listen_start ( struct sock * sk , const int nr_table_entries ) ;
extern void inet_csk_listen_stop ( struct sock * sk ) ;
extern void inet_csk_addr2sockaddr ( struct sock * sk , struct sockaddr * uaddr ) ;
extern int inet_csk_compat_getsockopt ( struct sock * sk , int level , int optname , char * optval , int * optlen ) ;
extern int inet_csk_compat_setsockopt ( struct sock * sk , int level , int optname , char * optval , unsigned int optlen ) ;
extern struct dst_entry * inet_csk_update_pmtu ( struct sock * sk , u32 mtu ) ;
extern void inet_twdr_hangman ( unsigned long data ) ;
extern void inet_twdr_twkill_work ( struct work_struct * work ) ;
extern void inet_twdr_twcal_tick ( unsigned long data ) ;
extern void inet_twsk_put ( struct inet_timewait_sock * tw ) ;
extern int inet_twsk_unhash ( struct inet_timewait_sock * tw ) ;
extern int inet_twsk_bind_unhash ( struct inet_timewait_sock * tw , struct inet_hashinfo * hashinfo ) ;
extern struct inet_timewait_sock * inet_twsk_alloc ( const struct sock * sk , const int state ) ;
extern void __inet_twsk_hashdance ( struct inet_timewait_sock * tw , struct sock * sk , struct inet_hashinfo * hashinfo ) ;
extern void inet_twsk_schedule ( struct inet_timewait_sock * tw , struct inet_timewait_death_row * twdr , const int timeo , const int timewait_len ) ;
extern void inet_twsk_deschedule ( struct inet_timewait_sock * tw , struct inet_timewait_death_row * twdr ) ;
extern void inet_twsk_purge ( struct inet_hashinfo * hashinfo , struct inet_timewait_death_row * twdr , int family ) ;
extern void tcp_sock_destruct ( struct sock * sk ) ;
extern int inet6_sk_rebuild_header ( struct sock * sk ) ;
extern int gnet_stats_start_copy ( struct sk_buff * skb , int type , spinlock_t * lock , struct gnet_dump * d ) ;
extern int gnet_stats_start_copy_compat ( struct sk_buff * skb , int type , int tc_stats_type , int xstats_type , spinlock_t * lock , struct gnet_dump * d ) ;
extern int gnet_stats_copy_basic ( struct gnet_dump * d , struct gnet_stats_basic_packed * b ) ;
extern int gnet_stats_copy_rate_est ( struct gnet_dump * d , const struct gnet_stats_basic_packed * b , struct gnet_stats_rate_est * r ) ;
extern int gnet_stats_copy_queue ( struct gnet_dump * d , struct gnet_stats_queue * q ) ;
extern int gnet_stats_copy_app ( struct gnet_dump * d , void * st , int len ) ;
extern int gnet_stats_finish_copy ( struct gnet_dump * d ) ;
extern int gen_new_estimator ( struct gnet_stats_basic_packed * bstats , struct gnet_stats_rate_est * rate_est , spinlock_t * stats_lock , struct nlattr * opt ) ;
extern void gen_kill_estimator ( struct gnet_stats_basic_packed * bstats , struct gnet_stats_rate_est * rate_est ) ;
extern int gen_replace_estimator ( struct gnet_stats_basic_packed * bstats , struct gnet_stats_rate_est * rate_est , spinlock_t * stats_lock , struct nlattr * opt ) ;
extern bool gen_estimator_active ( const struct gnet_stats_basic_packed * bstats , const struct gnet_stats_rate_est * rate_est ) ;
extern int qdisc_class_hash_init ( struct Qdisc_class_hash * ) ;
extern void qdisc_class_hash_insert ( struct Qdisc_class_hash * , struct Qdisc_class_common * ) ;
extern void qdisc_class_hash_remove ( struct Qdisc_class_hash * , struct Qdisc_class_common * ) ;
extern void qdisc_class_hash_grow ( struct Qdisc * , struct Qdisc_class_hash * ) ;
extern void qdisc_class_hash_destroy ( struct Qdisc_class_hash * ) ;
extern void dev_init_scheduler ( struct net_device * dev ) ;
extern void dev_shutdown ( struct net_device * dev ) ;
extern void dev_activate ( struct net_device * dev ) ;
extern void dev_deactivate ( struct net_device * dev ) ;
extern void dev_deactivate_many ( struct list_head * head ) ;
extern struct Qdisc * dev_graft_qdisc ( struct netdev_queue * dev_queue , struct Qdisc * qdisc ) ;
extern void qdisc_reset ( struct Qdisc * qdisc ) ;
extern void qdisc_destroy ( struct Qdisc * qdisc ) ;
extern void qdisc_tree_decrease_qlen ( struct Qdisc * qdisc , unsigned int n ) ;
extern struct Qdisc * qdisc_alloc ( struct netdev_queue * dev_queue , struct Qdisc_ops * ops ) ;
extern struct Qdisc * qdisc_create_dflt ( struct netdev_queue * dev_queue , struct Qdisc_ops * ops , u32 parentid ) ;
extern void __qdisc_calculate_pkt_len ( struct sk_buff * skb , const struct qdisc_size_table * stab ) ;
extern void tcf_destroy ( struct tcf_proto * tp ) ;
extern void tcf_destroy_chain ( struct tcf_proto * * fl ) ;
extern void qdisc_watchdog_init ( struct qdisc_watchdog * wd , struct Qdisc * qdisc ) ;
extern void qdisc_watchdog_schedule ( struct qdisc_watchdog * wd , psched_time_t expires ) ;
extern void qdisc_watchdog_cancel ( struct qdisc_watchdog * wd ) ;
extern int fifo_set_limit ( struct Qdisc * q , unsigned int limit ) ;
extern struct Qdisc * fifo_create_dflt ( struct Qdisc * sch , struct Qdisc_ops * ops , unsigned int limit ) ;
extern int register_qdisc ( struct Qdisc_ops * qops ) ;
extern int unregister_qdisc ( struct Qdisc_ops * qops ) ;
extern void qdisc_list_del ( struct Qdisc * q ) ;
extern struct Qdisc * qdisc_lookup ( struct net_device * dev , u32 handle ) ;
extern struct Qdisc * qdisc_lookup_class ( struct net_device * dev , u32 handle ) ;
extern struct qdisc_rate_table * qdisc_get_rtab ( struct tc_ratespec * r , struct nlattr * tab ) ;
extern void qdisc_put_rtab ( struct qdisc_rate_table * tab ) ;
extern void qdisc_put_stab ( struct qdisc_size_table * tab ) ;
extern void qdisc_warn_nonwc ( char * txt , struct Qdisc * qdisc ) ;
extern int sch_direct_xmit ( struct sk_buff * skb , struct Qdisc * q , struct net_device * dev , struct netdev_queue * txq , spinlock_t * root_lock ) ;
extern void __qdisc_run ( struct Qdisc * q ) ;
extern int tc_classify_compat ( struct sk_buff * skb , const struct tcf_proto * tp , struct tcf_result * res ) ;
extern int tc_classify ( struct sk_buff * skb , const struct tcf_proto * tp , struct tcf_result * res ) ;
extern int register_reboot_notifier ( struct notifier_block * ) ;
extern int unregister_reboot_notifier ( struct notifier_block * ) ;
extern void machine_restart ( char * cmd ) ;
extern void machine_halt ( void ) ;
extern void machine_power_off ( void ) ;
extern void machine_shutdown ( void ) ;
extern void machine_crash_shutdown ( struct pt_regs * ) ;
extern void kernel_restart_prepare ( char * cmd ) ;
extern void kernel_restart ( char * cmd ) ;
extern void kernel_halt ( void ) ;
extern void kernel_power_off ( void ) ;
void ctrl_alt_del ( void ) ;
extern int orderly_poweroff ( bool force ) ;
extern void emergency_restart ( void ) ;
extern void machine_emergency_restart ( void ) ;
extern struct hd_struct * disk_get_part ( struct gendisk * disk , int partno ) ;
extern void disk_part_iter_init ( struct disk_part_iter * piter , struct gendisk * disk , unsigned int flags ) ;
extern struct hd_struct * disk_part_iter_next ( struct disk_part_iter * piter ) ;
extern void disk_part_iter_exit ( struct disk_part_iter * piter ) ;
extern struct hd_struct * disk_map_sector_rcu ( struct gendisk * disk , sector_t sector ) ;
extern void part_round_stats ( int cpu , struct hd_struct * part ) ;
extern void add_disk ( struct gendisk * disk ) ;
extern void del_gendisk ( struct gendisk * gp ) ;
extern struct gendisk * get_gendisk ( dev_t dev , int * partno ) ;
extern struct block_device * bdget_disk ( struct gendisk * disk , int partno ) ;
extern void set_device_ro ( struct block_device * bdev , int flag ) ;
extern void set_disk_ro ( struct gendisk * disk , int flag ) ;
extern void disk_block_events ( struct gendisk * disk ) ;
extern void disk_unblock_events ( struct gendisk * disk ) ;
extern void disk_flush_events ( struct gendisk * disk , unsigned int mask ) ;
extern unsigned int disk_clear_events ( struct gendisk * disk , unsigned int mask ) ;
extern void add_disk_randomness ( struct gendisk * disk ) ;
extern void rand_initialize_disk ( struct gendisk * disk ) ;
extern int blk_alloc_devt ( struct hd_struct * part , dev_t * devt ) ;
extern void blk_free_devt ( dev_t devt ) ;
extern dev_t blk_lookup_devt ( const char * name , int partno ) ;
extern char * disk_name ( struct gendisk * hd , int partno , char * buf ) ;
extern int disk_expand_part_tbl ( struct gendisk * disk , int target ) ;
extern int rescan_partitions ( struct gendisk * disk , struct block_device * bdev ) ;
extern int invalidate_partitions ( struct gendisk * disk , struct block_device * bdev ) ;
extern struct hd_struct * add_partition ( struct gendisk * disk , int partno , sector_t start , sector_t len , int flags , struct partition_meta_info * info ) ;
extern void __delete_partition ( struct hd_struct * ) ;
extern void delete_partition ( struct gendisk * , int ) ;
extern void printk_all_partitions ( void ) ;
extern struct gendisk * alloc_disk_node ( int minors , int node_id ) ;
extern struct gendisk * alloc_disk ( int minors ) ;
extern struct kobject * get_disk ( struct gendisk * disk ) ;
extern void put_disk ( struct gendisk * disk ) ;
extern void blk_register_region ( dev_t devt , unsigned long range , struct module * module , struct kobject * ( * probe ) ( dev_t , int * , void * ) , int ( * lock ) ( dev_t , void * ) , void * data ) ;
extern void blk_unregister_region ( dev_t devt , unsigned long range ) ;
extern ssize_t part_size_show ( struct device * dev , struct device_attribute * attr , char * buf ) ;
extern ssize_t part_stat_show ( struct device * dev , struct device_attribute * attr , char * buf ) ;
extern ssize_t part_inflight_show ( struct device * dev , struct device_attribute * attr , char * buf ) ;
int fprop_global_init ( struct fprop_global * p ) ;
void fprop_global_destroy ( struct fprop_global * p ) ;
bool fprop_new_period ( struct fprop_global * p , int periods ) ;
int fprop_local_init_single ( struct fprop_local_single * pl ) ;
void fprop_local_destroy_single ( struct fprop_local_single * pl ) ;
void __fprop_inc_single ( struct fprop_global * p , struct fprop_local_single * pl ) ;
void fprop_fraction_single ( struct fprop_global * p , struct fprop_local_single * pl , unsigned long * numerator , unsigned long * denominator ) ;
int fprop_local_init_percpu ( struct fprop_local_percpu * pl ) ;
void fprop_local_destroy_percpu ( struct fprop_local_percpu * pl ) ;
void __fprop_inc_percpu ( struct fprop_global * p , struct fprop_local_percpu * pl ) ;
void __fprop_inc_percpu_max ( struct fprop_global * p , struct fprop_local_percpu * pl , int max_frac ) ;
void fprop_fraction_percpu ( struct fprop_global * p , struct fprop_local_percpu * pl , unsigned long * numerator , unsigned long * denominator ) ;
int inode_wait ( void * ) ;
void writeback_inodes_sb ( struct super_block * , enum wb_reason reason ) ;
void writeback_inodes_sb_nr ( struct super_block * , unsigned long nr , enum wb_reason reason ) ;
int writeback_inodes_sb_if_idle ( struct super_block * , enum wb_reason reason ) ;
int writeback_inodes_sb_nr_if_idle ( struct super_block * , unsigned long nr , enum wb_reason reason ) ;
void sync_inodes_sb ( struct super_block * ) ;
long writeback_inodes_wb ( struct bdi_writeback * wb , long nr_pages , enum wb_reason reason ) ;
long wb_do_writeback ( struct bdi_writeback * wb , int force_wait ) ;
void wakeup_flusher_threads ( long nr_pages , enum wb_reason reason ) ;
void inode_wait_for_writeback ( struct inode * inode ) ;
void laptop_io_completion ( struct backing_dev_info * info ) ;
void laptop_sync_completion ( void ) ;
void laptop_mode_sync ( struct work_struct * work ) ;
void laptop_mode_timer_fn ( unsigned long data ) ;
void throttle_vm_writeout ( gfp_t gfp_mask ) ;
bool zone_dirty_ok ( struct zone * zone ) ;
extern int dirty_background_ratio_handler ( struct ctl_table * table , int write , void * buffer , size_t * lenp , loff_t * ppos ) ;
extern int dirty_background_bytes_handler ( struct ctl_table * table , int write , void * buffer , size_t * lenp , loff_t * ppos ) ;
extern int dirty_ratio_handler ( struct ctl_table * table , int write , void * buffer , size_t * lenp , loff_t * ppos ) ;
extern int dirty_bytes_handler ( struct ctl_table * table , int write , void * buffer , size_t * lenp , loff_t * ppos ) ;
int dirty_writeback_centisecs_handler ( struct ctl_table * , int , void * , size_t * , loff_t * ) ;
void global_dirty_limits ( unsigned long * pbackground , unsigned long * pdirty ) ;
unsigned long bdi_dirty_limit ( struct backing_dev_info * bdi , unsigned long dirty ) ;
void __bdi_update_bandwidth ( struct backing_dev_info * bdi , unsigned long thresh , unsigned long bg_thresh , unsigned long dirty , unsigned long bdi_thresh , unsigned long bdi_dirty , unsigned long start_time ) ;
void page_writeback_init ( void ) ;
void balance_dirty_pages_ratelimited ( struct address_space * mapping ) ;
int generic_writepages ( struct address_space * mapping , struct writeback_control * wbc ) ;
void tag_pages_for_writeback ( struct address_space * mapping , unsigned long start , unsigned long end ) ;
int write_cache_pages ( struct address_space * mapping , struct writeback_control * wbc , writepage_t writepage , void * data ) ;
int do_writepages ( struct address_space * mapping , struct writeback_control * wbc ) ;
void set_page_dirty_balance ( struct page * page , int page_mkwrite ) ;
void writeback_set_ratelimit ( void ) ;
void tag_pages_for_writeback ( struct address_space * mapping , unsigned long start , unsigned long end ) ;
void account_page_redirty ( struct page * page ) ;
int bdi_init ( struct backing_dev_info * bdi ) ;
void bdi_destroy ( struct backing_dev_info * bdi ) ;
__attribute__ ( ( format ( printf , 3 , 4 ) ) ) int bdi_register ( struct backing_dev_info * bdi , struct device * parent , const char * fmt , ... ) ;
int bdi_register_dev ( struct backing_dev_info * bdi , dev_t dev ) ;
void bdi_unregister ( struct backing_dev_info * bdi ) ;
int bdi_setup_and_register ( struct backing_dev_info * , char * , unsigned int ) ;
void bdi_start_writeback ( struct backing_dev_info * bdi , long nr_pages , enum wb_reason reason ) ;
void bdi_start_background_writeback ( struct backing_dev_info * bdi ) ;
int bdi_writeback_thread ( void * data ) ;
int bdi_has_dirty_io ( struct backing_dev_info * bdi ) ;
void bdi_wakeup_thread_delayed ( struct backing_dev_info * bdi ) ;
void bdi_lock_two ( struct bdi_writeback * wb1 , struct bdi_writeback * wb2 ) ;
extern void bdi_writeout_inc ( struct backing_dev_info * bdi ) ;
int bdi_set_min_ratio ( struct backing_dev_info * bdi , unsigned int min_ratio ) ;
int bdi_set_max_ratio ( struct backing_dev_info * bdi , unsigned int max_ratio ) ;
int writeback_in_progress ( struct backing_dev_info * bdi ) ;
void clear_bdi_congested ( struct backing_dev_info * bdi , int sync ) ;
void set_bdi_congested ( struct backing_dev_info * bdi , int sync ) ;
long congestion_wait ( int sync , long timeout ) ;
long wait_iff_congested ( struct zone * zone , int sync , long timeout ) ;
int pdflush_proc_obsolete ( struct ctl_table * table , int write , void * buffer , size_t * lenp , loff_t * ppos ) ;
extern mempool_t * mempool_create ( int min_nr , mempool_alloc_t * alloc_fn , mempool_free_t * free_fn , void * pool_data ) ;
extern mempool_t * mempool_create_node ( int min_nr , mempool_alloc_t * alloc_fn , mempool_free_t * free_fn , void * pool_data , gfp_t gfp_mask , int nid ) ;
extern int mempool_resize ( mempool_t * pool , int new_min_nr , gfp_t gfp_mask ) ;
extern void mempool_destroy ( mempool_t * pool ) ;
extern void * mempool_alloc ( mempool_t * pool , gfp_t gfp_mask ) ;
extern void mempool_free ( void * element , mempool_t * pool ) ;
void * mempool_alloc_slab ( gfp_t gfp_mask , void * pool_data ) ;
void mempool_free_slab ( void * element , void * pool_data ) ;
void * mempool_kmalloc ( gfp_t gfp_mask , void * pool_data ) ;
void mempool_kfree ( void * element , void * pool_data ) ;
void * mempool_alloc_pages ( gfp_t gfp_mask , void * pool_data ) ;
void mempool_free_pages ( void * element , void * pool_data ) ;
void put_io_context ( struct io_context * ioc ) ;
void put_io_context_active ( struct io_context * ioc ) ;
void exit_io_context ( struct task_struct * task ) ;
struct io_context * get_task_io_context ( struct task_struct * task , gfp_t gfp_flags , int node ) ;
extern int ioprio_best ( unsigned short aprio , unsigned short bprio ) ;
extern int set_task_ioprio ( struct task_struct * task , int ioprio ) ;
extern struct bio_pair * bio_split ( struct bio * bi , int first_sectors ) ;
extern void bio_pair_release ( struct bio_pair * dbio ) ;
extern struct bio_set * bioset_create ( unsigned int , unsigned int ) ;
extern void bioset_free ( struct bio_set * ) ;
extern struct bio * bio_alloc_bioset ( gfp_t , int , struct bio_set * ) ;
extern void bio_put ( struct bio * ) ;
extern void __bio_clone ( struct bio * , struct bio * ) ;
extern struct bio * bio_clone_bioset ( struct bio * , gfp_t , struct bio_set * bs ) ;
extern void bio_endio ( struct bio * , int ) ;
extern int bio_phys_segments ( struct request_queue * , struct bio * ) ;
extern void bio_init ( struct bio * ) ;
extern void bio_reset ( struct bio * ) ;
extern int bio_add_page ( struct bio * , struct page * , unsigned int , unsigned int ) ;
extern int bio_add_pc_page ( struct request_queue * , struct bio * , struct page * , unsigned int , unsigned int ) ;
extern int bio_get_nr_vecs ( struct block_device * ) ;
extern sector_t bio_sector_offset ( struct bio * , unsigned short , unsigned int ) ;
extern struct bio * bio_map_user ( struct request_queue * , struct block_device * , unsigned long , unsigned int , int , gfp_t ) ;
extern struct bio * bio_map_user_iov ( struct request_queue * , struct block_device * , struct sg_iovec * , int , int , gfp_t ) ;
extern void bio_unmap_user ( struct bio * ) ;
extern struct bio * bio_map_kern ( struct request_queue * , void * , unsigned int , gfp_t ) ;
extern struct bio * bio_copy_kern ( struct request_queue * , void * , unsigned int , gfp_t , int ) ;
extern void bio_set_pages_dirty ( struct bio * bio ) ;
extern void bio_check_pages_dirty ( struct bio * bio ) ;
extern struct bio * bio_copy_user ( struct request_queue * , struct rq_map_data * , unsigned long , unsigned int , int , gfp_t ) ;
extern struct bio * bio_copy_user_iov ( struct request_queue * , struct rq_map_data * , struct sg_iovec * , int , int , gfp_t ) ;
extern int bio_uncopy_user ( struct bio * ) ;
void zero_fill_bio ( struct bio * bio ) ;
extern struct bio_vec * bvec_alloc_bs ( gfp_t , int , unsigned long * , struct bio_set * ) ;
extern void bvec_free_bs ( struct bio_set * , struct bio_vec * , unsigned int ) ;
extern unsigned int bvec_nr_vecs ( unsigned short idx ) ;
int bio_associate_current ( struct bio * bio ) ;
void bio_disassociate_task ( struct bio * bio ) ;
extern struct bio_integrity_payload * bio_integrity_alloc ( struct bio * , gfp_t , unsigned int ) ;
extern void bio_integrity_free ( struct bio * ) ;
extern int bio_integrity_add_page ( struct bio * , struct page * , unsigned int , unsigned int ) ;
extern int bio_integrity_enabled ( struct bio * bio ) ;
extern int bio_integrity_set_tag ( struct bio * , void * , unsigned int ) ;
extern int bio_integrity_get_tag ( struct bio * , void * , unsigned int ) ;
extern int bio_integrity_prep ( struct bio * ) ;
extern void bio_integrity_endio ( struct bio * , int ) ;
extern void bio_integrity_advance ( struct bio * , unsigned int ) ;
extern void bio_integrity_trim ( struct bio * , unsigned int , unsigned int ) ;
extern void bio_integrity_split ( struct bio * , struct bio_pair * , int ) ;
extern int bio_integrity_clone ( struct bio * , struct bio * , gfp_t ) ;
extern int bioset_integrity_create ( struct bio_set * , int ) ;
extern void bioset_integrity_free ( struct bio_set * ) ;
extern void bio_integrity_init ( void ) ;
extern int bsg_register_queue ( struct request_queue * q , struct device * parent , const char * name , void ( * release ) ( struct device * ) ) ;
extern void bsg_unregister_queue ( struct request_queue * ) ;
extern void elv_dispatch_sort ( struct request_queue * , struct request * ) ;
extern void elv_dispatch_add_tail ( struct request_queue * , struct request * ) ;
extern void elv_add_request ( struct request_queue * , struct request * , int ) ;
extern void __elv_add_request ( struct request_queue * , struct request * , int ) ;
extern int elv_merge ( struct request_queue * , struct request * * , struct bio * ) ;
extern void elv_merge_requests ( struct request_queue * , struct request * , struct request * ) ;
extern void elv_merged_request ( struct request_queue * , struct request * , int ) ;
extern void elv_bio_merged ( struct request_queue * q , struct request * , struct bio * ) ;
extern void elv_requeue_request ( struct request_queue * , struct request * ) ;
extern struct request * elv_former_request ( struct request_queue * , struct request * ) ;
extern struct request * elv_latter_request ( struct request_queue * , struct request * ) ;
extern int elv_register_queue ( struct request_queue * q ) ;
extern void elv_unregister_queue ( struct request_queue * q ) ;
extern int elv_may_queue ( struct request_queue * , int ) ;
extern void elv_abort_queue ( struct request_queue * ) ;
extern void elv_completed_request ( struct request_queue * , struct request * ) ;
extern int elv_set_request ( struct request_queue * q , struct request * rq , struct bio * bio , gfp_t gfp_mask ) ;
extern void elv_put_request ( struct request_queue * , struct request * ) ;
extern void elv_drain_elevator ( struct request_queue * ) ;
extern int elv_register ( struct elevator_type * ) ;
extern void elv_unregister ( struct elevator_type * ) ;
extern ssize_t elv_iosched_show ( struct request_queue * , char * ) ;
extern ssize_t elv_iosched_store ( struct request_queue * , const char * , size_t ) ;
extern int elevator_init ( struct request_queue * , char * ) ;
extern void elevator_exit ( struct elevator_queue * ) ;
extern int elevator_change ( struct request_queue * , const char * ) ;
extern bool elv_rq_merge_ok ( struct request * , struct bio * ) ;
extern struct request * elv_rb_former_request ( struct request_queue * , struct request * ) ;
extern struct request * elv_rb_latter_request ( struct request_queue * , struct request * ) ;
extern void elv_rb_add ( struct rb_root * , struct request * ) ;
extern void elv_rb_del ( struct rb_root * , struct request * ) ;
extern struct request * elv_rb_find ( struct rb_root * , sector_t ) ;
extern int init_emergency_isa_pool ( void ) ;
extern void blk_queue_bounce ( struct request_queue * q , struct bio * * bio ) ;
extern int blk_register_queue ( struct gendisk * disk ) ;
extern void blk_unregister_queue ( struct gendisk * disk ) ;
extern void generic_make_request ( struct bio * bio ) ;
extern void blk_rq_init ( struct request_queue * q , struct request * rq ) ;
extern void blk_put_request ( struct request * ) ;
extern void __blk_put_request ( struct request_queue * , struct request * ) ;
extern struct request * blk_get_request ( struct request_queue * , int , gfp_t ) ;
extern struct request * blk_make_request ( struct request_queue * , struct bio * , gfp_t ) ;
extern void blk_requeue_request ( struct request_queue * , struct request * ) ;
extern void blk_add_request_payload ( struct request * rq , struct page * page , unsigned int len ) ;
extern int blk_rq_check_limits ( struct request_queue * q , struct request * rq ) ;
extern int blk_lld_busy ( struct request_queue * q ) ;
extern int blk_rq_prep_clone ( struct request * rq , struct request * rq_src , struct bio_set * bs , gfp_t gfp_mask , int ( * bio_ctr ) ( struct bio * , struct bio * , void * ) , void * data ) ;
extern void blk_rq_unprep_clone ( struct request * rq ) ;
extern int blk_insert_cloned_request ( struct request_queue * q , struct request * rq ) ;
extern void blk_delay_queue ( struct request_queue * , unsigned long ) ;
extern void blk_recount_segments ( struct request_queue * , struct bio * ) ;
extern int scsi_verify_blk_ioctl ( struct block_device * , unsigned int ) ;
extern int scsi_cmd_blk_ioctl ( struct block_device * , fmode_t , unsigned int , void * ) ;
extern int scsi_cmd_ioctl ( struct request_queue * , struct gendisk * , fmode_t , unsigned int , void * ) ;
extern int sg_scsi_ioctl ( struct request_queue * , struct gendisk * , fmode_t , struct scsi_ioctl_command * ) ;
extern void blk_queue_bio ( struct request_queue * q , struct bio * bio ) ;
extern void blk_start_queue ( struct request_queue * q ) ;
extern void blk_stop_queue ( struct request_queue * q ) ;
extern void blk_sync_queue ( struct request_queue * q ) ;
extern void __blk_stop_queue ( struct request_queue * q ) ;
extern void __blk_run_queue ( struct request_queue * q ) ;
extern void blk_run_queue ( struct request_queue * ) ;
extern void blk_run_queue_async ( struct request_queue * q ) ;
extern int blk_rq_map_user ( struct request_queue * , struct request * , struct rq_map_data * , void * , unsigned long , gfp_t ) ;
extern int blk_rq_unmap_user ( struct bio * ) ;
extern int blk_rq_map_kern ( struct request_queue * , struct request * , void * , unsigned int , gfp_t ) ;
extern int blk_rq_map_user_iov ( struct request_queue * , struct request * , struct rq_map_data * , struct sg_iovec * , int , unsigned int , gfp_t ) ;
extern int blk_execute_rq ( struct request_queue * , struct gendisk * , struct request * , int ) ;
extern void blk_execute_rq_nowait ( struct request_queue * , struct gendisk * , struct request * , int , rq_end_io_fn * ) ;
extern unsigned int blk_rq_err_bytes ( const struct request * rq ) ;
extern struct request * blk_peek_request ( struct request_queue * q ) ;
extern void blk_start_request ( struct request * rq ) ;
extern struct request * blk_fetch_request ( struct request_queue * q ) ;
extern bool blk_update_request ( struct request * rq , int error , unsigned int nr_bytes ) ;
extern bool blk_end_request ( struct request * rq , int error , unsigned int nr_bytes ) ;
extern void blk_end_request_all ( struct request * rq , int error ) ;
extern bool blk_end_request_cur ( struct request * rq , int error ) ;
extern bool blk_end_request_err ( struct request * rq , int error ) ;
extern bool __blk_end_request ( struct request * rq , int error , unsigned int nr_bytes ) ;
extern void __blk_end_request_all ( struct request * rq , int error ) ;
extern bool __blk_end_request_cur ( struct request * rq , int error ) ;
extern bool __blk_end_request_err ( struct request * rq , int error ) ;
extern void blk_complete_request ( struct request * ) ;
extern void __blk_complete_request ( struct request * ) ;
extern void blk_abort_request ( struct request * ) ;
extern void blk_unprep_request ( struct request * ) ;
extern struct request_queue * blk_init_queue_node ( request_fn_proc * rfn , spinlock_t * lock , int node_id ) ;
extern struct request_queue * blk_init_queue ( request_fn_proc * , spinlock_t * ) ;
extern struct request_queue * blk_init_allocated_queue ( struct request_queue * , request_fn_proc * , spinlock_t * ) ;
extern void blk_cleanup_queue ( struct request_queue * ) ;
extern void blk_queue_make_request ( struct request_queue * , make_request_fn * ) ;
extern void blk_queue_bounce_limit ( struct request_queue * , u64 ) ;
extern void blk_limits_max_hw_sectors ( struct queue_limits * , unsigned int ) ;
extern void blk_queue_max_hw_sectors ( struct request_queue * , unsigned int ) ;
extern void blk_queue_max_segments ( struct request_queue * , unsigned short ) ;
extern void blk_queue_max_segment_size ( struct request_queue * , unsigned int ) ;
extern void blk_queue_max_discard_sectors ( struct request_queue * q , unsigned int max_discard_sectors ) ;
extern void blk_queue_max_write_same_sectors ( struct request_queue * q , unsigned int max_write_same_sectors ) ;
extern void blk_queue_logical_block_size ( struct request_queue * , unsigned short ) ;
extern void blk_queue_physical_block_size ( struct request_queue * , unsigned int ) ;
extern void blk_queue_alignment_offset ( struct request_queue * q , unsigned int alignment ) ;
extern void blk_limits_io_min ( struct queue_limits * limits , unsigned int min ) ;
extern void blk_queue_io_min ( struct request_queue * q , unsigned int min ) ;
extern void blk_limits_io_opt ( struct queue_limits * limits , unsigned int opt ) ;
extern void blk_queue_io_opt ( struct request_queue * q , unsigned int opt ) ;
extern void blk_set_default_limits ( struct queue_limits * lim ) ;
extern void blk_set_stacking_limits ( struct queue_limits * lim ) ;
extern int blk_stack_limits ( struct queue_limits * t , struct queue_limits * b , sector_t offset ) ;
extern int bdev_stack_limits ( struct queue_limits * t , struct block_device * bdev , sector_t offset ) ;
extern void disk_stack_limits ( struct gendisk * disk , struct block_device * bdev , sector_t offset ) ;
extern void blk_queue_stack_limits ( struct request_queue * t , struct request_queue * b ) ;
extern void blk_queue_dma_pad ( struct request_queue * , unsigned int ) ;
extern void blk_queue_update_dma_pad ( struct request_queue * , unsigned int ) ;
extern int blk_queue_dma_drain ( struct request_queue * q , dma_drain_needed_fn * dma_drain_needed , void * buf , unsigned int size ) ;
extern void blk_queue_lld_busy ( struct request_queue * q , lld_busy_fn * fn ) ;
extern void blk_queue_segment_boundary ( struct request_queue * , unsigned long ) ;
extern void blk_queue_prep_rq ( struct request_queue * , prep_rq_fn * pfn ) ;
extern void blk_queue_unprep_rq ( struct request_queue * , unprep_rq_fn * ufn ) ;
extern void blk_queue_merge_bvec ( struct request_queue * , merge_bvec_fn * ) ;
extern void blk_queue_dma_alignment ( struct request_queue * , int ) ;
extern void blk_queue_update_dma_alignment ( struct request_queue * , int ) ;
extern void blk_queue_softirq_done ( struct request_queue * , softirq_done_fn * ) ;
extern void blk_queue_rq_timed_out ( struct request_queue * , rq_timed_out_fn * ) ;
extern void blk_queue_rq_timeout ( struct request_queue * , unsigned int ) ;
extern void blk_queue_flush ( struct request_queue * q , unsigned int flush ) ;
extern void blk_queue_flush_queueable ( struct request_queue * q , bool queueable ) ;
extern struct backing_dev_info * blk_get_backing_dev_info ( struct block_device * bdev ) ;
extern int blk_rq_map_sg ( struct request_queue * , struct request * , struct scatterlist * ) ;
extern int blk_bio_map_sg ( struct request_queue * q , struct bio * bio , struct scatterlist * sglist ) ;
extern void blk_dump_rq_flags ( struct request * , char * ) ;
extern long nr_blockdev_pages ( void ) ;
bool blk_get_queue ( struct request_queue * ) ;
struct request_queue * blk_alloc_queue ( gfp_t ) ;
struct request_queue * blk_alloc_queue_node ( gfp_t , int ) ;
extern void blk_put_queue ( struct request_queue * ) ;
extern struct blk_plug_cb * blk_check_plugged ( blk_plug_cb_fn unplug , void * data , int size ) ;
extern void blk_start_plug ( struct blk_plug * ) ;
extern void blk_finish_plug ( struct blk_plug * ) ;
extern void blk_flush_plug_list ( struct blk_plug * , bool ) ;
extern int blk_queue_start_tag ( struct request_queue * , struct request * ) ;
extern struct request * blk_queue_find_tag ( struct request_queue * , int ) ;
extern void blk_queue_end_tag ( struct request_queue * , struct request * ) ;
extern int blk_queue_init_tags ( struct request_queue * , int , struct blk_queue_tag * ) ;
extern void blk_queue_free_tags ( struct request_queue * ) ;
extern int blk_queue_resize_tags ( struct request_queue * , int ) ;
extern void blk_queue_invalidate_tags ( struct request_queue * ) ;
extern struct blk_queue_tag * blk_init_tags ( int ) ;
extern void blk_free_tags ( struct blk_queue_tag * ) ;
extern int blkdev_issue_flush ( struct block_device * , gfp_t , sector_t * ) ;
extern int blkdev_issue_discard ( struct block_device * bdev , sector_t sector , sector_t nr_sects , gfp_t gfp_mask , unsigned long flags ) ;
extern int blkdev_issue_write_same ( struct block_device * bdev , sector_t sector , sector_t nr_sects , gfp_t gfp_mask , struct page * page ) ;
extern int blkdev_issue_zeroout ( struct block_device * bdev , sector_t sector , sector_t nr_sects , gfp_t gfp_mask ) ;
extern int blk_verify_command ( unsigned char * cmd , fmode_t has_write_perm ) ;
unsigned char * read_dev_sector ( struct block_device * , sector_t , Sector * ) ;
int kblockd_schedule_work ( struct request_queue * q , struct work_struct * work ) ;
extern bool blk_integrity_is_initialized ( struct gendisk * ) ;
extern int blk_integrity_register ( struct gendisk * , struct blk_integrity * ) ;
extern void blk_integrity_unregister ( struct gendisk * ) ;
extern int blk_integrity_compare ( struct gendisk * , struct gendisk * ) ;
extern int blk_rq_map_integrity_sg ( struct request_queue * , struct bio * , struct scatterlist * ) ;
extern int blk_rq_count_integrity_sg ( struct request_queue * , struct bio * ) ;
extern int blk_integrity_merge_rq ( struct request_queue * , struct request * , struct request * ) ;
extern int blk_integrity_merge_bio ( struct request_queue * , struct request * , struct bio * ) ;
extern int __blkdev_driver_ioctl ( struct block_device * , fmode_t , unsigned int , unsigned long ) ;
void mark_buffer_dirty ( struct buffer_head * bh ) ;
void init_buffer ( struct buffer_head * , bh_end_io_t * , void * ) ;
void set_bh_page ( struct buffer_head * bh , struct page * page , unsigned long offset ) ;
int try_to_free_buffers ( struct page * ) ;
struct buffer_head * alloc_page_buffers ( struct page * page , unsigned long size , int retry ) ;
void create_empty_buffers ( struct page * , unsigned long , unsigned long b_state ) ;
void end_buffer_read_sync ( struct buffer_head * bh , int uptodate ) ;
void end_buffer_write_sync ( struct buffer_head * bh , int uptodate ) ;
void end_buffer_async_write ( struct buffer_head * bh , int uptodate ) ;
void mark_buffer_dirty_inode ( struct buffer_head * bh , struct inode * inode ) ;
int inode_has_buffers ( struct inode * ) ;
void invalidate_inode_buffers ( struct inode * ) ;
int remove_inode_buffers ( struct inode * inode ) ;
int sync_mapping_buffers ( struct address_space * mapping ) ;
void unmap_underlying_metadata ( struct block_device * bdev , sector_t block ) ;
void mark_buffer_async_write ( struct buffer_head * bh ) ;
void __wait_on_buffer ( struct buffer_head * ) ;
wait_queue_head_t * bh_waitq_head ( struct buffer_head * bh ) ;
struct buffer_head * __find_get_block ( struct block_device * bdev , sector_t block , unsigned size ) ;
struct buffer_head * __getblk ( struct block_device * bdev , sector_t block , unsigned size ) ;
void __brelse ( struct buffer_head * ) ;
void __bforget ( struct buffer_head * ) ;
void __breadahead ( struct block_device * , sector_t block , unsigned int size ) ;
struct buffer_head * __bread ( struct block_device * , sector_t block , unsigned size ) ;
void invalidate_bh_lrus ( void ) ;
struct buffer_head * alloc_buffer_head ( gfp_t gfp_flags ) ;
void free_buffer_head ( struct buffer_head * bh ) ;
void unlock_buffer ( struct buffer_head * bh ) ;
void __lock_buffer ( struct buffer_head * bh ) ;
void ll_rw_block ( int , int , struct buffer_head * bh [ ] ) ;
int sync_dirty_buffer ( struct buffer_head * bh ) ;
int __sync_dirty_buffer ( struct buffer_head * bh , int rw ) ;
void write_dirty_buffer ( struct buffer_head * bh , int rw ) ;
int submit_bh ( int , struct buffer_head * ) ;
void write_boundary_block ( struct block_device * bdev , sector_t bblock , unsigned blocksize ) ;
int bh_uptodate_or_lock ( struct buffer_head * bh ) ;
int bh_submit_read ( struct buffer_head * bh ) ;
void block_invalidatepage ( struct page * page , unsigned long offset ) ;
int block_write_full_page ( struct page * page , get_block_t * get_block , struct writeback_control * wbc ) ;
int block_write_full_page_endio ( struct page * page , get_block_t * get_block , struct writeback_control * wbc , bh_end_io_t * handler ) ;
int block_read_full_page ( struct page * , get_block_t * ) ;
int block_is_partially_uptodate ( struct page * page , read_descriptor_t * desc , unsigned long from ) ;
int block_write_begin ( struct address_space * mapping , loff_t pos , unsigned len , unsigned flags , struct page * * pagep , get_block_t * get_block ) ;
int __block_write_begin ( struct page * page , loff_t pos , unsigned len , get_block_t * get_block ) ;
int block_write_end ( struct file * , struct address_space * , loff_t , unsigned , unsigned , struct page * , void * ) ;
int generic_write_end ( struct file * , struct address_space * , loff_t , unsigned , unsigned , struct page * , void * ) ;
void page_zero_new_buffers ( struct page * page , unsigned from , unsigned to ) ;
int cont_write_begin ( struct file * , struct address_space * , loff_t , unsigned , unsigned , struct page * * , void * * , get_block_t * , loff_t * ) ;
int generic_cont_expand_simple ( struct inode * inode , loff_t size ) ;
int block_commit_write ( struct page * page , unsigned from , unsigned to ) ;
int __block_page_mkwrite ( struct vm_area_struct * vma , struct vm_fault * vmf , get_block_t get_block ) ;
int block_page_mkwrite ( struct vm_area_struct * vma , struct vm_fault * vmf , get_block_t get_block ) ;
sector_t generic_block_bmap ( struct address_space * , sector_t , get_block_t * ) ;
int block_truncate_page ( struct address_space * , loff_t , get_block_t * ) ;
int nobh_write_begin ( struct address_space * , loff_t , unsigned , unsigned , struct page * * , void * * , get_block_t * ) ;
int nobh_write_end ( struct file * , struct address_space * , loff_t , unsigned , unsigned , struct page * , void * ) ;
int nobh_truncate_page ( struct address_space * , loff_t , get_block_t * ) ;
int nobh_writepage ( struct page * page , get_block_t * get_block , struct writeback_control * wbc ) ;
void buffer_init ( void ) ;
extern int __set_page_dirty_buffers ( struct page * page ) ;
int crypto_register_alg ( struct crypto_alg * alg ) ;
int crypto_unregister_alg ( struct crypto_alg * alg ) ;
int crypto_register_algs ( struct crypto_alg * algs , int count ) ;
int crypto_unregister_algs ( struct crypto_alg * algs , int count ) ;
int crypto_has_alg ( const char * name , u32 type , u32 mask ) ;
struct crypto_tfm * crypto_alloc_base ( const char * alg_name , u32 type , u32 mask ) ;
void crypto_destroy_tfm ( void * mem , struct crypto_tfm * tfm ) ;
int alg_test ( const char * driver , const char * alg , u32 type , u32 mask ) ;
struct crypto_ablkcipher * crypto_alloc_ablkcipher ( const char * alg_name , u32 type , u32 mask ) ;
struct crypto_aead * crypto_alloc_aead ( const char * alg_name , u32 type , u32 mask ) ;
int crypto_aead_setauthsize ( struct crypto_aead * tfm , unsigned int authsize ) ;
struct crypto_ahash * crypto_alloc_ahash ( const char * alg_name , u32 type , u32 mask ) ;
int crypto_ahash_setkey ( struct crypto_ahash * tfm , const u8 * key , unsigned int keylen ) ;
int crypto_ahash_finup ( struct ahash_request * req ) ;
int crypto_ahash_final ( struct ahash_request * req ) ;
int crypto_ahash_digest ( struct ahash_request * req ) ;
struct crypto_shash * crypto_alloc_shash ( const char * alg_name , u32 type , u32 mask ) ;
int crypto_shash_setkey ( struct crypto_shash * tfm , const u8 * key , unsigned int keylen ) ;
int crypto_shash_digest ( struct shash_desc * desc , const u8 * data , unsigned int len , u8 * out ) ;
int crypto_shash_update ( struct shash_desc * desc , const u8 * data , unsigned int len ) ;
int crypto_shash_final ( struct shash_desc * desc , u8 * out ) ;
int crypto_shash_finup ( struct shash_desc * desc , const u8 * data , unsigned int len , u8 * out ) ;
extern void * jbd2_alloc ( size_t size , gfp_t flags ) ;
extern void jbd2_free ( void * ptr , size_t size ) ;
extern void jbd2_journal_unfile_buffer ( journal_t * , struct journal_head * ) ;
extern void __jbd2_journal_refile_buffer ( struct journal_head * ) ;
extern void jbd2_journal_refile_buffer ( journal_t * , struct journal_head * ) ;
extern void __jbd2_journal_file_buffer ( struct journal_head * , transaction_t * , int ) ;
extern void __journal_free_buffer ( struct journal_head * bh ) ;
extern void jbd2_journal_file_buffer ( struct journal_head * , transaction_t * , int ) ;
extern void __journal_clean_data_list ( transaction_t * transaction ) ;
extern struct journal_head * jbd2_journal_get_descriptor_buffer ( journal_t * ) ;
int jbd2_journal_next_log_block ( journal_t * , unsigned long long * ) ;
int jbd2_journal_get_log_tail ( journal_t * journal , tid_t * tid , unsigned long * block ) ;
void __jbd2_update_log_tail ( journal_t * journal , tid_t tid , unsigned long block ) ;
void jbd2_update_log_tail ( journal_t * journal , tid_t tid , unsigned long block ) ;
extern void jbd2_journal_commit_transaction ( journal_t * ) ;
int __jbd2_journal_clean_checkpoint_list ( journal_t * journal ) ;
int __jbd2_journal_remove_checkpoint ( struct journal_head * ) ;
void __jbd2_journal_insert_checkpoint ( struct journal_head * , transaction_t * ) ;
extern void jbd2_buffer_frozen_trigger ( struct journal_head * jh , void * mapped_data , struct jbd2_buffer_trigger_type * triggers ) ;
extern void jbd2_buffer_abort_trigger ( struct journal_head * jh , struct jbd2_buffer_trigger_type * triggers ) ;
extern int jbd2_journal_write_metadata_buffer ( transaction_t * transaction , struct journal_head * jh_in , struct journal_head * * jh_out , unsigned long long blocknr ) ;
extern void __wait_on_journal ( journal_t * ) ;
extern void jbd2_journal_destroy_transaction_cache ( void ) ;
extern int jbd2_journal_init_transaction_cache ( void ) ;
extern void jbd2_journal_free_transaction ( transaction_t * ) ;
extern handle_t * jbd2_journal_start ( journal_t * , int nblocks ) ;
extern handle_t * jbd2__journal_start ( journal_t * , int nblocks , gfp_t gfp_mask ) ;
extern int jbd2_journal_restart ( handle_t * , int nblocks ) ;
extern int jbd2__journal_restart ( handle_t * , int nblocks , gfp_t gfp_mask ) ;
extern int jbd2_journal_extend ( handle_t * , int nblocks ) ;
extern int jbd2_journal_get_write_access ( handle_t * , struct buffer_head * ) ;
extern int jbd2_journal_get_create_access ( handle_t * , struct buffer_head * ) ;
extern int jbd2_journal_get_undo_access ( handle_t * , struct buffer_head * ) ;
void jbd2_journal_set_triggers ( struct buffer_head * , struct jbd2_buffer_trigger_type * type ) ;
extern int jbd2_journal_dirty_metadata ( handle_t * , struct buffer_head * ) ;
extern int jbd2_journal_forget ( handle_t * , struct buffer_head * ) ;
extern void journal_sync_buffer ( struct buffer_head * ) ;
extern int jbd2_journal_invalidatepage ( journal_t * , struct page * , unsigned long ) ;
extern int jbd2_journal_try_to_free_buffers ( journal_t * , struct page * , gfp_t ) ;
extern int jbd2_journal_stop ( handle_t * ) ;
extern int jbd2_journal_flush ( journal_t * ) ;
extern void jbd2_journal_lock_updates ( journal_t * ) ;
extern void jbd2_journal_unlock_updates ( journal_t * ) ;
extern journal_t * jbd2_journal_init_dev ( struct block_device * bdev , struct block_device * fs_dev , unsigned long long start , int len , int bsize ) ;
extern journal_t * jbd2_journal_init_inode ( struct inode * ) ;
extern int jbd2_journal_update_format ( journal_t * ) ;
extern int jbd2_journal_check_used_features ( journal_t * , unsigned long , unsigned long , unsigned long ) ;
extern int jbd2_journal_check_available_features ( journal_t * , unsigned long , unsigned long , unsigned long ) ;
extern int jbd2_journal_set_features ( journal_t * , unsigned long , unsigned long , unsigned long ) ;
extern void jbd2_journal_clear_features ( journal_t * , unsigned long , unsigned long , unsigned long ) ;
extern int jbd2_journal_load ( journal_t * journal ) ;
extern int jbd2_journal_destroy ( journal_t * ) ;
extern int jbd2_journal_recover ( journal_t * journal ) ;
extern int jbd2_journal_wipe ( journal_t * , int ) ;
extern int jbd2_journal_skip_recovery ( journal_t * ) ;
extern void jbd2_journal_update_sb_errno ( journal_t * ) ;
extern void jbd2_journal_update_sb_log_tail ( journal_t * , tid_t , unsigned long , int ) ;
extern void __jbd2_journal_abort_hard ( journal_t * ) ;
extern void jbd2_journal_abort ( journal_t * , int ) ;
extern int jbd2_journal_errno ( journal_t * ) ;
extern void jbd2_journal_ack_err ( journal_t * ) ;
extern int jbd2_journal_clear_err ( journal_t * ) ;
extern int jbd2_journal_bmap ( journal_t * , unsigned long , unsigned long long * ) ;
extern int jbd2_journal_force_commit ( journal_t * ) ;
extern int jbd2_journal_file_inode ( handle_t * handle , struct jbd2_inode * inode ) ;
extern int jbd2_journal_begin_ordered_truncate ( journal_t * journal , struct jbd2_inode * inode , loff_t new_size ) ;
extern void jbd2_journal_init_jbd_inode ( struct jbd2_inode * jinode , struct inode * inode ) ;
extern void jbd2_journal_release_jbd_inode ( journal_t * journal , struct jbd2_inode * jinode ) ;
struct journal_head * jbd2_journal_add_journal_head ( struct buffer_head * bh ) ;
struct journal_head * jbd2_journal_grab_journal_head ( struct buffer_head * bh ) ;
void jbd2_journal_put_journal_head ( struct journal_head * jh ) ;
extern int jbd2_journal_init_revoke ( journal_t * , int ) ;
extern void jbd2_journal_destroy_revoke_caches ( void ) ;
extern int jbd2_journal_init_revoke_caches ( void ) ;
extern void jbd2_journal_destroy_revoke ( journal_t * ) ;
extern int jbd2_journal_revoke ( handle_t * , unsigned long long , struct buffer_head * ) ;
extern int jbd2_journal_cancel_revoke ( handle_t * , struct journal_head * ) ;
extern void jbd2_journal_write_revoke_records ( journal_t * , transaction_t * , int ) ;
extern int jbd2_journal_set_revoke ( journal_t * , unsigned long long , tid_t ) ;
extern int jbd2_journal_test_revoke ( journal_t * , unsigned long long , tid_t ) ;
extern void jbd2_journal_clear_revoke ( journal_t * ) ;
extern void jbd2_journal_switch_revoke_table ( journal_t * journal ) ;
extern void jbd2_clear_buffer_revoked_flags ( journal_t * journal ) ;
int __jbd2_log_space_left ( journal_t * ) ;
int jbd2_log_start_commit ( journal_t * journal , tid_t tid ) ;
int __jbd2_log_start_commit ( journal_t * journal , tid_t tid ) ;
int jbd2_journal_start_commit ( journal_t * journal , tid_t * tid ) ;
int jbd2_journal_force_commit_nested ( journal_t * journal ) ;
int jbd2_log_wait_commit ( journal_t * journal , tid_t tid ) ;
int jbd2_log_do_checkpoint ( journal_t * journal ) ;
int jbd2_trans_will_send_data_barrier ( journal_t * journal , tid_t tid ) ;
void __jbd2_log_wait_for_space ( journal_t * journal ) ;
extern void __jbd2_journal_drop_transaction ( journal_t * , transaction_t * ) ;
extern int jbd2_cleanup_journal_tail ( journal_t * ) ;
extern int jbd2_journal_blocks_per_page ( struct inode * inode ) ;
extern size_t journal_tag_bytes ( journal_t * journal ) ;
extern int jbd_blocks_per_page ( struct inode * inode ) ;
extern int mnt_want_write ( struct vfsmount * mnt ) ;
extern int mnt_want_write_file ( struct file * file ) ;
extern int mnt_clone_write ( struct vfsmount * mnt ) ;
extern void mnt_drop_write ( struct vfsmount * mnt ) ;
extern void mnt_drop_write_file ( struct file * file ) ;
extern void mntput ( struct vfsmount * mnt ) ;
extern struct vfsmount * mntget ( struct vfsmount * mnt ) ;
extern void mnt_pin ( struct vfsmount * mnt ) ;
extern void mnt_unpin ( struct vfsmount * mnt ) ;
extern int __mnt_is_readonly ( struct vfsmount * mnt ) ;
extern struct vfsmount * vfs_kern_mount ( struct file_system_type * type , int flags , const char * name , void * data ) ;
extern void mnt_set_expiry ( struct vfsmount * mnt , struct list_head * expiry_list ) ;
extern void mark_mounts_for_expiry ( struct list_head * mounts ) ;
extern dev_t name_to_dev_t ( char * name ) ;
int mpage_readpages ( struct address_space * mapping , struct list_head * pages , unsigned nr_pages , get_block_t get_block ) ;
int mpage_readpage ( struct page * page , get_block_t get_block ) ;
int mpage_writepages ( struct address_space * mapping , struct writeback_control * wbc , get_block_t get_block ) ;
int mpage_writepage ( struct page * page , get_block_t * get_block , struct writeback_control * wbc ) ;
extern void unregister_node ( struct node * node ) ;
extern int register_one_node ( int nid ) ;
extern void unregister_one_node ( int nid ) ;
extern int register_cpu_under_node ( unsigned int cpu , unsigned int nid ) ;
extern int unregister_cpu_under_node ( unsigned int cpu , unsigned int nid ) ;
extern int register_mem_sect_under_node ( struct memory_block * mem_blk , int nid ) ;
extern int unregister_mem_sect_under_nodes ( struct memory_block * mem_blk , unsigned long phys_index ) ;
extern void register_hugetlbfs_with_node ( node_registration_func_t doregister , node_registration_func_t unregister ) ;
extern unsigned int nr_free_buffer_pages ( void ) ;
extern unsigned int nr_free_pagecache_pages ( void ) ;
extern void __lru_cache_add ( struct page * , enum lru_list lru ) ;
extern void lru_cache_add_lru ( struct page * , enum lru_list lru ) ;
extern void lru_add_page_tail ( struct page * page , struct page * page_tail , struct lruvec * lruvec ) ;
extern void activate_page ( struct page * ) ;
extern void mark_page_accessed ( struct page * ) ;
extern void lru_add_drain ( void ) ;
extern void lru_add_drain_cpu ( int cpu ) ;
extern int lru_add_drain_all ( void ) ;
extern void rotate_reclaimable_page ( struct page * page ) ;
extern void deactivate_page ( struct page * page ) ;
extern void swap_setup ( void ) ;
extern void add_page_to_unevictable_list ( struct page * page ) ;
extern unsigned long try_to_free_pages ( struct zonelist * zonelist , int order , gfp_t gfp_mask , nodemask_t * mask ) ;
extern int __isolate_lru_page ( struct page * page , isolate_mode_t mode ) ;
extern unsigned long try_to_free_mem_cgroup_pages ( struct mem_cgroup * mem , gfp_t gfp_mask , bool noswap ) ;
extern unsigned long mem_cgroup_shrink_node_zone ( struct mem_cgroup * mem , gfp_t gfp_mask , bool noswap , struct zone * zone , unsigned long * nr_scanned ) ;
extern unsigned long shrink_all_memory ( unsigned long nr_pages ) ;
extern int remove_mapping ( struct address_space * mapping , struct page * page ) ;
extern int zone_reclaim ( struct zone * , gfp_t , unsigned int ) ;
extern int page_evictable ( struct page * page ) ;
extern void check_move_unevictable_pages ( struct page * * , int nr_pages ) ;
extern int scan_unevictable_handler ( struct ctl_table * , int , void * , size_t * , loff_t * ) ;
extern int scan_unevictable_register_node ( struct node * node ) ;
extern void scan_unevictable_unregister_node ( struct node * node ) ;
extern int kswapd_run ( int nid ) ;
extern void kswapd_stop ( int nid ) ;
extern int swap_readpage ( struct page * ) ;
extern int swap_writepage ( struct page * page , struct writeback_control * wbc ) ;
extern int swap_set_page_dirty ( struct page * page ) ;
extern void end_swap_bio_read ( struct bio * bio , int err ) ;
int add_swap_extent ( struct swap_info_struct * sis , unsigned long start_page , unsigned long nr_pages , sector_t start_block ) ;
int generic_swapfile_activate ( struct swap_info_struct * , struct file * , sector_t * ) ;
extern void show_swap_cache_info ( void ) ;
extern int add_to_swap ( struct page * ) ;
extern int add_to_swap_cache ( struct page * , swp_entry_t , gfp_t ) ;
extern void __delete_from_swap_cache ( struct page * ) ;
extern void delete_from_swap_cache ( struct page * ) ;
extern void free_page_and_swap_cache ( struct page * ) ;
extern void free_pages_and_swap_cache ( struct page * * , int ) ;
extern struct page * lookup_swap_cache ( swp_entry_t ) ;
extern struct page * read_swap_cache_async ( swp_entry_t , gfp_t , struct vm_area_struct * vma , unsigned long addr ) ;
extern struct page * swapin_readahead ( swp_entry_t , gfp_t , struct vm_area_struct * vma , unsigned long addr ) ;
extern void si_swapinfo ( struct sysinfo * ) ;
extern swp_entry_t get_swap_page ( void ) ;
extern swp_entry_t get_swap_page_of_type ( int ) ;
extern int add_swap_count_continuation ( swp_entry_t , gfp_t ) ;
extern void swap_shmem_alloc ( swp_entry_t ) ;
extern int swap_duplicate ( swp_entry_t ) ;
extern int swapcache_prepare ( swp_entry_t ) ;
extern void swap_free ( swp_entry_t ) ;
extern void swapcache_free ( swp_entry_t , struct page * page ) ;
extern int free_swap_and_cache ( swp_entry_t ) ;
extern int swap_type_of ( dev_t , sector_t , struct block_device * * ) ;
extern unsigned int count_swap_pages ( int , int ) ;
extern sector_t map_swap_page ( struct page * , struct block_device * * ) ;
extern sector_t swapdev_block ( int , unsigned long ) ;
extern int page_swapcount ( struct page * ) ;
extern struct swap_info_struct * page_swap_info ( struct page * ) ;
extern int reuse_swap_page ( struct page * ) ;
extern int try_to_free_swap ( struct page * ) ;
int match_token ( char * , const match_table_t table , substring_t args [ ] ) ;
int match_int ( substring_t * , int * result ) ;
int match_octal ( substring_t * , int * result ) ;
int match_hex ( substring_t * , int * result ) ;
size_t match_strlcpy ( char * , const substring_t * , size_t ) ;
char * match_strdup ( const substring_t * ) ;
extern int user_path_at ( int , const char * , unsigned , struct path * ) ;
extern int user_path_at_empty ( int , const char * , unsigned , struct path * , int * empty ) ;
extern int kern_path ( const char * , unsigned , struct path * ) ;
extern struct dentry * kern_path_create ( int , const char * , struct path * , unsigned int ) ;
extern struct dentry * user_path_create ( int , const char * , struct path * , unsigned int ) ;
extern void done_path_create ( struct path * , struct dentry * ) ;
extern struct dentry * kern_path_locked ( const char * , struct path * ) ;
extern int vfs_path_lookup ( struct dentry * , struct vfsmount * , const char * , unsigned int , struct path * ) ;
extern struct dentry * lookup_one_len ( const char * , struct dentry * , int ) ;
extern int follow_down_one ( struct path * ) ;
extern int follow_down ( struct path * ) ;
extern int follow_up ( struct path * ) ;
extern struct dentry * lock_rename ( struct dentry * , struct dentry * ) ;
extern void unlock_rename ( struct dentry * , struct dentry * ) ;
extern void nd_jump_link ( struct nameidata * nd , struct path * path ) ;
extern int exportfs_encode_inode_fh ( struct inode * inode , struct fid * fid , int * max_len , struct inode * parent ) ;
extern int exportfs_encode_fh ( struct dentry * dentry , struct fid * fid , int * max_len , int connectable ) ;
extern struct dentry * exportfs_decode_fh ( struct vfsmount * mnt , struct fid * fid , int fh_len , int fileid_type , int ( * acceptable ) ( void * , struct dentry * ) , void * context ) ;
extern struct dentry * generic_fh_to_dentry ( struct super_block * sb , struct fid * fid , int fh_len , int fh_type , struct inode * ( * get_inode ) ( struct super_block * sb , u64 ino , u32 gen ) ) ;
extern struct dentry * generic_fh_to_parent ( struct super_block * sb , struct fid * fid , int fh_len , int fh_type , struct inode * ( * get_inode ) ( struct super_block * sb , u64 ino , u32 gen ) ) ;
extern struct cleancache_ops cleancache_register_ops ( struct cleancache_ops * ops ) ;
extern void __cleancache_init_fs ( struct super_block * ) ;
extern void __cleancache_init_shared_fs ( char * , struct super_block * ) ;
extern int __cleancache_get_page ( struct page * ) ;
extern void __cleancache_put_page ( struct page * ) ;
extern void __cleancache_invalidate_page ( struct address_space * , struct page * ) ;
extern void __cleancache_invalidate_inode ( struct address_space * ) ;
extern void __cleancache_invalidate_fs ( struct super_block * ) ;
struct inode * ramfs_get_inode ( struct super_block * sb , const struct inode * dir , umode_t mode , dev_t dev ) ;
extern struct dentry * ramfs_mount ( struct file_system_type * fs_type , int flags , const char * dev_name , void * data ) ;
extern int __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) init_rootfs ( void ) ;
int ramfs_fill_super ( struct super_block * sb , void * data , int silent ) ;
int match_token ( char * , const match_table_t table , substring_t args [ ] ) ;
int match_int ( substring_t * , int * result ) ;
int match_octal ( substring_t * , int * result ) ;
int match_hex ( substring_t * , int * result ) ;
size_t match_strlcpy ( char * , const substring_t * , size_t ) ;
char * match_strdup ( const substring_t * ) ;
__attribute__ ( ( format ( printf , 4 , 5 ) ) ) struct task_struct * kthread_create_on_node ( int ( * threadfn ) ( void * data ) , void * data , int node , const char namefmt [ ] , ... ) ;
struct task_struct * kthread_create_on_cpu ( int ( * threadfn ) ( void * data ) , void * data , unsigned int cpu , const char * namefmt ) ;
void kthread_bind ( struct task_struct * k , unsigned int cpu ) ;
int kthread_stop ( struct task_struct * k ) ;
bool kthread_should_stop ( void ) ;
bool kthread_should_park ( void ) ;
bool kthread_freezable_should_stop ( bool * was_frozen ) ;
void * kthread_data ( struct task_struct * k ) ;
int kthread_park ( struct task_struct * k ) ;
void kthread_unpark ( struct task_struct * k ) ;
void kthread_parkme ( void ) ;
int kthreadd ( void * unused ) ;
extern int tsk_fork_get_node ( struct task_struct * tsk ) ;
extern void __init_kthread_worker ( struct kthread_worker * worker , const char * name , struct lock_class_key * key ) ;
int kthread_worker_fn ( void * worker_ptr ) ;
bool queue_kthread_work ( struct kthread_worker * worker , struct kthread_work * work ) ;
void flush_kthread_work ( struct kthread_work * work ) ;
void flush_kthread_worker ( struct kthread_worker * worker ) ;
extern int scsi_register_acpi_bus_type ( struct acpi_bus_type * bus ) ;
extern void scsi_unregister_acpi_bus_type ( struct acpi_bus_type * bus ) ;
extern const char * scsi_device_type ( unsigned type ) ;
int scsi_is_host_device ( const struct device * ) ;
extern int scsi_queue_work ( struct Scsi_Host * , struct work_struct * ) ;
extern void scsi_flush_work ( struct Scsi_Host * ) ;
extern struct Scsi_Host * scsi_host_alloc ( struct scsi_host_template * , int ) ;
extern int scsi_add_host_with_dma ( struct Scsi_Host * , struct device * , struct device * ) ;
extern void scsi_scan_host ( struct Scsi_Host * ) ;
extern void scsi_rescan_device ( struct device * ) ;
extern void scsi_remove_host ( struct Scsi_Host * ) ;
extern struct Scsi_Host * scsi_host_get ( struct Scsi_Host * ) ;
extern void scsi_host_put ( struct Scsi_Host * t ) ;
extern struct Scsi_Host * scsi_host_lookup ( unsigned short ) ;
extern const char * scsi_host_state_name ( enum scsi_host_state ) ;
extern void scsi_cmd_get_serial ( struct Scsi_Host * , struct scsi_cmnd * ) ;
extern u64 scsi_calculate_bounce_limit ( struct Scsi_Host * ) ;
extern void scsi_unblock_requests ( struct Scsi_Host * ) ;
extern void scsi_block_requests ( struct Scsi_Host * ) ;
extern struct request_queue * __scsi_alloc_queue ( struct Scsi_Host * shost , void ( * ) ( struct request_queue * ) ) ;
extern void scsi_free_host_dev ( struct scsi_device * ) ;
extern struct scsi_device * scsi_get_host_dev ( struct Scsi_Host * ) ;
extern struct Scsi_Host * scsi_register ( struct scsi_host_template * , int ) ;
extern void scsi_unregister ( struct Scsi_Host * ) ;
extern int scsi_host_set_state ( struct Scsi_Host * , enum scsi_host_state ) ;
acpi_status __attribute__ ( ( __section__ ( ".init.data" ) ) ) acpi_os_initialize ( void ) ;
acpi_status acpi_os_terminate ( void ) ;
acpi_physical_address acpi_os_get_root_pointer ( void ) ;
acpi_status acpi_os_predefined_override ( const struct acpi_predefined_names * init_val , acpi_string * new_val ) ;
acpi_status acpi_os_table_override ( struct acpi_table_header * existing_table , struct acpi_table_header * * new_table ) ;
acpi_status acpi_os_physical_table_override ( struct acpi_table_header * existing_table , acpi_physical_address * new_address , u32 * new_table_length ) ;
void acpi_os_delete_lock ( spinlock_t * handle ) ;
unsigned long acpi_os_acquire_lock ( spinlock_t * handle ) ;
void acpi_os_release_lock ( spinlock_t * handle , unsigned long flags ) ;
acpi_status acpi_os_create_semaphore ( u32 max_units , u32 initial_units , void * * out_handle ) ;
acpi_status acpi_os_delete_semaphore ( void * handle ) ;
acpi_status acpi_os_wait_semaphore ( void * handle , u32 units , u16 timeout ) ;
acpi_status acpi_os_signal_semaphore ( void * handle , u32 units ) ;
void * acpi_os_allocate ( acpi_size size ) ;
void * acpi_os_map_memory ( acpi_physical_address where , acpi_size length ) ;
void acpi_os_unmap_memory ( void * logical_address , acpi_size size ) ;
void early_acpi_os_unmap_memory ( void * virt , acpi_size size ) ;
acpi_status acpi_os_create_cache ( char * cache_name , u16 object_size , u16 max_depth , struct kmem_cache * * return_cache ) ;
acpi_status acpi_os_delete_cache ( struct kmem_cache * cache ) ;
acpi_status acpi_os_purge_cache ( struct kmem_cache * cache ) ;
void * acpi_os_acquire_object ( struct kmem_cache * cache ) ;
acpi_status acpi_os_release_object ( struct kmem_cache * cache , void * object ) ;
acpi_status acpi_os_install_interrupt_handler ( u32 gsi , acpi_osd_handler service_routine , void * context ) ;
acpi_status acpi_os_remove_interrupt_handler ( u32 gsi , acpi_osd_handler service_routine ) ;
void acpi_os_gpe_count ( u32 gpe_number ) ;
void acpi_os_fixed_event_count ( u32 fixed_event_number ) ;
u64 acpi_os_get_thread_id ( void ) ;
acpi_status acpi_os_execute ( acpi_execute_type type , acpi_osd_exec_callback function , void * context ) ;
acpi_status acpi_os_hotplug_execute ( acpi_osd_exec_callback function , void * context ) ;
void acpi_os_wait_events_complete ( void ) ;
void acpi_os_sleep ( u64 milliseconds ) ;
void acpi_os_stall ( u32 microseconds ) ;
acpi_status acpi_os_read_port ( acpi_io_address address , u32 * value , u32 width ) ;
acpi_status acpi_os_write_port ( acpi_io_address address , u32 value , u32 width ) ;
acpi_status acpi_os_read_memory ( acpi_physical_address address , u64 * value , u32 width ) ;
acpi_status acpi_os_write_memory ( acpi_physical_address address , u64 value , u32 width ) ;
acpi_status acpi_os_read_pci_configuration ( struct acpi_pci_id * pci_id , u32 reg , u64 * value , u32 width ) ;
acpi_status acpi_os_write_pci_configuration ( struct acpi_pci_id * pci_id , u32 reg , u64 value , u32 width ) ;
u64 acpi_os_get_timer ( void ) ;
acpi_status acpi_os_signal ( u32 function , void * info ) ;
void acpi_os_printf ( const char * format , ... ) ;
void acpi_os_vprintf ( const char * format , va_list args ) ;
void acpi_os_redirect_output ( void * destination ) ;
void * acpi_os_open_directory ( char * pathname , char * wildcard_spec , char requested_file_type ) ;
char * acpi_os_get_next_filename ( void * dir_handle ) ;
void acpi_os_close_directory ( void * dir_handle ) ;
acpi_status acpi_initialize_tables ( struct acpi_table_desc * initial_storage , u32 initial_table_count , u8 allow_resize ) ;
acpi_status __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) acpi_initialize_subsystem ( void ) ;
acpi_status acpi_enable_subsystem ( u32 flags ) ;
acpi_status acpi_initialize_objects ( u32 flags ) ;
acpi_status acpi_terminate ( void ) ;
acpi_status acpi_enable ( void ) ;
acpi_status acpi_disable ( void ) ;
const char * acpi_format_exception ( acpi_status exception ) ;
acpi_status acpi_purge_cached_objects ( void ) ;
acpi_status acpi_install_interface ( acpi_string interface_name ) ;
acpi_status acpi_remove_interface ( acpi_string interface_name ) ;
u32 acpi_check_address_range ( acpi_adr_space_type space_id , acpi_physical_address address , acpi_size length , u8 warn ) ;
acpi_status acpi_decode_pld_buffer ( u8 * in_buffer , acpi_size length , struct acpi_pld_info * * return_buffer ) ;
void * acpi_allocate ( u32 size ) ;
void * acpi_callocate ( u32 size ) ;
void acpi_free ( void * address ) ;
acpi_status acpi_load_table ( struct acpi_table_header * table ) ;
acpi_status acpi_unload_parent_table ( acpi_handle object ) ;
acpi_status acpi_load_tables ( void ) ;
acpi_status acpi_reallocate_root_table ( void ) ;
acpi_status acpi_find_root_pointer ( acpi_size * rsdp_address ) ;
acpi_status acpi_unload_table_id ( acpi_owner_id id ) ;
acpi_status acpi_get_table_header ( acpi_string signature , u32 instance , struct acpi_table_header * out_table_header ) ;
acpi_status acpi_get_table_with_size ( acpi_string signature , u32 instance , struct acpi_table_header * * out_table , acpi_size * tbl_size ) ;
acpi_status acpi_get_table ( acpi_string signature , u32 instance , struct acpi_table_header * * out_table ) ;
acpi_status acpi_get_table_by_index ( u32 table_index , struct acpi_table_header * * out_table ) ;
acpi_status acpi_install_table_handler ( acpi_tbl_handler handler , void * context ) ;
acpi_status acpi_remove_table_handler ( acpi_tbl_handler handler ) ;
acpi_status acpi_walk_namespace ( acpi_object_type type , acpi_handle start_object , u32 max_depth , acpi_walk_callback pre_order_visit , acpi_walk_callback post_order_visit , void * context , void * * return_value ) ;
acpi_status acpi_get_devices ( const char * HID , acpi_walk_callback user_function , void * context , void * * return_value ) ;
acpi_status acpi_get_name ( acpi_handle object , u32 name_type , struct acpi_buffer * ret_path_ptr ) ;
acpi_status acpi_get_handle ( acpi_handle parent , acpi_string pathname , acpi_handle * ret_handle ) ;
acpi_status acpi_attach_data ( acpi_handle object , acpi_object_handler handler , void * data ) ;
acpi_status acpi_detach_data ( acpi_handle object , acpi_object_handler handler ) ;
acpi_status acpi_get_data ( acpi_handle object , acpi_object_handler handler , void * * data ) ;
acpi_status acpi_debug_trace ( char * name , u32 debug_level , u32 debug_layer , u32 flags ) ;
acpi_status acpi_evaluate_object ( acpi_handle object , acpi_string pathname , struct acpi_object_list * parameter_objects , struct acpi_buffer * return_object_buffer ) ;
acpi_status acpi_evaluate_object_typed ( acpi_handle object , acpi_string pathname , struct acpi_object_list * external_params , struct acpi_buffer * return_buffer , acpi_object_type return_type ) ;
acpi_status acpi_get_object_info ( acpi_handle object , struct acpi_device_info * * return_buffer ) ;
acpi_status acpi_install_method ( u8 * buffer ) ;
acpi_status acpi_get_next_object ( acpi_object_type type , acpi_handle parent , acpi_handle child , acpi_handle * out_handle ) ;
acpi_status acpi_get_type ( acpi_handle object , acpi_object_type * out_type ) ;
acpi_status acpi_get_id ( acpi_handle object , acpi_owner_id * out_type ) ;
acpi_status acpi_get_parent ( acpi_handle object , acpi_handle * out_handle ) ;
acpi_status acpi_install_initialization_handler ( acpi_init_handler handler , u32 function ) ;
acpi_status acpi_install_global_event_handler ( acpi_gbl_event_handler handler , void * context ) ;
acpi_status acpi_install_fixed_event_handler ( u32 acpi_event , acpi_event_handler handler , void * context ) ;
acpi_status acpi_remove_fixed_event_handler ( u32 acpi_event , acpi_event_handler handler ) ;
acpi_status acpi_install_gpe_handler ( acpi_handle gpe_device , u32 gpe_number , u32 type , acpi_gpe_handler address , void * context ) ;
acpi_status acpi_remove_gpe_handler ( acpi_handle gpe_device , u32 gpe_number , acpi_gpe_handler address ) ;
acpi_status acpi_install_notify_handler ( acpi_handle device , u32 handler_type , acpi_notify_handler handler , void * context ) ;
acpi_status acpi_remove_notify_handler ( acpi_handle device , u32 handler_type , acpi_notify_handler handler ) ;
acpi_status acpi_install_address_space_handler ( acpi_handle device , acpi_adr_space_type space_id , acpi_adr_space_handler handler , acpi_adr_space_setup setup , void * context ) ;
acpi_status acpi_remove_address_space_handler ( acpi_handle device , acpi_adr_space_type space_id , acpi_adr_space_handler handler ) ;
acpi_status acpi_install_interface_handler ( acpi_interface_handler handler ) ;
acpi_status acpi_acquire_global_lock ( u16 timeout , u32 * handle ) ;
acpi_status acpi_release_global_lock ( u32 handle ) ;
acpi_status acpi_acquire_mutex ( acpi_handle handle , acpi_string pathname , u16 timeout ) ;
acpi_status acpi_release_mutex ( acpi_handle handle , acpi_string pathname ) ;
acpi_status acpi_enable_event ( u32 event , u32 flags ) ;
acpi_status acpi_disable_event ( u32 event , u32 flags ) ;
acpi_status acpi_clear_event ( u32 event ) ;
acpi_status acpi_get_event_status ( u32 event , acpi_event_status * event_status ) ;
acpi_status acpi_update_all_gpes ( void ) ;
acpi_status acpi_enable_gpe ( acpi_handle gpe_device , u32 gpe_number ) ;
acpi_status acpi_disable_gpe ( acpi_handle gpe_device , u32 gpe_number ) ;
acpi_status acpi_clear_gpe ( acpi_handle gpe_device , u32 gpe_number ) ;
acpi_status acpi_set_gpe ( acpi_handle gpe_device , u32 gpe_number , u8 action ) ;
acpi_status acpi_finish_gpe ( acpi_handle gpe_device , u32 gpe_number ) ;
acpi_status acpi_setup_gpe_for_wake ( acpi_handle parent_device , acpi_handle gpe_device , u32 gpe_number ) ;
acpi_status acpi_set_gpe_wake_mask ( acpi_handle gpe_device , u32 gpe_number , u8 action ) ;
acpi_status acpi_get_gpe_status ( acpi_handle gpe_device , u32 gpe_number , acpi_event_status * event_status ) ;
acpi_status acpi_disable_all_gpes ( void ) ;
acpi_status acpi_enable_all_runtime_gpes ( void ) ;
acpi_status acpi_get_gpe_device ( u32 gpe_index , acpi_handle * gpe_device ) ;
acpi_status acpi_install_gpe_block ( acpi_handle gpe_device , struct acpi_generic_address * gpe_block_address , u32 register_count , u32 interrupt_number ) ;
acpi_status acpi_remove_gpe_block ( acpi_handle gpe_device ) ;
acpi_status acpi_get_vendor_resource ( acpi_handle device , char * name , struct acpi_vendor_uuid * uuid , struct acpi_buffer * ret_buffer ) ;
acpi_status acpi_get_current_resources ( acpi_handle device , struct acpi_buffer * ret_buffer ) ;
acpi_status acpi_get_event_resources ( acpi_handle device_handle , struct acpi_buffer * ret_buffer ) ;
acpi_status acpi_walk_resources ( acpi_handle device , char * name , acpi_walk_resource_callback user_function , void * context ) ;
acpi_status acpi_set_current_resources ( acpi_handle device , struct acpi_buffer * in_buffer ) ;
acpi_status acpi_get_irq_routing_table ( acpi_handle device , struct acpi_buffer * ret_buffer ) ;
acpi_status acpi_resource_to_address64 ( struct acpi_resource * resource , struct acpi_resource_address64 * out ) ;
acpi_status acpi_buffer_to_resource ( u8 * aml_buffer , u16 aml_buffer_length , struct acpi_resource * * resource_ptr ) ;
acpi_status acpi_reset ( void ) ;
acpi_status acpi_read_bit_register ( u32 register_id , u32 * return_value ) ;
acpi_status acpi_write_bit_register ( u32 register_id , u32 value ) ;
acpi_status acpi_set_firmware_waking_vector ( u32 physical_address ) ;
acpi_status acpi_set_firmware_waking_vector64 ( u64 physical_address ) ;
acpi_status acpi_read ( u64 * value , struct acpi_generic_address * reg ) ;
acpi_status acpi_write ( u64 value , struct acpi_generic_address * reg ) ;
acpi_status acpi_get_sleep_type_data ( u8 sleep_state , u8 * slp_typ_a , u8 * slp_typ_b ) ;
acpi_status acpi_enter_sleep_state_prep ( u8 sleep_state ) ;
acpi_status acpi_enter_sleep_state ( u8 sleep_state ) ;
acpi_status acpi_enter_sleep_state_s4bios ( void ) ;
acpi_status acpi_leave_sleep_state_prep ( u8 sleep_state ) ;
acpi_status acpi_leave_sleep_state ( u8 sleep_state ) ;
void acpi_error ( const char * module_name , u32 line_number , const char * format , ... ) __attribute__ ( ( __format__ ( __printf__ , 3 , 3 + 1 ) ) ) ;
void acpi_exception ( const char * module_name , u32 line_number , acpi_status status , const char * format , ... ) __attribute__ ( ( __format__ ( __printf__ , 4 , 4 + 1 ) ) ) ;
void acpi_warning ( const char * module_name , u32 line_number , const char * format , ... ) __attribute__ ( ( __format__ ( __printf__ , 3 , 3 + 1 ) ) ) ;
void acpi_info ( const char * module_name , u32 line_number , const char * format , ... ) __attribute__ ( ( __format__ ( __printf__ , 3 , 3 + 1 ) ) ) ;
void acpi_bios_error ( const char * module_name , u32 line_number , const char * format , ... ) __attribute__ ( ( __format__ ( __printf__ , 3 , 3 + 1 ) ) ) ;
void acpi_bios_warning ( const char * module_name , u32 line_number , const char * format , ... ) __attribute__ ( ( __format__ ( __printf__ , 3 , 3 + 1 ) ) ) ;
acpi_status acpi_extract_package ( union acpi_object * package , struct acpi_buffer * format , struct acpi_buffer * buffer ) ;
acpi_status acpi_evaluate_integer ( acpi_handle handle , acpi_string pathname , struct acpi_object_list * arguments , unsigned long long * data ) ;
acpi_status acpi_evaluate_reference ( acpi_handle handle , acpi_string pathname , struct acpi_object_list * arguments , struct acpi_handle_list * list ) ;
acpi_status acpi_evaluate_hotplug_ost ( acpi_handle handle , u32 source_event , u32 status_code , struct acpi_buffer * status_buf ) ;
acpi_status acpi_get_physical_device_location ( acpi_handle handle , struct acpi_pld_info * * pld ) ;
const char * acpi_device_hid ( struct acpi_device * device ) ;
extern int acpi_bus_generate_netlink_event ( const char * , const char * , u8 , int ) ;
void acpi_bus_private_data_handler ( acpi_handle , void * ) ;
int acpi_bus_get_private_data ( acpi_handle , void * * ) ;
extern int acpi_notifier_call_chain ( struct acpi_device * , u32 , u32 ) ;
extern int register_acpi_notifier ( struct notifier_block * ) ;
extern int unregister_acpi_notifier ( struct notifier_block * ) ;
extern int register_acpi_bus_notifier ( struct notifier_block * nb ) ;
extern void unregister_acpi_bus_notifier ( struct notifier_block * nb ) ;
int acpi_bus_get_device ( acpi_handle handle , struct acpi_device * * device ) ;
void acpi_bus_data_handler ( acpi_handle handle , void * context ) ;
acpi_status acpi_bus_get_status_handle ( acpi_handle handle , unsigned long long * sta ) ;
int acpi_bus_get_status ( struct acpi_device * device ) ;
int acpi_bus_set_power ( acpi_handle handle , int state ) ;
int acpi_device_set_power ( struct acpi_device * device , int state ) ;
int acpi_bus_update_power ( acpi_handle handle , int * state_p ) ;
bool acpi_bus_power_manageable ( acpi_handle handle ) ;
bool acpi_bus_can_wakeup ( acpi_handle handle ) ;
int acpi_power_resource_register_device ( struct device * dev , acpi_handle handle ) ;
void acpi_power_resource_unregister_device ( struct device * dev , acpi_handle handle ) ;
int acpi_bus_generate_proc_event ( struct acpi_device * device , u8 type , int data ) ;
int acpi_bus_generate_proc_event4 ( const char * class_ , const char * bid , u8 type , int data ) ;
int acpi_bus_receive_event ( struct acpi_bus_event * event ) ;
int acpi_bus_register_driver ( struct acpi_driver * driver ) ;
void acpi_bus_unregister_driver ( struct acpi_driver * driver ) ;
int acpi_bus_add ( struct acpi_device * * child , struct acpi_device * parent , acpi_handle handle , int type ) ;
void acpi_bus_hot_remove_device ( void * context ) ;
int acpi_bus_trim ( struct acpi_device * start , int rmdevice ) ;
int acpi_bus_start ( struct acpi_device * device ) ;
acpi_status acpi_bus_get_ejd ( acpi_handle handle , acpi_handle * ejd ) ;
int acpi_match_device_ids ( struct acpi_device * device , const struct acpi_device_id * ids ) ;
int acpi_create_dir ( struct acpi_device * ) ;
void acpi_remove_dir ( struct acpi_device * ) ;
int register_acpi_bus_type ( struct acpi_bus_type * ) ;
int unregister_acpi_bus_type ( struct acpi_bus_type * ) ;
acpi_handle acpi_get_child ( acpi_handle , u64 ) ;
int acpi_is_root_bridge ( acpi_handle ) ;
acpi_handle acpi_get_pci_rootbridge_handle ( unsigned int , unsigned int ) ;
struct acpi_pci_root * acpi_pci_find_root ( acpi_handle handle ) ;
int acpi_enable_wakeup_device_power ( struct acpi_device * dev , int state ) ;
int acpi_disable_wakeup_device_power ( struct acpi_device * dev ) ;
acpi_status acpi_add_pm_notifier ( struct acpi_device * adev , acpi_notify_handler handler , void * context ) ;
acpi_status acpi_remove_pm_notifier ( struct acpi_device * adev , acpi_notify_handler handler ) ;
int acpi_device_power_state ( struct device * dev , struct acpi_device * adev , u32 target_state , int d_max_in , int * d_min_p ) ;
int acpi_pm_device_sleep_state ( struct device * , int * , int ) ;
int __acpi_device_run_wake ( struct acpi_device * , bool ) ;
int acpi_pm_device_run_wake ( struct device * , bool ) ;
int __acpi_device_sleep_wake ( struct acpi_device * , u32 , bool ) ;
int acpi_pm_device_sleep_wake ( struct device * , bool ) ;
u32 acpi_target_system_state ( void ) ;
int acpi_irq_penalty_init ( void ) ;
int acpi_pci_link_allocate_irq ( acpi_handle handle , int index , int * triggering , int * polarity , char * * name ) ;
int acpi_pci_link_free_irq ( acpi_handle handle ) ;
int acpi_pci_irq_add_prt ( acpi_handle handle , int segment , int bus ) ;
void acpi_pci_irq_del_prt ( int segment , int bus ) ;
struct pci_dev * acpi_get_pci_dev ( acpi_handle ) ;
int acpi_pci_bind_root ( struct acpi_device * device ) ;
struct pci_bus * pci_acpi_scan_root ( struct acpi_pci_root * root ) ;
void pci_acpi_crs_quirks ( void ) ;
extern int is_dock_device ( acpi_handle handle ) ;
extern int register_dock_notifier ( struct notifier_block * nb ) ;
extern void unregister_dock_notifier ( struct notifier_block * nb ) ;
extern int register_hotplug_dock_device ( acpi_handle handle , const struct acpi_dock_ops * ops , void * context ) ;
extern void unregister_hotplug_dock_device ( acpi_handle handle ) ;
extern int pxm_to_node ( int ) ;
extern int node_to_pxm ( int ) ;
extern void __acpi_map_pxm_to_node ( int , int ) ;
extern int acpi_map_pxm_to_node ( int ) ;
char * __acpi_map_table ( unsigned long phys_addr , unsigned long size ) ;
void __acpi_unmap_table ( char * map , unsigned long size ) ;
int early_acpi_boot_init ( void ) ;
int acpi_boot_init ( void ) ;
void acpi_boot_table_init ( void ) ;
int acpi_mps_check ( void ) ;
int acpi_numa_init ( void ) ;
int acpi_table_init ( void ) ;
int acpi_table_parse ( char * id , acpi_table_handler handler ) ;
int __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) acpi_table_parse_entries ( char * id , unsigned long table_size , int entry_id , acpi_table_entry_handler handler , unsigned int max_entries ) ;
int acpi_table_parse_madt ( enum acpi_madt_type id , acpi_table_entry_handler handler , unsigned int max_entries ) ;
int acpi_parse_mcfg ( struct acpi_table_header * header ) ;
void acpi_table_print_madt_entry ( struct acpi_subtable_header * madt ) ;
void acpi_numa_slit_init ( struct acpi_table_slit * slit ) ;
void acpi_numa_processor_affinity_init ( struct acpi_srat_cpu_affinity * pa ) ;
void acpi_numa_x2apic_affinity_init ( struct acpi_srat_x2apic_cpu_affinity * pa ) ;
int acpi_numa_memory_affinity_init ( struct acpi_srat_mem_affinity * ma ) ;
void acpi_numa_arch_fixup ( void ) ;
int acpi_map_lsapic ( acpi_handle handle , int * pcpu ) ;
int acpi_unmap_lsapic ( int cpu ) ;
int acpi_register_ioapic ( acpi_handle handle , u64 phys_addr , u32 gsi_base ) ;
int acpi_unregister_ioapic ( acpi_handle handle , u32 gsi_base ) ;
void acpi_irq_stats_init ( void ) ;
int acpi_register_gsi ( struct device * dev , u32 gsi , int triggering , int polarity ) ;
int acpi_gsi_to_irq ( u32 gsi , unsigned int * irq ) ;
int acpi_isa_irq_to_gsi ( unsigned isa_irq , u32 * gsi ) ;
extern int acpi_get_override_irq ( u32 gsi , int * trigger , int * polarity ) ;
void acpi_unregister_gsi ( u32 gsi ) ;
int acpi_pci_irq_enable ( struct pci_dev * dev ) ;
void acpi_penalize_isa_irq ( int irq , int active ) ;
void acpi_pci_irq_disable ( struct pci_dev * dev ) ;
int acpi_pci_register_driver ( struct acpi_pci_driver * driver ) ;
void acpi_pci_unregister_driver ( struct acpi_pci_driver * driver ) ;
extern int ec_read ( u8 addr , u8 * val ) ;
extern int ec_write ( u8 addr , u8 val ) ;
extern int ec_transaction ( u8 command , const u8 * wdata , unsigned wdata_len , u8 * rdata , unsigned rdata_len ) ;
extern acpi_handle ec_get_handle ( void ) ;
extern acpi_status wmi_evaluate_method ( const char * guid , u8 instance , u32 method_id , const struct acpi_buffer * in , struct acpi_buffer * out ) ;
extern acpi_status wmi_query_block ( const char * guid , u8 instance , struct acpi_buffer * out ) ;
extern acpi_status wmi_set_block ( const char * guid , u8 instance , const struct acpi_buffer * in ) ;
extern acpi_status wmi_install_notify_handler ( const char * guid , wmi_notify_handler handler , void * data ) ;
extern acpi_status wmi_remove_notify_handler ( const char * guid ) ;
extern acpi_status wmi_get_event_data ( u32 event , struct acpi_buffer * out ) ;
extern bool wmi_has_guid ( const char * guid ) ;
extern long acpi_video_get_capabilities ( acpi_handle graphics_dev_handle ) ;
extern long acpi_is_video_device ( struct acpi_device * device ) ;
extern void acpi_video_dmi_promote_vendor ( void ) ;
extern void acpi_video_dmi_demote_vendor ( void ) ;
extern int acpi_video_backlight_support ( void ) ;
extern int acpi_video_display_switch_support ( void ) ;
extern int acpi_blacklisted ( void ) ;
extern void acpi_dmi_osi_linux ( int enable , const struct dmi_system_id * d ) ;
extern void acpi_osi_setup ( char * str ) ;
int acpi_get_pxm ( acpi_handle handle ) ;
int acpi_get_node ( acpi_handle * handle ) ;
extern int acpi_paddr_to_node ( u64 start_addr , u64 size ) ;
bool acpi_dev_resource_memory ( struct acpi_resource * ares , struct resource * res ) ;
bool acpi_dev_resource_io ( struct acpi_resource * ares , struct resource * res ) ;
bool acpi_dev_resource_address_space ( struct acpi_resource * ares , struct resource * res ) ;
bool acpi_dev_resource_ext_address_space ( struct acpi_resource * ares , struct resource * res ) ;
unsigned long acpi_dev_irq_flags ( u8 triggering , u8 polarity , u8 shareable ) ;
bool acpi_dev_resource_interrupt ( struct acpi_resource * ares , int index , struct resource * res ) ;
void acpi_dev_free_resource_list ( struct list_head * list ) ;
int acpi_dev_get_resources ( struct acpi_device * adev , struct list_head * list , int ( * preproc ) ( struct acpi_resource * , void * ) , void * preproc_data ) ;
int acpi_check_resource_conflict ( const struct resource * res ) ;
int acpi_check_region ( resource_size_t start , resource_size_t n , const char * name ) ;
int acpi_resources_are_enforced ( void ) ;
void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) acpi_no_s4_hw_signature ( void ) ;
void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) acpi_old_suspend_ordering ( void ) ;
void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) acpi_nvs_nosave ( void ) ;
void __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) acpi_nvs_nosave_s3 ( void ) ;
acpi_status acpi_run_osc ( acpi_handle handle , struct acpi_osc_context * context ) ;
extern acpi_status acpi_pci_osc_control_set ( acpi_handle handle , u32 * mask , u32 req ) ;
extern void acpi_early_init ( void ) ;
extern int acpi_nvs_register ( __u64 start , __u64 size ) ;
extern int acpi_nvs_for_each_region ( int ( * func ) ( __u64 , __u64 , void * ) , void * data ) ;
const struct acpi_device_id * acpi_match_device ( const struct acpi_device_id * ids , const struct device * dev ) ;
void acpi_os_set_prepare_sleep ( int ( * func ) ( u8 sleep_state , u32 pm1a_ctrl , u32 pm1b_ctrl ) ) ;
acpi_status acpi_os_prepare_sleep ( u8 sleep_state , u32 pm1a_control , u32 pm1b_control ) ;
void arch_reserve_mem_area ( acpi_physical_address addr , size_t size ) ;
int acpi_dev_runtime_suspend ( struct device * dev ) ;
int acpi_dev_runtime_resume ( struct device * dev ) ;
int acpi_subsys_runtime_suspend ( struct device * dev ) ;
int acpi_subsys_runtime_resume ( struct device * dev ) ;
int acpi_dev_suspend_late ( struct device * dev ) ;
int acpi_dev_resume_early ( struct device * dev ) ;
int acpi_subsys_prepare ( struct device * dev ) ;
int acpi_subsys_suspend_late ( struct device * dev ) ;
int acpi_subsys_resume_early ( struct device * dev ) ;
int acpi_dev_pm_attach ( struct device * dev , bool power_on ) ;
void acpi_dev_pm_detach ( struct device * dev , bool power_off ) ;
__attribute__ ( ( format ( printf , 3 , 4 ) ) ) void acpi_handle_printk ( const char * level , acpi_handle handle , const char * fmt , ... ) ;
extern int cdrom_open ( struct cdrom_device_info * cdi , struct block_device * bdev , fmode_t mode ) ;
extern void cdrom_release ( struct cdrom_device_info * cdi , fmode_t mode ) ;
extern int cdrom_ioctl ( struct cdrom_device_info * cdi , struct block_device * bdev , fmode_t mode , unsigned int cmd , unsigned long arg ) ;
extern unsigned int cdrom_check_events ( struct cdrom_device_info * cdi , unsigned int clearing ) ;
extern int cdrom_media_changed ( struct cdrom_device_info * ) ;
extern int register_cdrom ( struct cdrom_device_info * cdi ) ;
extern void unregister_cdrom ( struct cdrom_device_info * cdi ) ;
extern int cdrom_get_last_written ( struct cdrom_device_info * cdi , long * last_written ) ;
extern int cdrom_number_of_slots ( struct cdrom_device_info * cdi ) ;
extern int cdrom_mode_select ( struct cdrom_device_info * cdi , struct packet_command * cgc ) ;
extern int cdrom_mode_sense ( struct cdrom_device_info * cdi , struct packet_command * cgc , int page_code , int page_control ) ;
extern void init_cdrom_command ( struct packet_command * cgc , void * buffer , int len , int type ) ;
extern int cdrom_get_media_event ( struct cdrom_device_info * cdi , struct media_event_desc * med ) ;
extern int sata_set_spd ( struct ata_link * link ) ;
extern int ata_std_prereset ( struct ata_link * link , unsigned long deadline ) ;
extern int ata_wait_after_reset ( struct ata_link * link , unsigned long deadline , int ( * check_ready ) ( struct ata_link * link ) ) ;
extern int sata_link_debounce ( struct ata_link * link , const unsigned long * params , unsigned long deadline ) ;
extern int sata_link_resume ( struct ata_link * link , const unsigned long * params , unsigned long deadline ) ;
extern int sata_link_scr_lpm ( struct ata_link * link , enum ata_lpm_policy policy , bool spm_wakeup ) ;
extern int sata_link_hardreset ( struct ata_link * link , const unsigned long * timing , unsigned long deadline , bool * online , int ( * check_ready ) ( struct ata_link * ) ) ;
extern int sata_std_hardreset ( struct ata_link * link , unsigned int * class_ , unsigned long deadline ) ;
extern void ata_std_postreset ( struct ata_link * link , unsigned int * classes ) ;
extern struct ata_host * ata_host_alloc ( struct device * dev , int max_ports ) ;
extern struct ata_host * ata_host_alloc_pinfo ( struct device * dev , const struct ata_port_info * const * ppi , int n_ports ) ;
extern int ata_slave_link_init ( struct ata_port * ap ) ;
extern int ata_host_start ( struct ata_host * host ) ;
extern int ata_host_register ( struct ata_host * host , struct scsi_host_template * sht ) ;
extern int ata_host_activate ( struct ata_host * host , int irq , irq_handler_t irq_handler , unsigned long irq_flags , struct scsi_host_template * sht ) ;
extern void ata_host_detach ( struct ata_host * host ) ;
extern void ata_host_init ( struct ata_host * , struct device * , struct ata_port_operations * ) ;
extern int ata_scsi_detect ( struct scsi_host_template * sht ) ;
extern int ata_scsi_ioctl ( struct scsi_device * dev , int cmd , void * arg ) ;
extern int ata_scsi_queuecmd ( struct Scsi_Host * h , struct scsi_cmnd * cmd ) ;
extern int ata_sas_scsi_ioctl ( struct ata_port * ap , struct scsi_device * dev , int cmd , void * arg ) ;
extern void ata_sas_port_destroy ( struct ata_port * ) ;
extern struct ata_port * ata_sas_port_alloc ( struct ata_host * , struct ata_port_info * , struct Scsi_Host * ) ;
extern void ata_sas_async_probe ( struct ata_port * ap ) ;
extern int ata_sas_sync_probe ( struct ata_port * ap ) ;
extern int ata_sas_port_init ( struct ata_port * ) ;
extern int ata_sas_port_start ( struct ata_port * ap ) ;
extern void ata_sas_port_stop ( struct ata_port * ap ) ;
extern int ata_sas_slave_configure ( struct scsi_device * , struct ata_port * ) ;
extern int ata_sas_queuecmd ( struct scsi_cmnd * cmd , struct ata_port * ap ) ;
extern int sata_scr_valid ( struct ata_link * link ) ;
extern int sata_scr_read ( struct ata_link * link , int reg , u32 * val ) ;
extern int sata_scr_write ( struct ata_link * link , int reg , u32 val ) ;
extern int sata_scr_write_flush ( struct ata_link * link , int reg , u32 val ) ;
extern bool ata_link_online ( struct ata_link * link ) ;
extern bool ata_link_offline ( struct ata_link * link ) ;
extern int ata_host_suspend ( struct ata_host * host , pm_message_t mesg ) ;
extern void ata_host_resume ( struct ata_host * host ) ;
extern int ata_sas_port_async_suspend ( struct ata_port * ap , int * async ) ;
extern int ata_sas_port_async_resume ( struct ata_port * ap , int * async ) ;
extern int ata_ratelimit ( void ) ;
extern void ata_msleep ( struct ata_port * ap , unsigned int msecs ) ;
extern u32 ata_wait_register ( struct ata_port * ap , void * reg , u32 mask , u32 val , unsigned long interval , unsigned long timeout ) ;
extern int atapi_cmd_type ( u8 opcode ) ;
extern void ata_tf_to_fis ( const struct ata_taskfile * tf , u8 pmp , int is_cmd , u8 * fis ) ;
extern void ata_tf_from_fis ( const u8 * fis , struct ata_taskfile * tf ) ;
extern unsigned long ata_pack_xfermask ( unsigned long pio_mask , unsigned long mwdma_mask , unsigned long udma_mask ) ;
extern void ata_unpack_xfermask ( unsigned long xfer_mask , unsigned long * pio_mask , unsigned long * mwdma_mask , unsigned long * udma_mask ) ;
extern u8 ata_xfer_mask2mode ( unsigned long xfer_mask ) ;
extern unsigned long ata_xfer_mode2mask ( u8 xfer_mode ) ;
extern int ata_xfer_mode2shift ( unsigned long xfer_mode ) ;
extern const char * ata_mode_string ( unsigned long xfer_mask ) ;
extern unsigned long ata_id_xfermask ( const u16 * id ) ;
extern int ata_std_qc_defer ( struct ata_queued_cmd * qc ) ;
extern void ata_noop_qc_prep ( struct ata_queued_cmd * qc ) ;
extern void ata_sg_init ( struct ata_queued_cmd * qc , struct scatterlist * sg , unsigned int n_elem ) ;
extern unsigned int ata_dev_classify ( const struct ata_taskfile * tf ) ;
extern void ata_dev_disable ( struct ata_device * adev ) ;
extern void ata_id_string ( const u16 * id , unsigned char * s , unsigned int ofs , unsigned int len ) ;
extern void ata_id_c_string ( const u16 * id , unsigned char * s , unsigned int ofs , unsigned int len ) ;
extern unsigned int ata_do_dev_read_id ( struct ata_device * dev , struct ata_taskfile * tf , u16 * id ) ;
extern void ata_qc_complete ( struct ata_queued_cmd * qc ) ;
extern int ata_qc_complete_multiple ( struct ata_port * ap , u32 qc_active ) ;
extern void ata_scsi_simulate ( struct ata_device * dev , struct scsi_cmnd * cmd ) ;
extern int ata_std_bios_param ( struct scsi_device * sdev , struct block_device * bdev , sector_t capacity , int geom [ ] ) ;
extern void ata_scsi_unlock_native_capacity ( struct scsi_device * sdev ) ;
extern int ata_scsi_slave_config ( struct scsi_device * sdev ) ;
extern void ata_scsi_slave_destroy ( struct scsi_device * sdev ) ;
extern int ata_scsi_change_queue_depth ( struct scsi_device * sdev , int queue_depth , int reason ) ;
extern int __ata_change_queue_depth ( struct ata_port * ap , struct scsi_device * sdev , int queue_depth , int reason ) ;
extern struct ata_device * ata_dev_pair ( struct ata_device * adev ) ;
extern int ata_do_set_mode ( struct ata_link * link , struct ata_device * * r_failed_dev ) ;
extern void ata_scsi_port_error_handler ( struct Scsi_Host * host , struct ata_port * ap ) ;
extern void ata_scsi_cmd_error_handler ( struct Scsi_Host * host , struct ata_port * ap , struct list_head * eh_q ) ;
extern int ata_cable_40wire ( struct ata_port * ap ) ;
extern int ata_cable_80wire ( struct ata_port * ap ) ;
extern int ata_cable_sata ( struct ata_port * ap ) ;
extern int ata_cable_ignore ( struct ata_port * ap ) ;
extern int ata_cable_unknown ( struct ata_port * ap ) ;
extern unsigned int ata_pio_need_iordy ( const struct ata_device * ) ;
extern const struct ata_timing * ata_timing_find_mode ( u8 xfer_mode ) ;
extern int ata_timing_compute ( struct ata_device * , unsigned short , struct ata_timing * , int , int ) ;
extern void ata_timing_merge ( const struct ata_timing * , const struct ata_timing * , struct ata_timing * , unsigned int ) ;
extern u8 ata_timing_cycle2mode ( unsigned int xfer_shift , int cycle ) ;
extern int pci_test_config_bits ( struct pci_dev * pdev , const struct pci_bits * bits ) ;
extern void ata_pci_remove_one ( struct pci_dev * pdev ) ;
extern void ata_pci_device_do_suspend ( struct pci_dev * pdev , pm_message_t mesg ) ;
extern int ata_pci_device_do_resume ( struct pci_dev * pdev ) ;
extern int ata_pci_device_suspend ( struct pci_dev * pdev , pm_message_t mesg ) ;
extern int ata_pci_device_resume ( struct pci_dev * pdev ) ;
extern int ata_platform_remove_one ( struct platform_device * pdev ) ;
int ata_acpi_stm ( struct ata_port * ap , const struct ata_acpi_gtm * stm ) ;
int ata_acpi_gtm ( struct ata_port * ap , struct ata_acpi_gtm * stm ) ;
unsigned long ata_acpi_gtm_xfermask ( struct ata_device * dev , const struct ata_acpi_gtm * gtm ) ;
acpi_handle ata_ap_acpi_handle ( struct ata_port * ap ) ;
acpi_handle ata_dev_acpi_handle ( struct ata_device * dev ) ;
int ata_acpi_cbl_80wire ( struct ata_port * ap , const struct ata_acpi_gtm * gtm ) ;
extern void ata_port_schedule_eh ( struct ata_port * ap ) ;
extern void ata_port_wait_eh ( struct ata_port * ap ) ;
extern int ata_link_abort ( struct ata_link * link ) ;
extern int ata_port_abort ( struct ata_port * ap ) ;
extern int ata_port_freeze ( struct ata_port * ap ) ;
extern int sata_async_notification ( struct ata_port * ap ) ;
extern void ata_eh_freeze_port ( struct ata_port * ap ) ;
extern void ata_eh_thaw_port ( struct ata_port * ap ) ;
extern void ata_eh_qc_complete ( struct ata_queued_cmd * qc ) ;
extern void ata_eh_qc_retry ( struct ata_queued_cmd * qc ) ;
extern void ata_eh_analyze_ncq_error ( struct ata_link * link ) ;
extern void ata_do_eh ( struct ata_port * ap , ata_prereset_fn_t prereset , ata_reset_fn_t softreset , ata_reset_fn_t hardreset , ata_postreset_fn_t postreset ) ;
extern void ata_std_error_handler ( struct ata_port * ap ) ;
extern void ata_std_sched_eh ( struct ata_port * ap ) ;
extern void ata_std_end_eh ( struct ata_port * ap ) ;
extern int ata_link_nr_enabled ( struct ata_link * link ) ;
__attribute__ ( ( format ( printf , 3 , 4 ) ) ) int ata_port_printk ( const struct ata_port * ap , const char * level , const char * fmt , ... ) ;
__attribute__ ( ( format ( printf , 3 , 4 ) ) ) int ata_link_printk ( const struct ata_link * link , const char * level , const char * fmt , ... ) ;
__attribute__ ( ( format ( printf , 3 , 4 ) ) ) int ata_dev_printk ( const struct ata_device * dev , const char * level , const char * fmt , ... ) ;
void ata_print_version ( const struct device * dev , const char * version ) ;
extern __attribute__ ( ( format ( printf , 2 , 3 ) ) ) void __ata_ehi_push_desc ( struct ata_eh_info * ehi , const char * fmt , ... ) ;
extern __attribute__ ( ( format ( printf , 2 , 3 ) ) ) void ata_ehi_push_desc ( struct ata_eh_info * ehi , const char * fmt , ... ) ;
extern void ata_ehi_clear_desc ( struct ata_eh_info * ehi ) ;
extern __attribute__ ( ( format ( printf , 2 , 3 ) ) ) void ata_port_desc ( struct ata_port * ap , const char * fmt , ... ) ;
extern void ata_port_pbar_desc ( struct ata_port * ap , int bar , ssize_t offset , const char * name ) ;
extern struct ata_link * ata_link_next ( struct ata_link * link , struct ata_port * ap , enum ata_link_iter_mode mode ) ;
extern struct ata_device * ata_dev_next ( struct ata_device * dev , struct ata_link * link , enum ata_dev_iter_mode mode ) ;
extern int sata_pmp_qc_defer_cmd_switch ( struct ata_queued_cmd * qc ) ;
extern void sata_pmp_error_handler ( struct ata_port * ap ) ;
extern void ata_sff_dev_select ( struct ata_port * ap , unsigned int device ) ;
extern u8 ata_sff_check_status ( struct ata_port * ap ) ;
extern void ata_sff_pause ( struct ata_port * ap ) ;
extern void ata_sff_dma_pause ( struct ata_port * ap ) ;
extern int ata_sff_busy_sleep ( struct ata_port * ap , unsigned long timeout_pat , unsigned long timeout ) ;
extern int ata_sff_wait_ready ( struct ata_link * link , unsigned long deadline ) ;
extern void ata_sff_tf_load ( struct ata_port * ap , const struct ata_taskfile * tf ) ;
extern void ata_sff_tf_read ( struct ata_port * ap , struct ata_taskfile * tf ) ;
extern void ata_sff_exec_command ( struct ata_port * ap , const struct ata_taskfile * tf ) ;
extern unsigned int ata_sff_data_xfer ( struct ata_device * dev , unsigned char * buf , unsigned int buflen , int rw ) ;
extern unsigned int ata_sff_data_xfer32 ( struct ata_device * dev , unsigned char * buf , unsigned int buflen , int rw ) ;
extern unsigned int ata_sff_data_xfer_noirq ( struct ata_device * dev , unsigned char * buf , unsigned int buflen , int rw ) ;
extern void ata_sff_irq_on ( struct ata_port * ap ) ;
extern void ata_sff_irq_clear ( struct ata_port * ap ) ;
extern int ata_sff_hsm_move ( struct ata_port * ap , struct ata_queued_cmd * qc , u8 status , int in_wq ) ;
extern void ata_sff_queue_work ( struct work_struct * work ) ;
extern void ata_sff_queue_delayed_work ( struct delayed_work * dwork , unsigned long delay ) ;
extern void ata_sff_queue_pio_task ( struct ata_link * link , unsigned long delay ) ;
extern unsigned int ata_sff_qc_issue ( struct ata_queued_cmd * qc ) ;
extern bool ata_sff_qc_fill_rtf ( struct ata_queued_cmd * qc ) ;
extern unsigned int ata_sff_port_intr ( struct ata_port * ap , struct ata_queued_cmd * qc ) ;
extern irqreturn_t ata_sff_interrupt ( int irq , void * dev_instance ) ;
extern void ata_sff_lost_interrupt ( struct ata_port * ap ) ;
extern void ata_sff_freeze ( struct ata_port * ap ) ;
extern void ata_sff_thaw ( struct ata_port * ap ) ;
extern int ata_sff_prereset ( struct ata_link * link , unsigned long deadline ) ;
extern unsigned int ata_sff_dev_classify ( struct ata_device * dev , int present , u8 * r_err ) ;
extern int ata_sff_wait_after_reset ( struct ata_link * link , unsigned int devmask , unsigned long deadline ) ;
extern int ata_sff_softreset ( struct ata_link * link , unsigned int * classes , unsigned long deadline ) ;
extern int sata_sff_hardreset ( struct ata_link * link , unsigned int * class_ , unsigned long deadline ) ;
extern void ata_sff_postreset ( struct ata_link * link , unsigned int * classes ) ;
extern void ata_sff_drain_fifo ( struct ata_queued_cmd * qc ) ;
extern void ata_sff_error_handler ( struct ata_port * ap ) ;
extern void ata_sff_std_ports ( struct ata_ioports * ioaddr ) ;
extern int ata_pci_sff_init_host ( struct ata_host * host ) ;
extern int ata_pci_sff_prepare_host ( struct pci_dev * pdev , const struct ata_port_info * const * ppi , struct ata_host * * r_host ) ;
extern int ata_pci_sff_activate_host ( struct ata_host * host , irq_handler_t irq_handler , struct scsi_host_template * sht ) ;
extern int ata_pci_sff_init_one ( struct pci_dev * pdev , const struct ata_port_info * const * ppi , struct scsi_host_template * sht , void * host_priv , int hflags ) ;
extern void ata_bmdma_qc_prep ( struct ata_queued_cmd * qc ) ;
extern unsigned int ata_bmdma_qc_issue ( struct ata_queued_cmd * qc ) ;
extern void ata_bmdma_dumb_qc_prep ( struct ata_queued_cmd * qc ) ;
extern unsigned int ata_bmdma_port_intr ( struct ata_port * ap , struct ata_queued_cmd * qc ) ;
extern irqreturn_t ata_bmdma_interrupt ( int irq , void * dev_instance ) ;
extern void ata_bmdma_error_handler ( struct ata_port * ap ) ;
extern void ata_bmdma_post_internal_cmd ( struct ata_queued_cmd * qc ) ;
extern void ata_bmdma_irq_clear ( struct ata_port * ap ) ;
extern void ata_bmdma_setup ( struct ata_queued_cmd * qc ) ;
extern void ata_bmdma_start ( struct ata_queued_cmd * qc ) ;
extern void ata_bmdma_stop ( struct ata_queued_cmd * qc ) ;
extern u8 ata_bmdma_status ( struct ata_port * ap ) ;
extern int ata_bmdma_port_start ( struct ata_port * ap ) ;
extern int ata_bmdma_port_start32 ( struct ata_port * ap ) ;
extern int ata_pci_bmdma_clear_simplex ( struct pci_dev * pdev ) ;
extern void ata_pci_bmdma_init ( struct ata_host * host ) ;
extern int ata_pci_bmdma_prepare_host ( struct pci_dev * pdev , const struct ata_port_info * const * ppi , struct ata_host * * r_host ) ;
extern int ata_pci_bmdma_init_one ( struct pci_dev * pdev , const struct ata_port_info * const * ppi , struct scsi_host_template * sht , void * host_priv , int hflags ) ;
struct input_dev * input_allocate_device ( void ) ;
struct input_dev * devm_input_allocate_device ( struct device * ) ;
void input_free_device ( struct input_dev * dev ) ;
int input_register_device ( struct input_dev * ) ;
void input_unregister_device ( struct input_dev * ) ;
void input_reset_device ( struct input_dev * ) ;
int input_register_handler ( struct input_handler * ) ;
void input_unregister_handler ( struct input_handler * ) ;
int input_get_new_minor ( int legacy_base , unsigned int legacy_num , bool allow_dynamic ) ;
void input_free_minor ( unsigned int minor ) ;
int input_handler_for_each_handle ( struct input_handler * , void * data , int ( * fn ) ( struct input_handle * , void * ) ) ;
int input_register_handle ( struct input_handle * ) ;
void input_unregister_handle ( struct input_handle * ) ;
int input_grab_device ( struct input_handle * ) ;
void input_release_device ( struct input_handle * ) ;
int input_open_device ( struct input_handle * ) ;
void input_close_device ( struct input_handle * ) ;
int input_flush_device ( struct input_handle * handle , struct file * file ) ;
void input_event ( struct input_dev * dev , unsigned int type , unsigned int code , int value ) ;
void input_inject_event ( struct input_handle * handle , unsigned int type , unsigned int code , int value ) ;
void input_set_capability ( struct input_dev * dev , unsigned int type , unsigned int code ) ;
void input_alloc_absinfo ( struct input_dev * dev ) ;
void input_set_abs_params ( struct input_dev * dev , unsigned int axis , int min , int max , int fuzz , int flat ) ;
int input_scancode_to_scalar ( const struct input_keymap_entry * ke , unsigned int * scancode ) ;
int input_get_keycode ( struct input_dev * dev , struct input_keymap_entry * ke ) ;
int input_set_keycode ( struct input_dev * dev , const struct input_keymap_entry * ke ) ;
int input_ff_create ( struct input_dev * dev , unsigned int max_effects ) ;
void input_ff_destroy ( struct input_dev * dev ) ;
int input_ff_event ( struct input_dev * dev , unsigned int type , unsigned int code , int value ) ;
int input_ff_upload ( struct input_dev * dev , struct ff_effect * effect , struct file * file ) ;
int input_ff_erase ( struct input_dev * dev , int effect_id , struct file * file ) ;
int input_ff_create_memless ( struct input_dev * dev , void * data , int ( * play_effect ) ( struct input_dev * , void * , struct ff_effect * ) ) ;
struct resource * pnp_get_resource ( struct pnp_dev * dev , unsigned long type , unsigned int num ) ;
int pnp_device_attach ( struct pnp_dev * pnp_dev ) ;
void pnp_device_detach ( struct pnp_dev * pnp_dev ) ;
struct pnp_dev * pnp_request_card_device ( struct pnp_card_link * clink , const char * id , struct pnp_dev * from ) ;
void pnp_release_card_device ( struct pnp_dev * dev ) ;
int pnp_register_card_driver ( struct pnp_card_driver * drv ) ;
void pnp_unregister_card_driver ( struct pnp_card_driver * drv ) ;
int pnp_possible_config ( struct pnp_dev * dev , int type , resource_size_t base , resource_size_t size ) ;
int pnp_auto_config_dev ( struct pnp_dev * dev ) ;
int pnp_start_dev ( struct pnp_dev * dev ) ;
int pnp_stop_dev ( struct pnp_dev * dev ) ;
int pnp_activate_dev ( struct pnp_dev * dev ) ;
int pnp_disable_dev ( struct pnp_dev * dev ) ;
int pnp_range_reserved ( resource_size_t start , resource_size_t end ) ;
int pnp_is_active ( struct pnp_dev * dev ) ;
int compare_pnp_id ( struct pnp_id * pos , const char * id ) ;
int pnp_register_driver ( struct pnp_driver * drv ) ;
void pnp_unregister_driver ( struct pnp_driver * drv ) ;
struct mii_bus * mdiobus_alloc_size ( size_t ) ;
int mdiobus_register ( struct mii_bus * bus ) ;
void mdiobus_unregister ( struct mii_bus * bus ) ;
void mdiobus_free ( struct mii_bus * bus ) ;
struct phy_device * mdiobus_scan ( struct mii_bus * bus , int addr ) ;
int mdiobus_read ( struct mii_bus * bus , int addr , u32 regnum ) ;
int mdiobus_write ( struct mii_bus * bus , int addr , u32 regnum , u16 val ) ;
struct phy_device * phy_device_create ( struct mii_bus * bus , int addr , int phy_id , bool is_c45 , struct phy_c45_device_ids * c45_ids ) ;
struct phy_device * get_phy_device ( struct mii_bus * bus , int addr , bool is_c45 ) ;
int phy_device_register ( struct phy_device * phy ) ;
int phy_init_hw ( struct phy_device * phydev ) ;
struct phy_device * phy_attach ( struct net_device * dev , const char * bus_id , u32 flags , phy_interface_t interface ) ;
struct phy_device * phy_find_first ( struct mii_bus * bus ) ;
int phy_connect_direct ( struct net_device * dev , struct phy_device * phydev , void ( * handler ) ( struct net_device * ) , u32 flags , phy_interface_t interface ) ;
struct phy_device * phy_connect ( struct net_device * dev , const char * bus_id , void ( * handler ) ( struct net_device * ) , u32 flags , phy_interface_t interface ) ;
void phy_disconnect ( struct phy_device * phydev ) ;
void phy_detach ( struct phy_device * phydev ) ;
void phy_start ( struct phy_device * phydev ) ;
void phy_stop ( struct phy_device * phydev ) ;
int phy_start_aneg ( struct phy_device * phydev ) ;
int phy_stop_interrupts ( struct phy_device * phydev ) ;
int genphy_restart_aneg ( struct phy_device * phydev ) ;
int genphy_config_aneg ( struct phy_device * phydev ) ;
int genphy_update_link ( struct phy_device * phydev ) ;
int genphy_read_status ( struct phy_device * phydev ) ;
int genphy_suspend ( struct phy_device * phydev ) ;
int genphy_resume ( struct phy_device * phydev ) ;
void phy_driver_unregister ( struct phy_driver * drv ) ;
void phy_drivers_unregister ( struct phy_driver * drv , int n ) ;
int phy_driver_register ( struct phy_driver * new_driver ) ;
int phy_drivers_register ( struct phy_driver * new_driver , int n ) ;
void phy_state_machine ( struct work_struct * work ) ;
void phy_start_machine ( struct phy_device * phydev , void ( * handler ) ( struct net_device * ) ) ;
void phy_stop_machine ( struct phy_device * phydev ) ;
int phy_ethtool_sset ( struct phy_device * phydev , struct ethtool_cmd * cmd ) ;
int phy_ethtool_gset ( struct phy_device * phydev , struct ethtool_cmd * cmd ) ;
int phy_mii_ioctl ( struct phy_device * phydev , struct ifreq * ifr , int cmd ) ;
int phy_start_interrupts ( struct phy_device * phydev ) ;
void phy_print_status ( struct phy_device * phydev ) ;
void phy_device_free ( struct phy_device * phydev ) ;
int phy_register_fixup ( const char * bus_id , u32 phy_uid , u32 phy_uid_mask , int ( * run ) ( struct phy_device * ) ) ;
int phy_register_fixup_for_id ( const char * bus_id , int ( * run ) ( struct phy_device * ) ) ;
int phy_register_fixup_for_uid ( u32 phy_uid , u32 phy_uid_mask , int ( * run ) ( struct phy_device * ) ) ;
int phy_scan_fixups ( struct phy_device * phydev ) ;
int phy_init_eee ( struct phy_device * phydev , bool clk_stop_enable ) ;
int phy_get_eee_err ( struct phy_device * phydev ) ;
int phy_ethtool_set_eee ( struct phy_device * phydev , struct ethtool_eee * data ) ;
int phy_ethtool_get_eee ( struct phy_device * phydev , struct ethtool_eee * data ) ;
int __attribute__ ( ( __section__ ( ".init.text" ) ) ) __attribute__ ( ( __cold__ ) ) __attribute__ ( ( no_instrument_function ) ) mdio_bus_init ( void ) ;
void mdio_bus_exit ( void ) ;
extern void posix_acl_init ( struct posix_acl * , int ) ;
extern struct posix_acl * posix_acl_alloc ( int , gfp_t ) ;
extern int posix_acl_valid ( const struct posix_acl * ) ;
extern int posix_acl_permission ( struct inode * , const struct posix_acl * , int ) ;
extern struct posix_acl * posix_acl_from_mode ( umode_t , gfp_t ) ;
extern int posix_acl_equiv_mode ( const struct posix_acl * , umode_t * ) ;
extern int posix_acl_create ( struct posix_acl * * , gfp_t , umode_t * ) ;
extern int posix_acl_chmod ( struct posix_acl * * , gfp_t , umode_t ) ;
extern struct posix_acl * get_posix_acl ( struct inode * , int ) ;
extern int set_posix_acl ( struct inode * , int , struct posix_acl * ) ;
extern __attribute__ ( ( format ( printf , 3 , 4 ) ) ) void __quota_error ( struct super_block * sb , const char * func , const char * fmt , ... ) ;
void inode_add_rsv_space ( struct inode * inode , qsize_t number ) ;
void inode_claim_rsv_space ( struct inode * inode , qsize_t number ) ;
void inode_sub_rsv_space ( struct inode * inode , qsize_t number ) ;
void dquot_initialize ( struct inode * inode ) ;
void dquot_drop ( struct inode * inode ) ;
struct dquot * dqget ( struct super_block * sb , struct kqid qid ) ;
void dqput ( struct dquot * dquot ) ;
int dquot_scan_active ( struct super_block * sb , int ( * fn ) ( struct dquot * dquot , unsigned long priv ) , unsigned long priv ) ;
struct dquot * dquot_alloc ( struct super_block * sb , int type ) ;
void dquot_destroy ( struct dquot * dquot ) ;
int __dquot_alloc_space ( struct inode * inode , qsize_t number , int flags ) ;
void __dquot_free_space ( struct inode * inode , qsize_t number , int flags ) ;
int dquot_alloc_inode ( const struct inode * inode ) ;
int dquot_claim_space_nodirty ( struct inode * inode , qsize_t number ) ;
void dquot_free_inode ( const struct inode * inode ) ;
int dquot_disable ( struct super_block * sb , int type , unsigned int flags ) ;
int dquot_resume ( struct super_block * sb , int type ) ;
int dquot_commit ( struct dquot * dquot ) ;
int dquot_acquire ( struct dquot * dquot ) ;
int dquot_release ( struct dquot * dquot ) ;
int dquot_commit_info ( struct super_block * sb , int type ) ;
int dquot_mark_dquot_dirty ( struct dquot * dquot ) ;
int dquot_file_open ( struct inode * inode , struct file * file ) ;
int dquot_enable ( struct inode * inode , int type , int format_id , unsigned int flags ) ;
int dquot_quota_on ( struct super_block * sb , int type , int format_id , struct path * path ) ;
int dquot_quota_on_mount ( struct super_block * sb , char * qf_name , int format_id , int type ) ;
int dquot_quota_off ( struct super_block * sb , int type ) ;
int dquot_writeback_dquots ( struct super_block * sb , int type ) ;
int dquot_quota_sync ( struct super_block * sb , int type ) ;
int dquot_get_dqinfo ( struct super_block * sb , int type , struct if_dqinfo * ii ) ;
int dquot_set_dqinfo ( struct super_block * sb , int type , struct if_dqinfo * ii ) ;
int dquot_get_dqblk ( struct super_block * sb , struct kqid id , struct fs_disk_quota * di ) ;
int dquot_set_dqblk ( struct super_block * sb , struct kqid id , struct fs_disk_quota * di ) ;
int __dquot_transfer ( struct inode * inode , struct dquot * * transfer_to ) ;
int dquot_transfer ( struct inode * inode , struct iattr * iattr ) ;
struct mb_cache * mb_cache_create ( const char * , int ) ;
void mb_cache_shrink ( struct block_device * ) ;
void mb_cache_destroy ( struct mb_cache * ) ;
struct mb_cache_entry * mb_cache_entry_alloc ( struct mb_cache * , gfp_t ) ;
int mb_cache_entry_insert ( struct mb_cache_entry * , struct block_device * , sector_t , unsigned int ) ;
void mb_cache_entry_release ( struct mb_cache_entry * ) ;
void mb_cache_entry_free ( struct mb_cache_entry * ) ;
struct mb_cache_entry * mb_cache_entry_get ( struct mb_cache * , struct block_device * , sector_t ) ;
struct mb_cache_entry * mb_cache_entry_find_first ( struct mb_cache * cache , struct block_device * , unsigned int ) ;
struct mb_cache_entry * mb_cache_entry_find_next ( struct mb_cache_entry * , struct block_device * , unsigned int ) ;
void dm_error ( const char * message ) ;
int dm_set_device_limits ( struct dm_target * ti , struct dm_dev * dev , sector_t start , sector_t len , void * data ) ;
int dm_get_device ( struct dm_target * ti , const char * path , fmode_t mode , struct dm_dev * * result ) ;
void dm_put_device ( struct dm_target * ti , struct dm_dev * d ) ;
int dm_register_target ( struct target_type * t ) ;
void dm_unregister_target ( struct target_type * t ) ;
int dm_read_arg ( struct dm_arg * arg , struct dm_arg_set * arg_set , unsigned * value , char * * error ) ;
int dm_read_arg_group ( struct dm_arg * arg , struct dm_arg_set * arg_set , unsigned * num_args , char * * error ) ;
const char * dm_shift_arg ( struct dm_arg_set * as ) ;
void dm_consume_args ( struct dm_arg_set * as , unsigned num_args ) ;
int dm_create ( int minor , struct mapped_device * * md ) ;
struct mapped_device * dm_get_md ( dev_t dev ) ;
void dm_get ( struct mapped_device * md ) ;
void dm_put ( struct mapped_device * md ) ;
void dm_set_mdptr ( struct mapped_device * md , void * ptr ) ;
void * dm_get_mdptr ( struct mapped_device * md ) ;
int dm_suspend ( struct mapped_device * md , unsigned suspend_flags ) ;
int dm_resume ( struct mapped_device * md ) ;
uint32_t dm_get_event_nr ( struct mapped_device * md ) ;
int dm_wait_event ( struct mapped_device * md , int event_nr ) ;
uint32_t dm_next_uevent_seq ( struct mapped_device * md ) ;
void dm_uevent_add ( struct mapped_device * md , struct list_head * elist ) ;
const char * dm_device_name ( struct mapped_device * md ) ;
int dm_copy_name_and_uuid ( struct mapped_device * md , char * name , char * uuid ) ;
struct gendisk * dm_disk ( struct mapped_device * md ) ;
int dm_suspended ( struct dm_target * ti ) ;
int dm_noflush_suspending ( struct dm_target * ti ) ;
union map_info * dm_get_mapinfo ( struct bio * bio ) ;
union map_info * dm_get_rq_mapinfo ( struct request * rq ) ;
int dm_get_geometry ( struct mapped_device * md , struct hd_geometry * geo ) ;
int dm_set_geometry ( struct mapped_device * md , struct hd_geometry * geo ) ;
int dm_table_create ( struct dm_table * * result , fmode_t mode , unsigned num_targets , struct mapped_device * md ) ;
int dm_table_add_target ( struct dm_table * t , const char * type , sector_t start , sector_t len , char * params ) ;
void dm_table_add_target_callbacks ( struct dm_table * t , struct dm_target_callbacks * cb ) ;
int dm_table_complete ( struct dm_table * t ) ;
int dm_set_target_max_io_len ( struct dm_target * ti , sector_t len ) ;
struct dm_table * dm_get_live_table ( struct mapped_device * md ) ;
void dm_table_get ( struct dm_table * t ) ;
void dm_table_put ( struct dm_table * t ) ;
sector_t dm_table_get_size ( struct dm_table * t ) ;
unsigned int dm_table_get_num_targets ( struct dm_table * t ) ;
fmode_t dm_table_get_mode ( struct dm_table * t ) ;
struct mapped_device * dm_table_get_md ( struct dm_table * t ) ;
void dm_table_event ( struct dm_table * t ) ;
struct dm_table * dm_swap_table ( struct mapped_device * md , struct dm_table * t ) ;
void * dm_vcalloc ( unsigned long nmemb , unsigned long elem_size ) ;
void dm_dispatch_request ( struct request * rq ) ;
void dm_requeue_unmapped_request ( struct request * rq ) ;
void dm_kill_unmapped_request ( struct request * rq , int error ) ;
int dm_underlying_device_busy ( struct request_queue * q ) ;
