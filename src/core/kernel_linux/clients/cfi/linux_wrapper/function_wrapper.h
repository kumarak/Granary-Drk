/* Auto-generated wrappers. */
#define D(...) __VA_ARGS__ 

#ifndef KERN_ADDR_setup_ioapic_dest
#define APP_WRAPPER_FOR_setup_ioapic_dest
#endif
 
#ifndef APP_WRAPPER_FOR_setup_ioapic_dest
#define APP_WRAPPER_FOR_setup_ioapic_dest
FUNCTION_WRAPPER_VOID(setup_ioapic_dest, (), {
    kern_printk("setup_ioapic_dest is invoked.\n");
    PRE_WRAPPER_FUNC();
    setup_ioapic_dest();
    POST_WRAPPER_FUNC();
    kern_printk("setup_ioapic_dest returned.\n");
})
#endif


#ifndef KERN_ADDR_inet_twsk_deschedule
#define APP_WRAPPER_FOR_inet_twsk_deschedule
#endif
 
#ifndef APP_WRAPPER_FOR_inet_twsk_deschedule
#define APP_WRAPPER_FOR_inet_twsk_deschedule
FUNCTION_WRAPPER_VOID(inet_twsk_deschedule, (struct inet_timewait_sock *tw, struct inet_timewait_death_row *twdr), {
    WRAP_RECURSIVE(tw);
    TRACES_IF_WATCHPOINT(tw);
    SCAN_HEAD_FUNC(struct inet_timewait_sock)(*(TO_UNWATCHED_ADDRESS(tw)));
    WRAP_RECURSIVE(twdr);
    TRACES_IF_WATCHPOINT(twdr);
    SCAN_HEAD_FUNC(struct inet_timewait_death_row)(*(TO_UNWATCHED_ADDRESS(twdr)));
    kern_printk("inet_twsk_deschedule is invoked.\n");
    PRE_WRAPPER_FUNC(tw, twdr);
    inet_twsk_deschedule(tw, twdr);
    POST_WRAPPER_FUNC(tw, twdr);
    kern_printk("inet_twsk_deschedule returned.\n");
    TRACES_IF_WATCHPOINT(tw);
    SCAN_HEAD_FUNC(struct inet_timewait_sock)(*(TO_UNWATCHED_ADDRESS(tw)));
    TRACES_IF_WATCHPOINT(twdr);
    SCAN_HEAD_FUNC(struct inet_timewait_death_row)(*(TO_UNWATCHED_ADDRESS(twdr)));
})
#endif


#ifndef KERN_ADDR_pcibios_penalize_isa_irq
#define APP_WRAPPER_FOR_pcibios_penalize_isa_irq
#endif
 
#ifndef APP_WRAPPER_FOR_pcibios_penalize_isa_irq
#define APP_WRAPPER_FOR_pcibios_penalize_isa_irq
FUNCTION_WRAPPER_VOID(pcibios_penalize_isa_irq, (int irq, int active), {
    kern_printk("pcibios_penalize_isa_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq, active);
    pcibios_penalize_isa_irq(irq, active);
    POST_WRAPPER_FUNC(irq, active);
    kern_printk("pcibios_penalize_isa_irq returned.\n");
})
#endif


#ifndef KERN_ADDR_pcim_iomap_regions
#define APP_WRAPPER_FOR_pcim_iomap_regions
#endif
 
#ifndef APP_WRAPPER_FOR_pcim_iomap_regions
#define APP_WRAPPER_FOR_pcim_iomap_regions
FUNCTION_WRAPPER(pcim_iomap_regions, (struct pci_dev *pdev, int mask, const char *name), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("pcim_iomap_regions is invoked.\n");
    PRE_WRAPPER_FUNC(pdev, mask, name);
    int ret = pcim_iomap_regions(pdev, mask, name);
    POST_WRAPPER_FUNC(pdev, mask, name);
    kern_printk("pcim_iomap_regions returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR___iowrite32_copy
#define APP_WRAPPER_FOR___iowrite32_copy
#endif
 
#ifndef APP_WRAPPER_FOR___iowrite32_copy
#define APP_WRAPPER_FOR___iowrite32_copy
FUNCTION_WRAPPER_VOID(__iowrite32_copy, (void *to, const void *from, size_t count), {
    kern_printk("__iowrite32_copy is invoked.\n");
    PRE_WRAPPER_FUNC(to, from, count);
    __iowrite32_copy(to, from, count);
    POST_WRAPPER_FUNC(to, from, count);
    kern_printk("__iowrite32_copy returned.\n");
})
#endif


#ifndef KERN_ADDR_ata_cable_40wire
#define APP_WRAPPER_FOR_ata_cable_40wire
#endif
 
#ifndef APP_WRAPPER_FOR_ata_cable_40wire
#define APP_WRAPPER_FOR_ata_cable_40wire
FUNCTION_WRAPPER(ata_cable_40wire, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_cable_40wire is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    int ret = ata_cable_40wire(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_cable_40wire returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cgroup_taskset_cur_cgroup
#define APP_WRAPPER_FOR_cgroup_taskset_cur_cgroup
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_taskset_cur_cgroup
#define APP_WRAPPER_FOR_cgroup_taskset_cur_cgroup
FUNCTION_WRAPPER(cgroup_taskset_cur_cgroup, (struct cgroup_taskset *tset), {
    kern_printk("cgroup_taskset_cur_cgroup is invoked.\n");
    PRE_WRAPPER_FUNC(tset);
    struct cgroup *ret = cgroup_taskset_cur_cgroup(tset);
    POST_WRAPPER_FUNC(tset);
    kern_printk("cgroup_taskset_cur_cgroup returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_back_from_sleep
#define APP_WRAPPER_FOR_pci_back_from_sleep
#endif
 
#ifndef APP_WRAPPER_FOR_pci_back_from_sleep
#define APP_WRAPPER_FOR_pci_back_from_sleep
FUNCTION_WRAPPER(pci_back_from_sleep, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_back_from_sleep is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pci_back_from_sleep(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_back_from_sleep returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cleancache_register_ops
#define APP_WRAPPER_FOR_cleancache_register_ops
#endif
 
#ifndef APP_WRAPPER_FOR_cleancache_register_ops
#define APP_WRAPPER_FOR_cleancache_register_ops
FUNCTION_WRAPPER(cleancache_register_ops, (struct cleancache_ops *ops), {
    WRAP_RECURSIVE(ops);
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct cleancache_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    kern_printk("cleancache_register_ops is invoked.\n");
    PRE_WRAPPER_FUNC(ops);
    struct cleancache_ops ret = cleancache_register_ops(ops);
    POST_WRAPPER_FUNC(ops);
    kern_printk("cleancache_register_ops returned.\n");
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct cleancache_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___put_user_4
#define APP_WRAPPER_FOR___put_user_4
#endif
 
#ifndef APP_WRAPPER_FOR___put_user_4
#define APP_WRAPPER_FOR___put_user_4
FUNCTION_WRAPPER_VOID(__put_user_4, (), {
    kern_printk("__put_user_4 is invoked.\n");
    PRE_WRAPPER_FUNC();
    __put_user_4();
    POST_WRAPPER_FUNC();
    kern_printk("__put_user_4 returned.\n");
})
#endif


#ifndef KERN_ADDR_skb_free_datagram_locked
#define APP_WRAPPER_FOR_skb_free_datagram_locked
#endif
 
#ifndef APP_WRAPPER_FOR_skb_free_datagram_locked
#define APP_WRAPPER_FOR_skb_free_datagram_locked
FUNCTION_WRAPPER_VOID(skb_free_datagram_locked, (struct sock *sk, struct sk_buff *skb), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_free_datagram_locked is invoked.\n");
    PRE_WRAPPER_FUNC(sk, skb);
    skb_free_datagram_locked(sk, skb);
    POST_WRAPPER_FUNC(sk, skb);
    kern_printk("skb_free_datagram_locked returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_cpu_disable_common
#define APP_WRAPPER_FOR_cpu_disable_common
#endif
 
#ifndef APP_WRAPPER_FOR_cpu_disable_common
#define APP_WRAPPER_FOR_cpu_disable_common
FUNCTION_WRAPPER_VOID(cpu_disable_common, (), {
    kern_printk("cpu_disable_common is invoked.\n");
    PRE_WRAPPER_FUNC();
    cpu_disable_common();
    POST_WRAPPER_FUNC();
    kern_printk("cpu_disable_common returned.\n");
})
#endif


#ifndef KERN_ADDR_alternatives_smp_module_add
#define APP_WRAPPER_FOR_alternatives_smp_module_add
#endif
 
#ifndef APP_WRAPPER_FOR_alternatives_smp_module_add
#define APP_WRAPPER_FOR_alternatives_smp_module_add
FUNCTION_WRAPPER_VOID(alternatives_smp_module_add, (struct module *mod, char *name, void *locks, void *locks_end, void *text, void *text_end), {
    WRAP_RECURSIVE(mod);
    TRACES_IF_WATCHPOINT(mod);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(mod)));
    kern_printk("alternatives_smp_module_add is invoked.\n");
    PRE_WRAPPER_FUNC(mod, name, locks, locks_end, text, text_end);
    alternatives_smp_module_add(mod, name, locks, locks_end, text, text_end);
    POST_WRAPPER_FUNC(mod, name, locks, locks_end, text, text_end);
    kern_printk("alternatives_smp_module_add returned.\n");
    TRACES_IF_WATCHPOINT(mod);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(mod)));
})
#endif


#ifndef KERN_ADDR_synchronize_net
#define APP_WRAPPER_FOR_synchronize_net
#endif
 
#ifndef APP_WRAPPER_FOR_synchronize_net
#define APP_WRAPPER_FOR_synchronize_net
FUNCTION_WRAPPER_VOID(synchronize_net, (), {
    kern_printk("synchronize_net is invoked.\n");
    PRE_WRAPPER_FUNC();
    synchronize_net();
    POST_WRAPPER_FUNC();
    kern_printk("synchronize_net returned.\n");
})
#endif


#ifndef KERN_ADDR_proc_sched_set_task
#define APP_WRAPPER_FOR_proc_sched_set_task
#endif
 
#ifndef APP_WRAPPER_FOR_proc_sched_set_task
#define APP_WRAPPER_FOR_proc_sched_set_task
FUNCTION_WRAPPER_VOID(proc_sched_set_task, (struct task_struct *p), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("proc_sched_set_task is invoked.\n");
    PRE_WRAPPER_FUNC(p);
    proc_sched_set_task(p);
    POST_WRAPPER_FUNC(p);
    kern_printk("proc_sched_set_task returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
})
#endif


#ifndef KERN_ADDR___quota_error
#define APP_WRAPPER_FOR___quota_error
#endif
 
#ifndef APP_WRAPPER_FOR___quota_error
#define APP_WRAPPER_FOR___quota_error
FUNCTION_WRAPPER_VOID(__quota_error, (struct super_block *sb, const char *func, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    // TODO: variadic arguments
    kern_printk("__quota_error is invoked.\n");
    PRE_WRAPPER_FUNC(sb, func, fmt);
    __quota_error(sb, func, fmt);
    POST_WRAPPER_FUNC(sb, func, fmt);
    kern_printk("__quota_error returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt18
#define APP_WRAPPER_FOR_invalidate_interrupt18
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt18
#define APP_WRAPPER_FOR_invalidate_interrupt18
FUNCTION_WRAPPER_VOID(invalidate_interrupt18, (), {
    kern_printk("invalidate_interrupt18 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt18();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt18 returned.\n");
})
#endif


#ifndef KERN_ADDR_eth_type_trans
#define APP_WRAPPER_FOR_eth_type_trans
#endif
 
#ifndef APP_WRAPPER_FOR_eth_type_trans
#define APP_WRAPPER_FOR_eth_type_trans
FUNCTION_WRAPPER(eth_type_trans, (struct sk_buff *skb, struct net_device *dev), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("eth_type_trans is invoked.\n");
    PRE_WRAPPER_FUNC(skb, dev);
    __be16 ret = eth_type_trans(skb, dev);
    POST_WRAPPER_FUNC(skb, dev);
    kern_printk("eth_type_trans returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_map_lsapic
#define APP_WRAPPER_FOR_acpi_map_lsapic
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_map_lsapic
#define APP_WRAPPER_FOR_acpi_map_lsapic
FUNCTION_WRAPPER(acpi_map_lsapic, (acpi_handle handle, int *pcpu), {
    kern_printk("acpi_map_lsapic is invoked.\n");
    PRE_WRAPPER_FUNC(handle, pcpu);
    int ret = acpi_map_lsapic(handle, pcpu);
    POST_WRAPPER_FUNC(handle, pcpu);
    kern_printk("acpi_map_lsapic returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_numa_set_distance
#define APP_WRAPPER_FOR_numa_set_distance
#endif
 
#ifndef APP_WRAPPER_FOR_numa_set_distance
#define APP_WRAPPER_FOR_numa_set_distance
FUNCTION_WRAPPER_VOID(numa_set_distance, (int from, int to, int distance), {
    kern_printk("numa_set_distance is invoked.\n");
    PRE_WRAPPER_FUNC(from, to, distance);
    numa_set_distance(from, to, distance);
    POST_WRAPPER_FUNC(from, to, distance);
    kern_printk("numa_set_distance returned.\n");
})
#endif


#ifndef KERN_ADDR_crypto_destroy_tfm
#define APP_WRAPPER_FOR_crypto_destroy_tfm
#endif
 
#ifndef APP_WRAPPER_FOR_crypto_destroy_tfm
#define APP_WRAPPER_FOR_crypto_destroy_tfm
FUNCTION_WRAPPER_VOID(crypto_destroy_tfm, (void *mem, struct crypto_tfm *tfm), {
    WRAP_RECURSIVE(tfm);
    TRACES_IF_WATCHPOINT(tfm);
    SCAN_HEAD_FUNC(struct crypto_tfm)(*(TO_UNWATCHED_ADDRESS(tfm)));
    kern_printk("crypto_destroy_tfm is invoked.\n");
    PRE_WRAPPER_FUNC(mem, tfm);
    crypto_destroy_tfm(mem, tfm);
    POST_WRAPPER_FUNC(mem, tfm);
    kern_printk("crypto_destroy_tfm returned.\n");
    TRACES_IF_WATCHPOINT(tfm);
    SCAN_HEAD_FUNC(struct crypto_tfm)(*(TO_UNWATCHED_ADDRESS(tfm)));
})
#endif


#ifndef KERN_ADDR_nf_register_hooks
#define APP_WRAPPER_FOR_nf_register_hooks
#endif
 
#ifndef APP_WRAPPER_FOR_nf_register_hooks
#define APP_WRAPPER_FOR_nf_register_hooks
FUNCTION_WRAPPER(nf_register_hooks, (struct nf_hook_ops *reg, unsigned int n), {
    WRAP_RECURSIVE(reg);
    TRACES_IF_WATCHPOINT(reg);
    SCAN_HEAD_FUNC(struct nf_hook_ops)(*(TO_UNWATCHED_ADDRESS(reg)));
    kern_printk("nf_register_hooks is invoked.\n");
    PRE_WRAPPER_FUNC(reg, n);
    int ret = nf_register_hooks(reg, n);
    POST_WRAPPER_FUNC(reg, n);
    kern_printk("nf_register_hooks returned.\n");
    TRACES_IF_WATCHPOINT(reg);
    SCAN_HEAD_FUNC(struct nf_hook_ops)(*(TO_UNWATCHED_ADDRESS(reg)));
    return ret;
})
#endif


#ifndef KERN_ADDR_deactivate_locked_super
#define APP_WRAPPER_FOR_deactivate_locked_super
#endif
 
#ifndef APP_WRAPPER_FOR_deactivate_locked_super
#define APP_WRAPPER_FOR_deactivate_locked_super
FUNCTION_WRAPPER_VOID(deactivate_locked_super, (struct super_block *sb), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("deactivate_locked_super is invoked.\n");
    PRE_WRAPPER_FUNC(sb);
    deactivate_locked_super(sb);
    POST_WRAPPER_FUNC(sb);
    kern_printk("deactivate_locked_super returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
})
#endif


#ifndef KERN_ADDR_alloc_disk_node
#define APP_WRAPPER_FOR_alloc_disk_node
#endif
 
#ifndef APP_WRAPPER_FOR_alloc_disk_node
#define APP_WRAPPER_FOR_alloc_disk_node
FUNCTION_WRAPPER(alloc_disk_node, (int minors, int node_id), {
    kern_printk("alloc_disk_node is invoked.\n");
    PRE_WRAPPER_FUNC(minors, node_id);
    struct gendisk *ret = alloc_disk_node(minors, node_id);
    POST_WRAPPER_FUNC(minors, node_id);
    kern_printk("alloc_disk_node returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___put_user_8
#define APP_WRAPPER_FOR___put_user_8
#endif
 
#ifndef APP_WRAPPER_FOR___put_user_8
#define APP_WRAPPER_FOR___put_user_8
FUNCTION_WRAPPER_VOID(__put_user_8, (), {
    kern_printk("__put_user_8 is invoked.\n");
    PRE_WRAPPER_FUNC();
    __put_user_8();
    POST_WRAPPER_FUNC();
    kern_printk("__put_user_8 returned.\n");
})
#endif


#ifndef KERN_ADDR_vzalloc_node
#define APP_WRAPPER_FOR_vzalloc_node
#endif
 
#ifndef APP_WRAPPER_FOR_vzalloc_node
#define APP_WRAPPER_FOR_vzalloc_node
FUNCTION_WRAPPER(vzalloc_node, (unsigned long size, int node), {
    kern_printk("vzalloc_node is invoked.\n");
    PRE_WRAPPER_FUNC(size, node);
    void *ret = vzalloc_node(size, node);
    POST_WRAPPER_FUNC(size, node);
    kern_printk("vzalloc_node returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___symbol_put
#define APP_WRAPPER_FOR___symbol_put
#endif
 
#ifndef APP_WRAPPER_FOR___symbol_put
#define APP_WRAPPER_FOR___symbol_put
FUNCTION_WRAPPER_VOID(__symbol_put, (const char *symbol), {
    kern_printk("__symbol_put is invoked.\n");
    PRE_WRAPPER_FUNC(symbol);
    __symbol_put(symbol);
    POST_WRAPPER_FUNC(symbol);
    kern_printk("__symbol_put returned.\n");
})
#endif


#ifndef KERN_ADDR_keyring_search
#define APP_WRAPPER_FOR_keyring_search
#endif
 
#ifndef APP_WRAPPER_FOR_keyring_search
#define APP_WRAPPER_FOR_keyring_search
FUNCTION_WRAPPER(keyring_search, (key_ref_t keyring, struct key_type *type, const char *description), {
    kern_printk("keyring_search is invoked.\n");
    PRE_WRAPPER_FUNC(keyring, type, description);
    key_ref_t ret = keyring_search(keyring, type, description);
    POST_WRAPPER_FUNC(keyring, type, description);
    kern_printk("keyring_search returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_get_seconds
#define APP_WRAPPER_FOR_get_seconds
#endif
 
#ifndef APP_WRAPPER_FOR_get_seconds
#define APP_WRAPPER_FOR_get_seconds
FUNCTION_WRAPPER(get_seconds, (), {
    kern_printk("get_seconds is invoked.\n");
    PRE_WRAPPER_FUNC();
    long ret = get_seconds();
    POST_WRAPPER_FUNC();
    kern_printk("get_seconds returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_clear_all_latency_tracing
#define APP_WRAPPER_FOR_clear_all_latency_tracing
#endif
 
#ifndef APP_WRAPPER_FOR_clear_all_latency_tracing
#define APP_WRAPPER_FOR_clear_all_latency_tracing
FUNCTION_WRAPPER_VOID(clear_all_latency_tracing, (struct task_struct *p), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("clear_all_latency_tracing is invoked.\n");
    PRE_WRAPPER_FUNC(p);
    clear_all_latency_tracing(p);
    POST_WRAPPER_FUNC(p);
    kern_printk("clear_all_latency_tracing returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
})
#endif


#ifndef KERN_ADDR_blk_queue_free_tags
#define APP_WRAPPER_FOR_blk_queue_free_tags
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_free_tags
#define APP_WRAPPER_FOR_blk_queue_free_tags
FUNCTION_WRAPPER_VOID(blk_queue_free_tags, (struct request_queue *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_queue_free_tags is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    blk_queue_free_tags(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("blk_queue_free_tags returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_acpi_remove_table_handler
#define APP_WRAPPER_FOR_acpi_remove_table_handler
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_remove_table_handler
#define APP_WRAPPER_FOR_acpi_remove_table_handler
FUNCTION_WRAPPER(acpi_remove_table_handler, (acpi_tbl_handler handler), {
    WRAP_FUNCTION(handler);
    kern_printk("acpi_remove_table_handler is invoked.\n");
    PRE_WRAPPER_FUNC(handler);
    acpi_status ret = acpi_remove_table_handler(handler);
    POST_WRAPPER_FUNC(handler);
    kern_printk("acpi_remove_table_handler returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_rq_check_limits
#define APP_WRAPPER_FOR_blk_rq_check_limits
#endif
 
#ifndef APP_WRAPPER_FOR_blk_rq_check_limits
#define APP_WRAPPER_FOR_blk_rq_check_limits
FUNCTION_WRAPPER(blk_rq_check_limits, (struct request_queue *q, struct request *rq), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    WRAP_RECURSIVE(rq);
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    kern_printk("blk_rq_check_limits is invoked.\n");
    PRE_WRAPPER_FUNC(q, rq);
    int ret = blk_rq_check_limits(q, rq);
    POST_WRAPPER_FUNC(q, rq);
    kern_printk("blk_rq_check_limits returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_pm_qos_constraints_init
#define APP_WRAPPER_FOR_dev_pm_qos_constraints_init
#endif
 
#ifndef APP_WRAPPER_FOR_dev_pm_qos_constraints_init
#define APP_WRAPPER_FOR_dev_pm_qos_constraints_init
FUNCTION_WRAPPER_VOID(dev_pm_qos_constraints_init, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_pm_qos_constraints_init is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    dev_pm_qos_constraints_init(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_pm_qos_constraints_init returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR___jbd2_journal_abort_hard
#define APP_WRAPPER_FOR___jbd2_journal_abort_hard
#endif
 
#ifndef APP_WRAPPER_FOR___jbd2_journal_abort_hard
#define APP_WRAPPER_FOR___jbd2_journal_abort_hard
FUNCTION_WRAPPER_VOID(__jbd2_journal_abort_hard, (journal_t *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__jbd2_journal_abort_hard is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    __jbd2_journal_abort_hard(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__jbd2_journal_abort_hard returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_alloc_buffer_head
#define APP_WRAPPER_FOR_alloc_buffer_head
#endif
 
#ifndef APP_WRAPPER_FOR_alloc_buffer_head
#define APP_WRAPPER_FOR_alloc_buffer_head
FUNCTION_WRAPPER(alloc_buffer_head, (gfp_t gfp_flags), {
    kern_printk("alloc_buffer_head is invoked.\n");
    PRE_WRAPPER_FUNC(gfp_flags);
    struct buffer_head *ret = alloc_buffer_head(gfp_flags);
    POST_WRAPPER_FUNC(gfp_flags);
    kern_printk("alloc_buffer_head returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___next_cpu
#define APP_WRAPPER_FOR___next_cpu
#endif
 
#ifndef APP_WRAPPER_FOR___next_cpu
#define APP_WRAPPER_FOR___next_cpu
FUNCTION_WRAPPER(__next_cpu, (int n, const cpumask_t *srcp), {
    kern_printk("__next_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(n, srcp);
    int ret = __next_cpu(n, srcp);
    POST_WRAPPER_FUNC(n, srcp);
    kern_printk("__next_cpu returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_phy_get_eee_err
#define APP_WRAPPER_FOR_phy_get_eee_err
#endif
 
#ifndef APP_WRAPPER_FOR_phy_get_eee_err
#define APP_WRAPPER_FOR_phy_get_eee_err
FUNCTION_WRAPPER(phy_get_eee_err, (struct phy_device *phydev), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    kern_printk("phy_get_eee_err is invoked.\n");
    PRE_WRAPPER_FUNC(phydev);
    int ret = phy_get_eee_err(phydev);
    POST_WRAPPER_FUNC(phydev);
    kern_printk("phy_get_eee_err returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    return ret;
})
#endif


#ifndef KERN_ADDR___d_drop
#define APP_WRAPPER_FOR___d_drop
#endif
 
#ifndef APP_WRAPPER_FOR___d_drop
#define APP_WRAPPER_FOR___d_drop
FUNCTION_WRAPPER_VOID(__d_drop, (struct dentry *dentry), {
    WRAP_RECURSIVE(dentry);
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    kern_printk("__d_drop is invoked.\n");
    PRE_WRAPPER_FUNC(dentry);
    __d_drop(dentry);
    POST_WRAPPER_FUNC(dentry);
    kern_printk("__d_drop returned.\n");
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
})
#endif


#ifndef KERN_ADDR___alloc_pages_nodemask
#define APP_WRAPPER_FOR___alloc_pages_nodemask
#endif
 
#ifndef APP_WRAPPER_FOR___alloc_pages_nodemask
#define APP_WRAPPER_FOR___alloc_pages_nodemask
FUNCTION_WRAPPER(__alloc_pages_nodemask, (gfp_t gfp_mask, unsigned int order, struct zonelist *zonelist, nodemask_t *nodemask), {
    kern_printk("__alloc_pages_nodemask is invoked.\n");
    PRE_WRAPPER_FUNC(gfp_mask, order, zonelist, nodemask);
    struct page *ret = __alloc_pages_nodemask(gfp_mask, order, zonelist, nodemask);
    POST_WRAPPER_FUNC(gfp_mask, order, zonelist, nodemask);
    kern_printk("__alloc_pages_nodemask returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_get_override_irq
#define APP_WRAPPER_FOR_acpi_get_override_irq
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_override_irq
#define APP_WRAPPER_FOR_acpi_get_override_irq
FUNCTION_WRAPPER(acpi_get_override_irq, (u32 gsi, int *trigger, int *polarity), {
    kern_printk("acpi_get_override_irq is invoked.\n");
    PRE_WRAPPER_FUNC(gsi, trigger, polarity);
    int ret = acpi_get_override_irq(gsi, trigger, polarity);
    POST_WRAPPER_FUNC(gsi, trigger, polarity);
    kern_printk("acpi_get_override_irq returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sata_pmp_error_handler
#define APP_WRAPPER_FOR_sata_pmp_error_handler
#endif
 
#ifndef APP_WRAPPER_FOR_sata_pmp_error_handler
#define APP_WRAPPER_FOR_sata_pmp_error_handler
FUNCTION_WRAPPER_VOID(sata_pmp_error_handler, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("sata_pmp_error_handler is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    sata_pmp_error_handler(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("sata_pmp_error_handler returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_inode_owner_or_capable
#define APP_WRAPPER_FOR_inode_owner_or_capable
#endif
 
#ifndef APP_WRAPPER_FOR_inode_owner_or_capable
#define APP_WRAPPER_FOR_inode_owner_or_capable
FUNCTION_WRAPPER(inode_owner_or_capable, (const struct inode *inode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(const struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("inode_owner_or_capable is invoked.\n");
    PRE_WRAPPER_FUNC(inode);
    bool ret = inode_owner_or_capable(inode);
    POST_WRAPPER_FUNC(inode);
    kern_printk("inode_owner_or_capable returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(const struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    return ret;
})
#endif


#ifndef KERN_ADDR_refresh_cpu_vm_stats
#define APP_WRAPPER_FOR_refresh_cpu_vm_stats
#endif
 
#ifndef APP_WRAPPER_FOR_refresh_cpu_vm_stats
#define APP_WRAPPER_FOR_refresh_cpu_vm_stats
FUNCTION_WRAPPER_VOID(refresh_cpu_vm_stats, (int _arg1), {
    kern_printk("refresh_cpu_vm_stats is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    refresh_cpu_vm_stats(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("refresh_cpu_vm_stats returned.\n");
})
#endif


#ifndef KERN_ADDR_native_apic_wait_icr_idle
#define APP_WRAPPER_FOR_native_apic_wait_icr_idle
#endif
 
#ifndef APP_WRAPPER_FOR_native_apic_wait_icr_idle
#define APP_WRAPPER_FOR_native_apic_wait_icr_idle
FUNCTION_WRAPPER_VOID(native_apic_wait_icr_idle, (), {
    kern_printk("native_apic_wait_icr_idle is invoked.\n");
    PRE_WRAPPER_FUNC();
    native_apic_wait_icr_idle();
    POST_WRAPPER_FUNC();
    kern_printk("native_apic_wait_icr_idle returned.\n");
})
#endif


#ifndef KERN_ADDR_register_chrdev_region
#define APP_WRAPPER_FOR_register_chrdev_region
#endif
 
#ifndef APP_WRAPPER_FOR_register_chrdev_region
#define APP_WRAPPER_FOR_register_chrdev_region
FUNCTION_WRAPPER(register_chrdev_region, (dev_t _arg1, unsigned int _arg2, const char *_arg3), {
    kern_printk("register_chrdev_region is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = register_chrdev_region(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("register_chrdev_region returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_mempool_alloc
#define APP_WRAPPER_FOR_mempool_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_mempool_alloc
#define APP_WRAPPER_FOR_mempool_alloc
FUNCTION_WRAPPER(mempool_alloc, (mempool_t *pool, gfp_t gfp_mask), {
    WRAP_RECURSIVE(pool);
    TRACES_IF_WATCHPOINT(pool);
    SCAN_HEAD_FUNC(mempool_t)(*(TO_UNWATCHED_ADDRESS(pool)));
    kern_printk("mempool_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(pool, gfp_mask);
    void *ret = mempool_alloc(pool, gfp_mask);
    POST_WRAPPER_FUNC(pool, gfp_mask);
    kern_printk("mempool_alloc returned.\n");
    TRACES_IF_WATCHPOINT(pool);
    SCAN_HEAD_FUNC(mempool_t)(*(TO_UNWATCHED_ADDRESS(pool)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_seq_release_private
#define APP_WRAPPER_FOR_seq_release_private
#endif
 
#ifndef APP_WRAPPER_FOR_seq_release_private
#define APP_WRAPPER_FOR_seq_release_private
FUNCTION_WRAPPER(seq_release_private, (struct inode *_arg1, struct file *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("seq_release_private is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = seq_release_private(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("seq_release_private returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pm_qos_request
#define APP_WRAPPER_FOR_pm_qos_request
#endif
 
#ifndef APP_WRAPPER_FOR_pm_qos_request
#define APP_WRAPPER_FOR_pm_qos_request
FUNCTION_WRAPPER(pm_qos_request, (int pm_qos_class), {
    kern_printk("pm_qos_request is invoked.\n");
    PRE_WRAPPER_FUNC(pm_qos_class);
    int ret = pm_qos_request(pm_qos_class);
    POST_WRAPPER_FUNC(pm_qos_class);
    kern_printk("pm_qos_request returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_rq_map_sg
#define APP_WRAPPER_FOR_blk_rq_map_sg
#endif
 
#ifndef APP_WRAPPER_FOR_blk_rq_map_sg
#define APP_WRAPPER_FOR_blk_rq_map_sg
FUNCTION_WRAPPER(blk_rq_map_sg, (struct request_queue *_arg1, struct request *_arg2, struct scatterlist *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("blk_rq_map_sg is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = blk_rq_map_sg(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("blk_rq_map_sg returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_prop_descriptor_init
#define APP_WRAPPER_FOR_prop_descriptor_init
#endif
 
#ifndef APP_WRAPPER_FOR_prop_descriptor_init
#define APP_WRAPPER_FOR_prop_descriptor_init
FUNCTION_WRAPPER(prop_descriptor_init, (struct prop_descriptor *pd, int shift), {
    WRAP_RECURSIVE(pd);
    TRACES_IF_WATCHPOINT(pd);
    SCAN_HEAD_FUNC(struct prop_descriptor)(*(TO_UNWATCHED_ADDRESS(pd)));
    kern_printk("prop_descriptor_init is invoked.\n");
    PRE_WRAPPER_FUNC(pd, shift);
    int ret = prop_descriptor_init(pd, shift);
    POST_WRAPPER_FUNC(pd, shift);
    kern_printk("prop_descriptor_init returned.\n");
    TRACES_IF_WATCHPOINT(pd);
    SCAN_HEAD_FUNC(struct prop_descriptor)(*(TO_UNWATCHED_ADDRESS(pd)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_allocate
#define APP_WRAPPER_FOR_acpi_os_allocate
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_allocate
#define APP_WRAPPER_FOR_acpi_os_allocate
FUNCTION_WRAPPER(acpi_os_allocate, (acpi_size size), {
    kern_printk("acpi_os_allocate is invoked.\n");
    PRE_WRAPPER_FUNC(size);
    void *ret = acpi_os_allocate(size);
    POST_WRAPPER_FUNC(size);
    kern_printk("acpi_os_allocate returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_quota_send_warning
#define APP_WRAPPER_FOR_quota_send_warning
#endif
 
#ifndef APP_WRAPPER_FOR_quota_send_warning
#define APP_WRAPPER_FOR_quota_send_warning
FUNCTION_WRAPPER_VOID(quota_send_warning, (struct kqid qid, dev_t dev, const char warntype), {
    kern_printk("quota_send_warning is invoked.\n");
    PRE_WRAPPER_FUNC(qid, dev, warntype);
    quota_send_warning(qid, dev, warntype);
    POST_WRAPPER_FUNC(qid, dev, warntype);
    kern_printk("quota_send_warning returned.\n");
})
#endif


#ifndef KERN_ADDR_clocksource_change_rating
#define APP_WRAPPER_FOR_clocksource_change_rating
#endif
 
#ifndef APP_WRAPPER_FOR_clocksource_change_rating
#define APP_WRAPPER_FOR_clocksource_change_rating
FUNCTION_WRAPPER_VOID(clocksource_change_rating, (struct clocksource *cs, int rating), {
    WRAP_RECURSIVE(cs);
    TRACES_IF_WATCHPOINT(cs);
    SCAN_HEAD_FUNC(struct clocksource)(*(TO_UNWATCHED_ADDRESS(cs)));
    kern_printk("clocksource_change_rating is invoked.\n");
    PRE_WRAPPER_FUNC(cs, rating);
    clocksource_change_rating(cs, rating);
    POST_WRAPPER_FUNC(cs, rating);
    kern_printk("clocksource_change_rating returned.\n");
    TRACES_IF_WATCHPOINT(cs);
    SCAN_HEAD_FUNC(struct clocksource)(*(TO_UNWATCHED_ADDRESS(cs)));
})
#endif


#ifndef KERN_ADDR_tracepoint_probe_update_all
#define APP_WRAPPER_FOR_tracepoint_probe_update_all
#endif
 
#ifndef APP_WRAPPER_FOR_tracepoint_probe_update_all
#define APP_WRAPPER_FOR_tracepoint_probe_update_all
FUNCTION_WRAPPER_VOID(tracepoint_probe_update_all, (), {
    kern_printk("tracepoint_probe_update_all is invoked.\n");
    PRE_WRAPPER_FUNC();
    tracepoint_probe_update_all();
    POST_WRAPPER_FUNC();
    kern_printk("tracepoint_probe_update_all returned.\n");
})
#endif


#ifndef KERN_ADDR_cap_task_setnice
#define APP_WRAPPER_FOR_cap_task_setnice
#endif
 
#ifndef APP_WRAPPER_FOR_cap_task_setnice
#define APP_WRAPPER_FOR_cap_task_setnice
FUNCTION_WRAPPER(cap_task_setnice, (struct task_struct *p, int nice), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("cap_task_setnice is invoked.\n");
    PRE_WRAPPER_FUNC(p, nice);
    int ret = cap_task_setnice(p, nice);
    POST_WRAPPER_FUNC(p, nice);
    kern_printk("cap_task_setnice returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_disable
#define APP_WRAPPER_FOR_acpi_disable
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_disable
#define APP_WRAPPER_FOR_acpi_disable
FUNCTION_WRAPPER(acpi_disable, (), {
    kern_printk("acpi_disable is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_status ret = acpi_disable();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_disable returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___isolate_lru_page
#define APP_WRAPPER_FOR___isolate_lru_page
#endif
 
#ifndef APP_WRAPPER_FOR___isolate_lru_page
#define APP_WRAPPER_FOR___isolate_lru_page
FUNCTION_WRAPPER(__isolate_lru_page, (struct page *page, isolate_mode_t mode), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("__isolate_lru_page is invoked.\n");
    PRE_WRAPPER_FUNC(page, mode);
    int ret = __isolate_lru_page(page, mode);
    POST_WRAPPER_FUNC(page, mode);
    kern_printk("__isolate_lru_page returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_put_io_context
#define APP_WRAPPER_FOR_put_io_context
#endif
 
#ifndef APP_WRAPPER_FOR_put_io_context
#define APP_WRAPPER_FOR_put_io_context
FUNCTION_WRAPPER_VOID(put_io_context, (struct io_context *ioc), {
    WRAP_RECURSIVE(ioc);
    TRACES_IF_WATCHPOINT(ioc);
    SCAN_HEAD_FUNC(struct io_context)(*(TO_UNWATCHED_ADDRESS(ioc)));
    kern_printk("put_io_context is invoked.\n");
    PRE_WRAPPER_FUNC(ioc);
    put_io_context(ioc);
    POST_WRAPPER_FUNC(ioc);
    kern_printk("put_io_context returned.\n");
    TRACES_IF_WATCHPOINT(ioc);
    SCAN_HEAD_FUNC(struct io_context)(*(TO_UNWATCHED_ADDRESS(ioc)));
})
#endif


#ifndef KERN_ADDR_sysenter_setup
#define APP_WRAPPER_FOR_sysenter_setup
#endif
 
#ifndef APP_WRAPPER_FOR_sysenter_setup
#define APP_WRAPPER_FOR_sysenter_setup
FUNCTION_WRAPPER(sysenter_setup, (), {
    kern_printk("sysenter_setup is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = sysenter_setup();
    POST_WRAPPER_FUNC();
    kern_printk("sysenter_setup returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_twsk_schedule
#define APP_WRAPPER_FOR_inet_twsk_schedule
#endif
 
#ifndef APP_WRAPPER_FOR_inet_twsk_schedule
#define APP_WRAPPER_FOR_inet_twsk_schedule
FUNCTION_WRAPPER_VOID(inet_twsk_schedule, (struct inet_timewait_sock *tw, struct inet_timewait_death_row *twdr, const int timeo, const int timewait_len), {
    WRAP_RECURSIVE(tw);
    TRACES_IF_WATCHPOINT(tw);
    SCAN_HEAD_FUNC(struct inet_timewait_sock)(*(TO_UNWATCHED_ADDRESS(tw)));
    WRAP_RECURSIVE(twdr);
    TRACES_IF_WATCHPOINT(twdr);
    SCAN_HEAD_FUNC(struct inet_timewait_death_row)(*(TO_UNWATCHED_ADDRESS(twdr)));
    kern_printk("inet_twsk_schedule is invoked.\n");
    PRE_WRAPPER_FUNC(tw, twdr, timeo, timewait_len);
    inet_twsk_schedule(tw, twdr, timeo, timewait_len);
    POST_WRAPPER_FUNC(tw, twdr, timeo, timewait_len);
    kern_printk("inet_twsk_schedule returned.\n");
    TRACES_IF_WATCHPOINT(tw);
    SCAN_HEAD_FUNC(struct inet_timewait_sock)(*(TO_UNWATCHED_ADDRESS(tw)));
    TRACES_IF_WATCHPOINT(twdr);
    SCAN_HEAD_FUNC(struct inet_timewait_death_row)(*(TO_UNWATCHED_ADDRESS(twdr)));
})
#endif


#ifndef KERN_ADDR_profile_task_exit
#define APP_WRAPPER_FOR_profile_task_exit
#endif
 
#ifndef APP_WRAPPER_FOR_profile_task_exit
#define APP_WRAPPER_FOR_profile_task_exit
FUNCTION_WRAPPER_VOID(profile_task_exit, (struct task_struct *task), {
    WRAP_RECURSIVE(task);
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    kern_printk("profile_task_exit is invoked.\n");
    PRE_WRAPPER_FUNC(task);
    profile_task_exit(task);
    POST_WRAPPER_FUNC(task);
    kern_printk("profile_task_exit returned.\n");
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
})
#endif


#ifndef KERN_ADDR_transfer_pid
#define APP_WRAPPER_FOR_transfer_pid
#endif
 
#ifndef APP_WRAPPER_FOR_transfer_pid
#define APP_WRAPPER_FOR_transfer_pid
FUNCTION_WRAPPER_VOID(transfer_pid, (struct task_struct *old, struct task_struct *new_, enum pid_type _arg1), {
    WRAP_RECURSIVE(old);
    TRACES_IF_WATCHPOINT(old);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(old)));
    WRAP_RECURSIVE(new_);
    TRACES_IF_WATCHPOINT(new_);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(new_)));
    kern_printk("transfer_pid is invoked.\n");
    PRE_WRAPPER_FUNC(old, new_, _arg1);
    transfer_pid(old, new_, _arg1);
    POST_WRAPPER_FUNC(old, new_, _arg1);
    kern_printk("transfer_pid returned.\n");
    TRACES_IF_WATCHPOINT(old);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(old)));
    TRACES_IF_WATCHPOINT(new_);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(new_)));
})
#endif


#ifndef KERN_ADDR_neigh_table_init
#define APP_WRAPPER_FOR_neigh_table_init
#endif
 
#ifndef APP_WRAPPER_FOR_neigh_table_init
#define APP_WRAPPER_FOR_neigh_table_init
FUNCTION_WRAPPER_VOID(neigh_table_init, (struct neigh_table *tbl), {
    WRAP_RECURSIVE(tbl);
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    kern_printk("neigh_table_init is invoked.\n");
    PRE_WRAPPER_FUNC(tbl);
    neigh_table_init(tbl);
    POST_WRAPPER_FUNC(tbl);
    kern_printk("neigh_table_init returned.\n");
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
})
#endif


#ifndef KERN_ADDR_seq_hlist_start_head
#define APP_WRAPPER_FOR_seq_hlist_start_head
#endif
 
#ifndef APP_WRAPPER_FOR_seq_hlist_start_head
#define APP_WRAPPER_FOR_seq_hlist_start_head
FUNCTION_WRAPPER(seq_hlist_start_head, (struct hlist_head *head, loff_t pos), {
    kern_printk("seq_hlist_start_head is invoked.\n");
    PRE_WRAPPER_FUNC(head, pos);
    struct hlist_node *ret = seq_hlist_start_head(head, pos);
    POST_WRAPPER_FUNC(head, pos);
    kern_printk("seq_hlist_start_head returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_mb_cache_entry_insert
#define APP_WRAPPER_FOR_mb_cache_entry_insert
#endif
 
#ifndef APP_WRAPPER_FOR_mb_cache_entry_insert
#define APP_WRAPPER_FOR_mb_cache_entry_insert
FUNCTION_WRAPPER(mb_cache_entry_insert, (struct mb_cache_entry *_arg1, struct block_device *_arg2, sector_t _arg3, unsigned int _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mb_cache_entry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("mb_cache_entry_insert is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = mb_cache_entry_insert(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("mb_cache_entry_insert returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mb_cache_entry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_exit_signals
#define APP_WRAPPER_FOR_exit_signals
#endif
 
#ifndef APP_WRAPPER_FOR_exit_signals
#define APP_WRAPPER_FOR_exit_signals
FUNCTION_WRAPPER_VOID(exit_signals, (struct task_struct *tsk), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("exit_signals is invoked.\n");
    PRE_WRAPPER_FUNC(tsk);
    exit_signals(tsk);
    POST_WRAPPER_FUNC(tsk);
    kern_printk("exit_signals returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
})
#endif


#ifndef KERN_ADDR___dst_destroy_metrics_generic
#define APP_WRAPPER_FOR___dst_destroy_metrics_generic
#endif
 
#ifndef APP_WRAPPER_FOR___dst_destroy_metrics_generic
#define APP_WRAPPER_FOR___dst_destroy_metrics_generic
FUNCTION_WRAPPER_VOID(__dst_destroy_metrics_generic, (struct dst_entry *dst, unsigned long old), {
    WRAP_RECURSIVE(dst);
    TRACES_IF_WATCHPOINT(dst);
    SCAN_HEAD_FUNC(struct dst_entry)(*(TO_UNWATCHED_ADDRESS(dst)));
    kern_printk("__dst_destroy_metrics_generic is invoked.\n");
    PRE_WRAPPER_FUNC(dst, old);
    __dst_destroy_metrics_generic(dst, old);
    POST_WRAPPER_FUNC(dst, old);
    kern_printk("__dst_destroy_metrics_generic returned.\n");
    TRACES_IF_WATCHPOINT(dst);
    SCAN_HEAD_FUNC(struct dst_entry)(*(TO_UNWATCHED_ADDRESS(dst)));
})
#endif


#ifndef KERN_ADDR_sock_i_uid
#define APP_WRAPPER_FOR_sock_i_uid
#endif
 
#ifndef APP_WRAPPER_FOR_sock_i_uid
#define APP_WRAPPER_FOR_sock_i_uid
FUNCTION_WRAPPER(sock_i_uid, (struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sock_i_uid is invoked.\n");
    PRE_WRAPPER_FUNC(sk);
    kuid_t ret = sock_i_uid(sk);
    POST_WRAPPER_FUNC(sk);
    kern_printk("sock_i_uid returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sched_init
#define APP_WRAPPER_FOR_sched_init
#endif
 
#ifndef APP_WRAPPER_FOR_sched_init
#define APP_WRAPPER_FOR_sched_init
FUNCTION_WRAPPER_VOID(sched_init, (), {
    kern_printk("sched_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    sched_init();
    POST_WRAPPER_FUNC();
    kern_printk("sched_init returned.\n");
})
#endif


#ifndef KERN_ADDR_kstrtou8_from_user
#define APP_WRAPPER_FOR_kstrtou8_from_user
#endif
 
#ifndef APP_WRAPPER_FOR_kstrtou8_from_user
#define APP_WRAPPER_FOR_kstrtou8_from_user
FUNCTION_WRAPPER(kstrtou8_from_user, (const char *s, size_t count, unsigned int base, u8 *res), {
    kern_printk("kstrtou8_from_user is invoked.\n");
    PRE_WRAPPER_FUNC(s, count, base, res);
    int ret = kstrtou8_from_user(s, count, base, res);
    POST_WRAPPER_FUNC(s, count, base, res);
    kern_printk("kstrtou8_from_user returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_writeback_inodes_sb_nr
#define APP_WRAPPER_FOR_writeback_inodes_sb_nr
#endif
 
#ifndef APP_WRAPPER_FOR_writeback_inodes_sb_nr
#define APP_WRAPPER_FOR_writeback_inodes_sb_nr
FUNCTION_WRAPPER_VOID(writeback_inodes_sb_nr, (struct super_block *_arg1, unsigned long nr, enum wb_reason reason), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("writeback_inodes_sb_nr is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, nr, reason);
    writeback_inodes_sb_nr(_arg1, nr, reason);
    POST_WRAPPER_FUNC(_arg1, nr, reason);
    kern_printk("writeback_inodes_sb_nr returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_driver_find_device
#define APP_WRAPPER_FOR_driver_find_device
#endif
 
#ifndef APP_WRAPPER_FOR_driver_find_device
#define APP_WRAPPER_FOR_driver_find_device
FUNCTION_WRAPPER(driver_find_device, (struct device_driver *drv, struct device *start, void *data, int (*match)(struct device *, void *)), {
    WRAP_RECURSIVE(drv);
    TRACES_IF_WATCHPOINT(drv);
    SCAN_HEAD_FUNC(struct device_driver)(*(TO_UNWATCHED_ADDRESS(drv)));
    WRAP_RECURSIVE(start);
    TRACES_IF_WATCHPOINT(start);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(start)));
    WRAP_FUNCTION(match);
    kern_printk("driver_find_device is invoked.\n");
    PRE_WRAPPER_FUNC(drv, start, data, match);
    struct device *ret = driver_find_device(drv, start, data, match);
    POST_WRAPPER_FUNC(drv, start, data, match);
    kern_printk("driver_find_device returned.\n");
    TRACES_IF_WATCHPOINT(drv);
    SCAN_HEAD_FUNC(struct device_driver)(*(TO_UNWATCHED_ADDRESS(drv)));
    TRACES_IF_WATCHPOINT(start);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(start)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_get_backing_dev_info
#define APP_WRAPPER_FOR_blk_get_backing_dev_info
#endif
 
#ifndef APP_WRAPPER_FOR_blk_get_backing_dev_info
#define APP_WRAPPER_FOR_blk_get_backing_dev_info
FUNCTION_WRAPPER(blk_get_backing_dev_info, (struct block_device *bdev), {
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    kern_printk("blk_get_backing_dev_info is invoked.\n");
    PRE_WRAPPER_FUNC(bdev);
    struct backing_dev_info *ret = blk_get_backing_dev_info(bdev);
    POST_WRAPPER_FUNC(bdev);
    kern_printk("blk_get_backing_dev_info returned.\n");
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_vm_unmap_aliases
#define APP_WRAPPER_FOR_vm_unmap_aliases
#endif
 
#ifndef APP_WRAPPER_FOR_vm_unmap_aliases
#define APP_WRAPPER_FOR_vm_unmap_aliases
FUNCTION_WRAPPER_VOID(vm_unmap_aliases, (), {
    kern_printk("vm_unmap_aliases is invoked.\n");
    PRE_WRAPPER_FUNC();
    vm_unmap_aliases();
    POST_WRAPPER_FUNC();
    kern_printk("vm_unmap_aliases returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_subsys_runtime_suspend
#define APP_WRAPPER_FOR_acpi_subsys_runtime_suspend
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_subsys_runtime_suspend
#define APP_WRAPPER_FOR_acpi_subsys_runtime_suspend
FUNCTION_WRAPPER(acpi_subsys_runtime_suspend, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("acpi_subsys_runtime_suspend is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = acpi_subsys_runtime_suspend(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("acpi_subsys_runtime_suspend returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_gc_noop
#define APP_WRAPPER_FOR_irq_gc_noop
#endif
 
#ifndef APP_WRAPPER_FOR_irq_gc_noop
#define APP_WRAPPER_FOR_irq_gc_noop
FUNCTION_WRAPPER_VOID(irq_gc_noop, (struct irq_data *d), {
    WRAP_RECURSIVE(d);
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(d)));
    kern_printk("irq_gc_noop is invoked.\n");
    PRE_WRAPPER_FUNC(d);
    irq_gc_noop(d);
    POST_WRAPPER_FUNC(d);
    kern_printk("irq_gc_noop returned.\n");
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(d)));
})
#endif


#ifndef KERN_ADDR_acpi_os_open_directory
#define APP_WRAPPER_FOR_acpi_os_open_directory
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_open_directory
#define APP_WRAPPER_FOR_acpi_os_open_directory
FUNCTION_WRAPPER(acpi_os_open_directory, (char *pathname, char *wildcard_spec, char requested_file_type), {
    kern_printk("acpi_os_open_directory is invoked.\n");
    PRE_WRAPPER_FUNC(pathname, wildcard_spec, requested_file_type);
    void *ret = acpi_os_open_directory(pathname, wildcard_spec, requested_file_type);
    POST_WRAPPER_FUNC(pathname, wildcard_spec, requested_file_type);
    kern_printk("acpi_os_open_directory returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___udelay
#define APP_WRAPPER_FOR___udelay
#endif
 
#ifndef APP_WRAPPER_FOR___udelay
#define APP_WRAPPER_FOR___udelay
FUNCTION_WRAPPER_VOID(__udelay, (unsigned long usecs), {
    kern_printk("__udelay is invoked.\n");
    PRE_WRAPPER_FUNC(usecs);
    __udelay(usecs);
    POST_WRAPPER_FUNC(usecs);
    kern_printk("__udelay returned.\n");
})
#endif


#ifndef KERN_ADDR_down_trylock
#define APP_WRAPPER_FOR_down_trylock
#endif
 
#ifndef APP_WRAPPER_FOR_down_trylock
#define APP_WRAPPER_FOR_down_trylock
FUNCTION_WRAPPER(down_trylock, (struct semaphore *sem), {
    kern_printk("down_trylock is invoked.\n");
    PRE_WRAPPER_FUNC(sem);
    int ret = down_trylock(sem);
    POST_WRAPPER_FUNC(sem);
    kern_printk("down_trylock returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_cancel_dirty_page
#define APP_WRAPPER_FOR_cancel_dirty_page
#endif
 
#ifndef APP_WRAPPER_FOR_cancel_dirty_page
#define APP_WRAPPER_FOR_cancel_dirty_page
FUNCTION_WRAPPER_VOID(cancel_dirty_page, (struct page *page, unsigned int account_size), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("cancel_dirty_page is invoked.\n");
    PRE_WRAPPER_FUNC(page, account_size);
    cancel_dirty_page(page, account_size);
    POST_WRAPPER_FUNC(page, account_size);
    kern_printk("cancel_dirty_page returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_gen_estimator_active
#define APP_WRAPPER_FOR_gen_estimator_active
#endif
 
#ifndef APP_WRAPPER_FOR_gen_estimator_active
#define APP_WRAPPER_FOR_gen_estimator_active
FUNCTION_WRAPPER(gen_estimator_active, (const struct gnet_stats_basic_packed *bstats, const struct gnet_stats_rate_est *rate_est), {
    kern_printk("gen_estimator_active is invoked.\n");
    PRE_WRAPPER_FUNC(bstats, rate_est);
    bool ret = gen_estimator_active(bstats, rate_est);
    POST_WRAPPER_FUNC(bstats, rate_est);
    kern_printk("gen_estimator_active returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_destroy_slot
#define APP_WRAPPER_FOR_pci_destroy_slot
#endif
 
#ifndef APP_WRAPPER_FOR_pci_destroy_slot
#define APP_WRAPPER_FOR_pci_destroy_slot
FUNCTION_WRAPPER_VOID(pci_destroy_slot, (struct pci_slot *slot), {
    WRAP_RECURSIVE(slot);
    TRACES_IF_WATCHPOINT(slot);
    SCAN_HEAD_FUNC(struct pci_slot)(*(TO_UNWATCHED_ADDRESS(slot)));
    kern_printk("pci_destroy_slot is invoked.\n");
    PRE_WRAPPER_FUNC(slot);
    pci_destroy_slot(slot);
    POST_WRAPPER_FUNC(slot);
    kern_printk("pci_destroy_slot returned.\n");
    TRACES_IF_WATCHPOINT(slot);
    SCAN_HEAD_FUNC(struct pci_slot)(*(TO_UNWATCHED_ADDRESS(slot)));
})
#endif


#ifndef KERN_ADDR___rt_mutex_init
#define APP_WRAPPER_FOR___rt_mutex_init
#endif
 
#ifndef APP_WRAPPER_FOR___rt_mutex_init
#define APP_WRAPPER_FOR___rt_mutex_init
FUNCTION_WRAPPER_VOID(__rt_mutex_init, (struct rt_mutex *lock, const char *name), {
    WRAP_RECURSIVE(lock);
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct rt_mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
    kern_printk("__rt_mutex_init is invoked.\n");
    PRE_WRAPPER_FUNC(lock, name);
    __rt_mutex_init(lock, name);
    POST_WRAPPER_FUNC(lock, name);
    kern_printk("__rt_mutex_init returned.\n");
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct rt_mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
})
#endif


#ifndef KERN_ADDR_napi_complete
#define APP_WRAPPER_FOR_napi_complete
#endif
 
#ifndef APP_WRAPPER_FOR_napi_complete
#define APP_WRAPPER_FOR_napi_complete
FUNCTION_WRAPPER_VOID(napi_complete, (struct napi_struct *n), {
    WRAP_RECURSIVE(n);
    TRACES_IF_WATCHPOINT(n);
    SCAN_HEAD_FUNC(struct napi_struct)(*(TO_UNWATCHED_ADDRESS(n)));
    kern_printk("napi_complete is invoked.\n");
    PRE_WRAPPER_FUNC(n);
    napi_complete(n);
    POST_WRAPPER_FUNC(n);
    kern_printk("napi_complete returned.\n");
    TRACES_IF_WATCHPOINT(n);
    SCAN_HEAD_FUNC(struct napi_struct)(*(TO_UNWATCHED_ADDRESS(n)));
})
#endif


#ifndef KERN_ADDR_scsi_cmd_ioctl
#define APP_WRAPPER_FOR_scsi_cmd_ioctl
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_cmd_ioctl
#define APP_WRAPPER_FOR_scsi_cmd_ioctl
FUNCTION_WRAPPER(scsi_cmd_ioctl, (struct request_queue *_arg1, struct gendisk *_arg2, fmode_t _arg3, unsigned int _arg4, void *_arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("scsi_cmd_ioctl is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = scsi_cmd_ioctl(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("scsi_cmd_ioctl returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_set_online_page_callback
#define APP_WRAPPER_FOR_set_online_page_callback
#endif
 
#ifndef APP_WRAPPER_FOR_set_online_page_callback
#define APP_WRAPPER_FOR_set_online_page_callback
FUNCTION_WRAPPER(set_online_page_callback, (online_page_callback_t callback), {
    WRAP_FUNCTION(callback);
    kern_printk("set_online_page_callback is invoked.\n");
    PRE_WRAPPER_FUNC(callback);
    int ret = set_online_page_callback(callback);
    POST_WRAPPER_FUNC(callback);
    kern_printk("set_online_page_callback returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_css_id
#define APP_WRAPPER_FOR_css_id
#endif
 
#ifndef APP_WRAPPER_FOR_css_id
#define APP_WRAPPER_FOR_css_id
FUNCTION_WRAPPER(css_id, (struct cgroup_subsys_state *css), {
    WRAP_RECURSIVE(css);
    TRACES_IF_WATCHPOINT(css);
    SCAN_HEAD_FUNC(struct cgroup_subsys_state)(*(TO_UNWATCHED_ADDRESS(css)));
    kern_printk("css_id is invoked.\n");
    PRE_WRAPPER_FUNC(css);
    short ret = css_id(css);
    POST_WRAPPER_FUNC(css);
    kern_printk("css_id returned.\n");
    TRACES_IF_WATCHPOINT(css);
    SCAN_HEAD_FUNC(struct cgroup_subsys_state)(*(TO_UNWATCHED_ADDRESS(css)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_getsockopt
#define APP_WRAPPER_FOR_compat_sys_getsockopt
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_getsockopt
#define APP_WRAPPER_FOR_compat_sys_getsockopt
FUNCTION_WRAPPER(compat_sys_getsockopt, (int fd, int level, int optname, char *optval, int *optlen), {
    kern_printk("compat_sys_getsockopt is invoked.\n");
    PRE_WRAPPER_FUNC(fd, level, optname, optval, optlen);
    long ret = compat_sys_getsockopt(fd, level, optname, optval, optlen);
    POST_WRAPPER_FUNC(fd, level, optname, optval, optlen);
    kern_printk("compat_sys_getsockopt returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_filemap_fdatawrite_range
#define APP_WRAPPER_FOR_filemap_fdatawrite_range
#endif
 
#ifndef APP_WRAPPER_FOR_filemap_fdatawrite_range
#define APP_WRAPPER_FOR_filemap_fdatawrite_range
FUNCTION_WRAPPER(filemap_fdatawrite_range, (struct address_space *mapping, loff_t start, loff_t end), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("filemap_fdatawrite_range is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, start, end);
    int ret = filemap_fdatawrite_range(mapping, start, end);
    POST_WRAPPER_FUNC(mapping, start, end);
    kern_printk("filemap_fdatawrite_range returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bus_unregister
#define APP_WRAPPER_FOR_bus_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_bus_unregister
#define APP_WRAPPER_FOR_bus_unregister
FUNCTION_WRAPPER_VOID(bus_unregister, (struct bus_type *bus), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("bus_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(bus);
    bus_unregister(bus);
    POST_WRAPPER_FUNC(bus);
    kern_printk("bus_unregister returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
})
#endif


#ifndef KERN_ADDR_xapic_icr_write
#define APP_WRAPPER_FOR_xapic_icr_write
#endif
 
#ifndef APP_WRAPPER_FOR_xapic_icr_write
#define APP_WRAPPER_FOR_xapic_icr_write
FUNCTION_WRAPPER_VOID(xapic_icr_write, (u32 _arg1, u32 _arg2), {
    kern_printk("xapic_icr_write is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    xapic_icr_write(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("xapic_icr_write returned.\n");
})
#endif


#ifndef KERN_ADDR_call_srcu
#define APP_WRAPPER_FOR_call_srcu
#endif
 
#ifndef APP_WRAPPER_FOR_call_srcu
#define APP_WRAPPER_FOR_call_srcu
FUNCTION_WRAPPER_VOID(call_srcu, (struct srcu_struct *sp, struct callback_head *head, void (*func)(struct callback_head *)), {
    WRAP_RECURSIVE(sp);
    TRACES_IF_WATCHPOINT(sp);
    SCAN_HEAD_FUNC(struct srcu_struct)(*(TO_UNWATCHED_ADDRESS(sp)));
    WRAP_RECURSIVE(head);
    TRACES_IF_WATCHPOINT(head);
    SCAN_HEAD_FUNC(struct callback_head)(*(TO_UNWATCHED_ADDRESS(head)));
    WRAP_FUNCTION(func);
    kern_printk("call_srcu is invoked.\n");
    PRE_WRAPPER_FUNC(sp, head, func);
    call_srcu(sp, head, func);
    POST_WRAPPER_FUNC(sp, head, func);
    kern_printk("call_srcu returned.\n");
    TRACES_IF_WATCHPOINT(sp);
    SCAN_HEAD_FUNC(struct srcu_struct)(*(TO_UNWATCHED_ADDRESS(sp)));
    TRACES_IF_WATCHPOINT(head);
    SCAN_HEAD_FUNC(struct callback_head)(*(TO_UNWATCHED_ADDRESS(head)));
})
#endif


#ifndef KERN_ADDR_pcpu_page_first_chunk
#define APP_WRAPPER_FOR_pcpu_page_first_chunk
#endif
 
#ifndef APP_WRAPPER_FOR_pcpu_page_first_chunk
#define APP_WRAPPER_FOR_pcpu_page_first_chunk
FUNCTION_WRAPPER(pcpu_page_first_chunk, (size_t reserved_size, pcpu_fc_alloc_fn_t alloc_fn, pcpu_fc_free_fn_t free_fn, pcpu_fc_populate_pte_fn_t populate_pte_fn), {
    WRAP_FUNCTION(alloc_fn);
    WRAP_FUNCTION(free_fn);
    WRAP_FUNCTION(populate_pte_fn);
    kern_printk("pcpu_page_first_chunk is invoked.\n");
    PRE_WRAPPER_FUNC(reserved_size, alloc_fn, free_fn, populate_pte_fn);
    int ret = pcpu_page_first_chunk(reserved_size, alloc_fn, free_fn, populate_pte_fn);
    POST_WRAPPER_FUNC(reserved_size, alloc_fn, free_fn, populate_pte_fn);
    kern_printk("pcpu_page_first_chunk returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_bus_generate_proc_event4
#define APP_WRAPPER_FOR_acpi_bus_generate_proc_event4
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_bus_generate_proc_event4
#define APP_WRAPPER_FOR_acpi_bus_generate_proc_event4
FUNCTION_WRAPPER(acpi_bus_generate_proc_event4, (const char *class_, const char *bid, u8 type, int data), {
    kern_printk("acpi_bus_generate_proc_event4 is invoked.\n");
    PRE_WRAPPER_FUNC(class_, bid, type, data);
    int ret = acpi_bus_generate_proc_event4(class_, bid, type, data);
    POST_WRAPPER_FUNC(class_, bid, type, data);
    kern_printk("acpi_bus_generate_proc_event4 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_no_connect
#define APP_WRAPPER_FOR_sock_no_connect
#endif
 
#ifndef APP_WRAPPER_FOR_sock_no_connect
#define APP_WRAPPER_FOR_sock_no_connect
FUNCTION_WRAPPER(sock_no_connect, (struct socket *_arg1, struct sockaddr *_arg2, int _arg3, int _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("sock_no_connect is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = sock_no_connect(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("sock_no_connect returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_try_to_free_pages
#define APP_WRAPPER_FOR_try_to_free_pages
#endif
 
#ifndef APP_WRAPPER_FOR_try_to_free_pages
#define APP_WRAPPER_FOR_try_to_free_pages
FUNCTION_WRAPPER(try_to_free_pages, (struct zonelist *zonelist, int order, gfp_t gfp_mask, nodemask_t *mask), {
    kern_printk("try_to_free_pages is invoked.\n");
    PRE_WRAPPER_FUNC(zonelist, order, gfp_mask, mask);
    long ret = try_to_free_pages(zonelist, order, gfp_mask, mask);
    POST_WRAPPER_FUNC(zonelist, order, gfp_mask, mask);
    kern_printk("try_to_free_pages returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sff_data_xfer32
#define APP_WRAPPER_FOR_ata_sff_data_xfer32
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_data_xfer32
#define APP_WRAPPER_FOR_ata_sff_data_xfer32
FUNCTION_WRAPPER(ata_sff_data_xfer32, (struct ata_device *dev, unsigned char *buf, unsigned int buflen, int rw), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct ata_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("ata_sff_data_xfer32 is invoked.\n");
    PRE_WRAPPER_FUNC(dev, buf, buflen, rw);
    int ret = ata_sff_data_xfer32(dev, buf, buflen, rw);
    POST_WRAPPER_FUNC(dev, buf, buflen, rw);
    kern_printk("ata_sff_data_xfer32 returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct ata_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_no_getname
#define APP_WRAPPER_FOR_sock_no_getname
#endif
 
#ifndef APP_WRAPPER_FOR_sock_no_getname
#define APP_WRAPPER_FOR_sock_no_getname
FUNCTION_WRAPPER(sock_no_getname, (struct socket *_arg1, struct sockaddr *_arg2, int *_arg3, int _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("sock_no_getname is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = sock_no_getname(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("sock_no_getname returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR___netlink_kernel_create
#define APP_WRAPPER_FOR___netlink_kernel_create
#endif
 
#ifndef APP_WRAPPER_FOR___netlink_kernel_create
#define APP_WRAPPER_FOR___netlink_kernel_create
FUNCTION_WRAPPER(__netlink_kernel_create, (struct net *net, int unit, struct module *module, struct netlink_kernel_cfg *cfg), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    WRAP_RECURSIVE(module);
    TRACES_IF_WATCHPOINT(module);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(module)));
    WRAP_RECURSIVE(cfg);
    TRACES_IF_WATCHPOINT(cfg);
    SCAN_HEAD_FUNC(struct netlink_kernel_cfg)(*(TO_UNWATCHED_ADDRESS(cfg)));
    kern_printk("__netlink_kernel_create is invoked.\n");
    PRE_WRAPPER_FUNC(net, unit, module, cfg);
    struct sock *ret = __netlink_kernel_create(net, unit, module, cfg);
    POST_WRAPPER_FUNC(net, unit, module, cfg);
    kern_printk("__netlink_kernel_create returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    TRACES_IF_WATCHPOINT(module);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(module)));
    TRACES_IF_WATCHPOINT(cfg);
    SCAN_HEAD_FUNC(struct netlink_kernel_cfg)(*(TO_UNWATCHED_ADDRESS(cfg)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___fprop_inc_single
#define APP_WRAPPER_FOR___fprop_inc_single
#endif
 
#ifndef APP_WRAPPER_FOR___fprop_inc_single
#define APP_WRAPPER_FOR___fprop_inc_single
FUNCTION_WRAPPER_VOID(__fprop_inc_single, (struct fprop_global *p, struct fprop_local_single *pl), {
    kern_printk("__fprop_inc_single is invoked.\n");
    PRE_WRAPPER_FUNC(p, pl);
    __fprop_inc_single(p, pl);
    POST_WRAPPER_FUNC(p, pl);
    kern_printk("__fprop_inc_single returned.\n");
})
#endif


#ifndef KERN_ADDR_mark_buffer_dirty
#define APP_WRAPPER_FOR_mark_buffer_dirty
#endif
 
#ifndef APP_WRAPPER_FOR_mark_buffer_dirty
#define APP_WRAPPER_FOR_mark_buffer_dirty
FUNCTION_WRAPPER_VOID(mark_buffer_dirty, (struct buffer_head *bh), {
    WRAP_RECURSIVE(bh);
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    kern_printk("mark_buffer_dirty is invoked.\n");
    PRE_WRAPPER_FUNC(bh);
    mark_buffer_dirty(bh);
    POST_WRAPPER_FUNC(bh);
    kern_printk("mark_buffer_dirty returned.\n");
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
})
#endif


#ifndef KERN_ADDR_radix_tree_tag_clear
#define APP_WRAPPER_FOR_radix_tree_tag_clear
#endif
 
#ifndef APP_WRAPPER_FOR_radix_tree_tag_clear
#define APP_WRAPPER_FOR_radix_tree_tag_clear
FUNCTION_WRAPPER(radix_tree_tag_clear, (struct radix_tree_root *root, unsigned long index, unsigned int tag), {
    kern_printk("radix_tree_tag_clear is invoked.\n");
    PRE_WRAPPER_FUNC(root, index, tag);
    void *ret = radix_tree_tag_clear(root, index, tag);
    POST_WRAPPER_FUNC(root, index, tag);
    kern_printk("radix_tree_tag_clear returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_check_and_mask_intx
#define APP_WRAPPER_FOR_pci_check_and_mask_intx
#endif
 
#ifndef APP_WRAPPER_FOR_pci_check_and_mask_intx
#define APP_WRAPPER_FOR_pci_check_and_mask_intx
FUNCTION_WRAPPER(pci_check_and_mask_intx, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_check_and_mask_intx is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    bool ret = pci_check_and_mask_intx(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_check_and_mask_intx returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_putname
#define APP_WRAPPER_FOR_putname
#endif
 
#ifndef APP_WRAPPER_FOR_putname
#define APP_WRAPPER_FOR_putname
FUNCTION_WRAPPER_VOID(putname, (struct filename *name), {
    kern_printk("putname is invoked.\n");
    PRE_WRAPPER_FUNC(name);
    putname(name);
    POST_WRAPPER_FUNC(name);
    kern_printk("putname returned.\n");
})
#endif


#ifndef KERN_ADDR_dev_alloc_name
#define APP_WRAPPER_FOR_dev_alloc_name
#endif
 
#ifndef APP_WRAPPER_FOR_dev_alloc_name
#define APP_WRAPPER_FOR_dev_alloc_name
FUNCTION_WRAPPER(dev_alloc_name, (struct net_device *dev, const char *name), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_alloc_name is invoked.\n");
    PRE_WRAPPER_FUNC(dev, name);
    int ret = dev_alloc_name(dev, name);
    POST_WRAPPER_FUNC(dev, name);
    kern_printk("dev_alloc_name returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_do_splice_direct
#define APP_WRAPPER_FOR_do_splice_direct
#endif
 
#ifndef APP_WRAPPER_FOR_do_splice_direct
#define APP_WRAPPER_FOR_do_splice_direct
FUNCTION_WRAPPER(do_splice_direct, (struct file *in, loff_t *ppos, struct file *out, size_t len, unsigned int flags), {
    WRAP_RECURSIVE(in);
    TRACES_IF_WATCHPOINT(in);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(in)));
    WRAP_RECURSIVE(out);
    TRACES_IF_WATCHPOINT(out);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(out)));
    kern_printk("do_splice_direct is invoked.\n");
    PRE_WRAPPER_FUNC(in, ppos, out, len, flags);
    long ret = do_splice_direct(in, ppos, out, len, flags);
    POST_WRAPPER_FUNC(in, ppos, out, len, flags);
    kern_printk("do_splice_direct returned.\n");
    TRACES_IF_WATCHPOINT(in);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(in)));
    TRACES_IF_WATCHPOINT(out);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(out)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_add_resource_offset
#define APP_WRAPPER_FOR_pci_add_resource_offset
#endif
 
#ifndef APP_WRAPPER_FOR_pci_add_resource_offset
#define APP_WRAPPER_FOR_pci_add_resource_offset
FUNCTION_WRAPPER_VOID(pci_add_resource_offset, (struct list_head *resources, struct resource *res, resource_size_t offset), {
    kern_printk("pci_add_resource_offset is invoked.\n");
    PRE_WRAPPER_FUNC(resources, res, offset);
    pci_add_resource_offset(resources, res, offset);
    POST_WRAPPER_FUNC(resources, res, offset);
    kern_printk("pci_add_resource_offset returned.\n");
})
#endif


#ifndef KERN_ADDR_compat_sys_open_by_handle_at
#define APP_WRAPPER_FOR_compat_sys_open_by_handle_at
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_open_by_handle_at
#define APP_WRAPPER_FOR_compat_sys_open_by_handle_at
FUNCTION_WRAPPER(compat_sys_open_by_handle_at, (int mountdirfd, struct file_handle *handle, int flags), {
    kern_printk("compat_sys_open_by_handle_at is invoked.\n");
    PRE_WRAPPER_FUNC(mountdirfd, handle, flags);
    long ret = compat_sys_open_by_handle_at(mountdirfd, handle, flags);
    POST_WRAPPER_FUNC(mountdirfd, handle, flags);
    kern_printk("compat_sys_open_by_handle_at returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_pci_bmdma_init
#define APP_WRAPPER_FOR_ata_pci_bmdma_init
#endif
 
#ifndef APP_WRAPPER_FOR_ata_pci_bmdma_init
#define APP_WRAPPER_FOR_ata_pci_bmdma_init
FUNCTION_WRAPPER_VOID(ata_pci_bmdma_init, (struct ata_host *host), {
    WRAP_RECURSIVE(host);
    TRACES_IF_WATCHPOINT(host);
    SCAN_HEAD_FUNC(struct ata_host)(*(TO_UNWATCHED_ADDRESS(host)));
    kern_printk("ata_pci_bmdma_init is invoked.\n");
    PRE_WRAPPER_FUNC(host);
    ata_pci_bmdma_init(host);
    POST_WRAPPER_FUNC(host);
    kern_printk("ata_pci_bmdma_init returned.\n");
    TRACES_IF_WATCHPOINT(host);
    SCAN_HEAD_FUNC(struct ata_host)(*(TO_UNWATCHED_ADDRESS(host)));
})
#endif


#ifndef KERN_ADDR_calculate_pressure_threshold
#define APP_WRAPPER_FOR_calculate_pressure_threshold
#endif
 
#ifndef APP_WRAPPER_FOR_calculate_pressure_threshold
#define APP_WRAPPER_FOR_calculate_pressure_threshold
FUNCTION_WRAPPER(calculate_pressure_threshold, (struct zone *zone), {
    WRAP_RECURSIVE(zone);
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    kern_printk("calculate_pressure_threshold is invoked.\n");
    PRE_WRAPPER_FUNC(zone);
    int ret = calculate_pressure_threshold(zone);
    POST_WRAPPER_FUNC(zone);
    kern_printk("calculate_pressure_threshold returned.\n");
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_register_gsi
#define APP_WRAPPER_FOR_acpi_register_gsi
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_register_gsi
#define APP_WRAPPER_FOR_acpi_register_gsi
FUNCTION_WRAPPER(acpi_register_gsi, (struct device *dev, u32 gsi, int triggering, int polarity), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("acpi_register_gsi is invoked.\n");
    PRE_WRAPPER_FUNC(dev, gsi, triggering, polarity);
    int ret = acpi_register_gsi(dev, gsi, triggering, polarity);
    POST_WRAPPER_FUNC(dev, gsi, triggering, polarity);
    kern_printk("acpi_register_gsi returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_csk_get_port
#define APP_WRAPPER_FOR_inet_csk_get_port
#endif
 
#ifndef APP_WRAPPER_FOR_inet_csk_get_port
#define APP_WRAPPER_FOR_inet_csk_get_port
FUNCTION_WRAPPER(inet_csk_get_port, (struct sock *sk, unsigned short snum), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("inet_csk_get_port is invoked.\n");
    PRE_WRAPPER_FUNC(sk, snum);
    int ret = inet_csk_get_port(sk, snum);
    POST_WRAPPER_FUNC(sk, snum);
    kern_printk("inet_csk_get_port returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sparse_add_one_section
#define APP_WRAPPER_FOR_sparse_add_one_section
#endif
 
#ifndef APP_WRAPPER_FOR_sparse_add_one_section
#define APP_WRAPPER_FOR_sparse_add_one_section
FUNCTION_WRAPPER(sparse_add_one_section, (struct zone *zone, unsigned long start_pfn, int nr_pages), {
    WRAP_RECURSIVE(zone);
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    kern_printk("sparse_add_one_section is invoked.\n");
    PRE_WRAPPER_FUNC(zone, start_pfn, nr_pages);
    int ret = sparse_add_one_section(zone, start_pfn, nr_pages);
    POST_WRAPPER_FUNC(zone, start_pfn, nr_pages);
    kern_printk("sparse_add_one_section returned.\n");
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_delete_lock
#define APP_WRAPPER_FOR_acpi_os_delete_lock
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_delete_lock
#define APP_WRAPPER_FOR_acpi_os_delete_lock
FUNCTION_WRAPPER_VOID(acpi_os_delete_lock, (spinlock_t *handle), {
    kern_printk("acpi_os_delete_lock is invoked.\n");
    PRE_WRAPPER_FUNC(handle);
    acpi_os_delete_lock(handle);
    POST_WRAPPER_FUNC(handle);
    kern_printk("acpi_os_delete_lock returned.\n");
})
#endif


#ifndef KERN_ADDR_copy_siginfo_to_user
#define APP_WRAPPER_FOR_copy_siginfo_to_user
#endif
 
#ifndef APP_WRAPPER_FOR_copy_siginfo_to_user
#define APP_WRAPPER_FOR_copy_siginfo_to_user
FUNCTION_WRAPPER(copy_siginfo_to_user, (struct siginfo *to, struct siginfo *from), {
    kern_printk("copy_siginfo_to_user is invoked.\n");
    PRE_WRAPPER_FUNC(to, from);
    int ret = copy_siginfo_to_user(to, from);
    POST_WRAPPER_FUNC(to, from);
    kern_printk("copy_siginfo_to_user returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_cred_to_ucred
#define APP_WRAPPER_FOR_cred_to_ucred
#endif
 
#ifndef APP_WRAPPER_FOR_cred_to_ucred
#define APP_WRAPPER_FOR_cred_to_ucred
FUNCTION_WRAPPER_VOID(cred_to_ucred, (struct pid *pid, const struct cred *cred, struct ucred *ucred), {
    WRAP_RECURSIVE(pid);
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
    WRAP_RECURSIVE(cred);
    TRACES_IF_WATCHPOINT(cred);
    SCAN_HEAD_FUNC(const struct cred)(*(TO_UNWATCHED_ADDRESS(cred)));
    kern_printk("cred_to_ucred is invoked.\n");
    PRE_WRAPPER_FUNC(pid, cred, ucred);
    cred_to_ucred(pid, cred, ucred);
    POST_WRAPPER_FUNC(pid, cred, ucred);
    kern_printk("cred_to_ucred returned.\n");
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
    TRACES_IF_WATCHPOINT(cred);
    SCAN_HEAD_FUNC(const struct cred)(*(TO_UNWATCHED_ADDRESS(cred)));
})
#endif


#ifndef KERN_ADDR_ioread8_rep
#define APP_WRAPPER_FOR_ioread8_rep
#endif
 
#ifndef APP_WRAPPER_FOR_ioread8_rep
#define APP_WRAPPER_FOR_ioread8_rep
FUNCTION_WRAPPER_VOID(ioread8_rep, (void *port, void *buf, unsigned long count), {
    kern_printk("ioread8_rep is invoked.\n");
    PRE_WRAPPER_FUNC(port, buf, count);
    ioread8_rep(port, buf, count);
    POST_WRAPPER_FUNC(port, buf, count);
    kern_printk("ioread8_rep returned.\n");
})
#endif


#ifndef KERN_ADDR_kill_anon_super
#define APP_WRAPPER_FOR_kill_anon_super
#endif
 
#ifndef APP_WRAPPER_FOR_kill_anon_super
#define APP_WRAPPER_FOR_kill_anon_super
FUNCTION_WRAPPER_VOID(kill_anon_super, (struct super_block *sb), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("kill_anon_super is invoked.\n");
    PRE_WRAPPER_FUNC(sb);
    kill_anon_super(sb);
    POST_WRAPPER_FUNC(sb);
    kern_printk("kill_anon_super returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
})
#endif


#ifndef KERN_ADDR_consume_skb
#define APP_WRAPPER_FOR_consume_skb
#endif
 
#ifndef APP_WRAPPER_FOR_consume_skb
#define APP_WRAPPER_FOR_consume_skb
FUNCTION_WRAPPER_VOID(consume_skb, (struct sk_buff *skb), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("consume_skb is invoked.\n");
    PRE_WRAPPER_FUNC(skb);
    consume_skb(skb);
    POST_WRAPPER_FUNC(skb);
    kern_printk("consume_skb returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_time_to_tm
#define APP_WRAPPER_FOR_time_to_tm
#endif
 
#ifndef APP_WRAPPER_FOR_time_to_tm
#define APP_WRAPPER_FOR_time_to_tm
FUNCTION_WRAPPER_VOID(time_to_tm, (time_t totalsecs, int offset, struct tm *result), {
    kern_printk("time_to_tm is invoked.\n");
    PRE_WRAPPER_FUNC(totalsecs, offset, result);
    time_to_tm(totalsecs, offset, result);
    POST_WRAPPER_FUNC(totalsecs, offset, result);
    kern_printk("time_to_tm returned.\n");
})
#endif


#ifndef KERN_ADDR___current_kernel_time
#define APP_WRAPPER_FOR___current_kernel_time
#endif
 
#ifndef APP_WRAPPER_FOR___current_kernel_time
#define APP_WRAPPER_FOR___current_kernel_time
FUNCTION_WRAPPER(__current_kernel_time, (), {
    kern_printk("__current_kernel_time is invoked.\n");
    PRE_WRAPPER_FUNC();
    struct timespec ret = __current_kernel_time();
    POST_WRAPPER_FUNC();
    kern_printk("__current_kernel_time returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_time
#define APP_WRAPPER_FOR_compat_sys_time
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_time
#define APP_WRAPPER_FOR_compat_sys_time
FUNCTION_WRAPPER(compat_sys_time, (compat_time_t *tloc), {
    kern_printk("compat_sys_time is invoked.\n");
    PRE_WRAPPER_FUNC(tloc);
    long ret = compat_sys_time(tloc);
    POST_WRAPPER_FUNC(tloc);
    kern_printk("compat_sys_time returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_strndup_user
#define APP_WRAPPER_FOR_strndup_user
#endif
 
#ifndef APP_WRAPPER_FOR_strndup_user
#define APP_WRAPPER_FOR_strndup_user
FUNCTION_WRAPPER(strndup_user, (const char *_arg1, long _arg2), {
    kern_printk("strndup_user is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    char *ret = strndup_user(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("strndup_user returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_signal_wake_up_state
#define APP_WRAPPER_FOR_signal_wake_up_state
#endif
 
#ifndef APP_WRAPPER_FOR_signal_wake_up_state
#define APP_WRAPPER_FOR_signal_wake_up_state
FUNCTION_WRAPPER_VOID(signal_wake_up_state, (struct task_struct *t, unsigned int state), {
    WRAP_RECURSIVE(t);
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(t)));
    kern_printk("signal_wake_up_state is invoked.\n");
    PRE_WRAPPER_FUNC(t, state);
    signal_wake_up_state(t, state);
    POST_WRAPPER_FUNC(t, state);
    kern_printk("signal_wake_up_state returned.\n");
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(t)));
})
#endif


#ifndef KERN_ADDR_ata_timing_cycle2mode
#define APP_WRAPPER_FOR_ata_timing_cycle2mode
#endif
 
#ifndef APP_WRAPPER_FOR_ata_timing_cycle2mode
#define APP_WRAPPER_FOR_ata_timing_cycle2mode
FUNCTION_WRAPPER(ata_timing_cycle2mode, (unsigned int xfer_shift, int cycle), {
    kern_printk("ata_timing_cycle2mode is invoked.\n");
    PRE_WRAPPER_FUNC(xfer_shift, cycle);
    u8 ret = ata_timing_cycle2mode(xfer_shift, cycle);
    POST_WRAPPER_FUNC(xfer_shift, cycle);
    kern_printk("ata_timing_cycle2mode returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_get_task_comm
#define APP_WRAPPER_FOR_get_task_comm
#endif
 
#ifndef APP_WRAPPER_FOR_get_task_comm
#define APP_WRAPPER_FOR_get_task_comm
FUNCTION_WRAPPER(get_task_comm, (char *to, struct task_struct *tsk), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("get_task_comm is invoked.\n");
    PRE_WRAPPER_FUNC(to, tsk);
    char *ret = get_task_comm(to, tsk);
    POST_WRAPPER_FUNC(to, tsk);
    kern_printk("get_task_comm returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_input_inject_event
#define APP_WRAPPER_FOR_input_inject_event
#endif
 
#ifndef APP_WRAPPER_FOR_input_inject_event
#define APP_WRAPPER_FOR_input_inject_event
FUNCTION_WRAPPER_VOID(input_inject_event, (struct input_handle *handle, unsigned int type, unsigned int code, int value), {
    WRAP_RECURSIVE(handle);
    TRACES_IF_WATCHPOINT(handle);
    SCAN_HEAD_FUNC(struct input_handle)(*(TO_UNWATCHED_ADDRESS(handle)));
    kern_printk("input_inject_event is invoked.\n");
    PRE_WRAPPER_FUNC(handle, type, code, value);
    input_inject_event(handle, type, code, value);
    POST_WRAPPER_FUNC(handle, type, code, value);
    kern_printk("input_inject_event returned.\n");
    TRACES_IF_WATCHPOINT(handle);
    SCAN_HEAD_FUNC(struct input_handle)(*(TO_UNWATCHED_ADDRESS(handle)));
})
#endif


#ifndef KERN_ADDR_dma_async_memcpy_buf_to_buf
#define APP_WRAPPER_FOR_dma_async_memcpy_buf_to_buf
#endif
 
#ifndef APP_WRAPPER_FOR_dma_async_memcpy_buf_to_buf
#define APP_WRAPPER_FOR_dma_async_memcpy_buf_to_buf
FUNCTION_WRAPPER(dma_async_memcpy_buf_to_buf, (struct dma_chan *chan, void *dest, void *src, size_t len), {
    WRAP_RECURSIVE(chan);
    TRACES_IF_WATCHPOINT(chan);
    SCAN_HEAD_FUNC(struct dma_chan)(*(TO_UNWATCHED_ADDRESS(chan)));
    kern_printk("dma_async_memcpy_buf_to_buf is invoked.\n");
    PRE_WRAPPER_FUNC(chan, dest, src, len);
    dma_cookie_t ret = dma_async_memcpy_buf_to_buf(chan, dest, src, len);
    POST_WRAPPER_FUNC(chan, dest, src, len);
    kern_printk("dma_async_memcpy_buf_to_buf returned.\n");
    TRACES_IF_WATCHPOINT(chan);
    SCAN_HEAD_FUNC(struct dma_chan)(*(TO_UNWATCHED_ADDRESS(chan)));
    return ret;
})
#endif


#ifndef KERN_ADDR_wait_for_completion_killable_timeout
#define APP_WRAPPER_FOR_wait_for_completion_killable_timeout
#endif
 
#ifndef APP_WRAPPER_FOR_wait_for_completion_killable_timeout
#define APP_WRAPPER_FOR_wait_for_completion_killable_timeout
FUNCTION_WRAPPER(wait_for_completion_killable_timeout, (struct completion *x, unsigned long timeout), {
    kern_printk("wait_for_completion_killable_timeout is invoked.\n");
    PRE_WRAPPER_FUNC(x, timeout);
    long ret = wait_for_completion_killable_timeout(x, timeout);
    POST_WRAPPER_FUNC(x, timeout);
    kern_printk("wait_for_completion_killable_timeout returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_set_memory_x
#define APP_WRAPPER_FOR_set_memory_x
#endif
 
#ifndef APP_WRAPPER_FOR_set_memory_x
#define APP_WRAPPER_FOR_set_memory_x
FUNCTION_WRAPPER(set_memory_x, (unsigned long addr, int numpages), {
    kern_printk("set_memory_x is invoked.\n");
    PRE_WRAPPER_FUNC(addr, numpages);
    int ret = set_memory_x(addr, numpages);
    POST_WRAPPER_FUNC(addr, numpages);
    kern_printk("set_memory_x returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_match_device
#define APP_WRAPPER_FOR_acpi_match_device
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_match_device
#define APP_WRAPPER_FOR_acpi_match_device
FUNCTION_WRAPPER(acpi_match_device, (const struct acpi_device_id *ids, const struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("acpi_match_device is invoked.\n");
    PRE_WRAPPER_FUNC(ids, dev);
    const struct acpi_device_id *ret = acpi_match_device(ids, dev);
    POST_WRAPPER_FUNC(ids, dev);
    kern_printk("acpi_match_device returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_end_buffer_write_sync
#define APP_WRAPPER_FOR_end_buffer_write_sync
#endif
 
#ifndef APP_WRAPPER_FOR_end_buffer_write_sync
#define APP_WRAPPER_FOR_end_buffer_write_sync
FUNCTION_WRAPPER_VOID(end_buffer_write_sync, (struct buffer_head *bh, int uptodate), {
    WRAP_RECURSIVE(bh);
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    kern_printk("end_buffer_write_sync is invoked.\n");
    PRE_WRAPPER_FUNC(bh, uptodate);
    end_buffer_write_sync(bh, uptodate);
    POST_WRAPPER_FUNC(bh, uptodate);
    kern_printk("end_buffer_write_sync returned.\n");
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
})
#endif


#ifndef KERN_ADDR_ata_sff_hsm_move
#define APP_WRAPPER_FOR_ata_sff_hsm_move
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_hsm_move
#define APP_WRAPPER_FOR_ata_sff_hsm_move
FUNCTION_WRAPPER(ata_sff_hsm_move, (struct ata_port *ap, struct ata_queued_cmd *qc, u8 status, int in_wq), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    WRAP_RECURSIVE(qc);
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    kern_printk("ata_sff_hsm_move is invoked.\n");
    PRE_WRAPPER_FUNC(ap, qc, status, in_wq);
    int ret = ata_sff_hsm_move(ap, qc, status, in_wq);
    POST_WRAPPER_FUNC(ap, qc, status, in_wq);
    kern_printk("ata_sff_hsm_move returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    return ret;
})
#endif


#ifndef KERN_ADDR_map_swap_page
#define APP_WRAPPER_FOR_map_swap_page
#endif
 
#ifndef APP_WRAPPER_FOR_map_swap_page
#define APP_WRAPPER_FOR_map_swap_page
FUNCTION_WRAPPER(map_swap_page, (struct page *_arg1, struct block_device **_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct block_device *)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("map_swap_page is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    sector_t ret = map_swap_page(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("map_swap_page returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct block_device *)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_start_thread_ia32
#define APP_WRAPPER_FOR_start_thread_ia32
#endif
 
#ifndef APP_WRAPPER_FOR_start_thread_ia32
#define APP_WRAPPER_FOR_start_thread_ia32
FUNCTION_WRAPPER_VOID(start_thread_ia32, (struct pt_regs *regs, u32 new_ip, u32 new_sp), {
    kern_printk("start_thread_ia32 is invoked.\n");
    PRE_WRAPPER_FUNC(regs, new_ip, new_sp);
    start_thread_ia32(regs, new_ip, new_sp);
    POST_WRAPPER_FUNC(regs, new_ip, new_sp);
    kern_printk("start_thread_ia32 returned.\n");
})
#endif


#ifndef KERN_ADDR_bd_link_disk_holder
#define APP_WRAPPER_FOR_bd_link_disk_holder
#endif
 
#ifndef APP_WRAPPER_FOR_bd_link_disk_holder
#define APP_WRAPPER_FOR_bd_link_disk_holder
FUNCTION_WRAPPER(bd_link_disk_holder, (struct block_device *bdev, struct gendisk *disk), {
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    WRAP_RECURSIVE(disk);
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    kern_printk("bd_link_disk_holder is invoked.\n");
    PRE_WRAPPER_FUNC(bdev, disk);
    int ret = bd_link_disk_holder(bdev, disk);
    POST_WRAPPER_FUNC(bdev, disk);
    kern_printk("bd_link_disk_holder returned.\n");
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kmem_cache_shrink
#define APP_WRAPPER_FOR_kmem_cache_shrink
#endif
 
#ifndef APP_WRAPPER_FOR_kmem_cache_shrink
#define APP_WRAPPER_FOR_kmem_cache_shrink
FUNCTION_WRAPPER(kmem_cache_shrink, (struct kmem_cache *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kmem_cache)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("kmem_cache_shrink is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = kmem_cache_shrink(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("kmem_cache_shrink returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kmem_cache)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_get_robust_list
#define APP_WRAPPER_FOR_compat_sys_get_robust_list
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_get_robust_list
#define APP_WRAPPER_FOR_compat_sys_get_robust_list
FUNCTION_WRAPPER(compat_sys_get_robust_list, (int pid, compat_uptr_t *head_ptr, compat_size_t *len_ptr), {
    kern_printk("compat_sys_get_robust_list is invoked.\n");
    PRE_WRAPPER_FUNC(pid, head_ptr, len_ptr);
    long ret = compat_sys_get_robust_list(pid, head_ptr, len_ptr);
    POST_WRAPPER_FUNC(pid, head_ptr, len_ptr);
    kern_printk("compat_sys_get_robust_list returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___hrtimer_start_range_ns
#define APP_WRAPPER_FOR___hrtimer_start_range_ns
#endif
 
#ifndef APP_WRAPPER_FOR___hrtimer_start_range_ns
#define APP_WRAPPER_FOR___hrtimer_start_range_ns
FUNCTION_WRAPPER(__hrtimer_start_range_ns, (struct hrtimer *timer, ktime_t tim, unsigned long delta_ns, const enum hrtimer_mode mode, int wakeup), {
    WRAP_RECURSIVE(timer);
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct hrtimer)(*(TO_UNWATCHED_ADDRESS(timer)));
    kern_printk("__hrtimer_start_range_ns is invoked.\n");
    PRE_WRAPPER_FUNC(timer, tim, delta_ns, mode, wakeup);
    int ret = __hrtimer_start_range_ns(timer, tim, delta_ns, mode, wakeup);
    POST_WRAPPER_FUNC(timer, tim, delta_ns, mode, wakeup);
    kern_printk("__hrtimer_start_range_ns returned.\n");
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct hrtimer)(*(TO_UNWATCHED_ADDRESS(timer)));
    return ret;
})
#endif


#ifndef KERN_ADDR___module_address
#define APP_WRAPPER_FOR___module_address
#endif
 
#ifndef APP_WRAPPER_FOR___module_address
#define APP_WRAPPER_FOR___module_address
FUNCTION_WRAPPER(__module_address, (unsigned long addr), {
    kern_printk("__module_address is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    struct module *ret = __module_address(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("__module_address returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_bio_alloc_bioset
#define APP_WRAPPER_FOR_bio_alloc_bioset
#endif
 
#ifndef APP_WRAPPER_FOR_bio_alloc_bioset
#define APP_WRAPPER_FOR_bio_alloc_bioset
FUNCTION_WRAPPER(bio_alloc_bioset, (gfp_t _arg1, int _arg2, struct bio_set *_arg3), {
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct bio_set)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("bio_alloc_bioset is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    struct bio *ret = bio_alloc_bioset(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("bio_alloc_bioset returned.\n");
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct bio_set)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_iov_shorten
#define APP_WRAPPER_FOR_iov_shorten
#endif
 
#ifndef APP_WRAPPER_FOR_iov_shorten
#define APP_WRAPPER_FOR_iov_shorten
FUNCTION_WRAPPER(iov_shorten, (struct iovec *iov, unsigned long nr_segs, size_t to), {
    kern_printk("iov_shorten is invoked.\n");
    PRE_WRAPPER_FUNC(iov, nr_segs, to);
    long ret = iov_shorten(iov, nr_segs, to);
    POST_WRAPPER_FUNC(iov, nr_segs, to);
    kern_printk("iov_shorten returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_register_sysctl_root
#define APP_WRAPPER_FOR_register_sysctl_root
#endif
 
#ifndef APP_WRAPPER_FOR_register_sysctl_root
#define APP_WRAPPER_FOR_register_sysctl_root
FUNCTION_WRAPPER_VOID(register_sysctl_root, (struct ctl_table_root *root), {
    WRAP_RECURSIVE(root);
    TRACES_IF_WATCHPOINT(root);
    SCAN_HEAD_FUNC(struct ctl_table_root)(*(TO_UNWATCHED_ADDRESS(root)));
    kern_printk("register_sysctl_root is invoked.\n");
    PRE_WRAPPER_FUNC(root);
    register_sysctl_root(root);
    POST_WRAPPER_FUNC(root);
    kern_printk("register_sysctl_root returned.\n");
    TRACES_IF_WATCHPOINT(root);
    SCAN_HEAD_FUNC(struct ctl_table_root)(*(TO_UNWATCHED_ADDRESS(root)));
})
#endif


#ifndef KERN_ADDR_bio_copy_user
#define APP_WRAPPER_FOR_bio_copy_user
#endif
 
#ifndef APP_WRAPPER_FOR_bio_copy_user
#define APP_WRAPPER_FOR_bio_copy_user
FUNCTION_WRAPPER(bio_copy_user, (struct request_queue *_arg1, struct rq_map_data *_arg2, unsigned long _arg3, unsigned int _arg4, int _arg5, gfp_t _arg6), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct rq_map_data)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("bio_copy_user is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
    struct bio *ret = bio_copy_user(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
    kern_printk("bio_copy_user returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct rq_map_data)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sysfs_remove_dir
#define APP_WRAPPER_FOR_sysfs_remove_dir
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_remove_dir
#define APP_WRAPPER_FOR_sysfs_remove_dir
FUNCTION_WRAPPER_VOID(sysfs_remove_dir, (struct kobject *kobj), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    kern_printk("sysfs_remove_dir is invoked.\n");
    PRE_WRAPPER_FUNC(kobj);
    sysfs_remove_dir(kobj);
    POST_WRAPPER_FUNC(kobj);
    kern_printk("sysfs_remove_dir returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
})
#endif


#ifndef KERN_ADDR_ata_host_init
#define APP_WRAPPER_FOR_ata_host_init
#endif
 
#ifndef APP_WRAPPER_FOR_ata_host_init
#define APP_WRAPPER_FOR_ata_host_init
FUNCTION_WRAPPER_VOID(ata_host_init, (struct ata_host *_arg1, struct device *_arg2, struct ata_port_operations *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ata_host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct ata_port_operations)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("ata_host_init is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    ata_host_init(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("ata_host_init returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ata_host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct ata_port_operations)(*(TO_UNWATCHED_ADDRESS(_arg3)));
})
#endif


#ifndef KERN_ADDR_vfs_link
#define APP_WRAPPER_FOR_vfs_link
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_link
#define APP_WRAPPER_FOR_vfs_link
FUNCTION_WRAPPER(vfs_link, (struct dentry *_arg1, struct inode *_arg2, struct dentry *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("vfs_link is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = vfs_link(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("vfs_link returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_user_write_config_byte
#define APP_WRAPPER_FOR_pci_user_write_config_byte
#endif
 
#ifndef APP_WRAPPER_FOR_pci_user_write_config_byte
#define APP_WRAPPER_FOR_pci_user_write_config_byte
FUNCTION_WRAPPER(pci_user_write_config_byte, (struct pci_dev *dev, int where, u8 val), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_user_write_config_byte is invoked.\n");
    PRE_WRAPPER_FUNC(dev, where, val);
    int ret = pci_user_write_config_byte(dev, where, val);
    POST_WRAPPER_FUNC(dev, where, val);
    kern_printk("pci_user_write_config_byte returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_set_pageblock_flags_group
#define APP_WRAPPER_FOR_set_pageblock_flags_group
#endif
 
#ifndef APP_WRAPPER_FOR_set_pageblock_flags_group
#define APP_WRAPPER_FOR_set_pageblock_flags_group
FUNCTION_WRAPPER_VOID(set_pageblock_flags_group, (struct page *page, unsigned long flags, int start_bitidx, int end_bitidx), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("set_pageblock_flags_group is invoked.\n");
    PRE_WRAPPER_FUNC(page, flags, start_bitidx, end_bitidx);
    set_pageblock_flags_group(page, flags, start_bitidx, end_bitidx);
    POST_WRAPPER_FUNC(page, flags, start_bitidx, end_bitidx);
    kern_printk("set_pageblock_flags_group returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_tick_oneshot_mode_active
#define APP_WRAPPER_FOR_tick_oneshot_mode_active
#endif
 
#ifndef APP_WRAPPER_FOR_tick_oneshot_mode_active
#define APP_WRAPPER_FOR_tick_oneshot_mode_active
FUNCTION_WRAPPER(tick_oneshot_mode_active, (), {
    kern_printk("tick_oneshot_mode_active is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = tick_oneshot_mode_active();
    POST_WRAPPER_FUNC();
    kern_printk("tick_oneshot_mode_active returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_jiffies_to_msecs
#define APP_WRAPPER_FOR_jiffies_to_msecs
#endif
 
#ifndef APP_WRAPPER_FOR_jiffies_to_msecs
#define APP_WRAPPER_FOR_jiffies_to_msecs
FUNCTION_WRAPPER(jiffies_to_msecs, (unsigned const long j), {
    kern_printk("jiffies_to_msecs is invoked.\n");
    PRE_WRAPPER_FUNC(j);
    int ret = jiffies_to_msecs(j);
    POST_WRAPPER_FUNC(j);
    kern_printk("jiffies_to_msecs returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sata_link_scr_lpm
#define APP_WRAPPER_FOR_sata_link_scr_lpm
#endif
 
#ifndef APP_WRAPPER_FOR_sata_link_scr_lpm
#define APP_WRAPPER_FOR_sata_link_scr_lpm
FUNCTION_WRAPPER(sata_link_scr_lpm, (struct ata_link *link, enum ata_lpm_policy policy, bool spm_wakeup), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    kern_printk("sata_link_scr_lpm is invoked.\n");
    PRE_WRAPPER_FUNC(link, policy, spm_wakeup);
    int ret = sata_link_scr_lpm(link, policy, spm_wakeup);
    POST_WRAPPER_FUNC(link, policy, spm_wakeup);
    kern_printk("sata_link_scr_lpm returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    return ret;
})
#endif


#ifndef KERN_ADDR_copy_vma
#define APP_WRAPPER_FOR_copy_vma
#endif
 
#ifndef APP_WRAPPER_FOR_copy_vma
#define APP_WRAPPER_FOR_copy_vma
FUNCTION_WRAPPER(copy_vma, (struct vm_area_struct **_arg1, unsigned long addr, unsigned long len, unsigned long pgoff, bool *need_rmap_locks), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vm_area_struct *)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("copy_vma is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, addr, len, pgoff, need_rmap_locks);
    struct vm_area_struct *ret = copy_vma(_arg1, addr, len, pgoff, need_rmap_locks);
    POST_WRAPPER_FUNC(_arg1, addr, len, pgoff, need_rmap_locks);
    kern_printk("copy_vma returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vm_area_struct *)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_iomap
#define APP_WRAPPER_FOR_pci_iomap
#endif
 
#ifndef APP_WRAPPER_FOR_pci_iomap
#define APP_WRAPPER_FOR_pci_iomap
FUNCTION_WRAPPER(pci_iomap, (struct pci_dev *dev, int bar, unsigned long max), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_iomap is invoked.\n");
    PRE_WRAPPER_FUNC(dev, bar, max);
    void *ret = pci_iomap(dev, bar, max);
    POST_WRAPPER_FUNC(dev, bar, max);
    kern_printk("pci_iomap returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_truncate_pagecache_range
#define APP_WRAPPER_FOR_truncate_pagecache_range
#endif
 
#ifndef APP_WRAPPER_FOR_truncate_pagecache_range
#define APP_WRAPPER_FOR_truncate_pagecache_range
FUNCTION_WRAPPER_VOID(truncate_pagecache_range, (struct inode *inode, loff_t offset, loff_t end), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("truncate_pagecache_range is invoked.\n");
    PRE_WRAPPER_FUNC(inode, offset, end);
    truncate_pagecache_range(inode, offset, end);
    POST_WRAPPER_FUNC(inode, offset, end);
    kern_printk("truncate_pagecache_range returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_cred_init
#define APP_WRAPPER_FOR_cred_init
#endif
 
#ifndef APP_WRAPPER_FOR_cred_init
#define APP_WRAPPER_FOR_cred_init
FUNCTION_WRAPPER_VOID(cred_init, (), {
    kern_printk("cred_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    cred_init();
    POST_WRAPPER_FUNC();
    kern_printk("cred_init returned.\n");
})
#endif


#ifndef KERN_ADDR_dev_forward_skb
#define APP_WRAPPER_FOR_dev_forward_skb
#endif
 
#ifndef APP_WRAPPER_FOR_dev_forward_skb
#define APP_WRAPPER_FOR_dev_forward_skb
FUNCTION_WRAPPER(dev_forward_skb, (struct net_device *dev, struct sk_buff *skb), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("dev_forward_skb is invoked.\n");
    PRE_WRAPPER_FUNC(dev, skb);
    int ret = dev_forward_skb(dev, skb);
    POST_WRAPPER_FUNC(dev, skb);
    kern_printk("dev_forward_skb returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_safe_xapic_wait_icr_idle
#define APP_WRAPPER_FOR_safe_xapic_wait_icr_idle
#endif
 
#ifndef APP_WRAPPER_FOR_safe_xapic_wait_icr_idle
#define APP_WRAPPER_FOR_safe_xapic_wait_icr_idle
FUNCTION_WRAPPER(safe_xapic_wait_icr_idle, (), {
    kern_printk("safe_xapic_wait_icr_idle is invoked.\n");
    PRE_WRAPPER_FUNC();
    u32 ret = safe_xapic_wait_icr_idle();
    POST_WRAPPER_FUNC();
    kern_printk("safe_xapic_wait_icr_idle returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_neigh_direct_output
#define APP_WRAPPER_FOR_neigh_direct_output
#endif
 
#ifndef APP_WRAPPER_FOR_neigh_direct_output
#define APP_WRAPPER_FOR_neigh_direct_output
FUNCTION_WRAPPER(neigh_direct_output, (struct neighbour *neigh, struct sk_buff *skb), {
    WRAP_RECURSIVE(neigh);
    TRACES_IF_WATCHPOINT(neigh);
    SCAN_HEAD_FUNC(struct neighbour)(*(TO_UNWATCHED_ADDRESS(neigh)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("neigh_direct_output is invoked.\n");
    PRE_WRAPPER_FUNC(neigh, skb);
    int ret = neigh_direct_output(neigh, skb);
    POST_WRAPPER_FUNC(neigh, skb);
    kern_printk("neigh_direct_output returned.\n");
    TRACES_IF_WATCHPOINT(neigh);
    SCAN_HEAD_FUNC(struct neighbour)(*(TO_UNWATCHED_ADDRESS(neigh)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_crypto_alloc_base
#define APP_WRAPPER_FOR_crypto_alloc_base
#endif
 
#ifndef APP_WRAPPER_FOR_crypto_alloc_base
#define APP_WRAPPER_FOR_crypto_alloc_base
FUNCTION_WRAPPER(crypto_alloc_base, (const char *alg_name, u32 type, u32 mask), {
    kern_printk("crypto_alloc_base is invoked.\n");
    PRE_WRAPPER_FUNC(alg_name, type, mask);
    struct crypto_tfm *ret = crypto_alloc_base(alg_name, type, mask);
    POST_WRAPPER_FUNC(alg_name, type, mask);
    kern_printk("crypto_alloc_base returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_kernel_thread
#define APP_WRAPPER_FOR_kernel_thread
#endif
 
#ifndef APP_WRAPPER_FOR_kernel_thread
#define APP_WRAPPER_FOR_kernel_thread
FUNCTION_WRAPPER(kernel_thread, (int (*fn)(void *), void *arg, unsigned long flags), {
    WRAP_FUNCTION(fn);
    kern_printk("kernel_thread is invoked.\n");
    PRE_WRAPPER_FUNC(fn, arg, flags);
    pid_t ret = kernel_thread(fn, arg, flags);
    POST_WRAPPER_FUNC(fn, arg, flags);
    kern_printk("kernel_thread returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_wait_for_completion_timeout
#define APP_WRAPPER_FOR_wait_for_completion_timeout
#endif
 
#ifndef APP_WRAPPER_FOR_wait_for_completion_timeout
#define APP_WRAPPER_FOR_wait_for_completion_timeout
FUNCTION_WRAPPER(wait_for_completion_timeout, (struct completion *x, unsigned long timeout), {
    kern_printk("wait_for_completion_timeout is invoked.\n");
    PRE_WRAPPER_FUNC(x, timeout);
    long ret = wait_for_completion_timeout(x, timeout);
    POST_WRAPPER_FUNC(x, timeout);
    kern_printk("wait_for_completion_timeout returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_scsi_calculate_bounce_limit
#define APP_WRAPPER_FOR_scsi_calculate_bounce_limit
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_calculate_bounce_limit
#define APP_WRAPPER_FOR_scsi_calculate_bounce_limit
FUNCTION_WRAPPER(scsi_calculate_bounce_limit, (struct Scsi_Host *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("scsi_calculate_bounce_limit is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    u64 ret = scsi_calculate_bounce_limit(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("scsi_calculate_bounce_limit returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_si_swapinfo
#define APP_WRAPPER_FOR_si_swapinfo
#endif
 
#ifndef APP_WRAPPER_FOR_si_swapinfo
#define APP_WRAPPER_FOR_si_swapinfo
FUNCTION_WRAPPER_VOID(si_swapinfo, (struct sysinfo *_arg1), {
    kern_printk("si_swapinfo is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    si_swapinfo(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("si_swapinfo returned.\n");
})
#endif


#ifndef KERN_ADDR___jbd2_journal_drop_transaction
#define APP_WRAPPER_FOR___jbd2_journal_drop_transaction
#endif
 
#ifndef APP_WRAPPER_FOR___jbd2_journal_drop_transaction
#define APP_WRAPPER_FOR___jbd2_journal_drop_transaction
FUNCTION_WRAPPER_VOID(__jbd2_journal_drop_transaction, (journal_t *_arg1, transaction_t *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(transaction_t)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("__jbd2_journal_drop_transaction is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    __jbd2_journal_drop_transaction(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("__jbd2_journal_drop_transaction returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(transaction_t)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_pci_disable_ltr
#define APP_WRAPPER_FOR_pci_disable_ltr
#endif
 
#ifndef APP_WRAPPER_FOR_pci_disable_ltr
#define APP_WRAPPER_FOR_pci_disable_ltr
FUNCTION_WRAPPER_VOID(pci_disable_ltr, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_disable_ltr is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pci_disable_ltr(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_disable_ltr returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_cap_task_fix_setuid
#define APP_WRAPPER_FOR_cap_task_fix_setuid
#endif
 
#ifndef APP_WRAPPER_FOR_cap_task_fix_setuid
#define APP_WRAPPER_FOR_cap_task_fix_setuid
FUNCTION_WRAPPER(cap_task_fix_setuid, (struct cred *new_, const struct cred *old, int flags), {
    WRAP_RECURSIVE(new_);
    TRACES_IF_WATCHPOINT(new_);
    SCAN_HEAD_FUNC(struct cred)(*(TO_UNWATCHED_ADDRESS(new_)));
    WRAP_RECURSIVE(old);
    TRACES_IF_WATCHPOINT(old);
    SCAN_HEAD_FUNC(const struct cred)(*(TO_UNWATCHED_ADDRESS(old)));
    kern_printk("cap_task_fix_setuid is invoked.\n");
    PRE_WRAPPER_FUNC(new_, old, flags);
    int ret = cap_task_fix_setuid(new_, old, flags);
    POST_WRAPPER_FUNC(new_, old, flags);
    kern_printk("cap_task_fix_setuid returned.\n");
    TRACES_IF_WATCHPOINT(new_);
    SCAN_HEAD_FUNC(struct cred)(*(TO_UNWATCHED_ADDRESS(new_)));
    TRACES_IF_WATCHPOINT(old);
    SCAN_HEAD_FUNC(const struct cred)(*(TO_UNWATCHED_ADDRESS(old)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_mc_init
#define APP_WRAPPER_FOR_dev_mc_init
#endif
 
#ifndef APP_WRAPPER_FOR_dev_mc_init
#define APP_WRAPPER_FOR_dev_mc_init
FUNCTION_WRAPPER_VOID(dev_mc_init, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_mc_init is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    dev_mc_init(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_mc_init returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_simple_strtoll
#define APP_WRAPPER_FOR_simple_strtoll
#endif
 
#ifndef APP_WRAPPER_FOR_simple_strtoll
#define APP_WRAPPER_FOR_simple_strtoll
FUNCTION_WRAPPER(simple_strtoll, (const char *_arg1, char **_arg2, unsigned int _arg3), {
    kern_printk("simple_strtoll is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    long long ret = simple_strtoll(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("simple_strtoll returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_vm_insert_pfn
#define APP_WRAPPER_FOR_vm_insert_pfn
#endif
 
#ifndef APP_WRAPPER_FOR_vm_insert_pfn
#define APP_WRAPPER_FOR_vm_insert_pfn
FUNCTION_WRAPPER(vm_insert_pfn, (struct vm_area_struct *vma, unsigned long addr, unsigned long pfn), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("vm_insert_pfn is invoked.\n");
    PRE_WRAPPER_FUNC(vma, addr, pfn);
    int ret = vm_insert_pfn(vma, addr, pfn);
    POST_WRAPPER_FUNC(vma, addr, pfn);
    kern_printk("vm_insert_pfn returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_rt_tgsigqueueinfo
#define APP_WRAPPER_FOR_compat_sys_rt_tgsigqueueinfo
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_rt_tgsigqueueinfo
#define APP_WRAPPER_FOR_compat_sys_rt_tgsigqueueinfo
FUNCTION_WRAPPER(compat_sys_rt_tgsigqueueinfo, (compat_pid_t tgid, compat_pid_t pid, int sig, struct compat_siginfo *uinfo), {
    kern_printk("compat_sys_rt_tgsigqueueinfo is invoked.\n");
    PRE_WRAPPER_FUNC(tgid, pid, sig, uinfo);
    long ret = compat_sys_rt_tgsigqueueinfo(tgid, pid, sig, uinfo);
    POST_WRAPPER_FUNC(tgid, pid, sig, uinfo);
    kern_printk("compat_sys_rt_tgsigqueueinfo returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_format_exception
#define APP_WRAPPER_FOR_acpi_format_exception
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_format_exception
#define APP_WRAPPER_FOR_acpi_format_exception
FUNCTION_WRAPPER(acpi_format_exception, (acpi_status exception), {
    kern_printk("acpi_format_exception is invoked.\n");
    PRE_WRAPPER_FUNC(exception);
    const char *ret = acpi_format_exception(exception);
    POST_WRAPPER_FUNC(exception);
    kern_printk("acpi_format_exception returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_lru_add_drain_all
#define APP_WRAPPER_FOR_lru_add_drain_all
#endif
 
#ifndef APP_WRAPPER_FOR_lru_add_drain_all
#define APP_WRAPPER_FOR_lru_add_drain_all
FUNCTION_WRAPPER(lru_add_drain_all, (), {
    kern_printk("lru_add_drain_all is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = lru_add_drain_all();
    POST_WRAPPER_FUNC();
    kern_printk("lru_add_drain_all returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_find_or_create_page
#define APP_WRAPPER_FOR_find_or_create_page
#endif
 
#ifndef APP_WRAPPER_FOR_find_or_create_page
#define APP_WRAPPER_FOR_find_or_create_page
FUNCTION_WRAPPER(find_or_create_page, (struct address_space *mapping, unsigned long index, gfp_t gfp_mask), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("find_or_create_page is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, index, gfp_mask);
    struct page *ret = find_or_create_page(mapping, index, gfp_mask);
    POST_WRAPPER_FUNC(mapping, index, gfp_mask);
    kern_printk("find_or_create_page returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_replace_mount_options
#define APP_WRAPPER_FOR_replace_mount_options
#endif
 
#ifndef APP_WRAPPER_FOR_replace_mount_options
#define APP_WRAPPER_FOR_replace_mount_options
FUNCTION_WRAPPER_VOID(replace_mount_options, (struct super_block *sb, char *options), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("replace_mount_options is invoked.\n");
    PRE_WRAPPER_FUNC(sb, options);
    replace_mount_options(sb, options);
    POST_WRAPPER_FUNC(sb, options);
    kern_printk("replace_mount_options returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
})
#endif


#ifndef KERN_ADDR_raw_notifier_call_chain
#define APP_WRAPPER_FOR_raw_notifier_call_chain
#endif
 
#ifndef APP_WRAPPER_FOR_raw_notifier_call_chain
#define APP_WRAPPER_FOR_raw_notifier_call_chain
FUNCTION_WRAPPER(raw_notifier_call_chain, (struct raw_notifier_head *nh, unsigned long val, void *v), {
    WRAP_RECURSIVE(nh);
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct raw_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    kern_printk("raw_notifier_call_chain is invoked.\n");
    PRE_WRAPPER_FUNC(nh, val, v);
    int ret = raw_notifier_call_chain(nh, val, v);
    POST_WRAPPER_FUNC(nh, val, v);
    kern_printk("raw_notifier_call_chain returned.\n");
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct raw_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    return ret;
})
#endif


#ifndef KERN_ADDR_full_name_hash
#define APP_WRAPPER_FOR_full_name_hash
#endif
 
#ifndef APP_WRAPPER_FOR_full_name_hash
#define APP_WRAPPER_FOR_full_name_hash
FUNCTION_WRAPPER(full_name_hash, (unsigned const char *_arg1, unsigned int _arg2), {
    kern_printk("full_name_hash is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = full_name_hash(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("full_name_hash returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_vlan_vid_del
#define APP_WRAPPER_FOR_vlan_vid_del
#endif
 
#ifndef APP_WRAPPER_FOR_vlan_vid_del
#define APP_WRAPPER_FOR_vlan_vid_del
FUNCTION_WRAPPER_VOID(vlan_vid_del, (struct net_device *dev, unsigned short vid), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("vlan_vid_del is invoked.\n");
    PRE_WRAPPER_FUNC(dev, vid);
    vlan_vid_del(dev, vid);
    POST_WRAPPER_FUNC(dev, vid);
    kern_printk("vlan_vid_del returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_compat_sys_msgrcv
#define APP_WRAPPER_FOR_compat_sys_msgrcv
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_msgrcv
#define APP_WRAPPER_FOR_compat_sys_msgrcv
FUNCTION_WRAPPER(compat_sys_msgrcv, (int first, int second, int msgtyp, int third, int version, void *uptr), {
    kern_printk("compat_sys_msgrcv is invoked.\n");
    PRE_WRAPPER_FUNC(first, second, msgtyp, third, version, uptr);
    long ret = compat_sys_msgrcv(first, second, msgtyp, third, version, uptr);
    POST_WRAPPER_FUNC(first, second, msgtyp, third, version, uptr);
    kern_printk("compat_sys_msgrcv returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_seq_release_net
#define APP_WRAPPER_FOR_seq_release_net
#endif
 
#ifndef APP_WRAPPER_FOR_seq_release_net
#define APP_WRAPPER_FOR_seq_release_net
FUNCTION_WRAPPER(seq_release_net, (struct inode *_arg1, struct file *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("seq_release_net is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = seq_release_net(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("seq_release_net returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bio_sector_offset
#define APP_WRAPPER_FOR_bio_sector_offset
#endif
 
#ifndef APP_WRAPPER_FOR_bio_sector_offset
#define APP_WRAPPER_FOR_bio_sector_offset
FUNCTION_WRAPPER(bio_sector_offset, (struct bio *_arg1, unsigned short _arg2, unsigned int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bio_sector_offset is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    sector_t ret = bio_sector_offset(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("bio_sector_offset returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_unregister_netdev
#define APP_WRAPPER_FOR_unregister_netdev
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_netdev
#define APP_WRAPPER_FOR_unregister_netdev
FUNCTION_WRAPPER_VOID(unregister_netdev, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("unregister_netdev is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    unregister_netdev(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("unregister_netdev returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_ata_sff_interrupt
#define APP_WRAPPER_FOR_ata_sff_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_interrupt
#define APP_WRAPPER_FOR_ata_sff_interrupt
FUNCTION_WRAPPER(ata_sff_interrupt, (int irq, void *dev_instance), {
    kern_printk("ata_sff_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC(irq, dev_instance);
    irqreturn_t ret = ata_sff_interrupt(irq, dev_instance);
    POST_WRAPPER_FUNC(irq, dev_instance);
    kern_printk("ata_sff_interrupt returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_seq_bitmap
#define APP_WRAPPER_FOR_seq_bitmap
#endif
 
#ifndef APP_WRAPPER_FOR_seq_bitmap
#define APP_WRAPPER_FOR_seq_bitmap
FUNCTION_WRAPPER(seq_bitmap, (struct seq_file *m, unsigned const long *bits, unsigned int nr_bits), {
    WRAP_RECURSIVE(m);
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
    kern_printk("seq_bitmap is invoked.\n");
    PRE_WRAPPER_FUNC(m, bits, nr_bits);
    int ret = seq_bitmap(m, bits, nr_bits);
    POST_WRAPPER_FUNC(m, bits, nr_bits);
    kern_printk("seq_bitmap returned.\n");
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_futex
#define APP_WRAPPER_FOR_compat_sys_futex
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_futex
#define APP_WRAPPER_FOR_compat_sys_futex
FUNCTION_WRAPPER(compat_sys_futex, (u32 *uaddr, int op, u32 val, struct compat_timespec *utime, u32 *uaddr2, u32 val3), {
    kern_printk("compat_sys_futex is invoked.\n");
    PRE_WRAPPER_FUNC(uaddr, op, val, utime, uaddr2, val3);
    long ret = compat_sys_futex(uaddr, op, val, utime, uaddr2, val3);
    POST_WRAPPER_FUNC(uaddr, op, val, utime, uaddr2, val3);
    kern_printk("compat_sys_futex returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_noop_qc_prep
#define APP_WRAPPER_FOR_ata_noop_qc_prep
#endif
 
#ifndef APP_WRAPPER_FOR_ata_noop_qc_prep
#define APP_WRAPPER_FOR_ata_noop_qc_prep
FUNCTION_WRAPPER_VOID(ata_noop_qc_prep, (struct ata_queued_cmd *qc), {
    WRAP_RECURSIVE(qc);
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    kern_printk("ata_noop_qc_prep is invoked.\n");
    PRE_WRAPPER_FUNC(qc);
    ata_noop_qc_prep(qc);
    POST_WRAPPER_FUNC(qc);
    kern_printk("ata_noop_qc_prep returned.\n");
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
})
#endif


#ifndef KERN_ADDR_dm_wait_event
#define APP_WRAPPER_FOR_dm_wait_event
#endif
 
#ifndef APP_WRAPPER_FOR_dm_wait_event
#define APP_WRAPPER_FOR_dm_wait_event
FUNCTION_WRAPPER(dm_wait_event, (struct mapped_device *md, int event_nr), {
    kern_printk("dm_wait_event is invoked.\n");
    PRE_WRAPPER_FUNC(md, event_nr);
    int ret = dm_wait_event(md, event_nr);
    POST_WRAPPER_FUNC(md, event_nr);
    kern_printk("dm_wait_event returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_in_gate_area
#define APP_WRAPPER_FOR_in_gate_area
#endif
 
#ifndef APP_WRAPPER_FOR_in_gate_area
#define APP_WRAPPER_FOR_in_gate_area
FUNCTION_WRAPPER(in_gate_area, (struct mm_struct *mm, unsigned long addr), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    kern_printk("in_gate_area is invoked.\n");
    PRE_WRAPPER_FUNC(mm, addr);
    int ret = in_gate_area(mm, addr);
    POST_WRAPPER_FUNC(mm, addr);
    kern_printk("in_gate_area returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    return ret;
})
#endif


#ifndef KERN_ADDR_textsearch_register
#define APP_WRAPPER_FOR_textsearch_register
#endif
 
#ifndef APP_WRAPPER_FOR_textsearch_register
#define APP_WRAPPER_FOR_textsearch_register
FUNCTION_WRAPPER(textsearch_register, (struct ts_ops *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ts_ops)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("textsearch_register is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = textsearch_register(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("textsearch_register returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ts_ops)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_task_set_jobctl_pending
#define APP_WRAPPER_FOR_task_set_jobctl_pending
#endif
 
#ifndef APP_WRAPPER_FOR_task_set_jobctl_pending
#define APP_WRAPPER_FOR_task_set_jobctl_pending
FUNCTION_WRAPPER(task_set_jobctl_pending, (struct task_struct *task, unsigned int mask), {
    WRAP_RECURSIVE(task);
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    kern_printk("task_set_jobctl_pending is invoked.\n");
    PRE_WRAPPER_FUNC(task, mask);
    bool ret = task_set_jobctl_pending(task, mask);
    POST_WRAPPER_FUNC(task, mask);
    kern_printk("task_set_jobctl_pending returned.\n");
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pm_generic_poweroff_noirq
#define APP_WRAPPER_FOR_pm_generic_poweroff_noirq
#endif
 
#ifndef APP_WRAPPER_FOR_pm_generic_poweroff_noirq
#define APP_WRAPPER_FOR_pm_generic_poweroff_noirq
FUNCTION_WRAPPER(pm_generic_poweroff_noirq, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pm_generic_poweroff_noirq is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pm_generic_poweroff_noirq(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pm_generic_poweroff_noirq returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_our_mnt
#define APP_WRAPPER_FOR_our_mnt
#endif
 
#ifndef APP_WRAPPER_FOR_our_mnt
#define APP_WRAPPER_FOR_our_mnt
FUNCTION_WRAPPER(our_mnt, (struct vfsmount *mnt), {
    WRAP_RECURSIVE(mnt);
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
    kern_printk("our_mnt is invoked.\n");
    PRE_WRAPPER_FUNC(mnt);
    bool ret = our_mnt(mnt);
    POST_WRAPPER_FUNC(mnt);
    kern_printk("our_mnt returned.\n");
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
    return ret;
})
#endif


#ifndef KERN_ADDR_wait_rcu_gp
#define APP_WRAPPER_FOR_wait_rcu_gp
#endif
 
#ifndef APP_WRAPPER_FOR_wait_rcu_gp
#define APP_WRAPPER_FOR_wait_rcu_gp
FUNCTION_WRAPPER_VOID(wait_rcu_gp, (call_rcu_func_t crf), {
    kern_printk("wait_rcu_gp is invoked.\n");
    PRE_WRAPPER_FUNC(crf);
    wait_rcu_gp(crf);
    POST_WRAPPER_FUNC(crf);
    kern_printk("wait_rcu_gp returned.\n");
})
#endif


#ifndef KERN_ADDR_device_wakeup_enable
#define APP_WRAPPER_FOR_device_wakeup_enable
#endif
 
#ifndef APP_WRAPPER_FOR_device_wakeup_enable
#define APP_WRAPPER_FOR_device_wakeup_enable
FUNCTION_WRAPPER(device_wakeup_enable, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("device_wakeup_enable is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = device_wakeup_enable(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("device_wakeup_enable returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_native_cpu_disable
#define APP_WRAPPER_FOR_native_cpu_disable
#endif
 
#ifndef APP_WRAPPER_FOR_native_cpu_disable
#define APP_WRAPPER_FOR_native_cpu_disable
FUNCTION_WRAPPER(native_cpu_disable, (), {
    kern_printk("native_cpu_disable is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = native_cpu_disable();
    POST_WRAPPER_FUNC();
    kern_printk("native_cpu_disable returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_phy_stop_interrupts
#define APP_WRAPPER_FOR_phy_stop_interrupts
#endif
 
#ifndef APP_WRAPPER_FOR_phy_stop_interrupts
#define APP_WRAPPER_FOR_phy_stop_interrupts
FUNCTION_WRAPPER(phy_stop_interrupts, (struct phy_device *phydev), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    kern_printk("phy_stop_interrupts is invoked.\n");
    PRE_WRAPPER_FUNC(phydev);
    int ret = phy_stop_interrupts(phydev);
    POST_WRAPPER_FUNC(phydev);
    kern_printk("phy_stop_interrupts returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_fixed_event_count
#define APP_WRAPPER_FOR_acpi_os_fixed_event_count
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_fixed_event_count
#define APP_WRAPPER_FOR_acpi_os_fixed_event_count
FUNCTION_WRAPPER_VOID(acpi_os_fixed_event_count, (u32 fixed_event_number), {
    kern_printk("acpi_os_fixed_event_count is invoked.\n");
    PRE_WRAPPER_FUNC(fixed_event_number);
    acpi_os_fixed_event_count(fixed_event_number);
    POST_WRAPPER_FUNC(fixed_event_number);
    kern_printk("acpi_os_fixed_event_count returned.\n");
})
#endif


#ifndef KERN_ADDR_lookup_swap_cache
#define APP_WRAPPER_FOR_lookup_swap_cache
#endif
 
#ifndef APP_WRAPPER_FOR_lookup_swap_cache
#define APP_WRAPPER_FOR_lookup_swap_cache
FUNCTION_WRAPPER(lookup_swap_cache, (swp_entry_t _arg1), {
    kern_printk("lookup_swap_cache is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct page *ret = lookup_swap_cache(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("lookup_swap_cache returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_devres_for_each_res
#define APP_WRAPPER_FOR_devres_for_each_res
#endif
 
#ifndef APP_WRAPPER_FOR_devres_for_each_res
#define APP_WRAPPER_FOR_devres_for_each_res
FUNCTION_WRAPPER_VOID(devres_for_each_res, (struct device *dev, dr_release_t release, dr_match_t match, void *match_data, void (*fn)(struct device *, void *, void *), void *data), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_FUNCTION(release);
    WRAP_FUNCTION(match);
    WRAP_FUNCTION(fn);
    kern_printk("devres_for_each_res is invoked.\n");
    PRE_WRAPPER_FUNC(dev, release, match, match_data, fn, data);
    devres_for_each_res(dev, release, match, match_data, fn, data);
    POST_WRAPPER_FUNC(dev, release, match, match_data, fn, data);
    kern_printk("devres_for_each_res returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_keyring_clear
#define APP_WRAPPER_FOR_keyring_clear
#endif
 
#ifndef APP_WRAPPER_FOR_keyring_clear
#define APP_WRAPPER_FOR_keyring_clear
FUNCTION_WRAPPER(keyring_clear, (struct key *keyring), {
    kern_printk("keyring_clear is invoked.\n");
    PRE_WRAPPER_FUNC(keyring);
    int ret = keyring_clear(keyring);
    POST_WRAPPER_FUNC(keyring);
    kern_printk("keyring_clear returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_hrtimer_interrupt
#define APP_WRAPPER_FOR_hrtimer_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_hrtimer_interrupt
#define APP_WRAPPER_FOR_hrtimer_interrupt
FUNCTION_WRAPPER_VOID(hrtimer_interrupt, (struct clock_event_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct clock_event_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("hrtimer_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    hrtimer_interrupt(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("hrtimer_interrupt returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct clock_event_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_partition_sched_domains
#define APP_WRAPPER_FOR_partition_sched_domains
#endif
 
#ifndef APP_WRAPPER_FOR_partition_sched_domains
#define APP_WRAPPER_FOR_partition_sched_domains
FUNCTION_WRAPPER_VOID(partition_sched_domains, (int ndoms_new, cpumask_var_t doms_new[], struct sched_domain_attr *dattr_new), {
    kern_printk("partition_sched_domains is invoked.\n");
    PRE_WRAPPER_FUNC(ndoms_new, doms_new, dattr_new);
    partition_sched_domains(ndoms_new, doms_new, dattr_new);
    POST_WRAPPER_FUNC(ndoms_new, doms_new, dattr_new);
    kern_printk("partition_sched_domains returned.\n");
})
#endif


#ifndef KERN_ADDR_jbd2_journal_file_inode
#define APP_WRAPPER_FOR_jbd2_journal_file_inode
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_file_inode
#define APP_WRAPPER_FOR_jbd2_journal_file_inode
FUNCTION_WRAPPER(jbd2_journal_file_inode, (handle_t *handle, struct jbd2_inode *inode), {
    WRAP_RECURSIVE(handle);
    TRACES_IF_WATCHPOINT(handle);
    SCAN_HEAD_FUNC(handle_t)(*(TO_UNWATCHED_ADDRESS(handle)));
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct jbd2_inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("jbd2_journal_file_inode is invoked.\n");
    PRE_WRAPPER_FUNC(handle, inode);
    int ret = jbd2_journal_file_inode(handle, inode);
    POST_WRAPPER_FUNC(handle, inode);
    kern_printk("jbd2_journal_file_inode returned.\n");
    TRACES_IF_WATCHPOINT(handle);
    SCAN_HEAD_FUNC(handle_t)(*(TO_UNWATCHED_ADDRESS(handle)));
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct jbd2_inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_set_affinity_hint
#define APP_WRAPPER_FOR_irq_set_affinity_hint
#endif
 
#ifndef APP_WRAPPER_FOR_irq_set_affinity_hint
#define APP_WRAPPER_FOR_irq_set_affinity_hint
FUNCTION_WRAPPER(irq_set_affinity_hint, (unsigned int irq, const struct cpumask *m), {
    kern_printk("irq_set_affinity_hint is invoked.\n");
    PRE_WRAPPER_FUNC(irq, m);
    int ret = irq_set_affinity_hint(irq, m);
    POST_WRAPPER_FUNC(irq, m);
    kern_printk("irq_set_affinity_hint returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_vmemmap_verify
#define APP_WRAPPER_FOR_vmemmap_verify
#endif
 
#ifndef APP_WRAPPER_FOR_vmemmap_verify
#define APP_WRAPPER_FOR_vmemmap_verify
FUNCTION_WRAPPER_VOID(vmemmap_verify, (pte_t *_arg1, int _arg2, unsigned long _arg3, unsigned long _arg4), {
    kern_printk("vmemmap_verify is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    vmemmap_verify(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("vmemmap_verify returned.\n");
})
#endif


#ifndef KERN_ADDR___get_user_pages_fast
#define APP_WRAPPER_FOR___get_user_pages_fast
#endif
 
#ifndef APP_WRAPPER_FOR___get_user_pages_fast
#define APP_WRAPPER_FOR___get_user_pages_fast
FUNCTION_WRAPPER(__get_user_pages_fast, (unsigned long start, int nr_pages, int write, struct page **pages), {
    WRAP_RECURSIVE(pages);
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    kern_printk("__get_user_pages_fast is invoked.\n");
    PRE_WRAPPER_FUNC(start, nr_pages, write, pages);
    int ret = __get_user_pages_fast(start, nr_pages, write, pages);
    POST_WRAPPER_FUNC(start, nr_pages, write, pages);
    kern_printk("__get_user_pages_fast returned.\n");
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_frag_find
#define APP_WRAPPER_FOR_inet_frag_find
#endif
 
#ifndef APP_WRAPPER_FOR_inet_frag_find
#define APP_WRAPPER_FOR_inet_frag_find
FUNCTION_WRAPPER(inet_frag_find, (struct netns_frags *nf, struct inet_frags *f, void *key, unsigned int hash), {
    WRAP_RECURSIVE(f);
    TRACES_IF_WATCHPOINT(f);
    SCAN_HEAD_FUNC(struct inet_frags)(*(TO_UNWATCHED_ADDRESS(f)));
    kern_printk("inet_frag_find is invoked.\n");
    PRE_WRAPPER_FUNC(nf, f, key, hash);
    struct inet_frag_queue *ret = inet_frag_find(nf, f, key, hash);
    POST_WRAPPER_FUNC(nf, f, key, hash);
    kern_printk("inet_frag_find returned.\n");
    TRACES_IF_WATCHPOINT(f);
    SCAN_HEAD_FUNC(struct inet_frags)(*(TO_UNWATCHED_ADDRESS(f)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_set_allmulti
#define APP_WRAPPER_FOR_dev_set_allmulti
#endif
 
#ifndef APP_WRAPPER_FOR_dev_set_allmulti
#define APP_WRAPPER_FOR_dev_set_allmulti
FUNCTION_WRAPPER(dev_set_allmulti, (struct net_device *dev, int inc), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_set_allmulti is invoked.\n");
    PRE_WRAPPER_FUNC(dev, inc);
    int ret = dev_set_allmulti(dev, inc);
    POST_WRAPPER_FUNC(dev, inc);
    kern_printk("dev_set_allmulti returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_show_swap_cache_info
#define APP_WRAPPER_FOR_show_swap_cache_info
#endif
 
#ifndef APP_WRAPPER_FOR_show_swap_cache_info
#define APP_WRAPPER_FOR_show_swap_cache_info
FUNCTION_WRAPPER_VOID(show_swap_cache_info, (), {
    kern_printk("show_swap_cache_info is invoked.\n");
    PRE_WRAPPER_FUNC();
    show_swap_cache_info();
    POST_WRAPPER_FUNC();
    kern_printk("show_swap_cache_info returned.\n");
})
#endif


#ifndef KERN_ADDR___bitmap_shift_right
#define APP_WRAPPER_FOR___bitmap_shift_right
#endif
 
#ifndef APP_WRAPPER_FOR___bitmap_shift_right
#define APP_WRAPPER_FOR___bitmap_shift_right
FUNCTION_WRAPPER_VOID(__bitmap_shift_right, (unsigned long *dst, unsigned const long *src, int shift, int bits), {
    kern_printk("__bitmap_shift_right is invoked.\n");
    PRE_WRAPPER_FUNC(dst, src, shift, bits);
    __bitmap_shift_right(dst, src, shift, bits);
    POST_WRAPPER_FUNC(dst, src, shift, bits);
    kern_printk("__bitmap_shift_right returned.\n");
})
#endif


#ifndef KERN_ADDR_vma_interval_tree_insert_after
#define APP_WRAPPER_FOR_vma_interval_tree_insert_after
#endif
 
#ifndef APP_WRAPPER_FOR_vma_interval_tree_insert_after
#define APP_WRAPPER_FOR_vma_interval_tree_insert_after
FUNCTION_WRAPPER_VOID(vma_interval_tree_insert_after, (struct vm_area_struct *node, struct vm_area_struct *prev, struct rb_root *root), {
    WRAP_RECURSIVE(node);
    TRACES_IF_WATCHPOINT(node);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(node)));
    WRAP_RECURSIVE(prev);
    TRACES_IF_WATCHPOINT(prev);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(prev)));
    kern_printk("vma_interval_tree_insert_after is invoked.\n");
    PRE_WRAPPER_FUNC(node, prev, root);
    vma_interval_tree_insert_after(node, prev, root);
    POST_WRAPPER_FUNC(node, prev, root);
    kern_printk("vma_interval_tree_insert_after returned.\n");
    TRACES_IF_WATCHPOINT(node);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(node)));
    TRACES_IF_WATCHPOINT(prev);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(prev)));
})
#endif


#ifndef KERN_ADDR_acpi_video_dmi_promote_vendor
#define APP_WRAPPER_FOR_acpi_video_dmi_promote_vendor
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_video_dmi_promote_vendor
#define APP_WRAPPER_FOR_acpi_video_dmi_promote_vendor
FUNCTION_WRAPPER_VOID(acpi_video_dmi_promote_vendor, (), {
    kern_printk("acpi_video_dmi_promote_vendor is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_video_dmi_promote_vendor();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_video_dmi_promote_vendor returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_restore_msi_state
#define APP_WRAPPER_FOR_pci_restore_msi_state
#endif
 
#ifndef APP_WRAPPER_FOR_pci_restore_msi_state
#define APP_WRAPPER_FOR_pci_restore_msi_state
FUNCTION_WRAPPER_VOID(pci_restore_msi_state, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_restore_msi_state is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pci_restore_msi_state(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_restore_msi_state returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_clear_inode
#define APP_WRAPPER_FOR_clear_inode
#endif
 
#ifndef APP_WRAPPER_FOR_clear_inode
#define APP_WRAPPER_FOR_clear_inode
FUNCTION_WRAPPER_VOID(clear_inode, (struct inode *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("clear_inode is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    clear_inode(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("clear_inode returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR___blk_end_request_all
#define APP_WRAPPER_FOR___blk_end_request_all
#endif
 
#ifndef APP_WRAPPER_FOR___blk_end_request_all
#define APP_WRAPPER_FOR___blk_end_request_all
FUNCTION_WRAPPER_VOID(__blk_end_request_all, (struct request *rq, int error), {
    WRAP_RECURSIVE(rq);
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    kern_printk("__blk_end_request_all is invoked.\n");
    PRE_WRAPPER_FUNC(rq, error);
    __blk_end_request_all(rq, error);
    POST_WRAPPER_FUNC(rq, error);
    kern_printk("__blk_end_request_all returned.\n");
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
})
#endif


#ifndef KERN_ADDR_rtmsg_ifinfo
#define APP_WRAPPER_FOR_rtmsg_ifinfo
#endif
 
#ifndef APP_WRAPPER_FOR_rtmsg_ifinfo
#define APP_WRAPPER_FOR_rtmsg_ifinfo
FUNCTION_WRAPPER_VOID(rtmsg_ifinfo, (int type, struct net_device *dev, unsigned int change), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("rtmsg_ifinfo is invoked.\n");
    PRE_WRAPPER_FUNC(type, dev, change);
    rtmsg_ifinfo(type, dev, change);
    POST_WRAPPER_FUNC(type, dev, change);
    kern_printk("rtmsg_ifinfo returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_acpi_numa_arch_fixup
#define APP_WRAPPER_FOR_acpi_numa_arch_fixup
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_numa_arch_fixup
#define APP_WRAPPER_FOR_acpi_numa_arch_fixup
FUNCTION_WRAPPER_VOID(acpi_numa_arch_fixup, (), {
    kern_printk("acpi_numa_arch_fixup is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_numa_arch_fixup();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_numa_arch_fixup returned.\n");
})
#endif


#ifndef KERN_ADDR__paravirt_ident_32
#define APP_WRAPPER_FOR__paravirt_ident_32
#endif
 
#ifndef APP_WRAPPER_FOR__paravirt_ident_32
#define APP_WRAPPER_FOR__paravirt_ident_32
FUNCTION_WRAPPER(_paravirt_ident_32, (u32 _arg1), {
    kern_printk("_paravirt_ident_32 is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    u32 ret = _paravirt_ident_32(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("_paravirt_ident_32 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_bus_set_ops
#define APP_WRAPPER_FOR_pci_bus_set_ops
#endif
 
#ifndef APP_WRAPPER_FOR_pci_bus_set_ops
#define APP_WRAPPER_FOR_pci_bus_set_ops
FUNCTION_WRAPPER(pci_bus_set_ops, (struct pci_bus *bus, struct pci_ops *ops), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    WRAP_RECURSIVE(ops);
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct pci_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    kern_printk("pci_bus_set_ops is invoked.\n");
    PRE_WRAPPER_FUNC(bus, ops);
    struct pci_ops *ret = pci_bus_set_ops(bus, ops);
    POST_WRAPPER_FUNC(bus, ops);
    kern_printk("pci_bus_set_ops returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct pci_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_set_chip_and_handler_name
#define APP_WRAPPER_FOR_irq_set_chip_and_handler_name
#endif
 
#ifndef APP_WRAPPER_FOR_irq_set_chip_and_handler_name
#define APP_WRAPPER_FOR_irq_set_chip_and_handler_name
FUNCTION_WRAPPER_VOID(irq_set_chip_and_handler_name, (unsigned int irq, struct irq_chip *chip, irq_flow_handler_t handle, const char *name), {
    WRAP_RECURSIVE(chip);
    TRACES_IF_WATCHPOINT(chip);
    SCAN_HEAD_FUNC(struct irq_chip)(*(TO_UNWATCHED_ADDRESS(chip)));
    WRAP_FUNCTION(handle);
    kern_printk("irq_set_chip_and_handler_name is invoked.\n");
    PRE_WRAPPER_FUNC(irq, chip, handle, name);
    irq_set_chip_and_handler_name(irq, chip, handle, name);
    POST_WRAPPER_FUNC(irq, chip, handle, name);
    kern_printk("irq_set_chip_and_handler_name returned.\n");
    TRACES_IF_WATCHPOINT(chip);
    SCAN_HEAD_FUNC(struct irq_chip)(*(TO_UNWATCHED_ADDRESS(chip)));
})
#endif


#ifndef KERN_ADDR_read_persistent_clock
#define APP_WRAPPER_FOR_read_persistent_clock
#endif
 
#ifndef APP_WRAPPER_FOR_read_persistent_clock
#define APP_WRAPPER_FOR_read_persistent_clock
FUNCTION_WRAPPER_VOID(read_persistent_clock, (struct timespec *ts), {
    kern_printk("read_persistent_clock is invoked.\n");
    PRE_WRAPPER_FUNC(ts);
    read_persistent_clock(ts);
    POST_WRAPPER_FUNC(ts);
    kern_printk("read_persistent_clock returned.\n");
})
#endif


#ifndef KERN_ADDR_abort_creds
#define APP_WRAPPER_FOR_abort_creds
#endif
 
#ifndef APP_WRAPPER_FOR_abort_creds
#define APP_WRAPPER_FOR_abort_creds
FUNCTION_WRAPPER_VOID(abort_creds, (struct cred *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct cred)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("abort_creds is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    abort_creds(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("abort_creds returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct cred)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_generic_file_aio_read
#define APP_WRAPPER_FOR_generic_file_aio_read
#endif
 
#ifndef APP_WRAPPER_FOR_generic_file_aio_read
#define APP_WRAPPER_FOR_generic_file_aio_read
FUNCTION_WRAPPER(generic_file_aio_read, (struct kiocb *_arg1, const struct iovec *_arg2, unsigned long _arg3, loff_t _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("generic_file_aio_read is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    ssize_t ret = generic_file_aio_read(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("generic_file_aio_read returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_semtimedop
#define APP_WRAPPER_FOR_compat_sys_semtimedop
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_semtimedop
#define APP_WRAPPER_FOR_compat_sys_semtimedop
FUNCTION_WRAPPER(compat_sys_semtimedop, (int semid, struct sembuf *tsems, unsigned int nsems, const struct compat_timespec *timeout), {
    kern_printk("compat_sys_semtimedop is invoked.\n");
    PRE_WRAPPER_FUNC(semid, tsems, nsems, timeout);
    long ret = compat_sys_semtimedop(semid, tsems, nsems, timeout);
    POST_WRAPPER_FUNC(semid, tsems, nsems, timeout);
    kern_printk("compat_sys_semtimedop returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_local_bh_enable_ip
#define APP_WRAPPER_FOR_local_bh_enable_ip
#endif
 
#ifndef APP_WRAPPER_FOR_local_bh_enable_ip
#define APP_WRAPPER_FOR_local_bh_enable_ip
FUNCTION_WRAPPER_VOID(local_bh_enable_ip, (unsigned long ip), {
    kern_printk("local_bh_enable_ip is invoked.\n");
    PRE_WRAPPER_FUNC(ip);
    local_bh_enable_ip(ip);
    POST_WRAPPER_FUNC(ip);
    kern_printk("local_bh_enable_ip returned.\n");
})
#endif


#ifndef KERN_ADDR_input_alloc_absinfo
#define APP_WRAPPER_FOR_input_alloc_absinfo
#endif
 
#ifndef APP_WRAPPER_FOR_input_alloc_absinfo
#define APP_WRAPPER_FOR_input_alloc_absinfo
FUNCTION_WRAPPER_VOID(input_alloc_absinfo, (struct input_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("input_alloc_absinfo is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    input_alloc_absinfo(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("input_alloc_absinfo returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_pm_generic_complete
#define APP_WRAPPER_FOR_pm_generic_complete
#endif
 
#ifndef APP_WRAPPER_FOR_pm_generic_complete
#define APP_WRAPPER_FOR_pm_generic_complete
FUNCTION_WRAPPER_VOID(pm_generic_complete, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pm_generic_complete is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pm_generic_complete(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pm_generic_complete returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_dma_wait_for_async_tx
#define APP_WRAPPER_FOR_dma_wait_for_async_tx
#endif
 
#ifndef APP_WRAPPER_FOR_dma_wait_for_async_tx
#define APP_WRAPPER_FOR_dma_wait_for_async_tx
FUNCTION_WRAPPER(dma_wait_for_async_tx, (struct dma_async_tx_descriptor *tx), {
    WRAP_RECURSIVE(tx);
    TRACES_IF_WATCHPOINT(tx);
    SCAN_HEAD_FUNC(struct dma_async_tx_descriptor)(*(TO_UNWATCHED_ADDRESS(tx)));
    kern_printk("dma_wait_for_async_tx is invoked.\n");
    PRE_WRAPPER_FUNC(tx);
    enum dma_status ret = dma_wait_for_async_tx(tx);
    POST_WRAPPER_FUNC(tx);
    kern_printk("dma_wait_for_async_tx returned.\n");
    TRACES_IF_WATCHPOINT(tx);
    SCAN_HEAD_FUNC(struct dma_async_tx_descriptor)(*(TO_UNWATCHED_ADDRESS(tx)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___jbd2_update_log_tail
#define APP_WRAPPER_FOR___jbd2_update_log_tail
#endif
 
#ifndef APP_WRAPPER_FOR___jbd2_update_log_tail
#define APP_WRAPPER_FOR___jbd2_update_log_tail
FUNCTION_WRAPPER_VOID(__jbd2_update_log_tail, (journal_t *journal, tid_t tid, unsigned long block), {
    WRAP_RECURSIVE(journal);
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    kern_printk("__jbd2_update_log_tail is invoked.\n");
    PRE_WRAPPER_FUNC(journal, tid, block);
    __jbd2_update_log_tail(journal, tid, block);
    POST_WRAPPER_FUNC(journal, tid, block);
    kern_printk("__jbd2_update_log_tail returned.\n");
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
})
#endif


#ifndef KERN_ADDR_pci_read_vpd
#define APP_WRAPPER_FOR_pci_read_vpd
#endif
 
#ifndef APP_WRAPPER_FOR_pci_read_vpd
#define APP_WRAPPER_FOR_pci_read_vpd
FUNCTION_WRAPPER(pci_read_vpd, (struct pci_dev *dev, loff_t pos, size_t count, void *buf), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_read_vpd is invoked.\n");
    PRE_WRAPPER_FUNC(dev, pos, count, buf);
    ssize_t ret = pci_read_vpd(dev, pos, count, buf);
    POST_WRAPPER_FUNC(dev, pos, count, buf);
    kern_printk("pci_read_vpd returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_update_pm_runtime_accounting
#define APP_WRAPPER_FOR_update_pm_runtime_accounting
#endif
 
#ifndef APP_WRAPPER_FOR_update_pm_runtime_accounting
#define APP_WRAPPER_FOR_update_pm_runtime_accounting
FUNCTION_WRAPPER_VOID(update_pm_runtime_accounting, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("update_pm_runtime_accounting is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    update_pm_runtime_accounting(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("update_pm_runtime_accounting returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_input_event
#define APP_WRAPPER_FOR_input_event
#endif
 
#ifndef APP_WRAPPER_FOR_input_event
#define APP_WRAPPER_FOR_input_event
FUNCTION_WRAPPER_VOID(input_event, (struct input_dev *dev, unsigned int type, unsigned int code, int value), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("input_event is invoked.\n");
    PRE_WRAPPER_FUNC(dev, type, code, value);
    input_event(dev, type, code, value);
    POST_WRAPPER_FUNC(dev, type, code, value);
    kern_printk("input_event returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_search_extable
#define APP_WRAPPER_FOR_search_extable
#endif
 
#ifndef APP_WRAPPER_FOR_search_extable
#define APP_WRAPPER_FOR_search_extable
FUNCTION_WRAPPER(search_extable, (const struct exception_table_entry *first, const struct exception_table_entry *last, unsigned long value), {
    kern_printk("search_extable is invoked.\n");
    PRE_WRAPPER_FUNC(first, last, value);
    const struct exception_table_entry *ret = search_extable(first, last, value);
    POST_WRAPPER_FUNC(first, last, value);
    kern_printk("search_extable returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_exit
#define APP_WRAPPER_FOR_irq_exit
#endif
 
#ifndef APP_WRAPPER_FOR_irq_exit
#define APP_WRAPPER_FOR_irq_exit
FUNCTION_WRAPPER_VOID(irq_exit, (), {
    kern_printk("irq_exit is invoked.\n");
    PRE_WRAPPER_FUNC();
    irq_exit();
    POST_WRAPPER_FUNC();
    kern_printk("irq_exit returned.\n");
})
#endif


#ifndef KERN_ADDR_compat_sys_gettimeofday
#define APP_WRAPPER_FOR_compat_sys_gettimeofday
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_gettimeofday
#define APP_WRAPPER_FOR_compat_sys_gettimeofday
FUNCTION_WRAPPER(compat_sys_gettimeofday, (struct compat_timeval *tv, struct timezone *tz), {
    kern_printk("compat_sys_gettimeofday is invoked.\n");
    PRE_WRAPPER_FUNC(tv, tz);
    long ret = compat_sys_gettimeofday(tv, tz);
    POST_WRAPPER_FUNC(tv, tz);
    kern_printk("compat_sys_gettimeofday returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_handle_irq
#define APP_WRAPPER_FOR_handle_irq
#endif
 
#ifndef APP_WRAPPER_FOR_handle_irq
#define APP_WRAPPER_FOR_handle_irq
FUNCTION_WRAPPER(handle_irq, (unsigned int irq, struct pt_regs *regs), {
    kern_printk("handle_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq, regs);
    bool ret = handle_irq(irq, regs);
    POST_WRAPPER_FUNC(irq, regs);
    kern_printk("handle_irq returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___register_sysctl_table
#define APP_WRAPPER_FOR___register_sysctl_table
#endif
 
#ifndef APP_WRAPPER_FOR___register_sysctl_table
#define APP_WRAPPER_FOR___register_sysctl_table
FUNCTION_WRAPPER(__register_sysctl_table, (struct ctl_table_set *set, const char *path, struct ctl_table *table), {
    WRAP_RECURSIVE(set);
    TRACES_IF_WATCHPOINT(set);
    SCAN_HEAD_FUNC(struct ctl_table_set)(*(TO_UNWATCHED_ADDRESS(set)));
    WRAP_RECURSIVE(table);
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    kern_printk("__register_sysctl_table is invoked.\n");
    PRE_WRAPPER_FUNC(set, path, table);
    struct ctl_table_header *ret = __register_sysctl_table(set, path, table);
    POST_WRAPPER_FUNC(set, path, table);
    kern_printk("__register_sysctl_table returned.\n");
    TRACES_IF_WATCHPOINT(set);
    SCAN_HEAD_FUNC(struct ctl_table_set)(*(TO_UNWATCHED_ADDRESS(set)));
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_schedule_on_each_cpu
#define APP_WRAPPER_FOR_schedule_on_each_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_schedule_on_each_cpu
#define APP_WRAPPER_FOR_schedule_on_each_cpu
FUNCTION_WRAPPER(schedule_on_each_cpu, (work_func_t func), {
    WRAP_FUNCTION(func);
    kern_printk("schedule_on_each_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(func);
    int ret = schedule_on_each_cpu(func);
    POST_WRAPPER_FUNC(func);
    kern_printk("schedule_on_each_cpu returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_map_pxm_to_node
#define APP_WRAPPER_FOR_acpi_map_pxm_to_node
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_map_pxm_to_node
#define APP_WRAPPER_FOR_acpi_map_pxm_to_node
FUNCTION_WRAPPER(acpi_map_pxm_to_node, (int _arg1), {
    kern_printk("acpi_map_pxm_to_node is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = acpi_map_pxm_to_node(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("acpi_map_pxm_to_node returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_clocks_calc_mult_shift
#define APP_WRAPPER_FOR_clocks_calc_mult_shift
#endif
 
#ifndef APP_WRAPPER_FOR_clocks_calc_mult_shift
#define APP_WRAPPER_FOR_clocks_calc_mult_shift
FUNCTION_WRAPPER_VOID(clocks_calc_mult_shift, (u32 *mult, u32 *shift, u32 from, u32 to, u32 minsec), {
    kern_printk("clocks_calc_mult_shift is invoked.\n");
    PRE_WRAPPER_FUNC(mult, shift, from, to, minsec);
    clocks_calc_mult_shift(mult, shift, from, to, minsec);
    POST_WRAPPER_FUNC(mult, shift, from, to, minsec);
    kern_printk("clocks_calc_mult_shift returned.\n");
})
#endif


#ifndef KERN_ADDR_qdisc_tree_decrease_qlen
#define APP_WRAPPER_FOR_qdisc_tree_decrease_qlen
#endif
 
#ifndef APP_WRAPPER_FOR_qdisc_tree_decrease_qlen
#define APP_WRAPPER_FOR_qdisc_tree_decrease_qlen
FUNCTION_WRAPPER_VOID(qdisc_tree_decrease_qlen, (struct Qdisc *qdisc, unsigned int n), {
    WRAP_RECURSIVE(qdisc);
    TRACES_IF_WATCHPOINT(qdisc);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(qdisc)));
    kern_printk("qdisc_tree_decrease_qlen is invoked.\n");
    PRE_WRAPPER_FUNC(qdisc, n);
    qdisc_tree_decrease_qlen(qdisc, n);
    POST_WRAPPER_FUNC(qdisc, n);
    kern_printk("qdisc_tree_decrease_qlen returned.\n");
    TRACES_IF_WATCHPOINT(qdisc);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(qdisc)));
})
#endif


#ifndef KERN_ADDR_acpi_reset
#define APP_WRAPPER_FOR_acpi_reset
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_reset
#define APP_WRAPPER_FOR_acpi_reset
FUNCTION_WRAPPER(acpi_reset, (), {
    kern_printk("acpi_reset is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_status ret = acpi_reset();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_reset returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_mem_cgroup_sockets_init
#define APP_WRAPPER_FOR_mem_cgroup_sockets_init
#endif
 
#ifndef APP_WRAPPER_FOR_mem_cgroup_sockets_init
#define APP_WRAPPER_FOR_mem_cgroup_sockets_init
FUNCTION_WRAPPER(mem_cgroup_sockets_init, (struct mem_cgroup *memcg, struct cgroup_subsys *ss), {
    WRAP_RECURSIVE(ss);
    TRACES_IF_WATCHPOINT(ss);
    SCAN_HEAD_FUNC(struct cgroup_subsys)(*(TO_UNWATCHED_ADDRESS(ss)));
    kern_printk("mem_cgroup_sockets_init is invoked.\n");
    PRE_WRAPPER_FUNC(memcg, ss);
    int ret = mem_cgroup_sockets_init(memcg, ss);
    POST_WRAPPER_FUNC(memcg, ss);
    kern_printk("mem_cgroup_sockets_init returned.\n");
    TRACES_IF_WATCHPOINT(ss);
    SCAN_HEAD_FUNC(struct cgroup_subsys)(*(TO_UNWATCHED_ADDRESS(ss)));
    return ret;
})
#endif


#ifndef KERN_ADDR_fprop_local_init_single
#define APP_WRAPPER_FOR_fprop_local_init_single
#endif
 
#ifndef APP_WRAPPER_FOR_fprop_local_init_single
#define APP_WRAPPER_FOR_fprop_local_init_single
FUNCTION_WRAPPER(fprop_local_init_single, (struct fprop_local_single *pl), {
    kern_printk("fprop_local_init_single is invoked.\n");
    PRE_WRAPPER_FUNC(pl);
    int ret = fprop_local_init_single(pl);
    POST_WRAPPER_FUNC(pl);
    kern_printk("fprop_local_init_single returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_subsys_resume_early
#define APP_WRAPPER_FOR_acpi_subsys_resume_early
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_subsys_resume_early
#define APP_WRAPPER_FOR_acpi_subsys_resume_early
FUNCTION_WRAPPER(acpi_subsys_resume_early, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("acpi_subsys_resume_early is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = acpi_subsys_resume_early(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("acpi_subsys_resume_early returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_page_evictable
#define APP_WRAPPER_FOR_page_evictable
#endif
 
#ifndef APP_WRAPPER_FOR_page_evictable
#define APP_WRAPPER_FOR_page_evictable
FUNCTION_WRAPPER(page_evictable, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("page_evictable is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    int ret = page_evictable(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("page_evictable returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_bus_add_device
#define APP_WRAPPER_FOR_pci_bus_add_device
#endif
 
#ifndef APP_WRAPPER_FOR_pci_bus_add_device
#define APP_WRAPPER_FOR_pci_bus_add_device
FUNCTION_WRAPPER(pci_bus_add_device, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_bus_add_device is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pci_bus_add_device(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_bus_add_device returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sk_run_filter
#define APP_WRAPPER_FOR_sk_run_filter
#endif
 
#ifndef APP_WRAPPER_FOR_sk_run_filter
#define APP_WRAPPER_FOR_sk_run_filter
FUNCTION_WRAPPER(sk_run_filter, (const struct sk_buff *skb, const struct sock_filter *filter), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(const struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("sk_run_filter is invoked.\n");
    PRE_WRAPPER_FUNC(skb, filter);
    int ret = sk_run_filter(skb, filter);
    POST_WRAPPER_FUNC(skb, filter);
    kern_printk("sk_run_filter returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(const struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_integrity_is_initialized
#define APP_WRAPPER_FOR_blk_integrity_is_initialized
#endif
 
#ifndef APP_WRAPPER_FOR_blk_integrity_is_initialized
#define APP_WRAPPER_FOR_blk_integrity_is_initialized
FUNCTION_WRAPPER(blk_integrity_is_initialized, (struct gendisk *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_integrity_is_initialized is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    bool ret = blk_integrity_is_initialized(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("blk_integrity_is_initialized returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_locks_release_private
#define APP_WRAPPER_FOR_locks_release_private
#endif
 
#ifndef APP_WRAPPER_FOR_locks_release_private
#define APP_WRAPPER_FOR_locks_release_private
FUNCTION_WRAPPER_VOID(locks_release_private, (struct file_lock *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("locks_release_private is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    locks_release_private(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("locks_release_private returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_regs_query_register_name
#define APP_WRAPPER_FOR_regs_query_register_name
#endif
 
#ifndef APP_WRAPPER_FOR_regs_query_register_name
#define APP_WRAPPER_FOR_regs_query_register_name
FUNCTION_WRAPPER(regs_query_register_name, (unsigned int offset), {
    kern_printk("regs_query_register_name is invoked.\n");
    PRE_WRAPPER_FUNC(offset);
    const char *ret = regs_query_register_name(offset);
    POST_WRAPPER_FUNC(offset);
    kern_printk("regs_query_register_name returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_device_attach
#define APP_WRAPPER_FOR_device_attach
#endif
 
#ifndef APP_WRAPPER_FOR_device_attach
#define APP_WRAPPER_FOR_device_attach
FUNCTION_WRAPPER(device_attach, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("device_attach is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = device_attach(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("device_attach returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_eh_qc_complete
#define APP_WRAPPER_FOR_ata_eh_qc_complete
#endif
 
#ifndef APP_WRAPPER_FOR_ata_eh_qc_complete
#define APP_WRAPPER_FOR_ata_eh_qc_complete
FUNCTION_WRAPPER_VOID(ata_eh_qc_complete, (struct ata_queued_cmd *qc), {
    WRAP_RECURSIVE(qc);
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    kern_printk("ata_eh_qc_complete is invoked.\n");
    PRE_WRAPPER_FUNC(qc);
    ata_eh_qc_complete(qc);
    POST_WRAPPER_FUNC(qc);
    kern_printk("ata_eh_qc_complete returned.\n");
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
})
#endif


#ifndef KERN_ADDR_dev_restart
#define APP_WRAPPER_FOR_dev_restart
#endif
 
#ifndef APP_WRAPPER_FOR_dev_restart
#define APP_WRAPPER_FOR_dev_restart
FUNCTION_WRAPPER(dev_restart, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_restart is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = dev_restart(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_restart returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_net_drop_ns
#define APP_WRAPPER_FOR_net_drop_ns
#endif
 
#ifndef APP_WRAPPER_FOR_net_drop_ns
#define APP_WRAPPER_FOR_net_drop_ns
FUNCTION_WRAPPER_VOID(net_drop_ns, (void *_arg1), {
    kern_printk("net_drop_ns is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    net_drop_ns(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("net_drop_ns returned.\n");
})
#endif


#ifndef KERN_ADDR_thaw_bdev
#define APP_WRAPPER_FOR_thaw_bdev
#endif
 
#ifndef APP_WRAPPER_FOR_thaw_bdev
#define APP_WRAPPER_FOR_thaw_bdev
FUNCTION_WRAPPER(thaw_bdev, (struct block_device *bdev, struct super_block *sb), {
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("thaw_bdev is invoked.\n");
    PRE_WRAPPER_FUNC(bdev, sb);
    int ret = thaw_bdev(bdev, sb);
    POST_WRAPPER_FUNC(bdev, sb);
    kern_printk("thaw_bdev returned.\n");
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_usermodehelper_init
#define APP_WRAPPER_FOR_usermodehelper_init
#endif
 
#ifndef APP_WRAPPER_FOR_usermodehelper_init
#define APP_WRAPPER_FOR_usermodehelper_init
FUNCTION_WRAPPER_VOID(usermodehelper_init, (), {
    kern_printk("usermodehelper_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    usermodehelper_init();
    POST_WRAPPER_FUNC();
    kern_printk("usermodehelper_init returned.\n");
})
#endif


#ifndef KERN_ADDR_mount_bdev
#define APP_WRAPPER_FOR_mount_bdev
#endif
 
#ifndef APP_WRAPPER_FOR_mount_bdev
#define APP_WRAPPER_FOR_mount_bdev
FUNCTION_WRAPPER(mount_bdev, (struct file_system_type *fs_type, int flags, const char *dev_name, void *data, int (*fill_super)(struct super_block *, void *, int)), {
    WRAP_RECURSIVE(fs_type);
    TRACES_IF_WATCHPOINT(fs_type);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(fs_type)));
    WRAP_FUNCTION(fill_super);
    kern_printk("mount_bdev is invoked.\n");
    PRE_WRAPPER_FUNC(fs_type, flags, dev_name, data, fill_super);
    struct dentry *ret = mount_bdev(fs_type, flags, dev_name, data, fill_super);
    POST_WRAPPER_FUNC(fs_type, flags, dev_name, data, fill_super);
    kern_printk("mount_bdev returned.\n");
    TRACES_IF_WATCHPOINT(fs_type);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(fs_type)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___free_pages
#define APP_WRAPPER_FOR___free_pages
#endif
 
#ifndef APP_WRAPPER_FOR___free_pages
#define APP_WRAPPER_FOR___free_pages
FUNCTION_WRAPPER_VOID(__free_pages, (struct page *page, unsigned int order), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("__free_pages is invoked.\n");
    PRE_WRAPPER_FUNC(page, order);
    __free_pages(page, order);
    POST_WRAPPER_FUNC(page, order);
    kern_printk("__free_pages returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_bio_uncopy_user
#define APP_WRAPPER_FOR_bio_uncopy_user
#endif
 
#ifndef APP_WRAPPER_FOR_bio_uncopy_user
#define APP_WRAPPER_FOR_bio_uncopy_user
FUNCTION_WRAPPER(bio_uncopy_user, (struct bio *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bio_uncopy_user is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = bio_uncopy_user(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("bio_uncopy_user returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_device_pm_wait_for_dev
#define APP_WRAPPER_FOR_device_pm_wait_for_dev
#endif
 
#ifndef APP_WRAPPER_FOR_device_pm_wait_for_dev
#define APP_WRAPPER_FOR_device_pm_wait_for_dev
FUNCTION_WRAPPER(device_pm_wait_for_dev, (struct device *sub, struct device *dev), {
    WRAP_RECURSIVE(sub);
    TRACES_IF_WATCHPOINT(sub);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(sub)));
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("device_pm_wait_for_dev is invoked.\n");
    PRE_WRAPPER_FUNC(sub, dev);
    int ret = device_pm_wait_for_dev(sub, dev);
    POST_WRAPPER_FUNC(sub, dev);
    kern_printk("device_pm_wait_for_dev returned.\n");
    TRACES_IF_WATCHPOINT(sub);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(sub)));
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_map_vm_area
#define APP_WRAPPER_FOR_map_vm_area
#endif
 
#ifndef APP_WRAPPER_FOR_map_vm_area
#define APP_WRAPPER_FOR_map_vm_area
FUNCTION_WRAPPER(map_vm_area, (struct vm_struct *area, pgprot_t prot, struct page ***pages), {
    WRAP_RECURSIVE(area);
    TRACES_IF_WATCHPOINT(area);
    SCAN_HEAD_FUNC(struct vm_struct)(*(TO_UNWATCHED_ADDRESS(area)));
    WRAP_RECURSIVE(pages);
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page **)(*(TO_UNWATCHED_ADDRESS(pages)));
    kern_printk("map_vm_area is invoked.\n");
    PRE_WRAPPER_FUNC(area, prot, pages);
    int ret = map_vm_area(area, prot, pages);
    POST_WRAPPER_FUNC(area, prot, pages);
    kern_printk("map_vm_area returned.\n");
    TRACES_IF_WATCHPOINT(area);
    SCAN_HEAD_FUNC(struct vm_struct)(*(TO_UNWATCHED_ADDRESS(area)));
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page **)(*(TO_UNWATCHED_ADDRESS(pages)));
    return ret;
})
#endif


#ifndef KERN_ADDR_find_lock_page
#define APP_WRAPPER_FOR_find_lock_page
#endif
 
#ifndef APP_WRAPPER_FOR_find_lock_page
#define APP_WRAPPER_FOR_find_lock_page
FUNCTION_WRAPPER(find_lock_page, (struct address_space *mapping, unsigned long index), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("find_lock_page is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, index);
    struct page *ret = find_lock_page(mapping, index);
    POST_WRAPPER_FUNC(mapping, index);
    kern_printk("find_lock_page returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_stop_root_bus
#define APP_WRAPPER_FOR_pci_stop_root_bus
#endif
 
#ifndef APP_WRAPPER_FOR_pci_stop_root_bus
#define APP_WRAPPER_FOR_pci_stop_root_bus
FUNCTION_WRAPPER_VOID(pci_stop_root_bus, (struct pci_bus *bus), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_stop_root_bus is invoked.\n");
    PRE_WRAPPER_FUNC(bus);
    pci_stop_root_bus(bus);
    POST_WRAPPER_FUNC(bus);
    kern_printk("pci_stop_root_bus returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
})
#endif


#ifndef KERN_ADDR_e820_end_of_ram_pfn
#define APP_WRAPPER_FOR_e820_end_of_ram_pfn
#endif
 
#ifndef APP_WRAPPER_FOR_e820_end_of_ram_pfn
#define APP_WRAPPER_FOR_e820_end_of_ram_pfn
FUNCTION_WRAPPER(e820_end_of_ram_pfn, (), {
    kern_printk("e820_end_of_ram_pfn is invoked.\n");
    PRE_WRAPPER_FUNC();
    long ret = e820_end_of_ram_pfn();
    POST_WRAPPER_FUNC();
    kern_printk("e820_end_of_ram_pfn returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_probe_irq_off
#define APP_WRAPPER_FOR_probe_irq_off
#endif
 
#ifndef APP_WRAPPER_FOR_probe_irq_off
#define APP_WRAPPER_FOR_probe_irq_off
FUNCTION_WRAPPER(probe_irq_off, (unsigned long _arg1), {
    kern_printk("probe_irq_off is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = probe_irq_off(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("probe_irq_off returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___getblk
#define APP_WRAPPER_FOR___getblk
#endif
 
#ifndef APP_WRAPPER_FOR___getblk
#define APP_WRAPPER_FOR___getblk
FUNCTION_WRAPPER(__getblk, (struct block_device *bdev, sector_t block, unsigned int size), {
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    kern_printk("__getblk is invoked.\n");
    PRE_WRAPPER_FUNC(bdev, block, size);
    struct buffer_head *ret = __getblk(bdev, block, size);
    POST_WRAPPER_FUNC(bdev, block, size);
    kern_printk("__getblk returned.\n");
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_vlan_vid_add
#define APP_WRAPPER_FOR_vlan_vid_add
#endif
 
#ifndef APP_WRAPPER_FOR_vlan_vid_add
#define APP_WRAPPER_FOR_vlan_vid_add
FUNCTION_WRAPPER(vlan_vid_add, (struct net_device *dev, unsigned short vid), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("vlan_vid_add is invoked.\n");
    PRE_WRAPPER_FUNC(dev, vid);
    int ret = vlan_vid_add(dev, vid);
    POST_WRAPPER_FUNC(dev, vid);
    kern_printk("vlan_vid_add returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_rcu_barrier
#define APP_WRAPPER_FOR_rcu_barrier
#endif
 
#ifndef APP_WRAPPER_FOR_rcu_barrier
#define APP_WRAPPER_FOR_rcu_barrier
FUNCTION_WRAPPER_VOID(rcu_barrier, (), {
    kern_printk("rcu_barrier is invoked.\n");
    PRE_WRAPPER_FUNC();
    rcu_barrier();
    POST_WRAPPER_FUNC();
    kern_printk("rcu_barrier returned.\n");
})
#endif


#ifndef KERN_ADDR_kstrtoll
#define APP_WRAPPER_FOR_kstrtoll
#endif
 
#ifndef APP_WRAPPER_FOR_kstrtoll
#define APP_WRAPPER_FOR_kstrtoll
FUNCTION_WRAPPER(kstrtoll, (const char *s, unsigned int base, long long *res), {
    kern_printk("kstrtoll is invoked.\n");
    PRE_WRAPPER_FUNC(s, base, res);
    int ret = kstrtoll(s, base, res);
    POST_WRAPPER_FUNC(s, base, res);
    kern_printk("kstrtoll returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_default_file_splice_read
#define APP_WRAPPER_FOR_default_file_splice_read
#endif
 
#ifndef APP_WRAPPER_FOR_default_file_splice_read
#define APP_WRAPPER_FOR_default_file_splice_read
FUNCTION_WRAPPER(default_file_splice_read, (struct file *_arg1, loff_t *_arg2, struct pipe_inode_info *_arg3, size_t _arg4, unsigned int _arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("default_file_splice_read is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    ssize_t ret = default_file_splice_read(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("default_file_splice_read returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_param_get_short
#define APP_WRAPPER_FOR_param_get_short
#endif
 
#ifndef APP_WRAPPER_FOR_param_get_short
#define APP_WRAPPER_FOR_param_get_short
FUNCTION_WRAPPER(param_get_short, (char *buffer, const struct kernel_param *kp), {
    WRAP_RECURSIVE(kp);
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    kern_printk("param_get_short is invoked.\n");
    PRE_WRAPPER_FUNC(buffer, kp);
    int ret = param_get_short(buffer, kp);
    POST_WRAPPER_FUNC(buffer, kp);
    kern_printk("param_get_short returned.\n");
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sk_receive_skb
#define APP_WRAPPER_FOR_sk_receive_skb
#endif
 
#ifndef APP_WRAPPER_FOR_sk_receive_skb
#define APP_WRAPPER_FOR_sk_receive_skb
FUNCTION_WRAPPER(sk_receive_skb, (struct sock *sk, struct sk_buff *skb, const int nested), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("sk_receive_skb is invoked.\n");
    PRE_WRAPPER_FUNC(sk, skb, nested);
    int ret = sk_receive_skb(sk, skb, nested);
    POST_WRAPPER_FUNC(sk, skb, nested);
    kern_printk("sk_receive_skb returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR___dev_get_by_name
#define APP_WRAPPER_FOR___dev_get_by_name
#endif
 
#ifndef APP_WRAPPER_FOR___dev_get_by_name
#define APP_WRAPPER_FOR___dev_get_by_name
FUNCTION_WRAPPER(__dev_get_by_name, (struct net *net, const char *name), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    kern_printk("__dev_get_by_name is invoked.\n");
    PRE_WRAPPER_FUNC(net, name);
    struct net_device *ret = __dev_get_by_name(net, name);
    POST_WRAPPER_FUNC(net, name);
    kern_printk("__dev_get_by_name returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_nf_hook_slow
#define APP_WRAPPER_FOR_nf_hook_slow
#endif
 
#ifndef APP_WRAPPER_FOR_nf_hook_slow
#define APP_WRAPPER_FOR_nf_hook_slow
FUNCTION_WRAPPER(nf_hook_slow, (u_int8_t pf, unsigned int hook, struct sk_buff *skb, struct net_device *indev, struct net_device *outdev, int (*okfn)(struct sk_buff *), int thresh), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_RECURSIVE(indev);
    TRACES_IF_WATCHPOINT(indev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(indev)));
    WRAP_RECURSIVE(outdev);
    TRACES_IF_WATCHPOINT(outdev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(outdev)));
    WRAP_FUNCTION(okfn);
    kern_printk("nf_hook_slow is invoked.\n");
    PRE_WRAPPER_FUNC(pf, hook, skb, indev, outdev, okfn, thresh);
    int ret = nf_hook_slow(pf, hook, skb, indev, outdev, okfn, thresh);
    POST_WRAPPER_FUNC(pf, hook, skb, indev, outdev, okfn, thresh);
    kern_printk("nf_hook_slow returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    TRACES_IF_WATCHPOINT(indev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(indev)));
    TRACES_IF_WATCHPOINT(outdev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(outdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_futimesat
#define APP_WRAPPER_FOR_compat_sys_futimesat
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_futimesat
#define APP_WRAPPER_FOR_compat_sys_futimesat
FUNCTION_WRAPPER(compat_sys_futimesat, (unsigned int dfd, const char *filename, struct compat_timeval *t), {
    kern_printk("compat_sys_futimesat is invoked.\n");
    PRE_WRAPPER_FUNC(dfd, filename, t);
    long ret = compat_sys_futimesat(dfd, filename, t);
    POST_WRAPPER_FUNC(dfd, filename, t);
    kern_printk("compat_sys_futimesat returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_set_current_groups
#define APP_WRAPPER_FOR_set_current_groups
#endif
 
#ifndef APP_WRAPPER_FOR_set_current_groups
#define APP_WRAPPER_FOR_set_current_groups
FUNCTION_WRAPPER(set_current_groups, (struct group_info *_arg1), {
    kern_printk("set_current_groups is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = set_current_groups(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("set_current_groups returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_radix_tree_locate_item
#define APP_WRAPPER_FOR_radix_tree_locate_item
#endif
 
#ifndef APP_WRAPPER_FOR_radix_tree_locate_item
#define APP_WRAPPER_FOR_radix_tree_locate_item
FUNCTION_WRAPPER(radix_tree_locate_item, (struct radix_tree_root *root, void *item), {
    kern_printk("radix_tree_locate_item is invoked.\n");
    PRE_WRAPPER_FUNC(root, item);
    long ret = radix_tree_locate_item(root, item);
    POST_WRAPPER_FUNC(root, item);
    kern_printk("radix_tree_locate_item returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_pm_qos_read_value
#define APP_WRAPPER_FOR_dev_pm_qos_read_value
#endif
 
#ifndef APP_WRAPPER_FOR_dev_pm_qos_read_value
#define APP_WRAPPER_FOR_dev_pm_qos_read_value
FUNCTION_WRAPPER(dev_pm_qos_read_value, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_pm_qos_read_value is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    s32 ret = dev_pm_qos_read_value(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_pm_qos_read_value returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_checksum_help
#define APP_WRAPPER_FOR_skb_checksum_help
#endif
 
#ifndef APP_WRAPPER_FOR_skb_checksum_help
#define APP_WRAPPER_FOR_skb_checksum_help
FUNCTION_WRAPPER(skb_checksum_help, (struct sk_buff *skb), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_checksum_help is invoked.\n");
    PRE_WRAPPER_FUNC(skb);
    int ret = skb_checksum_help(skb);
    POST_WRAPPER_FUNC(skb);
    kern_printk("skb_checksum_help returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ptep_clear_flush_young
#define APP_WRAPPER_FOR_ptep_clear_flush_young
#endif
 
#ifndef APP_WRAPPER_FOR_ptep_clear_flush_young
#define APP_WRAPPER_FOR_ptep_clear_flush_young
FUNCTION_WRAPPER(ptep_clear_flush_young, (struct vm_area_struct *vma, unsigned long address, pte_t *ptep), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("ptep_clear_flush_young is invoked.\n");
    PRE_WRAPPER_FUNC(vma, address, ptep);
    int ret = ptep_clear_flush_young(vma, address, ptep);
    POST_WRAPPER_FUNC(vma, address, ptep);
    kern_printk("ptep_clear_flush_young returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_put_device
#define APP_WRAPPER_FOR_put_device
#endif
 
#ifndef APP_WRAPPER_FOR_put_device
#define APP_WRAPPER_FOR_put_device
FUNCTION_WRAPPER_VOID(put_device, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("put_device is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    put_device(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("put_device returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_clocksource_touch_watchdog
#define APP_WRAPPER_FOR_clocksource_touch_watchdog
#endif
 
#ifndef APP_WRAPPER_FOR_clocksource_touch_watchdog
#define APP_WRAPPER_FOR_clocksource_touch_watchdog
FUNCTION_WRAPPER_VOID(clocksource_touch_watchdog, (), {
    kern_printk("clocksource_touch_watchdog is invoked.\n");
    PRE_WRAPPER_FUNC();
    clocksource_touch_watchdog();
    POST_WRAPPER_FUNC();
    kern_printk("clocksource_touch_watchdog returned.\n");
})
#endif


#ifndef KERN_ADDR_mntput
#define APP_WRAPPER_FOR_mntput
#endif
 
#ifndef APP_WRAPPER_FOR_mntput
#define APP_WRAPPER_FOR_mntput
FUNCTION_WRAPPER_VOID(mntput, (struct vfsmount *mnt), {
    WRAP_RECURSIVE(mnt);
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
    kern_printk("mntput is invoked.\n");
    PRE_WRAPPER_FUNC(mnt);
    mntput(mnt);
    POST_WRAPPER_FUNC(mnt);
    kern_printk("mntput returned.\n");
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
})
#endif


#ifndef KERN_ADDR_ida_get_new_above
#define APP_WRAPPER_FOR_ida_get_new_above
#endif
 
#ifndef APP_WRAPPER_FOR_ida_get_new_above
#define APP_WRAPPER_FOR_ida_get_new_above
FUNCTION_WRAPPER(ida_get_new_above, (struct ida *ida, int starting_id, int *p_id), {
    WRAP_RECURSIVE(ida);
    TRACES_IF_WATCHPOINT(ida);
    SCAN_HEAD_FUNC(struct ida)(*(TO_UNWATCHED_ADDRESS(ida)));
    kern_printk("ida_get_new_above is invoked.\n");
    PRE_WRAPPER_FUNC(ida, starting_id, p_id);
    int ret = ida_get_new_above(ida, starting_id, p_id);
    POST_WRAPPER_FUNC(ida, starting_id, p_id);
    kern_printk("ida_get_new_above returned.\n");
    TRACES_IF_WATCHPOINT(ida);
    SCAN_HEAD_FUNC(struct ida)(*(TO_UNWATCHED_ADDRESS(ida)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_terminate
#define APP_WRAPPER_FOR_acpi_terminate
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_terminate
#define APP_WRAPPER_FOR_acpi_terminate
FUNCTION_WRAPPER(acpi_terminate, (), {
    kern_printk("acpi_terminate is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_status ret = acpi_terminate();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_terminate returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_set_cpu_online
#define APP_WRAPPER_FOR_set_cpu_online
#endif
 
#ifndef APP_WRAPPER_FOR_set_cpu_online
#define APP_WRAPPER_FOR_set_cpu_online
FUNCTION_WRAPPER_VOID(set_cpu_online, (unsigned int cpu, bool online), {
    kern_printk("set_cpu_online is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, online);
    set_cpu_online(cpu, online);
    POST_WRAPPER_FUNC(cpu, online);
    kern_printk("set_cpu_online returned.\n");
})
#endif


#ifndef KERN_ADDR_compat_sys_openat
#define APP_WRAPPER_FOR_compat_sys_openat
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_openat
#define APP_WRAPPER_FOR_compat_sys_openat
FUNCTION_WRAPPER(compat_sys_openat, (unsigned int dfd, const char *filename, int flags, umode_t mode), {
    kern_printk("compat_sys_openat is invoked.\n");
    PRE_WRAPPER_FUNC(dfd, filename, flags, mode);
    long ret = compat_sys_openat(dfd, filename, flags, mode);
    POST_WRAPPER_FUNC(dfd, filename, flags, mode);
    kern_printk("compat_sys_openat returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_cgroup_load_subsys
#define APP_WRAPPER_FOR_cgroup_load_subsys
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_load_subsys
#define APP_WRAPPER_FOR_cgroup_load_subsys
FUNCTION_WRAPPER(cgroup_load_subsys, (struct cgroup_subsys *ss), {
    WRAP_RECURSIVE(ss);
    TRACES_IF_WATCHPOINT(ss);
    SCAN_HEAD_FUNC(struct cgroup_subsys)(*(TO_UNWATCHED_ADDRESS(ss)));
    kern_printk("cgroup_load_subsys is invoked.\n");
    PRE_WRAPPER_FUNC(ss);
    int ret = cgroup_load_subsys(ss);
    POST_WRAPPER_FUNC(ss);
    kern_printk("cgroup_load_subsys returned.\n");
    TRACES_IF_WATCHPOINT(ss);
    SCAN_HEAD_FUNC(struct cgroup_subsys)(*(TO_UNWATCHED_ADDRESS(ss)));
    return ret;
})
#endif


#ifndef KERN_ADDR_netdev_warn
#define APP_WRAPPER_FOR_netdev_warn
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_warn
#define APP_WRAPPER_FOR_netdev_warn
FUNCTION_WRAPPER(netdev_warn, (const struct net_device *dev, const char *format, ...), {
    va_list args__;
    va_start(args__, format);
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    // TODO: variadic arguments
    kern_printk("netdev_warn is invoked.\n");
    PRE_WRAPPER_FUNC(dev, format);
    int ret = netdev_warn(dev, format);
    POST_WRAPPER_FUNC(dev, format);
    kern_printk("netdev_warn returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_crypto_alloc_shash
#define APP_WRAPPER_FOR_crypto_alloc_shash
#endif
 
#ifndef APP_WRAPPER_FOR_crypto_alloc_shash
#define APP_WRAPPER_FOR_crypto_alloc_shash
FUNCTION_WRAPPER(crypto_alloc_shash, (const char *alg_name, u32 type, u32 mask), {
    kern_printk("crypto_alloc_shash is invoked.\n");
    PRE_WRAPPER_FUNC(alg_name, type, mask);
    struct crypto_shash *ret = crypto_alloc_shash(alg_name, type, mask);
    POST_WRAPPER_FUNC(alg_name, type, mask);
    kern_printk("crypto_alloc_shash returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_get_filesystem_list
#define APP_WRAPPER_FOR_get_filesystem_list
#endif
 
#ifndef APP_WRAPPER_FOR_get_filesystem_list
#define APP_WRAPPER_FOR_get_filesystem_list
FUNCTION_WRAPPER(get_filesystem_list, (char *buf), {
    kern_printk("get_filesystem_list is invoked.\n");
    PRE_WRAPPER_FUNC(buf);
    int ret = get_filesystem_list(buf);
    POST_WRAPPER_FUNC(buf);
    kern_printk("get_filesystem_list returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_link_nr_enabled
#define APP_WRAPPER_FOR_ata_link_nr_enabled
#endif
 
#ifndef APP_WRAPPER_FOR_ata_link_nr_enabled
#define APP_WRAPPER_FOR_ata_link_nr_enabled
FUNCTION_WRAPPER(ata_link_nr_enabled, (struct ata_link *link), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    kern_printk("ata_link_nr_enabled is invoked.\n");
    PRE_WRAPPER_FUNC(link);
    int ret = ata_link_nr_enabled(link);
    POST_WRAPPER_FUNC(link);
    kern_printk("ata_link_nr_enabled returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    return ret;
})
#endif


#ifndef KERN_ADDR___xchg_wrong_size
#define APP_WRAPPER_FOR___xchg_wrong_size
#endif
 
#ifndef APP_WRAPPER_FOR___xchg_wrong_size
#define APP_WRAPPER_FOR___xchg_wrong_size
FUNCTION_WRAPPER_VOID(__xchg_wrong_size, (), {
    kern_printk("__xchg_wrong_size is invoked.\n");
    PRE_WRAPPER_FUNC();
    __xchg_wrong_size();
    POST_WRAPPER_FUNC();
    kern_printk("__xchg_wrong_size returned.\n");
})
#endif


#ifndef KERN_ADDR_prctl_get_seccomp
#define APP_WRAPPER_FOR_prctl_get_seccomp
#endif
 
#ifndef APP_WRAPPER_FOR_prctl_get_seccomp
#define APP_WRAPPER_FOR_prctl_get_seccomp
FUNCTION_WRAPPER(prctl_get_seccomp, (), {
    kern_printk("prctl_get_seccomp is invoked.\n");
    PRE_WRAPPER_FUNC();
    long ret = prctl_get_seccomp();
    POST_WRAPPER_FUNC();
    kern_printk("prctl_get_seccomp returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_cgroup_path
#define APP_WRAPPER_FOR_cgroup_path
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_path
#define APP_WRAPPER_FOR_cgroup_path
FUNCTION_WRAPPER(cgroup_path, (const struct cgroup *cgrp, char *buf, int buflen), {
    WRAP_RECURSIVE(cgrp);
    TRACES_IF_WATCHPOINT(cgrp);
    SCAN_HEAD_FUNC(const struct cgroup)(*(TO_UNWATCHED_ADDRESS(cgrp)));
    kern_printk("cgroup_path is invoked.\n");
    PRE_WRAPPER_FUNC(cgrp, buf, buflen);
    int ret = cgroup_path(cgrp, buf, buflen);
    POST_WRAPPER_FUNC(cgrp, buf, buflen);
    kern_printk("cgroup_path returned.\n");
    TRACES_IF_WATCHPOINT(cgrp);
    SCAN_HEAD_FUNC(const struct cgroup)(*(TO_UNWATCHED_ADDRESS(cgrp)));
    return ret;
})
#endif


#ifndef KERN_ADDR___sock_create
#define APP_WRAPPER_FOR___sock_create
#endif
 
#ifndef APP_WRAPPER_FOR___sock_create
#define APP_WRAPPER_FOR___sock_create
FUNCTION_WRAPPER(__sock_create, (struct net *net, int family, int type, int proto, struct socket **res, int kern), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    WRAP_RECURSIVE(res);
    TRACES_IF_WATCHPOINT(res);
    SCAN_HEAD_FUNC(struct socket *)(*(TO_UNWATCHED_ADDRESS(res)));
    kern_printk("__sock_create is invoked.\n");
    PRE_WRAPPER_FUNC(net, family, type, proto, res, kern);
    int ret = __sock_create(net, family, type, proto, res, kern);
    POST_WRAPPER_FUNC(net, family, type, proto, res, kern);
    kern_printk("__sock_create returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    TRACES_IF_WATCHPOINT(res);
    SCAN_HEAD_FUNC(struct socket *)(*(TO_UNWATCHED_ADDRESS(res)));
    return ret;
})
#endif


#ifndef KERN_ADDR_tsk_fork_get_node
#define APP_WRAPPER_FOR_tsk_fork_get_node
#endif
 
#ifndef APP_WRAPPER_FOR_tsk_fork_get_node
#define APP_WRAPPER_FOR_tsk_fork_get_node
FUNCTION_WRAPPER(tsk_fork_get_node, (struct task_struct *tsk), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("tsk_fork_get_node is invoked.\n");
    PRE_WRAPPER_FUNC(tsk);
    int ret = tsk_fork_get_node(tsk);
    POST_WRAPPER_FUNC(tsk);
    kern_printk("tsk_fork_get_node returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_exit_files
#define APP_WRAPPER_FOR_exit_files
#endif
 
#ifndef APP_WRAPPER_FOR_exit_files
#define APP_WRAPPER_FOR_exit_files
FUNCTION_WRAPPER_VOID(exit_files, (struct task_struct *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("exit_files is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    exit_files(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("exit_files returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_simple_xattr_list
#define APP_WRAPPER_FOR_simple_xattr_list
#endif
 
#ifndef APP_WRAPPER_FOR_simple_xattr_list
#define APP_WRAPPER_FOR_simple_xattr_list
FUNCTION_WRAPPER(simple_xattr_list, (struct simple_xattrs *xattrs, char *buffer, size_t size), {
    kern_printk("simple_xattr_list is invoked.\n");
    PRE_WRAPPER_FUNC(xattrs, buffer, size);
    ssize_t ret = simple_xattr_list(xattrs, buffer, size);
    POST_WRAPPER_FUNC(xattrs, buffer, size);
    kern_printk("simple_xattr_list returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_lockup_detector_init
#define APP_WRAPPER_FOR_lockup_detector_init
#endif
 
#ifndef APP_WRAPPER_FOR_lockup_detector_init
#define APP_WRAPPER_FOR_lockup_detector_init
FUNCTION_WRAPPER_VOID(lockup_detector_init, (), {
    kern_printk("lockup_detector_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    lockup_detector_init();
    POST_WRAPPER_FUNC();
    kern_printk("lockup_detector_init returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_dev_get_resources
#define APP_WRAPPER_FOR_acpi_dev_get_resources
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_dev_get_resources
#define APP_WRAPPER_FOR_acpi_dev_get_resources
FUNCTION_WRAPPER(acpi_dev_get_resources, (struct acpi_device *adev, struct list_head *list, int (*preproc)(struct acpi_resource *, void *), void *preproc_data), {
    WRAP_RECURSIVE(adev);
    TRACES_IF_WATCHPOINT(adev);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(adev)));
    WRAP_FUNCTION(preproc);
    kern_printk("acpi_dev_get_resources is invoked.\n");
    PRE_WRAPPER_FUNC(adev, list, preproc, preproc_data);
    int ret = acpi_dev_get_resources(adev, list, preproc, preproc_data);
    POST_WRAPPER_FUNC(adev, list, preproc, preproc_data);
    kern_printk("acpi_dev_get_resources returned.\n");
    TRACES_IF_WATCHPOINT(adev);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(adev)));
    return ret;
})
#endif


#ifndef KERN_ADDR___clocksource_updatefreq_scale
#define APP_WRAPPER_FOR___clocksource_updatefreq_scale
#endif
 
#ifndef APP_WRAPPER_FOR___clocksource_updatefreq_scale
#define APP_WRAPPER_FOR___clocksource_updatefreq_scale
FUNCTION_WRAPPER_VOID(__clocksource_updatefreq_scale, (struct clocksource *cs, u32 scale, u32 freq), {
    WRAP_RECURSIVE(cs);
    TRACES_IF_WATCHPOINT(cs);
    SCAN_HEAD_FUNC(struct clocksource)(*(TO_UNWATCHED_ADDRESS(cs)));
    kern_printk("__clocksource_updatefreq_scale is invoked.\n");
    PRE_WRAPPER_FUNC(cs, scale, freq);
    __clocksource_updatefreq_scale(cs, scale, freq);
    POST_WRAPPER_FUNC(cs, scale, freq);
    kern_printk("__clocksource_updatefreq_scale returned.\n");
    TRACES_IF_WATCHPOINT(cs);
    SCAN_HEAD_FUNC(struct clocksource)(*(TO_UNWATCHED_ADDRESS(cs)));
})
#endif


#ifndef KERN_ADDR_kobj_ns_netlink
#define APP_WRAPPER_FOR_kobj_ns_netlink
#endif
 
#ifndef APP_WRAPPER_FOR_kobj_ns_netlink
#define APP_WRAPPER_FOR_kobj_ns_netlink
FUNCTION_WRAPPER(kobj_ns_netlink, (enum kobj_ns_type type, struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("kobj_ns_netlink is invoked.\n");
    PRE_WRAPPER_FUNC(type, sk);
    const void *ret = kobj_ns_netlink(type, sk);
    POST_WRAPPER_FUNC(type, sk);
    kern_printk("kobj_ns_netlink returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_touch_all_softlockup_watchdogs
#define APP_WRAPPER_FOR_touch_all_softlockup_watchdogs
#endif
 
#ifndef APP_WRAPPER_FOR_touch_all_softlockup_watchdogs
#define APP_WRAPPER_FOR_touch_all_softlockup_watchdogs
FUNCTION_WRAPPER_VOID(touch_all_softlockup_watchdogs, (), {
    kern_printk("touch_all_softlockup_watchdogs is invoked.\n");
    PRE_WRAPPER_FUNC();
    touch_all_softlockup_watchdogs();
    POST_WRAPPER_FUNC();
    kern_printk("touch_all_softlockup_watchdogs returned.\n");
})
#endif


#ifndef KERN_ADDR_pneigh_delete
#define APP_WRAPPER_FOR_pneigh_delete
#endif
 
#ifndef APP_WRAPPER_FOR_pneigh_delete
#define APP_WRAPPER_FOR_pneigh_delete
FUNCTION_WRAPPER(pneigh_delete, (struct neigh_table *tbl, struct net *net, const void *key, struct net_device *dev), {
    WRAP_RECURSIVE(tbl);
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pneigh_delete is invoked.\n");
    PRE_WRAPPER_FUNC(tbl, net, key, dev);
    int ret = pneigh_delete(tbl, net, key, dev);
    POST_WRAPPER_FUNC(tbl, net, key, dev);
    kern_printk("pneigh_delete returned.\n");
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_netdev_drivername
#define APP_WRAPPER_FOR_netdev_drivername
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_drivername
#define APP_WRAPPER_FOR_netdev_drivername
FUNCTION_WRAPPER(netdev_drivername, (const struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("netdev_drivername is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    const char *ret = netdev_drivername(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("netdev_drivername returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___register_sysctl_paths
#define APP_WRAPPER_FOR___register_sysctl_paths
#endif
 
#ifndef APP_WRAPPER_FOR___register_sysctl_paths
#define APP_WRAPPER_FOR___register_sysctl_paths
FUNCTION_WRAPPER(__register_sysctl_paths, (struct ctl_table_set *set, const struct ctl_path *path, struct ctl_table *table), {
    WRAP_RECURSIVE(set);
    TRACES_IF_WATCHPOINT(set);
    SCAN_HEAD_FUNC(struct ctl_table_set)(*(TO_UNWATCHED_ADDRESS(set)));
    WRAP_RECURSIVE(table);
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    kern_printk("__register_sysctl_paths is invoked.\n");
    PRE_WRAPPER_FUNC(set, path, table);
    struct ctl_table_header *ret = __register_sysctl_paths(set, path, table);
    POST_WRAPPER_FUNC(set, path, table);
    kern_printk("__register_sysctl_paths returned.\n");
    TRACES_IF_WATCHPOINT(set);
    SCAN_HEAD_FUNC(struct ctl_table_set)(*(TO_UNWATCHED_ADDRESS(set)));
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sysfs_streq
#define APP_WRAPPER_FOR_sysfs_streq
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_streq
#define APP_WRAPPER_FOR_sysfs_streq
FUNCTION_WRAPPER(sysfs_streq, (const char *s1, const char *s2), {
    kern_printk("sysfs_streq is invoked.\n");
    PRE_WRAPPER_FUNC(s1, s2);
    bool ret = sysfs_streq(s1, s2);
    POST_WRAPPER_FUNC(s1, s2);
    kern_printk("sysfs_streq returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_recvmsg
#define APP_WRAPPER_FOR_compat_sys_recvmsg
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_recvmsg
#define APP_WRAPPER_FOR_compat_sys_recvmsg
FUNCTION_WRAPPER(compat_sys_recvmsg, (int fd, struct compat_msghdr *msg, unsigned int flags), {
    kern_printk("compat_sys_recvmsg is invoked.\n");
    PRE_WRAPPER_FUNC(fd, msg, flags);
    long ret = compat_sys_recvmsg(fd, msg, flags);
    POST_WRAPPER_FUNC(fd, msg, flags);
    kern_printk("compat_sys_recvmsg returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_inode_wait
#define APP_WRAPPER_FOR_inode_wait
#endif
 
#ifndef APP_WRAPPER_FOR_inode_wait
#define APP_WRAPPER_FOR_inode_wait
FUNCTION_WRAPPER(inode_wait, (void *_arg1), {
    kern_printk("inode_wait is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = inode_wait(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("inode_wait returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_radix_tree_gang_lookup
#define APP_WRAPPER_FOR_radix_tree_gang_lookup
#endif
 
#ifndef APP_WRAPPER_FOR_radix_tree_gang_lookup
#define APP_WRAPPER_FOR_radix_tree_gang_lookup
FUNCTION_WRAPPER(radix_tree_gang_lookup, (struct radix_tree_root *root, void **results, unsigned long first_index, unsigned int max_items), {
    kern_printk("radix_tree_gang_lookup is invoked.\n");
    PRE_WRAPPER_FUNC(root, results, first_index, max_items);
    int ret = radix_tree_gang_lookup(root, results, first_index, max_items);
    POST_WRAPPER_FUNC(root, results, first_index, max_items);
    kern_printk("radix_tree_gang_lookup returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_balance_dirty_pages_ratelimited
#define APP_WRAPPER_FOR_balance_dirty_pages_ratelimited
#endif
 
#ifndef APP_WRAPPER_FOR_balance_dirty_pages_ratelimited
#define APP_WRAPPER_FOR_balance_dirty_pages_ratelimited
FUNCTION_WRAPPER_VOID(balance_dirty_pages_ratelimited, (struct address_space *mapping), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("balance_dirty_pages_ratelimited is invoked.\n");
    PRE_WRAPPER_FUNC(mapping);
    balance_dirty_pages_ratelimited(mapping);
    POST_WRAPPER_FUNC(mapping);
    kern_printk("balance_dirty_pages_ratelimited returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
})
#endif


#ifndef KERN_ADDR_dev_disable_lro
#define APP_WRAPPER_FOR_dev_disable_lro
#endif
 
#ifndef APP_WRAPPER_FOR_dev_disable_lro
#define APP_WRAPPER_FOR_dev_disable_lro
FUNCTION_WRAPPER_VOID(dev_disable_lro, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_disable_lro is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    dev_disable_lro(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_disable_lro returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_new_inode_pseudo
#define APP_WRAPPER_FOR_new_inode_pseudo
#endif
 
#ifndef APP_WRAPPER_FOR_new_inode_pseudo
#define APP_WRAPPER_FOR_new_inode_pseudo
FUNCTION_WRAPPER(new_inode_pseudo, (struct super_block *sb), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("new_inode_pseudo is invoked.\n");
    PRE_WRAPPER_FUNC(sb);
    struct inode *ret = new_inode_pseudo(sb);
    POST_WRAPPER_FUNC(sb);
    kern_printk("new_inode_pseudo returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_block_page_mkwrite
#define APP_WRAPPER_FOR_block_page_mkwrite
#endif
 
#ifndef APP_WRAPPER_FOR_block_page_mkwrite
#define APP_WRAPPER_FOR_block_page_mkwrite
FUNCTION_WRAPPER(block_page_mkwrite, (struct vm_area_struct *vma, struct vm_fault *vmf, get_block_t get_block), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    WRAP_RECURSIVE(vmf);
    TRACES_IF_WATCHPOINT(vmf);
    SCAN_HEAD_FUNC(struct vm_fault)(*(TO_UNWATCHED_ADDRESS(vmf)));
    kern_printk("block_page_mkwrite is invoked.\n");
    PRE_WRAPPER_FUNC(vma, vmf, get_block);
    int ret = block_page_mkwrite(vma, vmf, get_block);
    POST_WRAPPER_FUNC(vma, vmf, get_block);
    kern_printk("block_page_mkwrite returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    TRACES_IF_WATCHPOINT(vmf);
    SCAN_HEAD_FUNC(struct vm_fault)(*(TO_UNWATCHED_ADDRESS(vmf)));
    return ret;
})
#endif


#ifndef KERN_ADDR_lru_cache_add_lru
#define APP_WRAPPER_FOR_lru_cache_add_lru
#endif
 
#ifndef APP_WRAPPER_FOR_lru_cache_add_lru
#define APP_WRAPPER_FOR_lru_cache_add_lru
FUNCTION_WRAPPER_VOID(lru_cache_add_lru, (struct page *_arg1, enum lru_list lru), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("lru_cache_add_lru is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, lru);
    lru_cache_add_lru(_arg1, lru);
    POST_WRAPPER_FUNC(_arg1, lru);
    kern_printk("lru_cache_add_lru returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_crypto_alloc_ablkcipher
#define APP_WRAPPER_FOR_crypto_alloc_ablkcipher
#endif
 
#ifndef APP_WRAPPER_FOR_crypto_alloc_ablkcipher
#define APP_WRAPPER_FOR_crypto_alloc_ablkcipher
FUNCTION_WRAPPER(crypto_alloc_ablkcipher, (const char *alg_name, u32 type, u32 mask), {
    kern_printk("crypto_alloc_ablkcipher is invoked.\n");
    PRE_WRAPPER_FUNC(alg_name, type, mask);
    struct crypto_ablkcipher *ret = crypto_alloc_ablkcipher(alg_name, type, mask);
    POST_WRAPPER_FUNC(alg_name, type, mask);
    kern_printk("crypto_alloc_ablkcipher returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_split_free_page
#define APP_WRAPPER_FOR_split_free_page
#endif
 
#ifndef APP_WRAPPER_FOR_split_free_page
#define APP_WRAPPER_FOR_split_free_page
FUNCTION_WRAPPER(split_free_page, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("split_free_page is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    int ret = split_free_page(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("split_free_page returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR___cleancache_get_page
#define APP_WRAPPER_FOR___cleancache_get_page
#endif
 
#ifndef APP_WRAPPER_FOR___cleancache_get_page
#define APP_WRAPPER_FOR___cleancache_get_page
FUNCTION_WRAPPER(__cleancache_get_page, (struct page *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__cleancache_get_page is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = __cleancache_get_page(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__cleancache_get_page returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_phy_init_eee
#define APP_WRAPPER_FOR_phy_init_eee
#endif
 
#ifndef APP_WRAPPER_FOR_phy_init_eee
#define APP_WRAPPER_FOR_phy_init_eee
FUNCTION_WRAPPER(phy_init_eee, (struct phy_device *phydev, bool clk_stop_enable), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    kern_printk("phy_init_eee is invoked.\n");
    PRE_WRAPPER_FUNC(phydev, clk_stop_enable);
    int ret = phy_init_eee(phydev, clk_stop_enable);
    POST_WRAPPER_FUNC(phydev, clk_stop_enable);
    kern_printk("phy_init_eee returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    return ret;
})
#endif


#ifndef KERN_ADDR___acpi_acquire_global_lock
#define APP_WRAPPER_FOR___acpi_acquire_global_lock
#endif
 
#ifndef APP_WRAPPER_FOR___acpi_acquire_global_lock
#define APP_WRAPPER_FOR___acpi_acquire_global_lock
FUNCTION_WRAPPER(__acpi_acquire_global_lock, (unsigned int *lock), {
    kern_printk("__acpi_acquire_global_lock is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    int ret = __acpi_acquire_global_lock(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("__acpi_acquire_global_lock returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_get_swap_page
#define APP_WRAPPER_FOR_get_swap_page
#endif
 
#ifndef APP_WRAPPER_FOR_get_swap_page
#define APP_WRAPPER_FOR_get_swap_page
FUNCTION_WRAPPER(get_swap_page, (), {
    kern_printk("get_swap_page is invoked.\n");
    PRE_WRAPPER_FUNC();
    swp_entry_t ret = get_swap_page();
    POST_WRAPPER_FUNC();
    kern_printk("get_swap_page returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sched_autogroup_detach
#define APP_WRAPPER_FOR_sched_autogroup_detach
#endif
 
#ifndef APP_WRAPPER_FOR_sched_autogroup_detach
#define APP_WRAPPER_FOR_sched_autogroup_detach
FUNCTION_WRAPPER_VOID(sched_autogroup_detach, (struct task_struct *p), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("sched_autogroup_detach is invoked.\n");
    PRE_WRAPPER_FUNC(p);
    sched_autogroup_detach(p);
    POST_WRAPPER_FUNC(p);
    kern_printk("sched_autogroup_detach returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
})
#endif


#ifndef KERN_ADDR___neigh_event_send
#define APP_WRAPPER_FOR___neigh_event_send
#endif
 
#ifndef APP_WRAPPER_FOR___neigh_event_send
#define APP_WRAPPER_FOR___neigh_event_send
FUNCTION_WRAPPER(__neigh_event_send, (struct neighbour *neigh, struct sk_buff *skb), {
    WRAP_RECURSIVE(neigh);
    TRACES_IF_WATCHPOINT(neigh);
    SCAN_HEAD_FUNC(struct neighbour)(*(TO_UNWATCHED_ADDRESS(neigh)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("__neigh_event_send is invoked.\n");
    PRE_WRAPPER_FUNC(neigh, skb);
    int ret = __neigh_event_send(neigh, skb);
    POST_WRAPPER_FUNC(neigh, skb);
    kern_printk("__neigh_event_send returned.\n");
    TRACES_IF_WATCHPOINT(neigh);
    SCAN_HEAD_FUNC(struct neighbour)(*(TO_UNWATCHED_ADDRESS(neigh)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cleanup_module
#define APP_WRAPPER_FOR_cleanup_module
#endif
 
#ifndef APP_WRAPPER_FOR_cleanup_module
#define APP_WRAPPER_FOR_cleanup_module
FUNCTION_WRAPPER_VOID(cleanup_module, (), {
    kern_printk("cleanup_module is invoked.\n");
    PRE_WRAPPER_FUNC();
    cleanup_module();
    POST_WRAPPER_FUNC();
    kern_printk("cleanup_module returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_scan_bus_with_sysdata
#define APP_WRAPPER_FOR_pci_scan_bus_with_sysdata
#endif
 
#ifndef APP_WRAPPER_FOR_pci_scan_bus_with_sysdata
#define APP_WRAPPER_FOR_pci_scan_bus_with_sysdata
FUNCTION_WRAPPER(pci_scan_bus_with_sysdata, (int busno), {
    kern_printk("pci_scan_bus_with_sysdata is invoked.\n");
    PRE_WRAPPER_FUNC(busno);
    struct pci_bus *ret = pci_scan_bus_with_sysdata(busno);
    POST_WRAPPER_FUNC(busno);
    kern_printk("pci_scan_bus_with_sysdata returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_nf_getsockopt
#define APP_WRAPPER_FOR_nf_getsockopt
#endif
 
#ifndef APP_WRAPPER_FOR_nf_getsockopt
#define APP_WRAPPER_FOR_nf_getsockopt
FUNCTION_WRAPPER(nf_getsockopt, (struct sock *sk, u_int8_t pf, int optval, char *opt, int *len), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("nf_getsockopt is invoked.\n");
    PRE_WRAPPER_FUNC(sk, pf, optval, opt, len);
    int ret = nf_getsockopt(sk, pf, optval, opt, len);
    POST_WRAPPER_FUNC(sk, pf, optval, opt, len);
    kern_printk("nf_getsockopt returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_mmcfg_late_init
#define APP_WRAPPER_FOR_pci_mmcfg_late_init
#endif
 
#ifndef APP_WRAPPER_FOR_pci_mmcfg_late_init
#define APP_WRAPPER_FOR_pci_mmcfg_late_init
FUNCTION_WRAPPER_VOID(pci_mmcfg_late_init, (), {
    kern_printk("pci_mmcfg_late_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    pci_mmcfg_late_init();
    POST_WRAPPER_FUNC();
    kern_printk("pci_mmcfg_late_init returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_get_object_info
#define APP_WRAPPER_FOR_acpi_get_object_info
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_object_info
#define APP_WRAPPER_FOR_acpi_get_object_info
FUNCTION_WRAPPER(acpi_get_object_info, (acpi_handle object, struct acpi_device_info **return_buffer), {
    kern_printk("acpi_get_object_info is invoked.\n");
    PRE_WRAPPER_FUNC(object, return_buffer);
    acpi_status ret = acpi_get_object_info(object, return_buffer);
    POST_WRAPPER_FUNC(object, return_buffer);
    kern_printk("acpi_get_object_info returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_down_write
#define APP_WRAPPER_FOR_down_write
#endif
 
#ifndef APP_WRAPPER_FOR_down_write
#define APP_WRAPPER_FOR_down_write
FUNCTION_WRAPPER_VOID(down_write, (struct rw_semaphore *sem), {
    kern_printk("down_write is invoked.\n");
    PRE_WRAPPER_FUNC(sem);
    down_write(sem);
    POST_WRAPPER_FUNC(sem);
    kern_printk("down_write returned.\n");
})
#endif


#ifndef KERN_ADDR_class_compat_create_link
#define APP_WRAPPER_FOR_class_compat_create_link
#endif
 
#ifndef APP_WRAPPER_FOR_class_compat_create_link
#define APP_WRAPPER_FOR_class_compat_create_link
FUNCTION_WRAPPER(class_compat_create_link, (struct class_compat *cls, struct device *dev, struct device *device_link), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(device_link);
    TRACES_IF_WATCHPOINT(device_link);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(device_link)));
    kern_printk("class_compat_create_link is invoked.\n");
    PRE_WRAPPER_FUNC(cls, dev, device_link);
    int ret = class_compat_create_link(cls, dev, device_link);
    POST_WRAPPER_FUNC(cls, dev, device_link);
    kern_printk("class_compat_create_link returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(device_link);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(device_link)));
    return ret;
})
#endif


#ifndef KERN_ADDR_generate_random_uuid
#define APP_WRAPPER_FOR_generate_random_uuid
#endif
 
#ifndef APP_WRAPPER_FOR_generate_random_uuid
#define APP_WRAPPER_FOR_generate_random_uuid
FUNCTION_WRAPPER_VOID(generate_random_uuid, (unsigned char uuid_out[16]), {
    kern_printk("generate_random_uuid is invoked.\n");
    PRE_WRAPPER_FUNC(uuid_out);
    generate_random_uuid(uuid_out);
    POST_WRAPPER_FUNC(uuid_out);
    kern_printk("generate_random_uuid returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_pci_link_free_irq
#define APP_WRAPPER_FOR_acpi_pci_link_free_irq
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_pci_link_free_irq
#define APP_WRAPPER_FOR_acpi_pci_link_free_irq
FUNCTION_WRAPPER(acpi_pci_link_free_irq, (acpi_handle handle), {
    kern_printk("acpi_pci_link_free_irq is invoked.\n");
    PRE_WRAPPER_FUNC(handle);
    int ret = acpi_pci_link_free_irq(handle);
    POST_WRAPPER_FUNC(handle);
    kern_printk("acpi_pci_link_free_irq returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_devm_request_and_ioremap
#define APP_WRAPPER_FOR_devm_request_and_ioremap
#endif
 
#ifndef APP_WRAPPER_FOR_devm_request_and_ioremap
#define APP_WRAPPER_FOR_devm_request_and_ioremap
FUNCTION_WRAPPER(devm_request_and_ioremap, (struct device *dev, struct resource *res), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("devm_request_and_ioremap is invoked.\n");
    PRE_WRAPPER_FUNC(dev, res);
    void *ret = devm_request_and_ioremap(dev, res);
    POST_WRAPPER_FUNC(dev, res);
    kern_printk("devm_request_and_ioremap returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_locks_init_lock
#define APP_WRAPPER_FOR_locks_init_lock
#endif
 
#ifndef APP_WRAPPER_FOR_locks_init_lock
#define APP_WRAPPER_FOR_locks_init_lock
FUNCTION_WRAPPER_VOID(locks_init_lock, (struct file_lock *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("locks_init_lock is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    locks_init_lock(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("locks_init_lock returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_probe_irq_mask
#define APP_WRAPPER_FOR_probe_irq_mask
#endif
 
#ifndef APP_WRAPPER_FOR_probe_irq_mask
#define APP_WRAPPER_FOR_probe_irq_mask
FUNCTION_WRAPPER(probe_irq_mask, (unsigned long _arg1), {
    kern_printk("probe_irq_mask is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = probe_irq_mask(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("probe_irq_mask returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_fcntl
#define APP_WRAPPER_FOR_compat_sys_fcntl
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_fcntl
#define APP_WRAPPER_FOR_compat_sys_fcntl
FUNCTION_WRAPPER(compat_sys_fcntl, (unsigned int fd, unsigned int cmd, unsigned long arg), {
    kern_printk("compat_sys_fcntl is invoked.\n");
    PRE_WRAPPER_FUNC(fd, cmd, arg);
    long ret = compat_sys_fcntl(fd, cmd, arg);
    POST_WRAPPER_FUNC(fd, cmd, arg);
    kern_printk("compat_sys_fcntl returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_e820_end_of_low_ram_pfn
#define APP_WRAPPER_FOR_e820_end_of_low_ram_pfn
#endif
 
#ifndef APP_WRAPPER_FOR_e820_end_of_low_ram_pfn
#define APP_WRAPPER_FOR_e820_end_of_low_ram_pfn
FUNCTION_WRAPPER(e820_end_of_low_ram_pfn, (), {
    kern_printk("e820_end_of_low_ram_pfn is invoked.\n");
    PRE_WRAPPER_FUNC();
    long ret = e820_end_of_low_ram_pfn();
    POST_WRAPPER_FUNC();
    kern_printk("e820_end_of_low_ram_pfn returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_swiotlb_unmap_page
#define APP_WRAPPER_FOR_swiotlb_unmap_page
#endif
 
#ifndef APP_WRAPPER_FOR_swiotlb_unmap_page
#define APP_WRAPPER_FOR_swiotlb_unmap_page
FUNCTION_WRAPPER_VOID(swiotlb_unmap_page, (struct device *hwdev, dma_addr_t dev_addr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs), {
    WRAP_RECURSIVE(hwdev);
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
    kern_printk("swiotlb_unmap_page is invoked.\n");
    PRE_WRAPPER_FUNC(hwdev, dev_addr, size, dir, attrs);
    swiotlb_unmap_page(hwdev, dev_addr, size, dir, attrs);
    POST_WRAPPER_FUNC(hwdev, dev_addr, size, dir, attrs);
    kern_printk("swiotlb_unmap_page returned.\n");
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
})
#endif


#ifndef KERN_ADDR_bdi_setup_and_register
#define APP_WRAPPER_FOR_bdi_setup_and_register
#endif
 
#ifndef APP_WRAPPER_FOR_bdi_setup_and_register
#define APP_WRAPPER_FOR_bdi_setup_and_register
FUNCTION_WRAPPER(bdi_setup_and_register, (struct backing_dev_info *_arg1, char *_arg2, unsigned int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bdi_setup_and_register is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = bdi_setup_and_register(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("bdi_setup_and_register returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_initialize_subsystem
#define APP_WRAPPER_FOR_acpi_initialize_subsystem
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_initialize_subsystem
#define APP_WRAPPER_FOR_acpi_initialize_subsystem
FUNCTION_WRAPPER(acpi_initialize_subsystem, (), {
    kern_printk("acpi_initialize_subsystem is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_status ret = acpi_initialize_subsystem();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_initialize_subsystem returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___probe_kernel_write
#define APP_WRAPPER_FOR___probe_kernel_write
#endif
 
#ifndef APP_WRAPPER_FOR___probe_kernel_write
#define APP_WRAPPER_FOR___probe_kernel_write
FUNCTION_WRAPPER(__probe_kernel_write, (void *dst, const void *src, size_t size), {
    kern_printk("__probe_kernel_write is invoked.\n");
    PRE_WRAPPER_FUNC(dst, src, size);
    long ret = __probe_kernel_write(dst, src, size);
    POST_WRAPPER_FUNC(dst, src, size);
    kern_printk("__probe_kernel_write returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_menu_hrtimer_cancel
#define APP_WRAPPER_FOR_menu_hrtimer_cancel
#endif
 
#ifndef APP_WRAPPER_FOR_menu_hrtimer_cancel
#define APP_WRAPPER_FOR_menu_hrtimer_cancel
FUNCTION_WRAPPER_VOID(menu_hrtimer_cancel, (), {
    kern_printk("menu_hrtimer_cancel is invoked.\n");
    PRE_WRAPPER_FUNC();
    menu_hrtimer_cancel();
    POST_WRAPPER_FUNC();
    kern_printk("menu_hrtimer_cancel returned.\n");
})
#endif


#ifndef KERN_ADDR_compat_get_timespec
#define APP_WRAPPER_FOR_compat_get_timespec
#endif
 
#ifndef APP_WRAPPER_FOR_compat_get_timespec
#define APP_WRAPPER_FOR_compat_get_timespec
FUNCTION_WRAPPER(compat_get_timespec, (struct timespec *_arg1, const void *_arg2), {
    kern_printk("compat_get_timespec is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = compat_get_timespec(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("compat_get_timespec returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_radix_tree_gang_lookup_slot
#define APP_WRAPPER_FOR_radix_tree_gang_lookup_slot
#endif
 
#ifndef APP_WRAPPER_FOR_radix_tree_gang_lookup_slot
#define APP_WRAPPER_FOR_radix_tree_gang_lookup_slot
FUNCTION_WRAPPER(radix_tree_gang_lookup_slot, (struct radix_tree_root *root, void ***results, unsigned long *indices, unsigned long first_index, unsigned int max_items), {
    kern_printk("radix_tree_gang_lookup_slot is invoked.\n");
    PRE_WRAPPER_FUNC(root, results, indices, first_index, max_items);
    int ret = radix_tree_gang_lookup_slot(root, results, indices, first_index, max_items);
    POST_WRAPPER_FUNC(root, results, indices, first_index, max_items);
    kern_printk("radix_tree_gang_lookup_slot returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___dev_notify_flags
#define APP_WRAPPER_FOR___dev_notify_flags
#endif
 
#ifndef APP_WRAPPER_FOR___dev_notify_flags
#define APP_WRAPPER_FOR___dev_notify_flags
FUNCTION_WRAPPER_VOID(__dev_notify_flags, (struct net_device *_arg1, unsigned int old_flags), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__dev_notify_flags is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, old_flags);
    __dev_notify_flags(_arg1, old_flags);
    POST_WRAPPER_FUNC(_arg1, old_flags);
    kern_printk("__dev_notify_flags returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_io_delay_init
#define APP_WRAPPER_FOR_io_delay_init
#endif
 
#ifndef APP_WRAPPER_FOR_io_delay_init
#define APP_WRAPPER_FOR_io_delay_init
FUNCTION_WRAPPER_VOID(io_delay_init, (), {
    kern_printk("io_delay_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    io_delay_init();
    POST_WRAPPER_FUNC();
    kern_printk("io_delay_init returned.\n");
})
#endif


#ifndef KERN_ADDR_unmap_underlying_metadata
#define APP_WRAPPER_FOR_unmap_underlying_metadata
#endif
 
#ifndef APP_WRAPPER_FOR_unmap_underlying_metadata
#define APP_WRAPPER_FOR_unmap_underlying_metadata
FUNCTION_WRAPPER_VOID(unmap_underlying_metadata, (struct block_device *bdev, sector_t block), {
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    kern_printk("unmap_underlying_metadata is invoked.\n");
    PRE_WRAPPER_FUNC(bdev, block);
    unmap_underlying_metadata(bdev, block);
    POST_WRAPPER_FUNC(bdev, block);
    kern_printk("unmap_underlying_metadata returned.\n");
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
})
#endif


#ifndef KERN_ADDR_block_write_end
#define APP_WRAPPER_FOR_block_write_end
#endif
 
#ifndef APP_WRAPPER_FOR_block_write_end
#define APP_WRAPPER_FOR_block_write_end
FUNCTION_WRAPPER(block_write_end, (struct file *_arg1, struct address_space *_arg2, loff_t _arg3, unsigned int _arg4, unsigned int _arg5, struct page *_arg6, void *_arg7), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg6);
    TRACES_IF_WATCHPOINT(_arg6);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg6)));
    kern_printk("block_write_end is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
    int ret = block_write_end(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
    kern_printk("block_write_end returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg6);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg6)));
    return ret;
})
#endif


#ifndef KERN_ADDR___kill_pgrp_info
#define APP_WRAPPER_FOR___kill_pgrp_info
#endif
 
#ifndef APP_WRAPPER_FOR___kill_pgrp_info
#define APP_WRAPPER_FOR___kill_pgrp_info
FUNCTION_WRAPPER(__kill_pgrp_info, (int sig, struct siginfo *info, struct pid *pgrp), {
    WRAP_RECURSIVE(pgrp);
    TRACES_IF_WATCHPOINT(pgrp);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pgrp)));
    kern_printk("__kill_pgrp_info is invoked.\n");
    PRE_WRAPPER_FUNC(sig, info, pgrp);
    int ret = __kill_pgrp_info(sig, info, pgrp);
    POST_WRAPPER_FUNC(sig, info, pgrp);
    kern_printk("__kill_pgrp_info returned.\n");
    TRACES_IF_WATCHPOINT(pgrp);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pgrp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_paravirt_disable_iospace
#define APP_WRAPPER_FOR_paravirt_disable_iospace
#endif
 
#ifndef APP_WRAPPER_FOR_paravirt_disable_iospace
#define APP_WRAPPER_FOR_paravirt_disable_iospace
FUNCTION_WRAPPER(paravirt_disable_iospace, (), {
    kern_printk("paravirt_disable_iospace is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = paravirt_disable_iospace();
    POST_WRAPPER_FUNC();
    kern_printk("paravirt_disable_iospace returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_request_percpu_irq
#define APP_WRAPPER_FOR_request_percpu_irq
#endif
 
#ifndef APP_WRAPPER_FOR_request_percpu_irq
#define APP_WRAPPER_FOR_request_percpu_irq
FUNCTION_WRAPPER(request_percpu_irq, (unsigned int irq, irq_handler_t handler, const char *devname, void *percpu_dev_id), {
    WRAP_FUNCTION(handler);
    kern_printk("request_percpu_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq, handler, devname, percpu_dev_id);
    int ret = request_percpu_irq(irq, handler, devname, percpu_dev_id);
    POST_WRAPPER_FUNC(irq, handler, devname, percpu_dev_id);
    kern_printk("request_percpu_irq returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_vmemmap_populate_print_last
#define APP_WRAPPER_FOR_vmemmap_populate_print_last
#endif
 
#ifndef APP_WRAPPER_FOR_vmemmap_populate_print_last
#define APP_WRAPPER_FOR_vmemmap_populate_print_last
FUNCTION_WRAPPER_VOID(vmemmap_populate_print_last, (), {
    kern_printk("vmemmap_populate_print_last is invoked.\n");
    PRE_WRAPPER_FUNC();
    vmemmap_populate_print_last();
    POST_WRAPPER_FUNC();
    kern_printk("vmemmap_populate_print_last returned.\n");
})
#endif


#ifndef KERN_ADDR_check_tsc_sync_target
#define APP_WRAPPER_FOR_check_tsc_sync_target
#endif
 
#ifndef APP_WRAPPER_FOR_check_tsc_sync_target
#define APP_WRAPPER_FOR_check_tsc_sync_target
FUNCTION_WRAPPER_VOID(check_tsc_sync_target, (), {
    kern_printk("check_tsc_sync_target is invoked.\n");
    PRE_WRAPPER_FUNC();
    check_tsc_sync_target();
    POST_WRAPPER_FUNC();
    kern_printk("check_tsc_sync_target returned.\n");
})
#endif


#ifndef KERN_ADDR_ata_sff_std_ports
#define APP_WRAPPER_FOR_ata_sff_std_ports
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_std_ports
#define APP_WRAPPER_FOR_ata_sff_std_ports
FUNCTION_WRAPPER_VOID(ata_sff_std_ports, (struct ata_ioports *ioaddr), {
    kern_printk("ata_sff_std_ports is invoked.\n");
    PRE_WRAPPER_FUNC(ioaddr);
    ata_sff_std_ports(ioaddr);
    POST_WRAPPER_FUNC(ioaddr);
    kern_printk("ata_sff_std_ports returned.\n");
})
#endif


#ifndef KERN_ADDR_io_schedule
#define APP_WRAPPER_FOR_io_schedule
#endif
 
#ifndef APP_WRAPPER_FOR_io_schedule
#define APP_WRAPPER_FOR_io_schedule
FUNCTION_WRAPPER_VOID(io_schedule, (), {
    kern_printk("io_schedule is invoked.\n");
    PRE_WRAPPER_FUNC();
    io_schedule();
    POST_WRAPPER_FUNC();
    kern_printk("io_schedule returned.\n");
})
#endif


#ifndef KERN_ADDR_iput
#define APP_WRAPPER_FOR_iput
#endif
 
#ifndef APP_WRAPPER_FOR_iput
#define APP_WRAPPER_FOR_iput
FUNCTION_WRAPPER_VOID(iput, (struct inode *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("iput is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    iput(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("iput returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_netdev_notify_peers
#define APP_WRAPPER_FOR_netdev_notify_peers
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_notify_peers
#define APP_WRAPPER_FOR_netdev_notify_peers
FUNCTION_WRAPPER_VOID(netdev_notify_peers, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("netdev_notify_peers is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    netdev_notify_peers(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("netdev_notify_peers returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_has_capability
#define APP_WRAPPER_FOR_has_capability
#endif
 
#ifndef APP_WRAPPER_FOR_has_capability
#define APP_WRAPPER_FOR_has_capability
FUNCTION_WRAPPER(has_capability, (struct task_struct *t, int cap), {
    WRAP_RECURSIVE(t);
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(t)));
    kern_printk("has_capability is invoked.\n");
    PRE_WRAPPER_FUNC(t, cap);
    bool ret = has_capability(t, cap);
    POST_WRAPPER_FUNC(t, cap);
    kern_printk("has_capability returned.\n");
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(t)));
    return ret;
})
#endif


#ifndef KERN_ADDR_reboot_interrupt
#define APP_WRAPPER_FOR_reboot_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_reboot_interrupt
#define APP_WRAPPER_FOR_reboot_interrupt
FUNCTION_WRAPPER_VOID(reboot_interrupt, (), {
    kern_printk("reboot_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC();
    reboot_interrupt();
    POST_WRAPPER_FUNC();
    kern_printk("reboot_interrupt returned.\n");
})
#endif


#ifndef KERN_ADDR_ata_scsi_detect
#define APP_WRAPPER_FOR_ata_scsi_detect
#endif
 
#ifndef APP_WRAPPER_FOR_ata_scsi_detect
#define APP_WRAPPER_FOR_ata_scsi_detect
FUNCTION_WRAPPER(ata_scsi_detect, (struct scsi_host_template *sht), {
    WRAP_RECURSIVE(sht);
    TRACES_IF_WATCHPOINT(sht);
    SCAN_HEAD_FUNC(struct scsi_host_template)(*(TO_UNWATCHED_ADDRESS(sht)));
    kern_printk("ata_scsi_detect is invoked.\n");
    PRE_WRAPPER_FUNC(sht);
    int ret = ata_scsi_detect(sht);
    POST_WRAPPER_FUNC(sht);
    kern_printk("ata_scsi_detect returned.\n");
    TRACES_IF_WATCHPOINT(sht);
    SCAN_HEAD_FUNC(struct scsi_host_template)(*(TO_UNWATCHED_ADDRESS(sht)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_sendmmsg
#define APP_WRAPPER_FOR_compat_sys_sendmmsg
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_sendmmsg
#define APP_WRAPPER_FOR_compat_sys_sendmmsg
FUNCTION_WRAPPER(compat_sys_sendmmsg, (int fd, struct compat_mmsghdr *mmsg, unsigned int vlen, unsigned int flags), {
    kern_printk("compat_sys_sendmmsg is invoked.\n");
    PRE_WRAPPER_FUNC(fd, mmsg, vlen, flags);
    long ret = compat_sys_sendmmsg(fd, mmsg, vlen, flags);
    POST_WRAPPER_FUNC(fd, mmsg, vlen, flags);
    kern_printk("compat_sys_sendmmsg returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_write_end
#define APP_WRAPPER_FOR_generic_write_end
#endif
 
#ifndef APP_WRAPPER_FOR_generic_write_end
#define APP_WRAPPER_FOR_generic_write_end
FUNCTION_WRAPPER(generic_write_end, (struct file *_arg1, struct address_space *_arg2, loff_t _arg3, unsigned int _arg4, unsigned int _arg5, struct page *_arg6, void *_arg7), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg6);
    TRACES_IF_WATCHPOINT(_arg6);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg6)));
    kern_printk("generic_write_end is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
    int ret = generic_write_end(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
    kern_printk("generic_write_end returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg6);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg6)));
    return ret;
})
#endif


#ifndef KERN_ADDR_netdev_printk
#define APP_WRAPPER_FOR_netdev_printk
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_printk
#define APP_WRAPPER_FOR_netdev_printk
FUNCTION_WRAPPER(netdev_printk, (const char *level, const struct net_device *dev, const char *format, ...), {
    va_list args__;
    va_start(args__, format);
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    // TODO: variadic arguments
    kern_printk("netdev_printk is invoked.\n");
    PRE_WRAPPER_FUNC(level, dev, format);
    int ret = netdev_printk(level, dev, format);
    POST_WRAPPER_FUNC(level, dev, format);
    kern_printk("netdev_printk returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sff_freeze
#define APP_WRAPPER_FOR_ata_sff_freeze
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_freeze
#define APP_WRAPPER_FOR_ata_sff_freeze
FUNCTION_WRAPPER_VOID(ata_sff_freeze, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_sff_freeze is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    ata_sff_freeze(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_sff_freeze returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_strlcat
#define APP_WRAPPER_FOR_strlcat
#endif
 
#ifndef APP_WRAPPER_FOR_strlcat
#define APP_WRAPPER_FOR_strlcat
FUNCTION_WRAPPER(strlcat, (char *_arg1, const char *_arg2, __kernel_size_t _arg3), {
    kern_printk("strlcat is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    size_t ret = strlcat(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("strlcat returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_param_set_ulong
#define APP_WRAPPER_FOR_param_set_ulong
#endif
 
#ifndef APP_WRAPPER_FOR_param_set_ulong
#define APP_WRAPPER_FOR_param_set_ulong
FUNCTION_WRAPPER(param_set_ulong, (const char *val, const struct kernel_param *kp), {
    WRAP_RECURSIVE(kp);
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    kern_printk("param_set_ulong is invoked.\n");
    PRE_WRAPPER_FUNC(val, kp);
    int ret = param_set_ulong(val, kp);
    POST_WRAPPER_FUNC(val, kp);
    kern_printk("param_set_ulong returned.\n");
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_request_key_with_auxdata
#define APP_WRAPPER_FOR_request_key_with_auxdata
#endif
 
#ifndef APP_WRAPPER_FOR_request_key_with_auxdata
#define APP_WRAPPER_FOR_request_key_with_auxdata
FUNCTION_WRAPPER(request_key_with_auxdata, (struct key_type *type, const char *description, const void *callout_info, size_t callout_len, void *aux), {
    kern_printk("request_key_with_auxdata is invoked.\n");
    PRE_WRAPPER_FUNC(type, description, callout_info, callout_len, aux);
    struct key *ret = request_key_with_auxdata(type, description, callout_info, callout_len, aux);
    POST_WRAPPER_FUNC(type, description, callout_info, callout_len, aux);
    kern_printk("request_key_with_auxdata returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_scsi_host_alloc
#define APP_WRAPPER_FOR_scsi_host_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_host_alloc
#define APP_WRAPPER_FOR_scsi_host_alloc
FUNCTION_WRAPPER(scsi_host_alloc, (struct scsi_host_template *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct scsi_host_template)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("scsi_host_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct Scsi_Host *ret = scsi_host_alloc(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("scsi_host_alloc returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct scsi_host_template)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pm_generic_freeze_late
#define APP_WRAPPER_FOR_pm_generic_freeze_late
#endif
 
#ifndef APP_WRAPPER_FOR_pm_generic_freeze_late
#define APP_WRAPPER_FOR_pm_generic_freeze_late
FUNCTION_WRAPPER(pm_generic_freeze_late, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pm_generic_freeze_late is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pm_generic_freeze_late(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pm_generic_freeze_late returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_phy_device_register
#define APP_WRAPPER_FOR_phy_device_register
#endif
 
#ifndef APP_WRAPPER_FOR_phy_device_register
#define APP_WRAPPER_FOR_phy_device_register
FUNCTION_WRAPPER(phy_device_register, (struct phy_device *phy), {
    WRAP_RECURSIVE(phy);
    TRACES_IF_WATCHPOINT(phy);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phy)));
    kern_printk("phy_device_register is invoked.\n");
    PRE_WRAPPER_FUNC(phy);
    int ret = phy_device_register(phy);
    POST_WRAPPER_FUNC(phy);
    kern_printk("phy_device_register returned.\n");
    TRACES_IF_WATCHPOINT(phy);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phy)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_get_timestampns
#define APP_WRAPPER_FOR_sock_get_timestampns
#endif
 
#ifndef APP_WRAPPER_FOR_sock_get_timestampns
#define APP_WRAPPER_FOR_sock_get_timestampns
FUNCTION_WRAPPER(sock_get_timestampns, (struct sock *_arg1, struct timespec *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("sock_get_timestampns is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = sock_get_timestampns(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("sock_get_timestampns returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ns_to_timeval
#define APP_WRAPPER_FOR_ns_to_timeval
#endif
 
#ifndef APP_WRAPPER_FOR_ns_to_timeval
#define APP_WRAPPER_FOR_ns_to_timeval
FUNCTION_WRAPPER(ns_to_timeval, (const s64 nsec), {
    kern_printk("ns_to_timeval is invoked.\n");
    PRE_WRAPPER_FUNC(nsec);
    struct timeval ret = ns_to_timeval(nsec);
    POST_WRAPPER_FUNC(nsec);
    kern_printk("ns_to_timeval returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_inet6_sk_rebuild_header
#define APP_WRAPPER_FOR_inet6_sk_rebuild_header
#endif
 
#ifndef APP_WRAPPER_FOR_inet6_sk_rebuild_header
#define APP_WRAPPER_FOR_inet6_sk_rebuild_header
FUNCTION_WRAPPER(inet6_sk_rebuild_header, (struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("inet6_sk_rebuild_header is invoked.\n");
    PRE_WRAPPER_FUNC(sk);
    int ret = inet6_sk_rebuild_header(sk);
    POST_WRAPPER_FUNC(sk);
    kern_printk("inet6_sk_rebuild_header returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_wait_for_completion
#define APP_WRAPPER_FOR_wait_for_completion
#endif
 
#ifndef APP_WRAPPER_FOR_wait_for_completion
#define APP_WRAPPER_FOR_wait_for_completion
FUNCTION_WRAPPER_VOID(wait_for_completion, (struct completion *_arg1), {
    kern_printk("wait_for_completion is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    wait_for_completion(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("wait_for_completion returned.\n");
})
#endif


#ifndef KERN_ADDR_find_next_bit
#define APP_WRAPPER_FOR_find_next_bit
#endif
 
#ifndef APP_WRAPPER_FOR_find_next_bit
#define APP_WRAPPER_FOR_find_next_bit
FUNCTION_WRAPPER(find_next_bit, (unsigned const long *addr, unsigned long size, unsigned long offset), {
    kern_printk("find_next_bit is invoked.\n");
    PRE_WRAPPER_FUNC(addr, size, offset);
    long ret = find_next_bit(addr, size, offset);
    POST_WRAPPER_FUNC(addr, size, offset);
    kern_printk("find_next_bit returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_unmap_lsapic
#define APP_WRAPPER_FOR_acpi_unmap_lsapic
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_unmap_lsapic
#define APP_WRAPPER_FOR_acpi_unmap_lsapic
FUNCTION_WRAPPER(acpi_unmap_lsapic, (int cpu), {
    kern_printk("acpi_unmap_lsapic is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    int ret = acpi_unmap_lsapic(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("acpi_unmap_lsapic returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sync_mapping_buffers
#define APP_WRAPPER_FOR_sync_mapping_buffers
#endif
 
#ifndef APP_WRAPPER_FOR_sync_mapping_buffers
#define APP_WRAPPER_FOR_sync_mapping_buffers
FUNCTION_WRAPPER(sync_mapping_buffers, (struct address_space *mapping), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("sync_mapping_buffers is invoked.\n");
    PRE_WRAPPER_FUNC(mapping);
    int ret = sync_mapping_buffers(mapping);
    POST_WRAPPER_FUNC(mapping);
    kern_printk("sync_mapping_buffers returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    return ret;
})
#endif


#ifndef KERN_ADDR_drain_zone_pages
#define APP_WRAPPER_FOR_drain_zone_pages
#endif
 
#ifndef APP_WRAPPER_FOR_drain_zone_pages
#define APP_WRAPPER_FOR_drain_zone_pages
FUNCTION_WRAPPER_VOID(drain_zone_pages, (struct zone *zone, struct per_cpu_pages *pcp), {
    WRAP_RECURSIVE(zone);
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    kern_printk("drain_zone_pages is invoked.\n");
    PRE_WRAPPER_FUNC(zone, pcp);
    drain_zone_pages(zone, pcp);
    POST_WRAPPER_FUNC(zone, pcp);
    kern_printk("drain_zone_pages returned.\n");
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
})
#endif


#ifndef KERN_ADDR_pre_init_apic_IRQ0
#define APP_WRAPPER_FOR_pre_init_apic_IRQ0
#endif
 
#ifndef APP_WRAPPER_FOR_pre_init_apic_IRQ0
#define APP_WRAPPER_FOR_pre_init_apic_IRQ0
FUNCTION_WRAPPER_VOID(pre_init_apic_IRQ0, (), {
    kern_printk("pre_init_apic_IRQ0 is invoked.\n");
    PRE_WRAPPER_FUNC();
    pre_init_apic_IRQ0();
    POST_WRAPPER_FUNC();
    kern_printk("pre_init_apic_IRQ0 returned.\n");
})
#endif


#ifndef KERN_ADDR_search_module_extables
#define APP_WRAPPER_FOR_search_module_extables
#endif
 
#ifndef APP_WRAPPER_FOR_search_module_extables
#define APP_WRAPPER_FOR_search_module_extables
FUNCTION_WRAPPER(search_module_extables, (unsigned long addr), {
    kern_printk("search_module_extables is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    const struct exception_table_entry *ret = search_module_extables(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("search_module_extables returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_inode_has_buffers
#define APP_WRAPPER_FOR_inode_has_buffers
#endif
 
#ifndef APP_WRAPPER_FOR_inode_has_buffers
#define APP_WRAPPER_FOR_inode_has_buffers
FUNCTION_WRAPPER(inode_has_buffers, (struct inode *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("inode_has_buffers is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = inode_has_buffers(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("inode_has_buffers returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_add_request_payload
#define APP_WRAPPER_FOR_blk_add_request_payload
#endif
 
#ifndef APP_WRAPPER_FOR_blk_add_request_payload
#define APP_WRAPPER_FOR_blk_add_request_payload
FUNCTION_WRAPPER_VOID(blk_add_request_payload, (struct request *rq, struct page *page, unsigned int len), {
    WRAP_RECURSIVE(rq);
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("blk_add_request_payload is invoked.\n");
    PRE_WRAPPER_FUNC(rq, page, len);
    blk_add_request_payload(rq, page, len);
    POST_WRAPPER_FUNC(rq, page, len);
    kern_printk("blk_add_request_payload returned.\n");
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_cgroup_post_fork
#define APP_WRAPPER_FOR_cgroup_post_fork
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_post_fork
#define APP_WRAPPER_FOR_cgroup_post_fork
FUNCTION_WRAPPER_VOID(cgroup_post_fork, (struct task_struct *p), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("cgroup_post_fork is invoked.\n");
    PRE_WRAPPER_FUNC(p);
    cgroup_post_fork(p);
    POST_WRAPPER_FUNC(p);
    kern_printk("cgroup_post_fork returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
})
#endif


#ifndef KERN_ADDR_sata_scr_write_flush
#define APP_WRAPPER_FOR_sata_scr_write_flush
#endif
 
#ifndef APP_WRAPPER_FOR_sata_scr_write_flush
#define APP_WRAPPER_FOR_sata_scr_write_flush
FUNCTION_WRAPPER(sata_scr_write_flush, (struct ata_link *link, int reg, u32 val), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    kern_printk("sata_scr_write_flush is invoked.\n");
    PRE_WRAPPER_FUNC(link, reg, val);
    int ret = sata_scr_write_flush(link, reg, val);
    POST_WRAPPER_FUNC(link, reg, val);
    kern_printk("sata_scr_write_flush returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sg_copy_from_buffer
#define APP_WRAPPER_FOR_sg_copy_from_buffer
#endif
 
#ifndef APP_WRAPPER_FOR_sg_copy_from_buffer
#define APP_WRAPPER_FOR_sg_copy_from_buffer
FUNCTION_WRAPPER(sg_copy_from_buffer, (struct scatterlist *sgl, unsigned int nents, void *buf, size_t buflen), {
    kern_printk("sg_copy_from_buffer is invoked.\n");
    PRE_WRAPPER_FUNC(sgl, nents, buf, buflen);
    size_t ret = sg_copy_from_buffer(sgl, nents, buf, buflen);
    POST_WRAPPER_FUNC(sgl, nents, buf, buflen);
    kern_printk("sg_copy_from_buffer returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dquot_quota_sync
#define APP_WRAPPER_FOR_dquot_quota_sync
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_quota_sync
#define APP_WRAPPER_FOR_dquot_quota_sync
FUNCTION_WRAPPER(dquot_quota_sync, (struct super_block *sb, int type), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("dquot_quota_sync is invoked.\n");
    PRE_WRAPPER_FUNC(sb, type);
    int ret = dquot_quota_sync(sb, type);
    POST_WRAPPER_FUNC(sb, type);
    kern_printk("dquot_quota_sync returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_read_cache_page_gfp
#define APP_WRAPPER_FOR_read_cache_page_gfp
#endif
 
#ifndef APP_WRAPPER_FOR_read_cache_page_gfp
#define APP_WRAPPER_FOR_read_cache_page_gfp
FUNCTION_WRAPPER(read_cache_page_gfp, (struct address_space *mapping, unsigned long index, gfp_t gfp_mask), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("read_cache_page_gfp is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, index, gfp_mask);
    struct page *ret = read_cache_page_gfp(mapping, index, gfp_mask);
    POST_WRAPPER_FUNC(mapping, index, gfp_mask);
    kern_printk("read_cache_page_gfp returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_allocate_resource
#define APP_WRAPPER_FOR_allocate_resource
#endif
 
#ifndef APP_WRAPPER_FOR_allocate_resource
#define APP_WRAPPER_FOR_allocate_resource
FUNCTION_WRAPPER(allocate_resource, (struct resource *root, struct resource *new_, resource_size_t size, resource_size_t min, resource_size_t max, resource_size_t align, resource_size_t (*alignf)(void *, const struct resource *, resource_size_t, resource_size_t), void *alignf_data), {
    WRAP_FUNCTION(alignf);
    kern_printk("allocate_resource is invoked.\n");
    PRE_WRAPPER_FUNC(root, new_, size, min, max, align, alignf, alignf_data);
    int ret = allocate_resource(root, new_, size, min, max, align, alignf, alignf_data);
    POST_WRAPPER_FUNC(root, new_, size, min, max, align, alignf, alignf_data);
    kern_printk("allocate_resource returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_free_transaction
#define APP_WRAPPER_FOR_jbd2_journal_free_transaction
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_free_transaction
#define APP_WRAPPER_FOR_jbd2_journal_free_transaction
FUNCTION_WRAPPER_VOID(jbd2_journal_free_transaction, (transaction_t *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(transaction_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_free_transaction is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    jbd2_journal_free_transaction(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("jbd2_journal_free_transaction returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(transaction_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_cgroup_iter_end
#define APP_WRAPPER_FOR_cgroup_iter_end
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_iter_end
#define APP_WRAPPER_FOR_cgroup_iter_end
FUNCTION_WRAPPER_VOID(cgroup_iter_end, (struct cgroup *cgrp, struct cgroup_iter *it), {
    WRAP_RECURSIVE(cgrp);
    TRACES_IF_WATCHPOINT(cgrp);
    SCAN_HEAD_FUNC(struct cgroup)(*(TO_UNWATCHED_ADDRESS(cgrp)));
    kern_printk("cgroup_iter_end is invoked.\n");
    PRE_WRAPPER_FUNC(cgrp, it);
    cgroup_iter_end(cgrp, it);
    POST_WRAPPER_FUNC(cgrp, it);
    kern_printk("cgroup_iter_end returned.\n");
    TRACES_IF_WATCHPOINT(cgrp);
    SCAN_HEAD_FUNC(struct cgroup)(*(TO_UNWATCHED_ADDRESS(cgrp)));
})
#endif


#ifndef KERN_ADDR_swap_duplicate
#define APP_WRAPPER_FOR_swap_duplicate
#endif
 
#ifndef APP_WRAPPER_FOR_swap_duplicate
#define APP_WRAPPER_FOR_swap_duplicate
FUNCTION_WRAPPER(swap_duplicate, (swp_entry_t _arg1), {
    kern_printk("swap_duplicate is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = swap_duplicate(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("swap_duplicate returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_flush_itimer_signals
#define APP_WRAPPER_FOR_flush_itimer_signals
#endif
 
#ifndef APP_WRAPPER_FOR_flush_itimer_signals
#define APP_WRAPPER_FOR_flush_itimer_signals
FUNCTION_WRAPPER_VOID(flush_itimer_signals, (), {
    kern_printk("flush_itimer_signals is invoked.\n");
    PRE_WRAPPER_FUNC();
    flush_itimer_signals();
    POST_WRAPPER_FUNC();
    kern_printk("flush_itimer_signals returned.\n");
})
#endif


#ifndef KERN_ADDR_dev_getfirstbyhwtype
#define APP_WRAPPER_FOR_dev_getfirstbyhwtype
#endif
 
#ifndef APP_WRAPPER_FOR_dev_getfirstbyhwtype
#define APP_WRAPPER_FOR_dev_getfirstbyhwtype
FUNCTION_WRAPPER(dev_getfirstbyhwtype, (struct net *net, unsigned short type), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    kern_printk("dev_getfirstbyhwtype is invoked.\n");
    PRE_WRAPPER_FUNC(net, type);
    struct net_device *ret = dev_getfirstbyhwtype(net, type);
    POST_WRAPPER_FUNC(net, type);
    kern_printk("dev_getfirstbyhwtype returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_setup_real_mode
#define APP_WRAPPER_FOR_setup_real_mode
#endif
 
#ifndef APP_WRAPPER_FOR_setup_real_mode
#define APP_WRAPPER_FOR_setup_real_mode
FUNCTION_WRAPPER_VOID(setup_real_mode, (), {
    kern_printk("setup_real_mode is invoked.\n");
    PRE_WRAPPER_FUNC();
    setup_real_mode();
    POST_WRAPPER_FUNC();
    kern_printk("setup_real_mode returned.\n");
})
#endif


#ifndef KERN_ADDR_timerqueue_del
#define APP_WRAPPER_FOR_timerqueue_del
#endif
 
#ifndef APP_WRAPPER_FOR_timerqueue_del
#define APP_WRAPPER_FOR_timerqueue_del
FUNCTION_WRAPPER_VOID(timerqueue_del, (struct timerqueue_head *head, struct timerqueue_node *node), {
    kern_printk("timerqueue_del is invoked.\n");
    PRE_WRAPPER_FUNC(head, node);
    timerqueue_del(head, node);
    POST_WRAPPER_FUNC(head, node);
    kern_printk("timerqueue_del returned.\n");
})
#endif


#ifndef KERN_ADDR_clocksource_mmio_readw_up
#define APP_WRAPPER_FOR_clocksource_mmio_readw_up
#endif
 
#ifndef APP_WRAPPER_FOR_clocksource_mmio_readw_up
#define APP_WRAPPER_FOR_clocksource_mmio_readw_up
FUNCTION_WRAPPER(clocksource_mmio_readw_up, (struct clocksource *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct clocksource)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("clocksource_mmio_readw_up is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    cycle_t ret = clocksource_mmio_readw_up(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("clocksource_mmio_readw_up returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct clocksource)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sysfs_move_dir
#define APP_WRAPPER_FOR_sysfs_move_dir
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_move_dir
#define APP_WRAPPER_FOR_sysfs_move_dir
FUNCTION_WRAPPER(sysfs_move_dir, (struct kobject *kobj, struct kobject *new_parent_kobj), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    WRAP_RECURSIVE(new_parent_kobj);
    TRACES_IF_WATCHPOINT(new_parent_kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(new_parent_kobj)));
    kern_printk("sysfs_move_dir is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, new_parent_kobj);
    int ret = sysfs_move_dir(kobj, new_parent_kobj);
    POST_WRAPPER_FUNC(kobj, new_parent_kobj);
    kern_printk("sysfs_move_dir returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    TRACES_IF_WATCHPOINT(new_parent_kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(new_parent_kobj)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kset_create_and_add
#define APP_WRAPPER_FOR_kset_create_and_add
#endif
 
#ifndef APP_WRAPPER_FOR_kset_create_and_add
#define APP_WRAPPER_FOR_kset_create_and_add
FUNCTION_WRAPPER(kset_create_and_add, (const char *name, const struct kset_uevent_ops *u, struct kobject *parent_kobj), {
    WRAP_RECURSIVE(u);
    TRACES_IF_WATCHPOINT(u);
    SCAN_HEAD_FUNC(const struct kset_uevent_ops)(*(TO_UNWATCHED_ADDRESS(u)));
    WRAP_RECURSIVE(parent_kobj);
    TRACES_IF_WATCHPOINT(parent_kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(parent_kobj)));
    kern_printk("kset_create_and_add is invoked.\n");
    PRE_WRAPPER_FUNC(name, u, parent_kobj);
    struct kset *ret = kset_create_and_add(name, u, parent_kobj);
    POST_WRAPPER_FUNC(name, u, parent_kobj);
    kern_printk("kset_create_and_add returned.\n");
    TRACES_IF_WATCHPOINT(u);
    SCAN_HEAD_FUNC(const struct kset_uevent_ops)(*(TO_UNWATCHED_ADDRESS(u)));
    TRACES_IF_WATCHPOINT(parent_kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(parent_kobj)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_vfree
#define APP_WRAPPER_FOR_vfree
#endif
 
#ifndef APP_WRAPPER_FOR_vfree
#define APP_WRAPPER_FOR_vfree
FUNCTION_WRAPPER_VOID(vfree, (const void *addr), {
    kern_printk("vfree is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    vfree(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("vfree returned.\n");
})
#endif


#ifndef KERN_ADDR_blk_rq_init
#define APP_WRAPPER_FOR_blk_rq_init
#endif
 
#ifndef APP_WRAPPER_FOR_blk_rq_init
#define APP_WRAPPER_FOR_blk_rq_init
FUNCTION_WRAPPER_VOID(blk_rq_init, (struct request_queue *q, struct request *rq), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    WRAP_RECURSIVE(rq);
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    kern_printk("blk_rq_init is invoked.\n");
    PRE_WRAPPER_FUNC(q, rq);
    blk_rq_init(q, rq);
    POST_WRAPPER_FUNC(q, rq);
    kern_printk("blk_rq_init returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
})
#endif


#ifndef KERN_ADDR_bitmap_parselist
#define APP_WRAPPER_FOR_bitmap_parselist
#endif
 
#ifndef APP_WRAPPER_FOR_bitmap_parselist
#define APP_WRAPPER_FOR_bitmap_parselist
FUNCTION_WRAPPER(bitmap_parselist, (const char *buf, unsigned long *maskp, int nmaskbits), {
    kern_printk("bitmap_parselist is invoked.\n");
    PRE_WRAPPER_FUNC(buf, maskp, nmaskbits);
    int ret = bitmap_parselist(buf, maskp, nmaskbits);
    POST_WRAPPER_FUNC(buf, maskp, nmaskbits);
    kern_printk("bitmap_parselist returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_nf_setsockopt
#define APP_WRAPPER_FOR_nf_setsockopt
#endif
 
#ifndef APP_WRAPPER_FOR_nf_setsockopt
#define APP_WRAPPER_FOR_nf_setsockopt
FUNCTION_WRAPPER(nf_setsockopt, (struct sock *sk, u_int8_t pf, int optval, char *opt, unsigned int len), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("nf_setsockopt is invoked.\n");
    PRE_WRAPPER_FUNC(sk, pf, optval, opt, len);
    int ret = nf_setsockopt(sk, pf, optval, opt, len);
    POST_WRAPPER_FUNC(sk, pf, optval, opt, len);
    kern_printk("nf_setsockopt returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_strncat
#define APP_WRAPPER_FOR_strncat
#endif
 
#ifndef APP_WRAPPER_FOR_strncat
#define APP_WRAPPER_FOR_strncat
FUNCTION_WRAPPER(strncat, (char *_arg1, const char *_arg2, __kernel_size_t _arg3), {
    kern_printk("strncat is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    char *ret = strncat(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("strncat returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_pull_rcsum
#define APP_WRAPPER_FOR_skb_pull_rcsum
#endif
 
#ifndef APP_WRAPPER_FOR_skb_pull_rcsum
#define APP_WRAPPER_FOR_skb_pull_rcsum
FUNCTION_WRAPPER(skb_pull_rcsum, (struct sk_buff *skb, unsigned int len), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_pull_rcsum is invoked.\n");
    PRE_WRAPPER_FUNC(skb, len);
    unsigned char *ret = skb_pull_rcsum(skb, len);
    POST_WRAPPER_FUNC(skb, len);
    kern_printk("skb_pull_rcsum returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_set_dumpable
#define APP_WRAPPER_FOR_set_dumpable
#endif
 
#ifndef APP_WRAPPER_FOR_set_dumpable
#define APP_WRAPPER_FOR_set_dumpable
FUNCTION_WRAPPER_VOID(set_dumpable, (struct mm_struct *mm, int value), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    kern_printk("set_dumpable is invoked.\n");
    PRE_WRAPPER_FUNC(mm, value);
    set_dumpable(mm, value);
    POST_WRAPPER_FUNC(mm, value);
    kern_printk("set_dumpable returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
})
#endif


#ifndef KERN_ADDR_cgroup_next_descendant_post
#define APP_WRAPPER_FOR_cgroup_next_descendant_post
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_next_descendant_post
#define APP_WRAPPER_FOR_cgroup_next_descendant_post
FUNCTION_WRAPPER(cgroup_next_descendant_post, (struct cgroup *pos, struct cgroup *cgroup), {
    WRAP_RECURSIVE(pos);
    TRACES_IF_WATCHPOINT(pos);
    SCAN_HEAD_FUNC(struct cgroup)(*(TO_UNWATCHED_ADDRESS(pos)));
    WRAP_RECURSIVE(cgroup);
    TRACES_IF_WATCHPOINT(cgroup);
    SCAN_HEAD_FUNC(struct cgroup)(*(TO_UNWATCHED_ADDRESS(cgroup)));
    kern_printk("cgroup_next_descendant_post is invoked.\n");
    PRE_WRAPPER_FUNC(pos, cgroup);
    struct cgroup *ret = cgroup_next_descendant_post(pos, cgroup);
    POST_WRAPPER_FUNC(pos, cgroup);
    kern_printk("cgroup_next_descendant_post returned.\n");
    TRACES_IF_WATCHPOINT(pos);
    SCAN_HEAD_FUNC(struct cgroup)(*(TO_UNWATCHED_ADDRESS(pos)));
    TRACES_IF_WATCHPOINT(cgroup);
    SCAN_HEAD_FUNC(struct cgroup)(*(TO_UNWATCHED_ADDRESS(cgroup)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sff_postreset
#define APP_WRAPPER_FOR_ata_sff_postreset
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_postreset
#define APP_WRAPPER_FOR_ata_sff_postreset
FUNCTION_WRAPPER_VOID(ata_sff_postreset, (struct ata_link *link, unsigned int *classes), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    kern_printk("ata_sff_postreset is invoked.\n");
    PRE_WRAPPER_FUNC(link, classes);
    ata_sff_postreset(link, classes);
    POST_WRAPPER_FUNC(link, classes);
    kern_printk("ata_sff_postreset returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
})
#endif


#ifndef KERN_ADDR_ata_xfer_mode2shift
#define APP_WRAPPER_FOR_ata_xfer_mode2shift
#endif
 
#ifndef APP_WRAPPER_FOR_ata_xfer_mode2shift
#define APP_WRAPPER_FOR_ata_xfer_mode2shift
FUNCTION_WRAPPER(ata_xfer_mode2shift, (unsigned long xfer_mode), {
    kern_printk("ata_xfer_mode2shift is invoked.\n");
    PRE_WRAPPER_FUNC(xfer_mode);
    int ret = ata_xfer_mode2shift(xfer_mode);
    POST_WRAPPER_FUNC(xfer_mode);
    kern_printk("ata_xfer_mode2shift returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_unmapped_area_topdown
#define APP_WRAPPER_FOR_unmapped_area_topdown
#endif
 
#ifndef APP_WRAPPER_FOR_unmapped_area_topdown
#define APP_WRAPPER_FOR_unmapped_area_topdown
FUNCTION_WRAPPER(unmapped_area_topdown, (struct vm_unmapped_area_info *info), {
    kern_printk("unmapped_area_topdown is invoked.\n");
    PRE_WRAPPER_FUNC(info);
    long ret = unmapped_area_topdown(info);
    POST_WRAPPER_FUNC(info);
    kern_printk("unmapped_area_topdown returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_strtobool
#define APP_WRAPPER_FOR_strtobool
#endif
 
#ifndef APP_WRAPPER_FOR_strtobool
#define APP_WRAPPER_FOR_strtobool
FUNCTION_WRAPPER(strtobool, (const char *s, bool *res), {
    kern_printk("strtobool is invoked.\n");
    PRE_WRAPPER_FUNC(s, res);
    int ret = strtobool(s, res);
    POST_WRAPPER_FUNC(s, res);
    kern_printk("strtobool returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_check_tsc_sync_source
#define APP_WRAPPER_FOR_check_tsc_sync_source
#endif
 
#ifndef APP_WRAPPER_FOR_check_tsc_sync_source
#define APP_WRAPPER_FOR_check_tsc_sync_source
FUNCTION_WRAPPER_VOID(check_tsc_sync_source, (int cpu), {
    kern_printk("check_tsc_sync_source is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    check_tsc_sync_source(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("check_tsc_sync_source returned.\n");
})
#endif


#ifndef KERN_ADDR_task_handoff_unregister
#define APP_WRAPPER_FOR_task_handoff_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_task_handoff_unregister
#define APP_WRAPPER_FOR_task_handoff_unregister
FUNCTION_WRAPPER(task_handoff_unregister, (struct notifier_block *n), {
    WRAP_RECURSIVE(n);
    TRACES_IF_WATCHPOINT(n);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(n)));
    kern_printk("task_handoff_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(n);
    int ret = task_handoff_unregister(n);
    POST_WRAPPER_FUNC(n);
    kern_printk("task_handoff_unregister returned.\n");
    TRACES_IF_WATCHPOINT(n);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(n)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jiffies_64_to_clock_t
#define APP_WRAPPER_FOR_jiffies_64_to_clock_t
#endif
 
#ifndef APP_WRAPPER_FOR_jiffies_64_to_clock_t
#define APP_WRAPPER_FOR_jiffies_64_to_clock_t
FUNCTION_WRAPPER(jiffies_64_to_clock_t, (u64 x), {
    kern_printk("jiffies_64_to_clock_t is invoked.\n");
    PRE_WRAPPER_FUNC(x);
    u64 ret = jiffies_64_to_clock_t(x);
    POST_WRAPPER_FUNC(x);
    kern_printk("jiffies_64_to_clock_t returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_rq_err_bytes
#define APP_WRAPPER_FOR_blk_rq_err_bytes
#endif
 
#ifndef APP_WRAPPER_FOR_blk_rq_err_bytes
#define APP_WRAPPER_FOR_blk_rq_err_bytes
FUNCTION_WRAPPER(blk_rq_err_bytes, (const struct request *rq), {
    WRAP_RECURSIVE(rq);
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(const struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    kern_printk("blk_rq_err_bytes is invoked.\n");
    PRE_WRAPPER_FUNC(rq);
    int ret = blk_rq_err_bytes(rq);
    POST_WRAPPER_FUNC(rq);
    kern_printk("blk_rq_err_bytes returned.\n");
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(const struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    return ret;
})
#endif


#ifndef KERN_ADDR_single_release_net
#define APP_WRAPPER_FOR_single_release_net
#endif
 
#ifndef APP_WRAPPER_FOR_single_release_net
#define APP_WRAPPER_FOR_single_release_net
FUNCTION_WRAPPER(single_release_net, (struct inode *_arg1, struct file *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("single_release_net is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = single_release_net(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("single_release_net returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pnp_activate_dev
#define APP_WRAPPER_FOR_pnp_activate_dev
#endif
 
#ifndef APP_WRAPPER_FOR_pnp_activate_dev
#define APP_WRAPPER_FOR_pnp_activate_dev
FUNCTION_WRAPPER(pnp_activate_dev, (struct pnp_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pnp_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pnp_activate_dev is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pnp_activate_dev(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pnp_activate_dev returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pnp_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_push
#define APP_WRAPPER_FOR_skb_push
#endif
 
#ifndef APP_WRAPPER_FOR_skb_push
#define APP_WRAPPER_FOR_skb_push
FUNCTION_WRAPPER(skb_push, (struct sk_buff *skb, unsigned int len), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_push is invoked.\n");
    PRE_WRAPPER_FUNC(skb, len);
    unsigned char *ret = skb_push(skb, len);
    POST_WRAPPER_FUNC(skb, len);
    kern_printk("skb_push returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_posix_acl_from_mode
#define APP_WRAPPER_FOR_posix_acl_from_mode
#endif
 
#ifndef APP_WRAPPER_FOR_posix_acl_from_mode
#define APP_WRAPPER_FOR_posix_acl_from_mode
FUNCTION_WRAPPER(posix_acl_from_mode, (umode_t _arg1, gfp_t _arg2), {
    kern_printk("posix_acl_from_mode is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct posix_acl *ret = posix_acl_from_mode(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("posix_acl_from_mode returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_native_smp_cpus_done
#define APP_WRAPPER_FOR_native_smp_cpus_done
#endif
 
#ifndef APP_WRAPPER_FOR_native_smp_cpus_done
#define APP_WRAPPER_FOR_native_smp_cpus_done
FUNCTION_WRAPPER_VOID(native_smp_cpus_done, (unsigned int max_cpus), {
    kern_printk("native_smp_cpus_done is invoked.\n");
    PRE_WRAPPER_FUNC(max_cpus);
    native_smp_cpus_done(max_cpus);
    POST_WRAPPER_FUNC(max_cpus);
    kern_printk("native_smp_cpus_done returned.\n");
})
#endif


#ifndef KERN_ADDR_irq_free_descs
#define APP_WRAPPER_FOR_irq_free_descs
#endif
 
#ifndef APP_WRAPPER_FOR_irq_free_descs
#define APP_WRAPPER_FOR_irq_free_descs
FUNCTION_WRAPPER_VOID(irq_free_descs, (unsigned int irq, unsigned int cnt), {
    kern_printk("irq_free_descs is invoked.\n");
    PRE_WRAPPER_FUNC(irq, cnt);
    irq_free_descs(irq, cnt);
    POST_WRAPPER_FUNC(irq, cnt);
    kern_printk("irq_free_descs returned.\n");
})
#endif


#ifndef KERN_ADDR_tasklet_hrtimer_init
#define APP_WRAPPER_FOR_tasklet_hrtimer_init
#endif
 
#ifndef APP_WRAPPER_FOR_tasklet_hrtimer_init
#define APP_WRAPPER_FOR_tasklet_hrtimer_init
FUNCTION_WRAPPER_VOID(tasklet_hrtimer_init, (struct tasklet_hrtimer *ttimer, enum hrtimer_restart (*function)(struct hrtimer *), clockid_t which_clock, enum hrtimer_mode mode), {
    WRAP_RECURSIVE(ttimer);
    TRACES_IF_WATCHPOINT(ttimer);
    SCAN_HEAD_FUNC(struct tasklet_hrtimer)(*(TO_UNWATCHED_ADDRESS(ttimer)));
    WRAP_FUNCTION(function);
    kern_printk("tasklet_hrtimer_init is invoked.\n");
    PRE_WRAPPER_FUNC(ttimer, function, which_clock, mode);
    tasklet_hrtimer_init(ttimer, function, which_clock, mode);
    POST_WRAPPER_FUNC(ttimer, function, which_clock, mode);
    kern_printk("tasklet_hrtimer_init returned.\n");
    TRACES_IF_WATCHPOINT(ttimer);
    SCAN_HEAD_FUNC(struct tasklet_hrtimer)(*(TO_UNWATCHED_ADDRESS(ttimer)));
})
#endif


#ifndef KERN_ADDR_dst_alloc
#define APP_WRAPPER_FOR_dst_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_dst_alloc
#define APP_WRAPPER_FOR_dst_alloc
FUNCTION_WRAPPER(dst_alloc, (struct dst_ops *ops, struct net_device *dev, int initial_ref, int initial_obsolete, unsigned short flags), {
    WRAP_RECURSIVE(ops);
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct dst_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dst_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(ops, dev, initial_ref, initial_obsolete, flags);
    void *ret = dst_alloc(ops, dev, initial_ref, initial_obsolete, flags);
    POST_WRAPPER_FUNC(ops, dev, initial_ref, initial_obsolete, flags);
    kern_printk("dst_alloc returned.\n");
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct dst_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pmdp_splitting_flush
#define APP_WRAPPER_FOR_pmdp_splitting_flush
#endif
 
#ifndef APP_WRAPPER_FOR_pmdp_splitting_flush
#define APP_WRAPPER_FOR_pmdp_splitting_flush
FUNCTION_WRAPPER_VOID(pmdp_splitting_flush, (struct vm_area_struct *vma, unsigned long addr, pmd_t *pmdp), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("pmdp_splitting_flush is invoked.\n");
    PRE_WRAPPER_FUNC(vma, addr, pmdp);
    pmdp_splitting_flush(vma, addr, pmdp);
    POST_WRAPPER_FUNC(vma, addr, pmdp);
    kern_printk("pmdp_splitting_flush returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
})
#endif


#ifndef KERN_ADDR_input_ff_erase
#define APP_WRAPPER_FOR_input_ff_erase
#endif
 
#ifndef APP_WRAPPER_FOR_input_ff_erase
#define APP_WRAPPER_FOR_input_ff_erase
FUNCTION_WRAPPER(input_ff_erase, (struct input_dev *dev, int effect_id, struct file *file), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("input_ff_erase is invoked.\n");
    PRE_WRAPPER_FUNC(dev, effect_id, file);
    int ret = input_ff_erase(dev, effect_id, file);
    POST_WRAPPER_FUNC(dev, effect_id, file);
    kern_printk("input_ff_erase returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_input_grab_device
#define APP_WRAPPER_FOR_input_grab_device
#endif
 
#ifndef APP_WRAPPER_FOR_input_grab_device
#define APP_WRAPPER_FOR_input_grab_device
FUNCTION_WRAPPER(input_grab_device, (struct input_handle *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct input_handle)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("input_grab_device is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = input_grab_device(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("input_grab_device returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct input_handle)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_shutdown_super
#define APP_WRAPPER_FOR_generic_shutdown_super
#endif
 
#ifndef APP_WRAPPER_FOR_generic_shutdown_super
#define APP_WRAPPER_FOR_generic_shutdown_super
FUNCTION_WRAPPER_VOID(generic_shutdown_super, (struct super_block *sb), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("generic_shutdown_super is invoked.\n");
    PRE_WRAPPER_FUNC(sb);
    generic_shutdown_super(sb);
    POST_WRAPPER_FUNC(sb);
    kern_printk("generic_shutdown_super returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
})
#endif


#ifndef KERN_ADDR_elv_merged_request
#define APP_WRAPPER_FOR_elv_merged_request
#endif
 
#ifndef APP_WRAPPER_FOR_elv_merged_request
#define APP_WRAPPER_FOR_elv_merged_request
FUNCTION_WRAPPER_VOID(elv_merged_request, (struct request_queue *_arg1, struct request *_arg2, int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("elv_merged_request is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    elv_merged_request(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("elv_merged_request returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_copy_creds
#define APP_WRAPPER_FOR_copy_creds
#endif
 
#ifndef APP_WRAPPER_FOR_copy_creds
#define APP_WRAPPER_FOR_copy_creds
FUNCTION_WRAPPER(copy_creds, (struct task_struct *_arg1, unsigned long _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("copy_creds is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = copy_creds(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("copy_creds returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_save_mount_options
#define APP_WRAPPER_FOR_save_mount_options
#endif
 
#ifndef APP_WRAPPER_FOR_save_mount_options
#define APP_WRAPPER_FOR_save_mount_options
FUNCTION_WRAPPER_VOID(save_mount_options, (struct super_block *sb, char *options), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("save_mount_options is invoked.\n");
    PRE_WRAPPER_FUNC(sb, options);
    save_mount_options(sb, options);
    POST_WRAPPER_FUNC(sb, options);
    kern_printk("save_mount_options returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
})
#endif


#ifndef KERN_ADDR_call_usermodehelper_fns
#define APP_WRAPPER_FOR_call_usermodehelper_fns
#endif
 
#ifndef APP_WRAPPER_FOR_call_usermodehelper_fns
#define APP_WRAPPER_FOR_call_usermodehelper_fns
FUNCTION_WRAPPER(call_usermodehelper_fns, (char *path, char **argv, char **envp, int wait, int (*init)(struct subprocess_info *, struct cred *), void (*cleanup)(struct subprocess_info *), void *data), {
    WRAP_FUNCTION(init);
    WRAP_FUNCTION(cleanup);
    kern_printk("call_usermodehelper_fns is invoked.\n");
    PRE_WRAPPER_FUNC(path, argv, envp, wait, init, cleanup, data);
    int ret = call_usermodehelper_fns(path, argv, envp, wait, init, cleanup, data);
    POST_WRAPPER_FUNC(path, argv, envp, wait, init, cleanup, data);
    kern_printk("call_usermodehelper_fns returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_memchr
#define APP_WRAPPER_FOR_memchr
#endif
 
#ifndef APP_WRAPPER_FOR_memchr
#define APP_WRAPPER_FOR_memchr
FUNCTION_WRAPPER(memchr, (const void *_arg1, int _arg2, __kernel_size_t _arg3), {
    kern_printk("memchr is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    void *ret = memchr(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("memchr returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_clockevent_delta2ns
#define APP_WRAPPER_FOR_clockevent_delta2ns
#endif
 
#ifndef APP_WRAPPER_FOR_clockevent_delta2ns
#define APP_WRAPPER_FOR_clockevent_delta2ns
FUNCTION_WRAPPER(clockevent_delta2ns, (unsigned long latch, struct clock_event_device *evt), {
    WRAP_RECURSIVE(evt);
    TRACES_IF_WATCHPOINT(evt);
    SCAN_HEAD_FUNC(struct clock_event_device)(*(TO_UNWATCHED_ADDRESS(evt)));
    kern_printk("clockevent_delta2ns is invoked.\n");
    PRE_WRAPPER_FUNC(latch, evt);
    u64 ret = clockevent_delta2ns(latch, evt);
    POST_WRAPPER_FUNC(latch, evt);
    kern_printk("clockevent_delta2ns returned.\n");
    TRACES_IF_WATCHPOINT(evt);
    SCAN_HEAD_FUNC(struct clock_event_device)(*(TO_UNWATCHED_ADDRESS(evt)));
    return ret;
})
#endif


#ifndef KERN_ADDR_get_filesystem
#define APP_WRAPPER_FOR_get_filesystem
#endif
 
#ifndef APP_WRAPPER_FOR_get_filesystem
#define APP_WRAPPER_FOR_get_filesystem
FUNCTION_WRAPPER_VOID(get_filesystem, (struct file_system_type *fs), {
    WRAP_RECURSIVE(fs);
    TRACES_IF_WATCHPOINT(fs);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(fs)));
    kern_printk("get_filesystem is invoked.\n");
    PRE_WRAPPER_FUNC(fs);
    get_filesystem(fs);
    POST_WRAPPER_FUNC(fs);
    kern_printk("get_filesystem returned.\n");
    TRACES_IF_WATCHPOINT(fs);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(fs)));
})
#endif


#ifndef KERN_ADDR_bio_integrity_free
#define APP_WRAPPER_FOR_bio_integrity_free
#endif
 
#ifndef APP_WRAPPER_FOR_bio_integrity_free
#define APP_WRAPPER_FOR_bio_integrity_free
FUNCTION_WRAPPER_VOID(bio_integrity_free, (struct bio *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bio_integrity_free is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    bio_integrity_free(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("bio_integrity_free returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_copy_huge_pmd
#define APP_WRAPPER_FOR_copy_huge_pmd
#endif
 
#ifndef APP_WRAPPER_FOR_copy_huge_pmd
#define APP_WRAPPER_FOR_copy_huge_pmd
FUNCTION_WRAPPER(copy_huge_pmd, (struct mm_struct *dst_mm, struct mm_struct *src_mm, pmd_t *dst_pmd, pmd_t *src_pmd, unsigned long addr, struct vm_area_struct *vma), {
    WRAP_RECURSIVE(dst_mm);
    TRACES_IF_WATCHPOINT(dst_mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(dst_mm)));
    WRAP_RECURSIVE(src_mm);
    TRACES_IF_WATCHPOINT(src_mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(src_mm)));
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("copy_huge_pmd is invoked.\n");
    PRE_WRAPPER_FUNC(dst_mm, src_mm, dst_pmd, src_pmd, addr, vma);
    int ret = copy_huge_pmd(dst_mm, src_mm, dst_pmd, src_pmd, addr, vma);
    POST_WRAPPER_FUNC(dst_mm, src_mm, dst_pmd, src_pmd, addr, vma);
    kern_printk("copy_huge_pmd returned.\n");
    TRACES_IF_WATCHPOINT(dst_mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(dst_mm)));
    TRACES_IF_WATCHPOINT(src_mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(src_mm)));
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_alloc_pages_exact
#define APP_WRAPPER_FOR_alloc_pages_exact
#endif
 
#ifndef APP_WRAPPER_FOR_alloc_pages_exact
#define APP_WRAPPER_FOR_alloc_pages_exact
FUNCTION_WRAPPER(alloc_pages_exact, (size_t size, gfp_t gfp_mask), {
    kern_printk("alloc_pages_exact is invoked.\n");
    PRE_WRAPPER_FUNC(size, gfp_mask);
    void *ret = alloc_pages_exact(size, gfp_mask);
    POST_WRAPPER_FUNC(size, gfp_mask);
    kern_printk("alloc_pages_exact returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_path_is_under
#define APP_WRAPPER_FOR_path_is_under
#endif
 
#ifndef APP_WRAPPER_FOR_path_is_under
#define APP_WRAPPER_FOR_path_is_under
FUNCTION_WRAPPER(path_is_under, (struct path *_arg1, struct path *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("path_is_under is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = path_is_under(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("path_is_under returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_d_find_alias
#define APP_WRAPPER_FOR_d_find_alias
#endif
 
#ifndef APP_WRAPPER_FOR_d_find_alias
#define APP_WRAPPER_FOR_d_find_alias
FUNCTION_WRAPPER(d_find_alias, (struct inode *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("d_find_alias is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct dentry *ret = d_find_alias(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("d_find_alias returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_kobj_ns_grab_current
#define APP_WRAPPER_FOR_kobj_ns_grab_current
#endif
 
#ifndef APP_WRAPPER_FOR_kobj_ns_grab_current
#define APP_WRAPPER_FOR_kobj_ns_grab_current
FUNCTION_WRAPPER(kobj_ns_grab_current, (enum kobj_ns_type type), {
    kern_printk("kobj_ns_grab_current is invoked.\n");
    PRE_WRAPPER_FUNC(type);
    void *ret = kobj_ns_grab_current(type);
    POST_WRAPPER_FUNC(type);
    kern_printk("kobj_ns_grab_current returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pmdp_invalidate
#define APP_WRAPPER_FOR_pmdp_invalidate
#endif
 
#ifndef APP_WRAPPER_FOR_pmdp_invalidate
#define APP_WRAPPER_FOR_pmdp_invalidate
FUNCTION_WRAPPER_VOID(pmdp_invalidate, (struct vm_area_struct *vma, unsigned long address, pmd_t *pmdp), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("pmdp_invalidate is invoked.\n");
    PRE_WRAPPER_FUNC(vma, address, pmdp);
    pmdp_invalidate(vma, address, pmdp);
    POST_WRAPPER_FUNC(vma, address, pmdp);
    kern_printk("pmdp_invalidate returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
})
#endif


#ifndef KERN_ADDR_setup_IO_APIC_irq_extra
#define APP_WRAPPER_FOR_setup_IO_APIC_irq_extra
#endif
 
#ifndef APP_WRAPPER_FOR_setup_IO_APIC_irq_extra
#define APP_WRAPPER_FOR_setup_IO_APIC_irq_extra
FUNCTION_WRAPPER_VOID(setup_IO_APIC_irq_extra, (u32 gsi), {
    kern_printk("setup_IO_APIC_irq_extra is invoked.\n");
    PRE_WRAPPER_FUNC(gsi);
    setup_IO_APIC_irq_extra(gsi);
    POST_WRAPPER_FUNC(gsi);
    kern_printk("setup_IO_APIC_irq_extra returned.\n");
})
#endif


#ifndef KERN_ADDR_generic_fillattr
#define APP_WRAPPER_FOR_generic_fillattr
#endif
 
#ifndef APP_WRAPPER_FOR_generic_fillattr
#define APP_WRAPPER_FOR_generic_fillattr
FUNCTION_WRAPPER_VOID(generic_fillattr, (struct inode *_arg1, struct kstat *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("generic_fillattr is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    generic_fillattr(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("generic_fillattr returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_securityfs_create_file
#define APP_WRAPPER_FOR_securityfs_create_file
#endif
 
#ifndef APP_WRAPPER_FOR_securityfs_create_file
#define APP_WRAPPER_FOR_securityfs_create_file
FUNCTION_WRAPPER(securityfs_create_file, (const char *name, umode_t mode, struct dentry *parent, void *data, const struct file_operations *fops), {
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(parent)));
    WRAP_RECURSIVE(fops);
    TRACES_IF_WATCHPOINT(fops);
    SCAN_HEAD_FUNC(const struct file_operations)(*(TO_UNWATCHED_ADDRESS(fops)));
    kern_printk("securityfs_create_file is invoked.\n");
    PRE_WRAPPER_FUNC(name, mode, parent, data, fops);
    struct dentry *ret = securityfs_create_file(name, mode, parent, data, fops);
    POST_WRAPPER_FUNC(name, mode, parent, data, fops);
    kern_printk("securityfs_create_file returned.\n");
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(parent)));
    TRACES_IF_WATCHPOINT(fops);
    SCAN_HEAD_FUNC(const struct file_operations)(*(TO_UNWATCHED_ADDRESS(fops)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_rcutorture_record_test_transition
#define APP_WRAPPER_FOR_rcutorture_record_test_transition
#endif
 
#ifndef APP_WRAPPER_FOR_rcutorture_record_test_transition
#define APP_WRAPPER_FOR_rcutorture_record_test_transition
FUNCTION_WRAPPER_VOID(rcutorture_record_test_transition, (), {
    kern_printk("rcutorture_record_test_transition is invoked.\n");
    PRE_WRAPPER_FUNC();
    rcutorture_record_test_transition();
    POST_WRAPPER_FUNC();
    kern_printk("rcutorture_record_test_transition returned.\n");
})
#endif


#ifndef KERN_ADDR_ptep_set_access_flags
#define APP_WRAPPER_FOR_ptep_set_access_flags
#endif
 
#ifndef APP_WRAPPER_FOR_ptep_set_access_flags
#define APP_WRAPPER_FOR_ptep_set_access_flags
FUNCTION_WRAPPER(ptep_set_access_flags, (struct vm_area_struct *vma, unsigned long address, pte_t *ptep, pte_t entry, int dirty), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("ptep_set_access_flags is invoked.\n");
    PRE_WRAPPER_FUNC(vma, address, ptep, entry, dirty);
    int ret = ptep_set_access_flags(vma, address, ptep, entry, dirty);
    POST_WRAPPER_FUNC(vma, address, ptep, entry, dirty);
    kern_printk("ptep_set_access_flags returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sk_stream_wait_connect
#define APP_WRAPPER_FOR_sk_stream_wait_connect
#endif
 
#ifndef APP_WRAPPER_FOR_sk_stream_wait_connect
#define APP_WRAPPER_FOR_sk_stream_wait_connect
FUNCTION_WRAPPER(sk_stream_wait_connect, (struct sock *sk, long *timeo_p), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sk_stream_wait_connect is invoked.\n");
    PRE_WRAPPER_FUNC(sk, timeo_p);
    int ret = sk_stream_wait_connect(sk, timeo_p);
    POST_WRAPPER_FUNC(sk, timeo_p);
    kern_printk("sk_stream_wait_connect returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_schedule_hrtimeout
#define APP_WRAPPER_FOR_schedule_hrtimeout
#endif
 
#ifndef APP_WRAPPER_FOR_schedule_hrtimeout
#define APP_WRAPPER_FOR_schedule_hrtimeout
FUNCTION_WRAPPER(schedule_hrtimeout, (ktime_t *expires, const enum hrtimer_mode mode), {
    kern_printk("schedule_hrtimeout is invoked.\n");
    PRE_WRAPPER_FUNC(expires, mode);
    int ret = schedule_hrtimeout(expires, mode);
    POST_WRAPPER_FUNC(expires, mode);
    kern_printk("schedule_hrtimeout returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_flow_cache_flush_deferred
#define APP_WRAPPER_FOR_flow_cache_flush_deferred
#endif
 
#ifndef APP_WRAPPER_FOR_flow_cache_flush_deferred
#define APP_WRAPPER_FOR_flow_cache_flush_deferred
FUNCTION_WRAPPER_VOID(flow_cache_flush_deferred, (), {
    kern_printk("flow_cache_flush_deferred is invoked.\n");
    PRE_WRAPPER_FUNC();
    flow_cache_flush_deferred();
    POST_WRAPPER_FUNC();
    kern_printk("flow_cache_flush_deferred returned.\n");
})
#endif


#ifndef KERN_ADDR_pnp_device_detach
#define APP_WRAPPER_FOR_pnp_device_detach
#endif
 
#ifndef APP_WRAPPER_FOR_pnp_device_detach
#define APP_WRAPPER_FOR_pnp_device_detach
FUNCTION_WRAPPER_VOID(pnp_device_detach, (struct pnp_dev *pnp_dev), {
    WRAP_RECURSIVE(pnp_dev);
    TRACES_IF_WATCHPOINT(pnp_dev);
    SCAN_HEAD_FUNC(struct pnp_dev)(*(TO_UNWATCHED_ADDRESS(pnp_dev)));
    kern_printk("pnp_device_detach is invoked.\n");
    PRE_WRAPPER_FUNC(pnp_dev);
    pnp_device_detach(pnp_dev);
    POST_WRAPPER_FUNC(pnp_dev);
    kern_printk("pnp_device_detach returned.\n");
    TRACES_IF_WATCHPOINT(pnp_dev);
    SCAN_HEAD_FUNC(struct pnp_dev)(*(TO_UNWATCHED_ADDRESS(pnp_dev)));
})
#endif


#ifndef KERN_ADDR_pci_set_host_bridge_release
#define APP_WRAPPER_FOR_pci_set_host_bridge_release
#endif
 
#ifndef APP_WRAPPER_FOR_pci_set_host_bridge_release
#define APP_WRAPPER_FOR_pci_set_host_bridge_release
FUNCTION_WRAPPER_VOID(pci_set_host_bridge_release, (struct pci_host_bridge *bridge, void (*release_fn)(struct pci_host_bridge *), void *release_data), {
    WRAP_RECURSIVE(bridge);
    TRACES_IF_WATCHPOINT(bridge);
    SCAN_HEAD_FUNC(struct pci_host_bridge)(*(TO_UNWATCHED_ADDRESS(bridge)));
    WRAP_FUNCTION(release_fn);
    kern_printk("pci_set_host_bridge_release is invoked.\n");
    PRE_WRAPPER_FUNC(bridge, release_fn, release_data);
    pci_set_host_bridge_release(bridge, release_fn, release_data);
    POST_WRAPPER_FUNC(bridge, release_fn, release_data);
    kern_printk("pci_set_host_bridge_release returned.\n");
    TRACES_IF_WATCHPOINT(bridge);
    SCAN_HEAD_FUNC(struct pci_host_bridge)(*(TO_UNWATCHED_ADDRESS(bridge)));
})
#endif


#ifndef KERN_ADDR_simple_readpage
#define APP_WRAPPER_FOR_simple_readpage
#endif
 
#ifndef APP_WRAPPER_FOR_simple_readpage
#define APP_WRAPPER_FOR_simple_readpage
FUNCTION_WRAPPER(simple_readpage, (struct file *file, struct page *page), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("simple_readpage is invoked.\n");
    PRE_WRAPPER_FUNC(file, page);
    int ret = simple_readpage(file, page);
    POST_WRAPPER_FUNC(file, page);
    kern_printk("simple_readpage returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_parse_mcfg
#define APP_WRAPPER_FOR_acpi_parse_mcfg
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_parse_mcfg
#define APP_WRAPPER_FOR_acpi_parse_mcfg
FUNCTION_WRAPPER(acpi_parse_mcfg, (struct acpi_table_header *header), {
    kern_printk("acpi_parse_mcfg is invoked.\n");
    PRE_WRAPPER_FUNC(header);
    int ret = acpi_parse_mcfg(header);
    POST_WRAPPER_FUNC(header);
    kern_printk("acpi_parse_mcfg returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_hrtimer_forward
#define APP_WRAPPER_FOR_hrtimer_forward
#endif
 
#ifndef APP_WRAPPER_FOR_hrtimer_forward
#define APP_WRAPPER_FOR_hrtimer_forward
FUNCTION_WRAPPER(hrtimer_forward, (struct hrtimer *timer, ktime_t now, ktime_t interval), {
    WRAP_RECURSIVE(timer);
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct hrtimer)(*(TO_UNWATCHED_ADDRESS(timer)));
    kern_printk("hrtimer_forward is invoked.\n");
    PRE_WRAPPER_FUNC(timer, now, interval);
    u64 ret = hrtimer_forward(timer, now, interval);
    POST_WRAPPER_FUNC(timer, now, interval);
    kern_printk("hrtimer_forward returned.\n");
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct hrtimer)(*(TO_UNWATCHED_ADDRESS(timer)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_old_readdir
#define APP_WRAPPER_FOR_compat_sys_old_readdir
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_old_readdir
#define APP_WRAPPER_FOR_compat_sys_old_readdir
FUNCTION_WRAPPER(compat_sys_old_readdir, (unsigned int fd, struct compat_old_linux_dirent *_arg1, unsigned int count), {
    kern_printk("compat_sys_old_readdir is invoked.\n");
    PRE_WRAPPER_FUNC(fd, _arg1, count);
    long ret = compat_sys_old_readdir(fd, _arg1, count);
    POST_WRAPPER_FUNC(fd, _arg1, count);
    kern_printk("compat_sys_old_readdir returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_scheduler_ipi
#define APP_WRAPPER_FOR_scheduler_ipi
#endif
 
#ifndef APP_WRAPPER_FOR_scheduler_ipi
#define APP_WRAPPER_FOR_scheduler_ipi
FUNCTION_WRAPPER_VOID(scheduler_ipi, (), {
    kern_printk("scheduler_ipi is invoked.\n");
    PRE_WRAPPER_FUNC();
    scheduler_ipi();
    POST_WRAPPER_FUNC();
    kern_printk("scheduler_ipi returned.\n");
})
#endif


#ifndef KERN_ADDR_reuse_swap_page
#define APP_WRAPPER_FOR_reuse_swap_page
#endif
 
#ifndef APP_WRAPPER_FOR_reuse_swap_page
#define APP_WRAPPER_FOR_reuse_swap_page
FUNCTION_WRAPPER(reuse_swap_page, (struct page *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("reuse_swap_page is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = reuse_swap_page(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("reuse_swap_page returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pvclock_set_flags
#define APP_WRAPPER_FOR_pvclock_set_flags
#endif
 
#ifndef APP_WRAPPER_FOR_pvclock_set_flags
#define APP_WRAPPER_FOR_pvclock_set_flags
FUNCTION_WRAPPER_VOID(pvclock_set_flags, (u8 flags), {
    kern_printk("pvclock_set_flags is invoked.\n");
    PRE_WRAPPER_FUNC(flags);
    pvclock_set_flags(flags);
    POST_WRAPPER_FUNC(flags);
    kern_printk("pvclock_set_flags returned.\n");
})
#endif


#ifndef KERN_ADDR_next_signal
#define APP_WRAPPER_FOR_next_signal
#endif
 
#ifndef APP_WRAPPER_FOR_next_signal
#define APP_WRAPPER_FOR_next_signal
FUNCTION_WRAPPER(next_signal, (struct sigpending *pending, sigset_t *mask), {
    kern_printk("next_signal is invoked.\n");
    PRE_WRAPPER_FUNC(pending, mask);
    int ret = next_signal(pending, mask);
    POST_WRAPPER_FUNC(pending, mask);
    kern_printk("next_signal returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_elv_put_request
#define APP_WRAPPER_FOR_elv_put_request
#endif
 
#ifndef APP_WRAPPER_FOR_elv_put_request
#define APP_WRAPPER_FOR_elv_put_request
FUNCTION_WRAPPER_VOID(elv_put_request, (struct request_queue *_arg1, struct request *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("elv_put_request is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    elv_put_request(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("elv_put_request returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_align_vdso_addr
#define APP_WRAPPER_FOR_align_vdso_addr
#endif
 
#ifndef APP_WRAPPER_FOR_align_vdso_addr
#define APP_WRAPPER_FOR_align_vdso_addr
FUNCTION_WRAPPER(align_vdso_addr, (unsigned long _arg1), {
    kern_printk("align_vdso_addr is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    long ret = align_vdso_addr(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("align_vdso_addr returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_css_is_ancestor
#define APP_WRAPPER_FOR_css_is_ancestor
#endif
 
#ifndef APP_WRAPPER_FOR_css_is_ancestor
#define APP_WRAPPER_FOR_css_is_ancestor
FUNCTION_WRAPPER(css_is_ancestor, (struct cgroup_subsys_state *cg, const struct cgroup_subsys_state *root), {
    WRAP_RECURSIVE(cg);
    TRACES_IF_WATCHPOINT(cg);
    SCAN_HEAD_FUNC(struct cgroup_subsys_state)(*(TO_UNWATCHED_ADDRESS(cg)));
    WRAP_RECURSIVE(root);
    TRACES_IF_WATCHPOINT(root);
    SCAN_HEAD_FUNC(const struct cgroup_subsys_state)(*(TO_UNWATCHED_ADDRESS(root)));
    kern_printk("css_is_ancestor is invoked.\n");
    PRE_WRAPPER_FUNC(cg, root);
    bool ret = css_is_ancestor(cg, root);
    POST_WRAPPER_FUNC(cg, root);
    kern_printk("css_is_ancestor returned.\n");
    TRACES_IF_WATCHPOINT(cg);
    SCAN_HEAD_FUNC(struct cgroup_subsys_state)(*(TO_UNWATCHED_ADDRESS(cg)));
    TRACES_IF_WATCHPOINT(root);
    SCAN_HEAD_FUNC(const struct cgroup_subsys_state)(*(TO_UNWATCHED_ADDRESS(root)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cgroup_attach_task
#define APP_WRAPPER_FOR_cgroup_attach_task
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_attach_task
#define APP_WRAPPER_FOR_cgroup_attach_task
FUNCTION_WRAPPER(cgroup_attach_task, (struct cgroup *_arg1, struct task_struct *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct cgroup)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("cgroup_attach_task is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = cgroup_attach_task(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("cgroup_attach_task returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct cgroup)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sync_Arb_IDs
#define APP_WRAPPER_FOR_sync_Arb_IDs
#endif
 
#ifndef APP_WRAPPER_FOR_sync_Arb_IDs
#define APP_WRAPPER_FOR_sync_Arb_IDs
FUNCTION_WRAPPER_VOID(sync_Arb_IDs, (), {
    kern_printk("sync_Arb_IDs is invoked.\n");
    PRE_WRAPPER_FUNC();
    sync_Arb_IDs();
    POST_WRAPPER_FUNC();
    kern_printk("sync_Arb_IDs returned.\n");
})
#endif


#ifndef KERN_ADDR_check_disk_size_change
#define APP_WRAPPER_FOR_check_disk_size_change
#endif
 
#ifndef APP_WRAPPER_FOR_check_disk_size_change
#define APP_WRAPPER_FOR_check_disk_size_change
FUNCTION_WRAPPER_VOID(check_disk_size_change, (struct gendisk *disk, struct block_device *bdev), {
    WRAP_RECURSIVE(disk);
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    kern_printk("check_disk_size_change is invoked.\n");
    PRE_WRAPPER_FUNC(disk, bdev);
    check_disk_size_change(disk, bdev);
    POST_WRAPPER_FUNC(disk, bdev);
    kern_printk("check_disk_size_change returned.\n");
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
})
#endif


#ifndef KERN_ADDR_acpi_os_acquire_lock
#define APP_WRAPPER_FOR_acpi_os_acquire_lock
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_acquire_lock
#define APP_WRAPPER_FOR_acpi_os_acquire_lock
FUNCTION_WRAPPER(acpi_os_acquire_lock, (spinlock_t *handle), {
    kern_printk("acpi_os_acquire_lock is invoked.\n");
    PRE_WRAPPER_FUNC(handle);
    long ret = acpi_os_acquire_lock(handle);
    POST_WRAPPER_FUNC(handle);
    kern_printk("acpi_os_acquire_lock returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_bio_integrity_init
#define APP_WRAPPER_FOR_bio_integrity_init
#endif
 
#ifndef APP_WRAPPER_FOR_bio_integrity_init
#define APP_WRAPPER_FOR_bio_integrity_init
FUNCTION_WRAPPER_VOID(bio_integrity_init, (), {
    kern_printk("bio_integrity_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    bio_integrity_init();
    POST_WRAPPER_FUNC();
    kern_printk("bio_integrity_init returned.\n");
})
#endif


#ifndef KERN_ADDR_request_firmware
#define APP_WRAPPER_FOR_request_firmware
#endif
 
#ifndef APP_WRAPPER_FOR_request_firmware
#define APP_WRAPPER_FOR_request_firmware
FUNCTION_WRAPPER(request_firmware, (const struct firmware **fw, const char *name, struct device *device), {
    WRAP_RECURSIVE(fw);
    TRACES_IF_WATCHPOINT(fw);
    SCAN_HEAD_FUNC(const struct firmware *)(*(TO_UNWATCHED_ADDRESS(fw)));
    WRAP_RECURSIVE(device);
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(device)));
    kern_printk("request_firmware is invoked.\n");
    PRE_WRAPPER_FUNC(fw, name, device);
    int ret = request_firmware(fw, name, device);
    POST_WRAPPER_FUNC(fw, name, device);
    kern_printk("request_firmware returned.\n");
    TRACES_IF_WATCHPOINT(fw);
    SCAN_HEAD_FUNC(const struct firmware *)(*(TO_UNWATCHED_ADDRESS(fw)));
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(device)));
    return ret;
})
#endif


#ifndef KERN_ADDR___pm_relax
#define APP_WRAPPER_FOR___pm_relax
#endif
 
#ifndef APP_WRAPPER_FOR___pm_relax
#define APP_WRAPPER_FOR___pm_relax
FUNCTION_WRAPPER_VOID(__pm_relax, (struct wakeup_source *ws), {
    WRAP_RECURSIVE(ws);
    TRACES_IF_WATCHPOINT(ws);
    SCAN_HEAD_FUNC(struct wakeup_source)(*(TO_UNWATCHED_ADDRESS(ws)));
    kern_printk("__pm_relax is invoked.\n");
    PRE_WRAPPER_FUNC(ws);
    __pm_relax(ws);
    POST_WRAPPER_FUNC(ws);
    kern_printk("__pm_relax returned.\n");
    TRACES_IF_WATCHPOINT(ws);
    SCAN_HEAD_FUNC(struct wakeup_source)(*(TO_UNWATCHED_ADDRESS(ws)));
})
#endif


#ifndef KERN_ADDR_kernel_sendmsg
#define APP_WRAPPER_FOR_kernel_sendmsg
#endif
 
#ifndef APP_WRAPPER_FOR_kernel_sendmsg
#define APP_WRAPPER_FOR_kernel_sendmsg
FUNCTION_WRAPPER(kernel_sendmsg, (struct socket *sock, struct msghdr *msg, struct kvec *vec, size_t num, size_t len), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    kern_printk("kernel_sendmsg is invoked.\n");
    PRE_WRAPPER_FUNC(sock, msg, vec, num, len);
    int ret = kernel_sendmsg(sock, msg, vec, num, len);
    POST_WRAPPER_FUNC(sock, msg, vec, num, len);
    kern_printk("kernel_sendmsg returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    return ret;
})
#endif


#ifndef KERN_ADDR_klist_add_before
#define APP_WRAPPER_FOR_klist_add_before
#endif
 
#ifndef APP_WRAPPER_FOR_klist_add_before
#define APP_WRAPPER_FOR_klist_add_before
FUNCTION_WRAPPER_VOID(klist_add_before, (struct klist_node *n, struct klist_node *pos), {
    kern_printk("klist_add_before is invoked.\n");
    PRE_WRAPPER_FUNC(n, pos);
    klist_add_before(n, pos);
    POST_WRAPPER_FUNC(n, pos);
    kern_printk("klist_add_before returned.\n");
})
#endif


#ifndef KERN_ADDR_tick_check_idle
#define APP_WRAPPER_FOR_tick_check_idle
#endif
 
#ifndef APP_WRAPPER_FOR_tick_check_idle
#define APP_WRAPPER_FOR_tick_check_idle
FUNCTION_WRAPPER_VOID(tick_check_idle, (int cpu), {
    kern_printk("tick_check_idle is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    tick_check_idle(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("tick_check_idle returned.\n");
})
#endif


#ifndef KERN_ADDR_compat_sys_select
#define APP_WRAPPER_FOR_compat_sys_select
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_select
#define APP_WRAPPER_FOR_compat_sys_select
FUNCTION_WRAPPER(compat_sys_select, (int n, compat_ulong_t *inp, compat_ulong_t *outp, compat_ulong_t *exp, struct compat_timeval *tvp), {
    kern_printk("compat_sys_select is invoked.\n");
    PRE_WRAPPER_FUNC(n, inp, outp, exp, tvp);
    long ret = compat_sys_select(n, inp, outp, exp, tvp);
    POST_WRAPPER_FUNC(n, inp, outp, exp, tvp);
    kern_printk("compat_sys_select returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_do_notify_parent
#define APP_WRAPPER_FOR_do_notify_parent
#endif
 
#ifndef APP_WRAPPER_FOR_do_notify_parent
#define APP_WRAPPER_FOR_do_notify_parent
FUNCTION_WRAPPER(do_notify_parent, (struct task_struct *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("do_notify_parent is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    bool ret = do_notify_parent(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("do_notify_parent returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_get_xtime_and_monotonic_and_sleep_offset
#define APP_WRAPPER_FOR_get_xtime_and_monotonic_and_sleep_offset
#endif
 
#ifndef APP_WRAPPER_FOR_get_xtime_and_monotonic_and_sleep_offset
#define APP_WRAPPER_FOR_get_xtime_and_monotonic_and_sleep_offset
FUNCTION_WRAPPER_VOID(get_xtime_and_monotonic_and_sleep_offset, (struct timespec *xtim, struct timespec *wtom, struct timespec *sleep), {
    kern_printk("get_xtime_and_monotonic_and_sleep_offset is invoked.\n");
    PRE_WRAPPER_FUNC(xtim, wtom, sleep);
    get_xtime_and_monotonic_and_sleep_offset(xtim, wtom, sleep);
    POST_WRAPPER_FUNC(xtim, wtom, sleep);
    kern_printk("get_xtime_and_monotonic_and_sleep_offset returned.\n");
})
#endif


#ifndef KERN_ADDR_skb_trim
#define APP_WRAPPER_FOR_skb_trim
#endif
 
#ifndef APP_WRAPPER_FOR_skb_trim
#define APP_WRAPPER_FOR_skb_trim
FUNCTION_WRAPPER_VOID(skb_trim, (struct sk_buff *skb, unsigned int len), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_trim is invoked.\n");
    PRE_WRAPPER_FUNC(skb, len);
    skb_trim(skb, len);
    POST_WRAPPER_FUNC(skb, len);
    kern_printk("skb_trim returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR__raw_write_lock_irqsave
#define APP_WRAPPER_FOR__raw_write_lock_irqsave
#endif
 
#ifndef APP_WRAPPER_FOR__raw_write_lock_irqsave
#define APP_WRAPPER_FOR__raw_write_lock_irqsave
FUNCTION_WRAPPER(_raw_write_lock_irqsave, (rwlock_t *lock), {
    kern_printk("_raw_write_lock_irqsave is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    long ret = _raw_write_lock_irqsave(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("_raw_write_lock_irqsave returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___css_put
#define APP_WRAPPER_FOR___css_put
#endif
 
#ifndef APP_WRAPPER_FOR___css_put
#define APP_WRAPPER_FOR___css_put
FUNCTION_WRAPPER_VOID(__css_put, (struct cgroup_subsys_state *css), {
    WRAP_RECURSIVE(css);
    TRACES_IF_WATCHPOINT(css);
    SCAN_HEAD_FUNC(struct cgroup_subsys_state)(*(TO_UNWATCHED_ADDRESS(css)));
    kern_printk("__css_put is invoked.\n");
    PRE_WRAPPER_FUNC(css);
    __css_put(css);
    POST_WRAPPER_FUNC(css);
    kern_printk("__css_put returned.\n");
    TRACES_IF_WATCHPOINT(css);
    SCAN_HEAD_FUNC(struct cgroup_subsys_state)(*(TO_UNWATCHED_ADDRESS(css)));
})
#endif


#ifndef KERN_ADDR___ndelay
#define APP_WRAPPER_FOR___ndelay
#endif
 
#ifndef APP_WRAPPER_FOR___ndelay
#define APP_WRAPPER_FOR___ndelay
FUNCTION_WRAPPER_VOID(__ndelay, (unsigned long nsecs), {
    kern_printk("__ndelay is invoked.\n");
    PRE_WRAPPER_FUNC(nsecs);
    __ndelay(nsecs);
    POST_WRAPPER_FUNC(nsecs);
    kern_printk("__ndelay returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_find_next_ht_capability
#define APP_WRAPPER_FOR_pci_find_next_ht_capability
#endif
 
#ifndef APP_WRAPPER_FOR_pci_find_next_ht_capability
#define APP_WRAPPER_FOR_pci_find_next_ht_capability
FUNCTION_WRAPPER(pci_find_next_ht_capability, (struct pci_dev *dev, int pos, int ht_cap), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_find_next_ht_capability is invoked.\n");
    PRE_WRAPPER_FUNC(dev, pos, ht_cap);
    int ret = pci_find_next_ht_capability(dev, pos, ht_cap);
    POST_WRAPPER_FUNC(dev, pos, ht_cap);
    kern_printk("pci_find_next_ht_capability returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_timecounter_init
#define APP_WRAPPER_FOR_timecounter_init
#endif
 
#ifndef APP_WRAPPER_FOR_timecounter_init
#define APP_WRAPPER_FOR_timecounter_init
FUNCTION_WRAPPER_VOID(timecounter_init, (struct timecounter *tc, const struct cyclecounter *cc, u64 start_tstamp), {
    WRAP_RECURSIVE(tc);
    TRACES_IF_WATCHPOINT(tc);
    SCAN_HEAD_FUNC(struct timecounter)(*(TO_UNWATCHED_ADDRESS(tc)));
    WRAP_RECURSIVE(cc);
    TRACES_IF_WATCHPOINT(cc);
    SCAN_HEAD_FUNC(const struct cyclecounter)(*(TO_UNWATCHED_ADDRESS(cc)));
    kern_printk("timecounter_init is invoked.\n");
    PRE_WRAPPER_FUNC(tc, cc, start_tstamp);
    timecounter_init(tc, cc, start_tstamp);
    POST_WRAPPER_FUNC(tc, cc, start_tstamp);
    kern_printk("timecounter_init returned.\n");
    TRACES_IF_WATCHPOINT(tc);
    SCAN_HEAD_FUNC(struct timecounter)(*(TO_UNWATCHED_ADDRESS(tc)));
    TRACES_IF_WATCHPOINT(cc);
    SCAN_HEAD_FUNC(const struct cyclecounter)(*(TO_UNWATCHED_ADDRESS(cc)));
})
#endif


#ifndef KERN_ADDR_dst_discard
#define APP_WRAPPER_FOR_dst_discard
#endif
 
#ifndef APP_WRAPPER_FOR_dst_discard
#define APP_WRAPPER_FOR_dst_discard
FUNCTION_WRAPPER(dst_discard, (struct sk_buff *skb), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("dst_discard is invoked.\n");
    PRE_WRAPPER_FUNC(skb);
    int ret = dst_discard(skb);
    POST_WRAPPER_FUNC(skb);
    kern_printk("dst_discard returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cdrom_ioctl
#define APP_WRAPPER_FOR_cdrom_ioctl
#endif
 
#ifndef APP_WRAPPER_FOR_cdrom_ioctl
#define APP_WRAPPER_FOR_cdrom_ioctl
FUNCTION_WRAPPER(cdrom_ioctl, (struct cdrom_device_info *cdi, struct block_device *bdev, fmode_t mode, unsigned int cmd, unsigned long arg), {
    WRAP_RECURSIVE(cdi);
    TRACES_IF_WATCHPOINT(cdi);
    SCAN_HEAD_FUNC(struct cdrom_device_info)(*(TO_UNWATCHED_ADDRESS(cdi)));
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    kern_printk("cdrom_ioctl is invoked.\n");
    PRE_WRAPPER_FUNC(cdi, bdev, mode, cmd, arg);
    int ret = cdrom_ioctl(cdi, bdev, mode, cmd, arg);
    POST_WRAPPER_FUNC(cdi, bdev, mode, cmd, arg);
    kern_printk("cdrom_ioctl returned.\n");
    TRACES_IF_WATCHPOINT(cdi);
    SCAN_HEAD_FUNC(struct cdrom_device_info)(*(TO_UNWATCHED_ADDRESS(cdi)));
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pcix_get_mmrbc
#define APP_WRAPPER_FOR_pcix_get_mmrbc
#endif
 
#ifndef APP_WRAPPER_FOR_pcix_get_mmrbc
#define APP_WRAPPER_FOR_pcix_get_mmrbc
FUNCTION_WRAPPER(pcix_get_mmrbc, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pcix_get_mmrbc is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pcix_get_mmrbc(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pcix_get_mmrbc returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_proc_sys_poll_notify
#define APP_WRAPPER_FOR_proc_sys_poll_notify
#endif
 
#ifndef APP_WRAPPER_FOR_proc_sys_poll_notify
#define APP_WRAPPER_FOR_proc_sys_poll_notify
FUNCTION_WRAPPER_VOID(proc_sys_poll_notify, (struct ctl_table_poll *poll), {
    kern_printk("proc_sys_poll_notify is invoked.\n");
    PRE_WRAPPER_FUNC(poll);
    proc_sys_poll_notify(poll);
    POST_WRAPPER_FUNC(poll);
    kern_printk("proc_sys_poll_notify returned.\n");
})
#endif


#ifndef KERN_ADDR__copy_to_user
#define APP_WRAPPER_FOR__copy_to_user
#endif
 
#ifndef APP_WRAPPER_FOR__copy_to_user
#define APP_WRAPPER_FOR__copy_to_user
FUNCTION_WRAPPER(_copy_to_user, (void *to, const void *from, unsigned int len), {
    kern_printk("_copy_to_user is invoked.\n");
    PRE_WRAPPER_FUNC(to, from, len);
    long ret = _copy_to_user(to, from, len);
    POST_WRAPPER_FUNC(to, from, len);
    kern_printk("_copy_to_user returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_host_suspend
#define APP_WRAPPER_FOR_ata_host_suspend
#endif
 
#ifndef APP_WRAPPER_FOR_ata_host_suspend
#define APP_WRAPPER_FOR_ata_host_suspend
FUNCTION_WRAPPER(ata_host_suspend, (struct ata_host *host, pm_message_t mesg), {
    WRAP_RECURSIVE(host);
    TRACES_IF_WATCHPOINT(host);
    SCAN_HEAD_FUNC(struct ata_host)(*(TO_UNWATCHED_ADDRESS(host)));
    kern_printk("ata_host_suspend is invoked.\n");
    PRE_WRAPPER_FUNC(host, mesg);
    int ret = ata_host_suspend(host, mesg);
    POST_WRAPPER_FUNC(host, mesg);
    kern_printk("ata_host_suspend returned.\n");
    TRACES_IF_WATCHPOINT(host);
    SCAN_HEAD_FUNC(struct ata_host)(*(TO_UNWATCHED_ADDRESS(host)));
    return ret;
})
#endif


#ifndef KERN_ADDR_crypto_shash_setkey
#define APP_WRAPPER_FOR_crypto_shash_setkey
#endif
 
#ifndef APP_WRAPPER_FOR_crypto_shash_setkey
#define APP_WRAPPER_FOR_crypto_shash_setkey
FUNCTION_WRAPPER(crypto_shash_setkey, (struct crypto_shash *tfm, const u8 *key, unsigned int keylen), {
    WRAP_RECURSIVE(tfm);
    TRACES_IF_WATCHPOINT(tfm);
    SCAN_HEAD_FUNC(struct crypto_shash)(*(TO_UNWATCHED_ADDRESS(tfm)));
    kern_printk("crypto_shash_setkey is invoked.\n");
    PRE_WRAPPER_FUNC(tfm, key, keylen);
    int ret = crypto_shash_setkey(tfm, key, keylen);
    POST_WRAPPER_FUNC(tfm, key, keylen);
    kern_printk("crypto_shash_setkey returned.\n");
    TRACES_IF_WATCHPOINT(tfm);
    SCAN_HEAD_FUNC(struct crypto_shash)(*(TO_UNWATCHED_ADDRESS(tfm)));
    return ret;
})
#endif


#ifndef KERN_ADDR_free_pages_exact
#define APP_WRAPPER_FOR_free_pages_exact
#endif
 
#ifndef APP_WRAPPER_FOR_free_pages_exact
#define APP_WRAPPER_FOR_free_pages_exact
FUNCTION_WRAPPER_VOID(free_pages_exact, (void *virt, size_t size), {
    kern_printk("free_pages_exact is invoked.\n");
    PRE_WRAPPER_FUNC(virt, size);
    free_pages_exact(virt, size);
    POST_WRAPPER_FUNC(virt, size);
    kern_printk("free_pages_exact returned.\n");
})
#endif


#ifndef KERN_ADDR___phys_addr
#define APP_WRAPPER_FOR___phys_addr
#endif
 
#ifndef APP_WRAPPER_FOR___phys_addr
#define APP_WRAPPER_FOR___phys_addr
FUNCTION_WRAPPER(__phys_addr, (unsigned long _arg1), {
    kern_printk("__phys_addr is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    long ret = __phys_addr(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__phys_addr returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___sk_dst_check
#define APP_WRAPPER_FOR___sk_dst_check
#endif
 
#ifndef APP_WRAPPER_FOR___sk_dst_check
#define APP_WRAPPER_FOR___sk_dst_check
FUNCTION_WRAPPER(__sk_dst_check, (struct sock *sk, u32 cookie), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("__sk_dst_check is invoked.\n");
    PRE_WRAPPER_FUNC(sk, cookie);
    struct dst_entry *ret = __sk_dst_check(sk, cookie);
    POST_WRAPPER_FUNC(sk, cookie);
    kern_printk("__sk_dst_check returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_bio_integrity_clone
#define APP_WRAPPER_FOR_bio_integrity_clone
#endif
 
#ifndef APP_WRAPPER_FOR_bio_integrity_clone
#define APP_WRAPPER_FOR_bio_integrity_clone
FUNCTION_WRAPPER(bio_integrity_clone, (struct bio *_arg1, struct bio *_arg2, gfp_t _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("bio_integrity_clone is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = bio_integrity_clone(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("bio_integrity_clone returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_phy_start_machine
#define APP_WRAPPER_FOR_phy_start_machine
#endif
 
#ifndef APP_WRAPPER_FOR_phy_start_machine
#define APP_WRAPPER_FOR_phy_start_machine
FUNCTION_WRAPPER_VOID(phy_start_machine, (struct phy_device *phydev, void (*handler)(struct net_device *)), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    WRAP_FUNCTION(handler);
    kern_printk("phy_start_machine is invoked.\n");
    PRE_WRAPPER_FUNC(phydev, handler);
    phy_start_machine(phydev, handler);
    POST_WRAPPER_FUNC(phydev, handler);
    kern_printk("phy_start_machine returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
})
#endif


#ifndef KERN_ADDR_strpbrk
#define APP_WRAPPER_FOR_strpbrk
#endif
 
#ifndef APP_WRAPPER_FOR_strpbrk
#define APP_WRAPPER_FOR_strpbrk
FUNCTION_WRAPPER(strpbrk, (const char *_arg1, const char *_arg2), {
    kern_printk("strpbrk is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    char *ret = strpbrk(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("strpbrk returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_numa_zonelist_order_handler
#define APP_WRAPPER_FOR_numa_zonelist_order_handler
#endif
 
#ifndef APP_WRAPPER_FOR_numa_zonelist_order_handler
#define APP_WRAPPER_FOR_numa_zonelist_order_handler
FUNCTION_WRAPPER(numa_zonelist_order_handler, (struct ctl_table *_arg1, int _arg2, void *_arg3, size_t *_arg4, loff_t *_arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("numa_zonelist_order_handler is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = numa_zonelist_order_handler(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("numa_zonelist_order_handler returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_update_sb_errno
#define APP_WRAPPER_FOR_jbd2_journal_update_sb_errno
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_update_sb_errno
#define APP_WRAPPER_FOR_jbd2_journal_update_sb_errno
FUNCTION_WRAPPER_VOID(jbd2_journal_update_sb_errno, (journal_t *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_update_sb_errno is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    jbd2_journal_update_sb_errno(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("jbd2_journal_update_sb_errno returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_bsp_end_local_APIC_setup
#define APP_WRAPPER_FOR_bsp_end_local_APIC_setup
#endif
 
#ifndef APP_WRAPPER_FOR_bsp_end_local_APIC_setup
#define APP_WRAPPER_FOR_bsp_end_local_APIC_setup
FUNCTION_WRAPPER_VOID(bsp_end_local_APIC_setup, (), {
    kern_printk("bsp_end_local_APIC_setup is invoked.\n");
    PRE_WRAPPER_FUNC();
    bsp_end_local_APIC_setup();
    POST_WRAPPER_FUNC();
    kern_printk("bsp_end_local_APIC_setup returned.\n");
})
#endif


#ifndef KERN_ADDR___lru_cache_add
#define APP_WRAPPER_FOR___lru_cache_add
#endif
 
#ifndef APP_WRAPPER_FOR___lru_cache_add
#define APP_WRAPPER_FOR___lru_cache_add
FUNCTION_WRAPPER_VOID(__lru_cache_add, (struct page *_arg1, enum lru_list lru), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__lru_cache_add is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, lru);
    __lru_cache_add(_arg1, lru);
    POST_WRAPPER_FUNC(_arg1, lru);
    kern_printk("__lru_cache_add returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_compat_sys_sched_getaffinity
#define APP_WRAPPER_FOR_compat_sys_sched_getaffinity
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_sched_getaffinity
#define APP_WRAPPER_FOR_compat_sys_sched_getaffinity
FUNCTION_WRAPPER(compat_sys_sched_getaffinity, (compat_pid_t pid, unsigned int len, compat_ulong_t *user_mask_ptr), {
    kern_printk("compat_sys_sched_getaffinity is invoked.\n");
    PRE_WRAPPER_FUNC(pid, len, user_mask_ptr);
    long ret = compat_sys_sched_getaffinity(pid, len, user_mask_ptr);
    POST_WRAPPER_FUNC(pid, len, user_mask_ptr);
    kern_printk("compat_sys_sched_getaffinity returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_paravirt_patch_ident_32
#define APP_WRAPPER_FOR_paravirt_patch_ident_32
#endif
 
#ifndef APP_WRAPPER_FOR_paravirt_patch_ident_32
#define APP_WRAPPER_FOR_paravirt_patch_ident_32
FUNCTION_WRAPPER(paravirt_patch_ident_32, (void *insnbuf, unsigned int len), {
    kern_printk("paravirt_patch_ident_32 is invoked.\n");
    PRE_WRAPPER_FUNC(insnbuf, len);
    int ret = paravirt_patch_ident_32(insnbuf, len);
    POST_WRAPPER_FUNC(insnbuf, len);
    kern_printk("paravirt_patch_ident_32 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_phy_drivers_register
#define APP_WRAPPER_FOR_phy_drivers_register
#endif
 
#ifndef APP_WRAPPER_FOR_phy_drivers_register
#define APP_WRAPPER_FOR_phy_drivers_register
FUNCTION_WRAPPER(phy_drivers_register, (struct phy_driver *new_driver, int n), {
    WRAP_RECURSIVE(new_driver);
    TRACES_IF_WATCHPOINT(new_driver);
    SCAN_HEAD_FUNC(struct phy_driver)(*(TO_UNWATCHED_ADDRESS(new_driver)));
    kern_printk("phy_drivers_register is invoked.\n");
    PRE_WRAPPER_FUNC(new_driver, n);
    int ret = phy_drivers_register(new_driver, n);
    POST_WRAPPER_FUNC(new_driver, n);
    kern_printk("phy_drivers_register returned.\n");
    TRACES_IF_WATCHPOINT(new_driver);
    SCAN_HEAD_FUNC(struct phy_driver)(*(TO_UNWATCHED_ADDRESS(new_driver)));
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_get_irq_data
#define APP_WRAPPER_FOR_irq_get_irq_data
#endif
 
#ifndef APP_WRAPPER_FOR_irq_get_irq_data
#define APP_WRAPPER_FOR_irq_get_irq_data
FUNCTION_WRAPPER(irq_get_irq_data, (unsigned int irq), {
    kern_printk("irq_get_irq_data is invoked.\n");
    PRE_WRAPPER_FUNC(irq);
    struct irq_data *ret = irq_get_irq_data(irq);
    POST_WRAPPER_FUNC(irq);
    kern_printk("irq_get_irq_data returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_power_resource_register_device
#define APP_WRAPPER_FOR_acpi_power_resource_register_device
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_power_resource_register_device
#define APP_WRAPPER_FOR_acpi_power_resource_register_device
FUNCTION_WRAPPER(acpi_power_resource_register_device, (struct device *dev, acpi_handle handle), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("acpi_power_resource_register_device is invoked.\n");
    PRE_WRAPPER_FUNC(dev, handle);
    int ret = acpi_power_resource_register_device(dev, handle);
    POST_WRAPPER_FUNC(dev, handle);
    kern_printk("acpi_power_resource_register_device returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR__set_memory_wc
#define APP_WRAPPER_FOR__set_memory_wc
#endif
 
#ifndef APP_WRAPPER_FOR__set_memory_wc
#define APP_WRAPPER_FOR__set_memory_wc
FUNCTION_WRAPPER(_set_memory_wc, (unsigned long addr, int numpages), {
    kern_printk("_set_memory_wc is invoked.\n");
    PRE_WRAPPER_FUNC(addr, numpages);
    int ret = _set_memory_wc(addr, numpages);
    POST_WRAPPER_FUNC(addr, numpages);
    kern_printk("_set_memory_wc returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR__set_memory_wb
#define APP_WRAPPER_FOR__set_memory_wb
#endif
 
#ifndef APP_WRAPPER_FOR__set_memory_wb
#define APP_WRAPPER_FOR__set_memory_wb
FUNCTION_WRAPPER(_set_memory_wb, (unsigned long addr, int numpages), {
    kern_printk("_set_memory_wb is invoked.\n");
    PRE_WRAPPER_FUNC(addr, numpages);
    int ret = _set_memory_wb(addr, numpages);
    POST_WRAPPER_FUNC(addr, numpages);
    kern_printk("_set_memory_wb returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_proc_root_init
#define APP_WRAPPER_FOR_proc_root_init
#endif
 
#ifndef APP_WRAPPER_FOR_proc_root_init
#define APP_WRAPPER_FOR_proc_root_init
FUNCTION_WRAPPER_VOID(proc_root_init, (), {
    kern_printk("proc_root_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    proc_root_init();
    POST_WRAPPER_FUNC();
    kern_printk("proc_root_init returned.\n");
})
#endif


#ifndef KERN_ADDR_freeze_workqueues_begin
#define APP_WRAPPER_FOR_freeze_workqueues_begin
#endif
 
#ifndef APP_WRAPPER_FOR_freeze_workqueues_begin
#define APP_WRAPPER_FOR_freeze_workqueues_begin
FUNCTION_WRAPPER_VOID(freeze_workqueues_begin, (), {
    kern_printk("freeze_workqueues_begin is invoked.\n");
    PRE_WRAPPER_FUNC();
    freeze_workqueues_begin();
    POST_WRAPPER_FUNC();
    kern_printk("freeze_workqueues_begin returned.\n");
})
#endif


#ifndef KERN_ADDR___cleancache_invalidate_page
#define APP_WRAPPER_FOR___cleancache_invalidate_page
#endif
 
#ifndef APP_WRAPPER_FOR___cleancache_invalidate_page
#define APP_WRAPPER_FOR___cleancache_invalidate_page
FUNCTION_WRAPPER_VOID(__cleancache_invalidate_page, (struct address_space *_arg1, struct page *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("__cleancache_invalidate_page is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    __cleancache_invalidate_page(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("__cleancache_invalidate_page returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_bio_set_pages_dirty
#define APP_WRAPPER_FOR_bio_set_pages_dirty
#endif
 
#ifndef APP_WRAPPER_FOR_bio_set_pages_dirty
#define APP_WRAPPER_FOR_bio_set_pages_dirty
FUNCTION_WRAPPER_VOID(bio_set_pages_dirty, (struct bio *bio), {
    WRAP_RECURSIVE(bio);
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
    kern_printk("bio_set_pages_dirty is invoked.\n");
    PRE_WRAPPER_FUNC(bio);
    bio_set_pages_dirty(bio);
    POST_WRAPPER_FUNC(bio);
    kern_printk("bio_set_pages_dirty returned.\n");
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
})
#endif


#ifndef KERN_ADDR_sg_init_one
#define APP_WRAPPER_FOR_sg_init_one
#endif
 
#ifndef APP_WRAPPER_FOR_sg_init_one
#define APP_WRAPPER_FOR_sg_init_one
FUNCTION_WRAPPER_VOID(sg_init_one, (struct scatterlist *_arg1, const void *_arg2, unsigned int _arg3), {
    kern_printk("sg_init_one is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    sg_init_one(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("sg_init_one returned.\n");
})
#endif


#ifndef KERN_ADDR_swiotlb_alloc_coherent
#define APP_WRAPPER_FOR_swiotlb_alloc_coherent
#endif
 
#ifndef APP_WRAPPER_FOR_swiotlb_alloc_coherent
#define APP_WRAPPER_FOR_swiotlb_alloc_coherent
FUNCTION_WRAPPER(swiotlb_alloc_coherent, (struct device *hwdev, size_t size, dma_addr_t *dma_handle, gfp_t flags), {
    WRAP_RECURSIVE(hwdev);
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
    kern_printk("swiotlb_alloc_coherent is invoked.\n");
    PRE_WRAPPER_FUNC(hwdev, size, dma_handle, flags);
    void *ret = swiotlb_alloc_coherent(hwdev, size, dma_handle, flags);
    POST_WRAPPER_FUNC(hwdev, size, dma_handle, flags);
    kern_printk("swiotlb_alloc_coherent returned.\n");
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_netif_rx
#define APP_WRAPPER_FOR_netif_rx
#endif
 
#ifndef APP_WRAPPER_FOR_netif_rx
#define APP_WRAPPER_FOR_netif_rx
FUNCTION_WRAPPER(netif_rx, (struct sk_buff *skb), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("netif_rx is invoked.\n");
    PRE_WRAPPER_FUNC(skb);
    int ret = netif_rx(skb);
    POST_WRAPPER_FUNC(skb);
    kern_printk("netif_rx returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_swiotlb_map_sg_attrs
#define APP_WRAPPER_FOR_swiotlb_map_sg_attrs
#endif
 
#ifndef APP_WRAPPER_FOR_swiotlb_map_sg_attrs
#define APP_WRAPPER_FOR_swiotlb_map_sg_attrs
FUNCTION_WRAPPER(swiotlb_map_sg_attrs, (struct device *hwdev, struct scatterlist *sgl, int nelems, enum dma_data_direction dir, struct dma_attrs *attrs), {
    WRAP_RECURSIVE(hwdev);
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
    kern_printk("swiotlb_map_sg_attrs is invoked.\n");
    PRE_WRAPPER_FUNC(hwdev, sgl, nelems, dir, attrs);
    int ret = swiotlb_map_sg_attrs(hwdev, sgl, nelems, dir, attrs);
    POST_WRAPPER_FUNC(hwdev, sgl, nelems, dir, attrs);
    kern_printk("swiotlb_map_sg_attrs returned.\n");
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_may_expand_vm
#define APP_WRAPPER_FOR_may_expand_vm
#endif
 
#ifndef APP_WRAPPER_FOR_may_expand_vm
#define APP_WRAPPER_FOR_may_expand_vm
FUNCTION_WRAPPER(may_expand_vm, (struct mm_struct *mm, unsigned long npages), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    kern_printk("may_expand_vm is invoked.\n");
    PRE_WRAPPER_FUNC(mm, npages);
    int ret = may_expand_vm(mm, npages);
    POST_WRAPPER_FUNC(mm, npages);
    kern_printk("may_expand_vm returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vm_area_add_early
#define APP_WRAPPER_FOR_vm_area_add_early
#endif
 
#ifndef APP_WRAPPER_FOR_vm_area_add_early
#define APP_WRAPPER_FOR_vm_area_add_early
FUNCTION_WRAPPER_VOID(vm_area_add_early, (struct vm_struct *vm), {
    WRAP_RECURSIVE(vm);
    TRACES_IF_WATCHPOINT(vm);
    SCAN_HEAD_FUNC(struct vm_struct)(*(TO_UNWATCHED_ADDRESS(vm)));
    kern_printk("vm_area_add_early is invoked.\n");
    PRE_WRAPPER_FUNC(vm);
    vm_area_add_early(vm);
    POST_WRAPPER_FUNC(vm);
    kern_printk("vm_area_add_early returned.\n");
    TRACES_IF_WATCHPOINT(vm);
    SCAN_HEAD_FUNC(struct vm_struct)(*(TO_UNWATCHED_ADDRESS(vm)));
})
#endif


#ifndef KERN_ADDR_mnt_want_write
#define APP_WRAPPER_FOR_mnt_want_write
#endif
 
#ifndef APP_WRAPPER_FOR_mnt_want_write
#define APP_WRAPPER_FOR_mnt_want_write
FUNCTION_WRAPPER(mnt_want_write, (struct vfsmount *mnt), {
    WRAP_RECURSIVE(mnt);
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
    kern_printk("mnt_want_write is invoked.\n");
    PRE_WRAPPER_FUNC(mnt);
    int ret = mnt_want_write(mnt);
    POST_WRAPPER_FUNC(mnt);
    kern_printk("mnt_want_write returned.\n");
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
    return ret;
})
#endif


#ifndef KERN_ADDR_inode_add_rsv_space
#define APP_WRAPPER_FOR_inode_add_rsv_space
#endif
 
#ifndef APP_WRAPPER_FOR_inode_add_rsv_space
#define APP_WRAPPER_FOR_inode_add_rsv_space
FUNCTION_WRAPPER_VOID(inode_add_rsv_space, (struct inode *inode, qsize_t number), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("inode_add_rsv_space is invoked.\n");
    PRE_WRAPPER_FUNC(inode, number);
    inode_add_rsv_space(inode, number);
    POST_WRAPPER_FUNC(inode, number);
    kern_printk("inode_add_rsv_space returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_buffer_migrate_page
#define APP_WRAPPER_FOR_buffer_migrate_page
#endif
 
#ifndef APP_WRAPPER_FOR_buffer_migrate_page
#define APP_WRAPPER_FOR_buffer_migrate_page
FUNCTION_WRAPPER(buffer_migrate_page, (struct address_space *_arg1, struct page *_arg2, struct page *_arg3, enum migrate_mode _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("buffer_migrate_page is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = buffer_migrate_page(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("buffer_migrate_page returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_swiotlb_tbl_map_single
#define APP_WRAPPER_FOR_swiotlb_tbl_map_single
#endif
 
#ifndef APP_WRAPPER_FOR_swiotlb_tbl_map_single
#define APP_WRAPPER_FOR_swiotlb_tbl_map_single
FUNCTION_WRAPPER(swiotlb_tbl_map_single, (struct device *hwdev, dma_addr_t tbl_dma_addr, phys_addr_t phys, size_t size, enum dma_data_direction dir), {
    WRAP_RECURSIVE(hwdev);
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
    kern_printk("swiotlb_tbl_map_single is invoked.\n");
    PRE_WRAPPER_FUNC(hwdev, tbl_dma_addr, phys, size, dir);
    phys_addr_t ret = swiotlb_tbl_map_single(hwdev, tbl_dma_addr, phys, size, dir);
    POST_WRAPPER_FUNC(hwdev, tbl_dma_addr, phys, size, dir);
    kern_printk("swiotlb_tbl_map_single returned.\n");
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pm_qos_request_active
#define APP_WRAPPER_FOR_pm_qos_request_active
#endif
 
#ifndef APP_WRAPPER_FOR_pm_qos_request_active
#define APP_WRAPPER_FOR_pm_qos_request_active
FUNCTION_WRAPPER(pm_qos_request_active, (struct pm_qos_request *req), {
    WRAP_RECURSIVE(req);
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct pm_qos_request)(*(TO_UNWATCHED_ADDRESS(req)));
    kern_printk("pm_qos_request_active is invoked.\n");
    PRE_WRAPPER_FUNC(req);
    int ret = pm_qos_request_active(req);
    POST_WRAPPER_FUNC(req);
    kern_printk("pm_qos_request_active returned.\n");
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct pm_qos_request)(*(TO_UNWATCHED_ADDRESS(req)));
    return ret;
})
#endif


#ifndef KERN_ADDR_posix_unblock_lock
#define APP_WRAPPER_FOR_posix_unblock_lock
#endif
 
#ifndef APP_WRAPPER_FOR_posix_unblock_lock
#define APP_WRAPPER_FOR_posix_unblock_lock
FUNCTION_WRAPPER(posix_unblock_lock, (struct file *_arg1, struct file_lock *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("posix_unblock_lock is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = posix_unblock_lock(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("posix_unblock_lock returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_file_splice_read
#define APP_WRAPPER_FOR_generic_file_splice_read
#endif
 
#ifndef APP_WRAPPER_FOR_generic_file_splice_read
#define APP_WRAPPER_FOR_generic_file_splice_read
FUNCTION_WRAPPER(generic_file_splice_read, (struct file *_arg1, loff_t *_arg2, struct pipe_inode_info *_arg3, size_t _arg4, unsigned int _arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("generic_file_splice_read is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    ssize_t ret = generic_file_splice_read(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("generic_file_splice_read returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_func_ptr_is_kernel_text
#define APP_WRAPPER_FOR_func_ptr_is_kernel_text
#endif
 
#ifndef APP_WRAPPER_FOR_func_ptr_is_kernel_text
#define APP_WRAPPER_FOR_func_ptr_is_kernel_text
FUNCTION_WRAPPER(func_ptr_is_kernel_text, (void *ptr), {
    kern_printk("func_ptr_is_kernel_text is invoked.\n");
    PRE_WRAPPER_FUNC(ptr);
    int ret = func_ptr_is_kernel_text(ptr);
    POST_WRAPPER_FUNC(ptr);
    kern_printk("func_ptr_is_kernel_text returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_flush_kthread_work
#define APP_WRAPPER_FOR_flush_kthread_work
#endif
 
#ifndef APP_WRAPPER_FOR_flush_kthread_work
#define APP_WRAPPER_FOR_flush_kthread_work
FUNCTION_WRAPPER_VOID(flush_kthread_work, (struct kthread_work *work), {
    WRAP_RECURSIVE(work);
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct kthread_work)(*(TO_UNWATCHED_ADDRESS(work)));
    kern_printk("flush_kthread_work is invoked.\n");
    PRE_WRAPPER_FUNC(work);
    flush_kthread_work(work);
    POST_WRAPPER_FUNC(work);
    kern_printk("flush_kthread_work returned.\n");
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct kthread_work)(*(TO_UNWATCHED_ADDRESS(work)));
})
#endif


#ifndef KERN_ADDR_netdev_set_default_ethtool_ops
#define APP_WRAPPER_FOR_netdev_set_default_ethtool_ops
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_set_default_ethtool_ops
#define APP_WRAPPER_FOR_netdev_set_default_ethtool_ops
FUNCTION_WRAPPER_VOID(netdev_set_default_ethtool_ops, (struct net_device *dev, const struct ethtool_ops *ops), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(ops);
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(const struct ethtool_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    kern_printk("netdev_set_default_ethtool_ops is invoked.\n");
    PRE_WRAPPER_FUNC(dev, ops);
    netdev_set_default_ethtool_ops(dev, ops);
    POST_WRAPPER_FUNC(dev, ops);
    kern_printk("netdev_set_default_ethtool_ops returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(const struct ethtool_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
})
#endif


#ifndef KERN_ADDR_elv_iosched_store
#define APP_WRAPPER_FOR_elv_iosched_store
#endif
 
#ifndef APP_WRAPPER_FOR_elv_iosched_store
#define APP_WRAPPER_FOR_elv_iosched_store
FUNCTION_WRAPPER(elv_iosched_store, (struct request_queue *_arg1, const char *_arg2, size_t _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("elv_iosched_store is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    ssize_t ret = elv_iosched_store(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("elv_iosched_store returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_key_lookup
#define APP_WRAPPER_FOR_key_lookup
#endif
 
#ifndef APP_WRAPPER_FOR_key_lookup
#define APP_WRAPPER_FOR_key_lookup
FUNCTION_WRAPPER(key_lookup, (key_serial_t id), {
    kern_printk("key_lookup is invoked.\n");
    PRE_WRAPPER_FUNC(id);
    struct key *ret = key_lookup(id);
    POST_WRAPPER_FUNC(id);
    kern_printk("key_lookup returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_devres_release_group
#define APP_WRAPPER_FOR_devres_release_group
#endif
 
#ifndef APP_WRAPPER_FOR_devres_release_group
#define APP_WRAPPER_FOR_devres_release_group
FUNCTION_WRAPPER(devres_release_group, (struct device *dev, void *id), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("devres_release_group is invoked.\n");
    PRE_WRAPPER_FUNC(dev, id);
    int ret = devres_release_group(dev, id);
    POST_WRAPPER_FUNC(dev, id);
    kern_printk("devres_release_group returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_fixup_user_fault
#define APP_WRAPPER_FOR_fixup_user_fault
#endif
 
#ifndef APP_WRAPPER_FOR_fixup_user_fault
#define APP_WRAPPER_FOR_fixup_user_fault
FUNCTION_WRAPPER(fixup_user_fault, (struct task_struct *tsk, struct mm_struct *mm, unsigned long address, unsigned int fault_flags), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    kern_printk("fixup_user_fault is invoked.\n");
    PRE_WRAPPER_FUNC(tsk, mm, address, fault_flags);
    int ret = fixup_user_fault(tsk, mm, address, fault_flags);
    POST_WRAPPER_FUNC(tsk, mm, address, fault_flags);
    kern_printk("fixup_user_fault returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    return ret;
})
#endif


#ifndef KERN_ADDR_setup_local_APIC
#define APP_WRAPPER_FOR_setup_local_APIC
#endif
 
#ifndef APP_WRAPPER_FOR_setup_local_APIC
#define APP_WRAPPER_FOR_setup_local_APIC
FUNCTION_WRAPPER_VOID(setup_local_APIC, (), {
    kern_printk("setup_local_APIC is invoked.\n");
    PRE_WRAPPER_FUNC();
    setup_local_APIC();
    POST_WRAPPER_FUNC();
    kern_printk("setup_local_APIC returned.\n");
})
#endif


#ifndef KERN_ADDR_invalidate_inode_page
#define APP_WRAPPER_FOR_invalidate_inode_page
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_inode_page
#define APP_WRAPPER_FOR_invalidate_inode_page
FUNCTION_WRAPPER(invalidate_inode_page, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("invalidate_inode_page is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    int ret = invalidate_inode_page(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("invalidate_inode_page returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR___set_page_dirty_nobuffers
#define APP_WRAPPER_FOR___set_page_dirty_nobuffers
#endif
 
#ifndef APP_WRAPPER_FOR___set_page_dirty_nobuffers
#define APP_WRAPPER_FOR___set_page_dirty_nobuffers
FUNCTION_WRAPPER(__set_page_dirty_nobuffers, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("__set_page_dirty_nobuffers is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    int ret = __set_page_dirty_nobuffers(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("__set_page_dirty_nobuffers returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_nf_conntrack_destroy
#define APP_WRAPPER_FOR_nf_conntrack_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_nf_conntrack_destroy
#define APP_WRAPPER_FOR_nf_conntrack_destroy
FUNCTION_WRAPPER_VOID(nf_conntrack_destroy, (struct nf_conntrack *nfct), {
    kern_printk("nf_conntrack_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(nfct);
    nf_conntrack_destroy(nfct);
    POST_WRAPPER_FUNC(nfct);
    kern_printk("nf_conntrack_destroy returned.\n");
})
#endif


#ifndef KERN_ADDR_skb_copy_datagram_const_iovec
#define APP_WRAPPER_FOR_skb_copy_datagram_const_iovec
#endif
 
#ifndef APP_WRAPPER_FOR_skb_copy_datagram_const_iovec
#define APP_WRAPPER_FOR_skb_copy_datagram_const_iovec
FUNCTION_WRAPPER(skb_copy_datagram_const_iovec, (const struct sk_buff *from, int offset, const struct iovec *to, int to_offset, int size), {
    WRAP_RECURSIVE(from);
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(const struct sk_buff)(*(TO_UNWATCHED_ADDRESS(from)));
    kern_printk("skb_copy_datagram_const_iovec is invoked.\n");
    PRE_WRAPPER_FUNC(from, offset, to, to_offset, size);
    int ret = skb_copy_datagram_const_iovec(from, offset, to, to_offset, size);
    POST_WRAPPER_FUNC(from, offset, to, to_offset, size);
    kern_printk("skb_copy_datagram_const_iovec returned.\n");
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(const struct sk_buff)(*(TO_UNWATCHED_ADDRESS(from)));
    return ret;
})
#endif


#ifndef KERN_ADDR_keventd_up
#define APP_WRAPPER_FOR_keventd_up
#endif
 
#ifndef APP_WRAPPER_FOR_keventd_up
#define APP_WRAPPER_FOR_keventd_up
FUNCTION_WRAPPER(keventd_up, (), {
    kern_printk("keventd_up is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = keventd_up();
    POST_WRAPPER_FUNC();
    kern_printk("keventd_up returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_shrink_dcache_sb
#define APP_WRAPPER_FOR_shrink_dcache_sb
#endif
 
#ifndef APP_WRAPPER_FOR_shrink_dcache_sb
#define APP_WRAPPER_FOR_shrink_dcache_sb
FUNCTION_WRAPPER_VOID(shrink_dcache_sb, (struct super_block *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("shrink_dcache_sb is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    shrink_dcache_sb(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("shrink_dcache_sb returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_end_swap_bio_read
#define APP_WRAPPER_FOR_end_swap_bio_read
#endif
 
#ifndef APP_WRAPPER_FOR_end_swap_bio_read
#define APP_WRAPPER_FOR_end_swap_bio_read
FUNCTION_WRAPPER_VOID(end_swap_bio_read, (struct bio *bio, int err), {
    WRAP_RECURSIVE(bio);
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
    kern_printk("end_swap_bio_read is invoked.\n");
    PRE_WRAPPER_FUNC(bio, err);
    end_swap_bio_read(bio, err);
    POST_WRAPPER_FUNC(bio, err);
    kern_printk("end_swap_bio_read returned.\n");
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
})
#endif


#ifndef KERN_ADDR_dev_pm_qos_add_notifier
#define APP_WRAPPER_FOR_dev_pm_qos_add_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_dev_pm_qos_add_notifier
#define APP_WRAPPER_FOR_dev_pm_qos_add_notifier
FUNCTION_WRAPPER(dev_pm_qos_add_notifier, (struct device *dev, struct notifier_block *notifier), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(notifier);
    TRACES_IF_WATCHPOINT(notifier);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(notifier)));
    kern_printk("dev_pm_qos_add_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(dev, notifier);
    int ret = dev_pm_qos_add_notifier(dev, notifier);
    POST_WRAPPER_FUNC(dev, notifier);
    kern_printk("dev_pm_qos_add_notifier returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(notifier);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(notifier)));
    return ret;
})
#endif


#ifndef KERN_ADDR___flush_signals
#define APP_WRAPPER_FOR___flush_signals
#endif
 
#ifndef APP_WRAPPER_FOR___flush_signals
#define APP_WRAPPER_FOR___flush_signals
FUNCTION_WRAPPER_VOID(__flush_signals, (struct task_struct *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__flush_signals is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    __flush_signals(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__flush_signals returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_wait_iff_congested
#define APP_WRAPPER_FOR_wait_iff_congested
#endif
 
#ifndef APP_WRAPPER_FOR_wait_iff_congested
#define APP_WRAPPER_FOR_wait_iff_congested
FUNCTION_WRAPPER(wait_iff_congested, (struct zone *zone, int sync, long timeout), {
    WRAP_RECURSIVE(zone);
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    kern_printk("wait_iff_congested is invoked.\n");
    PRE_WRAPPER_FUNC(zone, sync, timeout);
    long ret = wait_iff_congested(zone, sync, timeout);
    POST_WRAPPER_FUNC(zone, sync, timeout);
    kern_printk("wait_iff_congested returned.\n");
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    return ret;
})
#endif


#ifndef KERN_ADDR_wmi_remove_notify_handler
#define APP_WRAPPER_FOR_wmi_remove_notify_handler
#endif
 
#ifndef APP_WRAPPER_FOR_wmi_remove_notify_handler
#define APP_WRAPPER_FOR_wmi_remove_notify_handler
FUNCTION_WRAPPER(wmi_remove_notify_handler, (const char *guid), {
    kern_printk("wmi_remove_notify_handler is invoked.\n");
    PRE_WRAPPER_FUNC(guid);
    acpi_status ret = wmi_remove_notify_handler(guid);
    POST_WRAPPER_FUNC(guid);
    kern_printk("wmi_remove_notify_handler returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_bmdma_dumb_qc_prep
#define APP_WRAPPER_FOR_ata_bmdma_dumb_qc_prep
#endif
 
#ifndef APP_WRAPPER_FOR_ata_bmdma_dumb_qc_prep
#define APP_WRAPPER_FOR_ata_bmdma_dumb_qc_prep
FUNCTION_WRAPPER_VOID(ata_bmdma_dumb_qc_prep, (struct ata_queued_cmd *qc), {
    WRAP_RECURSIVE(qc);
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    kern_printk("ata_bmdma_dumb_qc_prep is invoked.\n");
    PRE_WRAPPER_FUNC(qc);
    ata_bmdma_dumb_qc_prep(qc);
    POST_WRAPPER_FUNC(qc);
    kern_printk("ata_bmdma_dumb_qc_prep returned.\n");
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
})
#endif


#ifndef KERN_ADDR_call_netdevice_notifiers
#define APP_WRAPPER_FOR_call_netdevice_notifiers
#endif
 
#ifndef APP_WRAPPER_FOR_call_netdevice_notifiers
#define APP_WRAPPER_FOR_call_netdevice_notifiers
FUNCTION_WRAPPER(call_netdevice_notifiers, (unsigned long val, struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("call_netdevice_notifiers is invoked.\n");
    PRE_WRAPPER_FUNC(val, dev);
    int ret = call_netdevice_notifiers(val, dev);
    POST_WRAPPER_FUNC(val, dev);
    kern_printk("call_netdevice_notifiers returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_early_acpi_boot_init
#define APP_WRAPPER_FOR_early_acpi_boot_init
#endif
 
#ifndef APP_WRAPPER_FOR_early_acpi_boot_init
#define APP_WRAPPER_FOR_early_acpi_boot_init
FUNCTION_WRAPPER(early_acpi_boot_init, (), {
    kern_printk("early_acpi_boot_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = early_acpi_boot_init();
    POST_WRAPPER_FUNC();
    kern_printk("early_acpi_boot_init returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_cfg_space_size
#define APP_WRAPPER_FOR_pci_cfg_space_size
#endif
 
#ifndef APP_WRAPPER_FOR_pci_cfg_space_size
#define APP_WRAPPER_FOR_pci_cfg_space_size
FUNCTION_WRAPPER(pci_cfg_space_size, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_cfg_space_size is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pci_cfg_space_size(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_cfg_space_size returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kernel_read
#define APP_WRAPPER_FOR_kernel_read
#endif
 
#ifndef APP_WRAPPER_FOR_kernel_read
#define APP_WRAPPER_FOR_kernel_read
FUNCTION_WRAPPER(kernel_read, (struct file *_arg1, loff_t _arg2, char *_arg3, unsigned long _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("kernel_read is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = kernel_read(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("kernel_read returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_socketcall
#define APP_WRAPPER_FOR_compat_sys_socketcall
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_socketcall
#define APP_WRAPPER_FOR_compat_sys_socketcall
FUNCTION_WRAPPER(compat_sys_socketcall, (int call, u32 *args), {
    kern_printk("compat_sys_socketcall is invoked.\n");
    PRE_WRAPPER_FUNC(call, args);
    long ret = compat_sys_socketcall(call, args);
    POST_WRAPPER_FUNC(call, args);
    kern_printk("compat_sys_socketcall returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_file_readonly_mmap
#define APP_WRAPPER_FOR_generic_file_readonly_mmap
#endif
 
#ifndef APP_WRAPPER_FOR_generic_file_readonly_mmap
#define APP_WRAPPER_FOR_generic_file_readonly_mmap
FUNCTION_WRAPPER(generic_file_readonly_mmap, (struct file *_arg1, struct vm_area_struct *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("generic_file_readonly_mmap is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = generic_file_readonly_mmap(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("generic_file_readonly_mmap returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_write_memory
#define APP_WRAPPER_FOR_acpi_os_write_memory
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_write_memory
#define APP_WRAPPER_FOR_acpi_os_write_memory
FUNCTION_WRAPPER(acpi_os_write_memory, (acpi_physical_address address, u64 value, u32 width), {
    kern_printk("acpi_os_write_memory is invoked.\n");
    PRE_WRAPPER_FUNC(address, value, width);
    acpi_status ret = acpi_os_write_memory(address, value, width);
    POST_WRAPPER_FUNC(address, value, width);
    kern_printk("acpi_os_write_memory returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_scsi_host_set_state
#define APP_WRAPPER_FOR_scsi_host_set_state
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_host_set_state
#define APP_WRAPPER_FOR_scsi_host_set_state
FUNCTION_WRAPPER(scsi_host_set_state, (struct Scsi_Host *_arg1, enum scsi_host_state _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("scsi_host_set_state is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = scsi_host_set_state(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("scsi_host_set_state returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR___jbd2_log_start_commit
#define APP_WRAPPER_FOR___jbd2_log_start_commit
#endif
 
#ifndef APP_WRAPPER_FOR___jbd2_log_start_commit
#define APP_WRAPPER_FOR___jbd2_log_start_commit
FUNCTION_WRAPPER(__jbd2_log_start_commit, (journal_t *journal, tid_t tid), {
    WRAP_RECURSIVE(journal);
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    kern_printk("__jbd2_log_start_commit is invoked.\n");
    PRE_WRAPPER_FUNC(journal, tid);
    int ret = __jbd2_log_start_commit(journal, tid);
    POST_WRAPPER_FUNC(journal, tid);
    kern_printk("__jbd2_log_start_commit returned.\n");
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_no_socketpair
#define APP_WRAPPER_FOR_sock_no_socketpair
#endif
 
#ifndef APP_WRAPPER_FOR_sock_no_socketpair
#define APP_WRAPPER_FOR_sock_no_socketpair
FUNCTION_WRAPPER(sock_no_socketpair, (struct socket *_arg1, struct socket *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("sock_no_socketpair is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = sock_no_socketpair(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("sock_no_socketpair returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_timekeeping_inject_offset
#define APP_WRAPPER_FOR_timekeeping_inject_offset
#endif
 
#ifndef APP_WRAPPER_FOR_timekeeping_inject_offset
#define APP_WRAPPER_FOR_timekeeping_inject_offset
FUNCTION_WRAPPER(timekeeping_inject_offset, (struct timespec *ts), {
    kern_printk("timekeeping_inject_offset is invoked.\n");
    PRE_WRAPPER_FUNC(ts);
    int ret = timekeeping_inject_offset(ts);
    POST_WRAPPER_FUNC(ts);
    kern_printk("timekeeping_inject_offset returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_phy_ethtool_set_eee
#define APP_WRAPPER_FOR_phy_ethtool_set_eee
#endif
 
#ifndef APP_WRAPPER_FOR_phy_ethtool_set_eee
#define APP_WRAPPER_FOR_phy_ethtool_set_eee
FUNCTION_WRAPPER(phy_ethtool_set_eee, (struct phy_device *phydev, struct ethtool_eee *data), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    kern_printk("phy_ethtool_set_eee is invoked.\n");
    PRE_WRAPPER_FUNC(phydev, data);
    int ret = phy_ethtool_set_eee(phydev, data);
    POST_WRAPPER_FUNC(phydev, data);
    kern_printk("phy_ethtool_set_eee returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_restore_altstack
#define APP_WRAPPER_FOR_compat_restore_altstack
#endif
 
#ifndef APP_WRAPPER_FOR_compat_restore_altstack
#define APP_WRAPPER_FOR_compat_restore_altstack
FUNCTION_WRAPPER(compat_restore_altstack, (const compat_stack_t *uss), {
    kern_printk("compat_restore_altstack is invoked.\n");
    PRE_WRAPPER_FUNC(uss);
    int ret = compat_restore_altstack(uss);
    POST_WRAPPER_FUNC(uss);
    kern_printk("compat_restore_altstack returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_destroy_irq
#define APP_WRAPPER_FOR_destroy_irq
#endif
 
#ifndef APP_WRAPPER_FOR_destroy_irq
#define APP_WRAPPER_FOR_destroy_irq
FUNCTION_WRAPPER_VOID(destroy_irq, (unsigned int irq), {
    kern_printk("destroy_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq);
    destroy_irq(irq);
    POST_WRAPPER_FUNC(irq);
    kern_printk("destroy_irq returned.\n");
})
#endif


#ifndef KERN_ADDR_skb_queue_purge
#define APP_WRAPPER_FOR_skb_queue_purge
#endif
 
#ifndef APP_WRAPPER_FOR_skb_queue_purge
#define APP_WRAPPER_FOR_skb_queue_purge
FUNCTION_WRAPPER_VOID(skb_queue_purge, (struct sk_buff_head *list), {
    WRAP_RECURSIVE(list);
    TRACES_IF_WATCHPOINT(list);
    SCAN_HEAD_FUNC(struct sk_buff_head)(*(TO_UNWATCHED_ADDRESS(list)));
    kern_printk("skb_queue_purge is invoked.\n");
    PRE_WRAPPER_FUNC(list);
    skb_queue_purge(list);
    POST_WRAPPER_FUNC(list);
    kern_printk("skb_queue_purge returned.\n");
    TRACES_IF_WATCHPOINT(list);
    SCAN_HEAD_FUNC(struct sk_buff_head)(*(TO_UNWATCHED_ADDRESS(list)));
})
#endif


#ifndef KERN_ADDR_netdev_state_change
#define APP_WRAPPER_FOR_netdev_state_change
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_state_change
#define APP_WRAPPER_FOR_netdev_state_change
FUNCTION_WRAPPER_VOID(netdev_state_change, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("netdev_state_change is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    netdev_state_change(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("netdev_state_change returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_early_ioremap
#define APP_WRAPPER_FOR_early_ioremap
#endif
 
#ifndef APP_WRAPPER_FOR_early_ioremap
#define APP_WRAPPER_FOR_early_ioremap
FUNCTION_WRAPPER(early_ioremap, (resource_size_t phys_addr, unsigned long size), {
    kern_printk("early_ioremap is invoked.\n");
    PRE_WRAPPER_FUNC(phys_addr, size);
    void *ret = early_ioremap(phys_addr, size);
    POST_WRAPPER_FUNC(phys_addr, size);
    kern_printk("early_ioremap returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_bus_write_config_word
#define APP_WRAPPER_FOR_pci_bus_write_config_word
#endif
 
#ifndef APP_WRAPPER_FOR_pci_bus_write_config_word
#define APP_WRAPPER_FOR_pci_bus_write_config_word
FUNCTION_WRAPPER(pci_bus_write_config_word, (struct pci_bus *bus, unsigned int devfn, int where, u16 val), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_bus_write_config_word is invoked.\n");
    PRE_WRAPPER_FUNC(bus, devfn, where, val);
    int ret = pci_bus_write_config_word(bus, devfn, where, val);
    POST_WRAPPER_FUNC(bus, devfn, where, val);
    kern_printk("pci_bus_write_config_word returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    return ret;
})
#endif


#ifndef KERN_ADDR_hrtimer_run_queues
#define APP_WRAPPER_FOR_hrtimer_run_queues
#endif
 
#ifndef APP_WRAPPER_FOR_hrtimer_run_queues
#define APP_WRAPPER_FOR_hrtimer_run_queues
FUNCTION_WRAPPER_VOID(hrtimer_run_queues, (), {
    kern_printk("hrtimer_run_queues is invoked.\n");
    PRE_WRAPPER_FUNC();
    hrtimer_run_queues();
    POST_WRAPPER_FUNC();
    kern_printk("hrtimer_run_queues returned.\n");
})
#endif


#ifndef KERN_ADDR_jbd2_journal_destroy_revoke
#define APP_WRAPPER_FOR_jbd2_journal_destroy_revoke
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_destroy_revoke
#define APP_WRAPPER_FOR_jbd2_journal_destroy_revoke
FUNCTION_WRAPPER_VOID(jbd2_journal_destroy_revoke, (journal_t *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_destroy_revoke is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    jbd2_journal_destroy_revoke(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("jbd2_journal_destroy_revoke returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_irq_set_handler_data
#define APP_WRAPPER_FOR_irq_set_handler_data
#endif
 
#ifndef APP_WRAPPER_FOR_irq_set_handler_data
#define APP_WRAPPER_FOR_irq_set_handler_data
FUNCTION_WRAPPER(irq_set_handler_data, (unsigned int irq, void *data), {
    kern_printk("irq_set_handler_data is invoked.\n");
    PRE_WRAPPER_FUNC(irq, data);
    int ret = irq_set_handler_data(irq, data);
    POST_WRAPPER_FUNC(irq, data);
    kern_printk("irq_set_handler_data returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pcix_get_max_mmrbc
#define APP_WRAPPER_FOR_pcix_get_max_mmrbc
#endif
 
#ifndef APP_WRAPPER_FOR_pcix_get_max_mmrbc
#define APP_WRAPPER_FOR_pcix_get_max_mmrbc
FUNCTION_WRAPPER(pcix_get_max_mmrbc, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pcix_get_max_mmrbc is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pcix_get_max_mmrbc(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pcix_get_max_mmrbc returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_get_wchan
#define APP_WRAPPER_FOR_get_wchan
#endif
 
#ifndef APP_WRAPPER_FOR_get_wchan
#define APP_WRAPPER_FOR_get_wchan
FUNCTION_WRAPPER(get_wchan, (struct task_struct *p), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("get_wchan is invoked.\n");
    PRE_WRAPPER_FUNC(p);
    long ret = get_wchan(p);
    POST_WRAPPER_FUNC(p);
    kern_printk("get_wchan returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    return ret;
})
#endif


#ifndef KERN_ADDR_native_safe_apic_wait_icr_idle
#define APP_WRAPPER_FOR_native_safe_apic_wait_icr_idle
#endif
 
#ifndef APP_WRAPPER_FOR_native_safe_apic_wait_icr_idle
#define APP_WRAPPER_FOR_native_safe_apic_wait_icr_idle
FUNCTION_WRAPPER(native_safe_apic_wait_icr_idle, (), {
    kern_printk("native_safe_apic_wait_icr_idle is invoked.\n");
    PRE_WRAPPER_FUNC();
    u32 ret = native_safe_apic_wait_icr_idle();
    POST_WRAPPER_FUNC();
    kern_printk("native_safe_apic_wait_icr_idle returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dquot_destroy
#define APP_WRAPPER_FOR_dquot_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_destroy
#define APP_WRAPPER_FOR_dquot_destroy
FUNCTION_WRAPPER_VOID(dquot_destroy, (struct dquot *dquot), {
    WRAP_RECURSIVE(dquot);
    TRACES_IF_WATCHPOINT(dquot);
    SCAN_HEAD_FUNC(struct dquot)(*(TO_UNWATCHED_ADDRESS(dquot)));
    kern_printk("dquot_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(dquot);
    dquot_destroy(dquot);
    POST_WRAPPER_FUNC(dquot);
    kern_printk("dquot_destroy returned.\n");
    TRACES_IF_WATCHPOINT(dquot);
    SCAN_HEAD_FUNC(struct dquot)(*(TO_UNWATCHED_ADDRESS(dquot)));
})
#endif


#ifndef KERN_ADDR_fprop_new_period
#define APP_WRAPPER_FOR_fprop_new_period
#endif
 
#ifndef APP_WRAPPER_FOR_fprop_new_period
#define APP_WRAPPER_FOR_fprop_new_period
FUNCTION_WRAPPER(fprop_new_period, (struct fprop_global *p, int periods), {
    kern_printk("fprop_new_period is invoked.\n");
    PRE_WRAPPER_FUNC(p, periods);
    bool ret = fprop_new_period(p, periods);
    POST_WRAPPER_FUNC(p, periods);
    kern_printk("fprop_new_period returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_usermodehelper_read_lock_wait
#define APP_WRAPPER_FOR_usermodehelper_read_lock_wait
#endif
 
#ifndef APP_WRAPPER_FOR_usermodehelper_read_lock_wait
#define APP_WRAPPER_FOR_usermodehelper_read_lock_wait
FUNCTION_WRAPPER(usermodehelper_read_lock_wait, (long timeout), {
    kern_printk("usermodehelper_read_lock_wait is invoked.\n");
    PRE_WRAPPER_FUNC(timeout);
    long ret = usermodehelper_read_lock_wait(timeout);
    POST_WRAPPER_FUNC(timeout);
    kern_printk("usermodehelper_read_lock_wait returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dcb_getapp
#define APP_WRAPPER_FOR_dcb_getapp
#endif
 
#ifndef APP_WRAPPER_FOR_dcb_getapp
#define APP_WRAPPER_FOR_dcb_getapp
FUNCTION_WRAPPER(dcb_getapp, (struct net_device *_arg1, struct dcb_app *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("dcb_getapp is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    u8 ret = dcb_getapp(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("dcb_getapp returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR___blk_complete_request
#define APP_WRAPPER_FOR___blk_complete_request
#endif
 
#ifndef APP_WRAPPER_FOR___blk_complete_request
#define APP_WRAPPER_FOR___blk_complete_request
FUNCTION_WRAPPER_VOID(__blk_complete_request, (struct request *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__blk_complete_request is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    __blk_complete_request(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__blk_complete_request returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_netlink_broadcast_filtered
#define APP_WRAPPER_FOR_netlink_broadcast_filtered
#endif
 
#ifndef APP_WRAPPER_FOR_netlink_broadcast_filtered
#define APP_WRAPPER_FOR_netlink_broadcast_filtered
FUNCTION_WRAPPER(netlink_broadcast_filtered, (struct sock *ssk, struct sk_buff *skb, __u32 portid, __u32 group, gfp_t allocation, int (*filter)(struct sock *, struct sk_buff *, void *), void *filter_data), {
    WRAP_RECURSIVE(ssk);
    TRACES_IF_WATCHPOINT(ssk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(ssk)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_FUNCTION(filter);
    kern_printk("netlink_broadcast_filtered is invoked.\n");
    PRE_WRAPPER_FUNC(ssk, skb, portid, group, allocation, filter, filter_data);
    int ret = netlink_broadcast_filtered(ssk, skb, portid, group, allocation, filter, filter_data);
    POST_WRAPPER_FUNC(ssk, skb, portid, group, allocation, filter, filter_data);
    kern_printk("netlink_broadcast_filtered returned.\n");
    TRACES_IF_WATCHPOINT(ssk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(ssk)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pcie_bus_configure_settings
#define APP_WRAPPER_FOR_pcie_bus_configure_settings
#endif
 
#ifndef APP_WRAPPER_FOR_pcie_bus_configure_settings
#define APP_WRAPPER_FOR_pcie_bus_configure_settings
FUNCTION_WRAPPER_VOID(pcie_bus_configure_settings, (struct pci_bus *bus, u8 smpss), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pcie_bus_configure_settings is invoked.\n");
    PRE_WRAPPER_FUNC(bus, smpss);
    pcie_bus_configure_settings(bus, smpss);
    POST_WRAPPER_FUNC(bus, smpss);
    kern_printk("pcie_bus_configure_settings returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
})
#endif


#ifndef KERN_ADDR_klist_init
#define APP_WRAPPER_FOR_klist_init
#endif
 
#ifndef APP_WRAPPER_FOR_klist_init
#define APP_WRAPPER_FOR_klist_init
FUNCTION_WRAPPER_VOID(klist_init, (struct klist *k, void (*get)(struct klist_node *), void (*put)(struct klist_node *)), {
    WRAP_RECURSIVE(k);
    TRACES_IF_WATCHPOINT(k);
    SCAN_HEAD_FUNC(struct klist)(*(TO_UNWATCHED_ADDRESS(k)));
    WRAP_FUNCTION(get);
    WRAP_FUNCTION(put);
    kern_printk("klist_init is invoked.\n");
    PRE_WRAPPER_FUNC(k, get, put);
    klist_init(k, get, put);
    POST_WRAPPER_FUNC(k, get, put);
    kern_printk("klist_init returned.\n");
    TRACES_IF_WATCHPOINT(k);
    SCAN_HEAD_FUNC(struct klist)(*(TO_UNWATCHED_ADDRESS(k)));
})
#endif


#ifndef KERN_ADDR_ilookup
#define APP_WRAPPER_FOR_ilookup
#endif
 
#ifndef APP_WRAPPER_FOR_ilookup
#define APP_WRAPPER_FOR_ilookup
FUNCTION_WRAPPER(ilookup, (struct super_block *sb, unsigned long ino), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("ilookup is invoked.\n");
    PRE_WRAPPER_FUNC(sb, ino);
    struct inode *ret = ilookup(sb, ino);
    POST_WRAPPER_FUNC(sb, ino);
    kern_printk("ilookup returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sched_group_set_rt_runtime
#define APP_WRAPPER_FOR_sched_group_set_rt_runtime
#endif
 
#ifndef APP_WRAPPER_FOR_sched_group_set_rt_runtime
#define APP_WRAPPER_FOR_sched_group_set_rt_runtime
FUNCTION_WRAPPER(sched_group_set_rt_runtime, (struct task_group *tg, long rt_runtime_us), {
    kern_printk("sched_group_set_rt_runtime is invoked.\n");
    PRE_WRAPPER_FUNC(tg, rt_runtime_us);
    int ret = sched_group_set_rt_runtime(tg, rt_runtime_us);
    POST_WRAPPER_FUNC(tg, rt_runtime_us);
    kern_printk("sched_group_set_rt_runtime returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___skb_checksum_complete_head
#define APP_WRAPPER_FOR___skb_checksum_complete_head
#endif
 
#ifndef APP_WRAPPER_FOR___skb_checksum_complete_head
#define APP_WRAPPER_FOR___skb_checksum_complete_head
FUNCTION_WRAPPER(__skb_checksum_complete_head, (struct sk_buff *skb, int len), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("__skb_checksum_complete_head is invoked.\n");
    PRE_WRAPPER_FUNC(skb, len);
    __sum16 ret = __skb_checksum_complete_head(skb, len);
    POST_WRAPPER_FUNC(skb, len);
    kern_printk("__skb_checksum_complete_head returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_pm_qos_add_global_notifier
#define APP_WRAPPER_FOR_dev_pm_qos_add_global_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_dev_pm_qos_add_global_notifier
#define APP_WRAPPER_FOR_dev_pm_qos_add_global_notifier
FUNCTION_WRAPPER(dev_pm_qos_add_global_notifier, (struct notifier_block *notifier), {
    WRAP_RECURSIVE(notifier);
    TRACES_IF_WATCHPOINT(notifier);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(notifier)));
    kern_printk("dev_pm_qos_add_global_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(notifier);
    int ret = dev_pm_qos_add_global_notifier(notifier);
    POST_WRAPPER_FUNC(notifier);
    kern_printk("dev_pm_qos_add_global_notifier returned.\n");
    TRACES_IF_WATCHPOINT(notifier);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(notifier)));
    return ret;
})
#endif


#ifndef KERN_ADDR_tracepoint_iter_reset
#define APP_WRAPPER_FOR_tracepoint_iter_reset
#endif
 
#ifndef APP_WRAPPER_FOR_tracepoint_iter_reset
#define APP_WRAPPER_FOR_tracepoint_iter_reset
FUNCTION_WRAPPER_VOID(tracepoint_iter_reset, (struct tracepoint_iter *iter), {
    WRAP_RECURSIVE(iter);
    TRACES_IF_WATCHPOINT(iter);
    SCAN_HEAD_FUNC(struct tracepoint_iter)(*(TO_UNWATCHED_ADDRESS(iter)));
    kern_printk("tracepoint_iter_reset is invoked.\n");
    PRE_WRAPPER_FUNC(iter);
    tracepoint_iter_reset(iter);
    POST_WRAPPER_FUNC(iter);
    kern_printk("tracepoint_iter_reset returned.\n");
    TRACES_IF_WATCHPOINT(iter);
    SCAN_HEAD_FUNC(struct tracepoint_iter)(*(TO_UNWATCHED_ADDRESS(iter)));
})
#endif


#ifndef KERN_ADDR_smp_call_function_single
#define APP_WRAPPER_FOR_smp_call_function_single
#endif
 
#ifndef APP_WRAPPER_FOR_smp_call_function_single
#define APP_WRAPPER_FOR_smp_call_function_single
FUNCTION_WRAPPER(smp_call_function_single, (int cpuid, smp_call_func_t func, void *info, int wait), {
    WRAP_FUNCTION(func);
    kern_printk("smp_call_function_single is invoked.\n");
    PRE_WRAPPER_FUNC(cpuid, func, info, wait);
    int ret = smp_call_function_single(cpuid, func, info, wait);
    POST_WRAPPER_FUNC(cpuid, func, info, wait);
    kern_printk("smp_call_function_single returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_bd_forget
#define APP_WRAPPER_FOR_bd_forget
#endif
 
#ifndef APP_WRAPPER_FOR_bd_forget
#define APP_WRAPPER_FOR_bd_forget
FUNCTION_WRAPPER_VOID(bd_forget, (struct inode *inode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("bd_forget is invoked.\n");
    PRE_WRAPPER_FUNC(inode);
    bd_forget(inode);
    POST_WRAPPER_FUNC(inode);
    kern_printk("bd_forget returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_user_shm_lock
#define APP_WRAPPER_FOR_user_shm_lock
#endif
 
#ifndef APP_WRAPPER_FOR_user_shm_lock
#define APP_WRAPPER_FOR_user_shm_lock
FUNCTION_WRAPPER(user_shm_lock, (size_t _arg1, struct user_struct *_arg2), {
    kern_printk("user_shm_lock is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = user_shm_lock(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("user_shm_lock returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_callocate
#define APP_WRAPPER_FOR_acpi_callocate
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_callocate
#define APP_WRAPPER_FOR_acpi_callocate
FUNCTION_WRAPPER(acpi_callocate, (u32 size), {
    kern_printk("acpi_callocate is invoked.\n");
    PRE_WRAPPER_FUNC(size);
    void *ret = acpi_callocate(size);
    POST_WRAPPER_FUNC(size);
    kern_printk("acpi_callocate returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_netlink_getsockbyfilp
#define APP_WRAPPER_FOR_netlink_getsockbyfilp
#endif
 
#ifndef APP_WRAPPER_FOR_netlink_getsockbyfilp
#define APP_WRAPPER_FOR_netlink_getsockbyfilp
FUNCTION_WRAPPER(netlink_getsockbyfilp, (struct file *filp), {
    WRAP_RECURSIVE(filp);
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    kern_printk("netlink_getsockbyfilp is invoked.\n");
    PRE_WRAPPER_FUNC(filp);
    struct sock *ret = netlink_getsockbyfilp(filp);
    POST_WRAPPER_FUNC(filp);
    kern_printk("netlink_getsockbyfilp returned.\n");
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR__dev_info
#define APP_WRAPPER_FOR__dev_info
#endif
 
#ifndef APP_WRAPPER_FOR__dev_info
#define APP_WRAPPER_FOR__dev_info
FUNCTION_WRAPPER(_dev_info, (const struct device *dev, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    // TODO: variadic arguments
    kern_printk("_dev_info is invoked.\n");
    PRE_WRAPPER_FUNC(dev, fmt);
    int ret = _dev_info(dev, fmt);
    POST_WRAPPER_FUNC(dev, fmt);
    kern_printk("_dev_info returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_find_upstream_pcie_bridge
#define APP_WRAPPER_FOR_pci_find_upstream_pcie_bridge
#endif
 
#ifndef APP_WRAPPER_FOR_pci_find_upstream_pcie_bridge
#define APP_WRAPPER_FOR_pci_find_upstream_pcie_bridge
FUNCTION_WRAPPER(pci_find_upstream_pcie_bridge, (struct pci_dev *pdev), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("pci_find_upstream_pcie_bridge is invoked.\n");
    PRE_WRAPPER_FUNC(pdev);
    struct pci_dev *ret = pci_find_upstream_pcie_bridge(pdev);
    POST_WRAPPER_FUNC(pdev);
    kern_printk("pci_find_upstream_pcie_bridge returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_arch_irq_stat_cpu
#define APP_WRAPPER_FOR_arch_irq_stat_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_arch_irq_stat_cpu
#define APP_WRAPPER_FOR_arch_irq_stat_cpu
FUNCTION_WRAPPER(arch_irq_stat_cpu, (unsigned int cpu), {
    kern_printk("arch_irq_stat_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    u64 ret = arch_irq_stat_cpu(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("arch_irq_stat_cpu returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_aio_complete
#define APP_WRAPPER_FOR_aio_complete
#endif
 
#ifndef APP_WRAPPER_FOR_aio_complete
#define APP_WRAPPER_FOR_aio_complete
FUNCTION_WRAPPER(aio_complete, (struct kiocb *iocb, long res, long res2), {
    WRAP_RECURSIVE(iocb);
    TRACES_IF_WATCHPOINT(iocb);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(iocb)));
    kern_printk("aio_complete is invoked.\n");
    PRE_WRAPPER_FUNC(iocb, res, res2);
    int ret = aio_complete(iocb, res, res2);
    POST_WRAPPER_FUNC(iocb, res, res2);
    kern_printk("aio_complete returned.\n");
    TRACES_IF_WATCHPOINT(iocb);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(iocb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_nf_setsockopt
#define APP_WRAPPER_FOR_compat_nf_setsockopt
#endif
 
#ifndef APP_WRAPPER_FOR_compat_nf_setsockopt
#define APP_WRAPPER_FOR_compat_nf_setsockopt
FUNCTION_WRAPPER(compat_nf_setsockopt, (struct sock *sk, u_int8_t pf, int optval, char *opt, unsigned int len), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("compat_nf_setsockopt is invoked.\n");
    PRE_WRAPPER_FUNC(sk, pf, optval, opt, len);
    int ret = compat_nf_setsockopt(sk, pf, optval, opt, len);
    POST_WRAPPER_FUNC(sk, pf, optval, opt, len);
    kern_printk("compat_nf_setsockopt returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_iterate_supers_type
#define APP_WRAPPER_FOR_iterate_supers_type
#endif
 
#ifndef APP_WRAPPER_FOR_iterate_supers_type
#define APP_WRAPPER_FOR_iterate_supers_type
FUNCTION_WRAPPER_VOID(iterate_supers_type, (struct file_system_type *_arg1, void (*_arg2)(struct super_block *, void *), void *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_FUNCTION(_arg2);
    kern_printk("iterate_supers_type is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    iterate_supers_type(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("iterate_supers_type returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_warn_slowpath_null
#define APP_WRAPPER_FOR_warn_slowpath_null
#endif
 
#ifndef APP_WRAPPER_FOR_warn_slowpath_null
#define APP_WRAPPER_FOR_warn_slowpath_null
FUNCTION_WRAPPER_VOID(warn_slowpath_null, (const char *file, const int line), {
    kern_printk("warn_slowpath_null is invoked.\n");
    PRE_WRAPPER_FUNC(file, line);
    warn_slowpath_null(file, line);
    POST_WRAPPER_FUNC(file, line);
    kern_printk("warn_slowpath_null returned.\n");
})
#endif


#ifndef KERN_ADDR_compat_sys_clock_nanosleep
#define APP_WRAPPER_FOR_compat_sys_clock_nanosleep
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_clock_nanosleep
#define APP_WRAPPER_FOR_compat_sys_clock_nanosleep
FUNCTION_WRAPPER(compat_sys_clock_nanosleep, (clockid_t which_clock, int flags, struct compat_timespec *rqtp, struct compat_timespec *rmtp), {
    kern_printk("compat_sys_clock_nanosleep is invoked.\n");
    PRE_WRAPPER_FUNC(which_clock, flags, rqtp, rmtp);
    long ret = compat_sys_clock_nanosleep(which_clock, flags, rqtp, rmtp);
    POST_WRAPPER_FUNC(which_clock, flags, rqtp, rmtp);
    kern_printk("compat_sys_clock_nanosleep returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_alloc_chrdev_region
#define APP_WRAPPER_FOR_alloc_chrdev_region
#endif
 
#ifndef APP_WRAPPER_FOR_alloc_chrdev_region
#define APP_WRAPPER_FOR_alloc_chrdev_region
FUNCTION_WRAPPER(alloc_chrdev_region, (dev_t *_arg1, unsigned int _arg2, unsigned int _arg3, const char *_arg4), {
    kern_printk("alloc_chrdev_region is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = alloc_chrdev_region(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("alloc_chrdev_region returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_key_unlink
#define APP_WRAPPER_FOR_key_unlink
#endif
 
#ifndef APP_WRAPPER_FOR_key_unlink
#define APP_WRAPPER_FOR_key_unlink
FUNCTION_WRAPPER(key_unlink, (struct key *keyring, struct key *key), {
    kern_printk("key_unlink is invoked.\n");
    PRE_WRAPPER_FUNC(keyring, key);
    int ret = key_unlink(keyring, key);
    POST_WRAPPER_FUNC(keyring, key);
    kern_printk("key_unlink returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sff_dev_classify
#define APP_WRAPPER_FOR_ata_sff_dev_classify
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_dev_classify
#define APP_WRAPPER_FOR_ata_sff_dev_classify
FUNCTION_WRAPPER(ata_sff_dev_classify, (struct ata_device *dev, int present, u8 *r_err), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct ata_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("ata_sff_dev_classify is invoked.\n");
    PRE_WRAPPER_FUNC(dev, present, r_err);
    int ret = ata_sff_dev_classify(dev, present, r_err);
    POST_WRAPPER_FUNC(dev, present, r_err);
    kern_printk("ata_sff_dev_classify returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct ata_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_iowrite16
#define APP_WRAPPER_FOR_iowrite16
#endif
 
#ifndef APP_WRAPPER_FOR_iowrite16
#define APP_WRAPPER_FOR_iowrite16
FUNCTION_WRAPPER_VOID(iowrite16, (u16 _arg1, void *_arg2), {
    kern_printk("iowrite16 is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    iowrite16(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("iowrite16 returned.\n");
})
#endif


#ifndef KERN_ADDR_ata_host_detach
#define APP_WRAPPER_FOR_ata_host_detach
#endif
 
#ifndef APP_WRAPPER_FOR_ata_host_detach
#define APP_WRAPPER_FOR_ata_host_detach
FUNCTION_WRAPPER_VOID(ata_host_detach, (struct ata_host *host), {
    WRAP_RECURSIVE(host);
    TRACES_IF_WATCHPOINT(host);
    SCAN_HEAD_FUNC(struct ata_host)(*(TO_UNWATCHED_ADDRESS(host)));
    kern_printk("ata_host_detach is invoked.\n");
    PRE_WRAPPER_FUNC(host);
    ata_host_detach(host);
    POST_WRAPPER_FUNC(host);
    kern_printk("ata_host_detach returned.\n");
    TRACES_IF_WATCHPOINT(host);
    SCAN_HEAD_FUNC(struct ata_host)(*(TO_UNWATCHED_ADDRESS(host)));
})
#endif


#ifndef KERN_ADDR_vfs_lstat
#define APP_WRAPPER_FOR_vfs_lstat
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_lstat
#define APP_WRAPPER_FOR_vfs_lstat
FUNCTION_WRAPPER(vfs_lstat, (const char *_arg1, struct kstat *_arg2), {
    kern_printk("vfs_lstat is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = vfs_lstat(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("vfs_lstat returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sff_dma_pause
#define APP_WRAPPER_FOR_ata_sff_dma_pause
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_dma_pause
#define APP_WRAPPER_FOR_ata_sff_dma_pause
FUNCTION_WRAPPER_VOID(ata_sff_dma_pause, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_sff_dma_pause is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    ata_sff_dma_pause(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_sff_dma_pause returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_generic_file_fsync
#define APP_WRAPPER_FOR_generic_file_fsync
#endif
 
#ifndef APP_WRAPPER_FOR_generic_file_fsync
#define APP_WRAPPER_FOR_generic_file_fsync
FUNCTION_WRAPPER(generic_file_fsync, (struct file *_arg1, loff_t _arg2, loff_t _arg3, int _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("generic_file_fsync is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = generic_file_fsync(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("generic_file_fsync returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_memmove
#define APP_WRAPPER_FOR_memmove
#endif
 
#ifndef APP_WRAPPER_FOR_memmove
#define APP_WRAPPER_FOR_memmove
FUNCTION_WRAPPER(memmove, (void *dest, const void *src, size_t count), {
    kern_printk("memmove is invoked.\n");
    PRE_WRAPPER_FUNC(dest, src, count);
    void *ret = memmove(dest, src, count);
    POST_WRAPPER_FUNC(dest, src, count);
    kern_printk("memmove returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dma_run_dependencies
#define APP_WRAPPER_FOR_dma_run_dependencies
#endif
 
#ifndef APP_WRAPPER_FOR_dma_run_dependencies
#define APP_WRAPPER_FOR_dma_run_dependencies
FUNCTION_WRAPPER_VOID(dma_run_dependencies, (struct dma_async_tx_descriptor *tx), {
    WRAP_RECURSIVE(tx);
    TRACES_IF_WATCHPOINT(tx);
    SCAN_HEAD_FUNC(struct dma_async_tx_descriptor)(*(TO_UNWATCHED_ADDRESS(tx)));
    kern_printk("dma_run_dependencies is invoked.\n");
    PRE_WRAPPER_FUNC(tx);
    dma_run_dependencies(tx);
    POST_WRAPPER_FUNC(tx);
    kern_printk("dma_run_dependencies returned.\n");
    TRACES_IF_WATCHPOINT(tx);
    SCAN_HEAD_FUNC(struct dma_async_tx_descriptor)(*(TO_UNWATCHED_ADDRESS(tx)));
})
#endif


#ifndef KERN_ADDR_acpi_acquire_global_lock
#define APP_WRAPPER_FOR_acpi_acquire_global_lock
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_acquire_global_lock
#define APP_WRAPPER_FOR_acpi_acquire_global_lock
FUNCTION_WRAPPER(acpi_acquire_global_lock, (u16 timeout, u32 *handle), {
    kern_printk("acpi_acquire_global_lock is invoked.\n");
    PRE_WRAPPER_FUNC(timeout, handle);
    acpi_status ret = acpi_acquire_global_lock(timeout, handle);
    POST_WRAPPER_FUNC(timeout, handle);
    kern_printk("acpi_acquire_global_lock returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_simple_write_begin
#define APP_WRAPPER_FOR_simple_write_begin
#endif
 
#ifndef APP_WRAPPER_FOR_simple_write_begin
#define APP_WRAPPER_FOR_simple_write_begin
FUNCTION_WRAPPER(simple_write_begin, (struct file *file, struct address_space *mapping, loff_t pos, unsigned int len, unsigned int flags, struct page **pagep, void **fsdata), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    WRAP_RECURSIVE(pagep);
    TRACES_IF_WATCHPOINT(pagep);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pagep)));
    kern_printk("simple_write_begin is invoked.\n");
    PRE_WRAPPER_FUNC(file, mapping, pos, len, flags, pagep, fsdata);
    int ret = simple_write_begin(file, mapping, pos, len, flags, pagep, fsdata);
    POST_WRAPPER_FUNC(file, mapping, pos, len, flags, pagep, fsdata);
    kern_printk("simple_write_begin returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    TRACES_IF_WATCHPOINT(pagep);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pagep)));
    return ret;
})
#endif


#ifndef KERN_ADDR_rt_mutex_lock
#define APP_WRAPPER_FOR_rt_mutex_lock
#endif
 
#ifndef APP_WRAPPER_FOR_rt_mutex_lock
#define APP_WRAPPER_FOR_rt_mutex_lock
FUNCTION_WRAPPER_VOID(rt_mutex_lock, (struct rt_mutex *lock), {
    WRAP_RECURSIVE(lock);
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct rt_mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
    kern_printk("rt_mutex_lock is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    rt_mutex_lock(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("rt_mutex_lock returned.\n");
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct rt_mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
})
#endif


#ifndef KERN_ADDR_pci_request_region
#define APP_WRAPPER_FOR_pci_request_region
#endif
 
#ifndef APP_WRAPPER_FOR_pci_request_region
#define APP_WRAPPER_FOR_pci_request_region
FUNCTION_WRAPPER(pci_request_region, (struct pci_dev *_arg1, int _arg2, const char *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("pci_request_region is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = pci_request_region(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("pci_request_region returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_poll_freewait
#define APP_WRAPPER_FOR_poll_freewait
#endif
 
#ifndef APP_WRAPPER_FOR_poll_freewait
#define APP_WRAPPER_FOR_poll_freewait
FUNCTION_WRAPPER_VOID(poll_freewait, (struct poll_wqueues *pwq), {
    WRAP_RECURSIVE(pwq);
    TRACES_IF_WATCHPOINT(pwq);
    SCAN_HEAD_FUNC(struct poll_wqueues)(*(TO_UNWATCHED_ADDRESS(pwq)));
    kern_printk("poll_freewait is invoked.\n");
    PRE_WRAPPER_FUNC(pwq);
    poll_freewait(pwq);
    POST_WRAPPER_FUNC(pwq);
    kern_printk("poll_freewait returned.\n");
    TRACES_IF_WATCHPOINT(pwq);
    SCAN_HEAD_FUNC(struct poll_wqueues)(*(TO_UNWATCHED_ADDRESS(pwq)));
})
#endif


#ifndef KERN_ADDR_generic_getxattr
#define APP_WRAPPER_FOR_generic_getxattr
#endif
 
#ifndef APP_WRAPPER_FOR_generic_getxattr
#define APP_WRAPPER_FOR_generic_getxattr
FUNCTION_WRAPPER(generic_getxattr, (struct dentry *dentry, const char *name, void *buffer, size_t size), {
    WRAP_RECURSIVE(dentry);
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    kern_printk("generic_getxattr is invoked.\n");
    PRE_WRAPPER_FUNC(dentry, name, buffer, size);
    ssize_t ret = generic_getxattr(dentry, name, buffer, size);
    POST_WRAPPER_FUNC(dentry, name, buffer, size);
    kern_printk("generic_getxattr returned.\n");
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    return ret;
})
#endif


#ifndef KERN_ADDR_free_pgd_range
#define APP_WRAPPER_FOR_free_pgd_range
#endif
 
#ifndef APP_WRAPPER_FOR_free_pgd_range
#define APP_WRAPPER_FOR_free_pgd_range
FUNCTION_WRAPPER_VOID(free_pgd_range, (struct mmu_gather *tlb, unsigned long addr, unsigned long end, unsigned long floor, unsigned long ceiling), {
    kern_printk("free_pgd_range is invoked.\n");
    PRE_WRAPPER_FUNC(tlb, addr, end, floor, ceiling);
    free_pgd_range(tlb, addr, end, floor, ceiling);
    POST_WRAPPER_FUNC(tlb, addr, end, floor, ceiling);
    kern_printk("free_pgd_range returned.\n");
})
#endif


#ifndef KERN_ADDR_netdev_update_features
#define APP_WRAPPER_FOR_netdev_update_features
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_update_features
#define APP_WRAPPER_FOR_netdev_update_features
FUNCTION_WRAPPER_VOID(netdev_update_features, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("netdev_update_features is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    netdev_update_features(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("netdev_update_features returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR___pud_alloc
#define APP_WRAPPER_FOR___pud_alloc
#endif
 
#ifndef APP_WRAPPER_FOR___pud_alloc
#define APP_WRAPPER_FOR___pud_alloc
FUNCTION_WRAPPER(__pud_alloc, (struct mm_struct *mm, pgd_t *pgd, unsigned long address), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    kern_printk("__pud_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(mm, pgd, address);
    int ret = __pud_alloc(mm, pgd, address);
    POST_WRAPPER_FUNC(mm, pgd, address);
    kern_printk("__pud_alloc returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_pack_xfermask
#define APP_WRAPPER_FOR_ata_pack_xfermask
#endif
 
#ifndef APP_WRAPPER_FOR_ata_pack_xfermask
#define APP_WRAPPER_FOR_ata_pack_xfermask
FUNCTION_WRAPPER(ata_pack_xfermask, (unsigned long pio_mask, unsigned long mwdma_mask, unsigned long udma_mask), {
    kern_printk("ata_pack_xfermask is invoked.\n");
    PRE_WRAPPER_FUNC(pio_mask, mwdma_mask, udma_mask);
    long ret = ata_pack_xfermask(pio_mask, mwdma_mask, udma_mask);
    POST_WRAPPER_FUNC(pio_mask, mwdma_mask, udma_mask);
    kern_printk("ata_pack_xfermask returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_add_interrupt_randomness
#define APP_WRAPPER_FOR_add_interrupt_randomness
#endif
 
#ifndef APP_WRAPPER_FOR_add_interrupt_randomness
#define APP_WRAPPER_FOR_add_interrupt_randomness
FUNCTION_WRAPPER_VOID(add_interrupt_randomness, (int irq, int irq_flags), {
    kern_printk("add_interrupt_randomness is invoked.\n");
    PRE_WRAPPER_FUNC(irq, irq_flags);
    add_interrupt_randomness(irq, irq_flags);
    POST_WRAPPER_FUNC(irq, irq_flags);
    kern_printk("add_interrupt_randomness returned.\n");
})
#endif


#ifndef KERN_ADDR___cond_resched_lock
#define APP_WRAPPER_FOR___cond_resched_lock
#endif
 
#ifndef APP_WRAPPER_FOR___cond_resched_lock
#define APP_WRAPPER_FOR___cond_resched_lock
FUNCTION_WRAPPER(__cond_resched_lock, (spinlock_t *lock), {
    kern_printk("__cond_resched_lock is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    int ret = __cond_resched_lock(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("__cond_resched_lock returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_wait_events_complete
#define APP_WRAPPER_FOR_acpi_os_wait_events_complete
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_wait_events_complete
#define APP_WRAPPER_FOR_acpi_os_wait_events_complete
FUNCTION_WRAPPER_VOID(acpi_os_wait_events_complete, (), {
    kern_printk("acpi_os_wait_events_complete is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_os_wait_events_complete();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_os_wait_events_complete returned.\n");
})
#endif


#ifndef KERN_ADDR__raw_read_lock_irqsave
#define APP_WRAPPER_FOR__raw_read_lock_irqsave
#endif
 
#ifndef APP_WRAPPER_FOR__raw_read_lock_irqsave
#define APP_WRAPPER_FOR__raw_read_lock_irqsave
FUNCTION_WRAPPER(_raw_read_lock_irqsave, (rwlock_t *lock), {
    kern_printk("_raw_read_lock_irqsave is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    long ret = _raw_read_lock_irqsave(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("_raw_read_lock_irqsave returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_find_next_zero_bit
#define APP_WRAPPER_FOR_find_next_zero_bit
#endif
 
#ifndef APP_WRAPPER_FOR_find_next_zero_bit
#define APP_WRAPPER_FOR_find_next_zero_bit
FUNCTION_WRAPPER(find_next_zero_bit, (unsigned const long *addr, unsigned long size, unsigned long offset), {
    kern_printk("find_next_zero_bit is invoked.\n");
    PRE_WRAPPER_FUNC(addr, size, offset);
    long ret = find_next_zero_bit(addr, size, offset);
    POST_WRAPPER_FUNC(addr, size, offset);
    kern_printk("find_next_zero_bit returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_get_signal_to_deliver
#define APP_WRAPPER_FOR_get_signal_to_deliver
#endif
 
#ifndef APP_WRAPPER_FOR_get_signal_to_deliver
#define APP_WRAPPER_FOR_get_signal_to_deliver
FUNCTION_WRAPPER(get_signal_to_deliver, (siginfo_t *info, struct k_sigaction *return_ka, struct pt_regs *regs, void *cookie), {
    WRAP_RECURSIVE(return_ka);
    TRACES_IF_WATCHPOINT(return_ka);
    SCAN_HEAD_FUNC(struct k_sigaction)(*(TO_UNWATCHED_ADDRESS(return_ka)));
    kern_printk("get_signal_to_deliver is invoked.\n");
    PRE_WRAPPER_FUNC(info, return_ka, regs, cookie);
    int ret = get_signal_to_deliver(info, return_ka, regs, cookie);
    POST_WRAPPER_FUNC(info, return_ka, regs, cookie);
    kern_printk("get_signal_to_deliver returned.\n");
    TRACES_IF_WATCHPOINT(return_ka);
    SCAN_HEAD_FUNC(struct k_sigaction)(*(TO_UNWATCHED_ADDRESS(return_ka)));
    return ret;
})
#endif


#ifndef KERN_ADDR_hrtimer_get_next_event
#define APP_WRAPPER_FOR_hrtimer_get_next_event
#endif
 
#ifndef APP_WRAPPER_FOR_hrtimer_get_next_event
#define APP_WRAPPER_FOR_hrtimer_get_next_event
FUNCTION_WRAPPER(hrtimer_get_next_event, (), {
    kern_printk("hrtimer_get_next_event is invoked.\n");
    PRE_WRAPPER_FUNC();
    ktime_t ret = hrtimer_get_next_event();
    POST_WRAPPER_FUNC();
    kern_printk("hrtimer_get_next_event returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_swap_table
#define APP_WRAPPER_FOR_dm_swap_table
#endif
 
#ifndef APP_WRAPPER_FOR_dm_swap_table
#define APP_WRAPPER_FOR_dm_swap_table
FUNCTION_WRAPPER(dm_swap_table, (struct mapped_device *md, struct dm_table *t), {
    kern_printk("dm_swap_table is invoked.\n");
    PRE_WRAPPER_FUNC(md, t);
    struct dm_table *ret = dm_swap_table(md, t);
    POST_WRAPPER_FUNC(md, t);
    kern_printk("dm_swap_table returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_get_rq_mapinfo
#define APP_WRAPPER_FOR_dm_get_rq_mapinfo
#endif
 
#ifndef APP_WRAPPER_FOR_dm_get_rq_mapinfo
#define APP_WRAPPER_FOR_dm_get_rq_mapinfo
FUNCTION_WRAPPER(dm_get_rq_mapinfo, (struct request *rq), {
    WRAP_RECURSIVE(rq);
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    kern_printk("dm_get_rq_mapinfo is invoked.\n");
    PRE_WRAPPER_FUNC(rq);
    union map_info *ret = dm_get_rq_mapinfo(rq);
    POST_WRAPPER_FUNC(rq);
    kern_printk("dm_get_rq_mapinfo returned.\n");
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_text_poke_smp_batch
#define APP_WRAPPER_FOR_text_poke_smp_batch
#endif
 
#ifndef APP_WRAPPER_FOR_text_poke_smp_batch
#define APP_WRAPPER_FOR_text_poke_smp_batch
FUNCTION_WRAPPER_VOID(text_poke_smp_batch, (struct text_poke_param *params, int n), {
    kern_printk("text_poke_smp_batch is invoked.\n");
    PRE_WRAPPER_FUNC(params, n);
    text_poke_smp_batch(params, n);
    POST_WRAPPER_FUNC(params, n);
    kern_printk("text_poke_smp_batch returned.\n");
})
#endif


#ifndef KERN_ADDR_kobject_move
#define APP_WRAPPER_FOR_kobject_move
#endif
 
#ifndef APP_WRAPPER_FOR_kobject_move
#define APP_WRAPPER_FOR_kobject_move
FUNCTION_WRAPPER(kobject_move, (struct kobject *_arg1, struct kobject *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("kobject_move is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = kobject_move(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("kobject_move returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_set_security_override_from_ctx
#define APP_WRAPPER_FOR_set_security_override_from_ctx
#endif
 
#ifndef APP_WRAPPER_FOR_set_security_override_from_ctx
#define APP_WRAPPER_FOR_set_security_override_from_ctx
FUNCTION_WRAPPER(set_security_override_from_ctx, (struct cred *_arg1, const char *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct cred)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("set_security_override_from_ctx is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = set_security_override_from_ctx(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("set_security_override_from_ctx returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct cred)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_link_offline
#define APP_WRAPPER_FOR_ata_link_offline
#endif
 
#ifndef APP_WRAPPER_FOR_ata_link_offline
#define APP_WRAPPER_FOR_ata_link_offline
FUNCTION_WRAPPER(ata_link_offline, (struct ata_link *link), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    kern_printk("ata_link_offline is invoked.\n");
    PRE_WRAPPER_FUNC(link);
    bool ret = ata_link_offline(link);
    POST_WRAPPER_FUNC(link);
    kern_printk("ata_link_offline returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_bmdma_interrupt
#define APP_WRAPPER_FOR_ata_bmdma_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_ata_bmdma_interrupt
#define APP_WRAPPER_FOR_ata_bmdma_interrupt
FUNCTION_WRAPPER(ata_bmdma_interrupt, (int irq, void *dev_instance), {
    kern_printk("ata_bmdma_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC(irq, dev_instance);
    irqreturn_t ret = ata_bmdma_interrupt(irq, dev_instance);
    POST_WRAPPER_FUNC(irq, dev_instance);
    kern_printk("ata_bmdma_interrupt returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sk_free
#define APP_WRAPPER_FOR_sk_free
#endif
 
#ifndef APP_WRAPPER_FOR_sk_free
#define APP_WRAPPER_FOR_sk_free
FUNCTION_WRAPPER_VOID(sk_free, (struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sk_free is invoked.\n");
    PRE_WRAPPER_FUNC(sk);
    sk_free(sk);
    POST_WRAPPER_FUNC(sk);
    kern_printk("sk_free returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR_pci_swizzle_interrupt_pin
#define APP_WRAPPER_FOR_pci_swizzle_interrupt_pin
#endif
 
#ifndef APP_WRAPPER_FOR_pci_swizzle_interrupt_pin
#define APP_WRAPPER_FOR_pci_swizzle_interrupt_pin
FUNCTION_WRAPPER(pci_swizzle_interrupt_pin, (const struct pci_dev *dev, u8 pin), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_swizzle_interrupt_pin is invoked.\n");
    PRE_WRAPPER_FUNC(dev, pin);
    u8 ret = pci_swizzle_interrupt_pin(dev, pin);
    POST_WRAPPER_FUNC(dev, pin);
    kern_printk("pci_swizzle_interrupt_pin returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_mc_del_global
#define APP_WRAPPER_FOR_dev_mc_del_global
#endif
 
#ifndef APP_WRAPPER_FOR_dev_mc_del_global
#define APP_WRAPPER_FOR_dev_mc_del_global
FUNCTION_WRAPPER(dev_mc_del_global, (struct net_device *dev, unsigned const char *addr), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_mc_del_global is invoked.\n");
    PRE_WRAPPER_FUNC(dev, addr);
    int ret = dev_mc_del_global(dev, addr);
    POST_WRAPPER_FUNC(dev, addr);
    kern_printk("dev_mc_del_global returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_cfg_access_lock
#define APP_WRAPPER_FOR_pci_cfg_access_lock
#endif
 
#ifndef APP_WRAPPER_FOR_pci_cfg_access_lock
#define APP_WRAPPER_FOR_pci_cfg_access_lock
FUNCTION_WRAPPER_VOID(pci_cfg_access_lock, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_cfg_access_lock is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pci_cfg_access_lock(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_cfg_access_lock returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_threshold_interrupt
#define APP_WRAPPER_FOR_threshold_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_threshold_interrupt
#define APP_WRAPPER_FOR_threshold_interrupt
FUNCTION_WRAPPER_VOID(threshold_interrupt, (), {
    kern_printk("threshold_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC();
    threshold_interrupt();
    POST_WRAPPER_FUNC();
    kern_printk("threshold_interrupt returned.\n");
})
#endif


#ifndef KERN_ADDR_param_set_bool
#define APP_WRAPPER_FOR_param_set_bool
#endif
 
#ifndef APP_WRAPPER_FOR_param_set_bool
#define APP_WRAPPER_FOR_param_set_bool
FUNCTION_WRAPPER(param_set_bool, (const char *val, const struct kernel_param *kp), {
    WRAP_RECURSIVE(kp);
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    kern_printk("param_set_bool is invoked.\n");
    PRE_WRAPPER_FUNC(val, kp);
    int ret = param_set_bool(val, kp);
    POST_WRAPPER_FUNC(val, kp);
    kern_printk("param_set_bool returned.\n");
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_devm_input_allocate_device
#define APP_WRAPPER_FOR_devm_input_allocate_device
#endif
 
#ifndef APP_WRAPPER_FOR_devm_input_allocate_device
#define APP_WRAPPER_FOR_devm_input_allocate_device
FUNCTION_WRAPPER(devm_input_allocate_device, (struct device *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("devm_input_allocate_device is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct input_dev *ret = devm_input_allocate_device(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("devm_input_allocate_device returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_d_instantiate
#define APP_WRAPPER_FOR_d_instantiate
#endif
 
#ifndef APP_WRAPPER_FOR_d_instantiate
#define APP_WRAPPER_FOR_d_instantiate
FUNCTION_WRAPPER_VOID(d_instantiate, (struct dentry *_arg1, struct inode *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("d_instantiate is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    d_instantiate(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("d_instantiate returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_kill_proc_info
#define APP_WRAPPER_FOR_kill_proc_info
#endif
 
#ifndef APP_WRAPPER_FOR_kill_proc_info
#define APP_WRAPPER_FOR_kill_proc_info
FUNCTION_WRAPPER(kill_proc_info, (int _arg1, struct siginfo *_arg2, pid_t _arg3), {
    kern_printk("kill_proc_info is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = kill_proc_info(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("kill_proc_info returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_tracepoint_probe_unregister
#define APP_WRAPPER_FOR_tracepoint_probe_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_tracepoint_probe_unregister
#define APP_WRAPPER_FOR_tracepoint_probe_unregister
FUNCTION_WRAPPER(tracepoint_probe_unregister, (const char *name, void *probe, void *data), {
    kern_printk("tracepoint_probe_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(name, probe, data);
    int ret = tracepoint_probe_unregister(name, probe, data);
    POST_WRAPPER_FUNC(name, probe, data);
    kern_printk("tracepoint_probe_unregister returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_complete
#define APP_WRAPPER_FOR_complete
#endif
 
#ifndef APP_WRAPPER_FOR_complete
#define APP_WRAPPER_FOR_complete
FUNCTION_WRAPPER_VOID(complete, (struct completion *_arg1), {
    kern_printk("complete is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    complete(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("complete returned.\n");
})
#endif


#ifndef KERN_ADDR_prepare_exec_creds
#define APP_WRAPPER_FOR_prepare_exec_creds
#endif
 
#ifndef APP_WRAPPER_FOR_prepare_exec_creds
#define APP_WRAPPER_FOR_prepare_exec_creds
FUNCTION_WRAPPER(prepare_exec_creds, (), {
    kern_printk("prepare_exec_creds is invoked.\n");
    PRE_WRAPPER_FUNC();
    struct cred *ret = prepare_exec_creds();
    POST_WRAPPER_FUNC();
    kern_printk("prepare_exec_creds returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_common_recvmsg
#define APP_WRAPPER_FOR_sock_common_recvmsg
#endif
 
#ifndef APP_WRAPPER_FOR_sock_common_recvmsg
#define APP_WRAPPER_FOR_sock_common_recvmsg
FUNCTION_WRAPPER(sock_common_recvmsg, (struct kiocb *iocb, struct socket *sock, struct msghdr *msg, size_t size, int flags), {
    WRAP_RECURSIVE(iocb);
    TRACES_IF_WATCHPOINT(iocb);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(iocb)));
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    kern_printk("sock_common_recvmsg is invoked.\n");
    PRE_WRAPPER_FUNC(iocb, sock, msg, size, flags);
    int ret = sock_common_recvmsg(iocb, sock, msg, size, flags);
    POST_WRAPPER_FUNC(iocb, sock, msg, size, flags);
    kern_printk("sock_common_recvmsg returned.\n");
    TRACES_IF_WATCHPOINT(iocb);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(iocb)));
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    return ret;
})
#endif


#ifndef KERN_ADDR___generic_block_fiemap
#define APP_WRAPPER_FOR___generic_block_fiemap
#endif
 
#ifndef APP_WRAPPER_FOR___generic_block_fiemap
#define APP_WRAPPER_FOR___generic_block_fiemap
FUNCTION_WRAPPER(__generic_block_fiemap, (struct inode *inode, struct fiemap_extent_info *fieinfo, loff_t start, loff_t len, get_block_t *get_block), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    WRAP_FUNCTION(get_block);
    kern_printk("__generic_block_fiemap is invoked.\n");
    PRE_WRAPPER_FUNC(inode, fieinfo, start, len, get_block);
    int ret = __generic_block_fiemap(inode, fieinfo, start, len, get_block);
    POST_WRAPPER_FUNC(inode, fieinfo, start, len, get_block);
    kern_printk("__generic_block_fiemap returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    return ret;
})
#endif


#ifndef KERN_ADDR_arch_early_irq_init
#define APP_WRAPPER_FOR_arch_early_irq_init
#endif
 
#ifndef APP_WRAPPER_FOR_arch_early_irq_init
#define APP_WRAPPER_FOR_arch_early_irq_init
FUNCTION_WRAPPER(arch_early_irq_init, (), {
    kern_printk("arch_early_irq_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = arch_early_irq_init();
    POST_WRAPPER_FUNC();
    kern_printk("arch_early_irq_init returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_profile_tick
#define APP_WRAPPER_FOR_profile_tick
#endif
 
#ifndef APP_WRAPPER_FOR_profile_tick
#define APP_WRAPPER_FOR_profile_tick
FUNCTION_WRAPPER_VOID(profile_tick, (int type), {
    kern_printk("profile_tick is invoked.\n");
    PRE_WRAPPER_FUNC(type);
    profile_tick(type);
    POST_WRAPPER_FUNC(type);
    kern_printk("profile_tick returned.\n");
})
#endif


#ifndef KERN_ADDR_default_get_smp_config
#define APP_WRAPPER_FOR_default_get_smp_config
#endif
 
#ifndef APP_WRAPPER_FOR_default_get_smp_config
#define APP_WRAPPER_FOR_default_get_smp_config
FUNCTION_WRAPPER_VOID(default_get_smp_config, (unsigned int early), {
    kern_printk("default_get_smp_config is invoked.\n");
    PRE_WRAPPER_FUNC(early);
    default_get_smp_config(early);
    POST_WRAPPER_FUNC(early);
    kern_printk("default_get_smp_config returned.\n");
})
#endif


#ifndef KERN_ADDR_default_cpu_present_to_apicid
#define APP_WRAPPER_FOR_default_cpu_present_to_apicid
#endif
 
#ifndef APP_WRAPPER_FOR_default_cpu_present_to_apicid
#define APP_WRAPPER_FOR_default_cpu_present_to_apicid
FUNCTION_WRAPPER(default_cpu_present_to_apicid, (int mps_cpu), {
    kern_printk("default_cpu_present_to_apicid is invoked.\n");
    PRE_WRAPPER_FUNC(mps_cpu);
    int ret = default_cpu_present_to_apicid(mps_cpu);
    POST_WRAPPER_FUNC(mps_cpu);
    kern_printk("default_cpu_present_to_apicid returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_cfg_access_trylock
#define APP_WRAPPER_FOR_pci_cfg_access_trylock
#endif
 
#ifndef APP_WRAPPER_FOR_pci_cfg_access_trylock
#define APP_WRAPPER_FOR_pci_cfg_access_trylock
FUNCTION_WRAPPER(pci_cfg_access_trylock, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_cfg_access_trylock is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    bool ret = pci_cfg_access_trylock(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_cfg_access_trylock returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_retire_sysctl_set
#define APP_WRAPPER_FOR_retire_sysctl_set
#endif
 
#ifndef APP_WRAPPER_FOR_retire_sysctl_set
#define APP_WRAPPER_FOR_retire_sysctl_set
FUNCTION_WRAPPER_VOID(retire_sysctl_set, (struct ctl_table_set *set), {
    WRAP_RECURSIVE(set);
    TRACES_IF_WATCHPOINT(set);
    SCAN_HEAD_FUNC(struct ctl_table_set)(*(TO_UNWATCHED_ADDRESS(set)));
    kern_printk("retire_sysctl_set is invoked.\n");
    PRE_WRAPPER_FUNC(set);
    retire_sysctl_set(set);
    POST_WRAPPER_FUNC(set);
    kern_printk("retire_sysctl_set returned.\n");
    TRACES_IF_WATCHPOINT(set);
    SCAN_HEAD_FUNC(struct ctl_table_set)(*(TO_UNWATCHED_ADDRESS(set)));
})
#endif


#ifndef KERN_ADDR_sock_rmalloc
#define APP_WRAPPER_FOR_sock_rmalloc
#endif
 
#ifndef APP_WRAPPER_FOR_sock_rmalloc
#define APP_WRAPPER_FOR_sock_rmalloc
FUNCTION_WRAPPER(sock_rmalloc, (struct sock *sk, unsigned long size, int force, gfp_t priority), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sock_rmalloc is invoked.\n");
    PRE_WRAPPER_FUNC(sk, size, force, priority);
    struct sk_buff *ret = sock_rmalloc(sk, size, force, priority);
    POST_WRAPPER_FUNC(sk, size, force, priority);
    kern_printk("sock_rmalloc returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_address_space_init_once
#define APP_WRAPPER_FOR_address_space_init_once
#endif
 
#ifndef APP_WRAPPER_FOR_address_space_init_once
#define APP_WRAPPER_FOR_address_space_init_once
FUNCTION_WRAPPER_VOID(address_space_init_once, (struct address_space *mapping), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("address_space_init_once is invoked.\n");
    PRE_WRAPPER_FUNC(mapping);
    address_space_init_once(mapping);
    POST_WRAPPER_FUNC(mapping);
    kern_printk("address_space_init_once returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
})
#endif


#ifndef KERN_ADDR_ata_sff_exec_command
#define APP_WRAPPER_FOR_ata_sff_exec_command
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_exec_command
#define APP_WRAPPER_FOR_ata_sff_exec_command
FUNCTION_WRAPPER_VOID(ata_sff_exec_command, (struct ata_port *ap, const struct ata_taskfile *tf), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_sff_exec_command is invoked.\n");
    PRE_WRAPPER_FUNC(ap, tf);
    ata_sff_exec_command(ap, tf);
    POST_WRAPPER_FUNC(ap, tf);
    kern_printk("ata_sff_exec_command returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_hrtimer_init_sleeper
#define APP_WRAPPER_FOR_hrtimer_init_sleeper
#endif
 
#ifndef APP_WRAPPER_FOR_hrtimer_init_sleeper
#define APP_WRAPPER_FOR_hrtimer_init_sleeper
FUNCTION_WRAPPER_VOID(hrtimer_init_sleeper, (struct hrtimer_sleeper *sl, struct task_struct *tsk), {
    WRAP_RECURSIVE(sl);
    TRACES_IF_WATCHPOINT(sl);
    SCAN_HEAD_FUNC(struct hrtimer_sleeper)(*(TO_UNWATCHED_ADDRESS(sl)));
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("hrtimer_init_sleeper is invoked.\n");
    PRE_WRAPPER_FUNC(sl, tsk);
    hrtimer_init_sleeper(sl, tsk);
    POST_WRAPPER_FUNC(sl, tsk);
    kern_printk("hrtimer_init_sleeper returned.\n");
    TRACES_IF_WATCHPOINT(sl);
    SCAN_HEAD_FUNC(struct hrtimer_sleeper)(*(TO_UNWATCHED_ADDRESS(sl)));
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
})
#endif


#ifndef KERN_ADDR_xapic_wait_icr_idle
#define APP_WRAPPER_FOR_xapic_wait_icr_idle
#endif
 
#ifndef APP_WRAPPER_FOR_xapic_wait_icr_idle
#define APP_WRAPPER_FOR_xapic_wait_icr_idle
FUNCTION_WRAPPER_VOID(xapic_wait_icr_idle, (), {
    kern_printk("xapic_wait_icr_idle is invoked.\n");
    PRE_WRAPPER_FUNC();
    xapic_wait_icr_idle();
    POST_WRAPPER_FUNC();
    kern_printk("xapic_wait_icr_idle returned.\n");
})
#endif


#ifndef KERN_ADDR_clockevents_config_and_register
#define APP_WRAPPER_FOR_clockevents_config_and_register
#endif
 
#ifndef APP_WRAPPER_FOR_clockevents_config_and_register
#define APP_WRAPPER_FOR_clockevents_config_and_register
FUNCTION_WRAPPER_VOID(clockevents_config_and_register, (struct clock_event_device *dev, u32 freq, unsigned long min_delta, unsigned long max_delta), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct clock_event_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("clockevents_config_and_register is invoked.\n");
    PRE_WRAPPER_FUNC(dev, freq, min_delta, max_delta);
    clockevents_config_and_register(dev, freq, min_delta, max_delta);
    POST_WRAPPER_FUNC(dev, freq, min_delta, max_delta);
    kern_printk("clockevents_config_and_register returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct clock_event_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_randomize_range
#define APP_WRAPPER_FOR_randomize_range
#endif
 
#ifndef APP_WRAPPER_FOR_randomize_range
#define APP_WRAPPER_FOR_randomize_range
FUNCTION_WRAPPER(randomize_range, (unsigned long start, unsigned long end, unsigned long len), {
    kern_printk("randomize_range is invoked.\n");
    PRE_WRAPPER_FUNC(start, end, len);
    long ret = randomize_range(start, end, len);
    POST_WRAPPER_FUNC(start, end, len);
    kern_printk("randomize_range returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_ustat
#define APP_WRAPPER_FOR_compat_sys_ustat
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_ustat
#define APP_WRAPPER_FOR_compat_sys_ustat
FUNCTION_WRAPPER(compat_sys_ustat, (unsigned int dev, struct compat_ustat *u32), {
    kern_printk("compat_sys_ustat is invoked.\n");
    PRE_WRAPPER_FUNC(dev, u32);
    long ret = compat_sys_ustat(dev, u32);
    POST_WRAPPER_FUNC(dev, u32);
    kern_printk("compat_sys_ustat returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_anon_vma_interval_tree_iter_first
#define APP_WRAPPER_FOR_anon_vma_interval_tree_iter_first
#endif
 
#ifndef APP_WRAPPER_FOR_anon_vma_interval_tree_iter_first
#define APP_WRAPPER_FOR_anon_vma_interval_tree_iter_first
FUNCTION_WRAPPER(anon_vma_interval_tree_iter_first, (struct rb_root *root, unsigned long start, unsigned long last), {
    kern_printk("anon_vma_interval_tree_iter_first is invoked.\n");
    PRE_WRAPPER_FUNC(root, start, last);
    struct anon_vma_chain *ret = anon_vma_interval_tree_iter_first(root, start, last);
    POST_WRAPPER_FUNC(root, start, last);
    kern_printk("anon_vma_interval_tree_iter_first returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dpm_prepare
#define APP_WRAPPER_FOR_dpm_prepare
#endif
 
#ifndef APP_WRAPPER_FOR_dpm_prepare
#define APP_WRAPPER_FOR_dpm_prepare
FUNCTION_WRAPPER(dpm_prepare, (pm_message_t state), {
    kern_printk("dpm_prepare is invoked.\n");
    PRE_WRAPPER_FUNC(state);
    int ret = dpm_prepare(state);
    POST_WRAPPER_FUNC(state);
    kern_printk("dpm_prepare returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_id_c_string
#define APP_WRAPPER_FOR_ata_id_c_string
#endif
 
#ifndef APP_WRAPPER_FOR_ata_id_c_string
#define APP_WRAPPER_FOR_ata_id_c_string
FUNCTION_WRAPPER_VOID(ata_id_c_string, (const u16 *id, unsigned char *s, unsigned int ofs, unsigned int len), {
    kern_printk("ata_id_c_string is invoked.\n");
    PRE_WRAPPER_FUNC(id, s, ofs, len);
    ata_id_c_string(id, s, ofs, len);
    POST_WRAPPER_FUNC(id, s, ofs, len);
    kern_printk("ata_id_c_string returned.\n");
})
#endif


#ifndef KERN_ADDR_dmam_pool_create
#define APP_WRAPPER_FOR_dmam_pool_create
#endif
 
#ifndef APP_WRAPPER_FOR_dmam_pool_create
#define APP_WRAPPER_FOR_dmam_pool_create
FUNCTION_WRAPPER(dmam_pool_create, (const char *name, struct device *dev, size_t size, size_t align, size_t allocation), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dmam_pool_create is invoked.\n");
    PRE_WRAPPER_FUNC(name, dev, size, align, allocation);
    struct dma_pool *ret = dmam_pool_create(name, dev, size, align, allocation);
    POST_WRAPPER_FUNC(name, dev, size, align, allocation);
    kern_printk("dmam_pool_create returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_inode_init
#define APP_WRAPPER_FOR_inode_init
#endif
 
#ifndef APP_WRAPPER_FOR_inode_init
#define APP_WRAPPER_FOR_inode_init
FUNCTION_WRAPPER_VOID(inode_init, (), {
    kern_printk("inode_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    inode_init();
    POST_WRAPPER_FUNC();
    kern_printk("inode_init returned.\n");
})
#endif


#ifndef KERN_ADDR_generic_show_options
#define APP_WRAPPER_FOR_generic_show_options
#endif
 
#ifndef APP_WRAPPER_FOR_generic_show_options
#define APP_WRAPPER_FOR_generic_show_options
FUNCTION_WRAPPER(generic_show_options, (struct seq_file *m, struct dentry *root), {
    WRAP_RECURSIVE(m);
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
    WRAP_RECURSIVE(root);
    TRACES_IF_WATCHPOINT(root);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(root)));
    kern_printk("generic_show_options is invoked.\n");
    PRE_WRAPPER_FUNC(m, root);
    int ret = generic_show_options(m, root);
    POST_WRAPPER_FUNC(m, root);
    kern_printk("generic_show_options returned.\n");
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
    TRACES_IF_WATCHPOINT(root);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(root)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mii_nway_restart
#define APP_WRAPPER_FOR_mii_nway_restart
#endif
 
#ifndef APP_WRAPPER_FOR_mii_nway_restart
#define APP_WRAPPER_FOR_mii_nway_restart
FUNCTION_WRAPPER(mii_nway_restart, (struct mii_if_info *mii), {
    WRAP_RECURSIVE(mii);
    TRACES_IF_WATCHPOINT(mii);
    SCAN_HEAD_FUNC(struct mii_if_info)(*(TO_UNWATCHED_ADDRESS(mii)));
    kern_printk("mii_nway_restart is invoked.\n");
    PRE_WRAPPER_FUNC(mii);
    int ret = mii_nway_restart(mii);
    POST_WRAPPER_FUNC(mii);
    kern_printk("mii_nway_restart returned.\n");
    TRACES_IF_WATCHPOINT(mii);
    SCAN_HEAD_FUNC(struct mii_if_info)(*(TO_UNWATCHED_ADDRESS(mii)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_evaluate_integer
#define APP_WRAPPER_FOR_acpi_evaluate_integer
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_evaluate_integer
#define APP_WRAPPER_FOR_acpi_evaluate_integer
FUNCTION_WRAPPER(acpi_evaluate_integer, (acpi_handle handle, acpi_string pathname, struct acpi_object_list *arguments, unsigned long long *data), {
    kern_printk("acpi_evaluate_integer is invoked.\n");
    PRE_WRAPPER_FUNC(handle, pathname, arguments, data);
    acpi_status ret = acpi_evaluate_integer(handle, pathname, arguments, data);
    POST_WRAPPER_FUNC(handle, pathname, arguments, data);
    kern_printk("acpi_evaluate_integer returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_task_handoff_register
#define APP_WRAPPER_FOR_task_handoff_register
#endif
 
#ifndef APP_WRAPPER_FOR_task_handoff_register
#define APP_WRAPPER_FOR_task_handoff_register
FUNCTION_WRAPPER(task_handoff_register, (struct notifier_block *n), {
    WRAP_RECURSIVE(n);
    TRACES_IF_WATCHPOINT(n);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(n)));
    kern_printk("task_handoff_register is invoked.\n");
    PRE_WRAPPER_FUNC(n);
    int ret = task_handoff_register(n);
    POST_WRAPPER_FUNC(n);
    kern_printk("task_handoff_register returned.\n");
    TRACES_IF_WATCHPOINT(n);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(n)));
    return ret;
})
#endif


#ifndef KERN_ADDR_get_fs_type
#define APP_WRAPPER_FOR_get_fs_type
#endif
 
#ifndef APP_WRAPPER_FOR_get_fs_type
#define APP_WRAPPER_FOR_get_fs_type
FUNCTION_WRAPPER(get_fs_type, (const char *name), {
    kern_printk("get_fs_type is invoked.\n");
    PRE_WRAPPER_FUNC(name);
    struct file_system_type *ret = get_fs_type(name);
    POST_WRAPPER_FUNC(name);
    kern_printk("get_fs_type returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_lock_memory_hotplug
#define APP_WRAPPER_FOR_lock_memory_hotplug
#endif
 
#ifndef APP_WRAPPER_FOR_lock_memory_hotplug
#define APP_WRAPPER_FOR_lock_memory_hotplug
FUNCTION_WRAPPER_VOID(lock_memory_hotplug, (), {
    kern_printk("lock_memory_hotplug is invoked.\n");
    PRE_WRAPPER_FUNC();
    lock_memory_hotplug();
    POST_WRAPPER_FUNC();
    kern_printk("lock_memory_hotplug returned.\n");
})
#endif


#ifndef KERN_ADDR_put_page
#define APP_WRAPPER_FOR_put_page
#endif
 
#ifndef APP_WRAPPER_FOR_put_page
#define APP_WRAPPER_FOR_put_page
FUNCTION_WRAPPER_VOID(put_page, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("put_page is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    put_page(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("put_page returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR___set_current_blocked
#define APP_WRAPPER_FOR___set_current_blocked
#endif
 
#ifndef APP_WRAPPER_FOR___set_current_blocked
#define APP_WRAPPER_FOR___set_current_blocked
FUNCTION_WRAPPER_VOID(__set_current_blocked, (const sigset_t *_arg1), {
    kern_printk("__set_current_blocked is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    __set_current_blocked(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__set_current_blocked returned.\n");
})
#endif


#ifndef KERN_ADDR_swiotlb_unmap_sg
#define APP_WRAPPER_FOR_swiotlb_unmap_sg
#endif
 
#ifndef APP_WRAPPER_FOR_swiotlb_unmap_sg
#define APP_WRAPPER_FOR_swiotlb_unmap_sg
FUNCTION_WRAPPER_VOID(swiotlb_unmap_sg, (struct device *hwdev, struct scatterlist *sg, int nents, enum dma_data_direction dir), {
    WRAP_RECURSIVE(hwdev);
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
    kern_printk("swiotlb_unmap_sg is invoked.\n");
    PRE_WRAPPER_FUNC(hwdev, sg, nents, dir);
    swiotlb_unmap_sg(hwdev, sg, nents, dir);
    POST_WRAPPER_FUNC(hwdev, sg, nents, dir);
    kern_printk("swiotlb_unmap_sg returned.\n");
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
})
#endif


#ifndef KERN_ADDR_sk_clear_memalloc
#define APP_WRAPPER_FOR_sk_clear_memalloc
#endif
 
#ifndef APP_WRAPPER_FOR_sk_clear_memalloc
#define APP_WRAPPER_FOR_sk_clear_memalloc
FUNCTION_WRAPPER_VOID(sk_clear_memalloc, (struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sk_clear_memalloc is invoked.\n");
    PRE_WRAPPER_FUNC(sk);
    sk_clear_memalloc(sk);
    POST_WRAPPER_FUNC(sk);
    kern_printk("sk_clear_memalloc returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR_handle_mm_fault
#define APP_WRAPPER_FOR_handle_mm_fault
#endif
 
#ifndef APP_WRAPPER_FOR_handle_mm_fault
#define APP_WRAPPER_FOR_handle_mm_fault
FUNCTION_WRAPPER(handle_mm_fault, (struct mm_struct *mm, struct vm_area_struct *vma, unsigned long address, unsigned int flags), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("handle_mm_fault is invoked.\n");
    PRE_WRAPPER_FUNC(mm, vma, address, flags);
    int ret = handle_mm_fault(mm, vma, address, flags);
    POST_WRAPPER_FUNC(mm, vma, address, flags);
    kern_printk("handle_mm_fault returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_map_rom
#define APP_WRAPPER_FOR_pci_map_rom
#endif
 
#ifndef APP_WRAPPER_FOR_pci_map_rom
#define APP_WRAPPER_FOR_pci_map_rom
FUNCTION_WRAPPER(pci_map_rom, (struct pci_dev *pdev, size_t *size), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("pci_map_rom is invoked.\n");
    PRE_WRAPPER_FUNC(pdev, size);
    void *ret = pci_map_rom(pdev, size);
    POST_WRAPPER_FUNC(pdev, size);
    kern_printk("pci_map_rom returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_input_unregister_device
#define APP_WRAPPER_FOR_input_unregister_device
#endif
 
#ifndef APP_WRAPPER_FOR_input_unregister_device
#define APP_WRAPPER_FOR_input_unregister_device
FUNCTION_WRAPPER_VOID(input_unregister_device, (struct input_dev *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("input_unregister_device is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    input_unregister_device(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("input_unregister_device returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_arch_unmap_area_topdown
#define APP_WRAPPER_FOR_arch_unmap_area_topdown
#endif
 
#ifndef APP_WRAPPER_FOR_arch_unmap_area_topdown
#define APP_WRAPPER_FOR_arch_unmap_area_topdown
FUNCTION_WRAPPER_VOID(arch_unmap_area_topdown, (struct mm_struct *_arg1, unsigned long _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("arch_unmap_area_topdown is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    arch_unmap_area_topdown(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("arch_unmap_area_topdown returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_blk_check_plugged
#define APP_WRAPPER_FOR_blk_check_plugged
#endif
 
#ifndef APP_WRAPPER_FOR_blk_check_plugged
#define APP_WRAPPER_FOR_blk_check_plugged
FUNCTION_WRAPPER(blk_check_plugged, (blk_plug_cb_fn unplug, void *data, int size), {
    WRAP_FUNCTION(unplug);
    kern_printk("blk_check_plugged is invoked.\n");
    PRE_WRAPPER_FUNC(unplug, data, size);
    struct blk_plug_cb *ret = blk_check_plugged(unplug, data, size);
    POST_WRAPPER_FUNC(unplug, data, size);
    kern_printk("blk_check_plugged returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_scsi_block_requests
#define APP_WRAPPER_FOR_scsi_block_requests
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_block_requests
#define APP_WRAPPER_FOR_scsi_block_requests
FUNCTION_WRAPPER_VOID(scsi_block_requests, (struct Scsi_Host *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("scsi_block_requests is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    scsi_block_requests(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("scsi_block_requests returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_invalidate_bdev
#define APP_WRAPPER_FOR_invalidate_bdev
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_bdev
#define APP_WRAPPER_FOR_invalidate_bdev
FUNCTION_WRAPPER_VOID(invalidate_bdev, (struct block_device *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("invalidate_bdev is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    invalidate_bdev(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("invalidate_bdev returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_clockevents_update_freq
#define APP_WRAPPER_FOR_clockevents_update_freq
#endif
 
#ifndef APP_WRAPPER_FOR_clockevents_update_freq
#define APP_WRAPPER_FOR_clockevents_update_freq
FUNCTION_WRAPPER(clockevents_update_freq, (struct clock_event_device *ce, u32 freq), {
    WRAP_RECURSIVE(ce);
    TRACES_IF_WATCHPOINT(ce);
    SCAN_HEAD_FUNC(struct clock_event_device)(*(TO_UNWATCHED_ADDRESS(ce)));
    kern_printk("clockevents_update_freq is invoked.\n");
    PRE_WRAPPER_FUNC(ce, freq);
    int ret = clockevents_update_freq(ce, freq);
    POST_WRAPPER_FUNC(ce, freq);
    kern_printk("clockevents_update_freq returned.\n");
    TRACES_IF_WATCHPOINT(ce);
    SCAN_HEAD_FUNC(struct clock_event_device)(*(TO_UNWATCHED_ADDRESS(ce)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bitmap_remap
#define APP_WRAPPER_FOR_bitmap_remap
#endif
 
#ifndef APP_WRAPPER_FOR_bitmap_remap
#define APP_WRAPPER_FOR_bitmap_remap
FUNCTION_WRAPPER_VOID(bitmap_remap, (unsigned long *dst, unsigned const long *src, unsigned const long *old, unsigned const long *new_, int bits), {
    kern_printk("bitmap_remap is invoked.\n");
    PRE_WRAPPER_FUNC(dst, src, old, new_, bits);
    bitmap_remap(dst, src, old, new_, bits);
    POST_WRAPPER_FUNC(dst, src, old, new_, bits);
    kern_printk("bitmap_remap returned.\n");
})
#endif


#ifndef KERN_ADDR_setup_node_to_cpumask_map
#define APP_WRAPPER_FOR_setup_node_to_cpumask_map
#endif
 
#ifndef APP_WRAPPER_FOR_setup_node_to_cpumask_map
#define APP_WRAPPER_FOR_setup_node_to_cpumask_map
FUNCTION_WRAPPER_VOID(setup_node_to_cpumask_map, (), {
    kern_printk("setup_node_to_cpumask_map is invoked.\n");
    PRE_WRAPPER_FUNC();
    setup_node_to_cpumask_map();
    POST_WRAPPER_FUNC();
    kern_printk("setup_node_to_cpumask_map returned.\n");
})
#endif


#ifndef KERN_ADDR_irq_set_chip
#define APP_WRAPPER_FOR_irq_set_chip
#endif
 
#ifndef APP_WRAPPER_FOR_irq_set_chip
#define APP_WRAPPER_FOR_irq_set_chip
FUNCTION_WRAPPER(irq_set_chip, (unsigned int irq, struct irq_chip *chip), {
    WRAP_RECURSIVE(chip);
    TRACES_IF_WATCHPOINT(chip);
    SCAN_HEAD_FUNC(struct irq_chip)(*(TO_UNWATCHED_ADDRESS(chip)));
    kern_printk("irq_set_chip is invoked.\n");
    PRE_WRAPPER_FUNC(irq, chip);
    int ret = irq_set_chip(irq, chip);
    POST_WRAPPER_FUNC(irq, chip);
    kern_printk("irq_set_chip returned.\n");
    TRACES_IF_WATCHPOINT(chip);
    SCAN_HEAD_FUNC(struct irq_chip)(*(TO_UNWATCHED_ADDRESS(chip)));
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_modify_status
#define APP_WRAPPER_FOR_irq_modify_status
#endif
 
#ifndef APP_WRAPPER_FOR_irq_modify_status
#define APP_WRAPPER_FOR_irq_modify_status
FUNCTION_WRAPPER_VOID(irq_modify_status, (unsigned int irq, unsigned long clr, unsigned long set), {
    kern_printk("irq_modify_status is invoked.\n");
    PRE_WRAPPER_FUNC(irq, clr, set);
    irq_modify_status(irq, clr, set);
    POST_WRAPPER_FUNC(irq, clr, set);
    kern_printk("irq_modify_status returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_load_and_free_saved_state
#define APP_WRAPPER_FOR_pci_load_and_free_saved_state
#endif
 
#ifndef APP_WRAPPER_FOR_pci_load_and_free_saved_state
#define APP_WRAPPER_FOR_pci_load_and_free_saved_state
FUNCTION_WRAPPER(pci_load_and_free_saved_state, (struct pci_dev *dev, struct pci_saved_state **state), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_load_and_free_saved_state is invoked.\n");
    PRE_WRAPPER_FUNC(dev, state);
    int ret = pci_load_and_free_saved_state(dev, state);
    POST_WRAPPER_FUNC(dev, state);
    kern_printk("pci_load_and_free_saved_state returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_free_area_init_node
#define APP_WRAPPER_FOR_free_area_init_node
#endif
 
#ifndef APP_WRAPPER_FOR_free_area_init_node
#define APP_WRAPPER_FOR_free_area_init_node
FUNCTION_WRAPPER_VOID(free_area_init_node, (int nid, unsigned long *zones_size, unsigned long zone_start_pfn, unsigned long *zholes_size), {
    kern_printk("free_area_init_node is invoked.\n");
    PRE_WRAPPER_FUNC(nid, zones_size, zone_start_pfn, zholes_size);
    free_area_init_node(nid, zones_size, zone_start_pfn, zholes_size);
    POST_WRAPPER_FUNC(nid, zones_size, zone_start_pfn, zholes_size);
    kern_printk("free_area_init_node returned.\n");
})
#endif


#ifndef KERN_ADDR_inode_change_ok
#define APP_WRAPPER_FOR_inode_change_ok
#endif
 
#ifndef APP_WRAPPER_FOR_inode_change_ok
#define APP_WRAPPER_FOR_inode_change_ok
FUNCTION_WRAPPER(inode_change_ok, (const struct inode *_arg1, struct iattr *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct iattr)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("inode_change_ok is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = inode_change_ok(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("inode_change_ok returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct iattr)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dcbnl_cee_notify
#define APP_WRAPPER_FOR_dcbnl_cee_notify
#endif
 
#ifndef APP_WRAPPER_FOR_dcbnl_cee_notify
#define APP_WRAPPER_FOR_dcbnl_cee_notify
FUNCTION_WRAPPER(dcbnl_cee_notify, (struct net_device *dev, int event, int cmd, u32 seq, u32 pid), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dcbnl_cee_notify is invoked.\n");
    PRE_WRAPPER_FUNC(dev, event, cmd, seq, pid);
    int ret = dcbnl_cee_notify(dev, event, cmd, seq, pid);
    POST_WRAPPER_FUNC(dev, event, cmd, seq, pid);
    kern_printk("dcbnl_cee_notify returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sysfs_create_dir
#define APP_WRAPPER_FOR_sysfs_create_dir
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_create_dir
#define APP_WRAPPER_FOR_sysfs_create_dir
FUNCTION_WRAPPER(sysfs_create_dir, (struct kobject *kobj), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    kern_printk("sysfs_create_dir is invoked.\n");
    PRE_WRAPPER_FUNC(kobj);
    int ret = sysfs_create_dir(kobj);
    POST_WRAPPER_FUNC(kobj);
    kern_printk("sysfs_create_dir returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    return ret;
})
#endif


#ifndef KERN_ADDR___wake_up_bit
#define APP_WRAPPER_FOR___wake_up_bit
#endif
 
#ifndef APP_WRAPPER_FOR___wake_up_bit
#define APP_WRAPPER_FOR___wake_up_bit
FUNCTION_WRAPPER_VOID(__wake_up_bit, (wait_queue_head_t *_arg1, void *_arg2, int _arg3), {
    kern_printk("__wake_up_bit is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    __wake_up_bit(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("__wake_up_bit returned.\n");
})
#endif


#ifndef KERN_ADDR___const_udelay
#define APP_WRAPPER_FOR___const_udelay
#endif
 
#ifndef APP_WRAPPER_FOR___const_udelay
#define APP_WRAPPER_FOR___const_udelay
FUNCTION_WRAPPER_VOID(__const_udelay, (unsigned long xloops), {
    kern_printk("__const_udelay is invoked.\n");
    PRE_WRAPPER_FUNC(xloops);
    __const_udelay(xloops);
    POST_WRAPPER_FUNC(xloops);
    kern_printk("__const_udelay returned.\n");
})
#endif


#ifndef KERN_ADDR_init_amd_cacheinfo
#define APP_WRAPPER_FOR_init_amd_cacheinfo
#endif
 
#ifndef APP_WRAPPER_FOR_init_amd_cacheinfo
#define APP_WRAPPER_FOR_init_amd_cacheinfo
FUNCTION_WRAPPER_VOID(init_amd_cacheinfo, (struct cpuinfo_x86 *c), {
    kern_printk("init_amd_cacheinfo is invoked.\n");
    PRE_WRAPPER_FUNC(c);
    init_amd_cacheinfo(c);
    POST_WRAPPER_FUNC(c);
    kern_printk("init_amd_cacheinfo returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_read_bit_register
#define APP_WRAPPER_FOR_acpi_read_bit_register
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_read_bit_register
#define APP_WRAPPER_FOR_acpi_read_bit_register
FUNCTION_WRAPPER(acpi_read_bit_register, (u32 register_id, u32 *return_value), {
    kern_printk("acpi_read_bit_register is invoked.\n");
    PRE_WRAPPER_FUNC(register_id, return_value);
    acpi_status ret = acpi_read_bit_register(register_id, return_value);
    POST_WRAPPER_FUNC(register_id, return_value);
    kern_printk("acpi_read_bit_register returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_get_vm_area
#define APP_WRAPPER_FOR_get_vm_area
#endif
 
#ifndef APP_WRAPPER_FOR_get_vm_area
#define APP_WRAPPER_FOR_get_vm_area
FUNCTION_WRAPPER(get_vm_area, (unsigned long size, unsigned long flags), {
    kern_printk("get_vm_area is invoked.\n");
    PRE_WRAPPER_FUNC(size, flags);
    struct vm_struct *ret = get_vm_area(size, flags);
    POST_WRAPPER_FUNC(size, flags);
    kern_printk("get_vm_area returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_prepare_namespace
#define APP_WRAPPER_FOR_prepare_namespace
#endif
 
#ifndef APP_WRAPPER_FOR_prepare_namespace
#define APP_WRAPPER_FOR_prepare_namespace
FUNCTION_WRAPPER_VOID(prepare_namespace, (), {
    kern_printk("prepare_namespace is invoked.\n");
    PRE_WRAPPER_FUNC();
    prepare_namespace();
    POST_WRAPPER_FUNC();
    kern_printk("prepare_namespace returned.\n");
})
#endif


#ifndef KERN_ADDR_blk_alloc_queue_node
#define APP_WRAPPER_FOR_blk_alloc_queue_node
#endif
 
#ifndef APP_WRAPPER_FOR_blk_alloc_queue_node
#define APP_WRAPPER_FOR_blk_alloc_queue_node
FUNCTION_WRAPPER(blk_alloc_queue_node, (gfp_t _arg1, int _arg2), {
    kern_printk("blk_alloc_queue_node is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct request_queue *ret = blk_alloc_queue_node(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_alloc_queue_node returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_module_bug_finalize
#define APP_WRAPPER_FOR_module_bug_finalize
#endif
 
#ifndef APP_WRAPPER_FOR_module_bug_finalize
#define APP_WRAPPER_FOR_module_bug_finalize
FUNCTION_WRAPPER_VOID(module_bug_finalize, (const Elf64_Ehdr *_arg1, const Elf64_Shdr *_arg2, struct module *_arg3), {
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("module_bug_finalize is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    module_bug_finalize(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("module_bug_finalize returned.\n");
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(_arg3)));
})
#endif


#ifndef KERN_ADDR_pci_set_mwi
#define APP_WRAPPER_FOR_pci_set_mwi
#endif
 
#ifndef APP_WRAPPER_FOR_pci_set_mwi
#define APP_WRAPPER_FOR_pci_set_mwi
FUNCTION_WRAPPER(pci_set_mwi, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_set_mwi is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pci_set_mwi(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_set_mwi returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mb_cache_entry_alloc
#define APP_WRAPPER_FOR_mb_cache_entry_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_mb_cache_entry_alloc
#define APP_WRAPPER_FOR_mb_cache_entry_alloc
FUNCTION_WRAPPER(mb_cache_entry_alloc, (struct mb_cache *_arg1, gfp_t _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mb_cache)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("mb_cache_entry_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct mb_cache_entry *ret = mb_cache_entry_alloc(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("mb_cache_entry_alloc returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mb_cache)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_clear_page_dirty_for_io
#define APP_WRAPPER_FOR_clear_page_dirty_for_io
#endif
 
#ifndef APP_WRAPPER_FOR_clear_page_dirty_for_io
#define APP_WRAPPER_FOR_clear_page_dirty_for_io
FUNCTION_WRAPPER(clear_page_dirty_for_io, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("clear_page_dirty_for_io is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    int ret = clear_page_dirty_for_io(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("clear_page_dirty_for_io returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mutex_lock_killable
#define APP_WRAPPER_FOR_mutex_lock_killable
#endif
 
#ifndef APP_WRAPPER_FOR_mutex_lock_killable
#define APP_WRAPPER_FOR_mutex_lock_killable
FUNCTION_WRAPPER(mutex_lock_killable, (struct mutex *lock), {
    WRAP_RECURSIVE(lock);
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
    kern_printk("mutex_lock_killable is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    int ret = mutex_lock_killable(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("mutex_lock_killable returned.\n");
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
    return ret;
})
#endif


#ifndef KERN_ADDR_enable_percpu_irq
#define APP_WRAPPER_FOR_enable_percpu_irq
#endif
 
#ifndef APP_WRAPPER_FOR_enable_percpu_irq
#define APP_WRAPPER_FOR_enable_percpu_irq
FUNCTION_WRAPPER_VOID(enable_percpu_irq, (unsigned int irq, unsigned int type), {
    kern_printk("enable_percpu_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq, type);
    enable_percpu_irq(irq, type);
    POST_WRAPPER_FUNC(irq, type);
    kern_printk("enable_percpu_irq returned.\n");
})
#endif


#ifndef KERN_ADDR_find_ge_pid
#define APP_WRAPPER_FOR_find_ge_pid
#endif
 
#ifndef APP_WRAPPER_FOR_find_ge_pid
#define APP_WRAPPER_FOR_find_ge_pid
FUNCTION_WRAPPER(find_ge_pid, (int nr, struct pid_namespace *_arg1), {
    kern_printk("find_ge_pid is invoked.\n");
    PRE_WRAPPER_FUNC(nr, _arg1);
    struct pid *ret = find_ge_pid(nr, _arg1);
    POST_WRAPPER_FUNC(nr, _arg1);
    kern_printk("find_ge_pid returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___dquot_free_space
#define APP_WRAPPER_FOR___dquot_free_space
#endif
 
#ifndef APP_WRAPPER_FOR___dquot_free_space
#define APP_WRAPPER_FOR___dquot_free_space
FUNCTION_WRAPPER_VOID(__dquot_free_space, (struct inode *inode, qsize_t number, int flags), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("__dquot_free_space is invoked.\n");
    PRE_WRAPPER_FUNC(inode, number, flags);
    __dquot_free_space(inode, number, flags);
    POST_WRAPPER_FUNC(inode, number, flags);
    kern_printk("__dquot_free_space returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_profile_munmap
#define APP_WRAPPER_FOR_profile_munmap
#endif
 
#ifndef APP_WRAPPER_FOR_profile_munmap
#define APP_WRAPPER_FOR_profile_munmap
FUNCTION_WRAPPER_VOID(profile_munmap, (unsigned long addr), {
    kern_printk("profile_munmap is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    profile_munmap(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("profile_munmap returned.\n");
})
#endif


#ifndef KERN_ADDR_copy_user_generic_string
#define APP_WRAPPER_FOR_copy_user_generic_string
#endif
 
#ifndef APP_WRAPPER_FOR_copy_user_generic_string
#define APP_WRAPPER_FOR_copy_user_generic_string
FUNCTION_WRAPPER(copy_user_generic_string, (void *to, const void *from, unsigned int len), {
    kern_printk("copy_user_generic_string is invoked.\n");
    PRE_WRAPPER_FUNC(to, from, len);
    long ret = copy_user_generic_string(to, from, len);
    POST_WRAPPER_FUNC(to, from, len);
    kern_printk("copy_user_generic_string returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_delete_inode
#define APP_WRAPPER_FOR_generic_delete_inode
#endif
 
#ifndef APP_WRAPPER_FOR_generic_delete_inode
#define APP_WRAPPER_FOR_generic_delete_inode
FUNCTION_WRAPPER(generic_delete_inode, (struct inode *inode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("generic_delete_inode is invoked.\n");
    PRE_WRAPPER_FUNC(inode);
    int ret = generic_delete_inode(inode);
    POST_WRAPPER_FUNC(inode);
    kern_printk("generic_delete_inode returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    return ret;
})
#endif


#ifndef KERN_ADDR_securityfs_remove
#define APP_WRAPPER_FOR_securityfs_remove
#endif
 
#ifndef APP_WRAPPER_FOR_securityfs_remove
#define APP_WRAPPER_FOR_securityfs_remove
FUNCTION_WRAPPER_VOID(securityfs_remove, (struct dentry *dentry), {
    WRAP_RECURSIVE(dentry);
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    kern_printk("securityfs_remove is invoked.\n");
    PRE_WRAPPER_FUNC(dentry);
    securityfs_remove(dentry);
    POST_WRAPPER_FUNC(dentry);
    kern_printk("securityfs_remove returned.\n");
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
})
#endif


#ifndef KERN_ADDR_current_kernel_time
#define APP_WRAPPER_FOR_current_kernel_time
#endif
 
#ifndef APP_WRAPPER_FOR_current_kernel_time
#define APP_WRAPPER_FOR_current_kernel_time
FUNCTION_WRAPPER(current_kernel_time, (), {
    kern_printk("current_kernel_time is invoked.\n");
    PRE_WRAPPER_FUNC();
    struct timespec ret = current_kernel_time();
    POST_WRAPPER_FUNC();
    kern_printk("current_kernel_time returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_register_one_node
#define APP_WRAPPER_FOR_register_one_node
#endif
 
#ifndef APP_WRAPPER_FOR_register_one_node
#define APP_WRAPPER_FOR_register_one_node
FUNCTION_WRAPPER(register_one_node, (int nid), {
    kern_printk("register_one_node is invoked.\n");
    PRE_WRAPPER_FUNC(nid);
    int ret = register_one_node(nid);
    POST_WRAPPER_FUNC(nid);
    kern_printk("register_one_node returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_alternatives_enable_smp
#define APP_WRAPPER_FOR_alternatives_enable_smp
#endif
 
#ifndef APP_WRAPPER_FOR_alternatives_enable_smp
#define APP_WRAPPER_FOR_alternatives_enable_smp
FUNCTION_WRAPPER_VOID(alternatives_enable_smp, (), {
    kern_printk("alternatives_enable_smp is invoked.\n");
    PRE_WRAPPER_FUNC();
    alternatives_enable_smp();
    POST_WRAPPER_FUNC();
    kern_printk("alternatives_enable_smp returned.\n");
})
#endif


#ifndef KERN_ADDR_blkdev_get
#define APP_WRAPPER_FOR_blkdev_get
#endif
 
#ifndef APP_WRAPPER_FOR_blkdev_get
#define APP_WRAPPER_FOR_blkdev_get
FUNCTION_WRAPPER(blkdev_get, (struct block_device *bdev, fmode_t mode, void *holder), {
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    kern_printk("blkdev_get is invoked.\n");
    PRE_WRAPPER_FUNC(bdev, mode, holder);
    int ret = blkdev_get(bdev, mode, holder);
    POST_WRAPPER_FUNC(bdev, mode, holder);
    kern_printk("blkdev_get returned.\n");
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_unlink
#define APP_WRAPPER_FOR_skb_unlink
#endif
 
#ifndef APP_WRAPPER_FOR_skb_unlink
#define APP_WRAPPER_FOR_skb_unlink
FUNCTION_WRAPPER_VOID(skb_unlink, (struct sk_buff *skb, struct sk_buff_head *list), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_RECURSIVE(list);
    TRACES_IF_WATCHPOINT(list);
    SCAN_HEAD_FUNC(struct sk_buff_head)(*(TO_UNWATCHED_ADDRESS(list)));
    kern_printk("skb_unlink is invoked.\n");
    PRE_WRAPPER_FUNC(skb, list);
    skb_unlink(skb, list);
    POST_WRAPPER_FUNC(skb, list);
    kern_printk("skb_unlink returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    TRACES_IF_WATCHPOINT(list);
    SCAN_HEAD_FUNC(struct sk_buff_head)(*(TO_UNWATCHED_ADDRESS(list)));
})
#endif


#ifndef KERN_ADDR_pci_setup_bridge
#define APP_WRAPPER_FOR_pci_setup_bridge
#endif
 
#ifndef APP_WRAPPER_FOR_pci_setup_bridge
#define APP_WRAPPER_FOR_pci_setup_bridge
FUNCTION_WRAPPER_VOID(pci_setup_bridge, (struct pci_bus *bus), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_setup_bridge is invoked.\n");
    PRE_WRAPPER_FUNC(bus);
    pci_setup_bridge(bus);
    POST_WRAPPER_FUNC(bus);
    kern_printk("pci_setup_bridge returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
})
#endif


#ifndef KERN_ADDR_rtnl_af_unregister
#define APP_WRAPPER_FOR_rtnl_af_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_rtnl_af_unregister
#define APP_WRAPPER_FOR_rtnl_af_unregister
FUNCTION_WRAPPER_VOID(rtnl_af_unregister, (struct rtnl_af_ops *ops), {
    WRAP_RECURSIVE(ops);
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct rtnl_af_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    kern_printk("rtnl_af_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(ops);
    rtnl_af_unregister(ops);
    POST_WRAPPER_FUNC(ops);
    kern_printk("rtnl_af_unregister returned.\n");
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct rtnl_af_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
})
#endif


#ifndef KERN_ADDR_dev_addr_del_multiple
#define APP_WRAPPER_FOR_dev_addr_del_multiple
#endif
 
#ifndef APP_WRAPPER_FOR_dev_addr_del_multiple
#define APP_WRAPPER_FOR_dev_addr_del_multiple
FUNCTION_WRAPPER(dev_addr_del_multiple, (struct net_device *to_dev, struct net_device *from_dev, unsigned char addr_type), {
    WRAP_RECURSIVE(to_dev);
    TRACES_IF_WATCHPOINT(to_dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(to_dev)));
    WRAP_RECURSIVE(from_dev);
    TRACES_IF_WATCHPOINT(from_dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(from_dev)));
    kern_printk("dev_addr_del_multiple is invoked.\n");
    PRE_WRAPPER_FUNC(to_dev, from_dev, addr_type);
    int ret = dev_addr_del_multiple(to_dev, from_dev, addr_type);
    POST_WRAPPER_FUNC(to_dev, from_dev, addr_type);
    kern_printk("dev_addr_del_multiple returned.\n");
    TRACES_IF_WATCHPOINT(to_dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(to_dev)));
    TRACES_IF_WATCHPOINT(from_dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(from_dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_free_task
#define APP_WRAPPER_FOR_free_task
#endif
 
#ifndef APP_WRAPPER_FOR_free_task
#define APP_WRAPPER_FOR_free_task
FUNCTION_WRAPPER_VOID(free_task, (struct task_struct *tsk), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("free_task is invoked.\n");
    PRE_WRAPPER_FUNC(tsk);
    free_task(tsk);
    POST_WRAPPER_FUNC(tsk);
    kern_printk("free_task returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
})
#endif


#ifndef KERN_ADDR_driver_remove_file
#define APP_WRAPPER_FOR_driver_remove_file
#endif
 
#ifndef APP_WRAPPER_FOR_driver_remove_file
#define APP_WRAPPER_FOR_driver_remove_file
FUNCTION_WRAPPER_VOID(driver_remove_file, (struct device_driver *driver, const struct driver_attribute *attr), {
    WRAP_RECURSIVE(driver);
    TRACES_IF_WATCHPOINT(driver);
    SCAN_HEAD_FUNC(struct device_driver)(*(TO_UNWATCHED_ADDRESS(driver)));
    WRAP_RECURSIVE(attr);
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(const struct driver_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    kern_printk("driver_remove_file is invoked.\n");
    PRE_WRAPPER_FUNC(driver, attr);
    driver_remove_file(driver, attr);
    POST_WRAPPER_FUNC(driver, attr);
    kern_printk("driver_remove_file returned.\n");
    TRACES_IF_WATCHPOINT(driver);
    SCAN_HEAD_FUNC(struct device_driver)(*(TO_UNWATCHED_ADDRESS(driver)));
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(const struct driver_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
})
#endif


#ifndef KERN_ADDR_native_load_gs_index
#define APP_WRAPPER_FOR_native_load_gs_index
#endif
 
#ifndef APP_WRAPPER_FOR_native_load_gs_index
#define APP_WRAPPER_FOR_native_load_gs_index
FUNCTION_WRAPPER_VOID(native_load_gs_index, (unsigned int _arg1), {
    kern_printk("native_load_gs_index is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    native_load_gs_index(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("native_load_gs_index returned.\n");
})
#endif


#ifndef KERN_ADDR_dev_printk
#define APP_WRAPPER_FOR_dev_printk
#endif
 
#ifndef APP_WRAPPER_FOR_dev_printk
#define APP_WRAPPER_FOR_dev_printk
FUNCTION_WRAPPER(dev_printk, (const char *level, const struct device *dev, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    // TODO: variadic arguments
    kern_printk("dev_printk is invoked.\n");
    PRE_WRAPPER_FUNC(level, dev, fmt);
    int ret = dev_printk(level, dev, fmt);
    POST_WRAPPER_FUNC(level, dev, fmt);
    kern_printk("dev_printk returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_phy_connect_direct
#define APP_WRAPPER_FOR_phy_connect_direct
#endif
 
#ifndef APP_WRAPPER_FOR_phy_connect_direct
#define APP_WRAPPER_FOR_phy_connect_direct
FUNCTION_WRAPPER(phy_connect_direct, (struct net_device *dev, struct phy_device *phydev, void (*handler)(struct net_device *), u32 flags, phy_interface_t interface), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    WRAP_FUNCTION(handler);
    kern_printk("phy_connect_direct is invoked.\n");
    PRE_WRAPPER_FUNC(dev, phydev, handler, flags, interface);
    int ret = phy_connect_direct(dev, phydev, handler, flags, interface);
    POST_WRAPPER_FUNC(dev, phydev, handler, flags, interface);
    kern_printk("phy_connect_direct returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_boot_init
#define APP_WRAPPER_FOR_acpi_boot_init
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_boot_init
#define APP_WRAPPER_FOR_acpi_boot_init
FUNCTION_WRAPPER(acpi_boot_init, (), {
    kern_printk("acpi_boot_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = acpi_boot_init();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_boot_init returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_tick_nohz_idle_exit
#define APP_WRAPPER_FOR_tick_nohz_idle_exit
#endif
 
#ifndef APP_WRAPPER_FOR_tick_nohz_idle_exit
#define APP_WRAPPER_FOR_tick_nohz_idle_exit
FUNCTION_WRAPPER_VOID(tick_nohz_idle_exit, (), {
    kern_printk("tick_nohz_idle_exit is invoked.\n");
    PRE_WRAPPER_FUNC();
    tick_nohz_idle_exit();
    POST_WRAPPER_FUNC();
    kern_printk("tick_nohz_idle_exit returned.\n");
})
#endif


#ifndef KERN_ADDR_driver_attach
#define APP_WRAPPER_FOR_driver_attach
#endif
 
#ifndef APP_WRAPPER_FOR_driver_attach
#define APP_WRAPPER_FOR_driver_attach
FUNCTION_WRAPPER(driver_attach, (struct device_driver *drv), {
    WRAP_RECURSIVE(drv);
    TRACES_IF_WATCHPOINT(drv);
    SCAN_HEAD_FUNC(struct device_driver)(*(TO_UNWATCHED_ADDRESS(drv)));
    kern_printk("driver_attach is invoked.\n");
    PRE_WRAPPER_FUNC(drv);
    int ret = driver_attach(drv);
    POST_WRAPPER_FUNC(drv);
    kern_printk("driver_attach returned.\n");
    TRACES_IF_WATCHPOINT(drv);
    SCAN_HEAD_FUNC(struct device_driver)(*(TO_UNWATCHED_ADDRESS(drv)));
    return ret;
})
#endif


#ifndef KERN_ADDR_find_min_pfn_with_active_regions
#define APP_WRAPPER_FOR_find_min_pfn_with_active_regions
#endif
 
#ifndef APP_WRAPPER_FOR_find_min_pfn_with_active_regions
#define APP_WRAPPER_FOR_find_min_pfn_with_active_regions
FUNCTION_WRAPPER(find_min_pfn_with_active_regions, (), {
    kern_printk("find_min_pfn_with_active_regions is invoked.\n");
    PRE_WRAPPER_FUNC();
    long ret = find_min_pfn_with_active_regions();
    POST_WRAPPER_FUNC();
    kern_printk("find_min_pfn_with_active_regions returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dma_async_tx_descriptor_init
#define APP_WRAPPER_FOR_dma_async_tx_descriptor_init
#endif
 
#ifndef APP_WRAPPER_FOR_dma_async_tx_descriptor_init
#define APP_WRAPPER_FOR_dma_async_tx_descriptor_init
FUNCTION_WRAPPER_VOID(dma_async_tx_descriptor_init, (struct dma_async_tx_descriptor *tx, struct dma_chan *chan), {
    WRAP_RECURSIVE(tx);
    TRACES_IF_WATCHPOINT(tx);
    SCAN_HEAD_FUNC(struct dma_async_tx_descriptor)(*(TO_UNWATCHED_ADDRESS(tx)));
    WRAP_RECURSIVE(chan);
    TRACES_IF_WATCHPOINT(chan);
    SCAN_HEAD_FUNC(struct dma_chan)(*(TO_UNWATCHED_ADDRESS(chan)));
    kern_printk("dma_async_tx_descriptor_init is invoked.\n");
    PRE_WRAPPER_FUNC(tx, chan);
    dma_async_tx_descriptor_init(tx, chan);
    POST_WRAPPER_FUNC(tx, chan);
    kern_printk("dma_async_tx_descriptor_init returned.\n");
    TRACES_IF_WATCHPOINT(tx);
    SCAN_HEAD_FUNC(struct dma_async_tx_descriptor)(*(TO_UNWATCHED_ADDRESS(tx)));
    TRACES_IF_WATCHPOINT(chan);
    SCAN_HEAD_FUNC(struct dma_chan)(*(TO_UNWATCHED_ADDRESS(chan)));
})
#endif


#ifndef KERN_ADDR_key_invalidate
#define APP_WRAPPER_FOR_key_invalidate
#endif
 
#ifndef APP_WRAPPER_FOR_key_invalidate
#define APP_WRAPPER_FOR_key_invalidate
FUNCTION_WRAPPER_VOID(key_invalidate, (struct key *key), {
    kern_printk("key_invalidate is invoked.\n");
    PRE_WRAPPER_FUNC(key);
    key_invalidate(key);
    POST_WRAPPER_FUNC(key);
    kern_printk("key_invalidate returned.\n");
})
#endif


#ifndef KERN_ADDR_sget
#define APP_WRAPPER_FOR_sget
#endif
 
#ifndef APP_WRAPPER_FOR_sget
#define APP_WRAPPER_FOR_sget
FUNCTION_WRAPPER(sget, (struct file_system_type *type, int (*test)(struct super_block *, void *), int (*set)(struct super_block *, void *), int flags, void *data), {
    WRAP_RECURSIVE(type);
    TRACES_IF_WATCHPOINT(type);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(type)));
    WRAP_FUNCTION(test);
    WRAP_FUNCTION(set);
    kern_printk("sget is invoked.\n");
    PRE_WRAPPER_FUNC(type, test, set, flags, data);
    struct super_block *ret = sget(type, test, set, flags, data);
    POST_WRAPPER_FUNC(type, test, set, flags, data);
    kern_printk("sget returned.\n");
    TRACES_IF_WATCHPOINT(type);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(type)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_mkdir
#define APP_WRAPPER_FOR_vfs_mkdir
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_mkdir
#define APP_WRAPPER_FOR_vfs_mkdir
FUNCTION_WRAPPER(vfs_mkdir, (struct inode *_arg1, struct dentry *_arg2, umode_t _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("vfs_mkdir is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = vfs_mkdir(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("vfs_mkdir returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_elv_dispatch_sort
#define APP_WRAPPER_FOR_elv_dispatch_sort
#endif
 
#ifndef APP_WRAPPER_FOR_elv_dispatch_sort
#define APP_WRAPPER_FOR_elv_dispatch_sort
FUNCTION_WRAPPER_VOID(elv_dispatch_sort, (struct request_queue *_arg1, struct request *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("elv_dispatch_sort is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    elv_dispatch_sort(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("elv_dispatch_sort returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_prandom_seed
#define APP_WRAPPER_FOR_prandom_seed
#endif
 
#ifndef APP_WRAPPER_FOR_prandom_seed
#define APP_WRAPPER_FOR_prandom_seed
FUNCTION_WRAPPER_VOID(prandom_seed, (u32 seed), {
    kern_printk("prandom_seed is invoked.\n");
    PRE_WRAPPER_FUNC(seed);
    prandom_seed(seed);
    POST_WRAPPER_FUNC(seed);
    kern_printk("prandom_seed returned.\n");
})
#endif


#ifndef KERN_ADDR_native_io_apic_modify
#define APP_WRAPPER_FOR_native_io_apic_modify
#endif
 
#ifndef APP_WRAPPER_FOR_native_io_apic_modify
#define APP_WRAPPER_FOR_native_io_apic_modify
FUNCTION_WRAPPER_VOID(native_io_apic_modify, (unsigned int apic, unsigned int reg, unsigned int val), {
    kern_printk("native_io_apic_modify is invoked.\n");
    PRE_WRAPPER_FUNC(apic, reg, val);
    native_io_apic_modify(apic, reg, val);
    POST_WRAPPER_FUNC(apic, reg, val);
    kern_printk("native_io_apic_modify returned.\n");
})
#endif


#ifndef KERN_ADDR__set_memory_uc
#define APP_WRAPPER_FOR__set_memory_uc
#endif
 
#ifndef APP_WRAPPER_FOR__set_memory_uc
#define APP_WRAPPER_FOR__set_memory_uc
FUNCTION_WRAPPER(_set_memory_uc, (unsigned long addr, int numpages), {
    kern_printk("_set_memory_uc is invoked.\n");
    PRE_WRAPPER_FUNC(addr, numpages);
    int ret = _set_memory_uc(addr, numpages);
    POST_WRAPPER_FUNC(addr, numpages);
    kern_printk("_set_memory_uc returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_zone_statistics
#define APP_WRAPPER_FOR_zone_statistics
#endif
 
#ifndef APP_WRAPPER_FOR_zone_statistics
#define APP_WRAPPER_FOR_zone_statistics
FUNCTION_WRAPPER_VOID(zone_statistics, (struct zone *_arg1, struct zone *_arg2, gfp_t gfp), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("zone_statistics is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, gfp);
    zone_statistics(_arg1, _arg2, gfp);
    POST_WRAPPER_FUNC(_arg1, _arg2, gfp);
    kern_printk("zone_statistics returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_rcu_scheduler_starting
#define APP_WRAPPER_FOR_rcu_scheduler_starting
#endif
 
#ifndef APP_WRAPPER_FOR_rcu_scheduler_starting
#define APP_WRAPPER_FOR_rcu_scheduler_starting
FUNCTION_WRAPPER_VOID(rcu_scheduler_starting, (), {
    kern_printk("rcu_scheduler_starting is invoked.\n");
    PRE_WRAPPER_FUNC();
    rcu_scheduler_starting();
    POST_WRAPPER_FUNC();
    kern_printk("rcu_scheduler_starting returned.\n");
})
#endif


#ifndef KERN_ADDR_skb_splice_bits
#define APP_WRAPPER_FOR_skb_splice_bits
#endif
 
#ifndef APP_WRAPPER_FOR_skb_splice_bits
#define APP_WRAPPER_FOR_skb_splice_bits
FUNCTION_WRAPPER(skb_splice_bits, (struct sk_buff *skb, unsigned int offset, struct pipe_inode_info *pipe, unsigned int len, unsigned int flags), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_splice_bits is invoked.\n");
    PRE_WRAPPER_FUNC(skb, offset, pipe, len, flags);
    int ret = skb_splice_bits(skb, offset, pipe, len, flags);
    POST_WRAPPER_FUNC(skb, offset, pipe, len, flags);
    kern_printk("skb_splice_bits returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sparse_memory_present_with_active_regions
#define APP_WRAPPER_FOR_sparse_memory_present_with_active_regions
#endif
 
#ifndef APP_WRAPPER_FOR_sparse_memory_present_with_active_regions
#define APP_WRAPPER_FOR_sparse_memory_present_with_active_regions
FUNCTION_WRAPPER_VOID(sparse_memory_present_with_active_regions, (int nid), {
    kern_printk("sparse_memory_present_with_active_regions is invoked.\n");
    PRE_WRAPPER_FUNC(nid);
    sparse_memory_present_with_active_regions(nid);
    POST_WRAPPER_FUNC(nid);
    kern_printk("sparse_memory_present_with_active_regions returned.\n");
})
#endif


#ifndef KERN_ADDR_filemap_page_mkwrite
#define APP_WRAPPER_FOR_filemap_page_mkwrite
#endif
 
#ifndef APP_WRAPPER_FOR_filemap_page_mkwrite
#define APP_WRAPPER_FOR_filemap_page_mkwrite
FUNCTION_WRAPPER(filemap_page_mkwrite, (struct vm_area_struct *vma, struct vm_fault *vmf), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    WRAP_RECURSIVE(vmf);
    TRACES_IF_WATCHPOINT(vmf);
    SCAN_HEAD_FUNC(struct vm_fault)(*(TO_UNWATCHED_ADDRESS(vmf)));
    kern_printk("filemap_page_mkwrite is invoked.\n");
    PRE_WRAPPER_FUNC(vma, vmf);
    int ret = filemap_page_mkwrite(vma, vmf);
    POST_WRAPPER_FUNC(vma, vmf);
    kern_printk("filemap_page_mkwrite returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    TRACES_IF_WATCHPOINT(vmf);
    SCAN_HEAD_FUNC(struct vm_fault)(*(TO_UNWATCHED_ADDRESS(vmf)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_match_device_ids
#define APP_WRAPPER_FOR_acpi_match_device_ids
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_match_device_ids
#define APP_WRAPPER_FOR_acpi_match_device_ids
FUNCTION_WRAPPER(acpi_match_device_ids, (struct acpi_device *device, const struct acpi_device_id *ids), {
    WRAP_RECURSIVE(device);
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(device)));
    kern_printk("acpi_match_device_ids is invoked.\n");
    PRE_WRAPPER_FUNC(device, ids);
    int ret = acpi_match_device_ids(device, ids);
    POST_WRAPPER_FUNC(device, ids);
    kern_printk("acpi_match_device_ids returned.\n");
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(device)));
    return ret;
})
#endif


#ifndef KERN_ADDR_put_seccomp_filter
#define APP_WRAPPER_FOR_put_seccomp_filter
#endif
 
#ifndef APP_WRAPPER_FOR_put_seccomp_filter
#define APP_WRAPPER_FOR_put_seccomp_filter
FUNCTION_WRAPPER_VOID(put_seccomp_filter, (struct task_struct *tsk), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("put_seccomp_filter is invoked.\n");
    PRE_WRAPPER_FUNC(tsk);
    put_seccomp_filter(tsk);
    POST_WRAPPER_FUNC(tsk);
    kern_printk("put_seccomp_filter returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
})
#endif


#ifndef KERN_ADDR_proc_mkdir
#define APP_WRAPPER_FOR_proc_mkdir
#endif
 
#ifndef APP_WRAPPER_FOR_proc_mkdir
#define APP_WRAPPER_FOR_proc_mkdir
FUNCTION_WRAPPER(proc_mkdir, (const char *_arg1, struct proc_dir_entry *_arg2), {
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct proc_dir_entry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("proc_mkdir is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct proc_dir_entry *ret = proc_mkdir(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("proc_mkdir returned.\n");
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct proc_dir_entry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_hex_dump_to_buffer
#define APP_WRAPPER_FOR_hex_dump_to_buffer
#endif
 
#ifndef APP_WRAPPER_FOR_hex_dump_to_buffer
#define APP_WRAPPER_FOR_hex_dump_to_buffer
FUNCTION_WRAPPER_VOID(hex_dump_to_buffer, (const void *buf, size_t len, int rowsize, int groupsize, char *linebuf, size_t linebuflen, bool ascii), {
    kern_printk("hex_dump_to_buffer is invoked.\n");
    PRE_WRAPPER_FUNC(buf, len, rowsize, groupsize, linebuf, linebuflen, ascii);
    hex_dump_to_buffer(buf, len, rowsize, groupsize, linebuf, linebuflen, ascii);
    POST_WRAPPER_FUNC(buf, len, rowsize, groupsize, linebuf, linebuflen, ascii);
    kern_printk("hex_dump_to_buffer returned.\n");
})
#endif


#ifndef KERN_ADDR_blk_init_queue
#define APP_WRAPPER_FOR_blk_init_queue
#endif
 
#ifndef APP_WRAPPER_FOR_blk_init_queue
#define APP_WRAPPER_FOR_blk_init_queue
FUNCTION_WRAPPER(blk_init_queue, (request_fn_proc *_arg1, spinlock_t *_arg2), {
    WRAP_FUNCTION(_arg1);
    kern_printk("blk_init_queue is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct request_queue *ret = blk_init_queue(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_init_queue returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_absent_pages_in_range
#define APP_WRAPPER_FOR_absent_pages_in_range
#endif
 
#ifndef APP_WRAPPER_FOR_absent_pages_in_range
#define APP_WRAPPER_FOR_absent_pages_in_range
FUNCTION_WRAPPER(absent_pages_in_range, (unsigned long start_pfn, unsigned long end_pfn), {
    kern_printk("absent_pages_in_range is invoked.\n");
    PRE_WRAPPER_FUNC(start_pfn, end_pfn);
    long ret = absent_pages_in_range(start_pfn, end_pfn);
    POST_WRAPPER_FUNC(start_pfn, end_pfn);
    kern_printk("absent_pages_in_range returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_remove_memory
#define APP_WRAPPER_FOR_remove_memory
#endif
 
#ifndef APP_WRAPPER_FOR_remove_memory
#define APP_WRAPPER_FOR_remove_memory
FUNCTION_WRAPPER(remove_memory, (u64 start, u64 size), {
    kern_printk("remove_memory is invoked.\n");
    PRE_WRAPPER_FUNC(start, size);
    int ret = remove_memory(start, size);
    POST_WRAPPER_FUNC(start, size);
    kern_printk("remove_memory returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_block_sync_page
#define APP_WRAPPER_FOR_block_sync_page
#endif
 
#ifndef APP_WRAPPER_FOR_block_sync_page
#define APP_WRAPPER_FOR_block_sync_page
FUNCTION_WRAPPER_VOID(block_sync_page, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("block_sync_page is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    block_sync_page(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("block_sync_page returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_ignore_signals
#define APP_WRAPPER_FOR_ignore_signals
#endif
 
#ifndef APP_WRAPPER_FOR_ignore_signals
#define APP_WRAPPER_FOR_ignore_signals
FUNCTION_WRAPPER_VOID(ignore_signals, (struct task_struct *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("ignore_signals is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    ignore_signals(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("ignore_signals returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_qdisc_lookup_class
#define APP_WRAPPER_FOR_qdisc_lookup_class
#endif
 
#ifndef APP_WRAPPER_FOR_qdisc_lookup_class
#define APP_WRAPPER_FOR_qdisc_lookup_class
FUNCTION_WRAPPER(qdisc_lookup_class, (struct net_device *dev, u32 handle), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("qdisc_lookup_class is invoked.\n");
    PRE_WRAPPER_FUNC(dev, handle);
    struct Qdisc *ret = qdisc_lookup_class(dev, handle);
    POST_WRAPPER_FUNC(dev, handle);
    kern_printk("qdisc_lookup_class returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_part_size_show
#define APP_WRAPPER_FOR_part_size_show
#endif
 
#ifndef APP_WRAPPER_FOR_part_size_show
#define APP_WRAPPER_FOR_part_size_show
FUNCTION_WRAPPER(part_size_show, (struct device *dev, struct device_attribute *attr, char *buf), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(attr);
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(struct device_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    kern_printk("part_size_show is invoked.\n");
    PRE_WRAPPER_FUNC(dev, attr, buf);
    ssize_t ret = part_size_show(dev, attr, buf);
    POST_WRAPPER_FUNC(dev, attr, buf);
    kern_printk("part_size_show returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(struct device_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    return ret;
})
#endif


#ifndef KERN_ADDR_hrtimer_nanosleep
#define APP_WRAPPER_FOR_hrtimer_nanosleep
#endif
 
#ifndef APP_WRAPPER_FOR_hrtimer_nanosleep
#define APP_WRAPPER_FOR_hrtimer_nanosleep
FUNCTION_WRAPPER(hrtimer_nanosleep, (struct timespec *rqtp, struct timespec *rmtp, const enum hrtimer_mode mode, const clockid_t clockid), {
    kern_printk("hrtimer_nanosleep is invoked.\n");
    PRE_WRAPPER_FUNC(rqtp, rmtp, mode, clockid);
    long ret = hrtimer_nanosleep(rqtp, rmtp, mode, clockid);
    POST_WRAPPER_FUNC(rqtp, rmtp, mode, clockid);
    kern_printk("hrtimer_nanosleep returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_vm_map_ram
#define APP_WRAPPER_FOR_vm_map_ram
#endif
 
#ifndef APP_WRAPPER_FOR_vm_map_ram
#define APP_WRAPPER_FOR_vm_map_ram
FUNCTION_WRAPPER(vm_map_ram, (struct page **pages, unsigned int count, int node, pgprot_t prot), {
    WRAP_RECURSIVE(pages);
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    kern_printk("vm_map_ram is invoked.\n");
    PRE_WRAPPER_FUNC(pages, count, node, prot);
    void *ret = vm_map_ram(pages, count, node, prot);
    POST_WRAPPER_FUNC(pages, count, node, prot);
    kern_printk("vm_map_ram returned.\n");
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_truncate_setsize
#define APP_WRAPPER_FOR_truncate_setsize
#endif
 
#ifndef APP_WRAPPER_FOR_truncate_setsize
#define APP_WRAPPER_FOR_truncate_setsize
FUNCTION_WRAPPER_VOID(truncate_setsize, (struct inode *inode, loff_t newsize), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("truncate_setsize is invoked.\n");
    PRE_WRAPPER_FUNC(inode, newsize);
    truncate_setsize(inode, newsize);
    POST_WRAPPER_FUNC(inode, newsize);
    kern_printk("truncate_setsize returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_cap_inode_need_killpriv
#define APP_WRAPPER_FOR_cap_inode_need_killpriv
#endif
 
#ifndef APP_WRAPPER_FOR_cap_inode_need_killpriv
#define APP_WRAPPER_FOR_cap_inode_need_killpriv
FUNCTION_WRAPPER(cap_inode_need_killpriv, (struct dentry *dentry), {
    WRAP_RECURSIVE(dentry);
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    kern_printk("cap_inode_need_killpriv is invoked.\n");
    PRE_WRAPPER_FUNC(dentry);
    int ret = cap_inode_need_killpriv(dentry);
    POST_WRAPPER_FUNC(dentry);
    kern_printk("cap_inode_need_killpriv returned.\n");
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_read_memory
#define APP_WRAPPER_FOR_acpi_os_read_memory
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_read_memory
#define APP_WRAPPER_FOR_acpi_os_read_memory
FUNCTION_WRAPPER(acpi_os_read_memory, (acpi_physical_address address, u64 *value, u32 width), {
    kern_printk("acpi_os_read_memory is invoked.\n");
    PRE_WRAPPER_FUNC(address, value, width);
    acpi_status ret = acpi_os_read_memory(address, value, width);
    POST_WRAPPER_FUNC(address, value, width);
    kern_printk("acpi_os_read_memory returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_get_name
#define APP_WRAPPER_FOR_acpi_get_name
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_name
#define APP_WRAPPER_FOR_acpi_get_name
FUNCTION_WRAPPER(acpi_get_name, (acpi_handle object, u32 name_type, struct acpi_buffer *ret_path_ptr), {
    kern_printk("acpi_get_name is invoked.\n");
    PRE_WRAPPER_FUNC(object, name_type, ret_path_ptr);
    acpi_status ret = acpi_get_name(object, name_type, ret_path_ptr);
    POST_WRAPPER_FUNC(object, name_type, ret_path_ptr);
    kern_printk("acpi_get_name returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_partial_csum_set
#define APP_WRAPPER_FOR_skb_partial_csum_set
#endif
 
#ifndef APP_WRAPPER_FOR_skb_partial_csum_set
#define APP_WRAPPER_FOR_skb_partial_csum_set
FUNCTION_WRAPPER(skb_partial_csum_set, (struct sk_buff *skb, u16 start, u16 off), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_partial_csum_set is invoked.\n");
    PRE_WRAPPER_FUNC(skb, start, off);
    bool ret = skb_partial_csum_set(skb, start, off);
    POST_WRAPPER_FUNC(skb, start, off);
    kern_printk("skb_partial_csum_set returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bdgrab
#define APP_WRAPPER_FOR_bdgrab
#endif
 
#ifndef APP_WRAPPER_FOR_bdgrab
#define APP_WRAPPER_FOR_bdgrab
FUNCTION_WRAPPER(bdgrab, (struct block_device *bdev), {
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    kern_printk("bdgrab is invoked.\n");
    PRE_WRAPPER_FUNC(bdev);
    struct block_device *ret = bdgrab(bdev);
    POST_WRAPPER_FUNC(bdev);
    kern_printk("bdgrab returned.\n");
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_mp_register_gsi
#define APP_WRAPPER_FOR_mp_register_gsi
#endif
 
#ifndef APP_WRAPPER_FOR_mp_register_gsi
#define APP_WRAPPER_FOR_mp_register_gsi
FUNCTION_WRAPPER(mp_register_gsi, (struct device *dev, u32 gsi, int edge_level, int active_high_low), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("mp_register_gsi is invoked.\n");
    PRE_WRAPPER_FUNC(dev, gsi, edge_level, active_high_low);
    int ret = mp_register_gsi(dev, gsi, edge_level, active_high_low);
    POST_WRAPPER_FUNC(dev, gsi, edge_level, active_high_low);
    kern_printk("mp_register_gsi returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_timer_stats_update_stats
#define APP_WRAPPER_FOR_timer_stats_update_stats
#endif
 
#ifndef APP_WRAPPER_FOR_timer_stats_update_stats
#define APP_WRAPPER_FOR_timer_stats_update_stats
FUNCTION_WRAPPER_VOID(timer_stats_update_stats, (void *timer, pid_t pid, void *startf, void *timerf, char *comm, unsigned int timer_flag), {
    kern_printk("timer_stats_update_stats is invoked.\n");
    PRE_WRAPPER_FUNC(timer, pid, startf, timerf, comm, timer_flag);
    timer_stats_update_stats(timer, pid, startf, timerf, comm, timer_flag);
    POST_WRAPPER_FUNC(timer, pid, startf, timerf, comm, timer_flag);
    kern_printk("timer_stats_update_stats returned.\n");
})
#endif


#ifndef KERN_ADDR_check_x2apic
#define APP_WRAPPER_FOR_check_x2apic
#endif
 
#ifndef APP_WRAPPER_FOR_check_x2apic
#define APP_WRAPPER_FOR_check_x2apic
FUNCTION_WRAPPER_VOID(check_x2apic, (), {
    kern_printk("check_x2apic is invoked.\n");
    PRE_WRAPPER_FUNC();
    check_x2apic();
    POST_WRAPPER_FUNC();
    kern_printk("check_x2apic returned.\n");
})
#endif


#ifndef KERN_ADDR_kstrdup
#define APP_WRAPPER_FOR_kstrdup
#endif
 
#ifndef APP_WRAPPER_FOR_kstrdup
#define APP_WRAPPER_FOR_kstrdup
FUNCTION_WRAPPER(kstrdup, (const char *s, gfp_t gfp), {
    kern_printk("kstrdup is invoked.\n");
    PRE_WRAPPER_FUNC(s, gfp);
    char *ret = kstrdup(s, gfp);
    POST_WRAPPER_FUNC(s, gfp);
    kern_printk("kstrdup returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_disable_gpe
#define APP_WRAPPER_FOR_acpi_disable_gpe
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_disable_gpe
#define APP_WRAPPER_FOR_acpi_disable_gpe
FUNCTION_WRAPPER(acpi_disable_gpe, (acpi_handle gpe_device, u32 gpe_number), {
    kern_printk("acpi_disable_gpe is invoked.\n");
    PRE_WRAPPER_FUNC(gpe_device, gpe_number);
    acpi_status ret = acpi_disable_gpe(gpe_device, gpe_number);
    POST_WRAPPER_FUNC(gpe_device, gpe_number);
    kern_printk("acpi_disable_gpe returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___vm_enough_memory
#define APP_WRAPPER_FOR___vm_enough_memory
#endif
 
#ifndef APP_WRAPPER_FOR___vm_enough_memory
#define APP_WRAPPER_FOR___vm_enough_memory
FUNCTION_WRAPPER(__vm_enough_memory, (struct mm_struct *mm, long pages, int cap_sys_admin), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    kern_printk("__vm_enough_memory is invoked.\n");
    PRE_WRAPPER_FUNC(mm, pages, cap_sys_admin);
    int ret = __vm_enough_memory(mm, pages, cap_sys_admin);
    POST_WRAPPER_FUNC(mm, pages, cap_sys_admin);
    kern_printk("__vm_enough_memory returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_free
#define APP_WRAPPER_FOR_jbd2_free
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_free
#define APP_WRAPPER_FOR_jbd2_free
FUNCTION_WRAPPER_VOID(jbd2_free, (void *ptr, size_t size), {
    kern_printk("jbd2_free is invoked.\n");
    PRE_WRAPPER_FUNC(ptr, size);
    jbd2_free(ptr, size);
    POST_WRAPPER_FUNC(ptr, size);
    kern_printk("jbd2_free returned.\n");
})
#endif


#ifndef KERN_ADDR_irq_set_affinity
#define APP_WRAPPER_FOR_irq_set_affinity
#endif
 
#ifndef APP_WRAPPER_FOR_irq_set_affinity
#define APP_WRAPPER_FOR_irq_set_affinity
FUNCTION_WRAPPER(irq_set_affinity, (unsigned int irq, const struct cpumask *cpumask), {
    kern_printk("irq_set_affinity is invoked.\n");
    PRE_WRAPPER_FUNC(irq, cpumask);
    int ret = irq_set_affinity(irq, cpumask);
    POST_WRAPPER_FUNC(irq, cpumask);
    kern_printk("irq_set_affinity returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_rt_mutex_unlock
#define APP_WRAPPER_FOR_rt_mutex_unlock
#endif
 
#ifndef APP_WRAPPER_FOR_rt_mutex_unlock
#define APP_WRAPPER_FOR_rt_mutex_unlock
FUNCTION_WRAPPER_VOID(rt_mutex_unlock, (struct rt_mutex *lock), {
    WRAP_RECURSIVE(lock);
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct rt_mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
    kern_printk("rt_mutex_unlock is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    rt_mutex_unlock(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("rt_mutex_unlock returned.\n");
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct rt_mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
})
#endif


#ifndef KERN_ADDR_acpi_info
#define APP_WRAPPER_FOR_acpi_info
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_info
#define APP_WRAPPER_FOR_acpi_info
FUNCTION_WRAPPER_VOID(acpi_info, (const char *module_name, u32 line_number, const char *format, ...), {
    va_list args__;
    va_start(args__, format);
    // TODO: variadic arguments
    kern_printk("acpi_info is invoked.\n");
    PRE_WRAPPER_FUNC(module_name, line_number, format);
    acpi_info(module_name, line_number, format);
    POST_WRAPPER_FUNC(module_name, line_number, format);
    kern_printk("acpi_info returned.\n");
    va_end(args__);
})
#endif


#ifndef KERN_ADDR_warn_alloc_failed
#define APP_WRAPPER_FOR_warn_alloc_failed
#endif
 
#ifndef APP_WRAPPER_FOR_warn_alloc_failed
#define APP_WRAPPER_FOR_warn_alloc_failed
FUNCTION_WRAPPER_VOID(warn_alloc_failed, (gfp_t gfp_mask, int order, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    // TODO: variadic arguments
    kern_printk("warn_alloc_failed is invoked.\n");
    PRE_WRAPPER_FUNC(gfp_mask, order, fmt);
    warn_alloc_failed(gfp_mask, order, fmt);
    POST_WRAPPER_FUNC(gfp_mask, order, fmt);
    kern_printk("warn_alloc_failed returned.\n");
    va_end(args__);
})
#endif


#ifndef KERN_ADDR_sched_clock_cpu
#define APP_WRAPPER_FOR_sched_clock_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_sched_clock_cpu
#define APP_WRAPPER_FOR_sched_clock_cpu
FUNCTION_WRAPPER(sched_clock_cpu, (int cpu), {
    kern_printk("sched_clock_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    u64 ret = sched_clock_cpu(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("sched_clock_cpu returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_no_accept
#define APP_WRAPPER_FOR_sock_no_accept
#endif
 
#ifndef APP_WRAPPER_FOR_sock_no_accept
#define APP_WRAPPER_FOR_sock_no_accept
FUNCTION_WRAPPER(sock_no_accept, (struct socket *_arg1, struct socket *_arg2, int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("sock_no_accept is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = sock_no_accept(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("sock_no_accept returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_devm_kzalloc
#define APP_WRAPPER_FOR_devm_kzalloc
#endif
 
#ifndef APP_WRAPPER_FOR_devm_kzalloc
#define APP_WRAPPER_FOR_devm_kzalloc
FUNCTION_WRAPPER(devm_kzalloc, (struct device *dev, size_t size, gfp_t gfp), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("devm_kzalloc is invoked.\n");
    PRE_WRAPPER_FUNC(dev, size, gfp);
    void *ret = devm_kzalloc(dev, size, gfp);
    POST_WRAPPER_FUNC(dev, size, gfp);
    kern_printk("devm_kzalloc returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_create_prof_cpu_mask
#define APP_WRAPPER_FOR_create_prof_cpu_mask
#endif
 
#ifndef APP_WRAPPER_FOR_create_prof_cpu_mask
#define APP_WRAPPER_FOR_create_prof_cpu_mask
FUNCTION_WRAPPER_VOID(create_prof_cpu_mask, (struct proc_dir_entry *de), {
    WRAP_RECURSIVE(de);
    TRACES_IF_WATCHPOINT(de);
    SCAN_HEAD_FUNC(struct proc_dir_entry)(*(TO_UNWATCHED_ADDRESS(de)));
    kern_printk("create_prof_cpu_mask is invoked.\n");
    PRE_WRAPPER_FUNC(de);
    create_prof_cpu_mask(de);
    POST_WRAPPER_FUNC(de);
    kern_printk("create_prof_cpu_mask returned.\n");
    TRACES_IF_WATCHPOINT(de);
    SCAN_HEAD_FUNC(struct proc_dir_entry)(*(TO_UNWATCHED_ADDRESS(de)));
})
#endif


#ifndef KERN_ADDR_dev_alert
#define APP_WRAPPER_FOR_dev_alert
#endif
 
#ifndef APP_WRAPPER_FOR_dev_alert
#define APP_WRAPPER_FOR_dev_alert
FUNCTION_WRAPPER(dev_alert, (const struct device *dev, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    // TODO: variadic arguments
    kern_printk("dev_alert is invoked.\n");
    PRE_WRAPPER_FUNC(dev, fmt);
    int ret = dev_alert(dev, fmt);
    POST_WRAPPER_FUNC(dev, fmt);
    kern_printk("dev_alert returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sysfs_unmerge_group
#define APP_WRAPPER_FOR_sysfs_unmerge_group
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_unmerge_group
#define APP_WRAPPER_FOR_sysfs_unmerge_group
FUNCTION_WRAPPER_VOID(sysfs_unmerge_group, (struct kobject *kobj, const struct attribute_group *grp), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    WRAP_RECURSIVE(grp);
    TRACES_IF_WATCHPOINT(grp);
    SCAN_HEAD_FUNC(const struct attribute_group)(*(TO_UNWATCHED_ADDRESS(grp)));
    kern_printk("sysfs_unmerge_group is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, grp);
    sysfs_unmerge_group(kobj, grp);
    POST_WRAPPER_FUNC(kobj, grp);
    kern_printk("sysfs_unmerge_group returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    TRACES_IF_WATCHPOINT(grp);
    SCAN_HEAD_FUNC(const struct attribute_group)(*(TO_UNWATCHED_ADDRESS(grp)));
})
#endif


#ifndef KERN_ADDR_dget_parent
#define APP_WRAPPER_FOR_dget_parent
#endif
 
#ifndef APP_WRAPPER_FOR_dget_parent
#define APP_WRAPPER_FOR_dget_parent
FUNCTION_WRAPPER(dget_parent, (struct dentry *dentry), {
    WRAP_RECURSIVE(dentry);
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    kern_printk("dget_parent is invoked.\n");
    PRE_WRAPPER_FUNC(dentry);
    struct dentry *ret = dget_parent(dentry);
    POST_WRAPPER_FUNC(dentry);
    kern_printk("dget_parent returned.\n");
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_shake_page
#define APP_WRAPPER_FOR_shake_page
#endif
 
#ifndef APP_WRAPPER_FOR_shake_page
#define APP_WRAPPER_FOR_shake_page
FUNCTION_WRAPPER_VOID(shake_page, (struct page *p, int access), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("shake_page is invoked.\n");
    PRE_WRAPPER_FUNC(p, access);
    shake_page(p, access);
    POST_WRAPPER_FUNC(p, access);
    kern_printk("shake_page returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(p)));
})
#endif


#ifndef KERN_ADDR_ata_sff_prereset
#define APP_WRAPPER_FOR_ata_sff_prereset
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_prereset
#define APP_WRAPPER_FOR_ata_sff_prereset
FUNCTION_WRAPPER(ata_sff_prereset, (struct ata_link *link, unsigned long deadline), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    kern_printk("ata_sff_prereset is invoked.\n");
    PRE_WRAPPER_FUNC(link, deadline);
    int ret = ata_sff_prereset(link, deadline);
    POST_WRAPPER_FUNC(link, deadline);
    kern_printk("ata_sff_prereset returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_no_bind
#define APP_WRAPPER_FOR_sock_no_bind
#endif
 
#ifndef APP_WRAPPER_FOR_sock_no_bind
#define APP_WRAPPER_FOR_sock_no_bind
FUNCTION_WRAPPER(sock_no_bind, (struct socket *_arg1, struct sockaddr *_arg2, int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("sock_no_bind is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = sock_no_bind(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("sock_no_bind returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_rcu_barrier_sched
#define APP_WRAPPER_FOR_rcu_barrier_sched
#endif
 
#ifndef APP_WRAPPER_FOR_rcu_barrier_sched
#define APP_WRAPPER_FOR_rcu_barrier_sched
FUNCTION_WRAPPER_VOID(rcu_barrier_sched, (), {
    kern_printk("rcu_barrier_sched is invoked.\n");
    PRE_WRAPPER_FUNC();
    rcu_barrier_sched();
    POST_WRAPPER_FUNC();
    kern_printk("rcu_barrier_sched returned.\n");
})
#endif


#ifndef KERN_ADDR_get_monotonic_coarse
#define APP_WRAPPER_FOR_get_monotonic_coarse
#endif
 
#ifndef APP_WRAPPER_FOR_get_monotonic_coarse
#define APP_WRAPPER_FOR_get_monotonic_coarse
FUNCTION_WRAPPER(get_monotonic_coarse, (), {
    kern_printk("get_monotonic_coarse is invoked.\n");
    PRE_WRAPPER_FUNC();
    struct timespec ret = get_monotonic_coarse();
    POST_WRAPPER_FUNC();
    kern_printk("get_monotonic_coarse returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_make_request
#define APP_WRAPPER_FOR_generic_make_request
#endif
 
#ifndef APP_WRAPPER_FOR_generic_make_request
#define APP_WRAPPER_FOR_generic_make_request
FUNCTION_WRAPPER_VOID(generic_make_request, (struct bio *bio), {
    WRAP_RECURSIVE(bio);
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
    kern_printk("generic_make_request is invoked.\n");
    PRE_WRAPPER_FUNC(bio);
    generic_make_request(bio);
    POST_WRAPPER_FUNC(bio);
    kern_printk("generic_make_request returned.\n");
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
})
#endif


#ifndef KERN_ADDR_strrchr
#define APP_WRAPPER_FOR_strrchr
#endif
 
#ifndef APP_WRAPPER_FOR_strrchr
#define APP_WRAPPER_FOR_strrchr
FUNCTION_WRAPPER(strrchr, (const char *_arg1, int _arg2), {
    kern_printk("strrchr is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    char *ret = strrchr(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("strrchr returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_do_settimeofday
#define APP_WRAPPER_FOR_do_settimeofday
#endif
 
#ifndef APP_WRAPPER_FOR_do_settimeofday
#define APP_WRAPPER_FOR_do_settimeofday
FUNCTION_WRAPPER(do_settimeofday, (const struct timespec *tv), {
    kern_printk("do_settimeofday is invoked.\n");
    PRE_WRAPPER_FUNC(tv);
    int ret = do_settimeofday(tv);
    POST_WRAPPER_FUNC(tv);
    kern_printk("do_settimeofday returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sff_softreset
#define APP_WRAPPER_FOR_ata_sff_softreset
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_softreset
#define APP_WRAPPER_FOR_ata_sff_softreset
FUNCTION_WRAPPER(ata_sff_softreset, (struct ata_link *link, unsigned int *classes, unsigned long deadline), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    kern_printk("ata_sff_softreset is invoked.\n");
    PRE_WRAPPER_FUNC(link, classes, deadline);
    int ret = ata_sff_softreset(link, classes, deadline);
    POST_WRAPPER_FUNC(link, classes, deadline);
    kern_printk("ata_sff_softreset returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    return ret;
})
#endif


#ifndef KERN_ADDR_init_per_zone_wmark_min
#define APP_WRAPPER_FOR_init_per_zone_wmark_min
#endif
 
#ifndef APP_WRAPPER_FOR_init_per_zone_wmark_min
#define APP_WRAPPER_FOR_init_per_zone_wmark_min
FUNCTION_WRAPPER(init_per_zone_wmark_min, (), {
    kern_printk("init_per_zone_wmark_min is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = init_per_zone_wmark_min();
    POST_WRAPPER_FUNC();
    kern_printk("init_per_zone_wmark_min returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_default_scale_freq_power
#define APP_WRAPPER_FOR_default_scale_freq_power
#endif
 
#ifndef APP_WRAPPER_FOR_default_scale_freq_power
#define APP_WRAPPER_FOR_default_scale_freq_power
FUNCTION_WRAPPER(default_scale_freq_power, (struct sched_domain *sd, int cpu), {
    kern_printk("default_scale_freq_power is invoked.\n");
    PRE_WRAPPER_FUNC(sd, cpu);
    long ret = default_scale_freq_power(sd, cpu);
    POST_WRAPPER_FUNC(sd, cpu);
    kern_printk("default_scale_freq_power returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_unregister_netdevice_notifier
#define APP_WRAPPER_FOR_unregister_netdevice_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_netdevice_notifier
#define APP_WRAPPER_FOR_unregister_netdevice_notifier
FUNCTION_WRAPPER(unregister_netdevice_notifier, (struct notifier_block *nb), {
    WRAP_RECURSIVE(nb);
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    kern_printk("unregister_netdevice_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(nb);
    int ret = unregister_netdevice_notifier(nb);
    POST_WRAPPER_FUNC(nb);
    kern_printk("unregister_netdevice_notifier returned.\n");
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_printk_all_partitions
#define APP_WRAPPER_FOR_printk_all_partitions
#endif
 
#ifndef APP_WRAPPER_FOR_printk_all_partitions
#define APP_WRAPPER_FOR_printk_all_partitions
FUNCTION_WRAPPER_VOID(printk_all_partitions, (), {
    kern_printk("printk_all_partitions is invoked.\n");
    PRE_WRAPPER_FUNC();
    printk_all_partitions();
    POST_WRAPPER_FUNC();
    kern_printk("printk_all_partitions returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_get_interrupt_pin
#define APP_WRAPPER_FOR_pci_get_interrupt_pin
#endif
 
#ifndef APP_WRAPPER_FOR_pci_get_interrupt_pin
#define APP_WRAPPER_FOR_pci_get_interrupt_pin
FUNCTION_WRAPPER(pci_get_interrupt_pin, (struct pci_dev *dev, struct pci_dev **bridge), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(bridge);
    TRACES_IF_WATCHPOINT(bridge);
    SCAN_HEAD_FUNC(struct pci_dev *)(*(TO_UNWATCHED_ADDRESS(bridge)));
    kern_printk("pci_get_interrupt_pin is invoked.\n");
    PRE_WRAPPER_FUNC(dev, bridge);
    int ret = pci_get_interrupt_pin(dev, bridge);
    POST_WRAPPER_FUNC(dev, bridge);
    kern_printk("pci_get_interrupt_pin returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(bridge);
    SCAN_HEAD_FUNC(struct pci_dev *)(*(TO_UNWATCHED_ADDRESS(bridge)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_get_slot
#define APP_WRAPPER_FOR_pci_get_slot
#endif
 
#ifndef APP_WRAPPER_FOR_pci_get_slot
#define APP_WRAPPER_FOR_pci_get_slot
FUNCTION_WRAPPER(pci_get_slot, (struct pci_bus *bus, unsigned int devfn), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_get_slot is invoked.\n");
    PRE_WRAPPER_FUNC(bus, devfn);
    struct pci_dev *ret = pci_get_slot(bus, devfn);
    POST_WRAPPER_FUNC(bus, devfn);
    kern_printk("pci_get_slot returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_lapic_get_maxlvt
#define APP_WRAPPER_FOR_lapic_get_maxlvt
#endif
 
#ifndef APP_WRAPPER_FOR_lapic_get_maxlvt
#define APP_WRAPPER_FOR_lapic_get_maxlvt
FUNCTION_WRAPPER(lapic_get_maxlvt, (), {
    kern_printk("lapic_get_maxlvt is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = lapic_get_maxlvt();
    POST_WRAPPER_FUNC();
    kern_printk("lapic_get_maxlvt returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_synchronize_rcu_expedited
#define APP_WRAPPER_FOR_synchronize_rcu_expedited
#endif
 
#ifndef APP_WRAPPER_FOR_synchronize_rcu_expedited
#define APP_WRAPPER_FOR_synchronize_rcu_expedited
FUNCTION_WRAPPER_VOID(synchronize_rcu_expedited, (), {
    kern_printk("synchronize_rcu_expedited is invoked.\n");
    PRE_WRAPPER_FUNC();
    synchronize_rcu_expedited();
    POST_WRAPPER_FUNC();
    kern_printk("synchronize_rcu_expedited returned.\n");
})
#endif


#ifndef KERN_ADDR_elv_drain_elevator
#define APP_WRAPPER_FOR_elv_drain_elevator
#endif
 
#ifndef APP_WRAPPER_FOR_elv_drain_elevator
#define APP_WRAPPER_FOR_elv_drain_elevator
FUNCTION_WRAPPER_VOID(elv_drain_elevator, (struct request_queue *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("elv_drain_elevator is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    elv_drain_elevator(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("elv_drain_elevator returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_disk_get_part
#define APP_WRAPPER_FOR_disk_get_part
#endif
 
#ifndef APP_WRAPPER_FOR_disk_get_part
#define APP_WRAPPER_FOR_disk_get_part
FUNCTION_WRAPPER(disk_get_part, (struct gendisk *disk, int partno), {
    WRAP_RECURSIVE(disk);
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    kern_printk("disk_get_part is invoked.\n");
    PRE_WRAPPER_FUNC(disk, partno);
    struct hd_struct *ret = disk_get_part(disk, partno);
    POST_WRAPPER_FUNC(disk, partno);
    kern_printk("disk_get_part returned.\n");
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_read_cache_page
#define APP_WRAPPER_FOR_read_cache_page
#endif
 
#ifndef APP_WRAPPER_FOR_read_cache_page
#define APP_WRAPPER_FOR_read_cache_page
FUNCTION_WRAPPER(read_cache_page, (struct address_space *mapping, unsigned long index, filler_t *filler, void *data), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    WRAP_FUNCTION(filler);
    kern_printk("read_cache_page is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, index, filler, data);
    struct page *ret = read_cache_page(mapping, index, filler, data);
    POST_WRAPPER_FUNC(mapping, index, filler, data);
    kern_printk("read_cache_page returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___add_pages
#define APP_WRAPPER_FOR___add_pages
#endif
 
#ifndef APP_WRAPPER_FOR___add_pages
#define APP_WRAPPER_FOR___add_pages
FUNCTION_WRAPPER(__add_pages, (int nid, struct zone *zone, unsigned long start_pfn, unsigned long nr_pages), {
    WRAP_RECURSIVE(zone);
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    kern_printk("__add_pages is invoked.\n");
    PRE_WRAPPER_FUNC(nid, zone, start_pfn, nr_pages);
    int ret = __add_pages(nid, zone, start_pfn, nr_pages);
    POST_WRAPPER_FUNC(nid, zone, start_pfn, nr_pages);
    kern_printk("__add_pages returned.\n");
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    return ret;
})
#endif


#ifndef KERN_ADDR___online_page_set_limits
#define APP_WRAPPER_FOR___online_page_set_limits
#endif
 
#ifndef APP_WRAPPER_FOR___online_page_set_limits
#define APP_WRAPPER_FOR___online_page_set_limits
FUNCTION_WRAPPER_VOID(__online_page_set_limits, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("__online_page_set_limits is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    __online_page_set_limits(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("__online_page_set_limits returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_bitmap_allocate_region
#define APP_WRAPPER_FOR_bitmap_allocate_region
#endif
 
#ifndef APP_WRAPPER_FOR_bitmap_allocate_region
#define APP_WRAPPER_FOR_bitmap_allocate_region
FUNCTION_WRAPPER(bitmap_allocate_region, (unsigned long *bitmap, int pos, int order), {
    kern_printk("bitmap_allocate_region is invoked.\n");
    PRE_WRAPPER_FUNC(bitmap, pos, order);
    int ret = bitmap_allocate_region(bitmap, pos, order);
    POST_WRAPPER_FUNC(bitmap, pos, order);
    kern_printk("bitmap_allocate_region returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_qdisc_class_hash_destroy
#define APP_WRAPPER_FOR_qdisc_class_hash_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_qdisc_class_hash_destroy
#define APP_WRAPPER_FOR_qdisc_class_hash_destroy
FUNCTION_WRAPPER_VOID(qdisc_class_hash_destroy, (struct Qdisc_class_hash *_arg1), {
    kern_printk("qdisc_class_hash_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    qdisc_class_hash_destroy(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("qdisc_class_hash_destroy returned.\n");
})
#endif


#ifndef KERN_ADDR_do_sys_poll
#define APP_WRAPPER_FOR_do_sys_poll
#endif
 
#ifndef APP_WRAPPER_FOR_do_sys_poll
#define APP_WRAPPER_FOR_do_sys_poll
FUNCTION_WRAPPER(do_sys_poll, (struct pollfd *ufds, unsigned int nfds, struct timespec *end_time), {
    kern_printk("do_sys_poll is invoked.\n");
    PRE_WRAPPER_FUNC(ufds, nfds, end_time);
    int ret = do_sys_poll(ufds, nfds, end_time);
    POST_WRAPPER_FUNC(ufds, nfds, end_time);
    kern_printk("do_sys_poll returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_iov_iter_copy_from_user_atomic
#define APP_WRAPPER_FOR_iov_iter_copy_from_user_atomic
#endif
 
#ifndef APP_WRAPPER_FOR_iov_iter_copy_from_user_atomic
#define APP_WRAPPER_FOR_iov_iter_copy_from_user_atomic
FUNCTION_WRAPPER(iov_iter_copy_from_user_atomic, (struct page *page, struct iov_iter *i, unsigned long offset, size_t bytes), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("iov_iter_copy_from_user_atomic is invoked.\n");
    PRE_WRAPPER_FUNC(page, i, offset, bytes);
    size_t ret = iov_iter_copy_from_user_atomic(page, i, offset, bytes);
    POST_WRAPPER_FUNC(page, i, offset, bytes);
    kern_printk("iov_iter_copy_from_user_atomic returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_recvmmsg
#define APP_WRAPPER_FOR_compat_sys_recvmmsg
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_recvmmsg
#define APP_WRAPPER_FOR_compat_sys_recvmmsg
FUNCTION_WRAPPER(compat_sys_recvmmsg, (int fd, struct compat_mmsghdr *mmsg, unsigned int vlen, unsigned int flags, struct compat_timespec *timeout), {
    kern_printk("compat_sys_recvmmsg is invoked.\n");
    PRE_WRAPPER_FUNC(fd, mmsg, vlen, flags, timeout);
    long ret = compat_sys_recvmmsg(fd, mmsg, vlen, flags, timeout);
    POST_WRAPPER_FUNC(fd, mmsg, vlen, flags, timeout);
    kern_printk("compat_sys_recvmmsg returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_rb_last
#define APP_WRAPPER_FOR_rb_last
#endif
 
#ifndef APP_WRAPPER_FOR_rb_last
#define APP_WRAPPER_FOR_rb_last
FUNCTION_WRAPPER(rb_last, (const struct rb_root *_arg1), {
    kern_printk("rb_last is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct rb_node *ret = rb_last(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("rb_last returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_bio_map_user
#define APP_WRAPPER_FOR_bio_map_user
#endif
 
#ifndef APP_WRAPPER_FOR_bio_map_user
#define APP_WRAPPER_FOR_bio_map_user
FUNCTION_WRAPPER(bio_map_user, (struct request_queue *_arg1, struct block_device *_arg2, unsigned long _arg3, unsigned int _arg4, int _arg5, gfp_t _arg6), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("bio_map_user is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
    struct bio *ret = bio_map_user(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
    kern_printk("bio_map_user returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dma_common_mmap
#define APP_WRAPPER_FOR_dma_common_mmap
#endif
 
#ifndef APP_WRAPPER_FOR_dma_common_mmap
#define APP_WRAPPER_FOR_dma_common_mmap
FUNCTION_WRAPPER(dma_common_mmap, (struct device *dev, struct vm_area_struct *vma, void *cpu_addr, dma_addr_t dma_addr, size_t size), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("dma_common_mmap is invoked.\n");
    PRE_WRAPPER_FUNC(dev, vma, cpu_addr, dma_addr, size);
    int ret = dma_common_mmap(dev, vma, cpu_addr, dma_addr, size);
    POST_WRAPPER_FUNC(dev, vma, cpu_addr, dma_addr, size);
    kern_printk("dma_common_mmap returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_genphy_update_link
#define APP_WRAPPER_FOR_genphy_update_link
#endif
 
#ifndef APP_WRAPPER_FOR_genphy_update_link
#define APP_WRAPPER_FOR_genphy_update_link
FUNCTION_WRAPPER(genphy_update_link, (struct phy_device *phydev), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    kern_printk("genphy_update_link is invoked.\n");
    PRE_WRAPPER_FUNC(phydev);
    int ret = genphy_update_link(phydev);
    POST_WRAPPER_FUNC(phydev);
    kern_printk("genphy_update_link returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dmam_pool_destroy
#define APP_WRAPPER_FOR_dmam_pool_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_dmam_pool_destroy
#define APP_WRAPPER_FOR_dmam_pool_destroy
FUNCTION_WRAPPER_VOID(dmam_pool_destroy, (struct dma_pool *pool), {
    kern_printk("dmam_pool_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(pool);
    dmam_pool_destroy(pool);
    POST_WRAPPER_FUNC(pool);
    kern_printk("dmam_pool_destroy returned.\n");
})
#endif


#ifndef KERN_ADDR_percpu_free_rwsem
#define APP_WRAPPER_FOR_percpu_free_rwsem
#endif
 
#ifndef APP_WRAPPER_FOR_percpu_free_rwsem
#define APP_WRAPPER_FOR_percpu_free_rwsem
FUNCTION_WRAPPER_VOID(percpu_free_rwsem, (struct percpu_rw_semaphore *_arg1), {
    kern_printk("percpu_free_rwsem is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    percpu_free_rwsem(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("percpu_free_rwsem returned.\n");
})
#endif


#ifndef KERN_ADDR_remove_mapping
#define APP_WRAPPER_FOR_remove_mapping
#endif
 
#ifndef APP_WRAPPER_FOR_remove_mapping
#define APP_WRAPPER_FOR_remove_mapping
FUNCTION_WRAPPER(remove_mapping, (struct address_space *mapping, struct page *page), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("remove_mapping is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, page);
    int ret = remove_mapping(mapping, page);
    POST_WRAPPER_FUNC(mapping, page);
    kern_printk("remove_mapping returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dma_generic_alloc_coherent
#define APP_WRAPPER_FOR_dma_generic_alloc_coherent
#endif
 
#ifndef APP_WRAPPER_FOR_dma_generic_alloc_coherent
#define APP_WRAPPER_FOR_dma_generic_alloc_coherent
FUNCTION_WRAPPER(dma_generic_alloc_coherent, (struct device *dev, size_t size, dma_addr_t *dma_addr, gfp_t flag, struct dma_attrs *attrs), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dma_generic_alloc_coherent is invoked.\n");
    PRE_WRAPPER_FUNC(dev, size, dma_addr, flag, attrs);
    void *ret = dma_generic_alloc_coherent(dev, size, dma_addr, flag, attrs);
    POST_WRAPPER_FUNC(dev, size, dma_addr, flag, attrs);
    kern_printk("dma_generic_alloc_coherent returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_no_poll
#define APP_WRAPPER_FOR_sock_no_poll
#endif
 
#ifndef APP_WRAPPER_FOR_sock_no_poll
#define APP_WRAPPER_FOR_sock_no_poll
FUNCTION_WRAPPER(sock_no_poll, (struct file *_arg1, struct socket *_arg2, struct poll_table_struct *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct poll_table_struct)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("sock_no_poll is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = sock_no_poll(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("sock_no_poll returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct poll_table_struct)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_dev_printk
#define APP_WRAPPER_FOR_ata_dev_printk
#endif
 
#ifndef APP_WRAPPER_FOR_ata_dev_printk
#define APP_WRAPPER_FOR_ata_dev_printk
FUNCTION_WRAPPER(ata_dev_printk, (const struct ata_device *dev, const char *level, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct ata_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    // TODO: variadic arguments
    kern_printk("ata_dev_printk is invoked.\n");
    PRE_WRAPPER_FUNC(dev, level, fmt);
    int ret = ata_dev_printk(dev, level, fmt);
    POST_WRAPPER_FUNC(dev, level, fmt);
    kern_printk("ata_dev_printk returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct ata_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_find_inode_number
#define APP_WRAPPER_FOR_find_inode_number
#endif
 
#ifndef APP_WRAPPER_FOR_find_inode_number
#define APP_WRAPPER_FOR_find_inode_number
FUNCTION_WRAPPER(find_inode_number, (struct dentry *_arg1, struct qstr *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("find_inode_number is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    ino_t ret = find_inode_number(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("find_inode_number returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ilookup5_nowait
#define APP_WRAPPER_FOR_ilookup5_nowait
#endif
 
#ifndef APP_WRAPPER_FOR_ilookup5_nowait
#define APP_WRAPPER_FOR_ilookup5_nowait
FUNCTION_WRAPPER(ilookup5_nowait, (struct super_block *sb, unsigned long hashval, int (*test)(struct inode *, void *), void *data), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    WRAP_FUNCTION(test);
    kern_printk("ilookup5_nowait is invoked.\n");
    PRE_WRAPPER_FUNC(sb, hashval, test, data);
    struct inode *ret = ilookup5_nowait(sb, hashval, test, data);
    POST_WRAPPER_FUNC(sb, hashval, test, data);
    kern_printk("ilookup5_nowait returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sched_fork
#define APP_WRAPPER_FOR_sched_fork
#endif
 
#ifndef APP_WRAPPER_FOR_sched_fork
#define APP_WRAPPER_FOR_sched_fork
FUNCTION_WRAPPER_VOID(sched_fork, (struct task_struct *p), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("sched_fork is invoked.\n");
    PRE_WRAPPER_FUNC(p);
    sched_fork(p);
    POST_WRAPPER_FUNC(p);
    kern_printk("sched_fork returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
})
#endif


#ifndef KERN_ADDR_class_interface_register
#define APP_WRAPPER_FOR_class_interface_register
#endif
 
#ifndef APP_WRAPPER_FOR_class_interface_register
#define APP_WRAPPER_FOR_class_interface_register
FUNCTION_WRAPPER(class_interface_register, (struct class_interface *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct class_interface)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("class_interface_register is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = class_interface_register(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("class_interface_register returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct class_interface)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR___symbol_get
#define APP_WRAPPER_FOR___symbol_get
#endif
 
#ifndef APP_WRAPPER_FOR___symbol_get
#define APP_WRAPPER_FOR___symbol_get
FUNCTION_WRAPPER(__symbol_get, (const char *symbol), {
    kern_printk("__symbol_get is invoked.\n");
    PRE_WRAPPER_FUNC(symbol);
    void *ret = __symbol_get(symbol);
    POST_WRAPPER_FUNC(symbol);
    kern_printk("__symbol_get returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_bio_integrity_prep
#define APP_WRAPPER_FOR_bio_integrity_prep
#endif
 
#ifndef APP_WRAPPER_FOR_bio_integrity_prep
#define APP_WRAPPER_FOR_bio_integrity_prep
FUNCTION_WRAPPER(bio_integrity_prep, (struct bio *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bio_integrity_prep is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = bio_integrity_prep(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("bio_integrity_prep returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_do_sigaction
#define APP_WRAPPER_FOR_do_sigaction
#endif
 
#ifndef APP_WRAPPER_FOR_do_sigaction
#define APP_WRAPPER_FOR_do_sigaction
FUNCTION_WRAPPER(do_sigaction, (int _arg1, struct k_sigaction *_arg2, struct k_sigaction *_arg3), {
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct k_sigaction)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct k_sigaction)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("do_sigaction is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = do_sigaction(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("do_sigaction returned.\n");
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct k_sigaction)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct k_sigaction)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vsnprintf
#define APP_WRAPPER_FOR_vsnprintf
#endif
 
#ifndef APP_WRAPPER_FOR_vsnprintf
#define APP_WRAPPER_FOR_vsnprintf
FUNCTION_WRAPPER(vsnprintf, (char *buf, size_t size, const char *fmt, va_list args), {
    kern_printk("vsnprintf is invoked.\n");
    PRE_WRAPPER_FUNC(buf, size, fmt, args);
    int ret = vsnprintf(buf, size, fmt, args);
    POST_WRAPPER_FUNC(buf, size, fmt, args);
    kern_printk("vsnprintf returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_queue_dma_pad
#define APP_WRAPPER_FOR_blk_queue_dma_pad
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_dma_pad
#define APP_WRAPPER_FOR_blk_queue_dma_pad
FUNCTION_WRAPPER_VOID(blk_queue_dma_pad, (struct request_queue *_arg1, unsigned int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_queue_dma_pad is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    blk_queue_dma_pad(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_queue_dma_pad returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_copy_user_handle_tail
#define APP_WRAPPER_FOR_copy_user_handle_tail
#endif
 
#ifndef APP_WRAPPER_FOR_copy_user_handle_tail
#define APP_WRAPPER_FOR_copy_user_handle_tail
FUNCTION_WRAPPER(copy_user_handle_tail, (char *to, char *from, unsigned int len, unsigned int zerorest), {
    kern_printk("copy_user_handle_tail is invoked.\n");
    PRE_WRAPPER_FUNC(to, from, len, zerorest);
    long ret = copy_user_handle_tail(to, from, len, zerorest);
    POST_WRAPPER_FUNC(to, from, len, zerorest);
    kern_printk("copy_user_handle_tail returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_x2apic_icr_write
#define APP_WRAPPER_FOR_x2apic_icr_write
#endif
 
#ifndef APP_WRAPPER_FOR_x2apic_icr_write
#define APP_WRAPPER_FOR_x2apic_icr_write
FUNCTION_WRAPPER_VOID(x2apic_icr_write, (u32 low, u32 id), {
    kern_printk("x2apic_icr_write is invoked.\n");
    PRE_WRAPPER_FUNC(low, id);
    x2apic_icr_write(low, id);
    POST_WRAPPER_FUNC(low, id);
    kern_printk("x2apic_icr_write returned.\n");
})
#endif


#ifndef KERN_ADDR___raw_notifier_call_chain
#define APP_WRAPPER_FOR___raw_notifier_call_chain
#endif
 
#ifndef APP_WRAPPER_FOR___raw_notifier_call_chain
#define APP_WRAPPER_FOR___raw_notifier_call_chain
FUNCTION_WRAPPER(__raw_notifier_call_chain, (struct raw_notifier_head *nh, unsigned long val, void *v, int nr_to_call, int *nr_calls), {
    WRAP_RECURSIVE(nh);
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct raw_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    kern_printk("__raw_notifier_call_chain is invoked.\n");
    PRE_WRAPPER_FUNC(nh, val, v, nr_to_call, nr_calls);
    int ret = __raw_notifier_call_chain(nh, val, v, nr_to_call, nr_calls);
    POST_WRAPPER_FUNC(nh, val, v, nr_to_call, nr_calls);
    kern_printk("__raw_notifier_call_chain returned.\n");
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct raw_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_bus_assign_resources
#define APP_WRAPPER_FOR_pci_bus_assign_resources
#endif
 
#ifndef APP_WRAPPER_FOR_pci_bus_assign_resources
#define APP_WRAPPER_FOR_pci_bus_assign_resources
FUNCTION_WRAPPER_VOID(pci_bus_assign_resources, (const struct pci_bus *bus), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(const struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_bus_assign_resources is invoked.\n");
    PRE_WRAPPER_FUNC(bus);
    pci_bus_assign_resources(bus);
    POST_WRAPPER_FUNC(bus);
    kern_printk("pci_bus_assign_resources returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(const struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
})
#endif


#ifndef KERN_ADDR_dev_set_group
#define APP_WRAPPER_FOR_dev_set_group
#endif
 
#ifndef APP_WRAPPER_FOR_dev_set_group
#define APP_WRAPPER_FOR_dev_set_group
FUNCTION_WRAPPER_VOID(dev_set_group, (struct net_device *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("dev_set_group is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    dev_set_group(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("dev_set_group returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_dm_error
#define APP_WRAPPER_FOR_dm_error
#endif
 
#ifndef APP_WRAPPER_FOR_dm_error
#define APP_WRAPPER_FOR_dm_error
FUNCTION_WRAPPER_VOID(dm_error, (const char *message), {
    kern_printk("dm_error is invoked.\n");
    PRE_WRAPPER_FUNC(message);
    dm_error(message);
    POST_WRAPPER_FUNC(message);
    kern_printk("dm_error returned.\n");
})
#endif


#ifndef KERN_ADDR_getnstime_raw_and_real
#define APP_WRAPPER_FOR_getnstime_raw_and_real
#endif
 
#ifndef APP_WRAPPER_FOR_getnstime_raw_and_real
#define APP_WRAPPER_FOR_getnstime_raw_and_real
FUNCTION_WRAPPER_VOID(getnstime_raw_and_real, (struct timespec *ts_raw, struct timespec *ts_real), {
    kern_printk("getnstime_raw_and_real is invoked.\n");
    PRE_WRAPPER_FUNC(ts_raw, ts_real);
    getnstime_raw_and_real(ts_raw, ts_real);
    POST_WRAPPER_FUNC(ts_raw, ts_real);
    kern_printk("getnstime_raw_and_real returned.\n");
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt8
#define APP_WRAPPER_FOR_invalidate_interrupt8
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt8
#define APP_WRAPPER_FOR_invalidate_interrupt8
FUNCTION_WRAPPER_VOID(invalidate_interrupt8, (), {
    kern_printk("invalidate_interrupt8 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt8();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt8 returned.\n");
})
#endif


#ifndef KERN_ADDR_mount_subtree
#define APP_WRAPPER_FOR_mount_subtree
#endif
 
#ifndef APP_WRAPPER_FOR_mount_subtree
#define APP_WRAPPER_FOR_mount_subtree
FUNCTION_WRAPPER(mount_subtree, (struct vfsmount *mnt, const char *path), {
    WRAP_RECURSIVE(mnt);
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
    kern_printk("mount_subtree is invoked.\n");
    PRE_WRAPPER_FUNC(mnt, path);
    struct dentry *ret = mount_subtree(mnt, path);
    POST_WRAPPER_FUNC(mnt, path);
    kern_printk("mount_subtree returned.\n");
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_netif_skb_features
#define APP_WRAPPER_FOR_netif_skb_features
#endif
 
#ifndef APP_WRAPPER_FOR_netif_skb_features
#define APP_WRAPPER_FOR_netif_skb_features
FUNCTION_WRAPPER(netif_skb_features, (struct sk_buff *skb), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("netif_skb_features is invoked.\n");
    PRE_WRAPPER_FUNC(skb);
    netdev_features_t ret = netif_skb_features(skb);
    POST_WRAPPER_FUNC(skb);
    kern_printk("netif_skb_features returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt0
#define APP_WRAPPER_FOR_invalidate_interrupt0
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt0
#define APP_WRAPPER_FOR_invalidate_interrupt0
FUNCTION_WRAPPER_VOID(invalidate_interrupt0, (), {
    kern_printk("invalidate_interrupt0 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt0();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt0 returned.\n");
})
#endif


#ifndef KERN_ADDR_d_alloc
#define APP_WRAPPER_FOR_d_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_d_alloc
#define APP_WRAPPER_FOR_d_alloc
FUNCTION_WRAPPER(d_alloc, (struct dentry *_arg1, const struct qstr *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("d_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct dentry *ret = d_alloc(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("d_alloc returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt2
#define APP_WRAPPER_FOR_invalidate_interrupt2
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt2
#define APP_WRAPPER_FOR_invalidate_interrupt2
FUNCTION_WRAPPER_VOID(invalidate_interrupt2, (), {
    kern_printk("invalidate_interrupt2 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt2();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt2 returned.\n");
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt3
#define APP_WRAPPER_FOR_invalidate_interrupt3
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt3
#define APP_WRAPPER_FOR_invalidate_interrupt3
FUNCTION_WRAPPER_VOID(invalidate_interrupt3, (), {
    kern_printk("invalidate_interrupt3 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt3();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt3 returned.\n");
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt4
#define APP_WRAPPER_FOR_invalidate_interrupt4
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt4
#define APP_WRAPPER_FOR_invalidate_interrupt4
FUNCTION_WRAPPER_VOID(invalidate_interrupt4, (), {
    kern_printk("invalidate_interrupt4 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt4();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt4 returned.\n");
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt5
#define APP_WRAPPER_FOR_invalidate_interrupt5
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt5
#define APP_WRAPPER_FOR_invalidate_interrupt5
FUNCTION_WRAPPER_VOID(invalidate_interrupt5, (), {
    kern_printk("invalidate_interrupt5 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt5();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt5 returned.\n");
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt6
#define APP_WRAPPER_FOR_invalidate_interrupt6
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt6
#define APP_WRAPPER_FOR_invalidate_interrupt6
FUNCTION_WRAPPER_VOID(invalidate_interrupt6, (), {
    kern_printk("invalidate_interrupt6 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt6();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt6 returned.\n");
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt7
#define APP_WRAPPER_FOR_invalidate_interrupt7
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt7
#define APP_WRAPPER_FOR_invalidate_interrupt7
FUNCTION_WRAPPER_VOID(invalidate_interrupt7, (), {
    kern_printk("invalidate_interrupt7 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt7();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt7 returned.\n");
})
#endif


#ifndef KERN_ADDR_force_sig_info
#define APP_WRAPPER_FOR_force_sig_info
#endif
 
#ifndef APP_WRAPPER_FOR_force_sig_info
#define APP_WRAPPER_FOR_force_sig_info
FUNCTION_WRAPPER(force_sig_info, (int _arg1, struct siginfo *_arg2, struct task_struct *_arg3), {
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("force_sig_info is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = force_sig_info(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("force_sig_info returned.\n");
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_unmapped_area
#define APP_WRAPPER_FOR_unmapped_area
#endif
 
#ifndef APP_WRAPPER_FOR_unmapped_area
#define APP_WRAPPER_FOR_unmapped_area
FUNCTION_WRAPPER(unmapped_area, (struct vm_unmapped_area_info *info), {
    kern_printk("unmapped_area is invoked.\n");
    PRE_WRAPPER_FUNC(info);
    long ret = unmapped_area(info);
    POST_WRAPPER_FUNC(info);
    kern_printk("unmapped_area returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_read_current_timer
#define APP_WRAPPER_FOR_read_current_timer
#endif
 
#ifndef APP_WRAPPER_FOR_read_current_timer
#define APP_WRAPPER_FOR_read_current_timer
FUNCTION_WRAPPER(read_current_timer, (unsigned long *timer_val), {
    kern_printk("read_current_timer is invoked.\n");
    PRE_WRAPPER_FUNC(timer_val);
    int ret = read_current_timer(timer_val);
    POST_WRAPPER_FUNC(timer_val);
    kern_printk("read_current_timer returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___page_cache_alloc
#define APP_WRAPPER_FOR___page_cache_alloc
#endif
 
#ifndef APP_WRAPPER_FOR___page_cache_alloc
#define APP_WRAPPER_FOR___page_cache_alloc
FUNCTION_WRAPPER(__page_cache_alloc, (gfp_t gfp), {
    kern_printk("__page_cache_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(gfp);
    struct page *ret = __page_cache_alloc(gfp);
    POST_WRAPPER_FUNC(gfp);
    kern_printk("__page_cache_alloc returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_nr_running
#define APP_WRAPPER_FOR_nr_running
#endif
 
#ifndef APP_WRAPPER_FOR_nr_running
#define APP_WRAPPER_FOR_nr_running
FUNCTION_WRAPPER(nr_running, (), {
    kern_printk("nr_running is invoked.\n");
    PRE_WRAPPER_FUNC();
    long ret = nr_running();
    POST_WRAPPER_FUNC();
    kern_printk("nr_running returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_tracing_off_permanent
#define APP_WRAPPER_FOR_tracing_off_permanent
#endif
 
#ifndef APP_WRAPPER_FOR_tracing_off_permanent
#define APP_WRAPPER_FOR_tracing_off_permanent
FUNCTION_WRAPPER_VOID(tracing_off_permanent, (), {
    kern_printk("tracing_off_permanent is invoked.\n");
    PRE_WRAPPER_FUNC();
    tracing_off_permanent();
    POST_WRAPPER_FUNC();
    kern_printk("tracing_off_permanent returned.\n");
})
#endif


#ifndef KERN_ADDR_jbd2_journal_try_to_free_buffers
#define APP_WRAPPER_FOR_jbd2_journal_try_to_free_buffers
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_try_to_free_buffers
#define APP_WRAPPER_FOR_jbd2_journal_try_to_free_buffers
FUNCTION_WRAPPER(jbd2_journal_try_to_free_buffers, (journal_t *_arg1, struct page *_arg2, gfp_t _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("jbd2_journal_try_to_free_buffers is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = jbd2_journal_try_to_free_buffers(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("jbd2_journal_try_to_free_buffers returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR__raw_write_lock_bh
#define APP_WRAPPER_FOR__raw_write_lock_bh
#endif
 
#ifndef APP_WRAPPER_FOR__raw_write_lock_bh
#define APP_WRAPPER_FOR__raw_write_lock_bh
FUNCTION_WRAPPER_VOID(_raw_write_lock_bh, (rwlock_t *lock), {
    kern_printk("_raw_write_lock_bh is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    _raw_write_lock_bh(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("_raw_write_lock_bh returned.\n");
})
#endif


#ifndef KERN_ADDR_kmem_cache_create_memcg
#define APP_WRAPPER_FOR_kmem_cache_create_memcg
#endif
 
#ifndef APP_WRAPPER_FOR_kmem_cache_create_memcg
#define APP_WRAPPER_FOR_kmem_cache_create_memcg
FUNCTION_WRAPPER(kmem_cache_create_memcg, (struct mem_cgroup *_arg1, const char *_arg2, size_t _arg3, size_t _arg4, unsigned long _arg5, void (*_arg6)(void *), struct kmem_cache *_arg7), {
    WRAP_FUNCTION(_arg6);
    WRAP_RECURSIVE(_arg7);
    TRACES_IF_WATCHPOINT(_arg7);
    SCAN_HEAD_FUNC(struct kmem_cache)(*(TO_UNWATCHED_ADDRESS(_arg7)));
    kern_printk("kmem_cache_create_memcg is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
    struct kmem_cache *ret = kmem_cache_create_memcg(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
    kern_printk("kmem_cache_create_memcg returned.\n");
    TRACES_IF_WATCHPOINT(_arg7);
    SCAN_HEAD_FUNC(struct kmem_cache)(*(TO_UNWATCHED_ADDRESS(_arg7)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_get_by_flags_rcu
#define APP_WRAPPER_FOR_dev_get_by_flags_rcu
#endif
 
#ifndef APP_WRAPPER_FOR_dev_get_by_flags_rcu
#define APP_WRAPPER_FOR_dev_get_by_flags_rcu
FUNCTION_WRAPPER(dev_get_by_flags_rcu, (struct net *net, unsigned short flags, unsigned short mask), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    kern_printk("dev_get_by_flags_rcu is invoked.\n");
    PRE_WRAPPER_FUNC(net, flags, mask);
    struct net_device *ret = dev_get_by_flags_rcu(net, flags, mask);
    POST_WRAPPER_FUNC(net, flags, mask);
    kern_printk("dev_get_by_flags_rcu returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___raise_softirq_irqoff
#define APP_WRAPPER_FOR___raise_softirq_irqoff
#endif
 
#ifndef APP_WRAPPER_FOR___raise_softirq_irqoff
#define APP_WRAPPER_FOR___raise_softirq_irqoff
FUNCTION_WRAPPER_VOID(__raise_softirq_irqoff, (unsigned int nr), {
    kern_printk("__raise_softirq_irqoff is invoked.\n");
    PRE_WRAPPER_FUNC(nr);
    __raise_softirq_irqoff(nr);
    POST_WRAPPER_FUNC(nr);
    kern_printk("__raise_softirq_irqoff returned.\n");
})
#endif


#ifndef KERN_ADDR_bio_integrity_advance
#define APP_WRAPPER_FOR_bio_integrity_advance
#endif
 
#ifndef APP_WRAPPER_FOR_bio_integrity_advance
#define APP_WRAPPER_FOR_bio_integrity_advance
FUNCTION_WRAPPER_VOID(bio_integrity_advance, (struct bio *_arg1, unsigned int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bio_integrity_advance is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    bio_integrity_advance(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("bio_integrity_advance returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_exit_aio
#define APP_WRAPPER_FOR_exit_aio
#endif
 
#ifndef APP_WRAPPER_FOR_exit_aio
#define APP_WRAPPER_FOR_exit_aio
FUNCTION_WRAPPER_VOID(exit_aio, (struct mm_struct *mm), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    kern_printk("exit_aio is invoked.\n");
    PRE_WRAPPER_FUNC(mm);
    exit_aio(mm);
    POST_WRAPPER_FUNC(mm);
    kern_printk("exit_aio returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
})
#endif


#ifndef KERN_ADDR_acpi_install_address_space_handler
#define APP_WRAPPER_FOR_acpi_install_address_space_handler
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_install_address_space_handler
#define APP_WRAPPER_FOR_acpi_install_address_space_handler
FUNCTION_WRAPPER(acpi_install_address_space_handler, (acpi_handle device, acpi_adr_space_type space_id, acpi_adr_space_handler handler, acpi_adr_space_setup setup, void *context), {
    WRAP_FUNCTION(handler);
    WRAP_FUNCTION(setup);
    kern_printk("acpi_install_address_space_handler is invoked.\n");
    PRE_WRAPPER_FUNC(device, space_id, handler, setup, context);
    acpi_status ret = acpi_install_address_space_handler(device, space_id, handler, setup, context);
    POST_WRAPPER_FUNC(device, space_id, handler, setup, context);
    kern_printk("acpi_install_address_space_handler returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___pci_reset_function
#define APP_WRAPPER_FOR___pci_reset_function
#endif
 
#ifndef APP_WRAPPER_FOR___pci_reset_function
#define APP_WRAPPER_FOR___pci_reset_function
FUNCTION_WRAPPER(__pci_reset_function, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("__pci_reset_function is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = __pci_reset_function(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("__pci_reset_function returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bdi_set_max_ratio
#define APP_WRAPPER_FOR_bdi_set_max_ratio
#endif
 
#ifndef APP_WRAPPER_FOR_bdi_set_max_ratio
#define APP_WRAPPER_FOR_bdi_set_max_ratio
FUNCTION_WRAPPER(bdi_set_max_ratio, (struct backing_dev_info *bdi, unsigned int max_ratio), {
    WRAP_RECURSIVE(bdi);
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
    kern_printk("bdi_set_max_ratio is invoked.\n");
    PRE_WRAPPER_FUNC(bdi, max_ratio);
    int ret = bdi_set_max_ratio(bdi, max_ratio);
    POST_WRAPPER_FUNC(bdi, max_ratio);
    kern_printk("bdi_set_max_ratio returned.\n");
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pid_vnr
#define APP_WRAPPER_FOR_pid_vnr
#endif
 
#ifndef APP_WRAPPER_FOR_pid_vnr
#define APP_WRAPPER_FOR_pid_vnr
FUNCTION_WRAPPER(pid_vnr, (struct pid *pid), {
    WRAP_RECURSIVE(pid);
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
    kern_printk("pid_vnr is invoked.\n");
    PRE_WRAPPER_FUNC(pid);
    pid_t ret = pid_vnr(pid);
    POST_WRAPPER_FUNC(pid);
    kern_printk("pid_vnr returned.\n");
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
    return ret;
})
#endif


#ifndef KERN_ADDR_get_taint
#define APP_WRAPPER_FOR_get_taint
#endif
 
#ifndef APP_WRAPPER_FOR_get_taint
#define APP_WRAPPER_FOR_get_taint
FUNCTION_WRAPPER(get_taint, (), {
    kern_printk("get_taint is invoked.\n");
    PRE_WRAPPER_FUNC();
    long ret = get_taint();
    POST_WRAPPER_FUNC();
    kern_printk("get_taint returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_acs_path_enabled
#define APP_WRAPPER_FOR_pci_acs_path_enabled
#endif
 
#ifndef APP_WRAPPER_FOR_pci_acs_path_enabled
#define APP_WRAPPER_FOR_pci_acs_path_enabled
FUNCTION_WRAPPER(pci_acs_path_enabled, (struct pci_dev *start, struct pci_dev *end, u16 acs_flags), {
    WRAP_RECURSIVE(start);
    TRACES_IF_WATCHPOINT(start);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(start)));
    WRAP_RECURSIVE(end);
    TRACES_IF_WATCHPOINT(end);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(end)));
    kern_printk("pci_acs_path_enabled is invoked.\n");
    PRE_WRAPPER_FUNC(start, end, acs_flags);
    bool ret = pci_acs_path_enabled(start, end, acs_flags);
    POST_WRAPPER_FUNC(start, end, acs_flags);
    kern_printk("pci_acs_path_enabled returned.\n");
    TRACES_IF_WATCHPOINT(start);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(start)));
    TRACES_IF_WATCHPOINT(end);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(end)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sas_sync_probe
#define APP_WRAPPER_FOR_ata_sas_sync_probe
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sas_sync_probe
#define APP_WRAPPER_FOR_ata_sas_sync_probe
FUNCTION_WRAPPER(ata_sas_sync_probe, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_sas_sync_probe is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    int ret = ata_sas_sync_probe(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_sas_sync_probe returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR_scan_unevictable_handler
#define APP_WRAPPER_FOR_scan_unevictable_handler
#endif
 
#ifndef APP_WRAPPER_FOR_scan_unevictable_handler
#define APP_WRAPPER_FOR_scan_unevictable_handler
FUNCTION_WRAPPER(scan_unevictable_handler, (struct ctl_table *_arg1, int _arg2, void *_arg3, size_t *_arg4, loff_t *_arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("scan_unevictable_handler is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = scan_unevictable_handler(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("scan_unevictable_handler returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_scsi_port_error_handler
#define APP_WRAPPER_FOR_ata_scsi_port_error_handler
#endif
 
#ifndef APP_WRAPPER_FOR_ata_scsi_port_error_handler
#define APP_WRAPPER_FOR_ata_scsi_port_error_handler
FUNCTION_WRAPPER_VOID(ata_scsi_port_error_handler, (struct Scsi_Host *host, struct ata_port *ap), {
    WRAP_RECURSIVE(host);
    TRACES_IF_WATCHPOINT(host);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(host)));
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_scsi_port_error_handler is invoked.\n");
    PRE_WRAPPER_FUNC(host, ap);
    ata_scsi_port_error_handler(host, ap);
    POST_WRAPPER_FUNC(host, ap);
    kern_printk("ata_scsi_port_error_handler returned.\n");
    TRACES_IF_WATCHPOINT(host);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(host)));
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_synchronize_sched_expedited
#define APP_WRAPPER_FOR_synchronize_sched_expedited
#endif
 
#ifndef APP_WRAPPER_FOR_synchronize_sched_expedited
#define APP_WRAPPER_FOR_synchronize_sched_expedited
FUNCTION_WRAPPER_VOID(synchronize_sched_expedited, (), {
    kern_printk("synchronize_sched_expedited is invoked.\n");
    PRE_WRAPPER_FUNC();
    synchronize_sched_expedited();
    POST_WRAPPER_FUNC();
    kern_printk("synchronize_sched_expedited returned.\n");
})
#endif


#ifndef KERN_ADDR_shrink_dcache_parent
#define APP_WRAPPER_FOR_shrink_dcache_parent
#endif
 
#ifndef APP_WRAPPER_FOR_shrink_dcache_parent
#define APP_WRAPPER_FOR_shrink_dcache_parent
FUNCTION_WRAPPER_VOID(shrink_dcache_parent, (struct dentry *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("shrink_dcache_parent is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    shrink_dcache_parent(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("shrink_dcache_parent returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_native_init_IRQ
#define APP_WRAPPER_FOR_native_init_IRQ
#endif
 
#ifndef APP_WRAPPER_FOR_native_init_IRQ
#define APP_WRAPPER_FOR_native_init_IRQ
FUNCTION_WRAPPER_VOID(native_init_IRQ, (), {
    kern_printk("native_init_IRQ is invoked.\n");
    PRE_WRAPPER_FUNC();
    native_init_IRQ();
    POST_WRAPPER_FUNC();
    kern_printk("native_init_IRQ returned.\n");
})
#endif


#ifndef KERN_ADDR_dev_get_by_name_rcu
#define APP_WRAPPER_FOR_dev_get_by_name_rcu
#endif
 
#ifndef APP_WRAPPER_FOR_dev_get_by_name_rcu
#define APP_WRAPPER_FOR_dev_get_by_name_rcu
FUNCTION_WRAPPER(dev_get_by_name_rcu, (struct net *net, const char *name), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    kern_printk("dev_get_by_name_rcu is invoked.\n");
    PRE_WRAPPER_FUNC(net, name);
    struct net_device *ret = dev_get_by_name_rcu(net, name);
    POST_WRAPPER_FUNC(net, name);
    kern_printk("dev_get_by_name_rcu returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_srcu_batches_completed
#define APP_WRAPPER_FOR_srcu_batches_completed
#endif
 
#ifndef APP_WRAPPER_FOR_srcu_batches_completed
#define APP_WRAPPER_FOR_srcu_batches_completed
FUNCTION_WRAPPER(srcu_batches_completed, (struct srcu_struct *sp), {
    WRAP_RECURSIVE(sp);
    TRACES_IF_WATCHPOINT(sp);
    SCAN_HEAD_FUNC(struct srcu_struct)(*(TO_UNWATCHED_ADDRESS(sp)));
    kern_printk("srcu_batches_completed is invoked.\n");
    PRE_WRAPPER_FUNC(sp);
    long ret = srcu_batches_completed(sp);
    POST_WRAPPER_FUNC(sp);
    kern_printk("srcu_batches_completed returned.\n");
    TRACES_IF_WATCHPOINT(sp);
    SCAN_HEAD_FUNC(struct srcu_struct)(*(TO_UNWATCHED_ADDRESS(sp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pcim_iounmap_regions
#define APP_WRAPPER_FOR_pcim_iounmap_regions
#endif
 
#ifndef APP_WRAPPER_FOR_pcim_iounmap_regions
#define APP_WRAPPER_FOR_pcim_iounmap_regions
FUNCTION_WRAPPER_VOID(pcim_iounmap_regions, (struct pci_dev *pdev, int mask), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("pcim_iounmap_regions is invoked.\n");
    PRE_WRAPPER_FUNC(pdev, mask);
    pcim_iounmap_regions(pdev, mask);
    POST_WRAPPER_FUNC(pdev, mask);
    kern_printk("pcim_iounmap_regions returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
})
#endif


#ifndef KERN_ADDR_blk_queue_flush
#define APP_WRAPPER_FOR_blk_queue_flush
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_flush
#define APP_WRAPPER_FOR_blk_queue_flush
FUNCTION_WRAPPER_VOID(blk_queue_flush, (struct request_queue *q, unsigned int flush), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    kern_printk("blk_queue_flush is invoked.\n");
    PRE_WRAPPER_FUNC(q, flush);
    blk_queue_flush(q, flush);
    POST_WRAPPER_FUNC(q, flush);
    kern_printk("blk_queue_flush returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
})
#endif


#ifndef KERN_ADDR_get_random_int
#define APP_WRAPPER_FOR_get_random_int
#endif
 
#ifndef APP_WRAPPER_FOR_get_random_int
#define APP_WRAPPER_FOR_get_random_int
FUNCTION_WRAPPER(get_random_int, (), {
    kern_printk("get_random_int is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = get_random_int();
    POST_WRAPPER_FUNC();
    kern_printk("get_random_int returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_mempool_kmalloc
#define APP_WRAPPER_FOR_mempool_kmalloc
#endif
 
#ifndef APP_WRAPPER_FOR_mempool_kmalloc
#define APP_WRAPPER_FOR_mempool_kmalloc
FUNCTION_WRAPPER(mempool_kmalloc, (gfp_t gfp_mask, void *pool_data), {
    kern_printk("mempool_kmalloc is invoked.\n");
    PRE_WRAPPER_FUNC(gfp_mask, pool_data);
    void *ret = mempool_kmalloc(gfp_mask, pool_data);
    POST_WRAPPER_FUNC(gfp_mask, pool_data);
    kern_printk("mempool_kmalloc returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_peek_request
#define APP_WRAPPER_FOR_blk_peek_request
#endif
 
#ifndef APP_WRAPPER_FOR_blk_peek_request
#define APP_WRAPPER_FOR_blk_peek_request
FUNCTION_WRAPPER(blk_peek_request, (struct request_queue *q), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    kern_printk("blk_peek_request is invoked.\n");
    PRE_WRAPPER_FUNC(q);
    struct request *ret = blk_peek_request(q);
    POST_WRAPPER_FUNC(q);
    kern_printk("blk_peek_request returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_bio_integrity_alloc
#define APP_WRAPPER_FOR_bio_integrity_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_bio_integrity_alloc
#define APP_WRAPPER_FOR_bio_integrity_alloc
FUNCTION_WRAPPER(bio_integrity_alloc, (struct bio *_arg1, gfp_t _arg2, unsigned int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bio_integrity_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    struct bio_integrity_payload *ret = bio_integrity_alloc(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("bio_integrity_alloc returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_locks_mandatory_locked
#define APP_WRAPPER_FOR_locks_mandatory_locked
#endif
 
#ifndef APP_WRAPPER_FOR_locks_mandatory_locked
#define APP_WRAPPER_FOR_locks_mandatory_locked
FUNCTION_WRAPPER(locks_mandatory_locked, (struct inode *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("locks_mandatory_locked is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = locks_mandatory_locked(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("locks_mandatory_locked returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_free_pages_and_swap_cache
#define APP_WRAPPER_FOR_free_pages_and_swap_cache
#endif
 
#ifndef APP_WRAPPER_FOR_free_pages_and_swap_cache
#define APP_WRAPPER_FOR_free_pages_and_swap_cache
FUNCTION_WRAPPER_VOID(free_pages_and_swap_cache, (struct page **_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("free_pages_and_swap_cache is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    free_pages_and_swap_cache(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("free_pages_and_swap_cache returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_pci_cfg_access_unlock
#define APP_WRAPPER_FOR_pci_cfg_access_unlock
#endif
 
#ifndef APP_WRAPPER_FOR_pci_cfg_access_unlock
#define APP_WRAPPER_FOR_pci_cfg_access_unlock
FUNCTION_WRAPPER_VOID(pci_cfg_access_unlock, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_cfg_access_unlock is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pci_cfg_access_unlock(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_cfg_access_unlock returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_compat_sys_kexec_load
#define APP_WRAPPER_FOR_compat_sys_kexec_load
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_kexec_load
#define APP_WRAPPER_FOR_compat_sys_kexec_load
FUNCTION_WRAPPER(compat_sys_kexec_load, (unsigned long entry, unsigned long nr_segments, struct compat_kexec_segment *_arg1, unsigned long flags), {
    kern_printk("compat_sys_kexec_load is invoked.\n");
    PRE_WRAPPER_FUNC(entry, nr_segments, _arg1, flags);
    long ret = compat_sys_kexec_load(entry, nr_segments, _arg1, flags);
    POST_WRAPPER_FUNC(entry, nr_segments, _arg1, flags);
    kern_printk("compat_sys_kexec_load returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_kstrtoull_from_user
#define APP_WRAPPER_FOR_kstrtoull_from_user
#endif
 
#ifndef APP_WRAPPER_FOR_kstrtoull_from_user
#define APP_WRAPPER_FOR_kstrtoull_from_user
FUNCTION_WRAPPER(kstrtoull_from_user, (const char *s, size_t count, unsigned int base, unsigned long long *res), {
    kern_printk("kstrtoull_from_user is invoked.\n");
    PRE_WRAPPER_FUNC(s, count, base, res);
    int ret = kstrtoull_from_user(s, count, base, res);
    POST_WRAPPER_FUNC(s, count, base, res);
    kern_printk("kstrtoull_from_user returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_bmdma_qc_prep
#define APP_WRAPPER_FOR_ata_bmdma_qc_prep
#endif
 
#ifndef APP_WRAPPER_FOR_ata_bmdma_qc_prep
#define APP_WRAPPER_FOR_ata_bmdma_qc_prep
FUNCTION_WRAPPER_VOID(ata_bmdma_qc_prep, (struct ata_queued_cmd *qc), {
    WRAP_RECURSIVE(qc);
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    kern_printk("ata_bmdma_qc_prep is invoked.\n");
    PRE_WRAPPER_FUNC(qc);
    ata_bmdma_qc_prep(qc);
    POST_WRAPPER_FUNC(qc);
    kern_printk("ata_bmdma_qc_prep returned.\n");
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
})
#endif


#ifndef KERN_ADDR_task_tgid_nr_ns
#define APP_WRAPPER_FOR_task_tgid_nr_ns
#endif
 
#ifndef APP_WRAPPER_FOR_task_tgid_nr_ns
#define APP_WRAPPER_FOR_task_tgid_nr_ns
FUNCTION_WRAPPER(task_tgid_nr_ns, (struct task_struct *tsk, struct pid_namespace *ns), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("task_tgid_nr_ns is invoked.\n");
    PRE_WRAPPER_FUNC(tsk, ns);
    pid_t ret = task_tgid_nr_ns(tsk, ns);
    POST_WRAPPER_FUNC(tsk, ns);
    kern_printk("task_tgid_nr_ns returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_class_interface_unregister
#define APP_WRAPPER_FOR_class_interface_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_class_interface_unregister
#define APP_WRAPPER_FOR_class_interface_unregister
FUNCTION_WRAPPER_VOID(class_interface_unregister, (struct class_interface *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct class_interface)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("class_interface_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    class_interface_unregister(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("class_interface_unregister returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct class_interface)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_qid_eq
#define APP_WRAPPER_FOR_qid_eq
#endif
 
#ifndef APP_WRAPPER_FOR_qid_eq
#define APP_WRAPPER_FOR_qid_eq
FUNCTION_WRAPPER(qid_eq, (struct kqid left, struct kqid right), {
    kern_printk("qid_eq is invoked.\n");
    PRE_WRAPPER_FUNC(left, right);
    bool ret = qid_eq(left, right);
    POST_WRAPPER_FUNC(left, right);
    kern_printk("qid_eq returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_check_used_features
#define APP_WRAPPER_FOR_jbd2_journal_check_used_features
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_check_used_features
#define APP_WRAPPER_FOR_jbd2_journal_check_used_features
FUNCTION_WRAPPER(jbd2_journal_check_used_features, (journal_t *_arg1, unsigned long _arg2, unsigned long _arg3, unsigned long _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_check_used_features is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = jbd2_journal_check_used_features(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("jbd2_journal_check_used_features returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sysctl_min_unmapped_ratio_sysctl_handler
#define APP_WRAPPER_FOR_sysctl_min_unmapped_ratio_sysctl_handler
#endif
 
#ifndef APP_WRAPPER_FOR_sysctl_min_unmapped_ratio_sysctl_handler
#define APP_WRAPPER_FOR_sysctl_min_unmapped_ratio_sysctl_handler
FUNCTION_WRAPPER(sysctl_min_unmapped_ratio_sysctl_handler, (struct ctl_table *_arg1, int _arg2, void *_arg3, size_t *_arg4, loff_t *_arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("sysctl_min_unmapped_ratio_sysctl_handler is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = sysctl_min_unmapped_ratio_sysctl_handler(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("sysctl_min_unmapped_ratio_sysctl_handler returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_switch_revoke_table
#define APP_WRAPPER_FOR_jbd2_journal_switch_revoke_table
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_switch_revoke_table
#define APP_WRAPPER_FOR_jbd2_journal_switch_revoke_table
FUNCTION_WRAPPER_VOID(jbd2_journal_switch_revoke_table, (journal_t *journal), {
    WRAP_RECURSIVE(journal);
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    kern_printk("jbd2_journal_switch_revoke_table is invoked.\n");
    PRE_WRAPPER_FUNC(journal);
    jbd2_journal_switch_revoke_table(journal);
    POST_WRAPPER_FUNC(journal);
    kern_printk("jbd2_journal_switch_revoke_table returned.\n");
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
})
#endif


#ifndef KERN_ADDR_set_pm_idle_to_default
#define APP_WRAPPER_FOR_set_pm_idle_to_default
#endif
 
#ifndef APP_WRAPPER_FOR_set_pm_idle_to_default
#define APP_WRAPPER_FOR_set_pm_idle_to_default
FUNCTION_WRAPPER(set_pm_idle_to_default, (), {
    kern_printk("set_pm_idle_to_default is invoked.\n");
    PRE_WRAPPER_FUNC();
    bool ret = set_pm_idle_to_default();
    POST_WRAPPER_FUNC();
    kern_printk("set_pm_idle_to_default returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_simple_empty
#define APP_WRAPPER_FOR_simple_empty
#endif
 
#ifndef APP_WRAPPER_FOR_simple_empty
#define APP_WRAPPER_FOR_simple_empty
FUNCTION_WRAPPER(simple_empty, (struct dentry *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("simple_empty is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = simple_empty(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("simple_empty returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_track_pfn_insert
#define APP_WRAPPER_FOR_track_pfn_insert
#endif
 
#ifndef APP_WRAPPER_FOR_track_pfn_insert
#define APP_WRAPPER_FOR_track_pfn_insert
FUNCTION_WRAPPER(track_pfn_insert, (struct vm_area_struct *vma, pgprot_t *prot, unsigned long pfn), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("track_pfn_insert is invoked.\n");
    PRE_WRAPPER_FUNC(vma, prot, pfn);
    int ret = track_pfn_insert(vma, prot, pfn);
    POST_WRAPPER_FUNC(vma, prot, pfn);
    kern_printk("track_pfn_insert returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_dev_suspend_late
#define APP_WRAPPER_FOR_acpi_dev_suspend_late
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_dev_suspend_late
#define APP_WRAPPER_FOR_acpi_dev_suspend_late
FUNCTION_WRAPPER(acpi_dev_suspend_late, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("acpi_dev_suspend_late is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = acpi_dev_suspend_late(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("acpi_dev_suspend_late returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_seq_vprintf
#define APP_WRAPPER_FOR_seq_vprintf
#endif
 
#ifndef APP_WRAPPER_FOR_seq_vprintf
#define APP_WRAPPER_FOR_seq_vprintf
FUNCTION_WRAPPER(seq_vprintf, (struct seq_file *_arg1, const char *_arg2, va_list args), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("seq_vprintf is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, args);
    int ret = seq_vprintf(_arg1, _arg2, args);
    POST_WRAPPER_FUNC(_arg1, _arg2, args);
    kern_printk("seq_vprintf returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR___timer_stats_timer_set_start_info
#define APP_WRAPPER_FOR___timer_stats_timer_set_start_info
#endif
 
#ifndef APP_WRAPPER_FOR___timer_stats_timer_set_start_info
#define APP_WRAPPER_FOR___timer_stats_timer_set_start_info
FUNCTION_WRAPPER_VOID(__timer_stats_timer_set_start_info, (struct timer_list *timer, void *addr), {
    WRAP_RECURSIVE(timer);
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(timer)));
    kern_printk("__timer_stats_timer_set_start_info is invoked.\n");
    PRE_WRAPPER_FUNC(timer, addr);
    __timer_stats_timer_set_start_info(timer, addr);
    POST_WRAPPER_FUNC(timer, addr);
    kern_printk("__timer_stats_timer_set_start_info returned.\n");
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(timer)));
})
#endif


#ifndef KERN_ADDR_vma_wants_writenotify
#define APP_WRAPPER_FOR_vma_wants_writenotify
#endif
 
#ifndef APP_WRAPPER_FOR_vma_wants_writenotify
#define APP_WRAPPER_FOR_vma_wants_writenotify
FUNCTION_WRAPPER(vma_wants_writenotify, (struct vm_area_struct *vma), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("vma_wants_writenotify is invoked.\n");
    PRE_WRAPPER_FUNC(vma);
    int ret = vma_wants_writenotify(vma);
    POST_WRAPPER_FUNC(vma);
    kern_printk("vma_wants_writenotify returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR___cleanup_sighand
#define APP_WRAPPER_FOR___cleanup_sighand
#endif
 
#ifndef APP_WRAPPER_FOR___cleanup_sighand
#define APP_WRAPPER_FOR___cleanup_sighand
FUNCTION_WRAPPER_VOID(__cleanup_sighand, (struct sighand_struct *_arg1), {
    kern_printk("__cleanup_sighand is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    __cleanup_sighand(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__cleanup_sighand returned.\n");
})
#endif


#ifndef KERN_ADDR_dm_uevent_add
#define APP_WRAPPER_FOR_dm_uevent_add
#endif
 
#ifndef APP_WRAPPER_FOR_dm_uevent_add
#define APP_WRAPPER_FOR_dm_uevent_add
FUNCTION_WRAPPER_VOID(dm_uevent_add, (struct mapped_device *md, struct list_head *elist), {
    kern_printk("dm_uevent_add is invoked.\n");
    PRE_WRAPPER_FUNC(md, elist);
    dm_uevent_add(md, elist);
    POST_WRAPPER_FUNC(md, elist);
    kern_printk("dm_uevent_add returned.\n");
})
#endif


#ifndef KERN_ADDR_page_zero_new_buffers
#define APP_WRAPPER_FOR_page_zero_new_buffers
#endif
 
#ifndef APP_WRAPPER_FOR_page_zero_new_buffers
#define APP_WRAPPER_FOR_page_zero_new_buffers
FUNCTION_WRAPPER_VOID(page_zero_new_buffers, (struct page *page, unsigned int from, unsigned int to), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("page_zero_new_buffers is invoked.\n");
    PRE_WRAPPER_FUNC(page, from, to);
    page_zero_new_buffers(page, from, to);
    POST_WRAPPER_FUNC(page, from, to);
    kern_printk("page_zero_new_buffers returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_d_alloc_name
#define APP_WRAPPER_FOR_d_alloc_name
#endif
 
#ifndef APP_WRAPPER_FOR_d_alloc_name
#define APP_WRAPPER_FOR_d_alloc_name
FUNCTION_WRAPPER(d_alloc_name, (struct dentry *_arg1, const char *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("d_alloc_name is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct dentry *ret = d_alloc_name(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("d_alloc_name returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_get_current_resources
#define APP_WRAPPER_FOR_acpi_get_current_resources
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_current_resources
#define APP_WRAPPER_FOR_acpi_get_current_resources
FUNCTION_WRAPPER(acpi_get_current_resources, (acpi_handle device, struct acpi_buffer *ret_buffer), {
    kern_printk("acpi_get_current_resources is invoked.\n");
    PRE_WRAPPER_FUNC(device, ret_buffer);
    acpi_status ret = acpi_get_current_resources(device, ret_buffer);
    POST_WRAPPER_FUNC(device, ret_buffer);
    kern_printk("acpi_get_current_resources returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_res_counter_read_u64
#define APP_WRAPPER_FOR_res_counter_read_u64
#endif
 
#ifndef APP_WRAPPER_FOR_res_counter_read_u64
#define APP_WRAPPER_FOR_res_counter_read_u64
FUNCTION_WRAPPER(res_counter_read_u64, (struct res_counter *counter, int member), {
    kern_printk("res_counter_read_u64 is invoked.\n");
    PRE_WRAPPER_FUNC(counter, member);
    u64 ret = res_counter_read_u64(counter, member);
    POST_WRAPPER_FUNC(counter, member);
    kern_printk("res_counter_read_u64 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_eth_header
#define APP_WRAPPER_FOR_eth_header
#endif
 
#ifndef APP_WRAPPER_FOR_eth_header
#define APP_WRAPPER_FOR_eth_header
FUNCTION_WRAPPER(eth_header, (struct sk_buff *skb, struct net_device *dev, unsigned short type, const void *daddr, const void *saddr, unsigned int len), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("eth_header is invoked.\n");
    PRE_WRAPPER_FUNC(skb, dev, type, daddr, saddr, len);
    int ret = eth_header(skb, dev, type, daddr, saddr, len);
    POST_WRAPPER_FUNC(skb, dev, type, daddr, saddr, len);
    kern_printk("eth_header returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_ap_acpi_handle
#define APP_WRAPPER_FOR_ata_ap_acpi_handle
#endif
 
#ifndef APP_WRAPPER_FOR_ata_ap_acpi_handle
#define APP_WRAPPER_FOR_ata_ap_acpi_handle
FUNCTION_WRAPPER(ata_ap_acpi_handle, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_ap_acpi_handle is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    acpi_handle ret = ata_ap_acpi_handle(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_ap_acpi_handle returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_down_read
#define APP_WRAPPER_FOR_down_read
#endif
 
#ifndef APP_WRAPPER_FOR_down_read
#define APP_WRAPPER_FOR_down_read
FUNCTION_WRAPPER_VOID(down_read, (struct rw_semaphore *sem), {
    kern_printk("down_read is invoked.\n");
    PRE_WRAPPER_FUNC(sem);
    down_read(sem);
    POST_WRAPPER_FUNC(sem);
    kern_printk("down_read returned.\n");
})
#endif


#ifndef KERN_ADDR___wake_up_locked_key
#define APP_WRAPPER_FOR___wake_up_locked_key
#endif
 
#ifndef APP_WRAPPER_FOR___wake_up_locked_key
#define APP_WRAPPER_FOR___wake_up_locked_key
FUNCTION_WRAPPER_VOID(__wake_up_locked_key, (wait_queue_head_t *q, unsigned int mode, void *key), {
    kern_printk("__wake_up_locked_key is invoked.\n");
    PRE_WRAPPER_FUNC(q, mode, key);
    __wake_up_locked_key(q, mode, key);
    POST_WRAPPER_FUNC(q, mode, key);
    kern_printk("__wake_up_locked_key returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_dev_irq_flags
#define APP_WRAPPER_FOR_acpi_dev_irq_flags
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_dev_irq_flags
#define APP_WRAPPER_FOR_acpi_dev_irq_flags
FUNCTION_WRAPPER(acpi_dev_irq_flags, (u8 triggering, u8 polarity, u8 shareable), {
    kern_printk("acpi_dev_irq_flags is invoked.\n");
    PRE_WRAPPER_FUNC(triggering, polarity, shareable);
    long ret = acpi_dev_irq_flags(triggering, polarity, shareable);
    POST_WRAPPER_FUNC(triggering, polarity, shareable);
    kern_printk("acpi_dev_irq_flags returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_note_interrupt
#define APP_WRAPPER_FOR_note_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_note_interrupt
#define APP_WRAPPER_FOR_note_interrupt
FUNCTION_WRAPPER_VOID(note_interrupt, (unsigned int irq, struct irq_desc *desc, irqreturn_t action_ret), {
    WRAP_RECURSIVE(desc);
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct irq_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
    kern_printk("note_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC(irq, desc, action_ret);
    note_interrupt(irq, desc, action_ret);
    POST_WRAPPER_FUNC(irq, desc, action_ret);
    kern_printk("note_interrupt returned.\n");
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct irq_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
})
#endif


#ifndef KERN_ADDR_cancel_delayed_work_sync
#define APP_WRAPPER_FOR_cancel_delayed_work_sync
#endif
 
#ifndef APP_WRAPPER_FOR_cancel_delayed_work_sync
#define APP_WRAPPER_FOR_cancel_delayed_work_sync
FUNCTION_WRAPPER(cancel_delayed_work_sync, (struct delayed_work *dwork), {
    WRAP_RECURSIVE(dwork);
    TRACES_IF_WATCHPOINT(dwork);
    SCAN_HEAD_FUNC(struct delayed_work)(*(TO_UNWATCHED_ADDRESS(dwork)));
    kern_printk("cancel_delayed_work_sync is invoked.\n");
    PRE_WRAPPER_FUNC(dwork);
    bool ret = cancel_delayed_work_sync(dwork);
    POST_WRAPPER_FUNC(dwork);
    kern_printk("cancel_delayed_work_sync returned.\n");
    TRACES_IF_WATCHPOINT(dwork);
    SCAN_HEAD_FUNC(struct delayed_work)(*(TO_UNWATCHED_ADDRESS(dwork)));
    return ret;
})
#endif


#ifndef KERN_ADDR_unregister_cpu_under_node
#define APP_WRAPPER_FOR_unregister_cpu_under_node
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_cpu_under_node
#define APP_WRAPPER_FOR_unregister_cpu_under_node
FUNCTION_WRAPPER(unregister_cpu_under_node, (unsigned int cpu, unsigned int nid), {
    kern_printk("unregister_cpu_under_node is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, nid);
    int ret = unregister_cpu_under_node(cpu, nid);
    POST_WRAPPER_FUNC(cpu, nid);
    kern_printk("unregister_cpu_under_node returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_find_pid_ns
#define APP_WRAPPER_FOR_find_pid_ns
#endif
 
#ifndef APP_WRAPPER_FOR_find_pid_ns
#define APP_WRAPPER_FOR_find_pid_ns
FUNCTION_WRAPPER(find_pid_ns, (int nr, struct pid_namespace *ns), {
    kern_printk("find_pid_ns is invoked.\n");
    PRE_WRAPPER_FUNC(nr, ns);
    struct pid *ret = find_pid_ns(nr, ns);
    POST_WRAPPER_FUNC(nr, ns);
    kern_printk("find_pid_ns returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___scm_send
#define APP_WRAPPER_FOR___scm_send
#endif
 
#ifndef APP_WRAPPER_FOR___scm_send
#define APP_WRAPPER_FOR___scm_send
FUNCTION_WRAPPER(__scm_send, (struct socket *sock, struct msghdr *msg, struct scm_cookie *scm), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    WRAP_RECURSIVE(scm);
    TRACES_IF_WATCHPOINT(scm);
    SCAN_HEAD_FUNC(struct scm_cookie)(*(TO_UNWATCHED_ADDRESS(scm)));
    kern_printk("__scm_send is invoked.\n");
    PRE_WRAPPER_FUNC(sock, msg, scm);
    int ret = __scm_send(sock, msg, scm);
    POST_WRAPPER_FUNC(sock, msg, scm);
    kern_printk("__scm_send returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    TRACES_IF_WATCHPOINT(scm);
    SCAN_HEAD_FUNC(struct scm_cookie)(*(TO_UNWATCHED_ADDRESS(scm)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pm_generic_freeze_noirq
#define APP_WRAPPER_FOR_pm_generic_freeze_noirq
#endif
 
#ifndef APP_WRAPPER_FOR_pm_generic_freeze_noirq
#define APP_WRAPPER_FOR_pm_generic_freeze_noirq
FUNCTION_WRAPPER(pm_generic_freeze_noirq, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pm_generic_freeze_noirq is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pm_generic_freeze_noirq(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pm_generic_freeze_noirq returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bdev_read_only
#define APP_WRAPPER_FOR_bdev_read_only
#endif
 
#ifndef APP_WRAPPER_FOR_bdev_read_only
#define APP_WRAPPER_FOR_bdev_read_only
FUNCTION_WRAPPER(bdev_read_only, (struct block_device *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bdev_read_only is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = bdev_read_only(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("bdev_read_only returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_copy_semundo
#define APP_WRAPPER_FOR_copy_semundo
#endif
 
#ifndef APP_WRAPPER_FOR_copy_semundo
#define APP_WRAPPER_FOR_copy_semundo
FUNCTION_WRAPPER(copy_semundo, (unsigned long clone_flags, struct task_struct *tsk), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("copy_semundo is invoked.\n");
    PRE_WRAPPER_FUNC(clone_flags, tsk);
    int ret = copy_semundo(clone_flags, tsk);
    POST_WRAPPER_FUNC(clone_flags, tsk);
    kern_printk("copy_semundo returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_prandom_u32_state
#define APP_WRAPPER_FOR_prandom_u32_state
#endif
 
#ifndef APP_WRAPPER_FOR_prandom_u32_state
#define APP_WRAPPER_FOR_prandom_u32_state
FUNCTION_WRAPPER(prandom_u32_state, (struct rnd_state *_arg1), {
    kern_printk("prandom_u32_state is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    u32 ret = prandom_u32_state(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("prandom_u32_state returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_set_task_comm
#define APP_WRAPPER_FOR_set_task_comm
#endif
 
#ifndef APP_WRAPPER_FOR_set_task_comm
#define APP_WRAPPER_FOR_set_task_comm
FUNCTION_WRAPPER_VOID(set_task_comm, (struct task_struct *tsk, char *from), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("set_task_comm is invoked.\n");
    PRE_WRAPPER_FUNC(tsk, from);
    set_task_comm(tsk, from);
    POST_WRAPPER_FUNC(tsk, from);
    kern_printk("set_task_comm returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
})
#endif


#ifndef KERN_ADDR_sched_rt_can_attach
#define APP_WRAPPER_FOR_sched_rt_can_attach
#endif
 
#ifndef APP_WRAPPER_FOR_sched_rt_can_attach
#define APP_WRAPPER_FOR_sched_rt_can_attach
FUNCTION_WRAPPER(sched_rt_can_attach, (struct task_group *tg, struct task_struct *tsk), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("sched_rt_can_attach is invoked.\n");
    PRE_WRAPPER_FUNC(tg, tsk);
    int ret = sched_rt_can_attach(tg, tsk);
    POST_WRAPPER_FUNC(tg, tsk);
    kern_printk("sched_rt_can_attach returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ida_init
#define APP_WRAPPER_FOR_ida_init
#endif
 
#ifndef APP_WRAPPER_FOR_ida_init
#define APP_WRAPPER_FOR_ida_init
FUNCTION_WRAPPER_VOID(ida_init, (struct ida *ida), {
    WRAP_RECURSIVE(ida);
    TRACES_IF_WATCHPOINT(ida);
    SCAN_HEAD_FUNC(struct ida)(*(TO_UNWATCHED_ADDRESS(ida)));
    kern_printk("ida_init is invoked.\n");
    PRE_WRAPPER_FUNC(ida);
    ida_init(ida);
    POST_WRAPPER_FUNC(ida);
    kern_printk("ida_init returned.\n");
    TRACES_IF_WATCHPOINT(ida);
    SCAN_HEAD_FUNC(struct ida)(*(TO_UNWATCHED_ADDRESS(ida)));
})
#endif


#ifndef KERN_ADDR_input_scancode_to_scalar
#define APP_WRAPPER_FOR_input_scancode_to_scalar
#endif
 
#ifndef APP_WRAPPER_FOR_input_scancode_to_scalar
#define APP_WRAPPER_FOR_input_scancode_to_scalar
FUNCTION_WRAPPER(input_scancode_to_scalar, (const struct input_keymap_entry *ke, unsigned int *scancode), {
    kern_printk("input_scancode_to_scalar is invoked.\n");
    PRE_WRAPPER_FUNC(ke, scancode);
    int ret = input_scancode_to_scalar(ke, scancode);
    POST_WRAPPER_FUNC(ke, scancode);
    kern_printk("input_scancode_to_scalar returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sched_group_rt_period
#define APP_WRAPPER_FOR_sched_group_rt_period
#endif
 
#ifndef APP_WRAPPER_FOR_sched_group_rt_period
#define APP_WRAPPER_FOR_sched_group_rt_period
FUNCTION_WRAPPER(sched_group_rt_period, (struct task_group *tg), {
    kern_printk("sched_group_rt_period is invoked.\n");
    PRE_WRAPPER_FUNC(tg);
    long ret = sched_group_rt_period(tg);
    POST_WRAPPER_FUNC(tg);
    kern_printk("sched_group_rt_period returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___hw_addr_init
#define APP_WRAPPER_FOR___hw_addr_init
#endif
 
#ifndef APP_WRAPPER_FOR___hw_addr_init
#define APP_WRAPPER_FOR___hw_addr_init
FUNCTION_WRAPPER_VOID(__hw_addr_init, (struct netdev_hw_addr_list *list), {
    kern_printk("__hw_addr_init is invoked.\n");
    PRE_WRAPPER_FUNC(list);
    __hw_addr_init(list);
    POST_WRAPPER_FUNC(list);
    kern_printk("__hw_addr_init returned.\n");
})
#endif


#ifndef KERN_ADDR___vma_link_rb
#define APP_WRAPPER_FOR___vma_link_rb
#endif
 
#ifndef APP_WRAPPER_FOR___vma_link_rb
#define APP_WRAPPER_FOR___vma_link_rb
FUNCTION_WRAPPER_VOID(__vma_link_rb, (struct mm_struct *_arg1, struct vm_area_struct *_arg2, struct rb_node **_arg3, struct rb_node *_arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("__vma_link_rb is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    __vma_link_rb(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("__vma_link_rb returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_prop_fraction_percpu
#define APP_WRAPPER_FOR_prop_fraction_percpu
#endif
 
#ifndef APP_WRAPPER_FOR_prop_fraction_percpu
#define APP_WRAPPER_FOR_prop_fraction_percpu
FUNCTION_WRAPPER_VOID(prop_fraction_percpu, (struct prop_descriptor *pd, struct prop_local_percpu *pl, long *numerator, long *denominator), {
    WRAP_RECURSIVE(pd);
    TRACES_IF_WATCHPOINT(pd);
    SCAN_HEAD_FUNC(struct prop_descriptor)(*(TO_UNWATCHED_ADDRESS(pd)));
    kern_printk("prop_fraction_percpu is invoked.\n");
    PRE_WRAPPER_FUNC(pd, pl, numerator, denominator);
    prop_fraction_percpu(pd, pl, numerator, denominator);
    POST_WRAPPER_FUNC(pd, pl, numerator, denominator);
    kern_printk("prop_fraction_percpu returned.\n");
    TRACES_IF_WATCHPOINT(pd);
    SCAN_HEAD_FUNC(struct prop_descriptor)(*(TO_UNWATCHED_ADDRESS(pd)));
})
#endif


#ifndef KERN_ADDR_ioprio_best
#define APP_WRAPPER_FOR_ioprio_best
#endif
 
#ifndef APP_WRAPPER_FOR_ioprio_best
#define APP_WRAPPER_FOR_ioprio_best
FUNCTION_WRAPPER(ioprio_best, (unsigned short aprio, unsigned short bprio), {
    kern_printk("ioprio_best is invoked.\n");
    PRE_WRAPPER_FUNC(aprio, bprio);
    int ret = ioprio_best(aprio, bprio);
    POST_WRAPPER_FUNC(aprio, bprio);
    kern_printk("ioprio_best returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_uc_init
#define APP_WRAPPER_FOR_dev_uc_init
#endif
 
#ifndef APP_WRAPPER_FOR_dev_uc_init
#define APP_WRAPPER_FOR_dev_uc_init
FUNCTION_WRAPPER_VOID(dev_uc_init, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_uc_init is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    dev_uc_init(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_uc_init returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_set_curr_task
#define APP_WRAPPER_FOR_set_curr_task
#endif
 
#ifndef APP_WRAPPER_FOR_set_curr_task
#define APP_WRAPPER_FOR_set_curr_task
FUNCTION_WRAPPER_VOID(set_curr_task, (int cpu, struct task_struct *p), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("set_curr_task is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, p);
    set_curr_task(cpu, p);
    POST_WRAPPER_FUNC(cpu, p);
    kern_printk("set_curr_task returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
})
#endif


#ifndef KERN_ADDR_acpi_register_ioapic
#define APP_WRAPPER_FOR_acpi_register_ioapic
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_register_ioapic
#define APP_WRAPPER_FOR_acpi_register_ioapic
FUNCTION_WRAPPER(acpi_register_ioapic, (acpi_handle handle, u64 phys_addr, u32 gsi_base), {
    kern_printk("acpi_register_ioapic is invoked.\n");
    PRE_WRAPPER_FUNC(handle, phys_addr, gsi_base);
    int ret = acpi_register_ioapic(handle, phys_addr, gsi_base);
    POST_WRAPPER_FUNC(handle, phys_addr, gsi_base);
    kern_printk("acpi_register_ioapic returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_phy_start_aneg
#define APP_WRAPPER_FOR_phy_start_aneg
#endif
 
#ifndef APP_WRAPPER_FOR_phy_start_aneg
#define APP_WRAPPER_FOR_phy_start_aneg
FUNCTION_WRAPPER(phy_start_aneg, (struct phy_device *phydev), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    kern_printk("phy_start_aneg is invoked.\n");
    PRE_WRAPPER_FUNC(phydev);
    int ret = phy_start_aneg(phydev);
    POST_WRAPPER_FUNC(phydev);
    kern_printk("phy_start_aneg returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    return ret;
})
#endif


#ifndef KERN_ADDR___hw_addr_unsync
#define APP_WRAPPER_FOR___hw_addr_unsync
#endif
 
#ifndef APP_WRAPPER_FOR___hw_addr_unsync
#define APP_WRAPPER_FOR___hw_addr_unsync
FUNCTION_WRAPPER_VOID(__hw_addr_unsync, (struct netdev_hw_addr_list *to_list, struct netdev_hw_addr_list *from_list, int addr_len), {
    kern_printk("__hw_addr_unsync is invoked.\n");
    PRE_WRAPPER_FUNC(to_list, from_list, addr_len);
    __hw_addr_unsync(to_list, from_list, addr_len);
    POST_WRAPPER_FUNC(to_list, from_list, addr_len);
    kern_printk("__hw_addr_unsync returned.\n");
})
#endif


#ifndef KERN_ADDR_module_put
#define APP_WRAPPER_FOR_module_put
#endif
 
#ifndef APP_WRAPPER_FOR_module_put
#define APP_WRAPPER_FOR_module_put
FUNCTION_WRAPPER_VOID(module_put, (struct module *module), {
    WRAP_RECURSIVE(module);
    TRACES_IF_WATCHPOINT(module);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(module)));
    kern_printk("module_put is invoked.\n");
    PRE_WRAPPER_FUNC(module);
    module_put(module);
    POST_WRAPPER_FUNC(module);
    kern_printk("module_put returned.\n");
    TRACES_IF_WATCHPOINT(module);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(module)));
})
#endif


#ifndef KERN_ADDR___blk_end_request_err
#define APP_WRAPPER_FOR___blk_end_request_err
#endif
 
#ifndef APP_WRAPPER_FOR___blk_end_request_err
#define APP_WRAPPER_FOR___blk_end_request_err
FUNCTION_WRAPPER(__blk_end_request_err, (struct request *rq, int error), {
    WRAP_RECURSIVE(rq);
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    kern_printk("__blk_end_request_err is invoked.\n");
    PRE_WRAPPER_FUNC(rq, error);
    bool ret = __blk_end_request_err(rq, error);
    POST_WRAPPER_FUNC(rq, error);
    kern_printk("__blk_end_request_err returned.\n");
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    return ret;
})
#endif


#ifndef KERN_ADDR_arch_init_ideal_nops
#define APP_WRAPPER_FOR_arch_init_ideal_nops
#endif
 
#ifndef APP_WRAPPER_FOR_arch_init_ideal_nops
#define APP_WRAPPER_FOR_arch_init_ideal_nops
FUNCTION_WRAPPER_VOID(arch_init_ideal_nops, (), {
    kern_printk("arch_init_ideal_nops is invoked.\n");
    PRE_WRAPPER_FUNC();
    arch_init_ideal_nops();
    POST_WRAPPER_FUNC();
    kern_printk("arch_init_ideal_nops returned.\n");
})
#endif


#ifndef KERN_ADDR_set_memory_nx
#define APP_WRAPPER_FOR_set_memory_nx
#endif
 
#ifndef APP_WRAPPER_FOR_set_memory_nx
#define APP_WRAPPER_FOR_set_memory_nx
FUNCTION_WRAPPER(set_memory_nx, (unsigned long addr, int numpages), {
    kern_printk("set_memory_nx is invoked.\n");
    PRE_WRAPPER_FUNC(addr, numpages);
    int ret = set_memory_nx(addr, numpages);
    POST_WRAPPER_FUNC(addr, numpages);
    kern_printk("set_memory_nx returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___dev_getfirstbyhwtype
#define APP_WRAPPER_FOR___dev_getfirstbyhwtype
#endif
 
#ifndef APP_WRAPPER_FOR___dev_getfirstbyhwtype
#define APP_WRAPPER_FOR___dev_getfirstbyhwtype
FUNCTION_WRAPPER(__dev_getfirstbyhwtype, (struct net *net, unsigned short type), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    kern_printk("__dev_getfirstbyhwtype is invoked.\n");
    PRE_WRAPPER_FUNC(net, type);
    struct net_device *ret = __dev_getfirstbyhwtype(net, type);
    POST_WRAPPER_FUNC(net, type);
    kern_printk("__dev_getfirstbyhwtype returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_arch_disable_smp_support
#define APP_WRAPPER_FOR_arch_disable_smp_support
#endif
 
#ifndef APP_WRAPPER_FOR_arch_disable_smp_support
#define APP_WRAPPER_FOR_arch_disable_smp_support
FUNCTION_WRAPPER_VOID(arch_disable_smp_support, (), {
    kern_printk("arch_disable_smp_support is invoked.\n");
    PRE_WRAPPER_FUNC();
    arch_disable_smp_support();
    POST_WRAPPER_FUNC();
    kern_printk("arch_disable_smp_support returned.\n");
})
#endif


#ifndef KERN_ADDR_paging_init
#define APP_WRAPPER_FOR_paging_init
#endif
 
#ifndef APP_WRAPPER_FOR_paging_init
#define APP_WRAPPER_FOR_paging_init
FUNCTION_WRAPPER_VOID(paging_init, (), {
    kern_printk("paging_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    paging_init();
    POST_WRAPPER_FUNC();
    kern_printk("paging_init returned.\n");
})
#endif


#ifndef KERN_ADDR_pnp_release_card_device
#define APP_WRAPPER_FOR_pnp_release_card_device
#endif
 
#ifndef APP_WRAPPER_FOR_pnp_release_card_device
#define APP_WRAPPER_FOR_pnp_release_card_device
FUNCTION_WRAPPER_VOID(pnp_release_card_device, (struct pnp_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pnp_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pnp_release_card_device is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pnp_release_card_device(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pnp_release_card_device returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pnp_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_scm_fp_dup
#define APP_WRAPPER_FOR_scm_fp_dup
#endif
 
#ifndef APP_WRAPPER_FOR_scm_fp_dup
#define APP_WRAPPER_FOR_scm_fp_dup
FUNCTION_WRAPPER(scm_fp_dup, (struct scm_fp_list *fpl), {
    kern_printk("scm_fp_dup is invoked.\n");
    PRE_WRAPPER_FUNC(fpl);
    struct scm_fp_list *ret = scm_fp_dup(fpl);
    POST_WRAPPER_FUNC(fpl);
    kern_printk("scm_fp_dup returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_devm_free_irq
#define APP_WRAPPER_FOR_devm_free_irq
#endif
 
#ifndef APP_WRAPPER_FOR_devm_free_irq
#define APP_WRAPPER_FOR_devm_free_irq
FUNCTION_WRAPPER_VOID(devm_free_irq, (struct device *dev, unsigned int irq, void *dev_id), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("devm_free_irq is invoked.\n");
    PRE_WRAPPER_FUNC(dev, irq, dev_id);
    devm_free_irq(dev, irq, dev_id);
    POST_WRAPPER_FUNC(dev, irq, dev_id);
    kern_printk("devm_free_irq returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_acpi_pm_device_sleep_state
#define APP_WRAPPER_FOR_acpi_pm_device_sleep_state
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_pm_device_sleep_state
#define APP_WRAPPER_FOR_acpi_pm_device_sleep_state
FUNCTION_WRAPPER(acpi_pm_device_sleep_state, (struct device *_arg1, int *_arg2, int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("acpi_pm_device_sleep_state is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = acpi_pm_device_sleep_state(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("acpi_pm_device_sleep_state returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kthreadd
#define APP_WRAPPER_FOR_kthreadd
#endif
 
#ifndef APP_WRAPPER_FOR_kthreadd
#define APP_WRAPPER_FOR_kthreadd
FUNCTION_WRAPPER(kthreadd, (void *unused), {
    kern_printk("kthreadd is invoked.\n");
    PRE_WRAPPER_FUNC(unused);
    int ret = kthreadd(unused);
    POST_WRAPPER_FUNC(unused);
    kern_printk("kthreadd returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_swiotlb_print_info
#define APP_WRAPPER_FOR_swiotlb_print_info
#endif
 
#ifndef APP_WRAPPER_FOR_swiotlb_print_info
#define APP_WRAPPER_FOR_swiotlb_print_info
FUNCTION_WRAPPER_VOID(swiotlb_print_info, (), {
    kern_printk("swiotlb_print_info is invoked.\n");
    PRE_WRAPPER_FUNC();
    swiotlb_print_info();
    POST_WRAPPER_FUNC();
    kern_printk("swiotlb_print_info returned.\n");
})
#endif


#ifndef KERN_ADDR_posix_acl_init
#define APP_WRAPPER_FOR_posix_acl_init
#endif
 
#ifndef APP_WRAPPER_FOR_posix_acl_init
#define APP_WRAPPER_FOR_posix_acl_init
FUNCTION_WRAPPER_VOID(posix_acl_init, (struct posix_acl *_arg1, int _arg2), {
    kern_printk("posix_acl_init is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    posix_acl_init(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("posix_acl_init returned.\n");
})
#endif


#ifndef KERN_ADDR_handle_level_irq
#define APP_WRAPPER_FOR_handle_level_irq
#endif
 
#ifndef APP_WRAPPER_FOR_handle_level_irq
#define APP_WRAPPER_FOR_handle_level_irq
FUNCTION_WRAPPER_VOID(handle_level_irq, (unsigned int irq, struct irq_desc *desc), {
    WRAP_RECURSIVE(desc);
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct irq_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
    kern_printk("handle_level_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq, desc);
    handle_level_irq(irq, desc);
    POST_WRAPPER_FUNC(irq, desc);
    kern_printk("handle_level_irq returned.\n");
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct irq_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
})
#endif


#ifndef KERN_ADDR_neigh_for_each
#define APP_WRAPPER_FOR_neigh_for_each
#endif
 
#ifndef APP_WRAPPER_FOR_neigh_for_each
#define APP_WRAPPER_FOR_neigh_for_each
FUNCTION_WRAPPER_VOID(neigh_for_each, (struct neigh_table *tbl, void (*cb)(struct neighbour *, void *), void *cookie), {
    WRAP_RECURSIVE(tbl);
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    WRAP_FUNCTION(cb);
    kern_printk("neigh_for_each is invoked.\n");
    PRE_WRAPPER_FUNC(tbl, cb, cookie);
    neigh_for_each(tbl, cb, cookie);
    POST_WRAPPER_FUNC(tbl, cb, cookie);
    kern_printk("neigh_for_each returned.\n");
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
})
#endif


#ifndef KERN_ADDR_pci_fixup_cardbus
#define APP_WRAPPER_FOR_pci_fixup_cardbus
#endif
 
#ifndef APP_WRAPPER_FOR_pci_fixup_cardbus
#define APP_WRAPPER_FOR_pci_fixup_cardbus
FUNCTION_WRAPPER_VOID(pci_fixup_cardbus, (struct pci_bus *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("pci_fixup_cardbus is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    pci_fixup_cardbus(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("pci_fixup_cardbus returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_ata_sff_qc_issue
#define APP_WRAPPER_FOR_ata_sff_qc_issue
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_qc_issue
#define APP_WRAPPER_FOR_ata_sff_qc_issue
FUNCTION_WRAPPER(ata_sff_qc_issue, (struct ata_queued_cmd *qc), {
    WRAP_RECURSIVE(qc);
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    kern_printk("ata_sff_qc_issue is invoked.\n");
    PRE_WRAPPER_FUNC(qc);
    int ret = ata_sff_qc_issue(qc);
    POST_WRAPPER_FUNC(qc);
    kern_printk("ata_sff_qc_issue returned.\n");
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_isa_irq_to_gsi
#define APP_WRAPPER_FOR_acpi_isa_irq_to_gsi
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_isa_irq_to_gsi
#define APP_WRAPPER_FOR_acpi_isa_irq_to_gsi
FUNCTION_WRAPPER(acpi_isa_irq_to_gsi, (unsigned int isa_irq, u32 *gsi), {
    kern_printk("acpi_isa_irq_to_gsi is invoked.\n");
    PRE_WRAPPER_FUNC(isa_irq, gsi);
    int ret = acpi_isa_irq_to_gsi(isa_irq, gsi);
    POST_WRAPPER_FUNC(isa_irq, gsi);
    kern_printk("acpi_isa_irq_to_gsi returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_next_zones_zonelist
#define APP_WRAPPER_FOR_next_zones_zonelist
#endif
 
#ifndef APP_WRAPPER_FOR_next_zones_zonelist
#define APP_WRAPPER_FOR_next_zones_zonelist
FUNCTION_WRAPPER(next_zones_zonelist, (struct zoneref *z, enum zone_type highest_zoneidx, nodemask_t *nodes, struct zone **zone), {
    WRAP_RECURSIVE(z);
    TRACES_IF_WATCHPOINT(z);
    SCAN_HEAD_FUNC(struct zoneref)(*(TO_UNWATCHED_ADDRESS(z)));
    WRAP_RECURSIVE(zone);
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone *)(*(TO_UNWATCHED_ADDRESS(zone)));
    kern_printk("next_zones_zonelist is invoked.\n");
    PRE_WRAPPER_FUNC(z, highest_zoneidx, nodes, zone);
    struct zoneref *ret = next_zones_zonelist(z, highest_zoneidx, nodes, zone);
    POST_WRAPPER_FUNC(z, highest_zoneidx, nodes, zone);
    kern_printk("next_zones_zonelist returned.\n");
    TRACES_IF_WATCHPOINT(z);
    SCAN_HEAD_FUNC(struct zoneref)(*(TO_UNWATCHED_ADDRESS(z)));
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone *)(*(TO_UNWATCHED_ADDRESS(zone)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_copy_pte_range
#define APP_WRAPPER_FOR_copy_pte_range
#endif
 
#ifndef APP_WRAPPER_FOR_copy_pte_range
#define APP_WRAPPER_FOR_copy_pte_range
FUNCTION_WRAPPER(copy_pte_range, (struct mm_struct *dst_mm, struct mm_struct *src_mm, pmd_t *dst_pmd, pmd_t *src_pmd, struct vm_area_struct *vma, unsigned long addr, unsigned long end), {
    WRAP_RECURSIVE(dst_mm);
    TRACES_IF_WATCHPOINT(dst_mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(dst_mm)));
    WRAP_RECURSIVE(src_mm);
    TRACES_IF_WATCHPOINT(src_mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(src_mm)));
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("copy_pte_range is invoked.\n");
    PRE_WRAPPER_FUNC(dst_mm, src_mm, dst_pmd, src_pmd, vma, addr, end);
    int ret = copy_pte_range(dst_mm, src_mm, dst_pmd, src_pmd, vma, addr, end);
    POST_WRAPPER_FUNC(dst_mm, src_mm, dst_pmd, src_pmd, vma, addr, end);
    kern_printk("copy_pte_range returned.\n");
    TRACES_IF_WATCHPOINT(dst_mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(dst_mm)));
    TRACES_IF_WATCHPOINT(src_mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(src_mm)));
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vmalloc_sync_all
#define APP_WRAPPER_FOR_vmalloc_sync_all
#endif
 
#ifndef APP_WRAPPER_FOR_vmalloc_sync_all
#define APP_WRAPPER_FOR_vmalloc_sync_all
FUNCTION_WRAPPER_VOID(vmalloc_sync_all, (), {
    kern_printk("vmalloc_sync_all is invoked.\n");
    PRE_WRAPPER_FUNC();
    vmalloc_sync_all();
    POST_WRAPPER_FUNC();
    kern_printk("vmalloc_sync_all returned.\n");
})
#endif


#ifndef KERN_ADDR___neigh_create
#define APP_WRAPPER_FOR___neigh_create
#endif
 
#ifndef APP_WRAPPER_FOR___neigh_create
#define APP_WRAPPER_FOR___neigh_create
FUNCTION_WRAPPER(__neigh_create, (struct neigh_table *tbl, const void *pkey, struct net_device *dev, bool want_ref), {
    WRAP_RECURSIVE(tbl);
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("__neigh_create is invoked.\n");
    PRE_WRAPPER_FUNC(tbl, pkey, dev, want_ref);
    struct neighbour *ret = __neigh_create(tbl, pkey, dev, want_ref);
    POST_WRAPPER_FUNC(tbl, pkey, dev, want_ref);
    kern_printk("__neigh_create returned.\n");
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_crypto_unregister_algs
#define APP_WRAPPER_FOR_crypto_unregister_algs
#endif
 
#ifndef APP_WRAPPER_FOR_crypto_unregister_algs
#define APP_WRAPPER_FOR_crypto_unregister_algs
FUNCTION_WRAPPER(crypto_unregister_algs, (struct crypto_alg *algs, int count), {
    WRAP_RECURSIVE(algs);
    TRACES_IF_WATCHPOINT(algs);
    SCAN_HEAD_FUNC(struct crypto_alg)(*(TO_UNWATCHED_ADDRESS(algs)));
    kern_printk("crypto_unregister_algs is invoked.\n");
    PRE_WRAPPER_FUNC(algs, count);
    int ret = crypto_unregister_algs(algs, count);
    POST_WRAPPER_FUNC(algs, count);
    kern_printk("crypto_unregister_algs returned.\n");
    TRACES_IF_WATCHPOINT(algs);
    SCAN_HEAD_FUNC(struct crypto_alg)(*(TO_UNWATCHED_ADDRESS(algs)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_wake_async
#define APP_WRAPPER_FOR_sock_wake_async
#endif
 
#ifndef APP_WRAPPER_FOR_sock_wake_async
#define APP_WRAPPER_FOR_sock_wake_async
FUNCTION_WRAPPER(sock_wake_async, (struct socket *sk, int how, int band), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sock_wake_async is invoked.\n");
    PRE_WRAPPER_FUNC(sk, how, band);
    int ret = sock_wake_async(sk, how, band);
    POST_WRAPPER_FUNC(sk, how, band);
    kern_printk("sock_wake_async returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR___dev_pm_qos_flags
#define APP_WRAPPER_FOR___dev_pm_qos_flags
#endif
 
#ifndef APP_WRAPPER_FOR___dev_pm_qos_flags
#define APP_WRAPPER_FOR___dev_pm_qos_flags
FUNCTION_WRAPPER(__dev_pm_qos_flags, (struct device *dev, s32 mask), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("__dev_pm_qos_flags is invoked.\n");
    PRE_WRAPPER_FUNC(dev, mask);
    enum pm_qos_flags_status ret = __dev_pm_qos_flags(dev, mask);
    POST_WRAPPER_FUNC(dev, mask);
    kern_printk("__dev_pm_qos_flags returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_writeback_inodes_sb_if_idle
#define APP_WRAPPER_FOR_writeback_inodes_sb_if_idle
#endif
 
#ifndef APP_WRAPPER_FOR_writeback_inodes_sb_if_idle
#define APP_WRAPPER_FOR_writeback_inodes_sb_if_idle
FUNCTION_WRAPPER(writeback_inodes_sb_if_idle, (struct super_block *_arg1, enum wb_reason reason), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("writeback_inodes_sb_if_idle is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, reason);
    int ret = writeback_inodes_sb_if_idle(_arg1, reason);
    POST_WRAPPER_FUNC(_arg1, reason);
    kern_printk("writeback_inodes_sb_if_idle returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_queue_end_tag
#define APP_WRAPPER_FOR_blk_queue_end_tag
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_end_tag
#define APP_WRAPPER_FOR_blk_queue_end_tag
FUNCTION_WRAPPER_VOID(blk_queue_end_tag, (struct request_queue *_arg1, struct request *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("blk_queue_end_tag is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    blk_queue_end_tag(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_queue_end_tag returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_acpi_os_create_cache
#define APP_WRAPPER_FOR_acpi_os_create_cache
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_create_cache
#define APP_WRAPPER_FOR_acpi_os_create_cache
FUNCTION_WRAPPER(acpi_os_create_cache, (char *cache_name, u16 object_size, u16 max_depth, struct kmem_cache **return_cache), {
    WRAP_RECURSIVE(return_cache);
    TRACES_IF_WATCHPOINT(return_cache);
    SCAN_HEAD_FUNC(struct kmem_cache *)(*(TO_UNWATCHED_ADDRESS(return_cache)));
    kern_printk("acpi_os_create_cache is invoked.\n");
    PRE_WRAPPER_FUNC(cache_name, object_size, max_depth, return_cache);
    acpi_status ret = acpi_os_create_cache(cache_name, object_size, max_depth, return_cache);
    POST_WRAPPER_FUNC(cache_name, object_size, max_depth, return_cache);
    kern_printk("acpi_os_create_cache returned.\n");
    TRACES_IF_WATCHPOINT(return_cache);
    SCAN_HEAD_FUNC(struct kmem_cache *)(*(TO_UNWATCHED_ADDRESS(return_cache)));
    return ret;
})
#endif


#ifndef KERN_ADDR_rcu_cpu_stall_reset
#define APP_WRAPPER_FOR_rcu_cpu_stall_reset
#endif
 
#ifndef APP_WRAPPER_FOR_rcu_cpu_stall_reset
#define APP_WRAPPER_FOR_rcu_cpu_stall_reset
FUNCTION_WRAPPER_VOID(rcu_cpu_stall_reset, (), {
    kern_printk("rcu_cpu_stall_reset is invoked.\n");
    PRE_WRAPPER_FUNC();
    rcu_cpu_stall_reset();
    POST_WRAPPER_FUNC();
    kern_printk("rcu_cpu_stall_reset returned.\n");
})
#endif


#ifndef KERN_ADDR_calc_load_enter_idle
#define APP_WRAPPER_FOR_calc_load_enter_idle
#endif
 
#ifndef APP_WRAPPER_FOR_calc_load_enter_idle
#define APP_WRAPPER_FOR_calc_load_enter_idle
FUNCTION_WRAPPER_VOID(calc_load_enter_idle, (), {
    kern_printk("calc_load_enter_idle is invoked.\n");
    PRE_WRAPPER_FUNC();
    calc_load_enter_idle();
    POST_WRAPPER_FUNC();
    kern_printk("calc_load_enter_idle returned.\n");
})
#endif


#ifndef KERN_ADDR_thaw_workqueues
#define APP_WRAPPER_FOR_thaw_workqueues
#endif
 
#ifndef APP_WRAPPER_FOR_thaw_workqueues
#define APP_WRAPPER_FOR_thaw_workqueues
FUNCTION_WRAPPER_VOID(thaw_workqueues, (), {
    kern_printk("thaw_workqueues is invoked.\n");
    PRE_WRAPPER_FUNC();
    thaw_workqueues();
    POST_WRAPPER_FUNC();
    kern_printk("thaw_workqueues returned.\n");
})
#endif


#ifndef KERN_ADDR_get_random_bytes_arch
#define APP_WRAPPER_FOR_get_random_bytes_arch
#endif
 
#ifndef APP_WRAPPER_FOR_get_random_bytes_arch
#define APP_WRAPPER_FOR_get_random_bytes_arch
FUNCTION_WRAPPER_VOID(get_random_bytes_arch, (void *buf, int nbytes), {
    kern_printk("get_random_bytes_arch is invoked.\n");
    PRE_WRAPPER_FUNC(buf, nbytes);
    get_random_bytes_arch(buf, nbytes);
    POST_WRAPPER_FUNC(buf, nbytes);
    kern_printk("get_random_bytes_arch returned.\n");
})
#endif


#ifndef KERN_ADDR__raw_spin_lock_irqsave
#define APP_WRAPPER_FOR__raw_spin_lock_irqsave
#endif
 
#ifndef APP_WRAPPER_FOR__raw_spin_lock_irqsave
#define APP_WRAPPER_FOR__raw_spin_lock_irqsave
FUNCTION_WRAPPER(_raw_spin_lock_irqsave, (raw_spinlock_t *lock), {
    kern_printk("_raw_spin_lock_irqsave is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    long ret = _raw_spin_lock_irqsave(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("_raw_spin_lock_irqsave returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_get_random_bytes
#define APP_WRAPPER_FOR_get_random_bytes
#endif
 
#ifndef APP_WRAPPER_FOR_get_random_bytes
#define APP_WRAPPER_FOR_get_random_bytes
FUNCTION_WRAPPER_VOID(get_random_bytes, (void *buf, int nbytes), {
    kern_printk("get_random_bytes is invoked.\n");
    PRE_WRAPPER_FUNC(buf, nbytes);
    get_random_bytes(buf, nbytes);
    POST_WRAPPER_FUNC(buf, nbytes);
    kern_printk("get_random_bytes returned.\n");
})
#endif


#ifndef KERN_ADDR_call_rcu_bh
#define APP_WRAPPER_FOR_call_rcu_bh
#endif
 
#ifndef APP_WRAPPER_FOR_call_rcu_bh
#define APP_WRAPPER_FOR_call_rcu_bh
FUNCTION_WRAPPER_VOID(call_rcu_bh, (struct callback_head *head, void (*func)(struct callback_head *)), {
    WRAP_RECURSIVE(head);
    TRACES_IF_WATCHPOINT(head);
    SCAN_HEAD_FUNC(struct callback_head)(*(TO_UNWATCHED_ADDRESS(head)));
    WRAP_FUNCTION(func);
    kern_printk("call_rcu_bh is invoked.\n");
    PRE_WRAPPER_FUNC(head, func);
    call_rcu_bh(head, func);
    POST_WRAPPER_FUNC(head, func);
    kern_printk("call_rcu_bh returned.\n");
    TRACES_IF_WATCHPOINT(head);
    SCAN_HEAD_FUNC(struct callback_head)(*(TO_UNWATCHED_ADDRESS(head)));
})
#endif


#ifndef KERN_ADDR_mb_cache_entry_free
#define APP_WRAPPER_FOR_mb_cache_entry_free
#endif
 
#ifndef APP_WRAPPER_FOR_mb_cache_entry_free
#define APP_WRAPPER_FOR_mb_cache_entry_free
FUNCTION_WRAPPER_VOID(mb_cache_entry_free, (struct mb_cache_entry *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mb_cache_entry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("mb_cache_entry_free is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    mb_cache_entry_free(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("mb_cache_entry_free returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mb_cache_entry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_uncache_firmware
#define APP_WRAPPER_FOR_uncache_firmware
#endif
 
#ifndef APP_WRAPPER_FOR_uncache_firmware
#define APP_WRAPPER_FOR_uncache_firmware
FUNCTION_WRAPPER(uncache_firmware, (const char *name), {
    kern_printk("uncache_firmware is invoked.\n");
    PRE_WRAPPER_FUNC(name);
    int ret = uncache_firmware(name);
    POST_WRAPPER_FUNC(name);
    kern_printk("uncache_firmware returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_vm_insert_page
#define APP_WRAPPER_FOR_vm_insert_page
#endif
 
#ifndef APP_WRAPPER_FOR_vm_insert_page
#define APP_WRAPPER_FOR_vm_insert_page
FUNCTION_WRAPPER(vm_insert_page, (struct vm_area_struct *_arg1, unsigned long addr, struct page *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("vm_insert_page is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, addr, _arg2);
    int ret = vm_insert_page(_arg1, addr, _arg2);
    POST_WRAPPER_FUNC(_arg1, addr, _arg2);
    kern_printk("vm_insert_page returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_user_statfs
#define APP_WRAPPER_FOR_user_statfs
#endif
 
#ifndef APP_WRAPPER_FOR_user_statfs
#define APP_WRAPPER_FOR_user_statfs
FUNCTION_WRAPPER(user_statfs, (const char *_arg1, struct kstatfs *_arg2), {
    kern_printk("user_statfs is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = user_statfs(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("user_statfs returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_crypto_register_algs
#define APP_WRAPPER_FOR_crypto_register_algs
#endif
 
#ifndef APP_WRAPPER_FOR_crypto_register_algs
#define APP_WRAPPER_FOR_crypto_register_algs
FUNCTION_WRAPPER(crypto_register_algs, (struct crypto_alg *algs, int count), {
    WRAP_RECURSIVE(algs);
    TRACES_IF_WATCHPOINT(algs);
    SCAN_HEAD_FUNC(struct crypto_alg)(*(TO_UNWATCHED_ADDRESS(algs)));
    kern_printk("crypto_register_algs is invoked.\n");
    PRE_WRAPPER_FUNC(algs, count);
    int ret = crypto_register_algs(algs, count);
    POST_WRAPPER_FUNC(algs, count);
    kern_printk("crypto_register_algs returned.\n");
    TRACES_IF_WATCHPOINT(algs);
    SCAN_HEAD_FUNC(struct crypto_alg)(*(TO_UNWATCHED_ADDRESS(algs)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mark_tsc_unstable
#define APP_WRAPPER_FOR_mark_tsc_unstable
#endif
 
#ifndef APP_WRAPPER_FOR_mark_tsc_unstable
#define APP_WRAPPER_FOR_mark_tsc_unstable
FUNCTION_WRAPPER_VOID(mark_tsc_unstable, (char *reason), {
    kern_printk("mark_tsc_unstable is invoked.\n");
    PRE_WRAPPER_FUNC(reason);
    mark_tsc_unstable(reason);
    POST_WRAPPER_FUNC(reason);
    kern_printk("mark_tsc_unstable returned.\n");
})
#endif


#ifndef KERN_ADDR__raw_spin_lock_irq
#define APP_WRAPPER_FOR__raw_spin_lock_irq
#endif
 
#ifndef APP_WRAPPER_FOR__raw_spin_lock_irq
#define APP_WRAPPER_FOR__raw_spin_lock_irq
FUNCTION_WRAPPER_VOID(_raw_spin_lock_irq, (raw_spinlock_t *lock), {
    kern_printk("_raw_spin_lock_irq is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    _raw_spin_lock_irq(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("_raw_spin_lock_irq returned.\n");
})
#endif


#ifndef KERN_ADDR_pcie_aspm_enabled
#define APP_WRAPPER_FOR_pcie_aspm_enabled
#endif
 
#ifndef APP_WRAPPER_FOR_pcie_aspm_enabled
#define APP_WRAPPER_FOR_pcie_aspm_enabled
FUNCTION_WRAPPER(pcie_aspm_enabled, (), {
    kern_printk("pcie_aspm_enabled is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = pcie_aspm_enabled();
    POST_WRAPPER_FUNC();
    kern_printk("pcie_aspm_enabled returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_timeval_to_jiffies
#define APP_WRAPPER_FOR_timeval_to_jiffies
#endif
 
#ifndef APP_WRAPPER_FOR_timeval_to_jiffies
#define APP_WRAPPER_FOR_timeval_to_jiffies
FUNCTION_WRAPPER(timeval_to_jiffies, (const struct timeval *value), {
    kern_printk("timeval_to_jiffies is invoked.\n");
    PRE_WRAPPER_FUNC(value);
    long ret = timeval_to_jiffies(value);
    POST_WRAPPER_FUNC(value);
    kern_printk("timeval_to_jiffies returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_rps_may_expire_flow
#define APP_WRAPPER_FOR_rps_may_expire_flow
#endif
 
#ifndef APP_WRAPPER_FOR_rps_may_expire_flow
#define APP_WRAPPER_FOR_rps_may_expire_flow
FUNCTION_WRAPPER(rps_may_expire_flow, (struct net_device *dev, u16 rxq_index, u32 flow_id, u16 filter_id), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("rps_may_expire_flow is invoked.\n");
    PRE_WRAPPER_FUNC(dev, rxq_index, flow_id, filter_id);
    bool ret = rps_may_expire_flow(dev, rxq_index, flow_id, filter_id);
    POST_WRAPPER_FUNC(dev, rxq_index, flow_id, filter_id);
    kern_printk("rps_may_expire_flow returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_hotplug_execute
#define APP_WRAPPER_FOR_acpi_os_hotplug_execute
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_hotplug_execute
#define APP_WRAPPER_FOR_acpi_os_hotplug_execute
FUNCTION_WRAPPER(acpi_os_hotplug_execute, (acpi_osd_exec_callback function, void *context), {
    WRAP_FUNCTION(function);
    kern_printk("acpi_os_hotplug_execute is invoked.\n");
    PRE_WRAPPER_FUNC(function, context);
    acpi_status ret = acpi_os_hotplug_execute(function, context);
    POST_WRAPPER_FUNC(function, context);
    kern_printk("acpi_os_hotplug_execute returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_finish_e820_parsing
#define APP_WRAPPER_FOR_finish_e820_parsing
#endif
 
#ifndef APP_WRAPPER_FOR_finish_e820_parsing
#define APP_WRAPPER_FOR_finish_e820_parsing
FUNCTION_WRAPPER_VOID(finish_e820_parsing, (), {
    kern_printk("finish_e820_parsing is invoked.\n");
    PRE_WRAPPER_FUNC();
    finish_e820_parsing();
    POST_WRAPPER_FUNC();
    kern_printk("finish_e820_parsing returned.\n");
})
#endif


#ifndef KERN_ADDR_inet_twdr_hangman
#define APP_WRAPPER_FOR_inet_twdr_hangman
#endif
 
#ifndef APP_WRAPPER_FOR_inet_twdr_hangman
#define APP_WRAPPER_FOR_inet_twdr_hangman
FUNCTION_WRAPPER_VOID(inet_twdr_hangman, (unsigned long data), {
    kern_printk("inet_twdr_hangman is invoked.\n");
    PRE_WRAPPER_FUNC(data);
    inet_twdr_hangman(data);
    POST_WRAPPER_FUNC(data);
    kern_printk("inet_twdr_hangman returned.\n");
})
#endif


#ifndef KERN_ADDR_test_set_page_writeback
#define APP_WRAPPER_FOR_test_set_page_writeback
#endif
 
#ifndef APP_WRAPPER_FOR_test_set_page_writeback
#define APP_WRAPPER_FOR_test_set_page_writeback
FUNCTION_WRAPPER(test_set_page_writeback, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("test_set_page_writeback is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    int ret = test_set_page_writeback(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("test_set_page_writeback returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_reschedule_interrupt
#define APP_WRAPPER_FOR_reschedule_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_reschedule_interrupt
#define APP_WRAPPER_FOR_reschedule_interrupt
FUNCTION_WRAPPER_VOID(reschedule_interrupt, (), {
    kern_printk("reschedule_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC();
    reschedule_interrupt();
    POST_WRAPPER_FUNC();
    kern_printk("reschedule_interrupt returned.\n");
})
#endif


#ifndef KERN_ADDR_prandom_bytes_state
#define APP_WRAPPER_FOR_prandom_bytes_state
#endif
 
#ifndef APP_WRAPPER_FOR_prandom_bytes_state
#define APP_WRAPPER_FOR_prandom_bytes_state
FUNCTION_WRAPPER_VOID(prandom_bytes_state, (struct rnd_state *state, void *buf, int nbytes), {
    kern_printk("prandom_bytes_state is invoked.\n");
    PRE_WRAPPER_FUNC(state, buf, nbytes);
    prandom_bytes_state(state, buf, nbytes);
    POST_WRAPPER_FUNC(state, buf, nbytes);
    kern_printk("prandom_bytes_state returned.\n");
})
#endif


#ifndef KERN_ADDR_irq_setup_generic_chip
#define APP_WRAPPER_FOR_irq_setup_generic_chip
#endif
 
#ifndef APP_WRAPPER_FOR_irq_setup_generic_chip
#define APP_WRAPPER_FOR_irq_setup_generic_chip
FUNCTION_WRAPPER_VOID(irq_setup_generic_chip, (struct irq_chip_generic *gc, u32 msk, enum irq_gc_flags flags, unsigned int clr, unsigned int set), {
    kern_printk("irq_setup_generic_chip is invoked.\n");
    PRE_WRAPPER_FUNC(gc, msk, flags, clr, set);
    irq_setup_generic_chip(gc, msk, flags, clr, set);
    POST_WRAPPER_FUNC(gc, msk, flags, clr, set);
    kern_printk("irq_setup_generic_chip returned.\n");
})
#endif


#ifndef KERN_ADDR_mpage_writepage
#define APP_WRAPPER_FOR_mpage_writepage
#endif
 
#ifndef APP_WRAPPER_FOR_mpage_writepage
#define APP_WRAPPER_FOR_mpage_writepage
FUNCTION_WRAPPER(mpage_writepage, (struct page *page, get_block_t *get_block, struct writeback_control *wbc), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    WRAP_FUNCTION(get_block);
    kern_printk("mpage_writepage is invoked.\n");
    PRE_WRAPPER_FUNC(page, get_block, wbc);
    int ret = mpage_writepage(page, get_block, wbc);
    POST_WRAPPER_FUNC(page, get_block, wbc);
    kern_printk("mpage_writepage returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_current_umask
#define APP_WRAPPER_FOR_current_umask
#endif
 
#ifndef APP_WRAPPER_FOR_current_umask
#define APP_WRAPPER_FOR_current_umask
FUNCTION_WRAPPER(current_umask, (), {
    kern_printk("current_umask is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = current_umask();
    POST_WRAPPER_FUNC();
    kern_printk("current_umask returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___iowrite64_copy
#define APP_WRAPPER_FOR___iowrite64_copy
#endif
 
#ifndef APP_WRAPPER_FOR___iowrite64_copy
#define APP_WRAPPER_FOR___iowrite64_copy
FUNCTION_WRAPPER_VOID(__iowrite64_copy, (void *to, const void *from, size_t count), {
    kern_printk("__iowrite64_copy is invoked.\n");
    PRE_WRAPPER_FUNC(to, from, count);
    __iowrite64_copy(to, from, count);
    POST_WRAPPER_FUNC(to, from, count);
    kern_printk("__iowrite64_copy returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_evaluate_reference
#define APP_WRAPPER_FOR_acpi_evaluate_reference
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_evaluate_reference
#define APP_WRAPPER_FOR_acpi_evaluate_reference
FUNCTION_WRAPPER(acpi_evaluate_reference, (acpi_handle handle, acpi_string pathname, struct acpi_object_list *arguments, struct acpi_handle_list *list), {
    kern_printk("acpi_evaluate_reference is invoked.\n");
    PRE_WRAPPER_FUNC(handle, pathname, arguments, list);
    acpi_status ret = acpi_evaluate_reference(handle, pathname, arguments, list);
    POST_WRAPPER_FUNC(handle, pathname, arguments, list);
    kern_printk("acpi_evaluate_reference returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_set_pages_x
#define APP_WRAPPER_FOR_set_pages_x
#endif
 
#ifndef APP_WRAPPER_FOR_set_pages_x
#define APP_WRAPPER_FOR_set_pages_x
FUNCTION_WRAPPER(set_pages_x, (struct page *page, int numpages), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("set_pages_x is invoked.\n");
    PRE_WRAPPER_FUNC(page, numpages);
    int ret = set_pages_x(page, numpages);
    POST_WRAPPER_FUNC(page, numpages);
    kern_printk("set_pages_x returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR___nla_put
#define APP_WRAPPER_FOR___nla_put
#endif
 
#ifndef APP_WRAPPER_FOR___nla_put
#define APP_WRAPPER_FOR___nla_put
FUNCTION_WRAPPER_VOID(__nla_put, (struct sk_buff *skb, int attrtype, int attrlen, const void *data), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("__nla_put is invoked.\n");
    PRE_WRAPPER_FUNC(skb, attrtype, attrlen, data);
    __nla_put(skb, attrtype, attrlen, data);
    POST_WRAPPER_FUNC(skb, attrtype, attrlen, data);
    kern_printk("__nla_put returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_register_timer_hook
#define APP_WRAPPER_FOR_register_timer_hook
#endif
 
#ifndef APP_WRAPPER_FOR_register_timer_hook
#define APP_WRAPPER_FOR_register_timer_hook
FUNCTION_WRAPPER(register_timer_hook, (int (*hook)(struct pt_regs *)), {
    WRAP_FUNCTION(hook);
    kern_printk("register_timer_hook is invoked.\n");
    PRE_WRAPPER_FUNC(hook);
    int ret = register_timer_hook(hook);
    POST_WRAPPER_FUNC(hook);
    kern_printk("register_timer_hook returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_walk_resources
#define APP_WRAPPER_FOR_acpi_walk_resources
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_walk_resources
#define APP_WRAPPER_FOR_acpi_walk_resources
FUNCTION_WRAPPER(acpi_walk_resources, (acpi_handle device, char *name, acpi_walk_resource_callback user_function, void *context), {
    WRAP_FUNCTION(user_function);
    kern_printk("acpi_walk_resources is invoked.\n");
    PRE_WRAPPER_FUNC(device, name, user_function, context);
    acpi_status ret = acpi_walk_resources(device, name, user_function, context);
    POST_WRAPPER_FUNC(device, name, user_function, context);
    kern_printk("acpi_walk_resources returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_done_path_create
#define APP_WRAPPER_FOR_done_path_create
#endif
 
#ifndef APP_WRAPPER_FOR_done_path_create
#define APP_WRAPPER_FOR_done_path_create
FUNCTION_WRAPPER_VOID(done_path_create, (struct path *_arg1, struct dentry *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("done_path_create is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    done_path_create(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("done_path_create returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_mntget
#define APP_WRAPPER_FOR_mntget
#endif
 
#ifndef APP_WRAPPER_FOR_mntget
#define APP_WRAPPER_FOR_mntget
FUNCTION_WRAPPER(mntget, (struct vfsmount *mnt), {
    WRAP_RECURSIVE(mnt);
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
    kern_printk("mntget is invoked.\n");
    PRE_WRAPPER_FUNC(mnt);
    struct vfsmount *ret = mntget(mnt);
    POST_WRAPPER_FUNC(mnt);
    kern_printk("mntget returned.\n");
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_rt_mutex_destroy
#define APP_WRAPPER_FOR_rt_mutex_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_rt_mutex_destroy
#define APP_WRAPPER_FOR_rt_mutex_destroy
FUNCTION_WRAPPER_VOID(rt_mutex_destroy, (struct rt_mutex *lock), {
    WRAP_RECURSIVE(lock);
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct rt_mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
    kern_printk("rt_mutex_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    rt_mutex_destroy(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("rt_mutex_destroy returned.\n");
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct rt_mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
})
#endif


#ifndef KERN_ADDR_disable_irq_nosync
#define APP_WRAPPER_FOR_disable_irq_nosync
#endif
 
#ifndef APP_WRAPPER_FOR_disable_irq_nosync
#define APP_WRAPPER_FOR_disable_irq_nosync
FUNCTION_WRAPPER_VOID(disable_irq_nosync, (unsigned int irq), {
    kern_printk("disable_irq_nosync is invoked.\n");
    PRE_WRAPPER_FUNC(irq);
    disable_irq_nosync(irq);
    POST_WRAPPER_FUNC(irq);
    kern_printk("disable_irq_nosync returned.\n");
})
#endif


#ifndef KERN_ADDR_vfs_fstatat
#define APP_WRAPPER_FOR_vfs_fstatat
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_fstatat
#define APP_WRAPPER_FOR_vfs_fstatat
FUNCTION_WRAPPER(vfs_fstatat, (int _arg1, const char *_arg2, struct kstat *_arg3, int _arg4), {
    kern_printk("vfs_fstatat is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = vfs_fstatat(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("vfs_fstatat returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_up
#define APP_WRAPPER_FOR_up
#endif
 
#ifndef APP_WRAPPER_FOR_up
#define APP_WRAPPER_FOR_up
FUNCTION_WRAPPER_VOID(up, (struct semaphore *sem), {
    kern_printk("up is invoked.\n");
    PRE_WRAPPER_FUNC(sem);
    up(sem);
    POST_WRAPPER_FUNC(sem);
    kern_printk("up returned.\n");
})
#endif


#ifndef KERN_ADDR_qdisc_put_stab
#define APP_WRAPPER_FOR_qdisc_put_stab
#endif
 
#ifndef APP_WRAPPER_FOR_qdisc_put_stab
#define APP_WRAPPER_FOR_qdisc_put_stab
FUNCTION_WRAPPER_VOID(qdisc_put_stab, (struct qdisc_size_table *tab), {
    WRAP_RECURSIVE(tab);
    TRACES_IF_WATCHPOINT(tab);
    SCAN_HEAD_FUNC(struct qdisc_size_table)(*(TO_UNWATCHED_ADDRESS(tab)));
    kern_printk("qdisc_put_stab is invoked.\n");
    PRE_WRAPPER_FUNC(tab);
    qdisc_put_stab(tab);
    POST_WRAPPER_FUNC(tab);
    kern_printk("qdisc_put_stab returned.\n");
    TRACES_IF_WATCHPOINT(tab);
    SCAN_HEAD_FUNC(struct qdisc_size_table)(*(TO_UNWATCHED_ADDRESS(tab)));
})
#endif


#ifndef KERN_ADDR_pm_generic_thaw_noirq
#define APP_WRAPPER_FOR_pm_generic_thaw_noirq
#endif
 
#ifndef APP_WRAPPER_FOR_pm_generic_thaw_noirq
#define APP_WRAPPER_FOR_pm_generic_thaw_noirq
FUNCTION_WRAPPER(pm_generic_thaw_noirq, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pm_generic_thaw_noirq is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pm_generic_thaw_noirq(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pm_generic_thaw_noirq returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_gc_set_wake
#define APP_WRAPPER_FOR_irq_gc_set_wake
#endif
 
#ifndef APP_WRAPPER_FOR_irq_gc_set_wake
#define APP_WRAPPER_FOR_irq_gc_set_wake
FUNCTION_WRAPPER(irq_gc_set_wake, (struct irq_data *d, unsigned int on), {
    WRAP_RECURSIVE(d);
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(d)));
    kern_printk("irq_gc_set_wake is invoked.\n");
    PRE_WRAPPER_FUNC(d, on);
    int ret = irq_gc_set_wake(d, on);
    POST_WRAPPER_FUNC(d, on);
    kern_printk("irq_gc_set_wake returned.\n");
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(d)));
    return ret;
})
#endif


#ifndef KERN_ADDR___jbd2_log_space_left
#define APP_WRAPPER_FOR___jbd2_log_space_left
#endif
 
#ifndef APP_WRAPPER_FOR___jbd2_log_space_left
#define APP_WRAPPER_FOR___jbd2_log_space_left
FUNCTION_WRAPPER(__jbd2_log_space_left, (journal_t *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__jbd2_log_space_left is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = __jbd2_log_space_left(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__jbd2_log_space_left returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_set_triggers
#define APP_WRAPPER_FOR_jbd2_journal_set_triggers
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_set_triggers
#define APP_WRAPPER_FOR_jbd2_journal_set_triggers
FUNCTION_WRAPPER_VOID(jbd2_journal_set_triggers, (struct buffer_head *_arg1, struct jbd2_buffer_trigger_type *type), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(type);
    TRACES_IF_WATCHPOINT(type);
    SCAN_HEAD_FUNC(struct jbd2_buffer_trigger_type)(*(TO_UNWATCHED_ADDRESS(type)));
    kern_printk("jbd2_journal_set_triggers is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, type);
    jbd2_journal_set_triggers(_arg1, type);
    POST_WRAPPER_FUNC(_arg1, type);
    kern_printk("jbd2_journal_set_triggers returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(type);
    SCAN_HEAD_FUNC(struct jbd2_buffer_trigger_type)(*(TO_UNWATCHED_ADDRESS(type)));
})
#endif


#ifndef KERN_ADDR___srcu_read_unlock
#define APP_WRAPPER_FOR___srcu_read_unlock
#endif
 
#ifndef APP_WRAPPER_FOR___srcu_read_unlock
#define APP_WRAPPER_FOR___srcu_read_unlock
FUNCTION_WRAPPER_VOID(__srcu_read_unlock, (struct srcu_struct *sp, int idx), {
    WRAP_RECURSIVE(sp);
    TRACES_IF_WATCHPOINT(sp);
    SCAN_HEAD_FUNC(struct srcu_struct)(*(TO_UNWATCHED_ADDRESS(sp)));
    kern_printk("__srcu_read_unlock is invoked.\n");
    PRE_WRAPPER_FUNC(sp, idx);
    __srcu_read_unlock(sp, idx);
    POST_WRAPPER_FUNC(sp, idx);
    kern_printk("__srcu_read_unlock returned.\n");
    TRACES_IF_WATCHPOINT(sp);
    SCAN_HEAD_FUNC(struct srcu_struct)(*(TO_UNWATCHED_ADDRESS(sp)));
})
#endif


#ifndef KERN_ADDR_get_next_ino
#define APP_WRAPPER_FOR_get_next_ino
#endif
 
#ifndef APP_WRAPPER_FOR_get_next_ino
#define APP_WRAPPER_FOR_get_next_ino
FUNCTION_WRAPPER(get_next_ino, (), {
    kern_printk("get_next_ino is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = get_next_ino();
    POST_WRAPPER_FUNC();
    kern_printk("get_next_ino returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_bio_integrity_split
#define APP_WRAPPER_FOR_bio_integrity_split
#endif
 
#ifndef APP_WRAPPER_FOR_bio_integrity_split
#define APP_WRAPPER_FOR_bio_integrity_split
FUNCTION_WRAPPER_VOID(bio_integrity_split, (struct bio *_arg1, struct bio_pair *_arg2, int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio_pair)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("bio_integrity_split is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    bio_integrity_split(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("bio_integrity_split returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio_pair)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_insert_resource
#define APP_WRAPPER_FOR_insert_resource
#endif
 
#ifndef APP_WRAPPER_FOR_insert_resource
#define APP_WRAPPER_FOR_insert_resource
FUNCTION_WRAPPER(insert_resource, (struct resource *parent, struct resource *new_), {
    kern_printk("insert_resource is invoked.\n");
    PRE_WRAPPER_FUNC(parent, new_);
    int ret = insert_resource(parent, new_);
    POST_WRAPPER_FUNC(parent, new_);
    kern_printk("insert_resource returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_find_task_by_pid_ns
#define APP_WRAPPER_FOR_find_task_by_pid_ns
#endif
 
#ifndef APP_WRAPPER_FOR_find_task_by_pid_ns
#define APP_WRAPPER_FOR_find_task_by_pid_ns
FUNCTION_WRAPPER(find_task_by_pid_ns, (pid_t nr, struct pid_namespace *ns), {
    kern_printk("find_task_by_pid_ns is invoked.\n");
    PRE_WRAPPER_FUNC(nr, ns);
    struct task_struct *ret = find_task_by_pid_ns(nr, ns);
    POST_WRAPPER_FUNC(nr, ns);
    kern_printk("find_task_by_pid_ns returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___release_region
#define APP_WRAPPER_FOR___release_region
#endif
 
#ifndef APP_WRAPPER_FOR___release_region
#define APP_WRAPPER_FOR___release_region
FUNCTION_WRAPPER_VOID(__release_region, (struct resource *_arg1, resource_size_t _arg2, resource_size_t _arg3), {
    kern_printk("__release_region is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    __release_region(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("__release_region returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_disable_rom
#define APP_WRAPPER_FOR_pci_disable_rom
#endif
 
#ifndef APP_WRAPPER_FOR_pci_disable_rom
#define APP_WRAPPER_FOR_pci_disable_rom
FUNCTION_WRAPPER_VOID(pci_disable_rom, (struct pci_dev *pdev), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("pci_disable_rom is invoked.\n");
    PRE_WRAPPER_FUNC(pdev);
    pci_disable_rom(pdev);
    POST_WRAPPER_FUNC(pdev);
    kern_printk("pci_disable_rom returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
})
#endif


#ifndef KERN_ADDR_mac_pton
#define APP_WRAPPER_FOR_mac_pton
#endif
 
#ifndef APP_WRAPPER_FOR_mac_pton
#define APP_WRAPPER_FOR_mac_pton
FUNCTION_WRAPPER(mac_pton, (const char *s, u8 *mac), {
    kern_printk("mac_pton is invoked.\n");
    PRE_WRAPPER_FUNC(s, mac);
    int ret = mac_pton(s, mac);
    POST_WRAPPER_FUNC(s, mac);
    kern_printk("mac_pton returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_vmemmap_pud_populate
#define APP_WRAPPER_FOR_vmemmap_pud_populate
#endif
 
#ifndef APP_WRAPPER_FOR_vmemmap_pud_populate
#define APP_WRAPPER_FOR_vmemmap_pud_populate
FUNCTION_WRAPPER(vmemmap_pud_populate, (pgd_t *pgd, unsigned long addr, int node), {
    kern_printk("vmemmap_pud_populate is invoked.\n");
    PRE_WRAPPER_FUNC(pgd, addr, node);
    pud_t *ret = vmemmap_pud_populate(pgd, addr, node);
    POST_WRAPPER_FUNC(pgd, addr, node);
    kern_printk("vmemmap_pud_populate returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_calc_load_exit_idle
#define APP_WRAPPER_FOR_calc_load_exit_idle
#endif
 
#ifndef APP_WRAPPER_FOR_calc_load_exit_idle
#define APP_WRAPPER_FOR_calc_load_exit_idle
FUNCTION_WRAPPER_VOID(calc_load_exit_idle, (), {
    kern_printk("calc_load_exit_idle is invoked.\n");
    PRE_WRAPPER_FUNC();
    calc_load_exit_idle();
    POST_WRAPPER_FUNC();
    kern_printk("calc_load_exit_idle returned.\n");
})
#endif


#ifndef KERN_ADDR_do_sync_write
#define APP_WRAPPER_FOR_do_sync_write
#endif
 
#ifndef APP_WRAPPER_FOR_do_sync_write
#define APP_WRAPPER_FOR_do_sync_write
FUNCTION_WRAPPER(do_sync_write, (struct file *filp, const char *buf, size_t len, loff_t *ppos), {
    WRAP_RECURSIVE(filp);
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    kern_printk("do_sync_write is invoked.\n");
    PRE_WRAPPER_FUNC(filp, buf, len, ppos);
    ssize_t ret = do_sync_write(filp, buf, len, ppos);
    POST_WRAPPER_FUNC(filp, buf, len, ppos);
    kern_printk("do_sync_write returned.\n");
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_stop_this_cpu
#define APP_WRAPPER_FOR_stop_this_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_stop_this_cpu
#define APP_WRAPPER_FOR_stop_this_cpu
FUNCTION_WRAPPER_VOID(stop_this_cpu, (void *dummy), {
    kern_printk("stop_this_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(dummy);
    stop_this_cpu(dummy);
    POST_WRAPPER_FUNC(dummy);
    kern_printk("stop_this_cpu returned.\n");
})
#endif


#ifndef KERN_ADDR___usermodehelper_disable
#define APP_WRAPPER_FOR___usermodehelper_disable
#endif
 
#ifndef APP_WRAPPER_FOR___usermodehelper_disable
#define APP_WRAPPER_FOR___usermodehelper_disable
FUNCTION_WRAPPER(__usermodehelper_disable, (enum umh_disable_depth depth), {
    kern_printk("__usermodehelper_disable is invoked.\n");
    PRE_WRAPPER_FUNC(depth);
    int ret = __usermodehelper_disable(depth);
    POST_WRAPPER_FUNC(depth);
    kern_printk("__usermodehelper_disable returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_parameqn
#define APP_WRAPPER_FOR_parameqn
#endif
 
#ifndef APP_WRAPPER_FOR_parameqn
#define APP_WRAPPER_FOR_parameqn
FUNCTION_WRAPPER(parameqn, (const char *name1, const char *name2, size_t n), {
    kern_printk("parameqn is invoked.\n");
    PRE_WRAPPER_FUNC(name1, name2, n);
    bool ret = parameqn(name1, name2, n);
    POST_WRAPPER_FUNC(name1, name2, n);
    kern_printk("parameqn returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_vma_interval_tree_iter_first
#define APP_WRAPPER_FOR_vma_interval_tree_iter_first
#endif
 
#ifndef APP_WRAPPER_FOR_vma_interval_tree_iter_first
#define APP_WRAPPER_FOR_vma_interval_tree_iter_first
FUNCTION_WRAPPER(vma_interval_tree_iter_first, (struct rb_root *root, unsigned long start, unsigned long last), {
    kern_printk("vma_interval_tree_iter_first is invoked.\n");
    PRE_WRAPPER_FUNC(root, start, last);
    struct vm_area_struct *ret = vma_interval_tree_iter_first(root, start, last);
    POST_WRAPPER_FUNC(root, start, last);
    kern_printk("vma_interval_tree_iter_first returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_drain_all_pages
#define APP_WRAPPER_FOR_drain_all_pages
#endif
 
#ifndef APP_WRAPPER_FOR_drain_all_pages
#define APP_WRAPPER_FOR_drain_all_pages
FUNCTION_WRAPPER_VOID(drain_all_pages, (), {
    kern_printk("drain_all_pages is invoked.\n");
    PRE_WRAPPER_FUNC();
    drain_all_pages();
    POST_WRAPPER_FUNC();
    kern_printk("drain_all_pages returned.\n");
})
#endif


#ifndef KERN_ADDR_seq_open
#define APP_WRAPPER_FOR_seq_open
#endif
 
#ifndef APP_WRAPPER_FOR_seq_open
#define APP_WRAPPER_FOR_seq_open
FUNCTION_WRAPPER(seq_open, (struct file *_arg1, const struct seq_operations *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(const struct seq_operations)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("seq_open is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = seq_open(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("seq_open returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(const struct seq_operations)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_complete_all
#define APP_WRAPPER_FOR_complete_all
#endif
 
#ifndef APP_WRAPPER_FOR_complete_all
#define APP_WRAPPER_FOR_complete_all
FUNCTION_WRAPPER_VOID(complete_all, (struct completion *_arg1), {
    kern_printk("complete_all is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    complete_all(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("complete_all returned.\n");
})
#endif


#ifndef KERN_ADDR_proc_dointvec_minmax
#define APP_WRAPPER_FOR_proc_dointvec_minmax
#endif
 
#ifndef APP_WRAPPER_FOR_proc_dointvec_minmax
#define APP_WRAPPER_FOR_proc_dointvec_minmax
FUNCTION_WRAPPER(proc_dointvec_minmax, (struct ctl_table *_arg1, int _arg2, void *_arg3, size_t *_arg4, loff_t *_arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("proc_dointvec_minmax is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = proc_dointvec_minmax(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("proc_dointvec_minmax returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_tsc_restore_sched_clock_state
#define APP_WRAPPER_FOR_tsc_restore_sched_clock_state
#endif
 
#ifndef APP_WRAPPER_FOR_tsc_restore_sched_clock_state
#define APP_WRAPPER_FOR_tsc_restore_sched_clock_state
FUNCTION_WRAPPER_VOID(tsc_restore_sched_clock_state, (), {
    kern_printk("tsc_restore_sched_clock_state is invoked.\n");
    PRE_WRAPPER_FUNC();
    tsc_restore_sched_clock_state();
    POST_WRAPPER_FUNC();
    kern_printk("tsc_restore_sched_clock_state returned.\n");
})
#endif


#ifndef KERN_ADDR_dentry_path
#define APP_WRAPPER_FOR_dentry_path
#endif
 
#ifndef APP_WRAPPER_FOR_dentry_path
#define APP_WRAPPER_FOR_dentry_path
FUNCTION_WRAPPER(dentry_path, (struct dentry *_arg1, char *_arg2, int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("dentry_path is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    char *ret = dentry_path(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("dentry_path returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_param_set_copystring
#define APP_WRAPPER_FOR_param_set_copystring
#endif
 
#ifndef APP_WRAPPER_FOR_param_set_copystring
#define APP_WRAPPER_FOR_param_set_copystring
FUNCTION_WRAPPER(param_set_copystring, (const char *val, const struct kernel_param *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("param_set_copystring is invoked.\n");
    PRE_WRAPPER_FUNC(val, _arg1);
    int ret = param_set_copystring(val, _arg1);
    POST_WRAPPER_FUNC(val, _arg1);
    kern_printk("param_set_copystring returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_no_getsockopt
#define APP_WRAPPER_FOR_sock_no_getsockopt
#endif
 
#ifndef APP_WRAPPER_FOR_sock_no_getsockopt
#define APP_WRAPPER_FOR_sock_no_getsockopt
FUNCTION_WRAPPER(sock_no_getsockopt, (struct socket *_arg1, int _arg2, int _arg3, char *_arg4, int *_arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("sock_no_getsockopt is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = sock_no_getsockopt(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("sock_no_getsockopt returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bio_split
#define APP_WRAPPER_FOR_bio_split
#endif
 
#ifndef APP_WRAPPER_FOR_bio_split
#define APP_WRAPPER_FOR_bio_split
FUNCTION_WRAPPER(bio_split, (struct bio *bi, int first_sectors), {
    WRAP_RECURSIVE(bi);
    TRACES_IF_WATCHPOINT(bi);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bi)));
    kern_printk("bio_split is invoked.\n");
    PRE_WRAPPER_FUNC(bi, first_sectors);
    struct bio_pair *ret = bio_split(bi, first_sectors);
    POST_WRAPPER_FUNC(bi, first_sectors);
    kern_printk("bio_split returned.\n");
    TRACES_IF_WATCHPOINT(bi);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bi)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_kthread_worker_fn
#define APP_WRAPPER_FOR_kthread_worker_fn
#endif
 
#ifndef APP_WRAPPER_FOR_kthread_worker_fn
#define APP_WRAPPER_FOR_kthread_worker_fn
FUNCTION_WRAPPER(kthread_worker_fn, (void *worker_ptr), {
    kern_printk("kthread_worker_fn is invoked.\n");
    PRE_WRAPPER_FUNC(worker_ptr);
    int ret = kthread_worker_fn(worker_ptr);
    POST_WRAPPER_FUNC(worker_ptr);
    kern_printk("kthread_worker_fn returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dirty_background_bytes_handler
#define APP_WRAPPER_FOR_dirty_background_bytes_handler
#endif
 
#ifndef APP_WRAPPER_FOR_dirty_background_bytes_handler
#define APP_WRAPPER_FOR_dirty_background_bytes_handler
FUNCTION_WRAPPER(dirty_background_bytes_handler, (struct ctl_table *table, int write, void *buffer, size_t *lenp, loff_t *ppos), {
    WRAP_RECURSIVE(table);
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    kern_printk("dirty_background_bytes_handler is invoked.\n");
    PRE_WRAPPER_FUNC(table, write, buffer, lenp, ppos);
    int ret = dirty_background_bytes_handler(table, write, buffer, lenp, ppos);
    POST_WRAPPER_FUNC(table, write, buffer, lenp, ppos);
    kern_printk("dirty_background_bytes_handler returned.\n");
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_start
#define APP_WRAPPER_FOR_jbd2_journal_start
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_start
#define APP_WRAPPER_FOR_jbd2_journal_start
FUNCTION_WRAPPER(jbd2_journal_start, (journal_t *_arg1, int nblocks), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_start is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, nblocks);
    handle_t *ret = jbd2_journal_start(_arg1, nblocks);
    POST_WRAPPER_FUNC(_arg1, nblocks);
    kern_printk("jbd2_journal_start returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_migrate_pages
#define APP_WRAPPER_FOR_compat_sys_migrate_pages
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_migrate_pages
#define APP_WRAPPER_FOR_compat_sys_migrate_pages
FUNCTION_WRAPPER(compat_sys_migrate_pages, (compat_pid_t pid, compat_ulong_t maxnode, const compat_ulong_t *old_nodes, const compat_ulong_t *new_nodes), {
    kern_printk("compat_sys_migrate_pages is invoked.\n");
    PRE_WRAPPER_FUNC(pid, maxnode, old_nodes, new_nodes);
    long ret = compat_sys_migrate_pages(pid, maxnode, old_nodes, new_nodes);
    POST_WRAPPER_FUNC(pid, maxnode, old_nodes, new_nodes);
    kern_printk("compat_sys_migrate_pages returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_nr_iowait
#define APP_WRAPPER_FOR_nr_iowait
#endif
 
#ifndef APP_WRAPPER_FOR_nr_iowait
#define APP_WRAPPER_FOR_nr_iowait
FUNCTION_WRAPPER(nr_iowait, (), {
    kern_printk("nr_iowait is invoked.\n");
    PRE_WRAPPER_FUNC();
    long ret = nr_iowait();
    POST_WRAPPER_FUNC();
    kern_printk("nr_iowait returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_hrtimer_cancel
#define APP_WRAPPER_FOR_hrtimer_cancel
#endif
 
#ifndef APP_WRAPPER_FOR_hrtimer_cancel
#define APP_WRAPPER_FOR_hrtimer_cancel
FUNCTION_WRAPPER(hrtimer_cancel, (struct hrtimer *timer), {
    WRAP_RECURSIVE(timer);
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct hrtimer)(*(TO_UNWATCHED_ADDRESS(timer)));
    kern_printk("hrtimer_cancel is invoked.\n");
    PRE_WRAPPER_FUNC(timer);
    int ret = hrtimer_cancel(timer);
    POST_WRAPPER_FUNC(timer);
    kern_printk("hrtimer_cancel returned.\n");
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct hrtimer)(*(TO_UNWATCHED_ADDRESS(timer)));
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_sk_rebuild_header
#define APP_WRAPPER_FOR_inet_sk_rebuild_header
#endif
 
#ifndef APP_WRAPPER_FOR_inet_sk_rebuild_header
#define APP_WRAPPER_FOR_inet_sk_rebuild_header
FUNCTION_WRAPPER(inet_sk_rebuild_header, (struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("inet_sk_rebuild_header is invoked.\n");
    PRE_WRAPPER_FUNC(sk);
    int ret = inet_sk_rebuild_header(sk);
    POST_WRAPPER_FUNC(sk);
    kern_printk("inet_sk_rebuild_header returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_timecounter_cyc2time
#define APP_WRAPPER_FOR_timecounter_cyc2time
#endif
 
#ifndef APP_WRAPPER_FOR_timecounter_cyc2time
#define APP_WRAPPER_FOR_timecounter_cyc2time
FUNCTION_WRAPPER(timecounter_cyc2time, (struct timecounter *tc, cycle_t cycle_tstamp), {
    WRAP_RECURSIVE(tc);
    TRACES_IF_WATCHPOINT(tc);
    SCAN_HEAD_FUNC(struct timecounter)(*(TO_UNWATCHED_ADDRESS(tc)));
    kern_printk("timecounter_cyc2time is invoked.\n");
    PRE_WRAPPER_FUNC(tc, cycle_tstamp);
    u64 ret = timecounter_cyc2time(tc, cycle_tstamp);
    POST_WRAPPER_FUNC(tc, cycle_tstamp);
    kern_printk("timecounter_cyc2time returned.\n");
    TRACES_IF_WATCHPOINT(tc);
    SCAN_HEAD_FUNC(struct timecounter)(*(TO_UNWATCHED_ADDRESS(tc)));
    return ret;
})
#endif


#ifndef KERN_ADDR_recalc_sigpending_and_wake
#define APP_WRAPPER_FOR_recalc_sigpending_and_wake
#endif
 
#ifndef APP_WRAPPER_FOR_recalc_sigpending_and_wake
#define APP_WRAPPER_FOR_recalc_sigpending_and_wake
FUNCTION_WRAPPER_VOID(recalc_sigpending_and_wake, (struct task_struct *t), {
    WRAP_RECURSIVE(t);
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(t)));
    kern_printk("recalc_sigpending_and_wake is invoked.\n");
    PRE_WRAPPER_FUNC(t);
    recalc_sigpending_and_wake(t);
    POST_WRAPPER_FUNC(t);
    kern_printk("recalc_sigpending_and_wake returned.\n");
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(t)));
})
#endif


#ifndef KERN_ADDR_paravirt_patch_insns
#define APP_WRAPPER_FOR_paravirt_patch_insns
#endif
 
#ifndef APP_WRAPPER_FOR_paravirt_patch_insns
#define APP_WRAPPER_FOR_paravirt_patch_insns
FUNCTION_WRAPPER(paravirt_patch_insns, (void *insnbuf, unsigned int len, const char *start, const char *end), {
    kern_printk("paravirt_patch_insns is invoked.\n");
    PRE_WRAPPER_FUNC(insnbuf, len, start, end);
    int ret = paravirt_patch_insns(insnbuf, len, start, end);
    POST_WRAPPER_FUNC(insnbuf, len, start, end);
    kern_printk("paravirt_patch_insns returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_task_clear_jobctl_trapping
#define APP_WRAPPER_FOR_task_clear_jobctl_trapping
#endif
 
#ifndef APP_WRAPPER_FOR_task_clear_jobctl_trapping
#define APP_WRAPPER_FOR_task_clear_jobctl_trapping
FUNCTION_WRAPPER_VOID(task_clear_jobctl_trapping, (struct task_struct *task), {
    WRAP_RECURSIVE(task);
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    kern_printk("task_clear_jobctl_trapping is invoked.\n");
    PRE_WRAPPER_FUNC(task);
    task_clear_jobctl_trapping(task);
    POST_WRAPPER_FUNC(task);
    kern_printk("task_clear_jobctl_trapping returned.\n");
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
})
#endif


#ifndef KERN_ADDR_ramfs_fill_super
#define APP_WRAPPER_FOR_ramfs_fill_super
#endif
 
#ifndef APP_WRAPPER_FOR_ramfs_fill_super
#define APP_WRAPPER_FOR_ramfs_fill_super
FUNCTION_WRAPPER(ramfs_fill_super, (struct super_block *sb, void *data, int silent), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("ramfs_fill_super is invoked.\n");
    PRE_WRAPPER_FUNC(sb, data, silent);
    int ret = ramfs_fill_super(sb, data, silent);
    POST_WRAPPER_FUNC(sb, data, silent);
    kern_printk("ramfs_fill_super returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kobject_create_and_add
#define APP_WRAPPER_FOR_kobject_create_and_add
#endif
 
#ifndef APP_WRAPPER_FOR_kobject_create_and_add
#define APP_WRAPPER_FOR_kobject_create_and_add
FUNCTION_WRAPPER(kobject_create_and_add, (const char *name, struct kobject *parent), {
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(parent)));
    kern_printk("kobject_create_and_add is invoked.\n");
    PRE_WRAPPER_FUNC(name, parent);
    struct kobject *ret = kobject_create_and_add(name, parent);
    POST_WRAPPER_FUNC(name, parent);
    kern_printk("kobject_create_and_add returned.\n");
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(parent)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_vmalloc_32_user
#define APP_WRAPPER_FOR_vmalloc_32_user
#endif
 
#ifndef APP_WRAPPER_FOR_vmalloc_32_user
#define APP_WRAPPER_FOR_vmalloc_32_user
FUNCTION_WRAPPER(vmalloc_32_user, (unsigned long size), {
    kern_printk("vmalloc_32_user is invoked.\n");
    PRE_WRAPPER_FUNC(size);
    void *ret = vmalloc_32_user(size);
    POST_WRAPPER_FUNC(size);
    kern_printk("vmalloc_32_user returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_notsc_setup
#define APP_WRAPPER_FOR_notsc_setup
#endif
 
#ifndef APP_WRAPPER_FOR_notsc_setup
#define APP_WRAPPER_FOR_notsc_setup
FUNCTION_WRAPPER(notsc_setup, (char *_arg1), {
    kern_printk("notsc_setup is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = notsc_setup(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("notsc_setup returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_init_jbd_inode
#define APP_WRAPPER_FOR_jbd2_journal_init_jbd_inode
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_init_jbd_inode
#define APP_WRAPPER_FOR_jbd2_journal_init_jbd_inode
FUNCTION_WRAPPER_VOID(jbd2_journal_init_jbd_inode, (struct jbd2_inode *jinode, struct inode *inode), {
    WRAP_RECURSIVE(jinode);
    TRACES_IF_WATCHPOINT(jinode);
    SCAN_HEAD_FUNC(struct jbd2_inode)(*(TO_UNWATCHED_ADDRESS(jinode)));
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("jbd2_journal_init_jbd_inode is invoked.\n");
    PRE_WRAPPER_FUNC(jinode, inode);
    jbd2_journal_init_jbd_inode(jinode, inode);
    POST_WRAPPER_FUNC(jinode, inode);
    kern_printk("jbd2_journal_init_jbd_inode returned.\n");
    TRACES_IF_WATCHPOINT(jinode);
    SCAN_HEAD_FUNC(struct jbd2_inode)(*(TO_UNWATCHED_ADDRESS(jinode)));
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_compat_sys_statfs64
#define APP_WRAPPER_FOR_compat_sys_statfs64
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_statfs64
#define APP_WRAPPER_FOR_compat_sys_statfs64
FUNCTION_WRAPPER(compat_sys_statfs64, (const char *pathname, compat_size_t sz, struct compat_statfs64 *buf), {
    kern_printk("compat_sys_statfs64 is invoked.\n");
    PRE_WRAPPER_FUNC(pathname, sz, buf);
    long ret = compat_sys_statfs64(pathname, sz, buf);
    POST_WRAPPER_FUNC(pathname, sz, buf);
    kern_printk("compat_sys_statfs64 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dmam_free_coherent
#define APP_WRAPPER_FOR_dmam_free_coherent
#endif
 
#ifndef APP_WRAPPER_FOR_dmam_free_coherent
#define APP_WRAPPER_FOR_dmam_free_coherent
FUNCTION_WRAPPER_VOID(dmam_free_coherent, (struct device *dev, size_t size, void *vaddr, dma_addr_t dma_handle), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dmam_free_coherent is invoked.\n");
    PRE_WRAPPER_FUNC(dev, size, vaddr, dma_handle);
    dmam_free_coherent(dev, size, vaddr, dma_handle);
    POST_WRAPPER_FUNC(dev, size, vaddr, dma_handle);
    kern_printk("dmam_free_coherent returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_nf_register_hook
#define APP_WRAPPER_FOR_nf_register_hook
#endif
 
#ifndef APP_WRAPPER_FOR_nf_register_hook
#define APP_WRAPPER_FOR_nf_register_hook
FUNCTION_WRAPPER(nf_register_hook, (struct nf_hook_ops *reg), {
    WRAP_RECURSIVE(reg);
    TRACES_IF_WATCHPOINT(reg);
    SCAN_HEAD_FUNC(struct nf_hook_ops)(*(TO_UNWATCHED_ADDRESS(reg)));
    kern_printk("nf_register_hook is invoked.\n");
    PRE_WRAPPER_FUNC(reg);
    int ret = nf_register_hook(reg);
    POST_WRAPPER_FUNC(reg);
    kern_printk("nf_register_hook returned.\n");
    TRACES_IF_WATCHPOINT(reg);
    SCAN_HEAD_FUNC(struct nf_hook_ops)(*(TO_UNWATCHED_ADDRESS(reg)));
    return ret;
})
#endif


#ifndef KERN_ADDR_unmap_kernel_range
#define APP_WRAPPER_FOR_unmap_kernel_range
#endif
 
#ifndef APP_WRAPPER_FOR_unmap_kernel_range
#define APP_WRAPPER_FOR_unmap_kernel_range
FUNCTION_WRAPPER_VOID(unmap_kernel_range, (unsigned long addr, unsigned long size), {
    kern_printk("unmap_kernel_range is invoked.\n");
    PRE_WRAPPER_FUNC(addr, size);
    unmap_kernel_range(addr, size);
    POST_WRAPPER_FUNC(addr, size);
    kern_printk("unmap_kernel_range returned.\n");
})
#endif


#ifndef KERN_ADDR_calibrate_delay
#define APP_WRAPPER_FOR_calibrate_delay
#endif
 
#ifndef APP_WRAPPER_FOR_calibrate_delay
#define APP_WRAPPER_FOR_calibrate_delay
FUNCTION_WRAPPER_VOID(calibrate_delay, (), {
    kern_printk("calibrate_delay is invoked.\n");
    PRE_WRAPPER_FUNC();
    calibrate_delay();
    POST_WRAPPER_FUNC();
    kern_printk("calibrate_delay returned.\n");
})
#endif


#ifndef KERN_ADDR_seq_putc
#define APP_WRAPPER_FOR_seq_putc
#endif
 
#ifndef APP_WRAPPER_FOR_seq_putc
#define APP_WRAPPER_FOR_seq_putc
FUNCTION_WRAPPER(seq_putc, (struct seq_file *m, char c), {
    WRAP_RECURSIVE(m);
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
    kern_printk("seq_putc is invoked.\n");
    PRE_WRAPPER_FUNC(m, c);
    int ret = seq_putc(m, c);
    POST_WRAPPER_FUNC(m, c);
    kern_printk("seq_putc returned.\n");
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
    return ret;
})
#endif


#ifndef KERN_ADDR_get_compat_timespec
#define APP_WRAPPER_FOR_get_compat_timespec
#endif
 
#ifndef APP_WRAPPER_FOR_get_compat_timespec
#define APP_WRAPPER_FOR_get_compat_timespec
FUNCTION_WRAPPER(get_compat_timespec, (struct timespec *_arg1, const struct compat_timespec *_arg2), {
    kern_printk("get_compat_timespec is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = get_compat_timespec(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("get_compat_timespec returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_seq_puts
#define APP_WRAPPER_FOR_seq_puts
#endif
 
#ifndef APP_WRAPPER_FOR_seq_puts
#define APP_WRAPPER_FOR_seq_puts
FUNCTION_WRAPPER(seq_puts, (struct seq_file *m, const char *s), {
    WRAP_RECURSIVE(m);
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
    kern_printk("seq_puts is invoked.\n");
    PRE_WRAPPER_FUNC(m, s);
    int ret = seq_puts(m, s);
    POST_WRAPPER_FUNC(m, s);
    kern_printk("seq_puts returned.\n");
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_delete_semaphore
#define APP_WRAPPER_FOR_acpi_os_delete_semaphore
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_delete_semaphore
#define APP_WRAPPER_FOR_acpi_os_delete_semaphore
FUNCTION_WRAPPER(acpi_os_delete_semaphore, (void *handle), {
    kern_printk("acpi_os_delete_semaphore is invoked.\n");
    PRE_WRAPPER_FUNC(handle);
    acpi_status ret = acpi_os_delete_semaphore(handle);
    POST_WRAPPER_FUNC(handle);
    kern_printk("acpi_os_delete_semaphore returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ll_rw_block
#define APP_WRAPPER_FOR_ll_rw_block
#endif
 
#ifndef APP_WRAPPER_FOR_ll_rw_block
#define APP_WRAPPER_FOR_ll_rw_block
FUNCTION_WRAPPER_VOID(ll_rw_block, (int _arg1, int _arg2, struct buffer_head * bh[]), {
    kern_printk("ll_rw_block is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, bh);
    ll_rw_block(_arg1, _arg2, bh);
    POST_WRAPPER_FUNC(_arg1, _arg2, bh);
    kern_printk("ll_rw_block returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_bus_set_power
#define APP_WRAPPER_FOR_acpi_bus_set_power
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_bus_set_power
#define APP_WRAPPER_FOR_acpi_bus_set_power
FUNCTION_WRAPPER(acpi_bus_set_power, (acpi_handle handle, int state), {
    kern_printk("acpi_bus_set_power is invoked.\n");
    PRE_WRAPPER_FUNC(handle, state);
    int ret = acpi_bus_set_power(handle, state);
    POST_WRAPPER_FUNC(handle, state);
    kern_printk("acpi_bus_set_power returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_timer_create
#define APP_WRAPPER_FOR_compat_sys_timer_create
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_timer_create
#define APP_WRAPPER_FOR_compat_sys_timer_create
FUNCTION_WRAPPER(compat_sys_timer_create, (clockid_t which_clock, struct compat_sigevent *timer_event_spec, timer_t *created_timer_id), {
    kern_printk("compat_sys_timer_create is invoked.\n");
    PRE_WRAPPER_FUNC(which_clock, timer_event_spec, created_timer_id);
    long ret = compat_sys_timer_create(which_clock, timer_event_spec, created_timer_id);
    POST_WRAPPER_FUNC(which_clock, timer_event_spec, created_timer_id);
    kern_printk("compat_sys_timer_create returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dql_init
#define APP_WRAPPER_FOR_dql_init
#endif
 
#ifndef APP_WRAPPER_FOR_dql_init
#define APP_WRAPPER_FOR_dql_init
FUNCTION_WRAPPER(dql_init, (struct dql *dql, unsigned int hold_time), {
    kern_printk("dql_init is invoked.\n");
    PRE_WRAPPER_FUNC(dql, hold_time);
    int ret = dql_init(dql, hold_time);
    POST_WRAPPER_FUNC(dql, hold_time);
    kern_printk("dql_init returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_copy_and_csum_datagram_iovec
#define APP_WRAPPER_FOR_skb_copy_and_csum_datagram_iovec
#endif
 
#ifndef APP_WRAPPER_FOR_skb_copy_and_csum_datagram_iovec
#define APP_WRAPPER_FOR_skb_copy_and_csum_datagram_iovec
FUNCTION_WRAPPER(skb_copy_and_csum_datagram_iovec, (struct sk_buff *skb, int hlen, struct iovec *iov), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_copy_and_csum_datagram_iovec is invoked.\n");
    PRE_WRAPPER_FUNC(skb, hlen, iov);
    int ret = skb_copy_and_csum_datagram_iovec(skb, hlen, iov);
    POST_WRAPPER_FUNC(skb, hlen, iov);
    kern_printk("skb_copy_and_csum_datagram_iovec returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sk_send_sigurg
#define APP_WRAPPER_FOR_sk_send_sigurg
#endif
 
#ifndef APP_WRAPPER_FOR_sk_send_sigurg
#define APP_WRAPPER_FOR_sk_send_sigurg
FUNCTION_WRAPPER_VOID(sk_send_sigurg, (struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sk_send_sigurg is invoked.\n");
    PRE_WRAPPER_FUNC(sk);
    sk_send_sigurg(sk);
    POST_WRAPPER_FUNC(sk);
    kern_printk("sk_send_sigurg returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR_simple_lookup
#define APP_WRAPPER_FOR_simple_lookup
#endif
 
#ifndef APP_WRAPPER_FOR_simple_lookup
#define APP_WRAPPER_FOR_simple_lookup
FUNCTION_WRAPPER(simple_lookup, (struct inode *_arg1, struct dentry *_arg2, unsigned int flags), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("simple_lookup is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, flags);
    struct dentry *ret = simple_lookup(_arg1, _arg2, flags);
    POST_WRAPPER_FUNC(_arg1, _arg2, flags);
    kern_printk("simple_lookup returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_phy_ethtool_gset
#define APP_WRAPPER_FOR_phy_ethtool_gset
#endif
 
#ifndef APP_WRAPPER_FOR_phy_ethtool_gset
#define APP_WRAPPER_FOR_phy_ethtool_gset
FUNCTION_WRAPPER(phy_ethtool_gset, (struct phy_device *phydev, struct ethtool_cmd *cmd), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    kern_printk("phy_ethtool_gset is invoked.\n");
    PRE_WRAPPER_FUNC(phydev, cmd);
    int ret = phy_ethtool_gset(phydev, cmd);
    POST_WRAPPER_FUNC(phydev, cmd);
    kern_printk("phy_ethtool_gset returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_get_tsc_mode
#define APP_WRAPPER_FOR_get_tsc_mode
#endif
 
#ifndef APP_WRAPPER_FOR_get_tsc_mode
#define APP_WRAPPER_FOR_get_tsc_mode
FUNCTION_WRAPPER(get_tsc_mode, (unsigned long adr), {
    kern_printk("get_tsc_mode is invoked.\n");
    PRE_WRAPPER_FUNC(adr);
    int ret = get_tsc_mode(adr);
    POST_WRAPPER_FUNC(adr);
    kern_printk("get_tsc_mode returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ioremap_wc
#define APP_WRAPPER_FOR_ioremap_wc
#endif
 
#ifndef APP_WRAPPER_FOR_ioremap_wc
#define APP_WRAPPER_FOR_ioremap_wc
FUNCTION_WRAPPER(ioremap_wc, (resource_size_t offset, unsigned long size), {
    kern_printk("ioremap_wc is invoked.\n");
    PRE_WRAPPER_FUNC(offset, size);
    void *ret = ioremap_wc(offset, size);
    POST_WRAPPER_FUNC(offset, size);
    kern_printk("ioremap_wc returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_noflush_suspending
#define APP_WRAPPER_FOR_dm_noflush_suspending
#endif
 
#ifndef APP_WRAPPER_FOR_dm_noflush_suspending
#define APP_WRAPPER_FOR_dm_noflush_suspending
FUNCTION_WRAPPER(dm_noflush_suspending, (struct dm_target *ti), {
    WRAP_RECURSIVE(ti);
    TRACES_IF_WATCHPOINT(ti);
    SCAN_HEAD_FUNC(struct dm_target)(*(TO_UNWATCHED_ADDRESS(ti)));
    kern_printk("dm_noflush_suspending is invoked.\n");
    PRE_WRAPPER_FUNC(ti);
    int ret = dm_noflush_suspending(ti);
    POST_WRAPPER_FUNC(ti);
    kern_printk("dm_noflush_suspending returned.\n");
    TRACES_IF_WATCHPOINT(ti);
    SCAN_HEAD_FUNC(struct dm_target)(*(TO_UNWATCHED_ADDRESS(ti)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_sendfile
#define APP_WRAPPER_FOR_compat_sys_sendfile
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_sendfile
#define APP_WRAPPER_FOR_compat_sys_sendfile
FUNCTION_WRAPPER(compat_sys_sendfile, (int out_fd, int in_fd, compat_off_t *offset, compat_size_t count), {
    kern_printk("compat_sys_sendfile is invoked.\n");
    PRE_WRAPPER_FUNC(out_fd, in_fd, offset, count);
    long ret = compat_sys_sendfile(out_fd, in_fd, offset, count);
    POST_WRAPPER_FUNC(out_fd, in_fd, offset, count);
    kern_printk("compat_sys_sendfile returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_device_show_int
#define APP_WRAPPER_FOR_device_show_int
#endif
 
#ifndef APP_WRAPPER_FOR_device_show_int
#define APP_WRAPPER_FOR_device_show_int
FUNCTION_WRAPPER(device_show_int, (struct device *dev, struct device_attribute *attr, char *buf), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(attr);
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(struct device_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    kern_printk("device_show_int is invoked.\n");
    PRE_WRAPPER_FUNC(dev, attr, buf);
    ssize_t ret = device_show_int(dev, attr, buf);
    POST_WRAPPER_FUNC(dev, attr, buf);
    kern_printk("device_show_int returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(struct device_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    return ret;
})
#endif


#ifndef KERN_ADDR_truncate_inode_page
#define APP_WRAPPER_FOR_truncate_inode_page
#endif
 
#ifndef APP_WRAPPER_FOR_truncate_inode_page
#define APP_WRAPPER_FOR_truncate_inode_page
FUNCTION_WRAPPER(truncate_inode_page, (struct address_space *mapping, struct page *page), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("truncate_inode_page is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, page);
    int ret = truncate_inode_page(mapping, page);
    POST_WRAPPER_FUNC(mapping, page);
    kern_printk("truncate_inode_page returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_early_memremap
#define APP_WRAPPER_FOR_early_memremap
#endif
 
#ifndef APP_WRAPPER_FOR_early_memremap
#define APP_WRAPPER_FOR_early_memremap
FUNCTION_WRAPPER(early_memremap, (resource_size_t phys_addr, unsigned long size), {
    kern_printk("early_memremap is invoked.\n");
    PRE_WRAPPER_FUNC(phys_addr, size);
    void *ret = early_memremap(phys_addr, size);
    POST_WRAPPER_FUNC(phys_addr, size);
    kern_printk("early_memremap returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_get
#define APP_WRAPPER_FOR_dm_get
#endif
 
#ifndef APP_WRAPPER_FOR_dm_get
#define APP_WRAPPER_FOR_dm_get
FUNCTION_WRAPPER_VOID(dm_get, (struct mapped_device *md), {
    kern_printk("dm_get is invoked.\n");
    PRE_WRAPPER_FUNC(md);
    dm_get(md);
    POST_WRAPPER_FUNC(md);
    kern_printk("dm_get returned.\n");
})
#endif


#ifndef KERN_ADDR_compat_sys_move_pages
#define APP_WRAPPER_FOR_compat_sys_move_pages
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_move_pages
#define APP_WRAPPER_FOR_compat_sys_move_pages
FUNCTION_WRAPPER(compat_sys_move_pages, (pid_t pid, unsigned long nr_page, __u32 *pages, const int *nodes, int *status, int flags), {
    kern_printk("compat_sys_move_pages is invoked.\n");
    PRE_WRAPPER_FUNC(pid, nr_page, pages, nodes, status, flags);
    long ret = compat_sys_move_pages(pid, nr_page, pages, nodes, status, flags);
    POST_WRAPPER_FUNC(pid, nr_page, pages, nodes, status, flags);
    kern_printk("compat_sys_move_pages returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_rcu_bh_force_quiescent_state
#define APP_WRAPPER_FOR_rcu_bh_force_quiescent_state
#endif
 
#ifndef APP_WRAPPER_FOR_rcu_bh_force_quiescent_state
#define APP_WRAPPER_FOR_rcu_bh_force_quiescent_state
FUNCTION_WRAPPER_VOID(rcu_bh_force_quiescent_state, (), {
    kern_printk("rcu_bh_force_quiescent_state is invoked.\n");
    PRE_WRAPPER_FUNC();
    rcu_bh_force_quiescent_state();
    POST_WRAPPER_FUNC();
    kern_printk("rcu_bh_force_quiescent_state returned.\n");
})
#endif


#ifndef KERN_ADDR_blk_set_stacking_limits
#define APP_WRAPPER_FOR_blk_set_stacking_limits
#endif
 
#ifndef APP_WRAPPER_FOR_blk_set_stacking_limits
#define APP_WRAPPER_FOR_blk_set_stacking_limits
FUNCTION_WRAPPER_VOID(blk_set_stacking_limits, (struct queue_limits *lim), {
    kern_printk("blk_set_stacking_limits is invoked.\n");
    PRE_WRAPPER_FUNC(lim);
    blk_set_stacking_limits(lim);
    POST_WRAPPER_FUNC(lim);
    kern_printk("blk_set_stacking_limits returned.\n");
})
#endif


#ifndef KERN_ADDR_dcache_dir_open
#define APP_WRAPPER_FOR_dcache_dir_open
#endif
 
#ifndef APP_WRAPPER_FOR_dcache_dir_open
#define APP_WRAPPER_FOR_dcache_dir_open
FUNCTION_WRAPPER(dcache_dir_open, (struct inode *_arg1, struct file *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("dcache_dir_open is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = dcache_dir_open(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("dcache_dir_open returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_bus_alloc_resource
#define APP_WRAPPER_FOR_pci_bus_alloc_resource
#endif
 
#ifndef APP_WRAPPER_FOR_pci_bus_alloc_resource
#define APP_WRAPPER_FOR_pci_bus_alloc_resource
FUNCTION_WRAPPER(pci_bus_alloc_resource, (struct pci_bus *bus, struct resource *res, resource_size_t size, resource_size_t align, resource_size_t min, unsigned int type_mask, resource_size_t (*alignf)(void *, const struct resource *, resource_size_t, resource_size_t), void *alignf_data), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    WRAP_FUNCTION(alignf);
    kern_printk("pci_bus_alloc_resource is invoked.\n");
    PRE_WRAPPER_FUNC(bus, res, size, align, min, type_mask, alignf, alignf_data);
    int ret = pci_bus_alloc_resource(bus, res, size, align, min, type_mask, alignf, alignf_data);
    POST_WRAPPER_FUNC(bus, res, size, align, min, type_mask, alignf, alignf_data);
    kern_printk("pci_bus_alloc_resource returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pnp_unregister_card_driver
#define APP_WRAPPER_FOR_pnp_unregister_card_driver
#endif
 
#ifndef APP_WRAPPER_FOR_pnp_unregister_card_driver
#define APP_WRAPPER_FOR_pnp_unregister_card_driver
FUNCTION_WRAPPER_VOID(pnp_unregister_card_driver, (struct pnp_card_driver *drv), {
    WRAP_RECURSIVE(drv);
    TRACES_IF_WATCHPOINT(drv);
    SCAN_HEAD_FUNC(struct pnp_card_driver)(*(TO_UNWATCHED_ADDRESS(drv)));
    kern_printk("pnp_unregister_card_driver is invoked.\n");
    PRE_WRAPPER_FUNC(drv);
    pnp_unregister_card_driver(drv);
    POST_WRAPPER_FUNC(drv);
    kern_printk("pnp_unregister_card_driver returned.\n");
    TRACES_IF_WATCHPOINT(drv);
    SCAN_HEAD_FUNC(struct pnp_card_driver)(*(TO_UNWATCHED_ADDRESS(drv)));
})
#endif


#ifndef KERN_ADDR_ethtool_op_get_link
#define APP_WRAPPER_FOR_ethtool_op_get_link
#endif
 
#ifndef APP_WRAPPER_FOR_ethtool_op_get_link
#define APP_WRAPPER_FOR_ethtool_op_get_link
FUNCTION_WRAPPER(ethtool_op_get_link, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("ethtool_op_get_link is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    u32 ret = ethtool_op_get_link(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("ethtool_op_get_link returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_bus_resource_n
#define APP_WRAPPER_FOR_pci_bus_resource_n
#endif
 
#ifndef APP_WRAPPER_FOR_pci_bus_resource_n
#define APP_WRAPPER_FOR_pci_bus_resource_n
FUNCTION_WRAPPER(pci_bus_resource_n, (const struct pci_bus *bus, int n), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(const struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_bus_resource_n is invoked.\n");
    PRE_WRAPPER_FUNC(bus, n);
    struct resource *ret = pci_bus_resource_n(bus, n);
    POST_WRAPPER_FUNC(bus, n);
    kern_printk("pci_bus_resource_n returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(const struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_do_sigaltstack
#define APP_WRAPPER_FOR_do_sigaltstack
#endif
 
#ifndef APP_WRAPPER_FOR_do_sigaltstack
#define APP_WRAPPER_FOR_do_sigaltstack
FUNCTION_WRAPPER(do_sigaltstack, (const stack_t *_arg1, stack_t *_arg2, unsigned long _arg3), {
    kern_printk("do_sigaltstack is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = do_sigaltstack(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("do_sigaltstack returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_link_online
#define APP_WRAPPER_FOR_ata_link_online
#endif
 
#ifndef APP_WRAPPER_FOR_ata_link_online
#define APP_WRAPPER_FOR_ata_link_online
FUNCTION_WRAPPER(ata_link_online, (struct ata_link *link), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    kern_printk("ata_link_online is invoked.\n");
    PRE_WRAPPER_FUNC(link);
    bool ret = ata_link_online(link);
    POST_WRAPPER_FUNC(link);
    kern_printk("ata_link_online returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    return ret;
})
#endif


#ifndef KERN_ADDR_free_bootmem_with_active_regions
#define APP_WRAPPER_FOR_free_bootmem_with_active_regions
#endif
 
#ifndef APP_WRAPPER_FOR_free_bootmem_with_active_regions
#define APP_WRAPPER_FOR_free_bootmem_with_active_regions
FUNCTION_WRAPPER_VOID(free_bootmem_with_active_regions, (int nid, unsigned long max_low_pfn), {
    kern_printk("free_bootmem_with_active_regions is invoked.\n");
    PRE_WRAPPER_FUNC(nid, max_low_pfn);
    free_bootmem_with_active_regions(nid, max_low_pfn);
    POST_WRAPPER_FUNC(nid, max_low_pfn);
    kern_printk("free_bootmem_with_active_regions returned.\n");
})
#endif


#ifndef KERN_ADDR___kfree_skb
#define APP_WRAPPER_FOR___kfree_skb
#endif
 
#ifndef APP_WRAPPER_FOR___kfree_skb
#define APP_WRAPPER_FOR___kfree_skb
FUNCTION_WRAPPER_VOID(__kfree_skb, (struct sk_buff *skb), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("__kfree_skb is invoked.\n");
    PRE_WRAPPER_FUNC(skb);
    __kfree_skb(skb);
    POST_WRAPPER_FUNC(skb);
    kern_printk("__kfree_skb returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_rtnl_link_unregister
#define APP_WRAPPER_FOR_rtnl_link_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_rtnl_link_unregister
#define APP_WRAPPER_FOR_rtnl_link_unregister
FUNCTION_WRAPPER_VOID(rtnl_link_unregister, (struct rtnl_link_ops *ops), {
    WRAP_RECURSIVE(ops);
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct rtnl_link_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    kern_printk("rtnl_link_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(ops);
    rtnl_link_unregister(ops);
    POST_WRAPPER_FUNC(ops);
    kern_printk("rtnl_link_unregister returned.\n");
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct rtnl_link_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
})
#endif


#ifndef KERN_ADDR_sock_wfree
#define APP_WRAPPER_FOR_sock_wfree
#endif
 
#ifndef APP_WRAPPER_FOR_sock_wfree
#define APP_WRAPPER_FOR_sock_wfree
FUNCTION_WRAPPER_VOID(sock_wfree, (struct sk_buff *skb), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("sock_wfree is invoked.\n");
    PRE_WRAPPER_FUNC(skb);
    sock_wfree(skb);
    POST_WRAPPER_FUNC(skb);
    kern_printk("sock_wfree returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_cap_task_prctl
#define APP_WRAPPER_FOR_cap_task_prctl
#endif
 
#ifndef APP_WRAPPER_FOR_cap_task_prctl
#define APP_WRAPPER_FOR_cap_task_prctl
FUNCTION_WRAPPER(cap_task_prctl, (int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5), {
    kern_printk("cap_task_prctl is invoked.\n");
    PRE_WRAPPER_FUNC(option, arg2, arg3, arg4, arg5);
    int ret = cap_task_prctl(option, arg2, arg3, arg4, arg5);
    POST_WRAPPER_FUNC(option, arg2, arg3, arg4, arg5);
    kern_printk("cap_task_prctl returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_disk_map_sector_rcu
#define APP_WRAPPER_FOR_disk_map_sector_rcu
#endif
 
#ifndef APP_WRAPPER_FOR_disk_map_sector_rcu
#define APP_WRAPPER_FOR_disk_map_sector_rcu
FUNCTION_WRAPPER(disk_map_sector_rcu, (struct gendisk *disk, sector_t sector), {
    WRAP_RECURSIVE(disk);
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    kern_printk("disk_map_sector_rcu is invoked.\n");
    PRE_WRAPPER_FUNC(disk, sector);
    struct hd_struct *ret = disk_map_sector_rcu(disk, sector);
    POST_WRAPPER_FUNC(disk, sector);
    kern_printk("disk_map_sector_rcu returned.\n");
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_get_devices
#define APP_WRAPPER_FOR_acpi_get_devices
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_devices
#define APP_WRAPPER_FOR_acpi_get_devices
FUNCTION_WRAPPER(acpi_get_devices, (const char *HID, acpi_walk_callback user_function, void *context, void **return_value), {
    WRAP_FUNCTION(user_function);
    kern_printk("acpi_get_devices is invoked.\n");
    PRE_WRAPPER_FUNC(HID, user_function, context, return_value);
    acpi_status ret = acpi_get_devices(HID, user_function, context, return_value);
    POST_WRAPPER_FUNC(HID, user_function, context, return_value);
    kern_printk("acpi_get_devices returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_clear_mwi
#define APP_WRAPPER_FOR_pci_clear_mwi
#endif
 
#ifndef APP_WRAPPER_FOR_pci_clear_mwi
#define APP_WRAPPER_FOR_pci_clear_mwi
FUNCTION_WRAPPER_VOID(pci_clear_mwi, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_clear_mwi is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pci_clear_mwi(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_clear_mwi returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_compat_sys_msgsnd
#define APP_WRAPPER_FOR_compat_sys_msgsnd
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_msgsnd
#define APP_WRAPPER_FOR_compat_sys_msgsnd
FUNCTION_WRAPPER(compat_sys_msgsnd, (int first, int second, int third, void *uptr), {
    kern_printk("compat_sys_msgsnd is invoked.\n");
    PRE_WRAPPER_FUNC(first, second, third, uptr);
    long ret = compat_sys_msgsnd(first, second, third, uptr);
    POST_WRAPPER_FUNC(first, second, third, uptr);
    kern_printk("compat_sys_msgsnd returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sched_group_set_shares
#define APP_WRAPPER_FOR_sched_group_set_shares
#endif
 
#ifndef APP_WRAPPER_FOR_sched_group_set_shares
#define APP_WRAPPER_FOR_sched_group_set_shares
FUNCTION_WRAPPER(sched_group_set_shares, (struct task_group *tg, unsigned long shares), {
    kern_printk("sched_group_set_shares is invoked.\n");
    PRE_WRAPPER_FUNC(tg, shares);
    int ret = sched_group_set_shares(tg, shares);
    POST_WRAPPER_FUNC(tg, shares);
    kern_printk("sched_group_set_shares returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sysfs_remove_group
#define APP_WRAPPER_FOR_sysfs_remove_group
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_remove_group
#define APP_WRAPPER_FOR_sysfs_remove_group
FUNCTION_WRAPPER_VOID(sysfs_remove_group, (struct kobject *kobj, const struct attribute_group *grp), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    WRAP_RECURSIVE(grp);
    TRACES_IF_WATCHPOINT(grp);
    SCAN_HEAD_FUNC(const struct attribute_group)(*(TO_UNWATCHED_ADDRESS(grp)));
    kern_printk("sysfs_remove_group is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, grp);
    sysfs_remove_group(kobj, grp);
    POST_WRAPPER_FUNC(kobj, grp);
    kern_printk("sysfs_remove_group returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    TRACES_IF_WATCHPOINT(grp);
    SCAN_HEAD_FUNC(const struct attribute_group)(*(TO_UNWATCHED_ADDRESS(grp)));
})
#endif


#ifndef KERN_ADDR_elv_requeue_request
#define APP_WRAPPER_FOR_elv_requeue_request
#endif
 
#ifndef APP_WRAPPER_FOR_elv_requeue_request
#define APP_WRAPPER_FOR_elv_requeue_request
FUNCTION_WRAPPER_VOID(elv_requeue_request, (struct request_queue *_arg1, struct request *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("elv_requeue_request is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    elv_requeue_request(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("elv_requeue_request returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_jbd2_journal_init_inode
#define APP_WRAPPER_FOR_jbd2_journal_init_inode
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_init_inode
#define APP_WRAPPER_FOR_jbd2_journal_init_inode
FUNCTION_WRAPPER(jbd2_journal_init_inode, (struct inode *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_init_inode is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    journal_t *ret = jbd2_journal_init_inode(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("jbd2_journal_init_inode returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_sort_breadthfirst
#define APP_WRAPPER_FOR_pci_sort_breadthfirst
#endif
 
#ifndef APP_WRAPPER_FOR_pci_sort_breadthfirst
#define APP_WRAPPER_FOR_pci_sort_breadthfirst
FUNCTION_WRAPPER_VOID(pci_sort_breadthfirst, (), {
    kern_printk("pci_sort_breadthfirst is invoked.\n");
    PRE_WRAPPER_FUNC();
    pci_sort_breadthfirst();
    POST_WRAPPER_FUNC();
    kern_printk("pci_sort_breadthfirst returned.\n");
})
#endif


#ifndef KERN_ADDR___netdev_update_features
#define APP_WRAPPER_FOR___netdev_update_features
#endif
 
#ifndef APP_WRAPPER_FOR___netdev_update_features
#define APP_WRAPPER_FOR___netdev_update_features
FUNCTION_WRAPPER(__netdev_update_features, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("__netdev_update_features is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = __netdev_update_features(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("__netdev_update_features returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_get_user_pages_fast
#define APP_WRAPPER_FOR_get_user_pages_fast
#endif
 
#ifndef APP_WRAPPER_FOR_get_user_pages_fast
#define APP_WRAPPER_FOR_get_user_pages_fast
FUNCTION_WRAPPER(get_user_pages_fast, (unsigned long start, int nr_pages, int write, struct page **pages), {
    WRAP_RECURSIVE(pages);
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    kern_printk("get_user_pages_fast is invoked.\n");
    PRE_WRAPPER_FUNC(start, nr_pages, write, pages);
    int ret = get_user_pages_fast(start, nr_pages, write, pages);
    POST_WRAPPER_FUNC(start, nr_pages, write, pages);
    kern_printk("get_user_pages_fast returned.\n");
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    return ret;
})
#endif


#ifndef KERN_ADDR_setup_nr_cpu_ids
#define APP_WRAPPER_FOR_setup_nr_cpu_ids
#endif
 
#ifndef APP_WRAPPER_FOR_setup_nr_cpu_ids
#define APP_WRAPPER_FOR_setup_nr_cpu_ids
FUNCTION_WRAPPER_VOID(setup_nr_cpu_ids, (), {
    kern_printk("setup_nr_cpu_ids is invoked.\n");
    PRE_WRAPPER_FUNC();
    setup_nr_cpu_ids();
    POST_WRAPPER_FUNC();
    kern_printk("setup_nr_cpu_ids returned.\n");
})
#endif


#ifndef KERN_ADDR_simple_strtoull
#define APP_WRAPPER_FOR_simple_strtoull
#endif
 
#ifndef APP_WRAPPER_FOR_simple_strtoull
#define APP_WRAPPER_FOR_simple_strtoull
FUNCTION_WRAPPER(simple_strtoull, (const char *_arg1, char **_arg2, unsigned int _arg3), {
    kern_printk("simple_strtoull is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    long long ret = simple_strtoull(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("simple_strtoull returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_napi_get_frags
#define APP_WRAPPER_FOR_napi_get_frags
#endif
 
#ifndef APP_WRAPPER_FOR_napi_get_frags
#define APP_WRAPPER_FOR_napi_get_frags
FUNCTION_WRAPPER(napi_get_frags, (struct napi_struct *napi), {
    WRAP_RECURSIVE(napi);
    TRACES_IF_WATCHPOINT(napi);
    SCAN_HEAD_FUNC(struct napi_struct)(*(TO_UNWATCHED_ADDRESS(napi)));
    kern_printk("napi_get_frags is invoked.\n");
    PRE_WRAPPER_FUNC(napi);
    struct sk_buff *ret = napi_get_frags(napi);
    POST_WRAPPER_FUNC(napi);
    kern_printk("napi_get_frags returned.\n");
    TRACES_IF_WATCHPOINT(napi);
    SCAN_HEAD_FUNC(struct napi_struct)(*(TO_UNWATCHED_ADDRESS(napi)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_set_cpus_allowed_ptr
#define APP_WRAPPER_FOR_set_cpus_allowed_ptr
#endif
 
#ifndef APP_WRAPPER_FOR_set_cpus_allowed_ptr
#define APP_WRAPPER_FOR_set_cpus_allowed_ptr
FUNCTION_WRAPPER(set_cpus_allowed_ptr, (struct task_struct *p, const struct cpumask *new_mask), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("set_cpus_allowed_ptr is invoked.\n");
    PRE_WRAPPER_FUNC(p, new_mask);
    int ret = set_cpus_allowed_ptr(p, new_mask);
    POST_WRAPPER_FUNC(p, new_mask);
    kern_printk("set_cpus_allowed_ptr returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    return ret;
})
#endif


#ifndef KERN_ADDR_native_play_dead
#define APP_WRAPPER_FOR_native_play_dead
#endif
 
#ifndef APP_WRAPPER_FOR_native_play_dead
#define APP_WRAPPER_FOR_native_play_dead
FUNCTION_WRAPPER_VOID(native_play_dead, (), {
    kern_printk("native_play_dead is invoked.\n");
    PRE_WRAPPER_FUNC();
    native_play_dead();
    POST_WRAPPER_FUNC();
    kern_printk("native_play_dead returned.\n");
})
#endif


#ifndef KERN_ADDR_kobject_uevent
#define APP_WRAPPER_FOR_kobject_uevent
#endif
 
#ifndef APP_WRAPPER_FOR_kobject_uevent
#define APP_WRAPPER_FOR_kobject_uevent
FUNCTION_WRAPPER(kobject_uevent, (struct kobject *kobj, enum kobject_action action), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    kern_printk("kobject_uevent is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, action);
    int ret = kobject_uevent(kobj, action);
    POST_WRAPPER_FUNC(kobj, action);
    kern_printk("kobject_uevent returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_swiotlb_detect_4gb
#define APP_WRAPPER_FOR_pci_swiotlb_detect_4gb
#endif
 
#ifndef APP_WRAPPER_FOR_pci_swiotlb_detect_4gb
#define APP_WRAPPER_FOR_pci_swiotlb_detect_4gb
FUNCTION_WRAPPER(pci_swiotlb_detect_4gb, (), {
    kern_printk("pci_swiotlb_detect_4gb is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = pci_swiotlb_detect_4gb();
    POST_WRAPPER_FUNC();
    kern_printk("pci_swiotlb_detect_4gb returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_device_bind_driver
#define APP_WRAPPER_FOR_device_bind_driver
#endif
 
#ifndef APP_WRAPPER_FOR_device_bind_driver
#define APP_WRAPPER_FOR_device_bind_driver
FUNCTION_WRAPPER(device_bind_driver, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("device_bind_driver is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = device_bind_driver(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("device_bind_driver returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_scsi_cmd_blk_ioctl
#define APP_WRAPPER_FOR_scsi_cmd_blk_ioctl
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_cmd_blk_ioctl
#define APP_WRAPPER_FOR_scsi_cmd_blk_ioctl
FUNCTION_WRAPPER(scsi_cmd_blk_ioctl, (struct block_device *_arg1, fmode_t _arg2, unsigned int _arg3, void *_arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("scsi_cmd_blk_ioctl is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = scsi_cmd_blk_ioctl(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("scsi_cmd_blk_ioctl returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_driver_unregister
#define APP_WRAPPER_FOR_driver_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_driver_unregister
#define APP_WRAPPER_FOR_driver_unregister
FUNCTION_WRAPPER_VOID(driver_unregister, (struct device_driver *drv), {
    WRAP_RECURSIVE(drv);
    TRACES_IF_WATCHPOINT(drv);
    SCAN_HEAD_FUNC(struct device_driver)(*(TO_UNWATCHED_ADDRESS(drv)));
    kern_printk("driver_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(drv);
    driver_unregister(drv);
    POST_WRAPPER_FUNC(drv);
    kern_printk("driver_unregister returned.\n");
    TRACES_IF_WATCHPOINT(drv);
    SCAN_HEAD_FUNC(struct device_driver)(*(TO_UNWATCHED_ADDRESS(drv)));
})
#endif


#ifndef KERN_ADDR_rtnl_set_sk_err
#define APP_WRAPPER_FOR_rtnl_set_sk_err
#endif
 
#ifndef APP_WRAPPER_FOR_rtnl_set_sk_err
#define APP_WRAPPER_FOR_rtnl_set_sk_err
FUNCTION_WRAPPER_VOID(rtnl_set_sk_err, (struct net *net, u32 group, int error), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    kern_printk("rtnl_set_sk_err is invoked.\n");
    PRE_WRAPPER_FUNC(net, group, error);
    rtnl_set_sk_err(net, group, error);
    POST_WRAPPER_FUNC(net, group, error);
    kern_printk("rtnl_set_sk_err returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
})
#endif


#ifndef KERN_ADDR_vmemmap_pte_populate
#define APP_WRAPPER_FOR_vmemmap_pte_populate
#endif
 
#ifndef APP_WRAPPER_FOR_vmemmap_pte_populate
#define APP_WRAPPER_FOR_vmemmap_pte_populate
FUNCTION_WRAPPER(vmemmap_pte_populate, (pmd_t *pmd, unsigned long addr, int node), {
    kern_printk("vmemmap_pte_populate is invoked.\n");
    PRE_WRAPPER_FUNC(pmd, addr, node);
    pte_t *ret = vmemmap_pte_populate(pmd, addr, node);
    POST_WRAPPER_FUNC(pmd, addr, node);
    kern_printk("vmemmap_pte_populate returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_pci_bind_root
#define APP_WRAPPER_FOR_acpi_pci_bind_root
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_pci_bind_root
#define APP_WRAPPER_FOR_acpi_pci_bind_root
FUNCTION_WRAPPER(acpi_pci_bind_root, (struct acpi_device *device), {
    WRAP_RECURSIVE(device);
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(device)));
    kern_printk("acpi_pci_bind_root is invoked.\n");
    PRE_WRAPPER_FUNC(device);
    int ret = acpi_pci_bind_root(device);
    POST_WRAPPER_FUNC(device);
    kern_printk("acpi_pci_bind_root returned.\n");
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(device)));
    return ret;
})
#endif


#ifndef KERN_ADDR_rcu_batches_completed
#define APP_WRAPPER_FOR_rcu_batches_completed
#endif
 
#ifndef APP_WRAPPER_FOR_rcu_batches_completed
#define APP_WRAPPER_FOR_rcu_batches_completed
FUNCTION_WRAPPER(rcu_batches_completed, (), {
    kern_printk("rcu_batches_completed is invoked.\n");
    PRE_WRAPPER_FUNC();
    long ret = rcu_batches_completed();
    POST_WRAPPER_FUNC();
    kern_printk("rcu_batches_completed returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_init_srcu_struct
#define APP_WRAPPER_FOR_init_srcu_struct
#endif
 
#ifndef APP_WRAPPER_FOR_init_srcu_struct
#define APP_WRAPPER_FOR_init_srcu_struct
FUNCTION_WRAPPER(init_srcu_struct, (struct srcu_struct *sp), {
    WRAP_RECURSIVE(sp);
    TRACES_IF_WATCHPOINT(sp);
    SCAN_HEAD_FUNC(struct srcu_struct)(*(TO_UNWATCHED_ADDRESS(sp)));
    kern_printk("init_srcu_struct is invoked.\n");
    PRE_WRAPPER_FUNC(sp);
    int ret = init_srcu_struct(sp);
    POST_WRAPPER_FUNC(sp);
    kern_printk("init_srcu_struct returned.\n");
    TRACES_IF_WATCHPOINT(sp);
    SCAN_HEAD_FUNC(struct srcu_struct)(*(TO_UNWATCHED_ADDRESS(sp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_scsi_register
#define APP_WRAPPER_FOR_scsi_register
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_register
#define APP_WRAPPER_FOR_scsi_register
FUNCTION_WRAPPER(scsi_register, (struct scsi_host_template *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct scsi_host_template)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("scsi_register is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct Scsi_Host *ret = scsi_register(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("scsi_register returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct scsi_host_template)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_stable_page_flags
#define APP_WRAPPER_FOR_stable_page_flags
#endif
 
#ifndef APP_WRAPPER_FOR_stable_page_flags
#define APP_WRAPPER_FOR_stable_page_flags
FUNCTION_WRAPPER(stable_page_flags, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("stable_page_flags is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    u64 ret = stable_page_flags(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("stable_page_flags returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_neigh_ifdown
#define APP_WRAPPER_FOR_neigh_ifdown
#endif
 
#ifndef APP_WRAPPER_FOR_neigh_ifdown
#define APP_WRAPPER_FOR_neigh_ifdown
FUNCTION_WRAPPER(neigh_ifdown, (struct neigh_table *tbl, struct net_device *dev), {
    WRAP_RECURSIVE(tbl);
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("neigh_ifdown is invoked.\n");
    PRE_WRAPPER_FUNC(tbl, dev);
    int ret = neigh_ifdown(tbl, dev);
    POST_WRAPPER_FUNC(tbl, dev);
    kern_printk("neigh_ifdown returned.\n");
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_nla_reserve
#define APP_WRAPPER_FOR_nla_reserve
#endif
 
#ifndef APP_WRAPPER_FOR_nla_reserve
#define APP_WRAPPER_FOR_nla_reserve
FUNCTION_WRAPPER(nla_reserve, (struct sk_buff *skb, int attrtype, int attrlen), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("nla_reserve is invoked.\n");
    PRE_WRAPPER_FUNC(skb, attrtype, attrlen);
    struct nlattr *ret = nla_reserve(skb, attrtype, attrlen);
    POST_WRAPPER_FUNC(skb, attrtype, attrlen);
    kern_printk("nla_reserve returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___scsi_alloc_queue
#define APP_WRAPPER_FOR___scsi_alloc_queue
#endif
 
#ifndef APP_WRAPPER_FOR___scsi_alloc_queue
#define APP_WRAPPER_FOR___scsi_alloc_queue
FUNCTION_WRAPPER(__scsi_alloc_queue, (struct Scsi_Host *shost, void (*_arg1)(struct request_queue *)), {
    WRAP_RECURSIVE(shost);
    TRACES_IF_WATCHPOINT(shost);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(shost)));
    WRAP_FUNCTION(_arg1);
    kern_printk("__scsi_alloc_queue is invoked.\n");
    PRE_WRAPPER_FUNC(shost, _arg1);
    struct request_queue *ret = __scsi_alloc_queue(shost, _arg1);
    POST_WRAPPER_FUNC(shost, _arg1);
    kern_printk("__scsi_alloc_queue returned.\n");
    TRACES_IF_WATCHPOINT(shost);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(shost)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_paravirt_patch_nop
#define APP_WRAPPER_FOR_paravirt_patch_nop
#endif
 
#ifndef APP_WRAPPER_FOR_paravirt_patch_nop
#define APP_WRAPPER_FOR_paravirt_patch_nop
FUNCTION_WRAPPER(paravirt_patch_nop, (), {
    kern_printk("paravirt_patch_nop is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = paravirt_patch_nop();
    POST_WRAPPER_FUNC();
    kern_printk("paravirt_patch_nop returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_tracepoint_probe_register
#define APP_WRAPPER_FOR_tracepoint_probe_register
#endif
 
#ifndef APP_WRAPPER_FOR_tracepoint_probe_register
#define APP_WRAPPER_FOR_tracepoint_probe_register
FUNCTION_WRAPPER(tracepoint_probe_register, (const char *name, void *probe, void *data), {
    kern_printk("tracepoint_probe_register is invoked.\n");
    PRE_WRAPPER_FUNC(name, probe, data);
    int ret = tracepoint_probe_register(name, probe, data);
    POST_WRAPPER_FUNC(name, probe, data);
    kern_printk("tracepoint_probe_register returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sff_wait_after_reset
#define APP_WRAPPER_FOR_ata_sff_wait_after_reset
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_wait_after_reset
#define APP_WRAPPER_FOR_ata_sff_wait_after_reset
FUNCTION_WRAPPER(ata_sff_wait_after_reset, (struct ata_link *link, unsigned int devmask, unsigned long deadline), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    kern_printk("ata_sff_wait_after_reset is invoked.\n");
    PRE_WRAPPER_FUNC(link, devmask, deadline);
    int ret = ata_sff_wait_after_reset(link, devmask, deadline);
    POST_WRAPPER_FUNC(link, devmask, deadline);
    kern_printk("ata_sff_wait_after_reset returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_begin_ordered_truncate
#define APP_WRAPPER_FOR_jbd2_journal_begin_ordered_truncate
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_begin_ordered_truncate
#define APP_WRAPPER_FOR_jbd2_journal_begin_ordered_truncate
FUNCTION_WRAPPER(jbd2_journal_begin_ordered_truncate, (journal_t *journal, struct jbd2_inode *inode, loff_t new_size), {
    WRAP_RECURSIVE(journal);
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct jbd2_inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("jbd2_journal_begin_ordered_truncate is invoked.\n");
    PRE_WRAPPER_FUNC(journal, inode, new_size);
    int ret = jbd2_journal_begin_ordered_truncate(journal, inode, new_size);
    POST_WRAPPER_FUNC(journal, inode, new_size);
    kern_printk("jbd2_journal_begin_ordered_truncate returned.\n");
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct jbd2_inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    return ret;
})
#endif


#ifndef KERN_ADDR_disable_IO_APIC
#define APP_WRAPPER_FOR_disable_IO_APIC
#endif
 
#ifndef APP_WRAPPER_FOR_disable_IO_APIC
#define APP_WRAPPER_FOR_disable_IO_APIC
FUNCTION_WRAPPER_VOID(disable_IO_APIC, (), {
    kern_printk("disable_IO_APIC is invoked.\n");
    PRE_WRAPPER_FUNC();
    disable_IO_APIC();
    POST_WRAPPER_FUNC();
    kern_printk("disable_IO_APIC returned.\n");
})
#endif


#ifndef KERN_ADDR_prepare_creds
#define APP_WRAPPER_FOR_prepare_creds
#endif
 
#ifndef APP_WRAPPER_FOR_prepare_creds
#define APP_WRAPPER_FOR_prepare_creds
FUNCTION_WRAPPER(prepare_creds, (), {
    kern_printk("prepare_creds is invoked.\n");
    PRE_WRAPPER_FUNC();
    struct cred *ret = prepare_creds();
    POST_WRAPPER_FUNC();
    kern_printk("prepare_creds returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_qdisc_create_dflt
#define APP_WRAPPER_FOR_qdisc_create_dflt
#endif
 
#ifndef APP_WRAPPER_FOR_qdisc_create_dflt
#define APP_WRAPPER_FOR_qdisc_create_dflt
FUNCTION_WRAPPER(qdisc_create_dflt, (struct netdev_queue *dev_queue, struct Qdisc_ops *ops, u32 parentid), {
    WRAP_RECURSIVE(dev_queue);
    TRACES_IF_WATCHPOINT(dev_queue);
    SCAN_HEAD_FUNC(struct netdev_queue)(*(TO_UNWATCHED_ADDRESS(dev_queue)));
    WRAP_RECURSIVE(ops);
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct Qdisc_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    kern_printk("qdisc_create_dflt is invoked.\n");
    PRE_WRAPPER_FUNC(dev_queue, ops, parentid);
    struct Qdisc *ret = qdisc_create_dflt(dev_queue, ops, parentid);
    POST_WRAPPER_FUNC(dev_queue, ops, parentid);
    kern_printk("qdisc_create_dflt returned.\n");
    TRACES_IF_WATCHPOINT(dev_queue);
    SCAN_HEAD_FUNC(struct netdev_queue)(*(TO_UNWATCHED_ADDRESS(dev_queue)));
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct Qdisc_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_set_msi_desc
#define APP_WRAPPER_FOR_irq_set_msi_desc
#endif
 
#ifndef APP_WRAPPER_FOR_irq_set_msi_desc
#define APP_WRAPPER_FOR_irq_set_msi_desc
FUNCTION_WRAPPER(irq_set_msi_desc, (unsigned int irq, struct msi_desc *entry), {
    kern_printk("irq_set_msi_desc is invoked.\n");
    PRE_WRAPPER_FUNC(irq, entry);
    int ret = irq_set_msi_desc(irq, entry);
    POST_WRAPPER_FUNC(irq, entry);
    kern_printk("irq_set_msi_desc returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_tick_nohz_get_sleep_length
#define APP_WRAPPER_FOR_tick_nohz_get_sleep_length
#endif
 
#ifndef APP_WRAPPER_FOR_tick_nohz_get_sleep_length
#define APP_WRAPPER_FOR_tick_nohz_get_sleep_length
FUNCTION_WRAPPER(tick_nohz_get_sleep_length, (), {
    kern_printk("tick_nohz_get_sleep_length is invoked.\n");
    PRE_WRAPPER_FUNC();
    ktime_t ret = tick_nohz_get_sleep_length();
    POST_WRAPPER_FUNC();
    kern_printk("tick_nohz_get_sleep_length returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_vpd_find_tag
#define APP_WRAPPER_FOR_pci_vpd_find_tag
#endif
 
#ifndef APP_WRAPPER_FOR_pci_vpd_find_tag
#define APP_WRAPPER_FOR_pci_vpd_find_tag
FUNCTION_WRAPPER(pci_vpd_find_tag, (const u8 *buf, unsigned int off, unsigned int len, u8 rdt), {
    kern_printk("pci_vpd_find_tag is invoked.\n");
    PRE_WRAPPER_FUNC(buf, off, len, rdt);
    int ret = pci_vpd_find_tag(buf, off, len, rdt);
    POST_WRAPPER_FUNC(buf, off, len, rdt);
    kern_printk("pci_vpd_find_tag returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sysfs_create_files
#define APP_WRAPPER_FOR_sysfs_create_files
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_create_files
#define APP_WRAPPER_FOR_sysfs_create_files
FUNCTION_WRAPPER(sysfs_create_files, (struct kobject *kobj, const struct attribute **attr), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    kern_printk("sysfs_create_files is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, attr);
    int ret = sysfs_create_files(kobj, attr);
    POST_WRAPPER_FUNC(kobj, attr);
    kern_printk("sysfs_create_files returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    return ret;
})
#endif


#ifndef KERN_ADDR_swiotlb_free_coherent
#define APP_WRAPPER_FOR_swiotlb_free_coherent
#endif
 
#ifndef APP_WRAPPER_FOR_swiotlb_free_coherent
#define APP_WRAPPER_FOR_swiotlb_free_coherent
FUNCTION_WRAPPER_VOID(swiotlb_free_coherent, (struct device *hwdev, size_t size, void *vaddr, dma_addr_t dma_handle), {
    WRAP_RECURSIVE(hwdev);
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
    kern_printk("swiotlb_free_coherent is invoked.\n");
    PRE_WRAPPER_FUNC(hwdev, size, vaddr, dma_handle);
    swiotlb_free_coherent(hwdev, size, vaddr, dma_handle);
    POST_WRAPPER_FUNC(hwdev, size, vaddr, dma_handle);
    kern_printk("swiotlb_free_coherent returned.\n");
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
})
#endif


#ifndef KERN_ADDR_ramfs_mount
#define APP_WRAPPER_FOR_ramfs_mount
#endif
 
#ifndef APP_WRAPPER_FOR_ramfs_mount
#define APP_WRAPPER_FOR_ramfs_mount
FUNCTION_WRAPPER(ramfs_mount, (struct file_system_type *fs_type, int flags, const char *dev_name, void *data), {
    WRAP_RECURSIVE(fs_type);
    TRACES_IF_WATCHPOINT(fs_type);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(fs_type)));
    kern_printk("ramfs_mount is invoked.\n");
    PRE_WRAPPER_FUNC(fs_type, flags, dev_name, data);
    struct dentry *ret = ramfs_mount(fs_type, flags, dev_name, data);
    POST_WRAPPER_FUNC(fs_type, flags, dev_name, data);
    kern_printk("ramfs_mount returned.\n");
    TRACES_IF_WATCHPOINT(fs_type);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(fs_type)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dirty_background_ratio_handler
#define APP_WRAPPER_FOR_dirty_background_ratio_handler
#endif
 
#ifndef APP_WRAPPER_FOR_dirty_background_ratio_handler
#define APP_WRAPPER_FOR_dirty_background_ratio_handler
FUNCTION_WRAPPER(dirty_background_ratio_handler, (struct ctl_table *table, int write, void *buffer, size_t *lenp, loff_t *ppos), {
    WRAP_RECURSIVE(table);
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    kern_printk("dirty_background_ratio_handler is invoked.\n");
    PRE_WRAPPER_FUNC(table, write, buffer, lenp, ppos);
    int ret = dirty_background_ratio_handler(table, write, buffer, lenp, ppos);
    POST_WRAPPER_FUNC(table, write, buffer, lenp, ppos);
    kern_printk("dirty_background_ratio_handler returned.\n");
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mod_timer_pending
#define APP_WRAPPER_FOR_mod_timer_pending
#endif
 
#ifndef APP_WRAPPER_FOR_mod_timer_pending
#define APP_WRAPPER_FOR_mod_timer_pending
FUNCTION_WRAPPER(mod_timer_pending, (struct timer_list *timer, unsigned long expires), {
    WRAP_RECURSIVE(timer);
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(timer)));
    kern_printk("mod_timer_pending is invoked.\n");
    PRE_WRAPPER_FUNC(timer, expires);
    int ret = mod_timer_pending(timer, expires);
    POST_WRAPPER_FUNC(timer, expires);
    kern_printk("mod_timer_pending returned.\n");
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(timer)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_qc_complete
#define APP_WRAPPER_FOR_ata_qc_complete
#endif
 
#ifndef APP_WRAPPER_FOR_ata_qc_complete
#define APP_WRAPPER_FOR_ata_qc_complete
FUNCTION_WRAPPER_VOID(ata_qc_complete, (struct ata_queued_cmd *qc), {
    WRAP_RECURSIVE(qc);
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    kern_printk("ata_qc_complete is invoked.\n");
    PRE_WRAPPER_FUNC(qc);
    ata_qc_complete(qc);
    POST_WRAPPER_FUNC(qc);
    kern_printk("ata_qc_complete returned.\n");
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
})
#endif


#ifndef KERN_ADDR_nsecs_to_jiffies64
#define APP_WRAPPER_FOR_nsecs_to_jiffies64
#endif
 
#ifndef APP_WRAPPER_FOR_nsecs_to_jiffies64
#define APP_WRAPPER_FOR_nsecs_to_jiffies64
FUNCTION_WRAPPER(nsecs_to_jiffies64, (u64 n), {
    kern_printk("nsecs_to_jiffies64 is invoked.\n");
    PRE_WRAPPER_FUNC(n);
    u64 ret = nsecs_to_jiffies64(n);
    POST_WRAPPER_FUNC(n);
    kern_printk("nsecs_to_jiffies64 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_init
#define APP_WRAPPER_FOR_skb_init
#endif
 
#ifndef APP_WRAPPER_FOR_skb_init
#define APP_WRAPPER_FOR_skb_init
FUNCTION_WRAPPER_VOID(skb_init, (), {
    kern_printk("skb_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    skb_init();
    POST_WRAPPER_FUNC();
    kern_printk("skb_init returned.\n");
})
#endif


#ifndef KERN_ADDR_IO_APIC_get_PCI_irq_vector
#define APP_WRAPPER_FOR_IO_APIC_get_PCI_irq_vector
#endif
 
#ifndef APP_WRAPPER_FOR_IO_APIC_get_PCI_irq_vector
#define APP_WRAPPER_FOR_IO_APIC_get_PCI_irq_vector
FUNCTION_WRAPPER(IO_APIC_get_PCI_irq_vector, (int bus, int devfn, int pin, struct io_apic_irq_attr *irq_attr), {
    kern_printk("IO_APIC_get_PCI_irq_vector is invoked.\n");
    PRE_WRAPPER_FUNC(bus, devfn, pin, irq_attr);
    int ret = IO_APIC_get_PCI_irq_vector(bus, devfn, pin, irq_attr);
    POST_WRAPPER_FUNC(bus, devfn, pin, irq_attr);
    kern_printk("IO_APIC_get_PCI_irq_vector returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_getname
#define APP_WRAPPER_FOR_getname
#endif
 
#ifndef APP_WRAPPER_FOR_getname
#define APP_WRAPPER_FOR_getname
FUNCTION_WRAPPER(getname, (const char *_arg1), {
    kern_printk("getname is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct filename *ret = getname(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("getname returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_elv_register_queue
#define APP_WRAPPER_FOR_elv_register_queue
#endif
 
#ifndef APP_WRAPPER_FOR_elv_register_queue
#define APP_WRAPPER_FOR_elv_register_queue
FUNCTION_WRAPPER(elv_register_queue, (struct request_queue *q), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    kern_printk("elv_register_queue is invoked.\n");
    PRE_WRAPPER_FUNC(q);
    int ret = elv_register_queue(q);
    POST_WRAPPER_FUNC(q);
    kern_printk("elv_register_queue returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    return ret;
})
#endif


#ifndef KERN_ADDR_set_groups
#define APP_WRAPPER_FOR_set_groups
#endif
 
#ifndef APP_WRAPPER_FOR_set_groups
#define APP_WRAPPER_FOR_set_groups
FUNCTION_WRAPPER(set_groups, (struct cred *_arg1, struct group_info *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct cred)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("set_groups is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = set_groups(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("set_groups returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct cred)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_register_refined_jiffies
#define APP_WRAPPER_FOR_register_refined_jiffies
#endif
 
#ifndef APP_WRAPPER_FOR_register_refined_jiffies
#define APP_WRAPPER_FOR_register_refined_jiffies
FUNCTION_WRAPPER(register_refined_jiffies, (long clock_tick_rate), {
    kern_printk("register_refined_jiffies is invoked.\n");
    PRE_WRAPPER_FUNC(clock_tick_rate);
    int ret = register_refined_jiffies(clock_tick_rate);
    POST_WRAPPER_FUNC(clock_tick_rate);
    kern_printk("register_refined_jiffies returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_get_pci_rootbridge_handle
#define APP_WRAPPER_FOR_acpi_get_pci_rootbridge_handle
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_pci_rootbridge_handle
#define APP_WRAPPER_FOR_acpi_get_pci_rootbridge_handle
FUNCTION_WRAPPER(acpi_get_pci_rootbridge_handle, (unsigned int _arg1, unsigned int _arg2), {
    kern_printk("acpi_get_pci_rootbridge_handle is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    acpi_handle ret = acpi_get_pci_rootbridge_handle(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("acpi_get_pci_rootbridge_handle returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_synchronize_rcu_bh
#define APP_WRAPPER_FOR_synchronize_rcu_bh
#endif
 
#ifndef APP_WRAPPER_FOR_synchronize_rcu_bh
#define APP_WRAPPER_FOR_synchronize_rcu_bh
FUNCTION_WRAPPER_VOID(synchronize_rcu_bh, (), {
    kern_printk("synchronize_rcu_bh is invoked.\n");
    PRE_WRAPPER_FUNC();
    synchronize_rcu_bh();
    POST_WRAPPER_FUNC();
    kern_printk("synchronize_rcu_bh returned.\n");
})
#endif


#ifndef KERN_ADDR_poll_initwait
#define APP_WRAPPER_FOR_poll_initwait
#endif
 
#ifndef APP_WRAPPER_FOR_poll_initwait
#define APP_WRAPPER_FOR_poll_initwait
FUNCTION_WRAPPER_VOID(poll_initwait, (struct poll_wqueues *pwq), {
    WRAP_RECURSIVE(pwq);
    TRACES_IF_WATCHPOINT(pwq);
    SCAN_HEAD_FUNC(struct poll_wqueues)(*(TO_UNWATCHED_ADDRESS(pwq)));
    kern_printk("poll_initwait is invoked.\n");
    PRE_WRAPPER_FUNC(pwq);
    poll_initwait(pwq);
    POST_WRAPPER_FUNC(pwq);
    kern_printk("poll_initwait returned.\n");
    TRACES_IF_WATCHPOINT(pwq);
    SCAN_HEAD_FUNC(struct poll_wqueues)(*(TO_UNWATCHED_ADDRESS(pwq)));
})
#endif


#ifndef KERN_ADDR_kzfree
#define APP_WRAPPER_FOR_kzfree
#endif
 
#ifndef APP_WRAPPER_FOR_kzfree
#define APP_WRAPPER_FOR_kzfree
FUNCTION_WRAPPER_VOID(kzfree, (const void *_arg1), {
    kern_printk("kzfree is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    kzfree(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("kzfree returned.\n");
})
#endif


#ifndef KERN_ADDR_get_pfn_range_for_nid
#define APP_WRAPPER_FOR_get_pfn_range_for_nid
#endif
 
#ifndef APP_WRAPPER_FOR_get_pfn_range_for_nid
#define APP_WRAPPER_FOR_get_pfn_range_for_nid
FUNCTION_WRAPPER_VOID(get_pfn_range_for_nid, (unsigned int nid, unsigned long *start_pfn, unsigned long *end_pfn), {
    kern_printk("get_pfn_range_for_nid is invoked.\n");
    PRE_WRAPPER_FUNC(nid, start_pfn, end_pfn);
    get_pfn_range_for_nid(nid, start_pfn, end_pfn);
    POST_WRAPPER_FUNC(nid, start_pfn, end_pfn);
    kern_printk("get_pfn_range_for_nid returned.\n");
})
#endif


#ifndef KERN_ADDR_sysfs_rename_dir
#define APP_WRAPPER_FOR_sysfs_rename_dir
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_rename_dir
#define APP_WRAPPER_FOR_sysfs_rename_dir
FUNCTION_WRAPPER(sysfs_rename_dir, (struct kobject *kobj, const char *new_name), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    kern_printk("sysfs_rename_dir is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, new_name);
    int ret = sysfs_rename_dir(kobj, new_name);
    POST_WRAPPER_FUNC(kobj, new_name);
    kern_printk("sysfs_rename_dir returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    return ret;
})
#endif


#ifndef KERN_ADDR_show_free_areas
#define APP_WRAPPER_FOR_show_free_areas
#endif
 
#ifndef APP_WRAPPER_FOR_show_free_areas
#define APP_WRAPPER_FOR_show_free_areas
FUNCTION_WRAPPER_VOID(show_free_areas, (unsigned int flags), {
    kern_printk("show_free_areas is invoked.\n");
    PRE_WRAPPER_FUNC(flags);
    show_free_areas(flags);
    POST_WRAPPER_FUNC(flags);
    kern_printk("show_free_areas returned.\n");
})
#endif


#ifndef KERN_ADDR_device_move
#define APP_WRAPPER_FOR_device_move
#endif
 
#ifndef APP_WRAPPER_FOR_device_move
#define APP_WRAPPER_FOR_device_move
FUNCTION_WRAPPER(device_move, (struct device *dev, struct device *new_parent, enum dpm_order dpm_order), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(new_parent);
    TRACES_IF_WATCHPOINT(new_parent);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(new_parent)));
    kern_printk("device_move is invoked.\n");
    PRE_WRAPPER_FUNC(dev, new_parent, dpm_order);
    int ret = device_move(dev, new_parent, dpm_order);
    POST_WRAPPER_FUNC(dev, new_parent, dpm_order);
    kern_printk("device_move returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(new_parent);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(new_parent)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blkdev_get_by_dev
#define APP_WRAPPER_FOR_blkdev_get_by_dev
#endif
 
#ifndef APP_WRAPPER_FOR_blkdev_get_by_dev
#define APP_WRAPPER_FOR_blkdev_get_by_dev
FUNCTION_WRAPPER(blkdev_get_by_dev, (dev_t dev, fmode_t mode, void *holder), {
    kern_printk("blkdev_get_by_dev is invoked.\n");
    PRE_WRAPPER_FUNC(dev, mode, holder);
    struct block_device *ret = blkdev_get_by_dev(dev, mode, holder);
    POST_WRAPPER_FUNC(dev, mode, holder);
    kern_printk("blkdev_get_by_dev returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___inc_zone_state
#define APP_WRAPPER_FOR___inc_zone_state
#endif
 
#ifndef APP_WRAPPER_FOR___inc_zone_state
#define APP_WRAPPER_FOR___inc_zone_state
FUNCTION_WRAPPER_VOID(__inc_zone_state, (struct zone *_arg1, enum zone_stat_item _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__inc_zone_state is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    __inc_zone_state(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("__inc_zone_state returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_ata_sas_async_probe
#define APP_WRAPPER_FOR_ata_sas_async_probe
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sas_async_probe
#define APP_WRAPPER_FOR_ata_sas_async_probe
FUNCTION_WRAPPER_VOID(ata_sas_async_probe, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_sas_async_probe is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    ata_sas_async_probe(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_sas_async_probe returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_key_validate
#define APP_WRAPPER_FOR_key_validate
#endif
 
#ifndef APP_WRAPPER_FOR_key_validate
#define APP_WRAPPER_FOR_key_validate
FUNCTION_WRAPPER(key_validate, (const struct key *key), {
    kern_printk("key_validate is invoked.\n");
    PRE_WRAPPER_FUNC(key);
    int ret = key_validate(key);
    POST_WRAPPER_FUNC(key);
    kern_printk("key_validate returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_find_next_bus
#define APP_WRAPPER_FOR_pci_find_next_bus
#endif
 
#ifndef APP_WRAPPER_FOR_pci_find_next_bus
#define APP_WRAPPER_FOR_pci_find_next_bus
FUNCTION_WRAPPER(pci_find_next_bus, (const struct pci_bus *from), {
    WRAP_RECURSIVE(from);
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(const struct pci_bus)(*(TO_UNWATCHED_ADDRESS(from)));
    kern_printk("pci_find_next_bus is invoked.\n");
    PRE_WRAPPER_FUNC(from);
    struct pci_bus *ret = pci_find_next_bus(from);
    POST_WRAPPER_FUNC(from);
    kern_printk("pci_find_next_bus returned.\n");
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(const struct pci_bus)(*(TO_UNWATCHED_ADDRESS(from)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sg_miter_stop
#define APP_WRAPPER_FOR_sg_miter_stop
#endif
 
#ifndef APP_WRAPPER_FOR_sg_miter_stop
#define APP_WRAPPER_FOR_sg_miter_stop
FUNCTION_WRAPPER_VOID(sg_miter_stop, (struct sg_mapping_iter *miter), {
    WRAP_RECURSIVE(miter);
    TRACES_IF_WATCHPOINT(miter);
    SCAN_HEAD_FUNC(struct sg_mapping_iter)(*(TO_UNWATCHED_ADDRESS(miter)));
    kern_printk("sg_miter_stop is invoked.\n");
    PRE_WRAPPER_FUNC(miter);
    sg_miter_stop(miter);
    POST_WRAPPER_FUNC(miter);
    kern_printk("sg_miter_stop returned.\n");
    TRACES_IF_WATCHPOINT(miter);
    SCAN_HEAD_FUNC(struct sg_mapping_iter)(*(TO_UNWATCHED_ADDRESS(miter)));
})
#endif


#ifndef KERN_ADDR_cgroup_attach_task_all
#define APP_WRAPPER_FOR_cgroup_attach_task_all
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_attach_task_all
#define APP_WRAPPER_FOR_cgroup_attach_task_all
FUNCTION_WRAPPER(cgroup_attach_task_all, (struct task_struct *from, struct task_struct *_arg1), {
    WRAP_RECURSIVE(from);
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(from)));
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("cgroup_attach_task_all is invoked.\n");
    PRE_WRAPPER_FUNC(from, _arg1);
    int ret = cgroup_attach_task_all(from, _arg1);
    POST_WRAPPER_FUNC(from, _arg1);
    kern_printk("cgroup_attach_task_all returned.\n");
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(from)));
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_wake_up_state
#define APP_WRAPPER_FOR_wake_up_state
#endif
 
#ifndef APP_WRAPPER_FOR_wake_up_state
#define APP_WRAPPER_FOR_wake_up_state
FUNCTION_WRAPPER(wake_up_state, (struct task_struct *tsk, unsigned int state), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("wake_up_state is invoked.\n");
    PRE_WRAPPER_FUNC(tsk, state);
    int ret = wake_up_state(tsk, state);
    POST_WRAPPER_FUNC(tsk, state);
    kern_printk("wake_up_state returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_enable_device_io
#define APP_WRAPPER_FOR_pci_enable_device_io
#endif
 
#ifndef APP_WRAPPER_FOR_pci_enable_device_io
#define APP_WRAPPER_FOR_pci_enable_device_io
FUNCTION_WRAPPER(pci_enable_device_io, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_enable_device_io is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pci_enable_device_io(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_enable_device_io returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vm_get_page_prot
#define APP_WRAPPER_FOR_vm_get_page_prot
#endif
 
#ifndef APP_WRAPPER_FOR_vm_get_page_prot
#define APP_WRAPPER_FOR_vm_get_page_prot
FUNCTION_WRAPPER(vm_get_page_prot, (unsigned long vm_flags), {
    kern_printk("vm_get_page_prot is invoked.\n");
    PRE_WRAPPER_FUNC(vm_flags);
    pgprot_t ret = vm_get_page_prot(vm_flags);
    POST_WRAPPER_FUNC(vm_flags);
    kern_printk("vm_get_page_prot returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_count_swap_pages
#define APP_WRAPPER_FOR_count_swap_pages
#endif
 
#ifndef APP_WRAPPER_FOR_count_swap_pages
#define APP_WRAPPER_FOR_count_swap_pages
FUNCTION_WRAPPER(count_swap_pages, (int _arg1, int _arg2), {
    kern_printk("count_swap_pages is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = count_swap_pages(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("count_swap_pages returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_laptop_io_completion
#define APP_WRAPPER_FOR_laptop_io_completion
#endif
 
#ifndef APP_WRAPPER_FOR_laptop_io_completion
#define APP_WRAPPER_FOR_laptop_io_completion
FUNCTION_WRAPPER_VOID(laptop_io_completion, (struct backing_dev_info *info), {
    WRAP_RECURSIVE(info);
    TRACES_IF_WATCHPOINT(info);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(info)));
    kern_printk("laptop_io_completion is invoked.\n");
    PRE_WRAPPER_FUNC(info);
    laptop_io_completion(info);
    POST_WRAPPER_FUNC(info);
    kern_printk("laptop_io_completion returned.\n");
    TRACES_IF_WATCHPOINT(info);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(info)));
})
#endif


#ifndef KERN_ADDR_jbd_blocks_per_page
#define APP_WRAPPER_FOR_jbd_blocks_per_page
#endif
 
#ifndef APP_WRAPPER_FOR_jbd_blocks_per_page
#define APP_WRAPPER_FOR_jbd_blocks_per_page
FUNCTION_WRAPPER(jbd_blocks_per_page, (struct inode *inode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("jbd_blocks_per_page is invoked.\n");
    PRE_WRAPPER_FUNC(inode);
    int ret = jbd_blocks_per_page(inode);
    POST_WRAPPER_FUNC(inode);
    kern_printk("jbd_blocks_per_page returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    return ret;
})
#endif


#ifndef KERN_ADDR_unregister_pernet_device
#define APP_WRAPPER_FOR_unregister_pernet_device
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_pernet_device
#define APP_WRAPPER_FOR_unregister_pernet_device
FUNCTION_WRAPPER_VOID(unregister_pernet_device, (struct pernet_operations *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pernet_operations)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("unregister_pernet_device is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    unregister_pernet_device(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("unregister_pernet_device returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pernet_operations)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_rtnl_af_register
#define APP_WRAPPER_FOR_rtnl_af_register
#endif
 
#ifndef APP_WRAPPER_FOR_rtnl_af_register
#define APP_WRAPPER_FOR_rtnl_af_register
FUNCTION_WRAPPER(rtnl_af_register, (struct rtnl_af_ops *ops), {
    WRAP_RECURSIVE(ops);
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct rtnl_af_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    kern_printk("rtnl_af_register is invoked.\n");
    PRE_WRAPPER_FUNC(ops);
    int ret = rtnl_af_register(ops);
    POST_WRAPPER_FUNC(ops);
    kern_printk("rtnl_af_register returned.\n");
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct rtnl_af_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    return ret;
})
#endif


#ifndef KERN_ADDR_load_percpu_segment
#define APP_WRAPPER_FOR_load_percpu_segment
#endif
 
#ifndef APP_WRAPPER_FOR_load_percpu_segment
#define APP_WRAPPER_FOR_load_percpu_segment
FUNCTION_WRAPPER_VOID(load_percpu_segment, (int _arg1), {
    kern_printk("load_percpu_segment is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    load_percpu_segment(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("load_percpu_segment returned.\n");
})
#endif


#ifndef KERN_ADDR_follow_down_one
#define APP_WRAPPER_FOR_follow_down_one
#endif
 
#ifndef APP_WRAPPER_FOR_follow_down_one
#define APP_WRAPPER_FOR_follow_down_one
FUNCTION_WRAPPER(follow_down_one, (struct path *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("follow_down_one is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = follow_down_one(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("follow_down_one returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_get_next_object
#define APP_WRAPPER_FOR_acpi_get_next_object
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_next_object
#define APP_WRAPPER_FOR_acpi_get_next_object
FUNCTION_WRAPPER(acpi_get_next_object, (acpi_object_type type, acpi_handle parent, acpi_handle child, acpi_handle *out_handle), {
    kern_printk("acpi_get_next_object is invoked.\n");
    PRE_WRAPPER_FUNC(type, parent, child, out_handle);
    acpi_status ret = acpi_get_next_object(type, parent, child, out_handle);
    POST_WRAPPER_FUNC(type, parent, child, out_handle);
    kern_printk("acpi_get_next_object returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_init_cpu_present
#define APP_WRAPPER_FOR_init_cpu_present
#endif
 
#ifndef APP_WRAPPER_FOR_init_cpu_present
#define APP_WRAPPER_FOR_init_cpu_present
FUNCTION_WRAPPER_VOID(init_cpu_present, (const struct cpumask *src), {
    kern_printk("init_cpu_present is invoked.\n");
    PRE_WRAPPER_FUNC(src);
    init_cpu_present(src);
    POST_WRAPPER_FUNC(src);
    kern_printk("init_cpu_present returned.\n");
})
#endif


#ifndef KERN_ADDR_percpu_up_write
#define APP_WRAPPER_FOR_percpu_up_write
#endif
 
#ifndef APP_WRAPPER_FOR_percpu_up_write
#define APP_WRAPPER_FOR_percpu_up_write
FUNCTION_WRAPPER_VOID(percpu_up_write, (struct percpu_rw_semaphore *_arg1), {
    kern_printk("percpu_up_write is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    percpu_up_write(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("percpu_up_write returned.\n");
})
#endif


#ifndef KERN_ADDR_drop_nlink
#define APP_WRAPPER_FOR_drop_nlink
#endif
 
#ifndef APP_WRAPPER_FOR_drop_nlink
#define APP_WRAPPER_FOR_drop_nlink
FUNCTION_WRAPPER_VOID(drop_nlink, (struct inode *inode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("drop_nlink is invoked.\n");
    PRE_WRAPPER_FUNC(inode);
    drop_nlink(inode);
    POST_WRAPPER_FUNC(inode);
    kern_printk("drop_nlink returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_pci_enable_sriov
#define APP_WRAPPER_FOR_pci_enable_sriov
#endif
 
#ifndef APP_WRAPPER_FOR_pci_enable_sriov
#define APP_WRAPPER_FOR_pci_enable_sriov
FUNCTION_WRAPPER(pci_enable_sriov, (struct pci_dev *dev, int nr_virtfn), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_enable_sriov is invoked.\n");
    PRE_WRAPPER_FUNC(dev, nr_virtfn);
    int ret = pci_enable_sriov(dev, nr_virtfn);
    POST_WRAPPER_FUNC(dev, nr_virtfn);
    kern_printk("pci_enable_sriov returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_early_cpu_init
#define APP_WRAPPER_FOR_early_cpu_init
#endif
 
#ifndef APP_WRAPPER_FOR_early_cpu_init
#define APP_WRAPPER_FOR_early_cpu_init
FUNCTION_WRAPPER_VOID(early_cpu_init, (), {
    kern_printk("early_cpu_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    early_cpu_init();
    POST_WRAPPER_FUNC();
    kern_printk("early_cpu_init returned.\n");
})
#endif


#ifndef KERN_ADDR_KSTK_ESP
#define APP_WRAPPER_FOR_KSTK_ESP
#endif
 
#ifndef APP_WRAPPER_FOR_KSTK_ESP
#define APP_WRAPPER_FOR_KSTK_ESP
FUNCTION_WRAPPER(KSTK_ESP, (struct task_struct *task), {
    WRAP_RECURSIVE(task);
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    kern_printk("KSTK_ESP is invoked.\n");
    PRE_WRAPPER_FUNC(task);
    long ret = KSTK_ESP(task);
    POST_WRAPPER_FUNC(task);
    kern_printk("KSTK_ESP returned.\n");
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_no_shutdown
#define APP_WRAPPER_FOR_sock_no_shutdown
#endif
 
#ifndef APP_WRAPPER_FOR_sock_no_shutdown
#define APP_WRAPPER_FOR_sock_no_shutdown
FUNCTION_WRAPPER(sock_no_shutdown, (struct socket *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("sock_no_shutdown is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = sock_no_shutdown(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("sock_no_shutdown returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cgroup_init
#define APP_WRAPPER_FOR_cgroup_init
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_init
#define APP_WRAPPER_FOR_cgroup_init
FUNCTION_WRAPPER(cgroup_init, (), {
    kern_printk("cgroup_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = cgroup_init();
    POST_WRAPPER_FUNC();
    kern_printk("cgroup_init returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_scm_detach_fds_compat
#define APP_WRAPPER_FOR_scm_detach_fds_compat
#endif
 
#ifndef APP_WRAPPER_FOR_scm_detach_fds_compat
#define APP_WRAPPER_FOR_scm_detach_fds_compat
FUNCTION_WRAPPER_VOID(scm_detach_fds_compat, (struct msghdr *msg, struct scm_cookie *scm), {
    WRAP_RECURSIVE(scm);
    TRACES_IF_WATCHPOINT(scm);
    SCAN_HEAD_FUNC(struct scm_cookie)(*(TO_UNWATCHED_ADDRESS(scm)));
    kern_printk("scm_detach_fds_compat is invoked.\n");
    PRE_WRAPPER_FUNC(msg, scm);
    scm_detach_fds_compat(msg, scm);
    POST_WRAPPER_FUNC(msg, scm);
    kern_printk("scm_detach_fds_compat returned.\n");
    TRACES_IF_WATCHPOINT(scm);
    SCAN_HEAD_FUNC(struct scm_cookie)(*(TO_UNWATCHED_ADDRESS(scm)));
})
#endif


#ifndef KERN_ADDR_exit_itimers
#define APP_WRAPPER_FOR_exit_itimers
#endif
 
#ifndef APP_WRAPPER_FOR_exit_itimers
#define APP_WRAPPER_FOR_exit_itimers
FUNCTION_WRAPPER_VOID(exit_itimers, (struct signal_struct *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct signal_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("exit_itimers is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    exit_itimers(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("exit_itimers returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct signal_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_simple_transaction_set
#define APP_WRAPPER_FOR_simple_transaction_set
#endif
 
#ifndef APP_WRAPPER_FOR_simple_transaction_set
#define APP_WRAPPER_FOR_simple_transaction_set
FUNCTION_WRAPPER_VOID(simple_transaction_set, (struct file *file, size_t n), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("simple_transaction_set is invoked.\n");
    PRE_WRAPPER_FUNC(file, n);
    simple_transaction_set(file, n);
    POST_WRAPPER_FUNC(file, n);
    kern_printk("simple_transaction_set returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
})
#endif


#ifndef KERN_ADDR_bio_disassociate_task
#define APP_WRAPPER_FOR_bio_disassociate_task
#endif
 
#ifndef APP_WRAPPER_FOR_bio_disassociate_task
#define APP_WRAPPER_FOR_bio_disassociate_task
FUNCTION_WRAPPER_VOID(bio_disassociate_task, (struct bio *bio), {
    WRAP_RECURSIVE(bio);
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
    kern_printk("bio_disassociate_task is invoked.\n");
    PRE_WRAPPER_FUNC(bio);
    bio_disassociate_task(bio);
    POST_WRAPPER_FUNC(bio);
    kern_printk("bio_disassociate_task returned.\n");
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
})
#endif


#ifndef KERN_ADDR___dquot_alloc_space
#define APP_WRAPPER_FOR___dquot_alloc_space
#endif
 
#ifndef APP_WRAPPER_FOR___dquot_alloc_space
#define APP_WRAPPER_FOR___dquot_alloc_space
FUNCTION_WRAPPER(__dquot_alloc_space, (struct inode *inode, qsize_t number, int flags), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("__dquot_alloc_space is invoked.\n");
    PRE_WRAPPER_FUNC(inode, number, flags);
    int ret = __dquot_alloc_space(inode, number, flags);
    POST_WRAPPER_FUNC(inode, number, flags);
    kern_printk("__dquot_alloc_space returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    return ret;
})
#endif


#ifndef KERN_ADDR_request_key
#define APP_WRAPPER_FOR_request_key
#endif
 
#ifndef APP_WRAPPER_FOR_request_key
#define APP_WRAPPER_FOR_request_key
FUNCTION_WRAPPER(request_key, (struct key_type *type, const char *description, const char *callout_info), {
    kern_printk("request_key is invoked.\n");
    PRE_WRAPPER_FUNC(type, description, callout_info);
    struct key *ret = request_key(type, description, callout_info);
    POST_WRAPPER_FUNC(type, description, callout_info);
    kern_printk("request_key returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_notifier_call_chain
#define APP_WRAPPER_FOR_acpi_notifier_call_chain
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_notifier_call_chain
#define APP_WRAPPER_FOR_acpi_notifier_call_chain
FUNCTION_WRAPPER(acpi_notifier_call_chain, (struct acpi_device *_arg1, u32 _arg2, u32 _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("acpi_notifier_call_chain is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = acpi_notifier_call_chain(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("acpi_notifier_call_chain returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_swiotlb_dma_mapping_error
#define APP_WRAPPER_FOR_swiotlb_dma_mapping_error
#endif
 
#ifndef APP_WRAPPER_FOR_swiotlb_dma_mapping_error
#define APP_WRAPPER_FOR_swiotlb_dma_mapping_error
FUNCTION_WRAPPER(swiotlb_dma_mapping_error, (struct device *hwdev, dma_addr_t dma_addr), {
    WRAP_RECURSIVE(hwdev);
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
    kern_printk("swiotlb_dma_mapping_error is invoked.\n");
    PRE_WRAPPER_FUNC(hwdev, dma_addr);
    int ret = swiotlb_dma_mapping_error(hwdev, dma_addr);
    POST_WRAPPER_FUNC(hwdev, dma_addr);
    kern_printk("swiotlb_dma_mapping_error returned.\n");
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_input_set_capability
#define APP_WRAPPER_FOR_input_set_capability
#endif
 
#ifndef APP_WRAPPER_FOR_input_set_capability
#define APP_WRAPPER_FOR_input_set_capability
FUNCTION_WRAPPER_VOID(input_set_capability, (struct input_dev *dev, unsigned int type, unsigned int code), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("input_set_capability is invoked.\n");
    PRE_WRAPPER_FUNC(dev, type, code);
    input_set_capability(dev, type, code);
    POST_WRAPPER_FUNC(dev, type, code);
    kern_printk("input_set_capability returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_acpi_bus_generate_proc_event
#define APP_WRAPPER_FOR_acpi_bus_generate_proc_event
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_bus_generate_proc_event
#define APP_WRAPPER_FOR_acpi_bus_generate_proc_event
FUNCTION_WRAPPER(acpi_bus_generate_proc_event, (struct acpi_device *device, u8 type, int data), {
    WRAP_RECURSIVE(device);
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(device)));
    kern_printk("acpi_bus_generate_proc_event is invoked.\n");
    PRE_WRAPPER_FUNC(device, type, data);
    int ret = acpi_bus_generate_proc_event(device, type, data);
    POST_WRAPPER_FUNC(device, type, data);
    kern_printk("acpi_bus_generate_proc_event returned.\n");
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(device)));
    return ret;
})
#endif


#ifndef KERN_ADDR__raw_read_lock_irq
#define APP_WRAPPER_FOR__raw_read_lock_irq
#endif
 
#ifndef APP_WRAPPER_FOR__raw_read_lock_irq
#define APP_WRAPPER_FOR__raw_read_lock_irq
FUNCTION_WRAPPER_VOID(_raw_read_lock_irq, (rwlock_t *lock), {
    kern_printk("_raw_read_lock_irq is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    _raw_read_lock_irq(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("_raw_read_lock_irq returned.\n");
})
#endif


#ifndef KERN_ADDR_check_disk_change
#define APP_WRAPPER_FOR_check_disk_change
#endif
 
#ifndef APP_WRAPPER_FOR_check_disk_change
#define APP_WRAPPER_FOR_check_disk_change
FUNCTION_WRAPPER(check_disk_change, (struct block_device *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("check_disk_change is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = check_disk_change(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("check_disk_change returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_permission
#define APP_WRAPPER_FOR_generic_permission
#endif
 
#ifndef APP_WRAPPER_FOR_generic_permission
#define APP_WRAPPER_FOR_generic_permission
FUNCTION_WRAPPER(generic_permission, (struct inode *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("generic_permission is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = generic_permission(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("generic_permission returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_vmsplice
#define APP_WRAPPER_FOR_compat_sys_vmsplice
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_vmsplice
#define APP_WRAPPER_FOR_compat_sys_vmsplice
FUNCTION_WRAPPER(compat_sys_vmsplice, (int fd, const struct compat_iovec *_arg1, unsigned int nr_segs, unsigned int flags), {
    kern_printk("compat_sys_vmsplice is invoked.\n");
    PRE_WRAPPER_FUNC(fd, _arg1, nr_segs, flags);
    long ret = compat_sys_vmsplice(fd, _arg1, nr_segs, flags);
    POST_WRAPPER_FUNC(fd, _arg1, nr_segs, flags);
    kern_printk("compat_sys_vmsplice returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_inc_nlink
#define APP_WRAPPER_FOR_inc_nlink
#endif
 
#ifndef APP_WRAPPER_FOR_inc_nlink
#define APP_WRAPPER_FOR_inc_nlink
FUNCTION_WRAPPER_VOID(inc_nlink, (struct inode *inode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("inc_nlink is invoked.\n");
    PRE_WRAPPER_FUNC(inode);
    inc_nlink(inode);
    POST_WRAPPER_FUNC(inode);
    kern_printk("inc_nlink returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_is_pageblock_removable_nolock
#define APP_WRAPPER_FOR_is_pageblock_removable_nolock
#endif
 
#ifndef APP_WRAPPER_FOR_is_pageblock_removable_nolock
#define APP_WRAPPER_FOR_is_pageblock_removable_nolock
FUNCTION_WRAPPER(is_pageblock_removable_nolock, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("is_pageblock_removable_nolock is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    bool ret = is_pageblock_removable_nolock(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("is_pageblock_removable_nolock returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_neigh_parms_release
#define APP_WRAPPER_FOR_neigh_parms_release
#endif
 
#ifndef APP_WRAPPER_FOR_neigh_parms_release
#define APP_WRAPPER_FOR_neigh_parms_release
FUNCTION_WRAPPER_VOID(neigh_parms_release, (struct neigh_table *tbl, struct neigh_parms *parms), {
    WRAP_RECURSIVE(tbl);
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    WRAP_RECURSIVE(parms);
    TRACES_IF_WATCHPOINT(parms);
    SCAN_HEAD_FUNC(struct neigh_parms)(*(TO_UNWATCHED_ADDRESS(parms)));
    kern_printk("neigh_parms_release is invoked.\n");
    PRE_WRAPPER_FUNC(tbl, parms);
    neigh_parms_release(tbl, parms);
    POST_WRAPPER_FUNC(tbl, parms);
    kern_printk("neigh_parms_release returned.\n");
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    TRACES_IF_WATCHPOINT(parms);
    SCAN_HEAD_FUNC(struct neigh_parms)(*(TO_UNWATCHED_ADDRESS(parms)));
})
#endif


#ifndef KERN_ADDR___get_locked_pte
#define APP_WRAPPER_FOR___get_locked_pte
#endif
 
#ifndef APP_WRAPPER_FOR___get_locked_pte
#define APP_WRAPPER_FOR___get_locked_pte
FUNCTION_WRAPPER(__get_locked_pte, (struct mm_struct *mm, unsigned long addr, spinlock_t **ptl), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    kern_printk("__get_locked_pte is invoked.\n");
    PRE_WRAPPER_FUNC(mm, addr, ptl);
    pte_t *ret = __get_locked_pte(mm, addr, ptl);
    POST_WRAPPER_FUNC(mm, addr, ptl);
    kern_printk("__get_locked_pte returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_disable_all_gpes
#define APP_WRAPPER_FOR_acpi_disable_all_gpes
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_disable_all_gpes
#define APP_WRAPPER_FOR_acpi_disable_all_gpes
FUNCTION_WRAPPER(acpi_disable_all_gpes, (), {
    kern_printk("acpi_disable_all_gpes is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_status ret = acpi_disable_all_gpes();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_disable_all_gpes returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_bitmap_scnlistprintf
#define APP_WRAPPER_FOR_bitmap_scnlistprintf
#endif
 
#ifndef APP_WRAPPER_FOR_bitmap_scnlistprintf
#define APP_WRAPPER_FOR_bitmap_scnlistprintf
FUNCTION_WRAPPER(bitmap_scnlistprintf, (char *buf, unsigned int len, unsigned const long *src, int nbits), {
    kern_printk("bitmap_scnlistprintf is invoked.\n");
    PRE_WRAPPER_FUNC(buf, len, src, nbits);
    int ret = bitmap_scnlistprintf(buf, len, src, nbits);
    POST_WRAPPER_FUNC(buf, len, src, nbits);
    kern_printk("bitmap_scnlistprintf returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_qdisc_class_hash_grow
#define APP_WRAPPER_FOR_qdisc_class_hash_grow
#endif
 
#ifndef APP_WRAPPER_FOR_qdisc_class_hash_grow
#define APP_WRAPPER_FOR_qdisc_class_hash_grow
FUNCTION_WRAPPER_VOID(qdisc_class_hash_grow, (struct Qdisc *_arg1, struct Qdisc_class_hash *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("qdisc_class_hash_grow is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    qdisc_class_hash_grow(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("qdisc_class_hash_grow returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_mm_drop_all_locks
#define APP_WRAPPER_FOR_mm_drop_all_locks
#endif
 
#ifndef APP_WRAPPER_FOR_mm_drop_all_locks
#define APP_WRAPPER_FOR_mm_drop_all_locks
FUNCTION_WRAPPER_VOID(mm_drop_all_locks, (struct mm_struct *mm), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    kern_printk("mm_drop_all_locks is invoked.\n");
    PRE_WRAPPER_FUNC(mm);
    mm_drop_all_locks(mm);
    POST_WRAPPER_FUNC(mm);
    kern_printk("mm_drop_all_locks returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
})
#endif


#ifndef KERN_ADDR_scsi_unregister_acpi_bus_type
#define APP_WRAPPER_FOR_scsi_unregister_acpi_bus_type
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_unregister_acpi_bus_type
#define APP_WRAPPER_FOR_scsi_unregister_acpi_bus_type
FUNCTION_WRAPPER_VOID(scsi_unregister_acpi_bus_type, (struct acpi_bus_type *bus), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct acpi_bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("scsi_unregister_acpi_bus_type is invoked.\n");
    PRE_WRAPPER_FUNC(bus);
    scsi_unregister_acpi_bus_type(bus);
    POST_WRAPPER_FUNC(bus);
    kern_printk("scsi_unregister_acpi_bus_type returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct acpi_bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
})
#endif


#ifndef KERN_ADDR_crypto_shash_digest
#define APP_WRAPPER_FOR_crypto_shash_digest
#endif
 
#ifndef APP_WRAPPER_FOR_crypto_shash_digest
#define APP_WRAPPER_FOR_crypto_shash_digest
FUNCTION_WRAPPER(crypto_shash_digest, (struct shash_desc *desc, const u8 *data, unsigned int len, u8 *out), {
    WRAP_RECURSIVE(desc);
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct shash_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
    kern_printk("crypto_shash_digest is invoked.\n");
    PRE_WRAPPER_FUNC(desc, data, len, out);
    int ret = crypto_shash_digest(desc, data, len, out);
    POST_WRAPPER_FUNC(desc, data, len, out);
    kern_printk("crypto_shash_digest returned.\n");
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct shash_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_table_add_target_callbacks
#define APP_WRAPPER_FOR_dm_table_add_target_callbacks
#endif
 
#ifndef APP_WRAPPER_FOR_dm_table_add_target_callbacks
#define APP_WRAPPER_FOR_dm_table_add_target_callbacks
FUNCTION_WRAPPER_VOID(dm_table_add_target_callbacks, (struct dm_table *t, struct dm_target_callbacks *cb), {
    WRAP_RECURSIVE(cb);
    TRACES_IF_WATCHPOINT(cb);
    SCAN_HEAD_FUNC(struct dm_target_callbacks)(*(TO_UNWATCHED_ADDRESS(cb)));
    kern_printk("dm_table_add_target_callbacks is invoked.\n");
    PRE_WRAPPER_FUNC(t, cb);
    dm_table_add_target_callbacks(t, cb);
    POST_WRAPPER_FUNC(t, cb);
    kern_printk("dm_table_add_target_callbacks returned.\n");
    TRACES_IF_WATCHPOINT(cb);
    SCAN_HEAD_FUNC(struct dm_target_callbacks)(*(TO_UNWATCHED_ADDRESS(cb)));
})
#endif


#ifndef KERN_ADDR_sock_wmalloc
#define APP_WRAPPER_FOR_sock_wmalloc
#endif
 
#ifndef APP_WRAPPER_FOR_sock_wmalloc
#define APP_WRAPPER_FOR_sock_wmalloc
FUNCTION_WRAPPER(sock_wmalloc, (struct sock *sk, unsigned long size, int force, gfp_t priority), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sock_wmalloc is invoked.\n");
    PRE_WRAPPER_FUNC(sk, size, force, priority);
    struct sk_buff *ret = sock_wmalloc(sk, size, force, priority);
    POST_WRAPPER_FUNC(sk, size, force, priority);
    kern_printk("sock_wmalloc returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_assign_unassigned_resources
#define APP_WRAPPER_FOR_pci_assign_unassigned_resources
#endif
 
#ifndef APP_WRAPPER_FOR_pci_assign_unassigned_resources
#define APP_WRAPPER_FOR_pci_assign_unassigned_resources
FUNCTION_WRAPPER_VOID(pci_assign_unassigned_resources, (), {
    kern_printk("pci_assign_unassigned_resources is invoked.\n");
    PRE_WRAPPER_FUNC();
    pci_assign_unassigned_resources();
    POST_WRAPPER_FUNC();
    kern_printk("pci_assign_unassigned_resources returned.\n");
})
#endif


#ifndef KERN_ADDR_ata_scsi_simulate
#define APP_WRAPPER_FOR_ata_scsi_simulate
#endif
 
#ifndef APP_WRAPPER_FOR_ata_scsi_simulate
#define APP_WRAPPER_FOR_ata_scsi_simulate
FUNCTION_WRAPPER_VOID(ata_scsi_simulate, (struct ata_device *dev, struct scsi_cmnd *cmd), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct ata_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("ata_scsi_simulate is invoked.\n");
    PRE_WRAPPER_FUNC(dev, cmd);
    ata_scsi_simulate(dev, cmd);
    POST_WRAPPER_FUNC(dev, cmd);
    kern_printk("ata_scsi_simulate returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct ata_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_dma_supported
#define APP_WRAPPER_FOR_dma_supported
#endif
 
#ifndef APP_WRAPPER_FOR_dma_supported
#define APP_WRAPPER_FOR_dma_supported
FUNCTION_WRAPPER(dma_supported, (struct device *hwdev, u64 mask), {
    WRAP_RECURSIVE(hwdev);
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
    kern_printk("dma_supported is invoked.\n");
    PRE_WRAPPER_FUNC(hwdev, mask);
    int ret = dma_supported(hwdev, mask);
    POST_WRAPPER_FUNC(hwdev, mask);
    kern_printk("dma_supported returned.\n");
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_leave_mm
#define APP_WRAPPER_FOR_leave_mm
#endif
 
#ifndef APP_WRAPPER_FOR_leave_mm
#define APP_WRAPPER_FOR_leave_mm
FUNCTION_WRAPPER_VOID(leave_mm, (int cpu), {
    kern_printk("leave_mm is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    leave_mm(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("leave_mm returned.\n");
})
#endif


#ifndef KERN_ADDR_ata_sff_pause
#define APP_WRAPPER_FOR_ata_sff_pause
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_pause
#define APP_WRAPPER_FOR_ata_sff_pause
FUNCTION_WRAPPER_VOID(ata_sff_pause, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_sff_pause is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    ata_sff_pause(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_sff_pause returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_sk_setup_caps
#define APP_WRAPPER_FOR_sk_setup_caps
#endif
 
#ifndef APP_WRAPPER_FOR_sk_setup_caps
#define APP_WRAPPER_FOR_sk_setup_caps
FUNCTION_WRAPPER_VOID(sk_setup_caps, (struct sock *sk, struct dst_entry *dst), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(dst);
    TRACES_IF_WATCHPOINT(dst);
    SCAN_HEAD_FUNC(struct dst_entry)(*(TO_UNWATCHED_ADDRESS(dst)));
    kern_printk("sk_setup_caps is invoked.\n");
    PRE_WRAPPER_FUNC(sk, dst);
    sk_setup_caps(sk, dst);
    POST_WRAPPER_FUNC(sk, dst);
    kern_printk("sk_setup_caps returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(dst);
    SCAN_HEAD_FUNC(struct dst_entry)(*(TO_UNWATCHED_ADDRESS(dst)));
})
#endif


#ifndef KERN_ADDR_map_kernel_range_noflush
#define APP_WRAPPER_FOR_map_kernel_range_noflush
#endif
 
#ifndef APP_WRAPPER_FOR_map_kernel_range_noflush
#define APP_WRAPPER_FOR_map_kernel_range_noflush
FUNCTION_WRAPPER(map_kernel_range_noflush, (unsigned long start, unsigned long size, pgprot_t prot, struct page **pages), {
    WRAP_RECURSIVE(pages);
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    kern_printk("map_kernel_range_noflush is invoked.\n");
    PRE_WRAPPER_FUNC(start, size, prot, pages);
    int ret = map_kernel_range_noflush(start, size, prot, pages);
    POST_WRAPPER_FUNC(start, size, prot, pages);
    kern_printk("map_kernel_range_noflush returned.\n");
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    return ret;
})
#endif


#ifndef KERN_ADDR_smp_call_function_interrupt
#define APP_WRAPPER_FOR_smp_call_function_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_smp_call_function_interrupt
#define APP_WRAPPER_FOR_smp_call_function_interrupt
FUNCTION_WRAPPER_VOID(smp_call_function_interrupt, (struct pt_regs *_arg1), {
    kern_printk("smp_call_function_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    smp_call_function_interrupt(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("smp_call_function_interrupt returned.\n");
})
#endif


#ifndef KERN_ADDR_bdget_disk
#define APP_WRAPPER_FOR_bdget_disk
#endif
 
#ifndef APP_WRAPPER_FOR_bdget_disk
#define APP_WRAPPER_FOR_bdget_disk
FUNCTION_WRAPPER(bdget_disk, (struct gendisk *disk, int partno), {
    WRAP_RECURSIVE(disk);
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    kern_printk("bdget_disk is invoked.\n");
    PRE_WRAPPER_FUNC(disk, partno);
    struct block_device *ret = bdget_disk(disk, partno);
    POST_WRAPPER_FUNC(disk, partno);
    kern_printk("bdget_disk returned.\n");
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_bio_endio
#define APP_WRAPPER_FOR_bio_endio
#endif
 
#ifndef APP_WRAPPER_FOR_bio_endio
#define APP_WRAPPER_FOR_bio_endio
FUNCTION_WRAPPER_VOID(bio_endio, (struct bio *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bio_endio is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    bio_endio(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("bio_endio returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_revert_creds
#define APP_WRAPPER_FOR_revert_creds
#endif
 
#ifndef APP_WRAPPER_FOR_revert_creds
#define APP_WRAPPER_FOR_revert_creds
FUNCTION_WRAPPER_VOID(revert_creds, (const struct cred *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct cred)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("revert_creds is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    revert_creds(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("revert_creds returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct cred)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_jbd2_journal_restart
#define APP_WRAPPER_FOR_jbd2_journal_restart
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_restart
#define APP_WRAPPER_FOR_jbd2_journal_restart
FUNCTION_WRAPPER(jbd2_journal_restart, (handle_t *_arg1, int nblocks), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(handle_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_restart is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, nblocks);
    int ret = jbd2_journal_restart(_arg1, nblocks);
    POST_WRAPPER_FUNC(_arg1, nblocks);
    kern_printk("jbd2_journal_restart returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(handle_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR__raw_spin_lock_nested
#define APP_WRAPPER_FOR__raw_spin_lock_nested
#endif
 
#ifndef APP_WRAPPER_FOR__raw_spin_lock_nested
#define APP_WRAPPER_FOR__raw_spin_lock_nested
FUNCTION_WRAPPER_VOID(_raw_spin_lock_nested, (raw_spinlock_t *lock, int subclass), {
    kern_printk("_raw_spin_lock_nested is invoked.\n");
    PRE_WRAPPER_FUNC(lock, subclass);
    _raw_spin_lock_nested(lock, subclass);
    POST_WRAPPER_FUNC(lock, subclass);
    kern_printk("_raw_spin_lock_nested returned.\n");
})
#endif


#ifndef KERN_ADDR___qdisc_calculate_pkt_len
#define APP_WRAPPER_FOR___qdisc_calculate_pkt_len
#endif
 
#ifndef APP_WRAPPER_FOR___qdisc_calculate_pkt_len
#define APP_WRAPPER_FOR___qdisc_calculate_pkt_len
FUNCTION_WRAPPER_VOID(__qdisc_calculate_pkt_len, (struct sk_buff *skb, const struct qdisc_size_table *stab), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_RECURSIVE(stab);
    TRACES_IF_WATCHPOINT(stab);
    SCAN_HEAD_FUNC(const struct qdisc_size_table)(*(TO_UNWATCHED_ADDRESS(stab)));
    kern_printk("__qdisc_calculate_pkt_len is invoked.\n");
    PRE_WRAPPER_FUNC(skb, stab);
    __qdisc_calculate_pkt_len(skb, stab);
    POST_WRAPPER_FUNC(skb, stab);
    kern_printk("__qdisc_calculate_pkt_len returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    TRACES_IF_WATCHPOINT(stab);
    SCAN_HEAD_FUNC(const struct qdisc_size_table)(*(TO_UNWATCHED_ADDRESS(stab)));
})
#endif


#ifndef KERN_ADDR_inet_csk_reqsk_queue_hash_add
#define APP_WRAPPER_FOR_inet_csk_reqsk_queue_hash_add
#endif
 
#ifndef APP_WRAPPER_FOR_inet_csk_reqsk_queue_hash_add
#define APP_WRAPPER_FOR_inet_csk_reqsk_queue_hash_add
FUNCTION_WRAPPER_VOID(inet_csk_reqsk_queue_hash_add, (struct sock *sk, struct request_sock *req, unsigned long timeout), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(req);
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct request_sock)(*(TO_UNWATCHED_ADDRESS(req)));
    kern_printk("inet_csk_reqsk_queue_hash_add is invoked.\n");
    PRE_WRAPPER_FUNC(sk, req, timeout);
    inet_csk_reqsk_queue_hash_add(sk, req, timeout);
    POST_WRAPPER_FUNC(sk, req, timeout);
    kern_printk("inet_csk_reqsk_queue_hash_add returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct request_sock)(*(TO_UNWATCHED_ADDRESS(req)));
})
#endif


#ifndef KERN_ADDR_dirty_bytes_handler
#define APP_WRAPPER_FOR_dirty_bytes_handler
#endif
 
#ifndef APP_WRAPPER_FOR_dirty_bytes_handler
#define APP_WRAPPER_FOR_dirty_bytes_handler
FUNCTION_WRAPPER(dirty_bytes_handler, (struct ctl_table *table, int write, void *buffer, size_t *lenp, loff_t *ppos), {
    WRAP_RECURSIVE(table);
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    kern_printk("dirty_bytes_handler is invoked.\n");
    PRE_WRAPPER_FUNC(table, write, buffer, lenp, ppos);
    int ret = dirty_bytes_handler(table, write, buffer, lenp, ppos);
    POST_WRAPPER_FUNC(table, write, buffer, lenp, ppos);
    kern_printk("dirty_bytes_handler returned.\n");
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    return ret;
})
#endif


#ifndef KERN_ADDR_rcu_barrier_bh
#define APP_WRAPPER_FOR_rcu_barrier_bh
#endif
 
#ifndef APP_WRAPPER_FOR_rcu_barrier_bh
#define APP_WRAPPER_FOR_rcu_barrier_bh
FUNCTION_WRAPPER_VOID(rcu_barrier_bh, (), {
    kern_printk("rcu_barrier_bh is invoked.\n");
    PRE_WRAPPER_FUNC();
    rcu_barrier_bh();
    POST_WRAPPER_FUNC();
    kern_printk("rcu_barrier_bh returned.\n");
})
#endif


#ifndef KERN_ADDR____ratelimit
#define APP_WRAPPER_FOR____ratelimit
#endif
 
#ifndef APP_WRAPPER_FOR____ratelimit
#define APP_WRAPPER_FOR____ratelimit
FUNCTION_WRAPPER(___ratelimit, (struct ratelimit_state *rs, const char *func), {
    kern_printk("___ratelimit is invoked.\n");
    PRE_WRAPPER_FUNC(rs, func);
    int ret = ___ratelimit(rs, func);
    POST_WRAPPER_FUNC(rs, func);
    kern_printk("___ratelimit returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_bus_rescan_devices
#define APP_WRAPPER_FOR_bus_rescan_devices
#endif
 
#ifndef APP_WRAPPER_FOR_bus_rescan_devices
#define APP_WRAPPER_FOR_bus_rescan_devices
FUNCTION_WRAPPER(bus_rescan_devices, (struct bus_type *bus), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("bus_rescan_devices is invoked.\n");
    PRE_WRAPPER_FUNC(bus);
    int ret = bus_rescan_devices(bus);
    POST_WRAPPER_FUNC(bus);
    kern_printk("bus_rescan_devices returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    return ret;
})
#endif


#ifndef KERN_ADDR_set_pages_rw
#define APP_WRAPPER_FOR_set_pages_rw
#endif
 
#ifndef APP_WRAPPER_FOR_set_pages_rw
#define APP_WRAPPER_FOR_set_pages_rw
FUNCTION_WRAPPER(set_pages_rw, (struct page *page, int numpages), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("set_pages_rw is invoked.\n");
    PRE_WRAPPER_FUNC(page, numpages);
    int ret = set_pages_rw(page, numpages);
    POST_WRAPPER_FUNC(page, numpages);
    kern_printk("set_pages_rw returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_add_input_randomness
#define APP_WRAPPER_FOR_add_input_randomness
#endif
 
#ifndef APP_WRAPPER_FOR_add_input_randomness
#define APP_WRAPPER_FOR_add_input_randomness
FUNCTION_WRAPPER_VOID(add_input_randomness, (unsigned int type, unsigned int code, unsigned int value), {
    kern_printk("add_input_randomness is invoked.\n");
    PRE_WRAPPER_FUNC(type, code, value);
    add_input_randomness(type, code, value);
    POST_WRAPPER_FUNC(type, code, value);
    kern_printk("add_input_randomness returned.\n");
})
#endif


#ifndef KERN_ADDR_sysctl_init
#define APP_WRAPPER_FOR_sysctl_init
#endif
 
#ifndef APP_WRAPPER_FOR_sysctl_init
#define APP_WRAPPER_FOR_sysctl_init
FUNCTION_WRAPPER(sysctl_init, (), {
    kern_printk("sysctl_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = sysctl_init();
    POST_WRAPPER_FUNC();
    kern_printk("sysctl_init returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_fetch_request
#define APP_WRAPPER_FOR_blk_fetch_request
#endif
 
#ifndef APP_WRAPPER_FOR_blk_fetch_request
#define APP_WRAPPER_FOR_blk_fetch_request
FUNCTION_WRAPPER(blk_fetch_request, (struct request_queue *q), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    kern_printk("blk_fetch_request is invoked.\n");
    PRE_WRAPPER_FUNC(q);
    struct request *ret = blk_fetch_request(q);
    POST_WRAPPER_FUNC(q);
    kern_printk("blk_fetch_request returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_kstrtoll_from_user
#define APP_WRAPPER_FOR_kstrtoll_from_user
#endif
 
#ifndef APP_WRAPPER_FOR_kstrtoll_from_user
#define APP_WRAPPER_FOR_kstrtoll_from_user
FUNCTION_WRAPPER(kstrtoll_from_user, (const char *s, size_t count, unsigned int base, long long *res), {
    kern_printk("kstrtoll_from_user is invoked.\n");
    PRE_WRAPPER_FUNC(s, count, base, res);
    int ret = kstrtoll_from_user(s, count, base, res);
    POST_WRAPPER_FUNC(s, count, base, res);
    kern_printk("kstrtoll_from_user returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_simple_attr_release
#define APP_WRAPPER_FOR_simple_attr_release
#endif
 
#ifndef APP_WRAPPER_FOR_simple_attr_release
#define APP_WRAPPER_FOR_simple_attr_release
FUNCTION_WRAPPER(simple_attr_release, (struct inode *inode, struct file *file), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("simple_attr_release is invoked.\n");
    PRE_WRAPPER_FUNC(inode, file);
    int ret = simple_attr_release(inode, file);
    POST_WRAPPER_FUNC(inode, file);
    kern_printk("simple_attr_release returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_set_pages_ro
#define APP_WRAPPER_FOR_set_pages_ro
#endif
 
#ifndef APP_WRAPPER_FOR_set_pages_ro
#define APP_WRAPPER_FOR_set_pages_ro
FUNCTION_WRAPPER(set_pages_ro, (struct page *page, int numpages), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("set_pages_ro is invoked.\n");
    PRE_WRAPPER_FUNC(page, numpages);
    int ret = set_pages_ro(page, numpages);
    POST_WRAPPER_FUNC(page, numpages);
    kern_printk("set_pages_ro returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_abort_seq_read
#define APP_WRAPPER_FOR_skb_abort_seq_read
#endif
 
#ifndef APP_WRAPPER_FOR_skb_abort_seq_read
#define APP_WRAPPER_FOR_skb_abort_seq_read
FUNCTION_WRAPPER_VOID(skb_abort_seq_read, (struct skb_seq_state *st), {
    WRAP_RECURSIVE(st);
    TRACES_IF_WATCHPOINT(st);
    SCAN_HEAD_FUNC(struct skb_seq_state)(*(TO_UNWATCHED_ADDRESS(st)));
    kern_printk("skb_abort_seq_read is invoked.\n");
    PRE_WRAPPER_FUNC(st);
    skb_abort_seq_read(st);
    POST_WRAPPER_FUNC(st);
    kern_printk("skb_abort_seq_read returned.\n");
    TRACES_IF_WATCHPOINT(st);
    SCAN_HEAD_FUNC(struct skb_seq_state)(*(TO_UNWATCHED_ADDRESS(st)));
})
#endif


#ifndef KERN_ADDR_dev_uc_unsync
#define APP_WRAPPER_FOR_dev_uc_unsync
#endif
 
#ifndef APP_WRAPPER_FOR_dev_uc_unsync
#define APP_WRAPPER_FOR_dev_uc_unsync
FUNCTION_WRAPPER_VOID(dev_uc_unsync, (struct net_device *to, struct net_device *from), {
    WRAP_RECURSIVE(to);
    TRACES_IF_WATCHPOINT(to);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(to)));
    WRAP_RECURSIVE(from);
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(from)));
    kern_printk("dev_uc_unsync is invoked.\n");
    PRE_WRAPPER_FUNC(to, from);
    dev_uc_unsync(to, from);
    POST_WRAPPER_FUNC(to, from);
    kern_printk("dev_uc_unsync returned.\n");
    TRACES_IF_WATCHPOINT(to);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(to)));
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(from)));
})
#endif


#ifndef KERN_ADDR_remove_irq
#define APP_WRAPPER_FOR_remove_irq
#endif
 
#ifndef APP_WRAPPER_FOR_remove_irq
#define APP_WRAPPER_FOR_remove_irq
FUNCTION_WRAPPER_VOID(remove_irq, (unsigned int irq, struct irqaction *act), {
    WRAP_RECURSIVE(act);
    TRACES_IF_WATCHPOINT(act);
    SCAN_HEAD_FUNC(struct irqaction)(*(TO_UNWATCHED_ADDRESS(act)));
    kern_printk("remove_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq, act);
    remove_irq(irq, act);
    POST_WRAPPER_FUNC(irq, act);
    kern_printk("remove_irq returned.\n");
    TRACES_IF_WATCHPOINT(act);
    SCAN_HEAD_FUNC(struct irqaction)(*(TO_UNWATCHED_ADDRESS(act)));
})
#endif


#ifndef KERN_ADDR_arch_probe_nr_irqs
#define APP_WRAPPER_FOR_arch_probe_nr_irqs
#endif
 
#ifndef APP_WRAPPER_FOR_arch_probe_nr_irqs
#define APP_WRAPPER_FOR_arch_probe_nr_irqs
FUNCTION_WRAPPER(arch_probe_nr_irqs, (), {
    kern_printk("arch_probe_nr_irqs is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = arch_probe_nr_irqs();
    POST_WRAPPER_FUNC();
    kern_printk("arch_probe_nr_irqs returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sk_clone_lock
#define APP_WRAPPER_FOR_sk_clone_lock
#endif
 
#ifndef APP_WRAPPER_FOR_sk_clone_lock
#define APP_WRAPPER_FOR_sk_clone_lock
FUNCTION_WRAPPER(sk_clone_lock, (const struct sock *sk, const gfp_t priority), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(const struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sk_clone_lock is invoked.\n");
    PRE_WRAPPER_FUNC(sk, priority);
    struct sock *ret = sk_clone_lock(sk, priority);
    POST_WRAPPER_FUNC(sk, priority);
    kern_printk("sk_clone_lock returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(const struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_listxattr
#define APP_WRAPPER_FOR_vfs_listxattr
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_listxattr
#define APP_WRAPPER_FOR_vfs_listxattr
FUNCTION_WRAPPER(vfs_listxattr, (struct dentry *d, char *list, size_t size), {
    WRAP_RECURSIVE(d);
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(d)));
    kern_printk("vfs_listxattr is invoked.\n");
    PRE_WRAPPER_FUNC(d, list, size);
    ssize_t ret = vfs_listxattr(d, list, size);
    POST_WRAPPER_FUNC(d, list, size);
    kern_printk("vfs_listxattr returned.\n");
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(d)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kobj_ns_drop
#define APP_WRAPPER_FOR_kobj_ns_drop
#endif
 
#ifndef APP_WRAPPER_FOR_kobj_ns_drop
#define APP_WRAPPER_FOR_kobj_ns_drop
FUNCTION_WRAPPER_VOID(kobj_ns_drop, (enum kobj_ns_type type, void *ns), {
    kern_printk("kobj_ns_drop is invoked.\n");
    PRE_WRAPPER_FUNC(type, ns);
    kobj_ns_drop(type, ns);
    POST_WRAPPER_FUNC(type, ns);
    kern_printk("kobj_ns_drop returned.\n");
})
#endif


#ifndef KERN_ADDR_kclist_add
#define APP_WRAPPER_FOR_kclist_add
#endif
 
#ifndef APP_WRAPPER_FOR_kclist_add
#define APP_WRAPPER_FOR_kclist_add
FUNCTION_WRAPPER_VOID(kclist_add, (struct kcore_list *_arg1, void *_arg2, size_t _arg3, int type), {
    kern_printk("kclist_add is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, type);
    kclist_add(_arg1, _arg2, _arg3, type);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, type);
    kern_printk("kclist_add returned.\n");
})
#endif


#ifndef KERN_ADDR_cap_inode_killpriv
#define APP_WRAPPER_FOR_cap_inode_killpriv
#endif
 
#ifndef APP_WRAPPER_FOR_cap_inode_killpriv
#define APP_WRAPPER_FOR_cap_inode_killpriv
FUNCTION_WRAPPER(cap_inode_killpriv, (struct dentry *dentry), {
    WRAP_RECURSIVE(dentry);
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    kern_printk("cap_inode_killpriv is invoked.\n");
    PRE_WRAPPER_FUNC(dentry);
    int ret = cap_inode_killpriv(dentry);
    POST_WRAPPER_FUNC(dentry);
    kern_printk("cap_inode_killpriv returned.\n");
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bio_init
#define APP_WRAPPER_FOR_bio_init
#endif
 
#ifndef APP_WRAPPER_FOR_bio_init
#define APP_WRAPPER_FOR_bio_init
FUNCTION_WRAPPER_VOID(bio_init, (struct bio *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bio_init is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    bio_init(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("bio_init returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_find_vpid
#define APP_WRAPPER_FOR_find_vpid
#endif
 
#ifndef APP_WRAPPER_FOR_find_vpid
#define APP_WRAPPER_FOR_find_vpid
FUNCTION_WRAPPER(find_vpid, (int nr), {
    kern_printk("find_vpid is invoked.\n");
    PRE_WRAPPER_FUNC(nr);
    struct pid *ret = find_vpid(nr);
    POST_WRAPPER_FUNC(nr);
    kern_printk("find_vpid returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_set_task_blockstep
#define APP_WRAPPER_FOR_set_task_blockstep
#endif
 
#ifndef APP_WRAPPER_FOR_set_task_blockstep
#define APP_WRAPPER_FOR_set_task_blockstep
FUNCTION_WRAPPER_VOID(set_task_blockstep, (struct task_struct *task, bool on), {
    WRAP_RECURSIVE(task);
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    kern_printk("set_task_blockstep is invoked.\n");
    PRE_WRAPPER_FUNC(task, on);
    set_task_blockstep(task, on);
    POST_WRAPPER_FUNC(task, on);
    kern_printk("set_task_blockstep returned.\n");
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
})
#endif


#ifndef KERN_ADDR_pm_wakeup_event
#define APP_WRAPPER_FOR_pm_wakeup_event
#endif
 
#ifndef APP_WRAPPER_FOR_pm_wakeup_event
#define APP_WRAPPER_FOR_pm_wakeup_event
FUNCTION_WRAPPER_VOID(pm_wakeup_event, (struct device *dev, unsigned int msec), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pm_wakeup_event is invoked.\n");
    PRE_WRAPPER_FUNC(dev, msec);
    pm_wakeup_event(dev, msec);
    POST_WRAPPER_FUNC(dev, msec);
    kern_printk("pm_wakeup_event returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_swap_readpage
#define APP_WRAPPER_FOR_swap_readpage
#endif
 
#ifndef APP_WRAPPER_FOR_swap_readpage
#define APP_WRAPPER_FOR_swap_readpage
FUNCTION_WRAPPER(swap_readpage, (struct page *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("swap_readpage is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = swap_readpage(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("swap_readpage returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_memcpy
#define APP_WRAPPER_FOR_memcpy
#endif
 
#ifndef APP_WRAPPER_FOR_memcpy
#define APP_WRAPPER_FOR_memcpy
FUNCTION_WRAPPER(memcpy, (void *to, const void *from, size_t len), {
    kern_printk("memcpy is invoked.\n");
    PRE_WRAPPER_FUNC(to, from, len);
    void *ret = memcpy(to, from, len);
    POST_WRAPPER_FUNC(to, from, len);
    kern_printk("memcpy returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_swap_setup
#define APP_WRAPPER_FOR_swap_setup
#endif
 
#ifndef APP_WRAPPER_FOR_swap_setup
#define APP_WRAPPER_FOR_swap_setup
FUNCTION_WRAPPER_VOID(swap_setup, (), {
    kern_printk("swap_setup is invoked.\n");
    PRE_WRAPPER_FUNC();
    swap_setup();
    POST_WRAPPER_FUNC();
    kern_printk("swap_setup returned.\n");
})
#endif


#ifndef KERN_ADDR_input_ff_destroy
#define APP_WRAPPER_FOR_input_ff_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_input_ff_destroy
#define APP_WRAPPER_FOR_input_ff_destroy
FUNCTION_WRAPPER_VOID(input_ff_destroy, (struct input_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("input_ff_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    input_ff_destroy(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("input_ff_destroy returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_memory_add_physaddr_to_nid
#define APP_WRAPPER_FOR_memory_add_physaddr_to_nid
#endif
 
#ifndef APP_WRAPPER_FOR_memory_add_physaddr_to_nid
#define APP_WRAPPER_FOR_memory_add_physaddr_to_nid
FUNCTION_WRAPPER(memory_add_physaddr_to_nid, (u64 start), {
    kern_printk("memory_add_physaddr_to_nid is invoked.\n");
    PRE_WRAPPER_FUNC(start);
    int ret = memory_add_physaddr_to_nid(start);
    POST_WRAPPER_FUNC(start);
    kern_printk("memory_add_physaddr_to_nid returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dqget
#define APP_WRAPPER_FOR_dqget
#endif
 
#ifndef APP_WRAPPER_FOR_dqget
#define APP_WRAPPER_FOR_dqget
FUNCTION_WRAPPER(dqget, (struct super_block *sb, struct kqid qid), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("dqget is invoked.\n");
    PRE_WRAPPER_FUNC(sb, qid);
    struct dquot *ret = dqget(sb, qid);
    POST_WRAPPER_FUNC(sb, qid);
    kern_printk("dqget returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_napi_gro_receive
#define APP_WRAPPER_FOR_napi_gro_receive
#endif
 
#ifndef APP_WRAPPER_FOR_napi_gro_receive
#define APP_WRAPPER_FOR_napi_gro_receive
FUNCTION_WRAPPER(napi_gro_receive, (struct napi_struct *napi, struct sk_buff *skb), {
    WRAP_RECURSIVE(napi);
    TRACES_IF_WATCHPOINT(napi);
    SCAN_HEAD_FUNC(struct napi_struct)(*(TO_UNWATCHED_ADDRESS(napi)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("napi_gro_receive is invoked.\n");
    PRE_WRAPPER_FUNC(napi, skb);
    gro_result_t ret = napi_gro_receive(napi, skb);
    POST_WRAPPER_FUNC(napi, skb);
    kern_printk("napi_gro_receive returned.\n");
    TRACES_IF_WATCHPOINT(napi);
    SCAN_HEAD_FUNC(struct napi_struct)(*(TO_UNWATCHED_ADDRESS(napi)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_memmap_init_zone
#define APP_WRAPPER_FOR_memmap_init_zone
#endif
 
#ifndef APP_WRAPPER_FOR_memmap_init_zone
#define APP_WRAPPER_FOR_memmap_init_zone
FUNCTION_WRAPPER_VOID(memmap_init_zone, (unsigned long _arg1, int _arg2, unsigned long _arg3, unsigned long _arg4, enum memmap_context _arg5), {
    kern_printk("memmap_init_zone is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    memmap_init_zone(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("memmap_init_zone returned.\n");
})
#endif


#ifndef KERN_ADDR_journal_tag_bytes
#define APP_WRAPPER_FOR_journal_tag_bytes
#endif
 
#ifndef APP_WRAPPER_FOR_journal_tag_bytes
#define APP_WRAPPER_FOR_journal_tag_bytes
FUNCTION_WRAPPER(journal_tag_bytes, (journal_t *journal), {
    WRAP_RECURSIVE(journal);
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    kern_printk("journal_tag_bytes is invoked.\n");
    PRE_WRAPPER_FUNC(journal);
    size_t ret = journal_tag_bytes(journal);
    POST_WRAPPER_FUNC(journal);
    kern_printk("journal_tag_bytes returned.\n");
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    return ret;
})
#endif


#ifndef KERN_ADDR_writeback_in_progress
#define APP_WRAPPER_FOR_writeback_in_progress
#endif
 
#ifndef APP_WRAPPER_FOR_writeback_in_progress
#define APP_WRAPPER_FOR_writeback_in_progress
FUNCTION_WRAPPER(writeback_in_progress, (struct backing_dev_info *bdi), {
    WRAP_RECURSIVE(bdi);
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
    kern_printk("writeback_in_progress is invoked.\n");
    PRE_WRAPPER_FUNC(bdi);
    int ret = writeback_in_progress(bdi);
    POST_WRAPPER_FUNC(bdi);
    kern_printk("writeback_in_progress returned.\n");
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
    return ret;
})
#endif


#ifndef KERN_ADDR_register_switch_driver
#define APP_WRAPPER_FOR_register_switch_driver
#endif
 
#ifndef APP_WRAPPER_FOR_register_switch_driver
#define APP_WRAPPER_FOR_register_switch_driver
FUNCTION_WRAPPER_VOID(register_switch_driver, (struct dsa_switch_driver *type), {
    WRAP_RECURSIVE(type);
    TRACES_IF_WATCHPOINT(type);
    SCAN_HEAD_FUNC(struct dsa_switch_driver)(*(TO_UNWATCHED_ADDRESS(type)));
    kern_printk("register_switch_driver is invoked.\n");
    PRE_WRAPPER_FUNC(type);
    register_switch_driver(type);
    POST_WRAPPER_FUNC(type);
    kern_printk("register_switch_driver returned.\n");
    TRACES_IF_WATCHPOINT(type);
    SCAN_HEAD_FUNC(struct dsa_switch_driver)(*(TO_UNWATCHED_ADDRESS(type)));
})
#endif


#ifndef KERN_ADDR_add_memory
#define APP_WRAPPER_FOR_add_memory
#endif
 
#ifndef APP_WRAPPER_FOR_add_memory
#define APP_WRAPPER_FOR_add_memory
FUNCTION_WRAPPER(add_memory, (int nid, u64 start, u64 size), {
    kern_printk("add_memory is invoked.\n");
    PRE_WRAPPER_FUNC(nid, start, size);
    int ret = add_memory(nid, start, size);
    POST_WRAPPER_FUNC(nid, start, size);
    kern_printk("add_memory returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_netif_device_attach
#define APP_WRAPPER_FOR_netif_device_attach
#endif
 
#ifndef APP_WRAPPER_FOR_netif_device_attach
#define APP_WRAPPER_FOR_netif_device_attach
FUNCTION_WRAPPER_VOID(netif_device_attach, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("netif_device_attach is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    netif_device_attach(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("netif_device_attach returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_dm_put_device
#define APP_WRAPPER_FOR_dm_put_device
#endif
 
#ifndef APP_WRAPPER_FOR_dm_put_device
#define APP_WRAPPER_FOR_dm_put_device
FUNCTION_WRAPPER_VOID(dm_put_device, (struct dm_target *ti, struct dm_dev *d), {
    WRAP_RECURSIVE(ti);
    TRACES_IF_WATCHPOINT(ti);
    SCAN_HEAD_FUNC(struct dm_target)(*(TO_UNWATCHED_ADDRESS(ti)));
    WRAP_RECURSIVE(d);
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct dm_dev)(*(TO_UNWATCHED_ADDRESS(d)));
    kern_printk("dm_put_device is invoked.\n");
    PRE_WRAPPER_FUNC(ti, d);
    dm_put_device(ti, d);
    POST_WRAPPER_FUNC(ti, d);
    kern_printk("dm_put_device returned.\n");
    TRACES_IF_WATCHPOINT(ti);
    SCAN_HEAD_FUNC(struct dm_target)(*(TO_UNWATCHED_ADDRESS(ti)));
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct dm_dev)(*(TO_UNWATCHED_ADDRESS(d)));
})
#endif


#ifndef KERN_ADDR___remove_inode_hash
#define APP_WRAPPER_FOR___remove_inode_hash
#endif
 
#ifndef APP_WRAPPER_FOR___remove_inode_hash
#define APP_WRAPPER_FOR___remove_inode_hash
FUNCTION_WRAPPER_VOID(__remove_inode_hash, (struct inode *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__remove_inode_hash is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    __remove_inode_hash(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__remove_inode_hash returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_move_addr_to_kernel
#define APP_WRAPPER_FOR_move_addr_to_kernel
#endif
 
#ifndef APP_WRAPPER_FOR_move_addr_to_kernel
#define APP_WRAPPER_FOR_move_addr_to_kernel
FUNCTION_WRAPPER(move_addr_to_kernel, (void *uaddr, int ulen, struct __kernel_sockaddr_storage *kaddr), {
    kern_printk("move_addr_to_kernel is invoked.\n");
    PRE_WRAPPER_FUNC(uaddr, ulen, kaddr);
    int ret = move_addr_to_kernel(uaddr, ulen, kaddr);
    POST_WRAPPER_FUNC(uaddr, ulen, kaddr);
    kern_printk("move_addr_to_kernel returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_writeback_inodes_sb_nr_if_idle
#define APP_WRAPPER_FOR_writeback_inodes_sb_nr_if_idle
#endif
 
#ifndef APP_WRAPPER_FOR_writeback_inodes_sb_nr_if_idle
#define APP_WRAPPER_FOR_writeback_inodes_sb_nr_if_idle
FUNCTION_WRAPPER(writeback_inodes_sb_nr_if_idle, (struct super_block *_arg1, unsigned long nr, enum wb_reason reason), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("writeback_inodes_sb_nr_if_idle is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, nr, reason);
    int ret = writeback_inodes_sb_nr_if_idle(_arg1, nr, reason);
    POST_WRAPPER_FUNC(_arg1, nr, reason);
    kern_printk("writeback_inodes_sb_nr_if_idle returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bust_spinlocks
#define APP_WRAPPER_FOR_bust_spinlocks
#endif
 
#ifndef APP_WRAPPER_FOR_bust_spinlocks
#define APP_WRAPPER_FOR_bust_spinlocks
FUNCTION_WRAPPER_VOID(bust_spinlocks, (int yes), {
    kern_printk("bust_spinlocks is invoked.\n");
    PRE_WRAPPER_FUNC(yes);
    bust_spinlocks(yes);
    POST_WRAPPER_FUNC(yes);
    kern_printk("bust_spinlocks returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_bus_get_ejd
#define APP_WRAPPER_FOR_acpi_bus_get_ejd
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_bus_get_ejd
#define APP_WRAPPER_FOR_acpi_bus_get_ejd
FUNCTION_WRAPPER(acpi_bus_get_ejd, (acpi_handle handle, acpi_handle *ejd), {
    kern_printk("acpi_bus_get_ejd is invoked.\n");
    PRE_WRAPPER_FUNC(handle, ejd);
    acpi_status ret = acpi_bus_get_ejd(handle, ejd);
    POST_WRAPPER_FUNC(handle, ejd);
    kern_printk("acpi_bus_get_ejd returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_mpage_readpage
#define APP_WRAPPER_FOR_mpage_readpage
#endif
 
#ifndef APP_WRAPPER_FOR_mpage_readpage
#define APP_WRAPPER_FOR_mpage_readpage
FUNCTION_WRAPPER(mpage_readpage, (struct page *page, get_block_t get_block), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("mpage_readpage is invoked.\n");
    PRE_WRAPPER_FUNC(page, get_block);
    int ret = mpage_readpage(page, get_block);
    POST_WRAPPER_FUNC(page, get_block);
    kern_printk("mpage_readpage returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_res_counter_memparse_write_strategy
#define APP_WRAPPER_FOR_res_counter_memparse_write_strategy
#endif
 
#ifndef APP_WRAPPER_FOR_res_counter_memparse_write_strategy
#define APP_WRAPPER_FOR_res_counter_memparse_write_strategy
FUNCTION_WRAPPER(res_counter_memparse_write_strategy, (const char *buf, unsigned long long *res), {
    kern_printk("res_counter_memparse_write_strategy is invoked.\n");
    PRE_WRAPPER_FUNC(buf, res);
    int ret = res_counter_memparse_write_strategy(buf, res);
    POST_WRAPPER_FUNC(buf, res);
    kern_printk("res_counter_memparse_write_strategy returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_text_poke_smp
#define APP_WRAPPER_FOR_text_poke_smp
#endif
 
#ifndef APP_WRAPPER_FOR_text_poke_smp
#define APP_WRAPPER_FOR_text_poke_smp
FUNCTION_WRAPPER(text_poke_smp, (void *addr, const void *opcode, size_t len), {
    kern_printk("text_poke_smp is invoked.\n");
    PRE_WRAPPER_FUNC(addr, opcode, len);
    void *ret = text_poke_smp(addr, opcode, len);
    POST_WRAPPER_FUNC(addr, opcode, len);
    kern_printk("text_poke_smp returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_paravirt_patch_jmp
#define APP_WRAPPER_FOR_paravirt_patch_jmp
#endif
 
#ifndef APP_WRAPPER_FOR_paravirt_patch_jmp
#define APP_WRAPPER_FOR_paravirt_patch_jmp
FUNCTION_WRAPPER(paravirt_patch_jmp, (void *insnbuf, const void *target, unsigned long addr, unsigned int len), {
    kern_printk("paravirt_patch_jmp is invoked.\n");
    PRE_WRAPPER_FUNC(insnbuf, target, addr, len);
    int ret = paravirt_patch_jmp(insnbuf, target, addr, len);
    POST_WRAPPER_FUNC(insnbuf, target, addr, len);
    kern_printk("paravirt_patch_jmp returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___delete_from_page_cache
#define APP_WRAPPER_FOR___delete_from_page_cache
#endif
 
#ifndef APP_WRAPPER_FOR___delete_from_page_cache
#define APP_WRAPPER_FOR___delete_from_page_cache
FUNCTION_WRAPPER_VOID(__delete_from_page_cache, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("__delete_from_page_cache is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    __delete_from_page_cache(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("__delete_from_page_cache returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_pci_reassign_resource
#define APP_WRAPPER_FOR_pci_reassign_resource
#endif
 
#ifndef APP_WRAPPER_FOR_pci_reassign_resource
#define APP_WRAPPER_FOR_pci_reassign_resource
FUNCTION_WRAPPER(pci_reassign_resource, (struct pci_dev *dev, int i, resource_size_t add_size, resource_size_t align), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_reassign_resource is invoked.\n");
    PRE_WRAPPER_FUNC(dev, i, add_size, align);
    int ret = pci_reassign_resource(dev, i, add_size, align);
    POST_WRAPPER_FUNC(dev, i, add_size, align);
    kern_printk("pci_reassign_resource returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_wrmsr_safe_regs_on_cpu
#define APP_WRAPPER_FOR_wrmsr_safe_regs_on_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_wrmsr_safe_regs_on_cpu
#define APP_WRAPPER_FOR_wrmsr_safe_regs_on_cpu
FUNCTION_WRAPPER(wrmsr_safe_regs_on_cpu, (unsigned int cpu, u32 regs[8]), {
    kern_printk("wrmsr_safe_regs_on_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, regs);
    int ret = wrmsr_safe_regs_on_cpu(cpu, regs);
    POST_WRAPPER_FUNC(cpu, regs);
    kern_printk("wrmsr_safe_regs_on_cpu returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_clocksource_mmio_readl_up
#define APP_WRAPPER_FOR_clocksource_mmio_readl_up
#endif
 
#ifndef APP_WRAPPER_FOR_clocksource_mmio_readl_up
#define APP_WRAPPER_FOR_clocksource_mmio_readl_up
FUNCTION_WRAPPER(clocksource_mmio_readl_up, (struct clocksource *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct clocksource)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("clocksource_mmio_readl_up is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    cycle_t ret = clocksource_mmio_readl_up(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("clocksource_mmio_readl_up returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct clocksource)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_tick_nohz_irq_exit
#define APP_WRAPPER_FOR_tick_nohz_irq_exit
#endif
 
#ifndef APP_WRAPPER_FOR_tick_nohz_irq_exit
#define APP_WRAPPER_FOR_tick_nohz_irq_exit
FUNCTION_WRAPPER_VOID(tick_nohz_irq_exit, (), {
    kern_printk("tick_nohz_irq_exit is invoked.\n");
    PRE_WRAPPER_FUNC();
    tick_nohz_irq_exit();
    POST_WRAPPER_FUNC();
    kern_printk("tick_nohz_irq_exit returned.\n");
})
#endif


#ifndef KERN_ADDR_eth_header_cache
#define APP_WRAPPER_FOR_eth_header_cache
#endif
 
#ifndef APP_WRAPPER_FOR_eth_header_cache
#define APP_WRAPPER_FOR_eth_header_cache
FUNCTION_WRAPPER(eth_header_cache, (const struct neighbour *neigh, struct hh_cache *hh, __be16 type), {
    WRAP_RECURSIVE(neigh);
    TRACES_IF_WATCHPOINT(neigh);
    SCAN_HEAD_FUNC(const struct neighbour)(*(TO_UNWATCHED_ADDRESS(neigh)));
    kern_printk("eth_header_cache is invoked.\n");
    PRE_WRAPPER_FUNC(neigh, hh, type);
    int ret = eth_header_cache(neigh, hh, type);
    POST_WRAPPER_FUNC(neigh, hh, type);
    kern_printk("eth_header_cache returned.\n");
    TRACES_IF_WATCHPOINT(neigh);
    SCAN_HEAD_FUNC(const struct neighbour)(*(TO_UNWATCHED_ADDRESS(neigh)));
    return ret;
})
#endif


#ifndef KERN_ADDR_csum_partial_copy_fromiovecend
#define APP_WRAPPER_FOR_csum_partial_copy_fromiovecend
#endif
 
#ifndef APP_WRAPPER_FOR_csum_partial_copy_fromiovecend
#define APP_WRAPPER_FOR_csum_partial_copy_fromiovecend
FUNCTION_WRAPPER(csum_partial_copy_fromiovecend, (unsigned char *kdata, struct iovec *iov, int offset, unsigned int len, __wsum *csump), {
    kern_printk("csum_partial_copy_fromiovecend is invoked.\n");
    PRE_WRAPPER_FUNC(kdata, iov, offset, len, csump);
    int ret = csum_partial_copy_fromiovecend(kdata, iov, offset, len, csump);
    POST_WRAPPER_FUNC(kdata, iov, offset, len, csump);
    kern_printk("csum_partial_copy_fromiovecend returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_queue_flush_queueable
#define APP_WRAPPER_FOR_blk_queue_flush_queueable
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_flush_queueable
#define APP_WRAPPER_FOR_blk_queue_flush_queueable
FUNCTION_WRAPPER_VOID(blk_queue_flush_queueable, (struct request_queue *q, bool queueable), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    kern_printk("blk_queue_flush_queueable is invoked.\n");
    PRE_WRAPPER_FUNC(q, queueable);
    blk_queue_flush_queueable(q, queueable);
    POST_WRAPPER_FUNC(q, queueable);
    kern_printk("blk_queue_flush_queueable returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
})
#endif


#ifndef KERN_ADDR_expand_stack
#define APP_WRAPPER_FOR_expand_stack
#endif
 
#ifndef APP_WRAPPER_FOR_expand_stack
#define APP_WRAPPER_FOR_expand_stack
FUNCTION_WRAPPER(expand_stack, (struct vm_area_struct *vma, unsigned long address), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("expand_stack is invoked.\n");
    PRE_WRAPPER_FUNC(vma, address);
    int ret = expand_stack(vma, address);
    POST_WRAPPER_FUNC(vma, address);
    kern_printk("expand_stack returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kick_iocb
#define APP_WRAPPER_FOR_kick_iocb
#endif
 
#ifndef APP_WRAPPER_FOR_kick_iocb
#define APP_WRAPPER_FOR_kick_iocb
FUNCTION_WRAPPER_VOID(kick_iocb, (struct kiocb *iocb), {
    WRAP_RECURSIVE(iocb);
    TRACES_IF_WATCHPOINT(iocb);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(iocb)));
    kern_printk("kick_iocb is invoked.\n");
    PRE_WRAPPER_FUNC(iocb);
    kick_iocb(iocb);
    POST_WRAPPER_FUNC(iocb);
    kern_printk("kick_iocb returned.\n");
    TRACES_IF_WATCHPOINT(iocb);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(iocb)));
})
#endif


#ifndef KERN_ADDR_acpi_boot_table_init
#define APP_WRAPPER_FOR_acpi_boot_table_init
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_boot_table_init
#define APP_WRAPPER_FOR_acpi_boot_table_init
FUNCTION_WRAPPER_VOID(acpi_boot_table_init, (), {
    kern_printk("acpi_boot_table_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_boot_table_init();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_boot_table_init returned.\n");
})
#endif


#ifndef KERN_ADDR_compat_sys_recv
#define APP_WRAPPER_FOR_compat_sys_recv
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_recv
#define APP_WRAPPER_FOR_compat_sys_recv
FUNCTION_WRAPPER(compat_sys_recv, (int fd, void *buf, size_t len, unsigned int flags), {
    kern_printk("compat_sys_recv is invoked.\n");
    PRE_WRAPPER_FUNC(fd, buf, len, flags);
    long ret = compat_sys_recv(fd, buf, len, flags);
    POST_WRAPPER_FUNC(fd, buf, len, flags);
    kern_printk("compat_sys_recv returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sigprocmask
#define APP_WRAPPER_FOR_sigprocmask
#endif
 
#ifndef APP_WRAPPER_FOR_sigprocmask
#define APP_WRAPPER_FOR_sigprocmask
FUNCTION_WRAPPER(sigprocmask, (int _arg1, sigset_t *_arg2, sigset_t *_arg3), {
    kern_printk("sigprocmask is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = sigprocmask(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("sigprocmask returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_test_clear_page_writeback
#define APP_WRAPPER_FOR_test_clear_page_writeback
#endif
 
#ifndef APP_WRAPPER_FOR_test_clear_page_writeback
#define APP_WRAPPER_FOR_test_clear_page_writeback
FUNCTION_WRAPPER(test_clear_page_writeback, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("test_clear_page_writeback is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    int ret = test_clear_page_writeback(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("test_clear_page_writeback returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mp_find_ioapic
#define APP_WRAPPER_FOR_mp_find_ioapic
#endif
 
#ifndef APP_WRAPPER_FOR_mp_find_ioapic
#define APP_WRAPPER_FOR_mp_find_ioapic
FUNCTION_WRAPPER(mp_find_ioapic, (u32 gsi), {
    kern_printk("mp_find_ioapic is invoked.\n");
    PRE_WRAPPER_FUNC(gsi);
    int ret = mp_find_ioapic(gsi);
    POST_WRAPPER_FUNC(gsi);
    kern_printk("mp_find_ioapic returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_revalidate_disk
#define APP_WRAPPER_FOR_revalidate_disk
#endif
 
#ifndef APP_WRAPPER_FOR_revalidate_disk
#define APP_WRAPPER_FOR_revalidate_disk
FUNCTION_WRAPPER(revalidate_disk, (struct gendisk *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("revalidate_disk is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = revalidate_disk(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("revalidate_disk returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_request_any_context_irq
#define APP_WRAPPER_FOR_request_any_context_irq
#endif
 
#ifndef APP_WRAPPER_FOR_request_any_context_irq
#define APP_WRAPPER_FOR_request_any_context_irq
FUNCTION_WRAPPER(request_any_context_irq, (unsigned int irq, irq_handler_t handler, unsigned long flags, const char *name, void *dev_id), {
    WRAP_FUNCTION(handler);
    kern_printk("request_any_context_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq, handler, flags, name, dev_id);
    int ret = request_any_context_irq(irq, handler, flags, name, dev_id);
    POST_WRAPPER_FUNC(irq, handler, flags, name, dev_id);
    kern_printk("request_any_context_irq returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sysfs_notify
#define APP_WRAPPER_FOR_sysfs_notify
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_notify
#define APP_WRAPPER_FOR_sysfs_notify
FUNCTION_WRAPPER_VOID(sysfs_notify, (struct kobject *kobj, const char *dir, const char *attr), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    kern_printk("sysfs_notify is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, dir, attr);
    sysfs_notify(kobj, dir, attr);
    POST_WRAPPER_FUNC(kobj, dir, attr);
    kern_printk("sysfs_notify returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
})
#endif


#ifndef KERN_ADDR_ata_pci_sff_init_host
#define APP_WRAPPER_FOR_ata_pci_sff_init_host
#endif
 
#ifndef APP_WRAPPER_FOR_ata_pci_sff_init_host
#define APP_WRAPPER_FOR_ata_pci_sff_init_host
FUNCTION_WRAPPER(ata_pci_sff_init_host, (struct ata_host *host), {
    WRAP_RECURSIVE(host);
    TRACES_IF_WATCHPOINT(host);
    SCAN_HEAD_FUNC(struct ata_host)(*(TO_UNWATCHED_ADDRESS(host)));
    kern_printk("ata_pci_sff_init_host is invoked.\n");
    PRE_WRAPPER_FUNC(host);
    int ret = ata_pci_sff_init_host(host);
    POST_WRAPPER_FUNC(host);
    kern_printk("ata_pci_sff_init_host returned.\n");
    TRACES_IF_WATCHPOINT(host);
    SCAN_HEAD_FUNC(struct ata_host)(*(TO_UNWATCHED_ADDRESS(host)));
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_gc_eoi
#define APP_WRAPPER_FOR_irq_gc_eoi
#endif
 
#ifndef APP_WRAPPER_FOR_irq_gc_eoi
#define APP_WRAPPER_FOR_irq_gc_eoi
FUNCTION_WRAPPER_VOID(irq_gc_eoi, (struct irq_data *d), {
    WRAP_RECURSIVE(d);
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(d)));
    kern_printk("irq_gc_eoi is invoked.\n");
    PRE_WRAPPER_FUNC(d);
    irq_gc_eoi(d);
    POST_WRAPPER_FUNC(d);
    kern_printk("irq_gc_eoi returned.\n");
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(d)));
})
#endif


#ifndef KERN_ADDR_generic_bigsmp_probe
#define APP_WRAPPER_FOR_generic_bigsmp_probe
#endif
 
#ifndef APP_WRAPPER_FOR_generic_bigsmp_probe
#define APP_WRAPPER_FOR_generic_bigsmp_probe
FUNCTION_WRAPPER_VOID(generic_bigsmp_probe, (), {
    kern_printk("generic_bigsmp_probe is invoked.\n");
    PRE_WRAPPER_FUNC();
    generic_bigsmp_probe();
    POST_WRAPPER_FUNC();
    kern_printk("generic_bigsmp_probe returned.\n");
})
#endif


#ifndef KERN_ADDR_sync_global_pgds
#define APP_WRAPPER_FOR_sync_global_pgds
#endif
 
#ifndef APP_WRAPPER_FOR_sync_global_pgds
#define APP_WRAPPER_FOR_sync_global_pgds
FUNCTION_WRAPPER_VOID(sync_global_pgds, (unsigned long start, unsigned long end), {
    kern_printk("sync_global_pgds is invoked.\n");
    PRE_WRAPPER_FUNC(start, end);
    sync_global_pgds(start, end);
    POST_WRAPPER_FUNC(start, end);
    kern_printk("sync_global_pgds returned.\n");
})
#endif


#ifndef KERN_ADDR_dev_driver_string
#define APP_WRAPPER_FOR_dev_driver_string
#endif
 
#ifndef APP_WRAPPER_FOR_dev_driver_string
#define APP_WRAPPER_FOR_dev_driver_string
FUNCTION_WRAPPER(dev_driver_string, (const struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_driver_string is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    const char *ret = dev_driver_string(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_driver_string returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_unregister
#define APP_WRAPPER_FOR_sock_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_sock_unregister
#define APP_WRAPPER_FOR_sock_unregister
FUNCTION_WRAPPER_VOID(sock_unregister, (int family), {
    kern_printk("sock_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(family);
    sock_unregister(family);
    POST_WRAPPER_FUNC(family);
    kern_printk("sock_unregister returned.\n");
})
#endif


#ifndef KERN_ADDR_move_huge_pmd
#define APP_WRAPPER_FOR_move_huge_pmd
#endif
 
#ifndef APP_WRAPPER_FOR_move_huge_pmd
#define APP_WRAPPER_FOR_move_huge_pmd
FUNCTION_WRAPPER(move_huge_pmd, (struct vm_area_struct *vma, struct vm_area_struct *new_vma, unsigned long old_addr, unsigned long new_addr, unsigned long old_end, pmd_t *old_pmd, pmd_t *new_pmd), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    WRAP_RECURSIVE(new_vma);
    TRACES_IF_WATCHPOINT(new_vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(new_vma)));
    kern_printk("move_huge_pmd is invoked.\n");
    PRE_WRAPPER_FUNC(vma, new_vma, old_addr, new_addr, old_end, old_pmd, new_pmd);
    int ret = move_huge_pmd(vma, new_vma, old_addr, new_addr, old_end, old_pmd, new_pmd);
    POST_WRAPPER_FUNC(vma, new_vma, old_addr, new_addr, old_end, old_pmd, new_pmd);
    kern_printk("move_huge_pmd returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    TRACES_IF_WATCHPOINT(new_vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(new_vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_put_queue
#define APP_WRAPPER_FOR_blk_put_queue
#endif
 
#ifndef APP_WRAPPER_FOR_blk_put_queue
#define APP_WRAPPER_FOR_blk_put_queue
FUNCTION_WRAPPER_VOID(blk_put_queue, (struct request_queue *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_put_queue is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    blk_put_queue(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("blk_put_queue returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_calculate_normal_threshold
#define APP_WRAPPER_FOR_calculate_normal_threshold
#endif
 
#ifndef APP_WRAPPER_FOR_calculate_normal_threshold
#define APP_WRAPPER_FOR_calculate_normal_threshold
FUNCTION_WRAPPER(calculate_normal_threshold, (struct zone *zone), {
    WRAP_RECURSIVE(zone);
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    kern_printk("calculate_normal_threshold is invoked.\n");
    PRE_WRAPPER_FUNC(zone);
    int ret = calculate_normal_threshold(zone);
    POST_WRAPPER_FUNC(zone);
    kern_printk("calculate_normal_threshold returned.\n");
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mutex_lock
#define APP_WRAPPER_FOR_mutex_lock
#endif
 
#ifndef APP_WRAPPER_FOR_mutex_lock
#define APP_WRAPPER_FOR_mutex_lock
FUNCTION_WRAPPER_VOID(mutex_lock, (struct mutex *lock), {
    WRAP_RECURSIVE(lock);
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
    kern_printk("mutex_lock is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    mutex_lock(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("mutex_lock returned.\n");
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
})
#endif


#ifndef KERN_ADDR_nla_put_nohdr
#define APP_WRAPPER_FOR_nla_put_nohdr
#endif
 
#ifndef APP_WRAPPER_FOR_nla_put_nohdr
#define APP_WRAPPER_FOR_nla_put_nohdr
FUNCTION_WRAPPER(nla_put_nohdr, (struct sk_buff *skb, int attrlen, const void *data), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("nla_put_nohdr is invoked.\n");
    PRE_WRAPPER_FUNC(skb, attrlen, data);
    int ret = nla_put_nohdr(skb, attrlen, data);
    POST_WRAPPER_FUNC(skb, attrlen, data);
    kern_printk("nla_put_nohdr returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_neigh_destroy
#define APP_WRAPPER_FOR_neigh_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_neigh_destroy
#define APP_WRAPPER_FOR_neigh_destroy
FUNCTION_WRAPPER_VOID(neigh_destroy, (struct neighbour *neigh), {
    WRAP_RECURSIVE(neigh);
    TRACES_IF_WATCHPOINT(neigh);
    SCAN_HEAD_FUNC(struct neighbour)(*(TO_UNWATCHED_ADDRESS(neigh)));
    kern_printk("neigh_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(neigh);
    neigh_destroy(neigh);
    POST_WRAPPER_FUNC(neigh);
    kern_printk("neigh_destroy returned.\n");
    TRACES_IF_WATCHPOINT(neigh);
    SCAN_HEAD_FUNC(struct neighbour)(*(TO_UNWATCHED_ADDRESS(neigh)));
})
#endif


#ifndef KERN_ADDR_radix_tree_next_chunk
#define APP_WRAPPER_FOR_radix_tree_next_chunk
#endif
 
#ifndef APP_WRAPPER_FOR_radix_tree_next_chunk
#define APP_WRAPPER_FOR_radix_tree_next_chunk
FUNCTION_WRAPPER(radix_tree_next_chunk, (struct radix_tree_root *root, struct radix_tree_iter *iter, unsigned int flags), {
    kern_printk("radix_tree_next_chunk is invoked.\n");
    PRE_WRAPPER_FUNC(root, iter, flags);
    void **ret = radix_tree_next_chunk(root, iter, flags);
    POST_WRAPPER_FUNC(root, iter, flags);
    kern_printk("radix_tree_next_chunk returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_posix_lock_file
#define APP_WRAPPER_FOR_posix_lock_file
#endif
 
#ifndef APP_WRAPPER_FOR_posix_lock_file
#define APP_WRAPPER_FOR_posix_lock_file
FUNCTION_WRAPPER(posix_lock_file, (struct file *_arg1, struct file_lock *_arg2, struct file_lock *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("posix_lock_file is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = posix_lock_file(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("posix_lock_file returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_memcpy_toiovecend
#define APP_WRAPPER_FOR_memcpy_toiovecend
#endif
 
#ifndef APP_WRAPPER_FOR_memcpy_toiovecend
#define APP_WRAPPER_FOR_memcpy_toiovecend
FUNCTION_WRAPPER(memcpy_toiovecend, (const struct iovec *v, unsigned char *kdata, int offset, int len), {
    kern_printk("memcpy_toiovecend is invoked.\n");
    PRE_WRAPPER_FUNC(v, kdata, offset, len);
    int ret = memcpy_toiovecend(v, kdata, offset, len);
    POST_WRAPPER_FUNC(v, kdata, offset, len);
    kern_printk("memcpy_toiovecend returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___block_write_begin
#define APP_WRAPPER_FOR___block_write_begin
#endif
 
#ifndef APP_WRAPPER_FOR___block_write_begin
#define APP_WRAPPER_FOR___block_write_begin
FUNCTION_WRAPPER(__block_write_begin, (struct page *page, loff_t pos, unsigned int len, get_block_t *get_block), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    WRAP_FUNCTION(get_block);
    kern_printk("__block_write_begin is invoked.\n");
    PRE_WRAPPER_FUNC(page, pos, len, get_block);
    int ret = __block_write_begin(page, pos, len, get_block);
    POST_WRAPPER_FUNC(page, pos, len, get_block);
    kern_printk("__block_write_begin returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sk_alloc
#define APP_WRAPPER_FOR_sk_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_sk_alloc
#define APP_WRAPPER_FOR_sk_alloc
FUNCTION_WRAPPER(sk_alloc, (struct net *net, int family, gfp_t priority, struct proto *prot), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    WRAP_RECURSIVE(prot);
    TRACES_IF_WATCHPOINT(prot);
    SCAN_HEAD_FUNC(struct proto)(*(TO_UNWATCHED_ADDRESS(prot)));
    kern_printk("sk_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(net, family, priority, prot);
    struct sock *ret = sk_alloc(net, family, priority, prot);
    POST_WRAPPER_FUNC(net, family, priority, prot);
    kern_printk("sk_alloc returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    TRACES_IF_WATCHPOINT(prot);
    SCAN_HEAD_FUNC(struct proto)(*(TO_UNWATCHED_ADDRESS(prot)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___sg_alloc_table
#define APP_WRAPPER_FOR___sg_alloc_table
#endif
 
#ifndef APP_WRAPPER_FOR___sg_alloc_table
#define APP_WRAPPER_FOR___sg_alloc_table
FUNCTION_WRAPPER(__sg_alloc_table, (struct sg_table *_arg1, unsigned int _arg2, unsigned int _arg3, gfp_t _arg4, sg_alloc_fn *_arg5), {
    WRAP_FUNCTION(_arg5);
    kern_printk("__sg_alloc_table is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = __sg_alloc_table(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("__sg_alloc_table returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_numa_add_memblk
#define APP_WRAPPER_FOR_numa_add_memblk
#endif
 
#ifndef APP_WRAPPER_FOR_numa_add_memblk
#define APP_WRAPPER_FOR_numa_add_memblk
FUNCTION_WRAPPER(numa_add_memblk, (int nodeid, u64 start, u64 end), {
    kern_printk("numa_add_memblk is invoked.\n");
    PRE_WRAPPER_FUNC(nodeid, start, end);
    int ret = numa_add_memblk(nodeid, start, end);
    POST_WRAPPER_FUNC(nodeid, start, end);
    kern_printk("numa_add_memblk returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_update_page_count
#define APP_WRAPPER_FOR_update_page_count
#endif
 
#ifndef APP_WRAPPER_FOR_update_page_count
#define APP_WRAPPER_FOR_update_page_count
FUNCTION_WRAPPER_VOID(update_page_count, (int level, unsigned long pages), {
    kern_printk("update_page_count is invoked.\n");
    PRE_WRAPPER_FUNC(level, pages);
    update_page_count(level, pages);
    POST_WRAPPER_FUNC(level, pages);
    kern_printk("update_page_count returned.\n");
})
#endif


#ifndef KERN_ADDR_blk_dump_rq_flags
#define APP_WRAPPER_FOR_blk_dump_rq_flags
#endif
 
#ifndef APP_WRAPPER_FOR_blk_dump_rq_flags
#define APP_WRAPPER_FOR_blk_dump_rq_flags
FUNCTION_WRAPPER_VOID(blk_dump_rq_flags, (struct request *_arg1, char *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_dump_rq_flags is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    blk_dump_rq_flags(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_dump_rq_flags returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_filemap_fault
#define APP_WRAPPER_FOR_filemap_fault
#endif
 
#ifndef APP_WRAPPER_FOR_filemap_fault
#define APP_WRAPPER_FOR_filemap_fault
FUNCTION_WRAPPER(filemap_fault, (struct vm_area_struct *_arg1, struct vm_fault *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct vm_fault)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("filemap_fault is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = filemap_fault(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("filemap_fault returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct vm_fault)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cpu_detect
#define APP_WRAPPER_FOR_cpu_detect
#endif
 
#ifndef APP_WRAPPER_FOR_cpu_detect
#define APP_WRAPPER_FOR_cpu_detect
FUNCTION_WRAPPER_VOID(cpu_detect, (struct cpuinfo_x86 *c), {
    kern_printk("cpu_detect is invoked.\n");
    PRE_WRAPPER_FUNC(c);
    cpu_detect(c);
    POST_WRAPPER_FUNC(c);
    kern_printk("cpu_detect returned.\n");
})
#endif


#ifndef KERN_ADDR_set_memory_rw
#define APP_WRAPPER_FOR_set_memory_rw
#endif
 
#ifndef APP_WRAPPER_FOR_set_memory_rw
#define APP_WRAPPER_FOR_set_memory_rw
FUNCTION_WRAPPER(set_memory_rw, (unsigned long addr, int numpages), {
    kern_printk("set_memory_rw is invoked.\n");
    PRE_WRAPPER_FUNC(addr, numpages);
    int ret = set_memory_rw(addr, numpages);
    POST_WRAPPER_FUNC(addr, numpages);
    kern_printk("set_memory_rw returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_radix_tree_tag_get
#define APP_WRAPPER_FOR_radix_tree_tag_get
#endif
 
#ifndef APP_WRAPPER_FOR_radix_tree_tag_get
#define APP_WRAPPER_FOR_radix_tree_tag_get
FUNCTION_WRAPPER(radix_tree_tag_get, (struct radix_tree_root *root, unsigned long index, unsigned int tag), {
    kern_printk("radix_tree_tag_get is invoked.\n");
    PRE_WRAPPER_FUNC(root, index, tag);
    int ret = radix_tree_tag_get(root, index, tag);
    POST_WRAPPER_FUNC(root, index, tag);
    kern_printk("radix_tree_tag_get returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_get_device
#define APP_WRAPPER_FOR_get_device
#endif
 
#ifndef APP_WRAPPER_FOR_get_device
#define APP_WRAPPER_FOR_get_device
FUNCTION_WRAPPER(get_device, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("get_device is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    struct device *ret = get_device(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("get_device returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_cdrom_release
#define APP_WRAPPER_FOR_cdrom_release
#endif
 
#ifndef APP_WRAPPER_FOR_cdrom_release
#define APP_WRAPPER_FOR_cdrom_release
FUNCTION_WRAPPER_VOID(cdrom_release, (struct cdrom_device_info *cdi, fmode_t mode), {
    WRAP_RECURSIVE(cdi);
    TRACES_IF_WATCHPOINT(cdi);
    SCAN_HEAD_FUNC(struct cdrom_device_info)(*(TO_UNWATCHED_ADDRESS(cdi)));
    kern_printk("cdrom_release is invoked.\n");
    PRE_WRAPPER_FUNC(cdi, mode);
    cdrom_release(cdi, mode);
    POST_WRAPPER_FUNC(cdi, mode);
    kern_printk("cdrom_release returned.\n");
    TRACES_IF_WATCHPOINT(cdi);
    SCAN_HEAD_FUNC(struct cdrom_device_info)(*(TO_UNWATCHED_ADDRESS(cdi)));
})
#endif


#ifndef KERN_ADDR_inet_twsk_bind_unhash
#define APP_WRAPPER_FOR_inet_twsk_bind_unhash
#endif
 
#ifndef APP_WRAPPER_FOR_inet_twsk_bind_unhash
#define APP_WRAPPER_FOR_inet_twsk_bind_unhash
FUNCTION_WRAPPER(inet_twsk_bind_unhash, (struct inet_timewait_sock *tw, struct inet_hashinfo *hashinfo), {
    WRAP_RECURSIVE(tw);
    TRACES_IF_WATCHPOINT(tw);
    SCAN_HEAD_FUNC(struct inet_timewait_sock)(*(TO_UNWATCHED_ADDRESS(tw)));
    kern_printk("inet_twsk_bind_unhash is invoked.\n");
    PRE_WRAPPER_FUNC(tw, hashinfo);
    int ret = inet_twsk_bind_unhash(tw, hashinfo);
    POST_WRAPPER_FUNC(tw, hashinfo);
    kern_printk("inet_twsk_bind_unhash returned.\n");
    TRACES_IF_WATCHPOINT(tw);
    SCAN_HEAD_FUNC(struct inet_timewait_sock)(*(TO_UNWATCHED_ADDRESS(tw)));
    return ret;
})
#endif


#ifndef KERN_ADDR_smp_call_function
#define APP_WRAPPER_FOR_smp_call_function
#endif
 
#ifndef APP_WRAPPER_FOR_smp_call_function
#define APP_WRAPPER_FOR_smp_call_function
FUNCTION_WRAPPER(smp_call_function, (smp_call_func_t func, void *info, int wait), {
    WRAP_FUNCTION(func);
    kern_printk("smp_call_function is invoked.\n");
    PRE_WRAPPER_FUNC(func, info, wait);
    int ret = smp_call_function(func, info, wait);
    POST_WRAPPER_FUNC(func, info, wait);
    kern_printk("smp_call_function returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_clear_user
#define APP_WRAPPER_FOR_clear_user
#endif
 
#ifndef APP_WRAPPER_FOR_clear_user
#define APP_WRAPPER_FOR_clear_user
FUNCTION_WRAPPER(clear_user, (void *mem, unsigned long len), {
    kern_printk("clear_user is invoked.\n");
    PRE_WRAPPER_FUNC(mem, len);
    long ret = clear_user(mem, len);
    POST_WRAPPER_FUNC(mem, len);
    kern_printk("clear_user returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_phy_find_first
#define APP_WRAPPER_FOR_phy_find_first
#endif
 
#ifndef APP_WRAPPER_FOR_phy_find_first
#define APP_WRAPPER_FOR_phy_find_first
FUNCTION_WRAPPER(phy_find_first, (struct mii_bus *bus), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct mii_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("phy_find_first is invoked.\n");
    PRE_WRAPPER_FUNC(bus);
    struct phy_device *ret = phy_find_first(bus);
    POST_WRAPPER_FUNC(bus);
    kern_printk("phy_find_first returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct mii_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_destroy_revoke_caches
#define APP_WRAPPER_FOR_jbd2_journal_destroy_revoke_caches
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_destroy_revoke_caches
#define APP_WRAPPER_FOR_jbd2_journal_destroy_revoke_caches
FUNCTION_WRAPPER_VOID(jbd2_journal_destroy_revoke_caches, (), {
    kern_printk("jbd2_journal_destroy_revoke_caches is invoked.\n");
    PRE_WRAPPER_FUNC();
    jbd2_journal_destroy_revoke_caches();
    POST_WRAPPER_FUNC();
    kern_printk("jbd2_journal_destroy_revoke_caches returned.\n");
})
#endif


#ifndef KERN_ADDR_pcie_aspm_support_enabled
#define APP_WRAPPER_FOR_pcie_aspm_support_enabled
#endif
 
#ifndef APP_WRAPPER_FOR_pcie_aspm_support_enabled
#define APP_WRAPPER_FOR_pcie_aspm_support_enabled
FUNCTION_WRAPPER(pcie_aspm_support_enabled, (), {
    kern_printk("pcie_aspm_support_enabled is invoked.\n");
    PRE_WRAPPER_FUNC();
    bool ret = pcie_aspm_support_enabled();
    POST_WRAPPER_FUNC();
    kern_printk("pcie_aspm_support_enabled returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_alloc_file
#define APP_WRAPPER_FOR_sock_alloc_file
#endif
 
#ifndef APP_WRAPPER_FOR_sock_alloc_file
#define APP_WRAPPER_FOR_sock_alloc_file
FUNCTION_WRAPPER(sock_alloc_file, (struct socket *sock, int flags, const char *dname), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    kern_printk("sock_alloc_file is invoked.\n");
    PRE_WRAPPER_FUNC(sock, flags, dname);
    struct file *ret = sock_alloc_file(sock, flags, dname);
    POST_WRAPPER_FUNC(sock, flags, dname);
    kern_printk("sock_alloc_file returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_do_munmap
#define APP_WRAPPER_FOR_do_munmap
#endif
 
#ifndef APP_WRAPPER_FOR_do_munmap
#define APP_WRAPPER_FOR_do_munmap
FUNCTION_WRAPPER(do_munmap, (struct mm_struct *_arg1, unsigned long _arg2, size_t _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("do_munmap is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = do_munmap(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("do_munmap returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_error_remove_page
#define APP_WRAPPER_FOR_generic_error_remove_page
#endif
 
#ifndef APP_WRAPPER_FOR_generic_error_remove_page
#define APP_WRAPPER_FOR_generic_error_remove_page
FUNCTION_WRAPPER(generic_error_remove_page, (struct address_space *mapping, struct page *page), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("generic_error_remove_page is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, page);
    int ret = generic_error_remove_page(mapping, page);
    POST_WRAPPER_FUNC(mapping, page);
    kern_printk("generic_error_remove_page returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_netdev_pick_tx
#define APP_WRAPPER_FOR_netdev_pick_tx
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_pick_tx
#define APP_WRAPPER_FOR_netdev_pick_tx
FUNCTION_WRAPPER(netdev_pick_tx, (struct net_device *dev, struct sk_buff *skb), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("netdev_pick_tx is invoked.\n");
    PRE_WRAPPER_FUNC(dev, skb);
    struct netdev_queue *ret = netdev_pick_tx(dev, skb);
    POST_WRAPPER_FUNC(dev, skb);
    kern_printk("netdev_pick_tx returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___put_task_struct
#define APP_WRAPPER_FOR___put_task_struct
#endif
 
#ifndef APP_WRAPPER_FOR___put_task_struct
#define APP_WRAPPER_FOR___put_task_struct
FUNCTION_WRAPPER_VOID(__put_task_struct, (struct task_struct *t), {
    WRAP_RECURSIVE(t);
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(t)));
    kern_printk("__put_task_struct is invoked.\n");
    PRE_WRAPPER_FUNC(t);
    __put_task_struct(t);
    POST_WRAPPER_FUNC(t);
    kern_printk("__put_task_struct returned.\n");
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(t)));
})
#endif


#ifndef KERN_ADDR_compat_printk
#define APP_WRAPPER_FOR_compat_printk
#endif
 
#ifndef APP_WRAPPER_FOR_compat_printk
#define APP_WRAPPER_FOR_compat_printk
FUNCTION_WRAPPER(compat_printk, (const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    // TODO: variadic arguments
    kern_printk("compat_printk is invoked.\n");
    PRE_WRAPPER_FUNC(fmt);
    int ret = compat_printk(fmt);
    POST_WRAPPER_FUNC(fmt);
    kern_printk("compat_printk returned.\n");
    va_end(args__);
    return ret;
})
#endif


#ifndef KERN_ADDR___kmalloc_track_caller
#define APP_WRAPPER_FOR___kmalloc_track_caller
#endif
 
#ifndef APP_WRAPPER_FOR___kmalloc_track_caller
#define APP_WRAPPER_FOR___kmalloc_track_caller
FUNCTION_WRAPPER(__kmalloc_track_caller, (size_t _arg1, gfp_t _arg2, unsigned long _arg3), {
    kern_printk("__kmalloc_track_caller is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    void *ret = __kmalloc_track_caller(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("__kmalloc_track_caller returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_port_pbar_desc
#define APP_WRAPPER_FOR_ata_port_pbar_desc
#endif
 
#ifndef APP_WRAPPER_FOR_ata_port_pbar_desc
#define APP_WRAPPER_FOR_ata_port_pbar_desc
FUNCTION_WRAPPER_VOID(ata_port_pbar_desc, (struct ata_port *ap, int bar, ssize_t offset, const char *name), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_port_pbar_desc is invoked.\n");
    PRE_WRAPPER_FUNC(ap, bar, offset, name);
    ata_port_pbar_desc(ap, bar, offset, name);
    POST_WRAPPER_FUNC(ap, bar, offset, name);
    kern_printk("ata_port_pbar_desc returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_generic_setxattr
#define APP_WRAPPER_FOR_generic_setxattr
#endif
 
#ifndef APP_WRAPPER_FOR_generic_setxattr
#define APP_WRAPPER_FOR_generic_setxattr
FUNCTION_WRAPPER(generic_setxattr, (struct dentry *dentry, const char *name, const void *value, size_t size, int flags), {
    WRAP_RECURSIVE(dentry);
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    kern_printk("generic_setxattr is invoked.\n");
    PRE_WRAPPER_FUNC(dentry, name, value, size, flags);
    int ret = generic_setxattr(dentry, name, value, size, flags);
    POST_WRAPPER_FUNC(dentry, name, value, size, flags);
    kern_printk("generic_setxattr returned.\n");
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    return ret;
})
#endif


#ifndef KERN_ADDR_each_symbol_section
#define APP_WRAPPER_FOR_each_symbol_section
#endif
 
#ifndef APP_WRAPPER_FOR_each_symbol_section
#define APP_WRAPPER_FOR_each_symbol_section
FUNCTION_WRAPPER(each_symbol_section, (bool (*fn)(const struct symsearch *, struct module *, void *), void *data), {
    WRAP_FUNCTION(fn);
    kern_printk("each_symbol_section is invoked.\n");
    PRE_WRAPPER_FUNC(fn, data);
    bool ret = each_symbol_section(fn, data);
    POST_WRAPPER_FUNC(fn, data);
    kern_printk("each_symbol_section returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_match_id
#define APP_WRAPPER_FOR_pci_match_id
#endif
 
#ifndef APP_WRAPPER_FOR_pci_match_id
#define APP_WRAPPER_FOR_pci_match_id
FUNCTION_WRAPPER(pci_match_id, (const struct pci_device_id *ids, struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_match_id is invoked.\n");
    PRE_WRAPPER_FUNC(ids, dev);
    const struct pci_device_id *ret = pci_match_id(ids, dev);
    POST_WRAPPER_FUNC(ids, dev);
    kern_printk("pci_match_id returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___printk_ratelimit
#define APP_WRAPPER_FOR___printk_ratelimit
#endif
 
#ifndef APP_WRAPPER_FOR___printk_ratelimit
#define APP_WRAPPER_FOR___printk_ratelimit
FUNCTION_WRAPPER(__printk_ratelimit, (const char *func), {
    kern_printk("__printk_ratelimit is invoked.\n");
    PRE_WRAPPER_FUNC(func);
    int ret = __printk_ratelimit(func);
    POST_WRAPPER_FUNC(func);
    kern_printk("__printk_ratelimit returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_do_getitimer
#define APP_WRAPPER_FOR_do_getitimer
#endif
 
#ifndef APP_WRAPPER_FOR_do_getitimer
#define APP_WRAPPER_FOR_do_getitimer
FUNCTION_WRAPPER(do_getitimer, (int which, struct itimerval *value), {
    kern_printk("do_getitimer is invoked.\n");
    PRE_WRAPPER_FUNC(which, value);
    int ret = do_getitimer(which, value);
    POST_WRAPPER_FUNC(which, value);
    kern_printk("do_getitimer returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_dev_run_wake
#define APP_WRAPPER_FOR_pci_dev_run_wake
#endif
 
#ifndef APP_WRAPPER_FOR_pci_dev_run_wake
#define APP_WRAPPER_FOR_pci_dev_run_wake
FUNCTION_WRAPPER(pci_dev_run_wake, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_dev_run_wake is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    bool ret = pci_dev_run_wake(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_dev_run_wake returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mpc_ioapic_id
#define APP_WRAPPER_FOR_mpc_ioapic_id
#endif
 
#ifndef APP_WRAPPER_FOR_mpc_ioapic_id
#define APP_WRAPPER_FOR_mpc_ioapic_id
FUNCTION_WRAPPER(mpc_ioapic_id, (int ioapic), {
    kern_printk("mpc_ioapic_id is invoked.\n");
    PRE_WRAPPER_FUNC(ioapic);
    int ret = mpc_ioapic_id(ioapic);
    POST_WRAPPER_FUNC(ioapic);
    kern_printk("mpc_ioapic_id returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_numa_clear_node
#define APP_WRAPPER_FOR_numa_clear_node
#endif
 
#ifndef APP_WRAPPER_FOR_numa_clear_node
#define APP_WRAPPER_FOR_numa_clear_node
FUNCTION_WRAPPER_VOID(numa_clear_node, (int cpu), {
    kern_printk("numa_clear_node is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    numa_clear_node(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("numa_clear_node returned.\n");
})
#endif


#ifndef KERN_ADDR_qtree_entry_unused
#define APP_WRAPPER_FOR_qtree_entry_unused
#endif
 
#ifndef APP_WRAPPER_FOR_qtree_entry_unused
#define APP_WRAPPER_FOR_qtree_entry_unused
FUNCTION_WRAPPER(qtree_entry_unused, (struct qtree_mem_dqinfo *info, char *disk), {
    WRAP_RECURSIVE(info);
    TRACES_IF_WATCHPOINT(info);
    SCAN_HEAD_FUNC(struct qtree_mem_dqinfo)(*(TO_UNWATCHED_ADDRESS(info)));
    kern_printk("qtree_entry_unused is invoked.\n");
    PRE_WRAPPER_FUNC(info, disk);
    int ret = qtree_entry_unused(info, disk);
    POST_WRAPPER_FUNC(info, disk);
    kern_printk("qtree_entry_unused returned.\n");
    TRACES_IF_WATCHPOINT(info);
    SCAN_HEAD_FUNC(struct qtree_mem_dqinfo)(*(TO_UNWATCHED_ADDRESS(info)));
    return ret;
})
#endif


#ifndef KERN_ADDR_get_gendisk
#define APP_WRAPPER_FOR_get_gendisk
#endif
 
#ifndef APP_WRAPPER_FOR_get_gendisk
#define APP_WRAPPER_FOR_get_gendisk
FUNCTION_WRAPPER(get_gendisk, (dev_t dev, int *partno), {
    kern_printk("get_gendisk is invoked.\n");
    PRE_WRAPPER_FUNC(dev, partno);
    struct gendisk *ret = get_gendisk(dev, partno);
    POST_WRAPPER_FUNC(dev, partno);
    kern_printk("get_gendisk returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_congestion_wait
#define APP_WRAPPER_FOR_congestion_wait
#endif
 
#ifndef APP_WRAPPER_FOR_congestion_wait
#define APP_WRAPPER_FOR_congestion_wait
FUNCTION_WRAPPER(congestion_wait, (int sync, long timeout), {
    kern_printk("congestion_wait is invoked.\n");
    PRE_WRAPPER_FUNC(sync, timeout);
    long ret = congestion_wait(sync, timeout);
    POST_WRAPPER_FUNC(sync, timeout);
    kern_printk("congestion_wait returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_get_root_pointer
#define APP_WRAPPER_FOR_acpi_os_get_root_pointer
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_get_root_pointer
#define APP_WRAPPER_FOR_acpi_os_get_root_pointer
FUNCTION_WRAPPER(acpi_os_get_root_pointer, (), {
    kern_printk("acpi_os_get_root_pointer is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_physical_address ret = acpi_os_get_root_pointer();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_os_get_root_pointer returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_exit_rcu
#define APP_WRAPPER_FOR_exit_rcu
#endif
 
#ifndef APP_WRAPPER_FOR_exit_rcu
#define APP_WRAPPER_FOR_exit_rcu
FUNCTION_WRAPPER_VOID(exit_rcu, (), {
    kern_printk("exit_rcu is invoked.\n");
    PRE_WRAPPER_FUNC();
    exit_rcu();
    POST_WRAPPER_FUNC();
    kern_printk("exit_rcu returned.\n");
})
#endif


#ifndef KERN_ADDR_jbd2_buffer_abort_trigger
#define APP_WRAPPER_FOR_jbd2_buffer_abort_trigger
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_buffer_abort_trigger
#define APP_WRAPPER_FOR_jbd2_buffer_abort_trigger
FUNCTION_WRAPPER_VOID(jbd2_buffer_abort_trigger, (struct journal_head *jh, struct jbd2_buffer_trigger_type *triggers), {
    WRAP_RECURSIVE(jh);
    TRACES_IF_WATCHPOINT(jh);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(jh)));
    WRAP_RECURSIVE(triggers);
    TRACES_IF_WATCHPOINT(triggers);
    SCAN_HEAD_FUNC(struct jbd2_buffer_trigger_type)(*(TO_UNWATCHED_ADDRESS(triggers)));
    kern_printk("jbd2_buffer_abort_trigger is invoked.\n");
    PRE_WRAPPER_FUNC(jh, triggers);
    jbd2_buffer_abort_trigger(jh, triggers);
    POST_WRAPPER_FUNC(jh, triggers);
    kern_printk("jbd2_buffer_abort_trigger returned.\n");
    TRACES_IF_WATCHPOINT(jh);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(jh)));
    TRACES_IF_WATCHPOINT(triggers);
    SCAN_HEAD_FUNC(struct jbd2_buffer_trigger_type)(*(TO_UNWATCHED_ADDRESS(triggers)));
})
#endif


#ifndef KERN_ADDR___skb_tx_hash
#define APP_WRAPPER_FOR___skb_tx_hash
#endif
 
#ifndef APP_WRAPPER_FOR___skb_tx_hash
#define APP_WRAPPER_FOR___skb_tx_hash
FUNCTION_WRAPPER(__skb_tx_hash, (const struct net_device *dev, const struct sk_buff *skb, unsigned int num_tx_queues), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(const struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("__skb_tx_hash is invoked.\n");
    PRE_WRAPPER_FUNC(dev, skb, num_tx_queues);
    u16 ret = __skb_tx_hash(dev, skb, num_tx_queues);
    POST_WRAPPER_FUNC(dev, skb, num_tx_queues);
    kern_printk("__skb_tx_hash returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(const struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_gc_unmask_enable_reg
#define APP_WRAPPER_FOR_irq_gc_unmask_enable_reg
#endif
 
#ifndef APP_WRAPPER_FOR_irq_gc_unmask_enable_reg
#define APP_WRAPPER_FOR_irq_gc_unmask_enable_reg
FUNCTION_WRAPPER_VOID(irq_gc_unmask_enable_reg, (struct irq_data *d), {
    WRAP_RECURSIVE(d);
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(d)));
    kern_printk("irq_gc_unmask_enable_reg is invoked.\n");
    PRE_WRAPPER_FUNC(d);
    irq_gc_unmask_enable_reg(d);
    POST_WRAPPER_FUNC(d);
    kern_printk("irq_gc_unmask_enable_reg returned.\n");
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(d)));
})
#endif


#ifndef KERN_ADDR_register_gifconf
#define APP_WRAPPER_FOR_register_gifconf
#endif
 
#ifndef APP_WRAPPER_FOR_register_gifconf
#define APP_WRAPPER_FOR_register_gifconf
FUNCTION_WRAPPER(register_gifconf, (unsigned int family, gifconf_func_t *gifconf), {
    WRAP_FUNCTION(gifconf);
    kern_printk("register_gifconf is invoked.\n");
    PRE_WRAPPER_FUNC(family, gifconf);
    int ret = register_gifconf(family, gifconf);
    POST_WRAPPER_FUNC(family, gifconf);
    kern_printk("register_gifconf returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_table_get_size
#define APP_WRAPPER_FOR_dm_table_get_size
#endif
 
#ifndef APP_WRAPPER_FOR_dm_table_get_size
#define APP_WRAPPER_FOR_dm_table_get_size
FUNCTION_WRAPPER(dm_table_get_size, (struct dm_table *t), {
    kern_printk("dm_table_get_size is invoked.\n");
    PRE_WRAPPER_FUNC(t);
    sector_t ret = dm_table_get_size(t);
    POST_WRAPPER_FUNC(t);
    kern_printk("dm_table_get_size returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_nla_validate
#define APP_WRAPPER_FOR_nla_validate
#endif
 
#ifndef APP_WRAPPER_FOR_nla_validate
#define APP_WRAPPER_FOR_nla_validate
FUNCTION_WRAPPER(nla_validate, (const struct nlattr *head, int len, int maxtype, const struct nla_policy *policy), {
    kern_printk("nla_validate is invoked.\n");
    PRE_WRAPPER_FUNC(head, len, maxtype, policy);
    int ret = nla_validate(head, len, maxtype, policy);
    POST_WRAPPER_FUNC(head, len, maxtype, policy);
    kern_printk("nla_validate returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_proc_ns_fget
#define APP_WRAPPER_FOR_proc_ns_fget
#endif
 
#ifndef APP_WRAPPER_FOR_proc_ns_fget
#define APP_WRAPPER_FOR_proc_ns_fget
FUNCTION_WRAPPER(proc_ns_fget, (int fd), {
    kern_printk("proc_ns_fget is invoked.\n");
    PRE_WRAPPER_FUNC(fd);
    struct file *ret = proc_ns_fget(fd);
    POST_WRAPPER_FUNC(fd);
    kern_printk("proc_ns_fget returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ignore_sysret
#define APP_WRAPPER_FOR_ignore_sysret
#endif
 
#ifndef APP_WRAPPER_FOR_ignore_sysret
#define APP_WRAPPER_FOR_ignore_sysret
FUNCTION_WRAPPER_VOID(ignore_sysret, (), {
    kern_printk("ignore_sysret is invoked.\n");
    PRE_WRAPPER_FUNC();
    ignore_sysret();
    POST_WRAPPER_FUNC();
    kern_printk("ignore_sysret returned.\n");
})
#endif


#ifndef KERN_ADDR_memdup_user
#define APP_WRAPPER_FOR_memdup_user
#endif
 
#ifndef APP_WRAPPER_FOR_memdup_user
#define APP_WRAPPER_FOR_memdup_user
FUNCTION_WRAPPER(memdup_user, (const void *_arg1, size_t _arg2), {
    kern_printk("memdup_user is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    void *ret = memdup_user(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("memdup_user returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_inode_add_bytes
#define APP_WRAPPER_FOR_inode_add_bytes
#endif
 
#ifndef APP_WRAPPER_FOR_inode_add_bytes
#define APP_WRAPPER_FOR_inode_add_bytes
FUNCTION_WRAPPER_VOID(inode_add_bytes, (struct inode *inode, loff_t bytes), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("inode_add_bytes is invoked.\n");
    PRE_WRAPPER_FUNC(inode, bytes);
    inode_add_bytes(inode, bytes);
    POST_WRAPPER_FUNC(inode, bytes);
    kern_printk("inode_add_bytes returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_ata_dev_acpi_handle
#define APP_WRAPPER_FOR_ata_dev_acpi_handle
#endif
 
#ifndef APP_WRAPPER_FOR_ata_dev_acpi_handle
#define APP_WRAPPER_FOR_ata_dev_acpi_handle
FUNCTION_WRAPPER(ata_dev_acpi_handle, (struct ata_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct ata_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("ata_dev_acpi_handle is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    acpi_handle ret = ata_dev_acpi_handle(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("ata_dev_acpi_handle returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct ata_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_truncate_pagecache
#define APP_WRAPPER_FOR_truncate_pagecache
#endif
 
#ifndef APP_WRAPPER_FOR_truncate_pagecache
#define APP_WRAPPER_FOR_truncate_pagecache
FUNCTION_WRAPPER_VOID(truncate_pagecache, (struct inode *inode, loff_t old, loff_t new_), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("truncate_pagecache is invoked.\n");
    PRE_WRAPPER_FUNC(inode, old, new_);
    truncate_pagecache(inode, old, new_);
    POST_WRAPPER_FUNC(inode, old, new_);
    kern_printk("truncate_pagecache returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_blk_queue_max_hw_sectors
#define APP_WRAPPER_FOR_blk_queue_max_hw_sectors
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_max_hw_sectors
#define APP_WRAPPER_FOR_blk_queue_max_hw_sectors
FUNCTION_WRAPPER_VOID(blk_queue_max_hw_sectors, (struct request_queue *_arg1, unsigned int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_queue_max_hw_sectors is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    blk_queue_max_hw_sectors(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_queue_max_hw_sectors returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_set_bh_page
#define APP_WRAPPER_FOR_set_bh_page
#endif
 
#ifndef APP_WRAPPER_FOR_set_bh_page
#define APP_WRAPPER_FOR_set_bh_page
FUNCTION_WRAPPER_VOID(set_bh_page, (struct buffer_head *bh, struct page *page, unsigned long offset), {
    WRAP_RECURSIVE(bh);
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("set_bh_page is invoked.\n");
    PRE_WRAPPER_FUNC(bh, page, offset);
    set_bh_page(bh, page, offset);
    POST_WRAPPER_FUNC(bh, page, offset);
    kern_printk("set_bh_page returned.\n");
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_sysfs_add_file_to_group
#define APP_WRAPPER_FOR_sysfs_add_file_to_group
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_add_file_to_group
#define APP_WRAPPER_FOR_sysfs_add_file_to_group
FUNCTION_WRAPPER(sysfs_add_file_to_group, (struct kobject *kobj, const struct attribute *attr, const char *group), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    kern_printk("sysfs_add_file_to_group is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, attr, group);
    int ret = sysfs_add_file_to_group(kobj, attr, group);
    POST_WRAPPER_FUNC(kobj, attr, group);
    kern_printk("sysfs_add_file_to_group returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    return ret;
})
#endif


#ifndef KERN_ADDR_neigh_seq_next
#define APP_WRAPPER_FOR_neigh_seq_next
#endif
 
#ifndef APP_WRAPPER_FOR_neigh_seq_next
#define APP_WRAPPER_FOR_neigh_seq_next
FUNCTION_WRAPPER(neigh_seq_next, (struct seq_file *_arg1, void *_arg2, loff_t *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("neigh_seq_next is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    void *ret = neigh_seq_next(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("neigh_seq_next returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_kfree_skb_partial
#define APP_WRAPPER_FOR_kfree_skb_partial
#endif
 
#ifndef APP_WRAPPER_FOR_kfree_skb_partial
#define APP_WRAPPER_FOR_kfree_skb_partial
FUNCTION_WRAPPER_VOID(kfree_skb_partial, (struct sk_buff *skb, bool head_stolen), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("kfree_skb_partial is invoked.\n");
    PRE_WRAPPER_FUNC(skb, head_stolen);
    kfree_skb_partial(skb, head_stolen);
    POST_WRAPPER_FUNC(skb, head_stolen);
    kern_printk("kfree_skb_partial returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_kobject_set_name
#define APP_WRAPPER_FOR_kobject_set_name
#endif
 
#ifndef APP_WRAPPER_FOR_kobject_set_name
#define APP_WRAPPER_FOR_kobject_set_name
FUNCTION_WRAPPER(kobject_set_name, (struct kobject *kobj, const char *name, ...), {
    va_list args__;
    va_start(args__, name);
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    // TODO: variadic arguments
    kern_printk("kobject_set_name is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, name);
    int ret = kobject_set_name(kobj, name);
    POST_WRAPPER_FUNC(kobj, name);
    kern_printk("kobject_set_name returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_clear_event
#define APP_WRAPPER_FOR_acpi_clear_event
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_clear_event
#define APP_WRAPPER_FOR_acpi_clear_event
FUNCTION_WRAPPER(acpi_clear_event, (u32 event), {
    kern_printk("acpi_clear_event is invoked.\n");
    PRE_WRAPPER_FUNC(event);
    acpi_status ret = acpi_clear_event(event);
    POST_WRAPPER_FUNC(event);
    kern_printk("acpi_clear_event returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_mapping_tagged
#define APP_WRAPPER_FOR_mapping_tagged
#endif
 
#ifndef APP_WRAPPER_FOR_mapping_tagged
#define APP_WRAPPER_FOR_mapping_tagged
FUNCTION_WRAPPER(mapping_tagged, (struct address_space *mapping, int tag), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("mapping_tagged is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, tag);
    int ret = mapping_tagged(mapping, tag);
    POST_WRAPPER_FUNC(mapping, tag);
    kern_printk("mapping_tagged returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cgroup_init_early
#define APP_WRAPPER_FOR_cgroup_init_early
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_init_early
#define APP_WRAPPER_FOR_cgroup_init_early
FUNCTION_WRAPPER(cgroup_init_early, (), {
    kern_printk("cgroup_init_early is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = cgroup_init_early();
    POST_WRAPPER_FUNC();
    kern_printk("cgroup_init_early returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_zone_dirty_ok
#define APP_WRAPPER_FOR_zone_dirty_ok
#endif
 
#ifndef APP_WRAPPER_FOR_zone_dirty_ok
#define APP_WRAPPER_FOR_zone_dirty_ok
FUNCTION_WRAPPER(zone_dirty_ok, (struct zone *zone), {
    WRAP_RECURSIVE(zone);
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    kern_printk("zone_dirty_ok is invoked.\n");
    PRE_WRAPPER_FUNC(zone);
    bool ret = zone_dirty_ok(zone);
    POST_WRAPPER_FUNC(zone);
    kern_printk("zone_dirty_ok returned.\n");
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    return ret;
})
#endif


#ifndef KERN_ADDR_d_delete
#define APP_WRAPPER_FOR_d_delete
#endif
 
#ifndef APP_WRAPPER_FOR_d_delete
#define APP_WRAPPER_FOR_d_delete
FUNCTION_WRAPPER_VOID(d_delete, (struct dentry *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("d_delete is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    d_delete(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("d_delete returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_schedule
#define APP_WRAPPER_FOR_schedule
#endif
 
#ifndef APP_WRAPPER_FOR_schedule
#define APP_WRAPPER_FOR_schedule
FUNCTION_WRAPPER_VOID(schedule, (), {
    kern_printk("schedule is invoked.\n");
    PRE_WRAPPER_FUNC();
    schedule();
    POST_WRAPPER_FUNC();
    kern_printk("schedule returned.\n");
})
#endif


#ifndef KERN_ADDR_mp_override_legacy_irq
#define APP_WRAPPER_FOR_mp_override_legacy_irq
#endif
 
#ifndef APP_WRAPPER_FOR_mp_override_legacy_irq
#define APP_WRAPPER_FOR_mp_override_legacy_irq
FUNCTION_WRAPPER_VOID(mp_override_legacy_irq, (u8 bus_irq, u8 polarity, u8 trigger, u32 gsi), {
    kern_printk("mp_override_legacy_irq is invoked.\n");
    PRE_WRAPPER_FUNC(bus_irq, polarity, trigger, gsi);
    mp_override_legacy_irq(bus_irq, polarity, trigger, gsi);
    POST_WRAPPER_FUNC(bus_irq, polarity, trigger, gsi);
    kern_printk("mp_override_legacy_irq returned.\n");
})
#endif


#ifndef KERN_ADDR_setup_boot_APIC_clock
#define APP_WRAPPER_FOR_setup_boot_APIC_clock
#endif
 
#ifndef APP_WRAPPER_FOR_setup_boot_APIC_clock
#define APP_WRAPPER_FOR_setup_boot_APIC_clock
FUNCTION_WRAPPER_VOID(setup_boot_APIC_clock, (), {
    kern_printk("setup_boot_APIC_clock is invoked.\n");
    PRE_WRAPPER_FUNC();
    setup_boot_APIC_clock();
    POST_WRAPPER_FUNC();
    kern_printk("setup_boot_APIC_clock returned.\n");
})
#endif


#ifndef KERN_ADDR_bitmap_release_region
#define APP_WRAPPER_FOR_bitmap_release_region
#endif
 
#ifndef APP_WRAPPER_FOR_bitmap_release_region
#define APP_WRAPPER_FOR_bitmap_release_region
FUNCTION_WRAPPER_VOID(bitmap_release_region, (unsigned long *bitmap, int pos, int order), {
    kern_printk("bitmap_release_region is invoked.\n");
    PRE_WRAPPER_FUNC(bitmap, pos, order);
    bitmap_release_region(bitmap, pos, order);
    POST_WRAPPER_FUNC(bitmap, pos, order);
    kern_printk("bitmap_release_region returned.\n");
})
#endif


#ifndef KERN_ADDR_simple_xattr_get
#define APP_WRAPPER_FOR_simple_xattr_get
#endif
 
#ifndef APP_WRAPPER_FOR_simple_xattr_get
#define APP_WRAPPER_FOR_simple_xattr_get
FUNCTION_WRAPPER(simple_xattr_get, (struct simple_xattrs *xattrs, const char *name, void *buffer, size_t size), {
    kern_printk("simple_xattr_get is invoked.\n");
    PRE_WRAPPER_FUNC(xattrs, name, buffer, size);
    int ret = simple_xattr_get(xattrs, name, buffer, size);
    POST_WRAPPER_FUNC(xattrs, name, buffer, size);
    kern_printk("simple_xattr_get returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_tx_error
#define APP_WRAPPER_FOR_skb_tx_error
#endif
 
#ifndef APP_WRAPPER_FOR_skb_tx_error
#define APP_WRAPPER_FOR_skb_tx_error
FUNCTION_WRAPPER_VOID(skb_tx_error, (struct sk_buff *skb), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_tx_error is invoked.\n");
    PRE_WRAPPER_FUNC(skb);
    skb_tx_error(skb);
    POST_WRAPPER_FUNC(skb);
    kern_printk("skb_tx_error returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_blk_delay_queue
#define APP_WRAPPER_FOR_blk_delay_queue
#endif
 
#ifndef APP_WRAPPER_FOR_blk_delay_queue
#define APP_WRAPPER_FOR_blk_delay_queue
FUNCTION_WRAPPER_VOID(blk_delay_queue, (struct request_queue *_arg1, unsigned long _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_delay_queue is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    blk_delay_queue(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_delay_queue returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_iowrite16be
#define APP_WRAPPER_FOR_iowrite16be
#endif
 
#ifndef APP_WRAPPER_FOR_iowrite16be
#define APP_WRAPPER_FOR_iowrite16be
FUNCTION_WRAPPER_VOID(iowrite16be, (u16 _arg1, void *_arg2), {
    kern_printk("iowrite16be is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    iowrite16be(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("iowrite16be returned.\n");
})
#endif


#ifndef KERN_ADDR_disable_TSC
#define APP_WRAPPER_FOR_disable_TSC
#endif
 
#ifndef APP_WRAPPER_FOR_disable_TSC
#define APP_WRAPPER_FOR_disable_TSC
FUNCTION_WRAPPER_VOID(disable_TSC, (), {
    kern_printk("disable_TSC is invoked.\n");
    PRE_WRAPPER_FUNC();
    disable_TSC();
    POST_WRAPPER_FUNC();
    kern_printk("disable_TSC returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_table_init
#define APP_WRAPPER_FOR_acpi_table_init
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_table_init
#define APP_WRAPPER_FOR_acpi_table_init
FUNCTION_WRAPPER(acpi_table_init, (), {
    kern_printk("acpi_table_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = acpi_table_init();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_table_init returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___module_get
#define APP_WRAPPER_FOR___module_get
#endif
 
#ifndef APP_WRAPPER_FOR___module_get
#define APP_WRAPPER_FOR___module_get
FUNCTION_WRAPPER_VOID(__module_get, (struct module *module), {
    WRAP_RECURSIVE(module);
    TRACES_IF_WATCHPOINT(module);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(module)));
    kern_printk("__module_get is invoked.\n");
    PRE_WRAPPER_FUNC(module);
    __module_get(module);
    POST_WRAPPER_FUNC(module);
    kern_printk("__module_get returned.\n");
    TRACES_IF_WATCHPOINT(module);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(module)));
})
#endif


#ifndef KERN_ADDR_jbd2_journal_update_format
#define APP_WRAPPER_FOR_jbd2_journal_update_format
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_update_format
#define APP_WRAPPER_FOR_jbd2_journal_update_format
FUNCTION_WRAPPER(jbd2_journal_update_format, (journal_t *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_update_format is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = jbd2_journal_update_format(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("jbd2_journal_update_format returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pcibios_config_init
#define APP_WRAPPER_FOR_pcibios_config_init
#endif
 
#ifndef APP_WRAPPER_FOR_pcibios_config_init
#define APP_WRAPPER_FOR_pcibios_config_init
FUNCTION_WRAPPER_VOID(pcibios_config_init, (), {
    kern_printk("pcibios_config_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    pcibios_config_init();
    POST_WRAPPER_FUNC();
    kern_printk("pcibios_config_init returned.\n");
})
#endif


#ifndef KERN_ADDR_kobject_action_type
#define APP_WRAPPER_FOR_kobject_action_type
#endif
 
#ifndef APP_WRAPPER_FOR_kobject_action_type
#define APP_WRAPPER_FOR_kobject_action_type
FUNCTION_WRAPPER(kobject_action_type, (const char *buf, size_t count, enum kobject_action *type), {
    kern_printk("kobject_action_type is invoked.\n");
    PRE_WRAPPER_FUNC(buf, count, type);
    int ret = kobject_action_type(buf, count, type);
    POST_WRAPPER_FUNC(buf, count, type);
    kern_printk("kobject_action_type returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_insert_cloned_request
#define APP_WRAPPER_FOR_blk_insert_cloned_request
#endif
 
#ifndef APP_WRAPPER_FOR_blk_insert_cloned_request
#define APP_WRAPPER_FOR_blk_insert_cloned_request
FUNCTION_WRAPPER(blk_insert_cloned_request, (struct request_queue *q, struct request *rq), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    WRAP_RECURSIVE(rq);
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    kern_printk("blk_insert_cloned_request is invoked.\n");
    PRE_WRAPPER_FUNC(q, rq);
    int ret = blk_insert_cloned_request(q, rq);
    POST_WRAPPER_FUNC(q, rq);
    kern_printk("blk_insert_cloned_request returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dpm_suspend_start
#define APP_WRAPPER_FOR_dpm_suspend_start
#endif
 
#ifndef APP_WRAPPER_FOR_dpm_suspend_start
#define APP_WRAPPER_FOR_dpm_suspend_start
FUNCTION_WRAPPER(dpm_suspend_start, (pm_message_t state), {
    kern_printk("dpm_suspend_start is invoked.\n");
    PRE_WRAPPER_FUNC(state);
    int ret = dpm_suspend_start(state);
    POST_WRAPPER_FUNC(state);
    kern_printk("dpm_suspend_start returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_cgroupstats_build
#define APP_WRAPPER_FOR_cgroupstats_build
#endif
 
#ifndef APP_WRAPPER_FOR_cgroupstats_build
#define APP_WRAPPER_FOR_cgroupstats_build
FUNCTION_WRAPPER(cgroupstats_build, (struct cgroupstats *stats, struct dentry *dentry), {
    WRAP_RECURSIVE(dentry);
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    kern_printk("cgroupstats_build is invoked.\n");
    PRE_WRAPPER_FUNC(stats, dentry);
    int ret = cgroupstats_build(stats, dentry);
    POST_WRAPPER_FUNC(stats, dentry);
    kern_printk("cgroupstats_build returned.\n");
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_stack_limits
#define APP_WRAPPER_FOR_blk_stack_limits
#endif
 
#ifndef APP_WRAPPER_FOR_blk_stack_limits
#define APP_WRAPPER_FOR_blk_stack_limits
FUNCTION_WRAPPER(blk_stack_limits, (struct queue_limits *t, struct queue_limits *b, sector_t offset), {
    kern_printk("blk_stack_limits is invoked.\n");
    PRE_WRAPPER_FUNC(t, b, offset);
    int ret = blk_stack_limits(t, b, offset);
    POST_WRAPPER_FUNC(t, b, offset);
    kern_printk("blk_stack_limits returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_scsi_scan_host
#define APP_WRAPPER_FOR_scsi_scan_host
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_scan_host
#define APP_WRAPPER_FOR_scsi_scan_host
FUNCTION_WRAPPER_VOID(scsi_scan_host, (struct Scsi_Host *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("scsi_scan_host is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    scsi_scan_host(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("scsi_scan_host returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_node_memmap_size_bytes
#define APP_WRAPPER_FOR_node_memmap_size_bytes
#endif
 
#ifndef APP_WRAPPER_FOR_node_memmap_size_bytes
#define APP_WRAPPER_FOR_node_memmap_size_bytes
FUNCTION_WRAPPER(node_memmap_size_bytes, (int _arg1, unsigned long _arg2, unsigned long _arg3), {
    kern_printk("node_memmap_size_bytes is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    long ret = node_memmap_size_bytes(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("node_memmap_size_bytes returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_smp_irq_move_cleanup_interrupt
#define APP_WRAPPER_FOR_smp_irq_move_cleanup_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_smp_irq_move_cleanup_interrupt
#define APP_WRAPPER_FOR_smp_irq_move_cleanup_interrupt
FUNCTION_WRAPPER_VOID(smp_irq_move_cleanup_interrupt, (), {
    kern_printk("smp_irq_move_cleanup_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC();
    smp_irq_move_cleanup_interrupt();
    POST_WRAPPER_FUNC();
    kern_printk("smp_irq_move_cleanup_interrupt returned.\n");
})
#endif


#ifndef KERN_ADDR_set_iounmap_nonlazy
#define APP_WRAPPER_FOR_set_iounmap_nonlazy
#endif
 
#ifndef APP_WRAPPER_FOR_set_iounmap_nonlazy
#define APP_WRAPPER_FOR_set_iounmap_nonlazy
FUNCTION_WRAPPER_VOID(set_iounmap_nonlazy, (), {
    kern_printk("set_iounmap_nonlazy is invoked.\n");
    PRE_WRAPPER_FUNC();
    set_iounmap_nonlazy();
    POST_WRAPPER_FUNC();
    kern_printk("set_iounmap_nonlazy returned.\n");
})
#endif


#ifndef KERN_ADDR_do_sigtimedwait
#define APP_WRAPPER_FOR_do_sigtimedwait
#endif
 
#ifndef APP_WRAPPER_FOR_do_sigtimedwait
#define APP_WRAPPER_FOR_do_sigtimedwait
FUNCTION_WRAPPER(do_sigtimedwait, (const sigset_t *_arg1, siginfo_t *_arg2, const struct timespec *_arg3), {
    kern_printk("do_sigtimedwait is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = do_sigtimedwait(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("do_sigtimedwait returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_tick_check_oneshot_change
#define APP_WRAPPER_FOR_tick_check_oneshot_change
#endif
 
#ifndef APP_WRAPPER_FOR_tick_check_oneshot_change
#define APP_WRAPPER_FOR_tick_check_oneshot_change
FUNCTION_WRAPPER(tick_check_oneshot_change, (int allow_nohz), {
    kern_printk("tick_check_oneshot_change is invoked.\n");
    PRE_WRAPPER_FUNC(allow_nohz);
    int ret = tick_check_oneshot_change(allow_nohz);
    POST_WRAPPER_FUNC(allow_nohz);
    kern_printk("tick_check_oneshot_change returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dma_pool_free
#define APP_WRAPPER_FOR_dma_pool_free
#endif
 
#ifndef APP_WRAPPER_FOR_dma_pool_free
#define APP_WRAPPER_FOR_dma_pool_free
FUNCTION_WRAPPER_VOID(dma_pool_free, (struct dma_pool *pool, void *vaddr, dma_addr_t addr), {
    kern_printk("dma_pool_free is invoked.\n");
    PRE_WRAPPER_FUNC(pool, vaddr, addr);
    dma_pool_free(pool, vaddr, addr);
    POST_WRAPPER_FUNC(pool, vaddr, addr);
    kern_printk("dma_pool_free returned.\n");
})
#endif


#ifndef KERN_ADDR___clear_user
#define APP_WRAPPER_FOR___clear_user
#endif
 
#ifndef APP_WRAPPER_FOR___clear_user
#define APP_WRAPPER_FOR___clear_user
FUNCTION_WRAPPER(__clear_user, (void *mem, unsigned long len), {
    kern_printk("__clear_user is invoked.\n");
    PRE_WRAPPER_FUNC(mem, len);
    long ret = __clear_user(mem, len);
    POST_WRAPPER_FUNC(mem, len);
    kern_printk("__clear_user returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_is_mem_section_removable
#define APP_WRAPPER_FOR_is_mem_section_removable
#endif
 
#ifndef APP_WRAPPER_FOR_is_mem_section_removable
#define APP_WRAPPER_FOR_is_mem_section_removable
FUNCTION_WRAPPER(is_mem_section_removable, (unsigned long pfn, unsigned long nr_pages), {
    kern_printk("is_mem_section_removable is invoked.\n");
    PRE_WRAPPER_FUNC(pfn, nr_pages);
    int ret = is_mem_section_removable(pfn, nr_pages);
    POST_WRAPPER_FUNC(pfn, nr_pages);
    kern_printk("is_mem_section_removable returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_memory_read_from_buffer
#define APP_WRAPPER_FOR_memory_read_from_buffer
#endif
 
#ifndef APP_WRAPPER_FOR_memory_read_from_buffer
#define APP_WRAPPER_FOR_memory_read_from_buffer
FUNCTION_WRAPPER(memory_read_from_buffer, (void *to, size_t count, loff_t *ppos, const void *from, size_t available), {
    kern_printk("memory_read_from_buffer is invoked.\n");
    PRE_WRAPPER_FUNC(to, count, ppos, from, available);
    ssize_t ret = memory_read_from_buffer(to, count, ppos, from, available);
    POST_WRAPPER_FUNC(to, count, ppos, from, available);
    kern_printk("memory_read_from_buffer returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_cancel_work_sync
#define APP_WRAPPER_FOR_cancel_work_sync
#endif
 
#ifndef APP_WRAPPER_FOR_cancel_work_sync
#define APP_WRAPPER_FOR_cancel_work_sync
FUNCTION_WRAPPER(cancel_work_sync, (struct work_struct *work), {
    WRAP_RECURSIVE(work);
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
    kern_printk("cancel_work_sync is invoked.\n");
    PRE_WRAPPER_FUNC(work);
    bool ret = cancel_work_sync(work);
    POST_WRAPPER_FUNC(work);
    kern_printk("cancel_work_sync returned.\n");
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
    return ret;
})
#endif


#ifndef KERN_ADDR_linkwatch_forget_dev
#define APP_WRAPPER_FOR_linkwatch_forget_dev
#endif
 
#ifndef APP_WRAPPER_FOR_linkwatch_forget_dev
#define APP_WRAPPER_FOR_linkwatch_forget_dev
FUNCTION_WRAPPER_VOID(linkwatch_forget_dev, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("linkwatch_forget_dev is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    linkwatch_forget_dev(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("linkwatch_forget_dev returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_init_extra_mapping_wb
#define APP_WRAPPER_FOR_init_extra_mapping_wb
#endif
 
#ifndef APP_WRAPPER_FOR_init_extra_mapping_wb
#define APP_WRAPPER_FOR_init_extra_mapping_wb
FUNCTION_WRAPPER_VOID(init_extra_mapping_wb, (unsigned long phys, unsigned long size), {
    kern_printk("init_extra_mapping_wb is invoked.\n");
    PRE_WRAPPER_FUNC(phys, size);
    init_extra_mapping_wb(phys, size);
    POST_WRAPPER_FUNC(phys, size);
    kern_printk("init_extra_mapping_wb returned.\n");
})
#endif


#ifndef KERN_ADDR_blk_rq_prep_clone
#define APP_WRAPPER_FOR_blk_rq_prep_clone
#endif
 
#ifndef APP_WRAPPER_FOR_blk_rq_prep_clone
#define APP_WRAPPER_FOR_blk_rq_prep_clone
FUNCTION_WRAPPER(blk_rq_prep_clone, (struct request *rq, struct request *rq_src, struct bio_set *bs, gfp_t gfp_mask, int (*bio_ctr)(struct bio *, struct bio *, void *), void *data), {
    WRAP_RECURSIVE(rq);
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    WRAP_RECURSIVE(rq_src);
    TRACES_IF_WATCHPOINT(rq_src);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq_src)));
    WRAP_RECURSIVE(bs);
    TRACES_IF_WATCHPOINT(bs);
    SCAN_HEAD_FUNC(struct bio_set)(*(TO_UNWATCHED_ADDRESS(bs)));
    WRAP_FUNCTION(bio_ctr);
    kern_printk("blk_rq_prep_clone is invoked.\n");
    PRE_WRAPPER_FUNC(rq, rq_src, bs, gfp_mask, bio_ctr, data);
    int ret = blk_rq_prep_clone(rq, rq_src, bs, gfp_mask, bio_ctr, data);
    POST_WRAPPER_FUNC(rq, rq_src, bs, gfp_mask, bio_ctr, data);
    kern_printk("blk_rq_prep_clone returned.\n");
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    TRACES_IF_WATCHPOINT(rq_src);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq_src)));
    TRACES_IF_WATCHPOINT(bs);
    SCAN_HEAD_FUNC(struct bio_set)(*(TO_UNWATCHED_ADDRESS(bs)));
    return ret;
})
#endif


#ifndef KERN_ADDR_free_pid
#define APP_WRAPPER_FOR_free_pid
#endif
 
#ifndef APP_WRAPPER_FOR_free_pid
#define APP_WRAPPER_FOR_free_pid
FUNCTION_WRAPPER_VOID(free_pid, (struct pid *pid), {
    WRAP_RECURSIVE(pid);
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
    kern_printk("free_pid is invoked.\n");
    PRE_WRAPPER_FUNC(pid);
    free_pid(pid);
    POST_WRAPPER_FUNC(pid);
    kern_printk("free_pid returned.\n");
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
})
#endif


#ifndef KERN_ADDR_param_get_uint
#define APP_WRAPPER_FOR_param_get_uint
#endif
 
#ifndef APP_WRAPPER_FOR_param_get_uint
#define APP_WRAPPER_FOR_param_get_uint
FUNCTION_WRAPPER(param_get_uint, (char *buffer, const struct kernel_param *kp), {
    WRAP_RECURSIVE(kp);
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    kern_printk("param_get_uint is invoked.\n");
    PRE_WRAPPER_FUNC(buffer, kp);
    int ret = param_get_uint(buffer, kp);
    POST_WRAPPER_FUNC(buffer, kp);
    kern_printk("param_get_uint returned.\n");
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sscanf
#define APP_WRAPPER_FOR_sscanf
#endif
 
#ifndef APP_WRAPPER_FOR_sscanf
#define APP_WRAPPER_FOR_sscanf
FUNCTION_WRAPPER(sscanf, (const char *_arg1, const char *_arg2, ...), {
    va_list args__;
    va_start(args__, _arg2);
    // TODO: variadic arguments
    kern_printk("sscanf is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = sscanf(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("sscanf returned.\n");
    va_end(args__);
    return ret;
})
#endif


#ifndef KERN_ADDR_pneigh_for_each
#define APP_WRAPPER_FOR_pneigh_for_each
#endif
 
#ifndef APP_WRAPPER_FOR_pneigh_for_each
#define APP_WRAPPER_FOR_pneigh_for_each
FUNCTION_WRAPPER_VOID(pneigh_for_each, (struct neigh_table *tbl, void (*cb)(struct pneigh_entry *)), {
    WRAP_RECURSIVE(tbl);
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    WRAP_FUNCTION(cb);
    kern_printk("pneigh_for_each is invoked.\n");
    PRE_WRAPPER_FUNC(tbl, cb);
    pneigh_for_each(tbl, cb);
    POST_WRAPPER_FUNC(tbl, cb);
    kern_printk("pneigh_for_each returned.\n");
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
})
#endif


#ifndef KERN_ADDR_ata_pci_sff_activate_host
#define APP_WRAPPER_FOR_ata_pci_sff_activate_host
#endif
 
#ifndef APP_WRAPPER_FOR_ata_pci_sff_activate_host
#define APP_WRAPPER_FOR_ata_pci_sff_activate_host
FUNCTION_WRAPPER(ata_pci_sff_activate_host, (struct ata_host *host, irq_handler_t irq_handler, struct scsi_host_template *sht), {
    WRAP_RECURSIVE(host);
    TRACES_IF_WATCHPOINT(host);
    SCAN_HEAD_FUNC(struct ata_host)(*(TO_UNWATCHED_ADDRESS(host)));
    WRAP_FUNCTION(irq_handler);
    WRAP_RECURSIVE(sht);
    TRACES_IF_WATCHPOINT(sht);
    SCAN_HEAD_FUNC(struct scsi_host_template)(*(TO_UNWATCHED_ADDRESS(sht)));
    kern_printk("ata_pci_sff_activate_host is invoked.\n");
    PRE_WRAPPER_FUNC(host, irq_handler, sht);
    int ret = ata_pci_sff_activate_host(host, irq_handler, sht);
    POST_WRAPPER_FUNC(host, irq_handler, sht);
    kern_printk("ata_pci_sff_activate_host returned.\n");
    TRACES_IF_WATCHPOINT(host);
    SCAN_HEAD_FUNC(struct ata_host)(*(TO_UNWATCHED_ADDRESS(host)));
    TRACES_IF_WATCHPOINT(sht);
    SCAN_HEAD_FUNC(struct scsi_host_template)(*(TO_UNWATCHED_ADDRESS(sht)));
    return ret;
})
#endif


#ifndef KERN_ADDR_argv_split
#define APP_WRAPPER_FOR_argv_split
#endif
 
#ifndef APP_WRAPPER_FOR_argv_split
#define APP_WRAPPER_FOR_argv_split
FUNCTION_WRAPPER(argv_split, (gfp_t gfp, const char *str, int *argcp), {
    kern_printk("argv_split is invoked.\n");
    PRE_WRAPPER_FUNC(gfp, str, argcp);
    char **ret = argv_split(gfp, str, argcp);
    POST_WRAPPER_FUNC(gfp, str, argcp);
    kern_printk("argv_split returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_param_set_invbool
#define APP_WRAPPER_FOR_param_set_invbool
#endif
 
#ifndef APP_WRAPPER_FOR_param_set_invbool
#define APP_WRAPPER_FOR_param_set_invbool
FUNCTION_WRAPPER(param_set_invbool, (const char *val, const struct kernel_param *kp), {
    WRAP_RECURSIVE(kp);
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    kern_printk("param_set_invbool is invoked.\n");
    PRE_WRAPPER_FUNC(val, kp);
    int ret = param_set_invbool(val, kp);
    POST_WRAPPER_FUNC(val, kp);
    kern_printk("param_set_invbool returned.\n");
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_srcu_notifier_chain_register
#define APP_WRAPPER_FOR_srcu_notifier_chain_register
#endif
 
#ifndef APP_WRAPPER_FOR_srcu_notifier_chain_register
#define APP_WRAPPER_FOR_srcu_notifier_chain_register
FUNCTION_WRAPPER(srcu_notifier_chain_register, (struct srcu_notifier_head *nh, struct notifier_block *nb), {
    WRAP_RECURSIVE(nh);
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct srcu_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    WRAP_RECURSIVE(nb);
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    kern_printk("srcu_notifier_chain_register is invoked.\n");
    PRE_WRAPPER_FUNC(nh, nb);
    int ret = srcu_notifier_chain_register(nh, nb);
    POST_WRAPPER_FUNC(nh, nb);
    kern_printk("srcu_notifier_chain_register returned.\n");
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct srcu_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_anon_vma_interval_tree_insert
#define APP_WRAPPER_FOR_anon_vma_interval_tree_insert
#endif
 
#ifndef APP_WRAPPER_FOR_anon_vma_interval_tree_insert
#define APP_WRAPPER_FOR_anon_vma_interval_tree_insert
FUNCTION_WRAPPER_VOID(anon_vma_interval_tree_insert, (struct anon_vma_chain *node, struct rb_root *root), {
    kern_printk("anon_vma_interval_tree_insert is invoked.\n");
    PRE_WRAPPER_FUNC(node, root);
    anon_vma_interval_tree_insert(node, root);
    POST_WRAPPER_FUNC(node, root);
    kern_printk("anon_vma_interval_tree_insert returned.\n");
})
#endif


#ifndef KERN_ADDR_device_remove_bin_file
#define APP_WRAPPER_FOR_device_remove_bin_file
#endif
 
#ifndef APP_WRAPPER_FOR_device_remove_bin_file
#define APP_WRAPPER_FOR_device_remove_bin_file
FUNCTION_WRAPPER_VOID(device_remove_bin_file, (struct device *dev, const struct bin_attribute *attr), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(attr);
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(const struct bin_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    kern_printk("device_remove_bin_file is invoked.\n");
    PRE_WRAPPER_FUNC(dev, attr);
    device_remove_bin_file(dev, attr);
    POST_WRAPPER_FUNC(dev, attr);
    kern_printk("device_remove_bin_file returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(const struct bin_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
})
#endif


#ifndef KERN_ADDR_skb_append_datato_frags
#define APP_WRAPPER_FOR_skb_append_datato_frags
#endif
 
#ifndef APP_WRAPPER_FOR_skb_append_datato_frags
#define APP_WRAPPER_FOR_skb_append_datato_frags
FUNCTION_WRAPPER(skb_append_datato_frags, (struct sock *sk, struct sk_buff *skb, int (getfrag)(void *, char *, int, int, int, struct sk_buff *), void *from, int length), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_append_datato_frags is invoked.\n");
    PRE_WRAPPER_FUNC(sk, skb, getfrag, from, length);
    int ret = skb_append_datato_frags(sk, skb, getfrag, from, length);
    POST_WRAPPER_FUNC(sk, skb, getfrag, from, length);
    kern_printk("skb_append_datato_frags returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sigset_from_compat
#define APP_WRAPPER_FOR_sigset_from_compat
#endif
 
#ifndef APP_WRAPPER_FOR_sigset_from_compat
#define APP_WRAPPER_FOR_sigset_from_compat
FUNCTION_WRAPPER_VOID(sigset_from_compat, (sigset_t *set, compat_sigset_t *compat), {
    kern_printk("sigset_from_compat is invoked.\n");
    PRE_WRAPPER_FUNC(set, compat);
    sigset_from_compat(set, compat);
    POST_WRAPPER_FUNC(set, compat);
    kern_printk("sigset_from_compat returned.\n");
})
#endif


#ifndef KERN_ADDR__raw_read_lock
#define APP_WRAPPER_FOR__raw_read_lock
#endif
 
#ifndef APP_WRAPPER_FOR__raw_read_lock
#define APP_WRAPPER_FOR__raw_read_lock
FUNCTION_WRAPPER_VOID(_raw_read_lock, (rwlock_t *lock), {
    kern_printk("_raw_read_lock is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    _raw_read_lock(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("_raw_read_lock returned.\n");
})
#endif


#ifndef KERN_ADDR_icmpv6_param_prob
#define APP_WRAPPER_FOR_icmpv6_param_prob
#endif
 
#ifndef APP_WRAPPER_FOR_icmpv6_param_prob
#define APP_WRAPPER_FOR_icmpv6_param_prob
FUNCTION_WRAPPER_VOID(icmpv6_param_prob, (struct sk_buff *skb, u8 code, int pos), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("icmpv6_param_prob is invoked.\n");
    PRE_WRAPPER_FUNC(skb, code, pos);
    icmpv6_param_prob(skb, code, pos);
    POST_WRAPPER_FUNC(skb, code, pos);
    kern_printk("icmpv6_param_prob returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_input_get_new_minor
#define APP_WRAPPER_FOR_input_get_new_minor
#endif
 
#ifndef APP_WRAPPER_FOR_input_get_new_minor
#define APP_WRAPPER_FOR_input_get_new_minor
FUNCTION_WRAPPER(input_get_new_minor, (int legacy_base, unsigned int legacy_num, bool allow_dynamic), {
    kern_printk("input_get_new_minor is invoked.\n");
    PRE_WRAPPER_FUNC(legacy_base, legacy_num, allow_dynamic);
    int ret = input_get_new_minor(legacy_base, legacy_num, allow_dynamic);
    POST_WRAPPER_FUNC(legacy_base, legacy_num, allow_dynamic);
    kern_printk("input_get_new_minor returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_decode_pld_buffer
#define APP_WRAPPER_FOR_acpi_decode_pld_buffer
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_decode_pld_buffer
#define APP_WRAPPER_FOR_acpi_decode_pld_buffer
FUNCTION_WRAPPER(acpi_decode_pld_buffer, (u8 *in_buffer, acpi_size length, struct acpi_pld_info **return_buffer), {
    kern_printk("acpi_decode_pld_buffer is invoked.\n");
    PRE_WRAPPER_FUNC(in_buffer, length, return_buffer);
    acpi_status ret = acpi_decode_pld_buffer(in_buffer, length, return_buffer);
    POST_WRAPPER_FUNC(in_buffer, length, return_buffer);
    kern_printk("acpi_decode_pld_buffer returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_set_personality_64bit
#define APP_WRAPPER_FOR_set_personality_64bit
#endif
 
#ifndef APP_WRAPPER_FOR_set_personality_64bit
#define APP_WRAPPER_FOR_set_personality_64bit
FUNCTION_WRAPPER_VOID(set_personality_64bit, (), {
    kern_printk("set_personality_64bit is invoked.\n");
    PRE_WRAPPER_FUNC();
    set_personality_64bit();
    POST_WRAPPER_FUNC();
    kern_printk("set_personality_64bit returned.\n");
})
#endif


#ifndef KERN_ADDR_symbol_put_addr
#define APP_WRAPPER_FOR_symbol_put_addr
#endif
 
#ifndef APP_WRAPPER_FOR_symbol_put_addr
#define APP_WRAPPER_FOR_symbol_put_addr
FUNCTION_WRAPPER_VOID(symbol_put_addr, (void *addr), {
    kern_printk("symbol_put_addr is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    symbol_put_addr(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("symbol_put_addr returned.\n");
})
#endif


#ifndef KERN_ADDR_get_cpu_idle_time_us
#define APP_WRAPPER_FOR_get_cpu_idle_time_us
#endif
 
#ifndef APP_WRAPPER_FOR_get_cpu_idle_time_us
#define APP_WRAPPER_FOR_get_cpu_idle_time_us
FUNCTION_WRAPPER(get_cpu_idle_time_us, (int cpu, u64 *last_update_time), {
    kern_printk("get_cpu_idle_time_us is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, last_update_time);
    u64 ret = get_cpu_idle_time_us(cpu, last_update_time);
    POST_WRAPPER_FUNC(cpu, last_update_time);
    kern_printk("get_cpu_idle_time_us returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_revoke
#define APP_WRAPPER_FOR_jbd2_journal_revoke
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_revoke
#define APP_WRAPPER_FOR_jbd2_journal_revoke
FUNCTION_WRAPPER(jbd2_journal_revoke, (handle_t *_arg1, unsigned long long _arg2, struct buffer_head *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(handle_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("jbd2_journal_revoke is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = jbd2_journal_revoke(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("jbd2_journal_revoke returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(handle_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sas_port_init
#define APP_WRAPPER_FOR_ata_sas_port_init
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sas_port_init
#define APP_WRAPPER_FOR_ata_sas_port_init
FUNCTION_WRAPPER(ata_sas_port_init, (struct ata_port *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("ata_sas_port_init is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = ata_sas_port_init(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("ata_sas_port_init returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_disable_msix
#define APP_WRAPPER_FOR_pci_disable_msix
#endif
 
#ifndef APP_WRAPPER_FOR_pci_disable_msix
#define APP_WRAPPER_FOR_pci_disable_msix
FUNCTION_WRAPPER_VOID(pci_disable_msix, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_disable_msix is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pci_disable_msix(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_disable_msix returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_jbd2_journal_get_descriptor_buffer
#define APP_WRAPPER_FOR_jbd2_journal_get_descriptor_buffer
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_get_descriptor_buffer
#define APP_WRAPPER_FOR_jbd2_journal_get_descriptor_buffer
FUNCTION_WRAPPER(jbd2_journal_get_descriptor_buffer, (journal_t *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_get_descriptor_buffer is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct journal_head *ret = jbd2_journal_get_descriptor_buffer(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("jbd2_journal_get_descriptor_buffer returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_cgroup_lock_is_held
#define APP_WRAPPER_FOR_cgroup_lock_is_held
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_lock_is_held
#define APP_WRAPPER_FOR_cgroup_lock_is_held
FUNCTION_WRAPPER(cgroup_lock_is_held, (), {
    kern_printk("cgroup_lock_is_held is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = cgroup_lock_is_held();
    POST_WRAPPER_FUNC();
    kern_printk("cgroup_lock_is_held returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_invalidate_bh_lrus
#define APP_WRAPPER_FOR_invalidate_bh_lrus
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_bh_lrus
#define APP_WRAPPER_FOR_invalidate_bh_lrus
FUNCTION_WRAPPER_VOID(invalidate_bh_lrus, (), {
    kern_printk("invalidate_bh_lrus is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_bh_lrus();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_bh_lrus returned.\n");
})
#endif


#ifndef KERN_ADDR_skb_tstamp_tx
#define APP_WRAPPER_FOR_skb_tstamp_tx
#endif
 
#ifndef APP_WRAPPER_FOR_skb_tstamp_tx
#define APP_WRAPPER_FOR_skb_tstamp_tx
FUNCTION_WRAPPER_VOID(skb_tstamp_tx, (struct sk_buff *orig_skb, struct skb_shared_hwtstamps *hwtstamps), {
    WRAP_RECURSIVE(orig_skb);
    TRACES_IF_WATCHPOINT(orig_skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(orig_skb)));
    kern_printk("skb_tstamp_tx is invoked.\n");
    PRE_WRAPPER_FUNC(orig_skb, hwtstamps);
    skb_tstamp_tx(orig_skb, hwtstamps);
    POST_WRAPPER_FUNC(orig_skb, hwtstamps);
    kern_printk("skb_tstamp_tx returned.\n");
    TRACES_IF_WATCHPOINT(orig_skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(orig_skb)));
})
#endif


#ifndef KERN_ADDR_seccomp_bpf_load
#define APP_WRAPPER_FOR_seccomp_bpf_load
#endif
 
#ifndef APP_WRAPPER_FOR_seccomp_bpf_load
#define APP_WRAPPER_FOR_seccomp_bpf_load
FUNCTION_WRAPPER(seccomp_bpf_load, (int off), {
    kern_printk("seccomp_bpf_load is invoked.\n");
    PRE_WRAPPER_FUNC(off);
    u32 ret = seccomp_bpf_load(off);
    POST_WRAPPER_FUNC(off);
    kern_printk("seccomp_bpf_load returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_set_nx
#define APP_WRAPPER_FOR_set_nx
#endif
 
#ifndef APP_WRAPPER_FOR_set_nx
#define APP_WRAPPER_FOR_set_nx
FUNCTION_WRAPPER_VOID(set_nx, (), {
    kern_printk("set_nx is invoked.\n");
    PRE_WRAPPER_FUNC();
    set_nx();
    POST_WRAPPER_FUNC();
    kern_printk("set_nx returned.\n");
})
#endif


#ifndef KERN_ADDR_unhandled_signal
#define APP_WRAPPER_FOR_unhandled_signal
#endif
 
#ifndef APP_WRAPPER_FOR_unhandled_signal
#define APP_WRAPPER_FOR_unhandled_signal
FUNCTION_WRAPPER(unhandled_signal, (struct task_struct *tsk, int sig), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("unhandled_signal is invoked.\n");
    PRE_WRAPPER_FUNC(tsk, sig);
    int ret = unhandled_signal(tsk, sig);
    POST_WRAPPER_FUNC(tsk, sig);
    kern_printk("unhandled_signal returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dmam_free_noncoherent
#define APP_WRAPPER_FOR_dmam_free_noncoherent
#endif
 
#ifndef APP_WRAPPER_FOR_dmam_free_noncoherent
#define APP_WRAPPER_FOR_dmam_free_noncoherent
FUNCTION_WRAPPER_VOID(dmam_free_noncoherent, (struct device *dev, size_t size, void *vaddr, dma_addr_t dma_handle), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dmam_free_noncoherent is invoked.\n");
    PRE_WRAPPER_FUNC(dev, size, vaddr, dma_handle);
    dmam_free_noncoherent(dev, size, vaddr, dma_handle);
    POST_WRAPPER_FUNC(dev, size, vaddr, dma_handle);
    kern_printk("dmam_free_noncoherent returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_pnp_unregister_driver
#define APP_WRAPPER_FOR_pnp_unregister_driver
#endif
 
#ifndef APP_WRAPPER_FOR_pnp_unregister_driver
#define APP_WRAPPER_FOR_pnp_unregister_driver
FUNCTION_WRAPPER_VOID(pnp_unregister_driver, (struct pnp_driver *drv), {
    WRAP_RECURSIVE(drv);
    TRACES_IF_WATCHPOINT(drv);
    SCAN_HEAD_FUNC(struct pnp_driver)(*(TO_UNWATCHED_ADDRESS(drv)));
    kern_printk("pnp_unregister_driver is invoked.\n");
    PRE_WRAPPER_FUNC(drv);
    pnp_unregister_driver(drv);
    POST_WRAPPER_FUNC(drv);
    kern_printk("pnp_unregister_driver returned.\n");
    TRACES_IF_WATCHPOINT(drv);
    SCAN_HEAD_FUNC(struct pnp_driver)(*(TO_UNWATCHED_ADDRESS(drv)));
})
#endif


#ifndef KERN_ADDR_bio_reset
#define APP_WRAPPER_FOR_bio_reset
#endif
 
#ifndef APP_WRAPPER_FOR_bio_reset
#define APP_WRAPPER_FOR_bio_reset
FUNCTION_WRAPPER_VOID(bio_reset, (struct bio *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bio_reset is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    bio_reset(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("bio_reset returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR___add_wrong_size
#define APP_WRAPPER_FOR___add_wrong_size
#endif
 
#ifndef APP_WRAPPER_FOR___add_wrong_size
#define APP_WRAPPER_FOR___add_wrong_size
FUNCTION_WRAPPER_VOID(__add_wrong_size, (), {
    kern_printk("__add_wrong_size is invoked.\n");
    PRE_WRAPPER_FUNC();
    __add_wrong_size();
    POST_WRAPPER_FUNC();
    kern_printk("__add_wrong_size returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_set_ltr
#define APP_WRAPPER_FOR_pci_set_ltr
#endif
 
#ifndef APP_WRAPPER_FOR_pci_set_ltr
#define APP_WRAPPER_FOR_pci_set_ltr
FUNCTION_WRAPPER(pci_set_ltr, (struct pci_dev *dev, int snoop_lat_ns, int nosnoop_lat_ns), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_set_ltr is invoked.\n");
    PRE_WRAPPER_FUNC(dev, snoop_lat_ns, nosnoop_lat_ns);
    int ret = pci_set_ltr(dev, snoop_lat_ns, nosnoop_lat_ns);
    POST_WRAPPER_FUNC(dev, snoop_lat_ns, nosnoop_lat_ns);
    kern_printk("pci_set_ltr returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_renumber_slot
#define APP_WRAPPER_FOR_pci_renumber_slot
#endif
 
#ifndef APP_WRAPPER_FOR_pci_renumber_slot
#define APP_WRAPPER_FOR_pci_renumber_slot
FUNCTION_WRAPPER_VOID(pci_renumber_slot, (struct pci_slot *slot, int slot_nr), {
    WRAP_RECURSIVE(slot);
    TRACES_IF_WATCHPOINT(slot);
    SCAN_HEAD_FUNC(struct pci_slot)(*(TO_UNWATCHED_ADDRESS(slot)));
    kern_printk("pci_renumber_slot is invoked.\n");
    PRE_WRAPPER_FUNC(slot, slot_nr);
    pci_renumber_slot(slot, slot_nr);
    POST_WRAPPER_FUNC(slot, slot_nr);
    kern_printk("pci_renumber_slot returned.\n");
    TRACES_IF_WATCHPOINT(slot);
    SCAN_HEAD_FUNC(struct pci_slot)(*(TO_UNWATCHED_ADDRESS(slot)));
})
#endif


#ifndef KERN_ADDR_ata_sas_port_start
#define APP_WRAPPER_FOR_ata_sas_port_start
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sas_port_start
#define APP_WRAPPER_FOR_ata_sas_port_start
FUNCTION_WRAPPER(ata_sas_port_start, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_sas_port_start is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    int ret = ata_sas_port_start(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_sas_port_start returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR_enable_sep_cpu
#define APP_WRAPPER_FOR_enable_sep_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_enable_sep_cpu
#define APP_WRAPPER_FOR_enable_sep_cpu
FUNCTION_WRAPPER_VOID(enable_sep_cpu, (), {
    kern_printk("enable_sep_cpu is invoked.\n");
    PRE_WRAPPER_FUNC();
    enable_sep_cpu();
    POST_WRAPPER_FUNC();
    kern_printk("enable_sep_cpu returned.\n");
})
#endif


#ifndef KERN_ADDR_param_set_uint
#define APP_WRAPPER_FOR_param_set_uint
#endif
 
#ifndef APP_WRAPPER_FOR_param_set_uint
#define APP_WRAPPER_FOR_param_set_uint
FUNCTION_WRAPPER(param_set_uint, (const char *val, const struct kernel_param *kp), {
    WRAP_RECURSIVE(kp);
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    kern_printk("param_set_uint is invoked.\n");
    PRE_WRAPPER_FUNC(val, kp);
    int ret = param_set_uint(val, kp);
    POST_WRAPPER_FUNC(val, kp);
    kern_printk("param_set_uint returned.\n");
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_file_splice_write
#define APP_WRAPPER_FOR_generic_file_splice_write
#endif
 
#ifndef APP_WRAPPER_FOR_generic_file_splice_write
#define APP_WRAPPER_FOR_generic_file_splice_write
FUNCTION_WRAPPER(generic_file_splice_write, (struct pipe_inode_info *_arg1, struct file *_arg2, loff_t *_arg3, size_t _arg4, unsigned int _arg5), {
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("generic_file_splice_write is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    ssize_t ret = generic_file_splice_write(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("generic_file_splice_write returned.\n");
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_device_add
#define APP_WRAPPER_FOR_pci_device_add
#endif
 
#ifndef APP_WRAPPER_FOR_pci_device_add
#define APP_WRAPPER_FOR_pci_device_add
FUNCTION_WRAPPER_VOID(pci_device_add, (struct pci_dev *dev, struct pci_bus *bus), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_device_add is invoked.\n");
    PRE_WRAPPER_FUNC(dev, bus);
    pci_device_add(dev, bus);
    POST_WRAPPER_FUNC(dev, bus);
    kern_printk("pci_device_add returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
})
#endif


#ifndef KERN_ADDR_dm_get_mapinfo
#define APP_WRAPPER_FOR_dm_get_mapinfo
#endif
 
#ifndef APP_WRAPPER_FOR_dm_get_mapinfo
#define APP_WRAPPER_FOR_dm_get_mapinfo
FUNCTION_WRAPPER(dm_get_mapinfo, (struct bio *bio), {
    WRAP_RECURSIVE(bio);
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
    kern_printk("dm_get_mapinfo is invoked.\n");
    PRE_WRAPPER_FUNC(bio);
    union map_info *ret = dm_get_mapinfo(bio);
    POST_WRAPPER_FUNC(bio);
    kern_printk("dm_get_mapinfo returned.\n");
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_complete_tx_timestamp
#define APP_WRAPPER_FOR_skb_complete_tx_timestamp
#endif
 
#ifndef APP_WRAPPER_FOR_skb_complete_tx_timestamp
#define APP_WRAPPER_FOR_skb_complete_tx_timestamp
FUNCTION_WRAPPER_VOID(skb_complete_tx_timestamp, (struct sk_buff *skb, struct skb_shared_hwtstamps *hwtstamps), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_complete_tx_timestamp is invoked.\n");
    PRE_WRAPPER_FUNC(skb, hwtstamps);
    skb_complete_tx_timestamp(skb, hwtstamps);
    POST_WRAPPER_FUNC(skb, hwtstamps);
    kern_printk("skb_complete_tx_timestamp returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_is_vsmp_box
#define APP_WRAPPER_FOR_is_vsmp_box
#endif
 
#ifndef APP_WRAPPER_FOR_is_vsmp_box
#define APP_WRAPPER_FOR_is_vsmp_box
FUNCTION_WRAPPER(is_vsmp_box, (), {
    kern_printk("is_vsmp_box is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = is_vsmp_box();
    POST_WRAPPER_FUNC();
    kern_printk("is_vsmp_box returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_x32_setup_additional_pages
#define APP_WRAPPER_FOR_x32_setup_additional_pages
#endif
 
#ifndef APP_WRAPPER_FOR_x32_setup_additional_pages
#define APP_WRAPPER_FOR_x32_setup_additional_pages
FUNCTION_WRAPPER(x32_setup_additional_pages, (struct linux_binprm *bprm, int uses_interp), {
    kern_printk("x32_setup_additional_pages is invoked.\n");
    PRE_WRAPPER_FUNC(bprm, uses_interp);
    int ret = x32_setup_additional_pages(bprm, uses_interp);
    POST_WRAPPER_FUNC(bprm, uses_interp);
    kern_printk("x32_setup_additional_pages returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_sendmsg
#define APP_WRAPPER_FOR_sock_sendmsg
#endif
 
#ifndef APP_WRAPPER_FOR_sock_sendmsg
#define APP_WRAPPER_FOR_sock_sendmsg
FUNCTION_WRAPPER(sock_sendmsg, (struct socket *sock, struct msghdr *msg, size_t len), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    kern_printk("sock_sendmsg is invoked.\n");
    PRE_WRAPPER_FUNC(sock, msg, len);
    int ret = sock_sendmsg(sock, msg, len);
    POST_WRAPPER_FUNC(sock, msg, len);
    kern_printk("sock_sendmsg returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pskb_expand_head
#define APP_WRAPPER_FOR_pskb_expand_head
#endif
 
#ifndef APP_WRAPPER_FOR_pskb_expand_head
#define APP_WRAPPER_FOR_pskb_expand_head
FUNCTION_WRAPPER(pskb_expand_head, (struct sk_buff *skb, int nhead, int ntail, gfp_t gfp_mask), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("pskb_expand_head is invoked.\n");
    PRE_WRAPPER_FUNC(skb, nhead, ntail, gfp_mask);
    int ret = pskb_expand_head(skb, nhead, ntail, gfp_mask);
    POST_WRAPPER_FUNC(skb, nhead, ntail, gfp_mask);
    kern_printk("pskb_expand_head returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_queue_io_opt
#define APP_WRAPPER_FOR_blk_queue_io_opt
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_io_opt
#define APP_WRAPPER_FOR_blk_queue_io_opt
FUNCTION_WRAPPER_VOID(blk_queue_io_opt, (struct request_queue *q, unsigned int opt), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    kern_printk("blk_queue_io_opt is invoked.\n");
    PRE_WRAPPER_FUNC(q, opt);
    blk_queue_io_opt(q, opt);
    POST_WRAPPER_FUNC(q, opt);
    kern_printk("blk_queue_io_opt returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
})
#endif


#ifndef KERN_ADDR_proc_sched_show_task
#define APP_WRAPPER_FOR_proc_sched_show_task
#endif
 
#ifndef APP_WRAPPER_FOR_proc_sched_show_task
#define APP_WRAPPER_FOR_proc_sched_show_task
FUNCTION_WRAPPER_VOID(proc_sched_show_task, (struct task_struct *p, struct seq_file *m), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    WRAP_RECURSIVE(m);
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
    kern_printk("proc_sched_show_task is invoked.\n");
    PRE_WRAPPER_FUNC(p, m);
    proc_sched_show_task(p, m);
    POST_WRAPPER_FUNC(p, m);
    kern_printk("proc_sched_show_task returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
})
#endif


#ifndef KERN_ADDR_inet_frag_destroy
#define APP_WRAPPER_FOR_inet_frag_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_inet_frag_destroy
#define APP_WRAPPER_FOR_inet_frag_destroy
FUNCTION_WRAPPER_VOID(inet_frag_destroy, (struct inet_frag_queue *q, struct inet_frags *f, int *work), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct inet_frag_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    WRAP_RECURSIVE(f);
    TRACES_IF_WATCHPOINT(f);
    SCAN_HEAD_FUNC(struct inet_frags)(*(TO_UNWATCHED_ADDRESS(f)));
    kern_printk("inet_frag_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(q, f, work);
    inet_frag_destroy(q, f, work);
    POST_WRAPPER_FUNC(q, f, work);
    kern_printk("inet_frag_destroy returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct inet_frag_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    TRACES_IF_WATCHPOINT(f);
    SCAN_HEAD_FUNC(struct inet_frags)(*(TO_UNWATCHED_ADDRESS(f)));
})
#endif


#ifndef KERN_ADDR_ata_pci_sff_prepare_host
#define APP_WRAPPER_FOR_ata_pci_sff_prepare_host
#endif
 
#ifndef APP_WRAPPER_FOR_ata_pci_sff_prepare_host
#define APP_WRAPPER_FOR_ata_pci_sff_prepare_host
FUNCTION_WRAPPER(ata_pci_sff_prepare_host, (struct pci_dev *pdev, const struct ata_port_info ** const ppi, struct ata_host **r_host), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    WRAP_RECURSIVE(ppi);
    TRACES_IF_WATCHPOINT(ppi);
//    SCAN_HEAD_FUNC(const struct ata_port_info * const)(*(TO_UNWATCHED_ADDRESS(ppi)));
    WRAP_RECURSIVE(r_host);
    TRACES_IF_WATCHPOINT(r_host);
  //  SCAN_HEAD_FUNC(struct ata_host *)(*(TO_UNWATCHED_ADDRESS(r_host)));
    kern_printk("ata_pci_sff_prepare_host is invoked.\n");
    PRE_WRAPPER_FUNC(pdev, ppi, r_host);
    int ret = ata_pci_sff_prepare_host(pdev, ppi, r_host);
    POST_WRAPPER_FUNC(pdev, ppi, r_host);
    kern_printk("ata_pci_sff_prepare_host returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    TRACES_IF_WATCHPOINT(ppi);
    //SCAN_HEAD_FUNC(const struct ata_port_info * const)(*(TO_UNWATCHED_ADDRESS(ppi)));
    TRACES_IF_WATCHPOINT(r_host);
    //SCAN_HEAD_FUNC(struct ata_host *)(*(TO_UNWATCHED_ADDRESS(r_host)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_uc_flush
#define APP_WRAPPER_FOR_dev_uc_flush
#endif
 
#ifndef APP_WRAPPER_FOR_dev_uc_flush
#define APP_WRAPPER_FOR_dev_uc_flush
FUNCTION_WRAPPER_VOID(dev_uc_flush, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_uc_flush is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    dev_uc_flush(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_uc_flush returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_blk_run_queue
#define APP_WRAPPER_FOR_blk_run_queue
#endif
 
#ifndef APP_WRAPPER_FOR_blk_run_queue
#define APP_WRAPPER_FOR_blk_run_queue
FUNCTION_WRAPPER_VOID(blk_run_queue, (struct request_queue *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_run_queue is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    blk_run_queue(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("blk_run_queue returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR___pm_stay_awake
#define APP_WRAPPER_FOR___pm_stay_awake
#endif
 
#ifndef APP_WRAPPER_FOR___pm_stay_awake
#define APP_WRAPPER_FOR___pm_stay_awake
FUNCTION_WRAPPER_VOID(__pm_stay_awake, (struct wakeup_source *ws), {
    WRAP_RECURSIVE(ws);
    TRACES_IF_WATCHPOINT(ws);
    SCAN_HEAD_FUNC(struct wakeup_source)(*(TO_UNWATCHED_ADDRESS(ws)));
    kern_printk("__pm_stay_awake is invoked.\n");
    PRE_WRAPPER_FUNC(ws);
    __pm_stay_awake(ws);
    POST_WRAPPER_FUNC(ws);
    kern_printk("__pm_stay_awake returned.\n");
    TRACES_IF_WATCHPOINT(ws);
    SCAN_HEAD_FUNC(struct wakeup_source)(*(TO_UNWATCHED_ADDRESS(ws)));
})
#endif


#ifndef KERN_ADDR_kswapd_stop
#define APP_WRAPPER_FOR_kswapd_stop
#endif
 
#ifndef APP_WRAPPER_FOR_kswapd_stop
#define APP_WRAPPER_FOR_kswapd_stop
FUNCTION_WRAPPER_VOID(kswapd_stop, (int nid), {
    kern_printk("kswapd_stop is invoked.\n");
    PRE_WRAPPER_FUNC(nid);
    kswapd_stop(nid);
    POST_WRAPPER_FUNC(nid);
    kern_printk("kswapd_stop returned.\n");
})
#endif


#ifndef KERN_ADDR_devm_ioport_map
#define APP_WRAPPER_FOR_devm_ioport_map
#endif
 
#ifndef APP_WRAPPER_FOR_devm_ioport_map
#define APP_WRAPPER_FOR_devm_ioport_map
FUNCTION_WRAPPER(devm_ioport_map, (struct device *dev, unsigned long port, unsigned int nr), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("devm_ioport_map is invoked.\n");
    PRE_WRAPPER_FUNC(dev, port, nr);
    void *ret = devm_ioport_map(dev, port, nr);
    POST_WRAPPER_FUNC(dev, port, nr);
    kern_printk("devm_ioport_map returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_alloc_uid
#define APP_WRAPPER_FOR_alloc_uid
#endif
 
#ifndef APP_WRAPPER_FOR_alloc_uid
#define APP_WRAPPER_FOR_alloc_uid
FUNCTION_WRAPPER(alloc_uid, (kuid_t _arg1), {
    kern_printk("alloc_uid is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct user_struct *ret = alloc_uid(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("alloc_uid returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_profile_hits
#define APP_WRAPPER_FOR_profile_hits
#endif
 
#ifndef APP_WRAPPER_FOR_profile_hits
#define APP_WRAPPER_FOR_profile_hits
FUNCTION_WRAPPER_VOID(profile_hits, (int type, void *ip, unsigned int nr_hits), {
    kern_printk("profile_hits is invoked.\n");
    PRE_WRAPPER_FUNC(type, ip, nr_hits);
    profile_hits(type, ip, nr_hits);
    POST_WRAPPER_FUNC(type, ip, nr_hits);
    kern_printk("profile_hits returned.\n");
})
#endif


#ifndef KERN_ADDR_default_restore_msi_irqs
#define APP_WRAPPER_FOR_default_restore_msi_irqs
#endif
 
#ifndef APP_WRAPPER_FOR_default_restore_msi_irqs
#define APP_WRAPPER_FOR_default_restore_msi_irqs
FUNCTION_WRAPPER_VOID(default_restore_msi_irqs, (struct pci_dev *dev, int irq), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("default_restore_msi_irqs is invoked.\n");
    PRE_WRAPPER_FUNC(dev, irq);
    default_restore_msi_irqs(dev, irq);
    POST_WRAPPER_FUNC(dev, irq);
    kern_printk("default_restore_msi_irqs returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_probe_irq_on
#define APP_WRAPPER_FOR_probe_irq_on
#endif
 
#ifndef APP_WRAPPER_FOR_probe_irq_on
#define APP_WRAPPER_FOR_probe_irq_on
FUNCTION_WRAPPER(probe_irq_on, (), {
    kern_printk("probe_irq_on is invoked.\n");
    PRE_WRAPPER_FUNC();
    long ret = probe_irq_on();
    POST_WRAPPER_FUNC();
    kern_printk("probe_irq_on returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_cap_capset
#define APP_WRAPPER_FOR_cap_capset
#endif
 
#ifndef APP_WRAPPER_FOR_cap_capset
#define APP_WRAPPER_FOR_cap_capset
FUNCTION_WRAPPER(cap_capset, (struct cred *new_, const struct cred *old, const kernel_cap_t *effective, const kernel_cap_t *inheritable, const kernel_cap_t *permitted), {
    WRAP_RECURSIVE(new_);
    TRACES_IF_WATCHPOINT(new_);
    SCAN_HEAD_FUNC(struct cred)(*(TO_UNWATCHED_ADDRESS(new_)));
    WRAP_RECURSIVE(old);
    TRACES_IF_WATCHPOINT(old);
    SCAN_HEAD_FUNC(const struct cred)(*(TO_UNWATCHED_ADDRESS(old)));
    kern_printk("cap_capset is invoked.\n");
    PRE_WRAPPER_FUNC(new_, old, effective, inheritable, permitted);
    int ret = cap_capset(new_, old, effective, inheritable, permitted);
    POST_WRAPPER_FUNC(new_, old, effective, inheritable, permitted);
    kern_printk("cap_capset returned.\n");
    TRACES_IF_WATCHPOINT(new_);
    SCAN_HEAD_FUNC(struct cred)(*(TO_UNWATCHED_ADDRESS(new_)));
    TRACES_IF_WATCHPOINT(old);
    SCAN_HEAD_FUNC(const struct cred)(*(TO_UNWATCHED_ADDRESS(old)));
    return ret;
})
#endif


#ifndef KERN_ADDR_find_get_pid
#define APP_WRAPPER_FOR_find_get_pid
#endif
 
#ifndef APP_WRAPPER_FOR_find_get_pid
#define APP_WRAPPER_FOR_find_get_pid
FUNCTION_WRAPPER(find_get_pid, (int nr), {
    kern_printk("find_get_pid is invoked.\n");
    PRE_WRAPPER_FUNC(nr);
    struct pid *ret = find_get_pid(nr);
    POST_WRAPPER_FUNC(nr);
    kern_printk("find_get_pid returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___acpi_device_run_wake
#define APP_WRAPPER_FOR___acpi_device_run_wake
#endif
 
#ifndef APP_WRAPPER_FOR___acpi_device_run_wake
#define APP_WRAPPER_FOR___acpi_device_run_wake
FUNCTION_WRAPPER(__acpi_device_run_wake, (struct acpi_device *_arg1, bool _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__acpi_device_run_wake is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = __acpi_device_run_wake(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("__acpi_device_run_wake returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_on_each_cpu_cond
#define APP_WRAPPER_FOR_on_each_cpu_cond
#endif
 
#ifndef APP_WRAPPER_FOR_on_each_cpu_cond
#define APP_WRAPPER_FOR_on_each_cpu_cond
FUNCTION_WRAPPER_VOID(on_each_cpu_cond, (bool (*cond_func)(int, void *), smp_call_func_t func, void *info, bool wait, gfp_t gfp_flags), {
    WRAP_FUNCTION(cond_func);
    WRAP_FUNCTION(func);
    kern_printk("on_each_cpu_cond is invoked.\n");
    PRE_WRAPPER_FUNC(cond_func, func, info, wait, gfp_flags);
    on_each_cpu_cond(cond_func, func, info, wait, gfp_flags);
    POST_WRAPPER_FUNC(cond_func, func, info, wait, gfp_flags);
    kern_printk("on_each_cpu_cond returned.\n");
})
#endif


#ifndef KERN_ADDR_mount_nodev
#define APP_WRAPPER_FOR_mount_nodev
#endif
 
#ifndef APP_WRAPPER_FOR_mount_nodev
#define APP_WRAPPER_FOR_mount_nodev
FUNCTION_WRAPPER(mount_nodev, (struct file_system_type *fs_type, int flags, void *data, int (*fill_super)(struct super_block *, void *, int)), {
    WRAP_RECURSIVE(fs_type);
    TRACES_IF_WATCHPOINT(fs_type);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(fs_type)));
    WRAP_FUNCTION(fill_super);
    kern_printk("mount_nodev is invoked.\n");
    PRE_WRAPPER_FUNC(fs_type, flags, data, fill_super);
    struct dentry *ret = mount_nodev(fs_type, flags, data, fill_super);
    POST_WRAPPER_FUNC(fs_type, flags, data, fill_super);
    kern_printk("mount_nodev returned.\n");
    TRACES_IF_WATCHPOINT(fs_type);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(fs_type)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_disable_percpu_irq
#define APP_WRAPPER_FOR_disable_percpu_irq
#endif
 
#ifndef APP_WRAPPER_FOR_disable_percpu_irq
#define APP_WRAPPER_FOR_disable_percpu_irq
FUNCTION_WRAPPER_VOID(disable_percpu_irq, (unsigned int irq), {
    kern_printk("disable_percpu_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq);
    disable_percpu_irq(irq);
    POST_WRAPPER_FUNC(irq);
    kern_printk("disable_percpu_irq returned.\n");
})
#endif


#ifndef KERN_ADDR_nr_blockdev_pages
#define APP_WRAPPER_FOR_nr_blockdev_pages
#endif
 
#ifndef APP_WRAPPER_FOR_nr_blockdev_pages
#define APP_WRAPPER_FOR_nr_blockdev_pages
FUNCTION_WRAPPER(nr_blockdev_pages, (), {
    kern_printk("nr_blockdev_pages is invoked.\n");
    PRE_WRAPPER_FUNC();
    long ret = nr_blockdev_pages();
    POST_WRAPPER_FUNC();
    kern_printk("nr_blockdev_pages returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_seq_read
#define APP_WRAPPER_FOR_skb_seq_read
#endif
 
#ifndef APP_WRAPPER_FOR_skb_seq_read
#define APP_WRAPPER_FOR_skb_seq_read
FUNCTION_WRAPPER(skb_seq_read, (unsigned int consumed, const u8 **data, struct skb_seq_state *st), {
    WRAP_RECURSIVE(st);
    TRACES_IF_WATCHPOINT(st);
    SCAN_HEAD_FUNC(struct skb_seq_state)(*(TO_UNWATCHED_ADDRESS(st)));
    kern_printk("skb_seq_read is invoked.\n");
    PRE_WRAPPER_FUNC(consumed, data, st);
    int ret = skb_seq_read(consumed, data, st);
    POST_WRAPPER_FUNC(consumed, data, st);
    kern_printk("skb_seq_read returned.\n");
    TRACES_IF_WATCHPOINT(st);
    SCAN_HEAD_FUNC(struct skb_seq_state)(*(TO_UNWATCHED_ADDRESS(st)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_evaluate_object_typed
#define APP_WRAPPER_FOR_acpi_evaluate_object_typed
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_evaluate_object_typed
#define APP_WRAPPER_FOR_acpi_evaluate_object_typed
FUNCTION_WRAPPER(acpi_evaluate_object_typed, (acpi_handle object, acpi_string pathname, struct acpi_object_list *external_params, struct acpi_buffer *return_buffer, acpi_object_type return_type), {
    kern_printk("acpi_evaluate_object_typed is invoked.\n");
    PRE_WRAPPER_FUNC(object, pathname, external_params, return_buffer, return_type);
    acpi_status ret = acpi_evaluate_object_typed(object, pathname, external_params, return_buffer, return_type);
    POST_WRAPPER_FUNC(object, pathname, external_params, return_buffer, return_type);
    kern_printk("acpi_evaluate_object_typed returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_nohz_balance_enter_idle
#define APP_WRAPPER_FOR_nohz_balance_enter_idle
#endif
 
#ifndef APP_WRAPPER_FOR_nohz_balance_enter_idle
#define APP_WRAPPER_FOR_nohz_balance_enter_idle
FUNCTION_WRAPPER_VOID(nohz_balance_enter_idle, (int cpu), {
    kern_printk("nohz_balance_enter_idle is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    nohz_balance_enter_idle(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("nohz_balance_enter_idle returned.\n");
})
#endif


#ifndef KERN_ADDR_ata_sff_queue_work
#define APP_WRAPPER_FOR_ata_sff_queue_work
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_queue_work
#define APP_WRAPPER_FOR_ata_sff_queue_work
FUNCTION_WRAPPER_VOID(ata_sff_queue_work, (struct work_struct *work), {
    WRAP_RECURSIVE(work);
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
    kern_printk("ata_sff_queue_work is invoked.\n");
    PRE_WRAPPER_FUNC(work);
    ata_sff_queue_work(work);
    POST_WRAPPER_FUNC(work);
    kern_printk("ata_sff_queue_work returned.\n");
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
})
#endif


#ifndef KERN_ADDR_blk_rq_map_integrity_sg
#define APP_WRAPPER_FOR_blk_rq_map_integrity_sg
#endif
 
#ifndef APP_WRAPPER_FOR_blk_rq_map_integrity_sg
#define APP_WRAPPER_FOR_blk_rq_map_integrity_sg
FUNCTION_WRAPPER(blk_rq_map_integrity_sg, (struct request_queue *_arg1, struct bio *_arg2, struct scatterlist *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("blk_rq_map_integrity_sg is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = blk_rq_map_integrity_sg(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("blk_rq_map_integrity_sg returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_e820_reserve_resources_late
#define APP_WRAPPER_FOR_e820_reserve_resources_late
#endif
 
#ifndef APP_WRAPPER_FOR_e820_reserve_resources_late
#define APP_WRAPPER_FOR_e820_reserve_resources_late
FUNCTION_WRAPPER_VOID(e820_reserve_resources_late, (), {
    kern_printk("e820_reserve_resources_late is invoked.\n");
    PRE_WRAPPER_FUNC();
    e820_reserve_resources_late();
    POST_WRAPPER_FUNC();
    kern_printk("e820_reserve_resources_late returned.\n");
})
#endif


#ifndef KERN_ADDR__raw_write_unlock_irqrestore
#define APP_WRAPPER_FOR__raw_write_unlock_irqrestore
#endif
 
#ifndef APP_WRAPPER_FOR__raw_write_unlock_irqrestore
#define APP_WRAPPER_FOR__raw_write_unlock_irqrestore
FUNCTION_WRAPPER_VOID(_raw_write_unlock_irqrestore, (rwlock_t *lock, unsigned long flags), {
    kern_printk("_raw_write_unlock_irqrestore is invoked.\n");
    PRE_WRAPPER_FUNC(lock, flags);
    _raw_write_unlock_irqrestore(lock, flags);
    POST_WRAPPER_FUNC(lock, flags);
    kern_printk("_raw_write_unlock_irqrestore returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_install_notify_handler
#define APP_WRAPPER_FOR_acpi_install_notify_handler
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_install_notify_handler
#define APP_WRAPPER_FOR_acpi_install_notify_handler
FUNCTION_WRAPPER(acpi_install_notify_handler, (acpi_handle device, u32 handler_type, acpi_notify_handler handler, void *context), {
    WRAP_FUNCTION(handler);
    kern_printk("acpi_install_notify_handler is invoked.\n");
    PRE_WRAPPER_FUNC(device, handler_type, handler, context);
    acpi_status ret = acpi_install_notify_handler(device, handler_type, handler, context);
    POST_WRAPPER_FUNC(device, handler_type, handler, context);
    kern_printk("acpi_install_notify_handler returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_work_interrupt
#define APP_WRAPPER_FOR_irq_work_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_irq_work_interrupt
#define APP_WRAPPER_FOR_irq_work_interrupt
FUNCTION_WRAPPER_VOID(irq_work_interrupt, (), {
    kern_printk("irq_work_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC();
    irq_work_interrupt();
    POST_WRAPPER_FUNC();
    kern_printk("irq_work_interrupt returned.\n");
})
#endif


#ifndef KERN_ADDR_pm_generic_suspend
#define APP_WRAPPER_FOR_pm_generic_suspend
#endif
 
#ifndef APP_WRAPPER_FOR_pm_generic_suspend
#define APP_WRAPPER_FOR_pm_generic_suspend
FUNCTION_WRAPPER(pm_generic_suspend, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pm_generic_suspend is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pm_generic_suspend(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pm_generic_suspend returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_get_live_table
#define APP_WRAPPER_FOR_dm_get_live_table
#endif
 
#ifndef APP_WRAPPER_FOR_dm_get_live_table
#define APP_WRAPPER_FOR_dm_get_live_table
FUNCTION_WRAPPER(dm_get_live_table, (struct mapped_device *md), {
    kern_printk("dm_get_live_table is invoked.\n");
    PRE_WRAPPER_FUNC(md);
    struct dm_table *ret = dm_get_live_table(md);
    POST_WRAPPER_FUNC(md);
    kern_printk("dm_get_live_table returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_d_make_root
#define APP_WRAPPER_FOR_d_make_root
#endif
 
#ifndef APP_WRAPPER_FOR_d_make_root
#define APP_WRAPPER_FOR_d_make_root
FUNCTION_WRAPPER(d_make_root, (struct inode *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("d_make_root is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct dentry *ret = d_make_root(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("d_make_root returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___hw_addr_flush
#define APP_WRAPPER_FOR___hw_addr_flush
#endif
 
#ifndef APP_WRAPPER_FOR___hw_addr_flush
#define APP_WRAPPER_FOR___hw_addr_flush
FUNCTION_WRAPPER_VOID(__hw_addr_flush, (struct netdev_hw_addr_list *list), {
    kern_printk("__hw_addr_flush is invoked.\n");
    PRE_WRAPPER_FUNC(list);
    __hw_addr_flush(list);
    POST_WRAPPER_FUNC(list);
    kern_printk("__hw_addr_flush returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_bus_unregister_driver
#define APP_WRAPPER_FOR_acpi_bus_unregister_driver
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_bus_unregister_driver
#define APP_WRAPPER_FOR_acpi_bus_unregister_driver
FUNCTION_WRAPPER_VOID(acpi_bus_unregister_driver, (struct acpi_driver *driver), {
    WRAP_RECURSIVE(driver);
    TRACES_IF_WATCHPOINT(driver);
    SCAN_HEAD_FUNC(struct acpi_driver)(*(TO_UNWATCHED_ADDRESS(driver)));
    kern_printk("acpi_bus_unregister_driver is invoked.\n");
    PRE_WRAPPER_FUNC(driver);
    acpi_bus_unregister_driver(driver);
    POST_WRAPPER_FUNC(driver);
    kern_printk("acpi_bus_unregister_driver returned.\n");
    TRACES_IF_WATCHPOINT(driver);
    SCAN_HEAD_FUNC(struct acpi_driver)(*(TO_UNWATCHED_ADDRESS(driver)));
})
#endif


#ifndef KERN_ADDR_generic_mii_ioctl
#define APP_WRAPPER_FOR_generic_mii_ioctl
#endif
 
#ifndef APP_WRAPPER_FOR_generic_mii_ioctl
#define APP_WRAPPER_FOR_generic_mii_ioctl
FUNCTION_WRAPPER(generic_mii_ioctl, (struct mii_if_info *mii_if, struct mii_ioctl_data *mii_data, int cmd, unsigned int *duplex_changed), {
    WRAP_RECURSIVE(mii_if);
    TRACES_IF_WATCHPOINT(mii_if);
    SCAN_HEAD_FUNC(struct mii_if_info)(*(TO_UNWATCHED_ADDRESS(mii_if)));
    kern_printk("generic_mii_ioctl is invoked.\n");
    PRE_WRAPPER_FUNC(mii_if, mii_data, cmd, duplex_changed);
    int ret = generic_mii_ioctl(mii_if, mii_data, cmd, duplex_changed);
    POST_WRAPPER_FUNC(mii_if, mii_data, cmd, duplex_changed);
    kern_printk("generic_mii_ioctl returned.\n");
    TRACES_IF_WATCHPOINT(mii_if);
    SCAN_HEAD_FUNC(struct mii_if_info)(*(TO_UNWATCHED_ADDRESS(mii_if)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_mc_del
#define APP_WRAPPER_FOR_dev_mc_del
#endif
 
#ifndef APP_WRAPPER_FOR_dev_mc_del
#define APP_WRAPPER_FOR_dev_mc_del
FUNCTION_WRAPPER(dev_mc_del, (struct net_device *dev, unsigned const char *addr), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_mc_del is invoked.\n");
    PRE_WRAPPER_FUNC(dev, addr);
    int ret = dev_mc_del(dev, addr);
    POST_WRAPPER_FUNC(dev, addr);
    kern_printk("dev_mc_del returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_is_valid_bugaddr
#define APP_WRAPPER_FOR_is_valid_bugaddr
#endif
 
#ifndef APP_WRAPPER_FOR_is_valid_bugaddr
#define APP_WRAPPER_FOR_is_valid_bugaddr
FUNCTION_WRAPPER(is_valid_bugaddr, (unsigned long addr), {
    kern_printk("is_valid_bugaddr is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    int ret = is_valid_bugaddr(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("is_valid_bugaddr returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_arch_unmap_area
#define APP_WRAPPER_FOR_arch_unmap_area
#endif
 
#ifndef APP_WRAPPER_FOR_arch_unmap_area
#define APP_WRAPPER_FOR_arch_unmap_area
FUNCTION_WRAPPER_VOID(arch_unmap_area, (struct mm_struct *_arg1, unsigned long _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("arch_unmap_area is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    arch_unmap_area(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("arch_unmap_area returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_down_write_trylock
#define APP_WRAPPER_FOR_down_write_trylock
#endif
 
#ifndef APP_WRAPPER_FOR_down_write_trylock
#define APP_WRAPPER_FOR_down_write_trylock
FUNCTION_WRAPPER(down_write_trylock, (struct rw_semaphore *sem), {
    kern_printk("down_write_trylock is invoked.\n");
    PRE_WRAPPER_FUNC(sem);
    int ret = down_write_trylock(sem);
    POST_WRAPPER_FUNC(sem);
    kern_printk("down_write_trylock returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_get_kernel_page
#define APP_WRAPPER_FOR_get_kernel_page
#endif
 
#ifndef APP_WRAPPER_FOR_get_kernel_page
#define APP_WRAPPER_FOR_get_kernel_page
FUNCTION_WRAPPER(get_kernel_page, (unsigned long start, int write, struct page **pages), {
    WRAP_RECURSIVE(pages);
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    kern_printk("get_kernel_page is invoked.\n");
    PRE_WRAPPER_FUNC(start, write, pages);
    int ret = get_kernel_page(start, write, pages);
    POST_WRAPPER_FUNC(start, write, pages);
    kern_printk("get_kernel_page returned.\n");
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    return ret;
})
#endif


#ifndef KERN_ADDR_e820_remove_range
#define APP_WRAPPER_FOR_e820_remove_range
#endif
 
#ifndef APP_WRAPPER_FOR_e820_remove_range
#define APP_WRAPPER_FOR_e820_remove_range
FUNCTION_WRAPPER(e820_remove_range, (u64 start, u64 size, unsigned int old_type, int checktype), {
    kern_printk("e820_remove_range is invoked.\n");
    PRE_WRAPPER_FUNC(start, size, old_type, checktype);
    u64 ret = e820_remove_range(start, size, old_type, checktype);
    POST_WRAPPER_FUNC(start, size, old_type, checktype);
    kern_printk("e820_remove_range returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_unregister_acpi_notifier
#define APP_WRAPPER_FOR_unregister_acpi_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_acpi_notifier
#define APP_WRAPPER_FOR_unregister_acpi_notifier
FUNCTION_WRAPPER(unregister_acpi_notifier, (struct notifier_block *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("unregister_acpi_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = unregister_acpi_notifier(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("unregister_acpi_notifier returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_prepare_to_wait
#define APP_WRAPPER_FOR_prepare_to_wait
#endif
 
#ifndef APP_WRAPPER_FOR_prepare_to_wait
#define APP_WRAPPER_FOR_prepare_to_wait
FUNCTION_WRAPPER_VOID(prepare_to_wait, (wait_queue_head_t *q, wait_queue_t *wait, int state), {
    WRAP_RECURSIVE(wait);
    TRACES_IF_WATCHPOINT(wait);
    SCAN_HEAD_FUNC(wait_queue_t)(*(TO_UNWATCHED_ADDRESS(wait)));
    kern_printk("prepare_to_wait is invoked.\n");
    PRE_WRAPPER_FUNC(q, wait, state);
    prepare_to_wait(q, wait, state);
    POST_WRAPPER_FUNC(q, wait, state);
    kern_printk("prepare_to_wait returned.\n");
    TRACES_IF_WATCHPOINT(wait);
    SCAN_HEAD_FUNC(wait_queue_t)(*(TO_UNWATCHED_ADDRESS(wait)));
})
#endif


#ifndef KERN_ADDR_set_cpu_possible
#define APP_WRAPPER_FOR_set_cpu_possible
#endif
 
#ifndef APP_WRAPPER_FOR_set_cpu_possible
#define APP_WRAPPER_FOR_set_cpu_possible
FUNCTION_WRAPPER_VOID(set_cpu_possible, (unsigned int cpu, bool possible), {
    kern_printk("set_cpu_possible is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, possible);
    set_cpu_possible(cpu, possible);
    POST_WRAPPER_FUNC(cpu, possible);
    kern_printk("set_cpu_possible returned.\n");
})
#endif


#ifndef KERN_ADDR_wmi_has_guid
#define APP_WRAPPER_FOR_wmi_has_guid
#endif
 
#ifndef APP_WRAPPER_FOR_wmi_has_guid
#define APP_WRAPPER_FOR_wmi_has_guid
FUNCTION_WRAPPER(wmi_has_guid, (const char *guid), {
    kern_printk("wmi_has_guid is invoked.\n");
    PRE_WRAPPER_FUNC(guid);
    bool ret = wmi_has_guid(guid);
    POST_WRAPPER_FUNC(guid);
    kern_printk("wmi_has_guid returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_queue_find_tag
#define APP_WRAPPER_FOR_blk_queue_find_tag
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_find_tag
#define APP_WRAPPER_FOR_blk_queue_find_tag
FUNCTION_WRAPPER(blk_queue_find_tag, (struct request_queue *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_queue_find_tag is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct request *ret = blk_queue_find_tag(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_queue_find_tag returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_get_active_super
#define APP_WRAPPER_FOR_get_active_super
#endif
 
#ifndef APP_WRAPPER_FOR_get_active_super
#define APP_WRAPPER_FOR_get_active_super
FUNCTION_WRAPPER(get_active_super, (struct block_device *bdev), {
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    kern_printk("get_active_super is invoked.\n");
    PRE_WRAPPER_FUNC(bdev);
    struct super_block *ret = get_active_super(bdev);
    POST_WRAPPER_FUNC(bdev);
    kern_printk("get_active_super returned.\n");
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_it_real_fn
#define APP_WRAPPER_FOR_it_real_fn
#endif
 
#ifndef APP_WRAPPER_FOR_it_real_fn
#define APP_WRAPPER_FOR_it_real_fn
FUNCTION_WRAPPER(it_real_fn, (struct hrtimer *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct hrtimer)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("it_real_fn is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    enum hrtimer_restart ret = it_real_fn(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("it_real_fn returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct hrtimer)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_apic_is_clustered_box
#define APP_WRAPPER_FOR_apic_is_clustered_box
#endif
 
#ifndef APP_WRAPPER_FOR_apic_is_clustered_box
#define APP_WRAPPER_FOR_apic_is_clustered_box
FUNCTION_WRAPPER(apic_is_clustered_box, (), {
    kern_printk("apic_is_clustered_box is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = apic_is_clustered_box();
    POST_WRAPPER_FUNC();
    kern_printk("apic_is_clustered_box returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_nla_memcpy
#define APP_WRAPPER_FOR_nla_memcpy
#endif
 
#ifndef APP_WRAPPER_FOR_nla_memcpy
#define APP_WRAPPER_FOR_nla_memcpy
FUNCTION_WRAPPER(nla_memcpy, (void *dest, const struct nlattr *src, int count), {
    kern_printk("nla_memcpy is invoked.\n");
    PRE_WRAPPER_FUNC(dest, src, count);
    int ret = nla_memcpy(dest, src, count);
    POST_WRAPPER_FUNC(dest, src, count);
    kern_printk("nla_memcpy returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pm_generic_resume
#define APP_WRAPPER_FOR_pm_generic_resume
#endif
 
#ifndef APP_WRAPPER_FOR_pm_generic_resume
#define APP_WRAPPER_FOR_pm_generic_resume
FUNCTION_WRAPPER(pm_generic_resume, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pm_generic_resume is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pm_generic_resume(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pm_generic_resume returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_clockevents_config
#define APP_WRAPPER_FOR_clockevents_config
#endif
 
#ifndef APP_WRAPPER_FOR_clockevents_config
#define APP_WRAPPER_FOR_clockevents_config
FUNCTION_WRAPPER_VOID(clockevents_config, (struct clock_event_device *dev, u32 freq), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct clock_event_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("clockevents_config is invoked.\n");
    PRE_WRAPPER_FUNC(dev, freq);
    clockevents_config(dev, freq);
    POST_WRAPPER_FUNC(dev, freq);
    kern_printk("clockevents_config returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct clock_event_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_flush_workqueue
#define APP_WRAPPER_FOR_flush_workqueue
#endif
 
#ifndef APP_WRAPPER_FOR_flush_workqueue
#define APP_WRAPPER_FOR_flush_workqueue
FUNCTION_WRAPPER_VOID(flush_workqueue, (struct workqueue_struct *wq), {
    kern_printk("flush_workqueue is invoked.\n");
    PRE_WRAPPER_FUNC(wq);
    flush_workqueue(wq);
    POST_WRAPPER_FUNC(wq);
    kern_printk("flush_workqueue returned.\n");
})
#endif


#ifndef KERN_ADDR_do_trace_rcu_torture_read
#define APP_WRAPPER_FOR_do_trace_rcu_torture_read
#endif
 
#ifndef APP_WRAPPER_FOR_do_trace_rcu_torture_read
#define APP_WRAPPER_FOR_do_trace_rcu_torture_read
FUNCTION_WRAPPER_VOID(do_trace_rcu_torture_read, (char *rcutorturename, struct callback_head *rhp), {
    WRAP_RECURSIVE(rhp);
    TRACES_IF_WATCHPOINT(rhp);
    SCAN_HEAD_FUNC(struct callback_head)(*(TO_UNWATCHED_ADDRESS(rhp)));
    kern_printk("do_trace_rcu_torture_read is invoked.\n");
    PRE_WRAPPER_FUNC(rcutorturename, rhp);
    do_trace_rcu_torture_read(rcutorturename, rhp);
    POST_WRAPPER_FUNC(rcutorturename, rhp);
    kern_printk("do_trace_rcu_torture_read returned.\n");
    TRACES_IF_WATCHPOINT(rhp);
    SCAN_HEAD_FUNC(struct callback_head)(*(TO_UNWATCHED_ADDRESS(rhp)));
})
#endif


#ifndef KERN_ADDR_drain_local_pages
#define APP_WRAPPER_FOR_drain_local_pages
#endif
 
#ifndef APP_WRAPPER_FOR_drain_local_pages
#define APP_WRAPPER_FOR_drain_local_pages
FUNCTION_WRAPPER_VOID(drain_local_pages, (void *dummy), {
    kern_printk("drain_local_pages is invoked.\n");
    PRE_WRAPPER_FUNC(dummy);
    drain_local_pages(dummy);
    POST_WRAPPER_FUNC(dummy);
    kern_printk("drain_local_pages returned.\n");
})
#endif


#ifndef KERN_ADDR_change_protection
#define APP_WRAPPER_FOR_change_protection
#endif
 
#ifndef APP_WRAPPER_FOR_change_protection
#define APP_WRAPPER_FOR_change_protection
FUNCTION_WRAPPER(change_protection, (struct vm_area_struct *vma, unsigned long start, unsigned long end, pgprot_t newprot, int dirty_accountable, int prot_numa), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("change_protection is invoked.\n");
    PRE_WRAPPER_FUNC(vma, start, end, newprot, dirty_accountable, prot_numa);
    long ret = change_protection(vma, start, end, newprot, dirty_accountable, prot_numa);
    POST_WRAPPER_FUNC(vma, start, end, newprot, dirty_accountable, prot_numa);
    kern_printk("change_protection returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pcibios_setup
#define APP_WRAPPER_FOR_pcibios_setup
#endif
 
#ifndef APP_WRAPPER_FOR_pcibios_setup
#define APP_WRAPPER_FOR_pcibios_setup
FUNCTION_WRAPPER(pcibios_setup, (char *str), {
    kern_printk("pcibios_setup is invoked.\n");
    PRE_WRAPPER_FUNC(str);
    char *ret = pcibios_setup(str);
    POST_WRAPPER_FUNC(str);
    kern_printk("pcibios_setup returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_pm_device_sleep_wake
#define APP_WRAPPER_FOR_acpi_pm_device_sleep_wake
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_pm_device_sleep_wake
#define APP_WRAPPER_FOR_acpi_pm_device_sleep_wake
FUNCTION_WRAPPER(acpi_pm_device_sleep_wake, (struct device *_arg1, bool _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("acpi_pm_device_sleep_wake is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = acpi_pm_device_sleep_wake(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("acpi_pm_device_sleep_wake returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_get_timestamp
#define APP_WRAPPER_FOR_sock_get_timestamp
#endif
 
#ifndef APP_WRAPPER_FOR_sock_get_timestamp
#define APP_WRAPPER_FOR_sock_get_timestamp
FUNCTION_WRAPPER(sock_get_timestamp, (struct sock *_arg1, struct timeval *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("sock_get_timestamp is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = sock_get_timestamp(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("sock_get_timestamp returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_rcu_sched_qs
#define APP_WRAPPER_FOR_rcu_sched_qs
#endif
 
#ifndef APP_WRAPPER_FOR_rcu_sched_qs
#define APP_WRAPPER_FOR_rcu_sched_qs
FUNCTION_WRAPPER_VOID(rcu_sched_qs, (int cpu), {
    kern_printk("rcu_sched_qs is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    rcu_sched_qs(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("rcu_sched_qs returned.\n");
})
#endif


#ifndef KERN_ADDR_phy_state_machine
#define APP_WRAPPER_FOR_phy_state_machine
#endif
 
#ifndef APP_WRAPPER_FOR_phy_state_machine
#define APP_WRAPPER_FOR_phy_state_machine
FUNCTION_WRAPPER_VOID(phy_state_machine, (struct work_struct *work), {
    WRAP_RECURSIVE(work);
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
    kern_printk("phy_state_machine is invoked.\n");
    PRE_WRAPPER_FUNC(work);
    phy_state_machine(work);
    POST_WRAPPER_FUNC(work);
    kern_printk("phy_state_machine returned.\n");
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
})
#endif


#ifndef KERN_ADDR___free_memcg_kmem_pages
#define APP_WRAPPER_FOR___free_memcg_kmem_pages
#endif
 
#ifndef APP_WRAPPER_FOR___free_memcg_kmem_pages
#define APP_WRAPPER_FOR___free_memcg_kmem_pages
FUNCTION_WRAPPER_VOID(__free_memcg_kmem_pages, (struct page *page, unsigned int order), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("__free_memcg_kmem_pages is invoked.\n");
    PRE_WRAPPER_FUNC(page, order);
    __free_memcg_kmem_pages(page, order);
    POST_WRAPPER_FUNC(page, order);
    kern_printk("__free_memcg_kmem_pages returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_register_exec_domain
#define APP_WRAPPER_FOR_register_exec_domain
#endif
 
#ifndef APP_WRAPPER_FOR_register_exec_domain
#define APP_WRAPPER_FOR_register_exec_domain
FUNCTION_WRAPPER(register_exec_domain, (struct exec_domain *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct exec_domain)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("register_exec_domain is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = register_exec_domain(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("register_exec_domain returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct exec_domain)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kmem_cache_create
#define APP_WRAPPER_FOR_kmem_cache_create
#endif
 
#ifndef APP_WRAPPER_FOR_kmem_cache_create
#define APP_WRAPPER_FOR_kmem_cache_create
FUNCTION_WRAPPER(kmem_cache_create, (const char *_arg1, size_t _arg2, size_t _arg3, unsigned long _arg4, void (*_arg5)(void *)), {
    WRAP_FUNCTION(_arg5);
    kern_printk("kmem_cache_create is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    struct kmem_cache *ret = kmem_cache_create(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("kmem_cache_create returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_kill_litter_super
#define APP_WRAPPER_FOR_kill_litter_super
#endif
 
#ifndef APP_WRAPPER_FOR_kill_litter_super
#define APP_WRAPPER_FOR_kill_litter_super
FUNCTION_WRAPPER_VOID(kill_litter_super, (struct super_block *sb), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("kill_litter_super is invoked.\n");
    PRE_WRAPPER_FUNC(sb);
    kill_litter_super(sb);
    POST_WRAPPER_FUNC(sb);
    kern_printk("kill_litter_super returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
})
#endif


#ifndef KERN_ADDR_qdisc_alloc
#define APP_WRAPPER_FOR_qdisc_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_qdisc_alloc
#define APP_WRAPPER_FOR_qdisc_alloc
FUNCTION_WRAPPER(qdisc_alloc, (struct netdev_queue *dev_queue, struct Qdisc_ops *ops), {
    WRAP_RECURSIVE(dev_queue);
    TRACES_IF_WATCHPOINT(dev_queue);
    SCAN_HEAD_FUNC(struct netdev_queue)(*(TO_UNWATCHED_ADDRESS(dev_queue)));
    WRAP_RECURSIVE(ops);
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct Qdisc_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    kern_printk("qdisc_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(dev_queue, ops);
    struct Qdisc *ret = qdisc_alloc(dev_queue, ops);
    POST_WRAPPER_FUNC(dev_queue, ops);
    kern_printk("qdisc_alloc returned.\n");
    TRACES_IF_WATCHPOINT(dev_queue);
    SCAN_HEAD_FUNC(struct netdev_queue)(*(TO_UNWATCHED_ADDRESS(dev_queue)));
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct Qdisc_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_idle_task_exit
#define APP_WRAPPER_FOR_idle_task_exit
#endif
 
#ifndef APP_WRAPPER_FOR_idle_task_exit
#define APP_WRAPPER_FOR_idle_task_exit
FUNCTION_WRAPPER_VOID(idle_task_exit, (), {
    kern_printk("idle_task_exit is invoked.\n");
    PRE_WRAPPER_FUNC();
    idle_task_exit();
    POST_WRAPPER_FUNC();
    kern_printk("idle_task_exit returned.\n");
})
#endif


#ifndef KERN_ADDR_zone_reclaimable_pages
#define APP_WRAPPER_FOR_zone_reclaimable_pages
#endif
 
#ifndef APP_WRAPPER_FOR_zone_reclaimable_pages
#define APP_WRAPPER_FOR_zone_reclaimable_pages
FUNCTION_WRAPPER(zone_reclaimable_pages, (struct zone *zone), {
    WRAP_RECURSIVE(zone);
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    kern_printk("zone_reclaimable_pages is invoked.\n");
    PRE_WRAPPER_FUNC(zone);
    long ret = zone_reclaimable_pages(zone);
    POST_WRAPPER_FUNC(zone);
    kern_printk("zone_reclaimable_pages returned.\n");
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    return ret;
})
#endif


#ifndef KERN_ADDR_init_intel_cacheinfo
#define APP_WRAPPER_FOR_init_intel_cacheinfo
#endif
 
#ifndef APP_WRAPPER_FOR_init_intel_cacheinfo
#define APP_WRAPPER_FOR_init_intel_cacheinfo
FUNCTION_WRAPPER(init_intel_cacheinfo, (struct cpuinfo_x86 *c), {
    kern_printk("init_intel_cacheinfo is invoked.\n");
    PRE_WRAPPER_FUNC(c);
    int ret = init_intel_cacheinfo(c);
    POST_WRAPPER_FUNC(c);
    kern_printk("init_intel_cacheinfo returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_init_revoke_caches
#define APP_WRAPPER_FOR_jbd2_journal_init_revoke_caches
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_init_revoke_caches
#define APP_WRAPPER_FOR_jbd2_journal_init_revoke_caches
FUNCTION_WRAPPER(jbd2_journal_init_revoke_caches, (), {
    kern_printk("jbd2_journal_init_revoke_caches is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = jbd2_journal_init_revoke_caches();
    POST_WRAPPER_FUNC();
    kern_printk("jbd2_journal_init_revoke_caches returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_nobh_write_end
#define APP_WRAPPER_FOR_nobh_write_end
#endif
 
#ifndef APP_WRAPPER_FOR_nobh_write_end
#define APP_WRAPPER_FOR_nobh_write_end
FUNCTION_WRAPPER(nobh_write_end, (struct file *_arg1, struct address_space *_arg2, loff_t _arg3, unsigned int _arg4, unsigned int _arg5, struct page *_arg6, void *_arg7), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg6);
    TRACES_IF_WATCHPOINT(_arg6);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg6)));
    kern_printk("nobh_write_end is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
    int ret = nobh_write_end(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
    kern_printk("nobh_write_end returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg6);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg6)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_write_pci_configuration
#define APP_WRAPPER_FOR_acpi_os_write_pci_configuration
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_write_pci_configuration
#define APP_WRAPPER_FOR_acpi_os_write_pci_configuration
FUNCTION_WRAPPER(acpi_os_write_pci_configuration, (struct acpi_pci_id *pci_id, u32 reg, u64 value, u32 width), {
    kern_printk("acpi_os_write_pci_configuration is invoked.\n");
    PRE_WRAPPER_FUNC(pci_id, reg, value, width);
    acpi_status ret = acpi_os_write_pci_configuration(pci_id, reg, value, width);
    POST_WRAPPER_FUNC(pci_id, reg, value, width);
    kern_printk("acpi_os_write_pci_configuration returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_oops_exit
#define APP_WRAPPER_FOR_oops_exit
#endif
 
#ifndef APP_WRAPPER_FOR_oops_exit
#define APP_WRAPPER_FOR_oops_exit
FUNCTION_WRAPPER_VOID(oops_exit, (), {
    kern_printk("oops_exit is invoked.\n");
    PRE_WRAPPER_FUNC();
    oops_exit();
    POST_WRAPPER_FUNC();
    kern_printk("oops_exit returned.\n");
})
#endif


#ifndef KERN_ADDR_num_to_str
#define APP_WRAPPER_FOR_num_to_str
#endif
 
#ifndef APP_WRAPPER_FOR_num_to_str
#define APP_WRAPPER_FOR_num_to_str
FUNCTION_WRAPPER(num_to_str, (char *buf, int size, unsigned long long num), {
    kern_printk("num_to_str is invoked.\n");
    PRE_WRAPPER_FUNC(buf, size, num);
    int ret = num_to_str(buf, size, num);
    POST_WRAPPER_FUNC(buf, size, num);
    kern_printk("num_to_str returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___wake_up_sync_key
#define APP_WRAPPER_FOR___wake_up_sync_key
#endif
 
#ifndef APP_WRAPPER_FOR___wake_up_sync_key
#define APP_WRAPPER_FOR___wake_up_sync_key
FUNCTION_WRAPPER_VOID(__wake_up_sync_key, (wait_queue_head_t *q, unsigned int mode, int nr, void *key), {
    kern_printk("__wake_up_sync_key is invoked.\n");
    PRE_WRAPPER_FUNC(q, mode, nr, key);
    __wake_up_sync_key(q, mode, nr, key);
    POST_WRAPPER_FUNC(q, mode, nr, key);
    kern_printk("__wake_up_sync_key returned.\n");
})
#endif


#ifndef KERN_ADDR_register_filesystem
#define APP_WRAPPER_FOR_register_filesystem
#endif
 
#ifndef APP_WRAPPER_FOR_register_filesystem
#define APP_WRAPPER_FOR_register_filesystem
FUNCTION_WRAPPER(register_filesystem, (struct file_system_type *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("register_filesystem is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = register_filesystem(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("register_filesystem returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_proc_create_data
#define APP_WRAPPER_FOR_proc_create_data
#endif
 
#ifndef APP_WRAPPER_FOR_proc_create_data
#define APP_WRAPPER_FOR_proc_create_data
FUNCTION_WRAPPER(proc_create_data, (const char *name, umode_t mode, struct proc_dir_entry *parent, const struct file_operations *proc_fops, void *data), {
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct proc_dir_entry)(*(TO_UNWATCHED_ADDRESS(parent)));
    WRAP_RECURSIVE(proc_fops);
    TRACES_IF_WATCHPOINT(proc_fops);
    SCAN_HEAD_FUNC(const struct file_operations)(*(TO_UNWATCHED_ADDRESS(proc_fops)));
    kern_printk("proc_create_data is invoked.\n");
    PRE_WRAPPER_FUNC(name, mode, parent, proc_fops, data);
    struct proc_dir_entry *ret = proc_create_data(name, mode, parent, proc_fops, data);
    POST_WRAPPER_FUNC(name, mode, parent, proc_fops, data);
    kern_printk("proc_create_data returned.\n");
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct proc_dir_entry)(*(TO_UNWATCHED_ADDRESS(parent)));
    TRACES_IF_WATCHPOINT(proc_fops);
    SCAN_HEAD_FUNC(const struct file_operations)(*(TO_UNWATCHED_ADDRESS(proc_fops)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_do_utimes
#define APP_WRAPPER_FOR_do_utimes
#endif
 
#ifndef APP_WRAPPER_FOR_do_utimes
#define APP_WRAPPER_FOR_do_utimes
FUNCTION_WRAPPER(do_utimes, (int dfd, const char *filename, struct timespec *times, int flags), {
    kern_printk("do_utimes is invoked.\n");
    PRE_WRAPPER_FUNC(dfd, filename, times, flags);
    long ret = do_utimes(dfd, filename, times, flags);
    POST_WRAPPER_FUNC(dfd, filename, times, flags);
    kern_printk("do_utimes returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_anon_vma_interval_tree_remove
#define APP_WRAPPER_FOR_anon_vma_interval_tree_remove
#endif
 
#ifndef APP_WRAPPER_FOR_anon_vma_interval_tree_remove
#define APP_WRAPPER_FOR_anon_vma_interval_tree_remove
FUNCTION_WRAPPER_VOID(anon_vma_interval_tree_remove, (struct anon_vma_chain *node, struct rb_root *root), {
    kern_printk("anon_vma_interval_tree_remove is invoked.\n");
    PRE_WRAPPER_FUNC(node, root);
    anon_vma_interval_tree_remove(node, root);
    POST_WRAPPER_FUNC(node, root);
    kern_printk("anon_vma_interval_tree_remove returned.\n");
})
#endif


#ifndef KERN_ADDR_sock_no_listen
#define APP_WRAPPER_FOR_sock_no_listen
#endif
 
#ifndef APP_WRAPPER_FOR_sock_no_listen
#define APP_WRAPPER_FOR_sock_no_listen
FUNCTION_WRAPPER(sock_no_listen, (struct socket *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("sock_no_listen is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = sock_no_listen(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("sock_no_listen returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_nla_append
#define APP_WRAPPER_FOR_nla_append
#endif
 
#ifndef APP_WRAPPER_FOR_nla_append
#define APP_WRAPPER_FOR_nla_append
FUNCTION_WRAPPER(nla_append, (struct sk_buff *skb, int attrlen, const void *data), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("nla_append is invoked.\n");
    PRE_WRAPPER_FUNC(skb, attrlen, data);
    int ret = nla_append(skb, attrlen, data);
    POST_WRAPPER_FUNC(skb, attrlen, data);
    kern_printk("nla_append returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_request_region_exclusive
#define APP_WRAPPER_FOR_pci_request_region_exclusive
#endif
 
#ifndef APP_WRAPPER_FOR_pci_request_region_exclusive
#define APP_WRAPPER_FOR_pci_request_region_exclusive
FUNCTION_WRAPPER(pci_request_region_exclusive, (struct pci_dev *_arg1, int _arg2, const char *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("pci_request_region_exclusive is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = pci_request_region_exclusive(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("pci_request_region_exclusive returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_link_abort
#define APP_WRAPPER_FOR_ata_link_abort
#endif
 
#ifndef APP_WRAPPER_FOR_ata_link_abort
#define APP_WRAPPER_FOR_ata_link_abort
FUNCTION_WRAPPER(ata_link_abort, (struct ata_link *link), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    kern_printk("ata_link_abort is invoked.\n");
    PRE_WRAPPER_FUNC(link);
    int ret = ata_link_abort(link);
    POST_WRAPPER_FUNC(link);
    kern_printk("ata_link_abort returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    return ret;
})
#endif


#ifndef KERN_ADDR_task_dirty_inc
#define APP_WRAPPER_FOR_task_dirty_inc
#endif
 
#ifndef APP_WRAPPER_FOR_task_dirty_inc
#define APP_WRAPPER_FOR_task_dirty_inc
FUNCTION_WRAPPER_VOID(task_dirty_inc, (struct task_struct *tsk), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("task_dirty_inc is invoked.\n");
    PRE_WRAPPER_FUNC(tsk);
    task_dirty_inc(tsk);
    POST_WRAPPER_FUNC(tsk);
    kern_printk("task_dirty_inc returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
})
#endif


#ifndef KERN_ADDR_compat_nf_getsockopt
#define APP_WRAPPER_FOR_compat_nf_getsockopt
#endif
 
#ifndef APP_WRAPPER_FOR_compat_nf_getsockopt
#define APP_WRAPPER_FOR_compat_nf_getsockopt
FUNCTION_WRAPPER(compat_nf_getsockopt, (struct sock *sk, u_int8_t pf, int optval, char *opt, int *len), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("compat_nf_getsockopt is invoked.\n");
    PRE_WRAPPER_FUNC(sk, pf, optval, opt, len);
    int ret = compat_nf_getsockopt(sk, pf, optval, opt, len);
    POST_WRAPPER_FUNC(sk, pf, optval, opt, len);
    kern_printk("compat_nf_getsockopt returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bio_integrity_get_tag
#define APP_WRAPPER_FOR_bio_integrity_get_tag
#endif
 
#ifndef APP_WRAPPER_FOR_bio_integrity_get_tag
#define APP_WRAPPER_FOR_bio_integrity_get_tag
FUNCTION_WRAPPER(bio_integrity_get_tag, (struct bio *_arg1, void *_arg2, unsigned int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bio_integrity_get_tag is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = bio_integrity_get_tag(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("bio_integrity_get_tag returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kobject_rename
#define APP_WRAPPER_FOR_kobject_rename
#endif
 
#ifndef APP_WRAPPER_FOR_kobject_rename
#define APP_WRAPPER_FOR_kobject_rename
FUNCTION_WRAPPER(kobject_rename, (struct kobject *_arg1, const char *new_name), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("kobject_rename is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, new_name);
    int ret = kobject_rename(_arg1, new_name);
    POST_WRAPPER_FUNC(_arg1, new_name);
    kern_printk("kobject_rename returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_smp_send_stop
#define APP_WRAPPER_FOR_smp_send_stop
#endif
 
#ifndef APP_WRAPPER_FOR_smp_send_stop
#define APP_WRAPPER_FOR_smp_send_stop
FUNCTION_WRAPPER_VOID(smp_send_stop, (), {
    kern_printk("smp_send_stop is invoked.\n");
    PRE_WRAPPER_FUNC();
    smp_send_stop();
    POST_WRAPPER_FUNC();
    kern_printk("smp_send_stop returned.\n");
})
#endif


#ifndef KERN_ADDR_sprintf
#define APP_WRAPPER_FOR_sprintf
#endif
 
#ifndef APP_WRAPPER_FOR_sprintf
#define APP_WRAPPER_FOR_sprintf
FUNCTION_WRAPPER(sprintf, (char *buf, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    // TODO: variadic arguments
    kern_printk("sprintf is invoked.\n");
    PRE_WRAPPER_FUNC(buf, fmt);
    int ret = sprintf(buf, fmt);
    POST_WRAPPER_FUNC(buf, fmt);
    kern_printk("sprintf returned.\n");
    va_end(args__);
    return ret;
})
#endif


#ifndef KERN_ADDR_inode_init_always
#define APP_WRAPPER_FOR_inode_init_always
#endif
 
#ifndef APP_WRAPPER_FOR_inode_init_always
#define APP_WRAPPER_FOR_inode_init_always
FUNCTION_WRAPPER(inode_init_always, (struct super_block *_arg1, struct inode *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("inode_init_always is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = inode_init_always(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("inode_init_always returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_user_read_config_word
#define APP_WRAPPER_FOR_pci_user_read_config_word
#endif
 
#ifndef APP_WRAPPER_FOR_pci_user_read_config_word
#define APP_WRAPPER_FOR_pci_user_read_config_word
FUNCTION_WRAPPER(pci_user_read_config_word, (struct pci_dev *dev, int where, u16 *val), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_user_read_config_word is invoked.\n");
    PRE_WRAPPER_FUNC(dev, where, val);
    int ret = pci_user_read_config_word(dev, where, val);
    POST_WRAPPER_FUNC(dev, where, val);
    kern_printk("pci_user_read_config_word returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_write_dirty_buffer
#define APP_WRAPPER_FOR_write_dirty_buffer
#endif
 
#ifndef APP_WRAPPER_FOR_write_dirty_buffer
#define APP_WRAPPER_FOR_write_dirty_buffer
FUNCTION_WRAPPER_VOID(write_dirty_buffer, (struct buffer_head *bh, int rw), {
    WRAP_RECURSIVE(bh);
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    kern_printk("write_dirty_buffer is invoked.\n");
    PRE_WRAPPER_FUNC(bh, rw);
    write_dirty_buffer(bh, rw);
    POST_WRAPPER_FUNC(bh, rw);
    kern_printk("write_dirty_buffer returned.\n");
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
})
#endif


#ifndef KERN_ADDR___bad_udelay
#define APP_WRAPPER_FOR___bad_udelay
#endif
 
#ifndef APP_WRAPPER_FOR___bad_udelay
#define APP_WRAPPER_FOR___bad_udelay
FUNCTION_WRAPPER_VOID(__bad_udelay, (), {
    kern_printk("__bad_udelay is invoked.\n");
    PRE_WRAPPER_FUNC();
    __bad_udelay();
    POST_WRAPPER_FUNC();
    kern_printk("__bad_udelay returned.\n");
})
#endif


#ifndef KERN_ADDR_inet_csk_clear_xmit_timers
#define APP_WRAPPER_FOR_inet_csk_clear_xmit_timers
#endif
 
#ifndef APP_WRAPPER_FOR_inet_csk_clear_xmit_timers
#define APP_WRAPPER_FOR_inet_csk_clear_xmit_timers
FUNCTION_WRAPPER_VOID(inet_csk_clear_xmit_timers, (struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("inet_csk_clear_xmit_timers is invoked.\n");
    PRE_WRAPPER_FUNC(sk);
    inet_csk_clear_xmit_timers(sk);
    POST_WRAPPER_FUNC(sk);
    kern_printk("inet_csk_clear_xmit_timers returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR_arch_irq_stat
#define APP_WRAPPER_FOR_arch_irq_stat
#endif
 
#ifndef APP_WRAPPER_FOR_arch_irq_stat
#define APP_WRAPPER_FOR_arch_irq_stat
FUNCTION_WRAPPER(arch_irq_stat, (), {
    kern_printk("arch_irq_stat is invoked.\n");
    PRE_WRAPPER_FUNC();
    u64 ret = arch_irq_stat();
    POST_WRAPPER_FUNC();
    kern_printk("arch_irq_stat returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_fcntl_getlk
#define APP_WRAPPER_FOR_fcntl_getlk
#endif
 
#ifndef APP_WRAPPER_FOR_fcntl_getlk
#define APP_WRAPPER_FOR_fcntl_getlk
FUNCTION_WRAPPER(fcntl_getlk, (struct file *_arg1, struct flock *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("fcntl_getlk is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = fcntl_getlk(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("fcntl_getlk returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_inode_permission
#define APP_WRAPPER_FOR_inode_permission
#endif
 
#ifndef APP_WRAPPER_FOR_inode_permission
#define APP_WRAPPER_FOR_inode_permission
FUNCTION_WRAPPER(inode_permission, (struct inode *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("inode_permission is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = inode_permission(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("inode_permission returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_wmi_install_notify_handler
#define APP_WRAPPER_FOR_wmi_install_notify_handler
#endif
 
#ifndef APP_WRAPPER_FOR_wmi_install_notify_handler
#define APP_WRAPPER_FOR_wmi_install_notify_handler
FUNCTION_WRAPPER(wmi_install_notify_handler, (const char *guid, wmi_notify_handler handler, void *data), {
    WRAP_FUNCTION(handler);
    kern_printk("wmi_install_notify_handler is invoked.\n");
    PRE_WRAPPER_FUNC(guid, handler, data);
    acpi_status ret = wmi_install_notify_handler(guid, handler, data);
    POST_WRAPPER_FUNC(guid, handler, data);
    kern_printk("wmi_install_notify_handler returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_find_next_capability
#define APP_WRAPPER_FOR_pci_find_next_capability
#endif
 
#ifndef APP_WRAPPER_FOR_pci_find_next_capability
#define APP_WRAPPER_FOR_pci_find_next_capability
FUNCTION_WRAPPER(pci_find_next_capability, (struct pci_dev *dev, u8 pos, int cap), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_find_next_capability is invoked.\n");
    PRE_WRAPPER_FUNC(dev, pos, cap);
    int ret = pci_find_next_capability(dev, pos, cap);
    POST_WRAPPER_FUNC(dev, pos, cap);
    kern_printk("pci_find_next_capability returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_match_strlcpy
#define APP_WRAPPER_FOR_match_strlcpy
#endif
 
#ifndef APP_WRAPPER_FOR_match_strlcpy
#define APP_WRAPPER_FOR_match_strlcpy
FUNCTION_WRAPPER(match_strlcpy, (char *_arg1, const substring_t *_arg2, size_t _arg3), {
    kern_printk("match_strlcpy is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    size_t ret = match_strlcpy(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("match_strlcpy returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dquot_disable
#define APP_WRAPPER_FOR_dquot_disable
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_disable
#define APP_WRAPPER_FOR_dquot_disable
FUNCTION_WRAPPER(dquot_disable, (struct super_block *sb, int type, unsigned int flags), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("dquot_disable is invoked.\n");
    PRE_WRAPPER_FUNC(sb, type, flags);
    int ret = dquot_disable(sb, type, flags);
    POST_WRAPPER_FUNC(sb, type, flags);
    kern_printk("dquot_disable returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bitmap_find_next_zero_area
#define APP_WRAPPER_FOR_bitmap_find_next_zero_area
#endif
 
#ifndef APP_WRAPPER_FOR_bitmap_find_next_zero_area
#define APP_WRAPPER_FOR_bitmap_find_next_zero_area
FUNCTION_WRAPPER(bitmap_find_next_zero_area, (unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask), {
    kern_printk("bitmap_find_next_zero_area is invoked.\n");
    PRE_WRAPPER_FUNC(map, size, start, nr, align_mask);
    long ret = bitmap_find_next_zero_area(map, size, start, nr, align_mask);
    POST_WRAPPER_FUNC(map, size, start, nr, align_mask);
    kern_printk("bitmap_find_next_zero_area returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_vwrite
#define APP_WRAPPER_FOR_vwrite
#endif
 
#ifndef APP_WRAPPER_FOR_vwrite
#define APP_WRAPPER_FOR_vwrite
FUNCTION_WRAPPER(vwrite, (char *buf, char *addr, unsigned long count), {
    kern_printk("vwrite is invoked.\n");
    PRE_WRAPPER_FUNC(buf, addr, count);
    long ret = vwrite(buf, addr, count);
    POST_WRAPPER_FUNC(buf, addr, count);
    kern_printk("vwrite returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_vmemmap_populate
#define APP_WRAPPER_FOR_vmemmap_populate
#endif
 
#ifndef APP_WRAPPER_FOR_vmemmap_populate
#define APP_WRAPPER_FOR_vmemmap_populate
FUNCTION_WRAPPER(vmemmap_populate, (struct page *start_page, unsigned long pages, int node), {
    WRAP_RECURSIVE(start_page);
    TRACES_IF_WATCHPOINT(start_page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(start_page)));
    kern_printk("vmemmap_populate is invoked.\n");
    PRE_WRAPPER_FUNC(start_page, pages, node);
    int ret = vmemmap_populate(start_page, pages, node);
    POST_WRAPPER_FUNC(start_page, pages, node);
    kern_printk("vmemmap_populate returned.\n");
    TRACES_IF_WATCHPOINT(start_page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(start_page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_get_task_mm
#define APP_WRAPPER_FOR_get_task_mm
#endif
 
#ifndef APP_WRAPPER_FOR_get_task_mm
#define APP_WRAPPER_FOR_get_task_mm
FUNCTION_WRAPPER(get_task_mm, (struct task_struct *task), {
    WRAP_RECURSIVE(task);
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    kern_printk("get_task_mm is invoked.\n");
    PRE_WRAPPER_FUNC(task);
    struct mm_struct *ret = get_task_mm(task);
    POST_WRAPPER_FUNC(task);
    kern_printk("get_task_mm returned.\n");
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_disable_ioapic_support
#define APP_WRAPPER_FOR_disable_ioapic_support
#endif
 
#ifndef APP_WRAPPER_FOR_disable_ioapic_support
#define APP_WRAPPER_FOR_disable_ioapic_support
FUNCTION_WRAPPER_VOID(disable_ioapic_support, (), {
    kern_printk("disable_ioapic_support is invoked.\n");
    PRE_WRAPPER_FUNC();
    disable_ioapic_support();
    POST_WRAPPER_FUNC();
    kern_printk("disable_ioapic_support returned.\n");
})
#endif


#ifndef KERN_ADDR_strncpy
#define APP_WRAPPER_FOR_strncpy
#endif
 
#ifndef APP_WRAPPER_FOR_strncpy
#define APP_WRAPPER_FOR_strncpy
FUNCTION_WRAPPER(strncpy, (char *_arg1, const char *_arg2, __kernel_size_t _arg3), {
    kern_printk("strncpy is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    char *ret = strncpy(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("strncpy returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_vlan_vids_del_by_dev
#define APP_WRAPPER_FOR_vlan_vids_del_by_dev
#endif
 
#ifndef APP_WRAPPER_FOR_vlan_vids_del_by_dev
#define APP_WRAPPER_FOR_vlan_vids_del_by_dev
FUNCTION_WRAPPER_VOID(vlan_vids_del_by_dev, (struct net_device *dev, const struct net_device *by_dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(by_dev);
    TRACES_IF_WATCHPOINT(by_dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(by_dev)));
    kern_printk("vlan_vids_del_by_dev is invoked.\n");
    PRE_WRAPPER_FUNC(dev, by_dev);
    vlan_vids_del_by_dev(dev, by_dev);
    POST_WRAPPER_FUNC(dev, by_dev);
    kern_printk("vlan_vids_del_by_dev returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(by_dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(by_dev)));
})
#endif


#ifndef KERN_ADDR_synchronize_sched
#define APP_WRAPPER_FOR_synchronize_sched
#endif
 
#ifndef APP_WRAPPER_FOR_synchronize_sched
#define APP_WRAPPER_FOR_synchronize_sched
FUNCTION_WRAPPER_VOID(synchronize_sched, (), {
    kern_printk("synchronize_sched is invoked.\n");
    PRE_WRAPPER_FUNC();
    synchronize_sched();
    POST_WRAPPER_FUNC();
    kern_printk("synchronize_sched returned.\n");
})
#endif


#ifndef KERN_ADDR_crypto_register_alg
#define APP_WRAPPER_FOR_crypto_register_alg
#endif
 
#ifndef APP_WRAPPER_FOR_crypto_register_alg
#define APP_WRAPPER_FOR_crypto_register_alg
FUNCTION_WRAPPER(crypto_register_alg, (struct crypto_alg *alg), {
    WRAP_RECURSIVE(alg);
    TRACES_IF_WATCHPOINT(alg);
    SCAN_HEAD_FUNC(struct crypto_alg)(*(TO_UNWATCHED_ADDRESS(alg)));
    kern_printk("crypto_register_alg is invoked.\n");
    PRE_WRAPPER_FUNC(alg);
    int ret = crypto_register_alg(alg);
    POST_WRAPPER_FUNC(alg);
    kern_printk("crypto_register_alg returned.\n");
    TRACES_IF_WATCHPOINT(alg);
    SCAN_HEAD_FUNC(struct crypto_alg)(*(TO_UNWATCHED_ADDRESS(alg)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sched_create_group
#define APP_WRAPPER_FOR_sched_create_group
#endif
 
#ifndef APP_WRAPPER_FOR_sched_create_group
#define APP_WRAPPER_FOR_sched_create_group
FUNCTION_WRAPPER(sched_create_group, (struct task_group *parent), {
    kern_printk("sched_create_group is invoked.\n");
    PRE_WRAPPER_FUNC(parent);
    struct task_group *ret = sched_create_group(parent);
    POST_WRAPPER_FUNC(parent);
    kern_printk("sched_create_group returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_qtree_read_dquot
#define APP_WRAPPER_FOR_qtree_read_dquot
#endif
 
#ifndef APP_WRAPPER_FOR_qtree_read_dquot
#define APP_WRAPPER_FOR_qtree_read_dquot
FUNCTION_WRAPPER(qtree_read_dquot, (struct qtree_mem_dqinfo *info, struct dquot *dquot), {
    WRAP_RECURSIVE(info);
    TRACES_IF_WATCHPOINT(info);
    SCAN_HEAD_FUNC(struct qtree_mem_dqinfo)(*(TO_UNWATCHED_ADDRESS(info)));
    WRAP_RECURSIVE(dquot);
    TRACES_IF_WATCHPOINT(dquot);
    SCAN_HEAD_FUNC(struct dquot)(*(TO_UNWATCHED_ADDRESS(dquot)));
    kern_printk("qtree_read_dquot is invoked.\n");
    PRE_WRAPPER_FUNC(info, dquot);
    int ret = qtree_read_dquot(info, dquot);
    POST_WRAPPER_FUNC(info, dquot);
    kern_printk("qtree_read_dquot returned.\n");
    TRACES_IF_WATCHPOINT(info);
    SCAN_HEAD_FUNC(struct qtree_mem_dqinfo)(*(TO_UNWATCHED_ADDRESS(info)));
    TRACES_IF_WATCHPOINT(dquot);
    SCAN_HEAD_FUNC(struct dquot)(*(TO_UNWATCHED_ADDRESS(dquot)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sysfs_rename_link
#define APP_WRAPPER_FOR_sysfs_rename_link
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_rename_link
#define APP_WRAPPER_FOR_sysfs_rename_link
FUNCTION_WRAPPER(sysfs_rename_link, (struct kobject *kobj, struct kobject *target, const char *old_name, const char *new_name), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    WRAP_RECURSIVE(target);
    TRACES_IF_WATCHPOINT(target);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(target)));
    kern_printk("sysfs_rename_link is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, target, old_name, new_name);
    int ret = sysfs_rename_link(kobj, target, old_name, new_name);
    POST_WRAPPER_FUNC(kobj, target, old_name, new_name);
    kern_printk("sysfs_rename_link returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    TRACES_IF_WATCHPOINT(target);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(target)));
    return ret;
})
#endif


#ifndef KERN_ADDR_key_link
#define APP_WRAPPER_FOR_key_link
#endif
 
#ifndef APP_WRAPPER_FOR_key_link
#define APP_WRAPPER_FOR_key_link
FUNCTION_WRAPPER(key_link, (struct key *keyring, struct key *key), {
    kern_printk("key_link is invoked.\n");
    PRE_WRAPPER_FUNC(keyring, key);
    int ret = key_link(keyring, key);
    POST_WRAPPER_FUNC(keyring, key);
    kern_printk("key_link returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_free_vm_area
#define APP_WRAPPER_FOR_free_vm_area
#endif
 
#ifndef APP_WRAPPER_FOR_free_vm_area
#define APP_WRAPPER_FOR_free_vm_area
FUNCTION_WRAPPER_VOID(free_vm_area, (struct vm_struct *area), {
    WRAP_RECURSIVE(area);
    TRACES_IF_WATCHPOINT(area);
    SCAN_HEAD_FUNC(struct vm_struct)(*(TO_UNWATCHED_ADDRESS(area)));
    kern_printk("free_vm_area is invoked.\n");
    PRE_WRAPPER_FUNC(area);
    free_vm_area(area);
    POST_WRAPPER_FUNC(area);
    kern_printk("free_vm_area returned.\n");
    TRACES_IF_WATCHPOINT(area);
    SCAN_HEAD_FUNC(struct vm_struct)(*(TO_UNWATCHED_ADDRESS(area)));
})
#endif


#ifndef KERN_ADDR_pci_claim_resource
#define APP_WRAPPER_FOR_pci_claim_resource
#endif
 
#ifndef APP_WRAPPER_FOR_pci_claim_resource
#define APP_WRAPPER_FOR_pci_claim_resource
FUNCTION_WRAPPER(pci_claim_resource, (struct pci_dev *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("pci_claim_resource is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = pci_claim_resource(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("pci_claim_resource returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_bus_size_bridges
#define APP_WRAPPER_FOR_pci_bus_size_bridges
#endif
 
#ifndef APP_WRAPPER_FOR_pci_bus_size_bridges
#define APP_WRAPPER_FOR_pci_bus_size_bridges
FUNCTION_WRAPPER_VOID(pci_bus_size_bridges, (struct pci_bus *bus), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_bus_size_bridges is invoked.\n");
    PRE_WRAPPER_FUNC(bus);
    pci_bus_size_bridges(bus);
    POST_WRAPPER_FUNC(bus);
    kern_printk("pci_bus_size_bridges returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
})
#endif


#ifndef KERN_ADDR_ata_do_set_mode
#define APP_WRAPPER_FOR_ata_do_set_mode
#endif
 
#ifndef APP_WRAPPER_FOR_ata_do_set_mode
#define APP_WRAPPER_FOR_ata_do_set_mode
FUNCTION_WRAPPER(ata_do_set_mode, (struct ata_link *link, struct ata_device **r_failed_dev), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    WRAP_RECURSIVE(r_failed_dev);
    TRACES_IF_WATCHPOINT(r_failed_dev);
    SCAN_HEAD_FUNC(struct ata_device *)(*(TO_UNWATCHED_ADDRESS(r_failed_dev)));
    kern_printk("ata_do_set_mode is invoked.\n");
    PRE_WRAPPER_FUNC(link, r_failed_dev);
    int ret = ata_do_set_mode(link, r_failed_dev);
    POST_WRAPPER_FUNC(link, r_failed_dev);
    kern_printk("ata_do_set_mode returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    TRACES_IF_WATCHPOINT(r_failed_dev);
    SCAN_HEAD_FUNC(struct ata_device *)(*(TO_UNWATCHED_ADDRESS(r_failed_dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_queue_bounce
#define APP_WRAPPER_FOR_blk_queue_bounce
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_bounce
#define APP_WRAPPER_FOR_blk_queue_bounce
FUNCTION_WRAPPER_VOID(blk_queue_bounce, (struct request_queue *q, struct bio **bio), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    WRAP_RECURSIVE(bio);
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio *)(*(TO_UNWATCHED_ADDRESS(bio)));
    kern_printk("blk_queue_bounce is invoked.\n");
    PRE_WRAPPER_FUNC(q, bio);
    blk_queue_bounce(q, bio);
    POST_WRAPPER_FUNC(q, bio);
    kern_printk("blk_queue_bounce returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio *)(*(TO_UNWATCHED_ADDRESS(bio)));
})
#endif


#ifndef KERN_ADDR_flush_signals
#define APP_WRAPPER_FOR_flush_signals
#endif
 
#ifndef APP_WRAPPER_FOR_flush_signals
#define APP_WRAPPER_FOR_flush_signals
FUNCTION_WRAPPER_VOID(flush_signals, (struct task_struct *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("flush_signals is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    flush_signals(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("flush_signals returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_block_read_full_page
#define APP_WRAPPER_FOR_block_read_full_page
#endif
 
#ifndef APP_WRAPPER_FOR_block_read_full_page
#define APP_WRAPPER_FOR_block_read_full_page
FUNCTION_WRAPPER(block_read_full_page, (struct page *_arg1, get_block_t *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_FUNCTION(_arg2);
    kern_printk("block_read_full_page is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = block_read_full_page(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("block_read_full_page returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sas_queuecmd
#define APP_WRAPPER_FOR_ata_sas_queuecmd
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sas_queuecmd
#define APP_WRAPPER_FOR_ata_sas_queuecmd
FUNCTION_WRAPPER(ata_sas_queuecmd, (struct scsi_cmnd *cmd, struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_sas_queuecmd is invoked.\n");
    PRE_WRAPPER_FUNC(cmd, ap);
    int ret = ata_sas_queuecmd(cmd, ap);
    POST_WRAPPER_FUNC(cmd, ap);
    kern_printk("ata_sas_queuecmd returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sched_clock_tick
#define APP_WRAPPER_FOR_sched_clock_tick
#endif
 
#ifndef APP_WRAPPER_FOR_sched_clock_tick
#define APP_WRAPPER_FOR_sched_clock_tick
FUNCTION_WRAPPER_VOID(sched_clock_tick, (), {
    kern_printk("sched_clock_tick is invoked.\n");
    PRE_WRAPPER_FUNC();
    sched_clock_tick();
    POST_WRAPPER_FUNC();
    kern_printk("sched_clock_tick returned.\n");
})
#endif


#ifndef KERN_ADDR_add_range_with_merge
#define APP_WRAPPER_FOR_add_range_with_merge
#endif
 
#ifndef APP_WRAPPER_FOR_add_range_with_merge
#define APP_WRAPPER_FOR_add_range_with_merge
FUNCTION_WRAPPER(add_range_with_merge, (struct range *range, int az, int nr_range, u64 start, u64 end), {
    kern_printk("add_range_with_merge is invoked.\n");
    PRE_WRAPPER_FUNC(range, az, nr_range, start, end);
    int ret = add_range_with_merge(range, az, nr_range, start, end);
    POST_WRAPPER_FUNC(range, az, nr_range, start, end);
    kern_printk("add_range_with_merge returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_user_path_create
#define APP_WRAPPER_FOR_user_path_create
#endif
 
#ifndef APP_WRAPPER_FOR_user_path_create
#define APP_WRAPPER_FOR_user_path_create
FUNCTION_WRAPPER(user_path_create, (int _arg1, const char *_arg2, struct path *_arg3, unsigned int _arg4), {
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("user_path_create is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    struct dentry *ret = user_path_create(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("user_path_create returned.\n");
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_radix_tree_gang_lookup_tag
#define APP_WRAPPER_FOR_radix_tree_gang_lookup_tag
#endif
 
#ifndef APP_WRAPPER_FOR_radix_tree_gang_lookup_tag
#define APP_WRAPPER_FOR_radix_tree_gang_lookup_tag
FUNCTION_WRAPPER(radix_tree_gang_lookup_tag, (struct radix_tree_root *root, void **results, unsigned long first_index, unsigned int max_items, unsigned int tag), {
    kern_printk("radix_tree_gang_lookup_tag is invoked.\n");
    PRE_WRAPPER_FUNC(root, results, first_index, max_items, tag);
    int ret = radix_tree_gang_lookup_tag(root, results, first_index, max_items, tag);
    POST_WRAPPER_FUNC(root, results, first_index, max_items, tag);
    kern_printk("radix_tree_gang_lookup_tag returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ioctl_preallocate
#define APP_WRAPPER_FOR_ioctl_preallocate
#endif
 
#ifndef APP_WRAPPER_FOR_ioctl_preallocate
#define APP_WRAPPER_FOR_ioctl_preallocate
FUNCTION_WRAPPER(ioctl_preallocate, (struct file *filp, void *argp), {
    WRAP_RECURSIVE(filp);
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    kern_printk("ioctl_preallocate is invoked.\n");
    PRE_WRAPPER_FUNC(filp, argp);
    int ret = ioctl_preallocate(filp, argp);
    POST_WRAPPER_FUNC(filp, argp);
    kern_printk("ioctl_preallocate returned.\n");
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kthread_stop
#define APP_WRAPPER_FOR_kthread_stop
#endif
 
#ifndef APP_WRAPPER_FOR_kthread_stop
#define APP_WRAPPER_FOR_kthread_stop
FUNCTION_WRAPPER(kthread_stop, (struct task_struct *k), {
    WRAP_RECURSIVE(k);
    TRACES_IF_WATCHPOINT(k);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(k)));
    kern_printk("kthread_stop is invoked.\n");
    PRE_WRAPPER_FUNC(k);
    int ret = kthread_stop(k);
    POST_WRAPPER_FUNC(k);
    kern_printk("kthread_stop returned.\n");
    TRACES_IF_WATCHPOINT(k);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(k)));
    return ret;
})
#endif


#ifndef KERN_ADDR_wakeup_source_remove
#define APP_WRAPPER_FOR_wakeup_source_remove
#endif
 
#ifndef APP_WRAPPER_FOR_wakeup_source_remove
#define APP_WRAPPER_FOR_wakeup_source_remove
FUNCTION_WRAPPER_VOID(wakeup_source_remove, (struct wakeup_source *ws), {
    WRAP_RECURSIVE(ws);
    TRACES_IF_WATCHPOINT(ws);
    SCAN_HEAD_FUNC(struct wakeup_source)(*(TO_UNWATCHED_ADDRESS(ws)));
    kern_printk("wakeup_source_remove is invoked.\n");
    PRE_WRAPPER_FUNC(ws);
    wakeup_source_remove(ws);
    POST_WRAPPER_FUNC(ws);
    kern_printk("wakeup_source_remove returned.\n");
    TRACES_IF_WATCHPOINT(ws);
    SCAN_HEAD_FUNC(struct wakeup_source)(*(TO_UNWATCHED_ADDRESS(ws)));
})
#endif


#ifndef KERN_ADDR_xen_hvm_need_lapic
#define APP_WRAPPER_FOR_xen_hvm_need_lapic
#endif
 
#ifndef APP_WRAPPER_FOR_xen_hvm_need_lapic
#define APP_WRAPPER_FOR_xen_hvm_need_lapic
FUNCTION_WRAPPER(xen_hvm_need_lapic, (), {
    kern_printk("xen_hvm_need_lapic is invoked.\n");
    PRE_WRAPPER_FUNC();
    bool ret = xen_hvm_need_lapic();
    POST_WRAPPER_FUNC();
    kern_printk("xen_hvm_need_lapic returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sk_set_memalloc
#define APP_WRAPPER_FOR_sk_set_memalloc
#endif
 
#ifndef APP_WRAPPER_FOR_sk_set_memalloc
#define APP_WRAPPER_FOR_sk_set_memalloc
FUNCTION_WRAPPER_VOID(sk_set_memalloc, (struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sk_set_memalloc is invoked.\n");
    PRE_WRAPPER_FUNC(sk);
    sk_set_memalloc(sk);
    POST_WRAPPER_FUNC(sk);
    kern_printk("sk_set_memalloc returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR_blk_stop_queue
#define APP_WRAPPER_FOR_blk_stop_queue
#endif
 
#ifndef APP_WRAPPER_FOR_blk_stop_queue
#define APP_WRAPPER_FOR_blk_stop_queue
FUNCTION_WRAPPER_VOID(blk_stop_queue, (struct request_queue *q), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    kern_printk("blk_stop_queue is invoked.\n");
    PRE_WRAPPER_FUNC(q);
    blk_stop_queue(q);
    POST_WRAPPER_FUNC(q);
    kern_printk("blk_stop_queue returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
})
#endif


#ifndef KERN_ADDR_jbd2_journal_errno
#define APP_WRAPPER_FOR_jbd2_journal_errno
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_errno
#define APP_WRAPPER_FOR_jbd2_journal_errno
FUNCTION_WRAPPER(jbd2_journal_errno, (journal_t *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_errno is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = jbd2_journal_errno(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("jbd2_journal_errno returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR___online_page_increment_counters
#define APP_WRAPPER_FOR___online_page_increment_counters
#endif
 
#ifndef APP_WRAPPER_FOR___online_page_increment_counters
#define APP_WRAPPER_FOR___online_page_increment_counters
FUNCTION_WRAPPER_VOID(__online_page_increment_counters, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("__online_page_increment_counters is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    __online_page_increment_counters(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("__online_page_increment_counters returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_iter_div_u64_rem
#define APP_WRAPPER_FOR_iter_div_u64_rem
#endif
 
#ifndef APP_WRAPPER_FOR_iter_div_u64_rem
#define APP_WRAPPER_FOR_iter_div_u64_rem
FUNCTION_WRAPPER(iter_div_u64_rem, (u64 dividend, u32 divisor, u64 *remainder), {
    kern_printk("iter_div_u64_rem is invoked.\n");
    PRE_WRAPPER_FUNC(dividend, divisor, remainder);
    u32 ret = iter_div_u64_rem(dividend, divisor, remainder);
    POST_WRAPPER_FUNC(dividend, divisor, remainder);
    kern_printk("iter_div_u64_rem returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_bus_read_config_word
#define APP_WRAPPER_FOR_pci_bus_read_config_word
#endif
 
#ifndef APP_WRAPPER_FOR_pci_bus_read_config_word
#define APP_WRAPPER_FOR_pci_bus_read_config_word
FUNCTION_WRAPPER(pci_bus_read_config_word, (struct pci_bus *bus, unsigned int devfn, int where, u16 *val), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_bus_read_config_word is invoked.\n");
    PRE_WRAPPER_FUNC(bus, devfn, where, val);
    int ret = pci_bus_read_config_word(bus, devfn, where, val);
    POST_WRAPPER_FUNC(bus, devfn, where, val);
    kern_printk("pci_bus_read_config_word returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vlan_dev_vlan_id
#define APP_WRAPPER_FOR_vlan_dev_vlan_id
#endif
 
#ifndef APP_WRAPPER_FOR_vlan_dev_vlan_id
#define APP_WRAPPER_FOR_vlan_dev_vlan_id
FUNCTION_WRAPPER(vlan_dev_vlan_id, (const struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("vlan_dev_vlan_id is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    u16 ret = vlan_dev_vlan_id(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("vlan_dev_vlan_id returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_single_open_net
#define APP_WRAPPER_FOR_single_open_net
#endif
 
#ifndef APP_WRAPPER_FOR_single_open_net
#define APP_WRAPPER_FOR_single_open_net
FUNCTION_WRAPPER(single_open_net, (struct inode *_arg1, struct file *file, int (*show)(struct seq_file *, void *)), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    WRAP_FUNCTION(show);
    kern_printk("single_open_net is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, file, show);
    int ret = single_open_net(_arg1, file, show);
    POST_WRAPPER_FUNC(_arg1, file, show);
    kern_printk("single_open_net returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_release_child_resources
#define APP_WRAPPER_FOR_release_child_resources
#endif
 
#ifndef APP_WRAPPER_FOR_release_child_resources
#define APP_WRAPPER_FOR_release_child_resources
FUNCTION_WRAPPER_VOID(release_child_resources, (struct resource *new_), {
    kern_printk("release_child_resources is invoked.\n");
    PRE_WRAPPER_FUNC(new_);
    release_child_resources(new_);
    POST_WRAPPER_FUNC(new_);
    kern_printk("release_child_resources returned.\n");
})
#endif


#ifndef KERN_ADDR_default_mpc_oem_bus_info
#define APP_WRAPPER_FOR_default_mpc_oem_bus_info
#endif
 
#ifndef APP_WRAPPER_FOR_default_mpc_oem_bus_info
#define APP_WRAPPER_FOR_default_mpc_oem_bus_info
FUNCTION_WRAPPER_VOID(default_mpc_oem_bus_info, (struct mpc_bus *m, char *str), {
    kern_printk("default_mpc_oem_bus_info is invoked.\n");
    PRE_WRAPPER_FUNC(m, str);
    default_mpc_oem_bus_info(m, str);
    POST_WRAPPER_FUNC(m, str);
    kern_printk("default_mpc_oem_bus_info returned.\n");
})
#endif


#ifndef KERN_ADDR_clockevents_suspend
#define APP_WRAPPER_FOR_clockevents_suspend
#endif
 
#ifndef APP_WRAPPER_FOR_clockevents_suspend
#define APP_WRAPPER_FOR_clockevents_suspend
FUNCTION_WRAPPER_VOID(clockevents_suspend, (), {
    kern_printk("clockevents_suspend is invoked.\n");
    PRE_WRAPPER_FUNC();
    clockevents_suspend();
    POST_WRAPPER_FUNC();
    kern_printk("clockevents_suspend returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_bus_add
#define APP_WRAPPER_FOR_acpi_bus_add
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_bus_add
#define APP_WRAPPER_FOR_acpi_bus_add
FUNCTION_WRAPPER(acpi_bus_add, (struct acpi_device **child, struct acpi_device *parent, acpi_handle handle, int type), {
    WRAP_RECURSIVE(child);
    TRACES_IF_WATCHPOINT(child);
    SCAN_HEAD_FUNC(struct acpi_device *)(*(TO_UNWATCHED_ADDRESS(child)));
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(parent)));
    kern_printk("acpi_bus_add is invoked.\n");
    PRE_WRAPPER_FUNC(child, parent, handle, type);
    int ret = acpi_bus_add(child, parent, handle, type);
    POST_WRAPPER_FUNC(child, parent, handle, type);
    kern_printk("acpi_bus_add returned.\n");
    TRACES_IF_WATCHPOINT(child);
    SCAN_HEAD_FUNC(struct acpi_device *)(*(TO_UNWATCHED_ADDRESS(child)));
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(parent)));
    return ret;
})
#endif


#ifndef KERN_ADDR___blk_end_request
#define APP_WRAPPER_FOR___blk_end_request
#endif
 
#ifndef APP_WRAPPER_FOR___blk_end_request
#define APP_WRAPPER_FOR___blk_end_request
FUNCTION_WRAPPER(__blk_end_request, (struct request *rq, int error, unsigned int nr_bytes), {
    WRAP_RECURSIVE(rq);
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    kern_printk("__blk_end_request is invoked.\n");
    PRE_WRAPPER_FUNC(rq, error, nr_bytes);
    bool ret = __blk_end_request(rq, error, nr_bytes);
    POST_WRAPPER_FUNC(rq, error, nr_bytes);
    kern_printk("__blk_end_request returned.\n");
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    return ret;
})
#endif


#ifndef KERN_ADDR_netdev_alloc_frag
#define APP_WRAPPER_FOR_netdev_alloc_frag
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_alloc_frag
#define APP_WRAPPER_FOR_netdev_alloc_frag
FUNCTION_WRAPPER(netdev_alloc_frag, (unsigned int fragsz), {
    kern_printk("netdev_alloc_frag is invoked.\n");
    PRE_WRAPPER_FUNC(fragsz);
    void *ret = netdev_alloc_frag(fragsz);
    POST_WRAPPER_FUNC(fragsz);
    kern_printk("netdev_alloc_frag returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dpm_suspend
#define APP_WRAPPER_FOR_dpm_suspend
#endif
 
#ifndef APP_WRAPPER_FOR_dpm_suspend
#define APP_WRAPPER_FOR_dpm_suspend
FUNCTION_WRAPPER(dpm_suspend, (pm_message_t state), {
    kern_printk("dpm_suspend is invoked.\n");
    PRE_WRAPPER_FUNC(state);
    int ret = dpm_suspend(state);
    POST_WRAPPER_FUNC(state);
    kern_printk("dpm_suspend returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_reqsk_queue_alloc
#define APP_WRAPPER_FOR_reqsk_queue_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_reqsk_queue_alloc
#define APP_WRAPPER_FOR_reqsk_queue_alloc
FUNCTION_WRAPPER(reqsk_queue_alloc, (struct request_sock_queue *queue, unsigned int nr_table_entries), {
    WRAP_RECURSIVE(queue);
    TRACES_IF_WATCHPOINT(queue);
    SCAN_HEAD_FUNC(struct request_sock_queue)(*(TO_UNWATCHED_ADDRESS(queue)));
    kern_printk("reqsk_queue_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(queue, nr_table_entries);
    int ret = reqsk_queue_alloc(queue, nr_table_entries);
    POST_WRAPPER_FUNC(queue, nr_table_entries);
    kern_printk("reqsk_queue_alloc returned.\n");
    TRACES_IF_WATCHPOINT(queue);
    SCAN_HEAD_FUNC(struct request_sock_queue)(*(TO_UNWATCHED_ADDRESS(queue)));
    return ret;
})
#endif


#ifndef KERN_ADDR___rtnl_link_register
#define APP_WRAPPER_FOR___rtnl_link_register
#endif
 
#ifndef APP_WRAPPER_FOR___rtnl_link_register
#define APP_WRAPPER_FOR___rtnl_link_register
FUNCTION_WRAPPER(__rtnl_link_register, (struct rtnl_link_ops *ops), {
    WRAP_RECURSIVE(ops);
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct rtnl_link_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    kern_printk("__rtnl_link_register is invoked.\n");
    PRE_WRAPPER_FUNC(ops);
    int ret = __rtnl_link_register(ops);
    POST_WRAPPER_FUNC(ops);
    kern_printk("__rtnl_link_register returned.\n");
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct rtnl_link_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    return ret;
})
#endif


#ifndef KERN_ADDR___bitmap_weight
#define APP_WRAPPER_FOR___bitmap_weight
#endif
 
#ifndef APP_WRAPPER_FOR___bitmap_weight
#define APP_WRAPPER_FOR___bitmap_weight
FUNCTION_WRAPPER(__bitmap_weight, (unsigned const long *bitmap, int bits), {
    kern_printk("__bitmap_weight is invoked.\n");
    PRE_WRAPPER_FUNC(bitmap, bits);
    int ret = __bitmap_weight(bitmap, bits);
    POST_WRAPPER_FUNC(bitmap, bits);
    kern_printk("__bitmap_weight returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_init_extra_mapping_uc
#define APP_WRAPPER_FOR_init_extra_mapping_uc
#endif
 
#ifndef APP_WRAPPER_FOR_init_extra_mapping_uc
#define APP_WRAPPER_FOR_init_extra_mapping_uc
FUNCTION_WRAPPER_VOID(init_extra_mapping_uc, (unsigned long phys, unsigned long size), {
    kern_printk("init_extra_mapping_uc is invoked.\n");
    PRE_WRAPPER_FUNC(phys, size);
    init_extra_mapping_uc(phys, size);
    POST_WRAPPER_FUNC(phys, size);
    kern_printk("init_extra_mapping_uc returned.\n");
})
#endif


#ifndef KERN_ADDR_ioread32_rep
#define APP_WRAPPER_FOR_ioread32_rep
#endif
 
#ifndef APP_WRAPPER_FOR_ioread32_rep
#define APP_WRAPPER_FOR_ioread32_rep
FUNCTION_WRAPPER_VOID(ioread32_rep, (void *port, void *buf, unsigned long count), {
    kern_printk("ioread32_rep is invoked.\n");
    PRE_WRAPPER_FUNC(port, buf, count);
    ioread32_rep(port, buf, count);
    POST_WRAPPER_FUNC(port, buf, count);
    kern_printk("ioread32_rep returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_get_type
#define APP_WRAPPER_FOR_acpi_get_type
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_type
#define APP_WRAPPER_FOR_acpi_get_type
FUNCTION_WRAPPER(acpi_get_type, (acpi_handle object, acpi_object_type *out_type), {
    kern_printk("acpi_get_type is invoked.\n");
    PRE_WRAPPER_FUNC(object, out_type);
    acpi_status ret = acpi_get_type(object, out_type);
    POST_WRAPPER_FUNC(object, out_type);
    kern_printk("acpi_get_type returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_crypto_alloc_aead
#define APP_WRAPPER_FOR_crypto_alloc_aead
#endif
 
#ifndef APP_WRAPPER_FOR_crypto_alloc_aead
#define APP_WRAPPER_FOR_crypto_alloc_aead
FUNCTION_WRAPPER(crypto_alloc_aead, (const char *alg_name, u32 type, u32 mask), {
    kern_printk("crypto_alloc_aead is invoked.\n");
    PRE_WRAPPER_FUNC(alg_name, type, mask);
    struct crypto_aead *ret = crypto_alloc_aead(alg_name, type, mask);
    POST_WRAPPER_FUNC(alg_name, type, mask);
    kern_printk("crypto_alloc_aead returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_warn_slowpath_fmt
#define APP_WRAPPER_FOR_warn_slowpath_fmt
#endif
 
#ifndef APP_WRAPPER_FOR_warn_slowpath_fmt
#define APP_WRAPPER_FOR_warn_slowpath_fmt
FUNCTION_WRAPPER_VOID(warn_slowpath_fmt, (const char *file, const int line, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    // TODO: variadic arguments
    kern_printk("warn_slowpath_fmt is invoked.\n");
    PRE_WRAPPER_FUNC(file, line, fmt);
    warn_slowpath_fmt(file, line, fmt);
    POST_WRAPPER_FUNC(file, line, fmt);
    kern_printk("warn_slowpath_fmt returned.\n");
    va_end(args__);
})
#endif


#ifndef KERN_ADDR_pci_check_and_unmask_intx
#define APP_WRAPPER_FOR_pci_check_and_unmask_intx
#endif
 
#ifndef APP_WRAPPER_FOR_pci_check_and_unmask_intx
#define APP_WRAPPER_FOR_pci_check_and_unmask_intx
FUNCTION_WRAPPER(pci_check_and_unmask_intx, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_check_and_unmask_intx is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    bool ret = pci_check_and_unmask_intx(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_check_and_unmask_intx returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_d_rehash
#define APP_WRAPPER_FOR_d_rehash
#endif
 
#ifndef APP_WRAPPER_FOR_d_rehash
#define APP_WRAPPER_FOR_d_rehash
FUNCTION_WRAPPER_VOID(d_rehash, (struct dentry *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("d_rehash is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    d_rehash(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("d_rehash returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_rb_replace_node
#define APP_WRAPPER_FOR_rb_replace_node
#endif
 
#ifndef APP_WRAPPER_FOR_rb_replace_node
#define APP_WRAPPER_FOR_rb_replace_node
FUNCTION_WRAPPER_VOID(rb_replace_node, (struct rb_node *victim, struct rb_node *new_, struct rb_root *root), {
    kern_printk("rb_replace_node is invoked.\n");
    PRE_WRAPPER_FUNC(victim, new_, root);
    rb_replace_node(victim, new_, root);
    POST_WRAPPER_FUNC(victim, new_, root);
    kern_printk("rb_replace_node returned.\n");
})
#endif


#ifndef KERN_ADDR__raw_write_lock
#define APP_WRAPPER_FOR__raw_write_lock
#endif
 
#ifndef APP_WRAPPER_FOR__raw_write_lock
#define APP_WRAPPER_FOR__raw_write_lock
FUNCTION_WRAPPER_VOID(_raw_write_lock, (rwlock_t *lock), {
    kern_printk("_raw_write_lock is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    _raw_write_lock(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("_raw_write_lock returned.\n");
})
#endif


#ifndef KERN_ADDR_find_first_bit
#define APP_WRAPPER_FOR_find_first_bit
#endif
 
#ifndef APP_WRAPPER_FOR_find_first_bit
#define APP_WRAPPER_FOR_find_first_bit
FUNCTION_WRAPPER(find_first_bit, (unsigned const long *addr, unsigned long size), {
    kern_printk("find_first_bit is invoked.\n");
    PRE_WRAPPER_FUNC(addr, size);
    long ret = find_first_bit(addr, size);
    POST_WRAPPER_FUNC(addr, size);
    kern_printk("find_first_bit returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_xattr_cmp
#define APP_WRAPPER_FOR_vfs_xattr_cmp
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_xattr_cmp
#define APP_WRAPPER_FOR_vfs_xattr_cmp
FUNCTION_WRAPPER(vfs_xattr_cmp, (struct dentry *dentry, const char *xattr_name, const char *value, size_t size, gfp_t flags), {
    WRAP_RECURSIVE(dentry);
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    kern_printk("vfs_xattr_cmp is invoked.\n");
    PRE_WRAPPER_FUNC(dentry, xattr_name, value, size, flags);
    int ret = vfs_xattr_cmp(dentry, xattr_name, value, size, flags);
    POST_WRAPPER_FUNC(dentry, xattr_name, value, size, flags);
    kern_printk("vfs_xattr_cmp returned.\n");
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_ioremap_bar
#define APP_WRAPPER_FOR_pci_ioremap_bar
#endif
 
#ifndef APP_WRAPPER_FOR_pci_ioremap_bar
#define APP_WRAPPER_FOR_pci_ioremap_bar
FUNCTION_WRAPPER(pci_ioremap_bar, (struct pci_dev *pdev, int bar), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("pci_ioremap_bar is invoked.\n");
    PRE_WRAPPER_FUNC(pdev, bar);
    void *ret = pci_ioremap_bar(pdev, bar);
    POST_WRAPPER_FUNC(pdev, bar);
    kern_printk("pci_ioremap_bar returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_try_to_release_page
#define APP_WRAPPER_FOR_try_to_release_page
#endif
 
#ifndef APP_WRAPPER_FOR_try_to_release_page
#define APP_WRAPPER_FOR_try_to_release_page
FUNCTION_WRAPPER(try_to_release_page, (struct page *page, gfp_t gfp_mask), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("try_to_release_page is invoked.\n");
    PRE_WRAPPER_FUNC(page, gfp_mask);
    int ret = try_to_release_page(page, gfp_mask);
    POST_WRAPPER_FUNC(page, gfp_mask);
    kern_printk("try_to_release_page returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dynamic_dname
#define APP_WRAPPER_FOR_dynamic_dname
#endif
 
#ifndef APP_WRAPPER_FOR_dynamic_dname
#define APP_WRAPPER_FOR_dynamic_dname
FUNCTION_WRAPPER(dynamic_dname, (struct dentry *_arg1, char *_arg2, int _arg3, const char *_arg4, ...), {
    va_list args__;
    va_start(args__, _arg4);
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    // TODO: variadic arguments
    kern_printk("dynamic_dname is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    char *ret = dynamic_dname(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("dynamic_dname returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_nf_register_sockopt
#define APP_WRAPPER_FOR_nf_register_sockopt
#endif
 
#ifndef APP_WRAPPER_FOR_nf_register_sockopt
#define APP_WRAPPER_FOR_nf_register_sockopt
FUNCTION_WRAPPER(nf_register_sockopt, (struct nf_sockopt_ops *reg), {
    WRAP_RECURSIVE(reg);
    TRACES_IF_WATCHPOINT(reg);
    SCAN_HEAD_FUNC(struct nf_sockopt_ops)(*(TO_UNWATCHED_ADDRESS(reg)));
    kern_printk("nf_register_sockopt is invoked.\n");
    PRE_WRAPPER_FUNC(reg);
    int ret = nf_register_sockopt(reg);
    POST_WRAPPER_FUNC(reg);
    kern_printk("nf_register_sockopt returned.\n");
    TRACES_IF_WATCHPOINT(reg);
    SCAN_HEAD_FUNC(struct nf_sockopt_ops)(*(TO_UNWATCHED_ADDRESS(reg)));
    return ret;
})
#endif


#ifndef KERN_ADDR_e820_all_mapped
#define APP_WRAPPER_FOR_e820_all_mapped
#endif
 
#ifndef APP_WRAPPER_FOR_e820_all_mapped
#define APP_WRAPPER_FOR_e820_all_mapped
FUNCTION_WRAPPER(e820_all_mapped, (u64 start, u64 end, unsigned int type), {
    kern_printk("e820_all_mapped is invoked.\n");
    PRE_WRAPPER_FUNC(start, end, type);
    int ret = e820_all_mapped(start, end, type);
    POST_WRAPPER_FUNC(start, end, type);
    kern_printk("e820_all_mapped returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___jbd2_journal_insert_checkpoint
#define APP_WRAPPER_FOR___jbd2_journal_insert_checkpoint
#endif
 
#ifndef APP_WRAPPER_FOR___jbd2_journal_insert_checkpoint
#define APP_WRAPPER_FOR___jbd2_journal_insert_checkpoint
FUNCTION_WRAPPER_VOID(__jbd2_journal_insert_checkpoint, (struct journal_head *_arg1, transaction_t *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(transaction_t)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("__jbd2_journal_insert_checkpoint is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    __jbd2_journal_insert_checkpoint(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("__jbd2_journal_insert_checkpoint returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(transaction_t)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_idr_get_next
#define APP_WRAPPER_FOR_idr_get_next
#endif
 
#ifndef APP_WRAPPER_FOR_idr_get_next
#define APP_WRAPPER_FOR_idr_get_next
FUNCTION_WRAPPER(idr_get_next, (struct idr *idp, int *nextid), {
    WRAP_RECURSIVE(idp);
    TRACES_IF_WATCHPOINT(idp);
    SCAN_HEAD_FUNC(struct idr)(*(TO_UNWATCHED_ADDRESS(idp)));
    kern_printk("idr_get_next is invoked.\n");
    PRE_WRAPPER_FUNC(idp, nextid);
    void *ret = idr_get_next(idp, nextid);
    POST_WRAPPER_FUNC(idp, nextid);
    kern_printk("idr_get_next returned.\n");
    TRACES_IF_WATCHPOINT(idp);
    SCAN_HEAD_FUNC(struct idr)(*(TO_UNWATCHED_ADDRESS(idp)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_xtime_update
#define APP_WRAPPER_FOR_xtime_update
#endif
 
#ifndef APP_WRAPPER_FOR_xtime_update
#define APP_WRAPPER_FOR_xtime_update
FUNCTION_WRAPPER_VOID(xtime_update, (unsigned long ticks), {
    kern_printk("xtime_update is invoked.\n");
    PRE_WRAPPER_FUNC(ticks);
    xtime_update(ticks);
    POST_WRAPPER_FUNC(ticks);
    kern_printk("xtime_update returned.\n");
})
#endif


#ifndef KERN_ADDR_wakeup_source_drop
#define APP_WRAPPER_FOR_wakeup_source_drop
#endif
 
#ifndef APP_WRAPPER_FOR_wakeup_source_drop
#define APP_WRAPPER_FOR_wakeup_source_drop
FUNCTION_WRAPPER_VOID(wakeup_source_drop, (struct wakeup_source *ws), {
    WRAP_RECURSIVE(ws);
    TRACES_IF_WATCHPOINT(ws);
    SCAN_HEAD_FUNC(struct wakeup_source)(*(TO_UNWATCHED_ADDRESS(ws)));
    kern_printk("wakeup_source_drop is invoked.\n");
    PRE_WRAPPER_FUNC(ws);
    wakeup_source_drop(ws);
    POST_WRAPPER_FUNC(ws);
    kern_printk("wakeup_source_drop returned.\n");
    TRACES_IF_WATCHPOINT(ws);
    SCAN_HEAD_FUNC(struct wakeup_source)(*(TO_UNWATCHED_ADDRESS(ws)));
})
#endif


#ifndef KERN_ADDR_swiotlb_map_sg
#define APP_WRAPPER_FOR_swiotlb_map_sg
#endif
 
#ifndef APP_WRAPPER_FOR_swiotlb_map_sg
#define APP_WRAPPER_FOR_swiotlb_map_sg
FUNCTION_WRAPPER(swiotlb_map_sg, (struct device *hwdev, struct scatterlist *sg, int nents, enum dma_data_direction dir), {
    WRAP_RECURSIVE(hwdev);
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
    kern_printk("swiotlb_map_sg is invoked.\n");
    PRE_WRAPPER_FUNC(hwdev, sg, nents, dir);
    int ret = swiotlb_map_sg(hwdev, sg, nents, dir);
    POST_WRAPPER_FUNC(hwdev, sg, nents, dir);
    kern_printk("swiotlb_map_sg returned.\n");
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_remove_wait_queue
#define APP_WRAPPER_FOR_remove_wait_queue
#endif
 
#ifndef APP_WRAPPER_FOR_remove_wait_queue
#define APP_WRAPPER_FOR_remove_wait_queue
FUNCTION_WRAPPER_VOID(remove_wait_queue, (wait_queue_head_t *q, wait_queue_t *wait), {
    WRAP_RECURSIVE(wait);
    TRACES_IF_WATCHPOINT(wait);
    SCAN_HEAD_FUNC(wait_queue_t)(*(TO_UNWATCHED_ADDRESS(wait)));
    kern_printk("remove_wait_queue is invoked.\n");
    PRE_WRAPPER_FUNC(q, wait);
    remove_wait_queue(q, wait);
    POST_WRAPPER_FUNC(q, wait);
    kern_printk("remove_wait_queue returned.\n");
    TRACES_IF_WATCHPOINT(wait);
    SCAN_HEAD_FUNC(wait_queue_t)(*(TO_UNWATCHED_ADDRESS(wait)));
})
#endif


#ifndef KERN_ADDR_gnet_stats_copy_basic
#define APP_WRAPPER_FOR_gnet_stats_copy_basic
#endif
 
#ifndef APP_WRAPPER_FOR_gnet_stats_copy_basic
#define APP_WRAPPER_FOR_gnet_stats_copy_basic
FUNCTION_WRAPPER(gnet_stats_copy_basic, (struct gnet_dump *d, struct gnet_stats_basic_packed *b), {
    WRAP_RECURSIVE(d);
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct gnet_dump)(*(TO_UNWATCHED_ADDRESS(d)));
    kern_printk("gnet_stats_copy_basic is invoked.\n");
    PRE_WRAPPER_FUNC(d, b);
    int ret = gnet_stats_copy_basic(d, b);
    POST_WRAPPER_FUNC(d, b);
    kern_printk("gnet_stats_copy_basic returned.\n");
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct gnet_dump)(*(TO_UNWATCHED_ADDRESS(d)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pnp_stop_dev
#define APP_WRAPPER_FOR_pnp_stop_dev
#endif
 
#ifndef APP_WRAPPER_FOR_pnp_stop_dev
#define APP_WRAPPER_FOR_pnp_stop_dev
FUNCTION_WRAPPER(pnp_stop_dev, (struct pnp_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pnp_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pnp_stop_dev is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pnp_stop_dev(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pnp_stop_dev returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pnp_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dpm_for_each_dev
#define APP_WRAPPER_FOR_dpm_for_each_dev
#endif
 
#ifndef APP_WRAPPER_FOR_dpm_for_each_dev
#define APP_WRAPPER_FOR_dpm_for_each_dev
FUNCTION_WRAPPER_VOID(dpm_for_each_dev, (void *data, void (*fn)(struct device *, void *)), {
    WRAP_FUNCTION(fn);
    kern_printk("dpm_for_each_dev is invoked.\n");
    PRE_WRAPPER_FUNC(data, fn);
    dpm_for_each_dev(data, fn);
    POST_WRAPPER_FUNC(data, fn);
    kern_printk("dpm_for_each_dev returned.\n");
})
#endif


#ifndef KERN_ADDR_sock_alloc_send_pskb
#define APP_WRAPPER_FOR_sock_alloc_send_pskb
#endif
 
#ifndef APP_WRAPPER_FOR_sock_alloc_send_pskb
#define APP_WRAPPER_FOR_sock_alloc_send_pskb
FUNCTION_WRAPPER(sock_alloc_send_pskb, (struct sock *sk, unsigned long header_len, unsigned long data_len, int noblock, int *errcode), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sock_alloc_send_pskb is invoked.\n");
    PRE_WRAPPER_FUNC(sk, header_len, data_len, noblock, errcode);
    struct sk_buff *ret = sock_alloc_send_pskb(sk, header_len, data_len, noblock, errcode);
    POST_WRAPPER_FUNC(sk, header_len, data_len, noblock, errcode);
    kern_printk("sock_alloc_send_pskb returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_tasklet_init
#define APP_WRAPPER_FOR_tasklet_init
#endif
 
#ifndef APP_WRAPPER_FOR_tasklet_init
#define APP_WRAPPER_FOR_tasklet_init
FUNCTION_WRAPPER_VOID(tasklet_init, (struct tasklet_struct *t, void (*func)(unsigned long), unsigned long data), {
    WRAP_RECURSIVE(t);
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct tasklet_struct)(*(TO_UNWATCHED_ADDRESS(t)));
    WRAP_FUNCTION(func);
    kern_printk("tasklet_init is invoked.\n");
    PRE_WRAPPER_FUNC(t, func, data);
    tasklet_init(t, func, data);
    POST_WRAPPER_FUNC(t, func, data);
    kern_printk("tasklet_init returned.\n");
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct tasklet_struct)(*(TO_UNWATCHED_ADDRESS(t)));
})
#endif


#ifndef KERN_ADDR_pci_dev_specific_acs_enabled
#define APP_WRAPPER_FOR_pci_dev_specific_acs_enabled
#endif
 
#ifndef APP_WRAPPER_FOR_pci_dev_specific_acs_enabled
#define APP_WRAPPER_FOR_pci_dev_specific_acs_enabled
FUNCTION_WRAPPER(pci_dev_specific_acs_enabled, (struct pci_dev *dev, u16 acs_flags), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_dev_specific_acs_enabled is invoked.\n");
    PRE_WRAPPER_FUNC(dev, acs_flags);
    int ret = pci_dev_specific_acs_enabled(dev, acs_flags);
    POST_WRAPPER_FUNC(dev, acs_flags);
    kern_printk("pci_dev_specific_acs_enabled returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_profile_setup
#define APP_WRAPPER_FOR_profile_setup
#endif
 
#ifndef APP_WRAPPER_FOR_profile_setup
#define APP_WRAPPER_FOR_profile_setup
FUNCTION_WRAPPER(profile_setup, (char *str), {
    kern_printk("profile_setup is invoked.\n");
    PRE_WRAPPER_FUNC(str);
    int ret = profile_setup(str);
    POST_WRAPPER_FUNC(str);
    kern_printk("profile_setup returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_create_irq
#define APP_WRAPPER_FOR_create_irq
#endif
 
#ifndef APP_WRAPPER_FOR_create_irq
#define APP_WRAPPER_FOR_create_irq
FUNCTION_WRAPPER(create_irq, (), {
    kern_printk("create_irq is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = create_irq();
    POST_WRAPPER_FUNC();
    kern_printk("create_irq returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_device_initialize
#define APP_WRAPPER_FOR_device_initialize
#endif
 
#ifndef APP_WRAPPER_FOR_device_initialize
#define APP_WRAPPER_FOR_device_initialize
FUNCTION_WRAPPER_VOID(device_initialize, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("device_initialize is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    device_initialize(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("device_initialize returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_skb_prepare_seq_read
#define APP_WRAPPER_FOR_skb_prepare_seq_read
#endif
 
#ifndef APP_WRAPPER_FOR_skb_prepare_seq_read
#define APP_WRAPPER_FOR_skb_prepare_seq_read
FUNCTION_WRAPPER_VOID(skb_prepare_seq_read, (struct sk_buff *skb, unsigned int from, unsigned int to, struct skb_seq_state *st), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_RECURSIVE(st);
    TRACES_IF_WATCHPOINT(st);
    SCAN_HEAD_FUNC(struct skb_seq_state)(*(TO_UNWATCHED_ADDRESS(st)));
    kern_printk("skb_prepare_seq_read is invoked.\n");
    PRE_WRAPPER_FUNC(skb, from, to, st);
    skb_prepare_seq_read(skb, from, to, st);
    POST_WRAPPER_FUNC(skb, from, to, st);
    kern_printk("skb_prepare_seq_read returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    TRACES_IF_WATCHPOINT(st);
    SCAN_HEAD_FUNC(struct skb_seq_state)(*(TO_UNWATCHED_ADDRESS(st)));
})
#endif


#ifndef KERN_ADDR_strncmp
#define APP_WRAPPER_FOR_strncmp
#endif
 
#ifndef APP_WRAPPER_FOR_strncmp
#define APP_WRAPPER_FOR_strncmp
FUNCTION_WRAPPER(strncmp, (const char *_arg1, const char *_arg2, __kernel_size_t _arg3), {
    kern_printk("strncmp is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = strncmp(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("strncmp returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_on_each_cpu_mask
#define APP_WRAPPER_FOR_on_each_cpu_mask
#endif
 
#ifndef APP_WRAPPER_FOR_on_each_cpu_mask
#define APP_WRAPPER_FOR_on_each_cpu_mask
FUNCTION_WRAPPER_VOID(on_each_cpu_mask, (const struct cpumask *mask, smp_call_func_t func, void *info, bool wait), {
    WRAP_FUNCTION(func);
    kern_printk("on_each_cpu_mask is invoked.\n");
    PRE_WRAPPER_FUNC(mask, func, info, wait);
    on_each_cpu_mask(mask, func, info, wait);
    POST_WRAPPER_FUNC(mask, func, info, wait);
    kern_printk("on_each_cpu_mask returned.\n");
})
#endif


#ifndef KERN_ADDR_strcat
#define APP_WRAPPER_FOR_strcat
#endif
 
#ifndef APP_WRAPPER_FOR_strcat
#define APP_WRAPPER_FOR_strcat
FUNCTION_WRAPPER(strcat, (char *_arg1, const char *_arg2), {
    kern_printk("strcat is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    char *ret = strcat(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("strcat returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sysrq_timer_list_show
#define APP_WRAPPER_FOR_sysrq_timer_list_show
#endif
 
#ifndef APP_WRAPPER_FOR_sysrq_timer_list_show
#define APP_WRAPPER_FOR_sysrq_timer_list_show
FUNCTION_WRAPPER_VOID(sysrq_timer_list_show, (), {
    kern_printk("sysrq_timer_list_show is invoked.\n");
    PRE_WRAPPER_FUNC();
    sysrq_timer_list_show();
    POST_WRAPPER_FUNC();
    kern_printk("sysrq_timer_list_show returned.\n");
})
#endif


#ifndef KERN_ADDR_native_patch
#define APP_WRAPPER_FOR_native_patch
#endif
 
#ifndef APP_WRAPPER_FOR_native_patch
#define APP_WRAPPER_FOR_native_patch
FUNCTION_WRAPPER(native_patch, (u8 type, u16 clobbers, void *ibuf, unsigned long addr, unsigned int len), {
    kern_printk("native_patch is invoked.\n");
    PRE_WRAPPER_FUNC(type, clobbers, ibuf, addr, len);
    int ret = native_patch(type, clobbers, ibuf, addr, len);
    POST_WRAPPER_FUNC(type, clobbers, ibuf, addr, len);
    kern_printk("native_patch returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___jbd2_log_wait_for_space
#define APP_WRAPPER_FOR___jbd2_log_wait_for_space
#endif
 
#ifndef APP_WRAPPER_FOR___jbd2_log_wait_for_space
#define APP_WRAPPER_FOR___jbd2_log_wait_for_space
FUNCTION_WRAPPER_VOID(__jbd2_log_wait_for_space, (journal_t *journal), {
    WRAP_RECURSIVE(journal);
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    kern_printk("__jbd2_log_wait_for_space is invoked.\n");
    PRE_WRAPPER_FUNC(journal);
    __jbd2_log_wait_for_space(journal);
    POST_WRAPPER_FUNC(journal);
    kern_printk("__jbd2_log_wait_for_space returned.\n");
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
})
#endif


#ifndef KERN_ADDR_tick_is_oneshot_available
#define APP_WRAPPER_FOR_tick_is_oneshot_available
#endif
 
#ifndef APP_WRAPPER_FOR_tick_is_oneshot_available
#define APP_WRAPPER_FOR_tick_is_oneshot_available
FUNCTION_WRAPPER(tick_is_oneshot_available, (), {
    kern_printk("tick_is_oneshot_available is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = tick_is_oneshot_available();
    POST_WRAPPER_FUNC();
    kern_printk("tick_is_oneshot_available returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_mempool_destroy
#define APP_WRAPPER_FOR_mempool_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_mempool_destroy
#define APP_WRAPPER_FOR_mempool_destroy
FUNCTION_WRAPPER_VOID(mempool_destroy, (mempool_t *pool), {
    WRAP_RECURSIVE(pool);
    TRACES_IF_WATCHPOINT(pool);
    SCAN_HEAD_FUNC(mempool_t)(*(TO_UNWATCHED_ADDRESS(pool)));
    kern_printk("mempool_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(pool);
    mempool_destroy(pool);
    POST_WRAPPER_FUNC(pool);
    kern_printk("mempool_destroy returned.\n");
    TRACES_IF_WATCHPOINT(pool);
    SCAN_HEAD_FUNC(mempool_t)(*(TO_UNWATCHED_ADDRESS(pool)));
})
#endif


#ifndef KERN_ADDR___task_pid_nr_ns
#define APP_WRAPPER_FOR___task_pid_nr_ns
#endif
 
#ifndef APP_WRAPPER_FOR___task_pid_nr_ns
#define APP_WRAPPER_FOR___task_pid_nr_ns
FUNCTION_WRAPPER(__task_pid_nr_ns, (struct task_struct *task, enum pid_type type, struct pid_namespace *ns), {
    WRAP_RECURSIVE(task);
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    kern_printk("__task_pid_nr_ns is invoked.\n");
    PRE_WRAPPER_FUNC(task, type, ns);
    pid_t ret = __task_pid_nr_ns(task, type, ns);
    POST_WRAPPER_FUNC(task, type, ns);
    kern_printk("__task_pid_nr_ns returned.\n");
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mprotect_fixup
#define APP_WRAPPER_FOR_mprotect_fixup
#endif
 
#ifndef APP_WRAPPER_FOR_mprotect_fixup
#define APP_WRAPPER_FOR_mprotect_fixup
FUNCTION_WRAPPER(mprotect_fixup, (struct vm_area_struct *vma, struct vm_area_struct **pprev, unsigned long start, unsigned long end, unsigned long newflags), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    WRAP_RECURSIVE(pprev);
    TRACES_IF_WATCHPOINT(pprev);
    SCAN_HEAD_FUNC(struct vm_area_struct *)(*(TO_UNWATCHED_ADDRESS(pprev)));
    kern_printk("mprotect_fixup is invoked.\n");
    PRE_WRAPPER_FUNC(vma, pprev, start, end, newflags);
    int ret = mprotect_fixup(vma, pprev, start, end, newflags);
    POST_WRAPPER_FUNC(vma, pprev, start, end, newflags);
    kern_printk("mprotect_fixup returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    TRACES_IF_WATCHPOINT(pprev);
    SCAN_HEAD_FUNC(struct vm_area_struct *)(*(TO_UNWATCHED_ADDRESS(pprev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_csk_addr2sockaddr
#define APP_WRAPPER_FOR_inet_csk_addr2sockaddr
#endif
 
#ifndef APP_WRAPPER_FOR_inet_csk_addr2sockaddr
#define APP_WRAPPER_FOR_inet_csk_addr2sockaddr
FUNCTION_WRAPPER_VOID(inet_csk_addr2sockaddr, (struct sock *sk, struct sockaddr *uaddr), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("inet_csk_addr2sockaddr is invoked.\n");
    PRE_WRAPPER_FUNC(sk, uaddr);
    inet_csk_addr2sockaddr(sk, uaddr);
    POST_WRAPPER_FUNC(sk, uaddr);
    kern_printk("inet_csk_addr2sockaddr returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR___pte_alloc_kernel
#define APP_WRAPPER_FOR___pte_alloc_kernel
#endif
 
#ifndef APP_WRAPPER_FOR___pte_alloc_kernel
#define APP_WRAPPER_FOR___pte_alloc_kernel
FUNCTION_WRAPPER(__pte_alloc_kernel, (pmd_t *pmd, unsigned long address), {
    kern_printk("__pte_alloc_kernel is invoked.\n");
    PRE_WRAPPER_FUNC(pmd, address);
    int ret = __pte_alloc_kernel(pmd, address);
    POST_WRAPPER_FUNC(pmd, address);
    kern_printk("__pte_alloc_kernel returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_target_state
#define APP_WRAPPER_FOR_pci_target_state
#endif
 
#ifndef APP_WRAPPER_FOR_pci_target_state
#define APP_WRAPPER_FOR_pci_target_state
FUNCTION_WRAPPER(pci_target_state, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_target_state is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pci_power_t ret = pci_target_state(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_target_state returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_pm_qos_hide_flags
#define APP_WRAPPER_FOR_dev_pm_qos_hide_flags
#endif
 
#ifndef APP_WRAPPER_FOR_dev_pm_qos_hide_flags
#define APP_WRAPPER_FOR_dev_pm_qos_hide_flags
FUNCTION_WRAPPER_VOID(dev_pm_qos_hide_flags, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_pm_qos_hide_flags is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    dev_pm_qos_hide_flags(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_pm_qos_hide_flags returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_acpi_handle_printk
#define APP_WRAPPER_FOR_acpi_handle_printk
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_handle_printk
#define APP_WRAPPER_FOR_acpi_handle_printk
FUNCTION_WRAPPER_VOID(acpi_handle_printk, (const char *level, acpi_handle handle, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    // TODO: variadic arguments
    kern_printk("acpi_handle_printk is invoked.\n");
    PRE_WRAPPER_FUNC(level, handle, fmt);
    acpi_handle_printk(level, handle, fmt);
    POST_WRAPPER_FUNC(level, handle, fmt);
    kern_printk("acpi_handle_printk returned.\n");
    va_end(args__);
})
#endif


#ifndef KERN_ADDR_account_page_dirtied
#define APP_WRAPPER_FOR_account_page_dirtied
#endif
 
#ifndef APP_WRAPPER_FOR_account_page_dirtied
#define APP_WRAPPER_FOR_account_page_dirtied
FUNCTION_WRAPPER_VOID(account_page_dirtied, (struct page *page, struct address_space *mapping), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("account_page_dirtied is invoked.\n");
    PRE_WRAPPER_FUNC(page, mapping);
    account_page_dirtied(page, mapping);
    POST_WRAPPER_FUNC(page, mapping);
    kern_printk("account_page_dirtied returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
})
#endif


#ifndef KERN_ADDR_unregister_shrinker
#define APP_WRAPPER_FOR_unregister_shrinker
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_shrinker
#define APP_WRAPPER_FOR_unregister_shrinker
FUNCTION_WRAPPER_VOID(unregister_shrinker, (struct shrinker *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct shrinker)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("unregister_shrinker is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    unregister_shrinker(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("unregister_shrinker returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct shrinker)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_laptop_mode_sync
#define APP_WRAPPER_FOR_laptop_mode_sync
#endif
 
#ifndef APP_WRAPPER_FOR_laptop_mode_sync
#define APP_WRAPPER_FOR_laptop_mode_sync
FUNCTION_WRAPPER_VOID(laptop_mode_sync, (struct work_struct *work), {
    WRAP_RECURSIVE(work);
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
    kern_printk("laptop_mode_sync is invoked.\n");
    PRE_WRAPPER_FUNC(work);
    laptop_mode_sync(work);
    POST_WRAPPER_FUNC(work);
    kern_printk("laptop_mode_sync returned.\n");
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
})
#endif


#ifndef KERN_ADDR_smp_prepare_cpus
#define APP_WRAPPER_FOR_smp_prepare_cpus
#endif
 
#ifndef APP_WRAPPER_FOR_smp_prepare_cpus
#define APP_WRAPPER_FOR_smp_prepare_cpus
FUNCTION_WRAPPER_VOID(smp_prepare_cpus, (unsigned int max_cpus), {
    kern_printk("smp_prepare_cpus is invoked.\n");
    PRE_WRAPPER_FUNC(max_cpus);
    smp_prepare_cpus(max_cpus);
    POST_WRAPPER_FUNC(max_cpus);
    kern_printk("smp_prepare_cpus returned.\n");
})
#endif


#ifndef KERN_ADDR_pcpu_setup_first_chunk
#define APP_WRAPPER_FOR_pcpu_setup_first_chunk
#endif
 
#ifndef APP_WRAPPER_FOR_pcpu_setup_first_chunk
#define APP_WRAPPER_FOR_pcpu_setup_first_chunk
FUNCTION_WRAPPER(pcpu_setup_first_chunk, (const struct pcpu_alloc_info *ai, void *base_addr), {
    kern_printk("pcpu_setup_first_chunk is invoked.\n");
    PRE_WRAPPER_FUNC(ai, base_addr);
    int ret = pcpu_setup_first_chunk(ai, base_addr);
    POST_WRAPPER_FUNC(ai, base_addr);
    kern_printk("pcpu_setup_first_chunk returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_netif_set_real_num_rx_queues
#define APP_WRAPPER_FOR_netif_set_real_num_rx_queues
#endif
 
#ifndef APP_WRAPPER_FOR_netif_set_real_num_rx_queues
#define APP_WRAPPER_FOR_netif_set_real_num_rx_queues
FUNCTION_WRAPPER(netif_set_real_num_rx_queues, (struct net_device *dev, unsigned int rxq), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("netif_set_real_num_rx_queues is invoked.\n");
    PRE_WRAPPER_FUNC(dev, rxq);
    int ret = netif_set_real_num_rx_queues(dev, rxq);
    POST_WRAPPER_FUNC(dev, rxq);
    kern_printk("netif_set_real_num_rx_queues returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_clflush_cache_range
#define APP_WRAPPER_FOR_clflush_cache_range
#endif
 
#ifndef APP_WRAPPER_FOR_clflush_cache_range
#define APP_WRAPPER_FOR_clflush_cache_range
FUNCTION_WRAPPER_VOID(clflush_cache_range, (void *addr, unsigned int size), {
    kern_printk("clflush_cache_range is invoked.\n");
    PRE_WRAPPER_FUNC(addr, size);
    clflush_cache_range(addr, size);
    POST_WRAPPER_FUNC(addr, size);
    kern_printk("clflush_cache_range returned.\n");
})
#endif


#ifndef KERN_ADDR_device_schedule_callback_owner
#define APP_WRAPPER_FOR_device_schedule_callback_owner
#endif
 
#ifndef APP_WRAPPER_FOR_device_schedule_callback_owner
#define APP_WRAPPER_FOR_device_schedule_callback_owner
FUNCTION_WRAPPER(device_schedule_callback_owner, (struct device *dev, void (*func)(struct device *), struct module *owner), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_FUNCTION(func);
    WRAP_RECURSIVE(owner);
    TRACES_IF_WATCHPOINT(owner);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(owner)));
    kern_printk("device_schedule_callback_owner is invoked.\n");
    PRE_WRAPPER_FUNC(dev, func, owner);
    int ret = device_schedule_callback_owner(dev, func, owner);
    POST_WRAPPER_FUNC(dev, func, owner);
    kern_printk("device_schedule_callback_owner returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(owner);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(owner)));
    return ret;
})
#endif


#ifndef KERN_ADDR_rcu_nmi_exit
#define APP_WRAPPER_FOR_rcu_nmi_exit
#endif
 
#ifndef APP_WRAPPER_FOR_rcu_nmi_exit
#define APP_WRAPPER_FOR_rcu_nmi_exit
FUNCTION_WRAPPER_VOID(rcu_nmi_exit, (), {
    kern_printk("rcu_nmi_exit is invoked.\n");
    PRE_WRAPPER_FUNC();
    rcu_nmi_exit();
    POST_WRAPPER_FUNC();
    kern_printk("rcu_nmi_exit returned.\n");
})
#endif


#ifndef KERN_ADDR_register_shrinker
#define APP_WRAPPER_FOR_register_shrinker
#endif
 
#ifndef APP_WRAPPER_FOR_register_shrinker
#define APP_WRAPPER_FOR_register_shrinker
FUNCTION_WRAPPER_VOID(register_shrinker, (struct shrinker *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct shrinker)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("register_shrinker is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    register_shrinker(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("register_shrinker returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct shrinker)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR___init_rwsem
#define APP_WRAPPER_FOR___init_rwsem
#endif
 
#ifndef APP_WRAPPER_FOR___init_rwsem
#define APP_WRAPPER_FOR___init_rwsem
FUNCTION_WRAPPER_VOID(__init_rwsem, (struct rw_semaphore *sem, const char *name, struct lock_class_key *key), {
    kern_printk("__init_rwsem is invoked.\n");
    PRE_WRAPPER_FUNC(sem, name, key);
    __init_rwsem(sem, name, key);
    POST_WRAPPER_FUNC(sem, name, key);
    kern_printk("__init_rwsem returned.\n");
})
#endif


#ifndef KERN_ADDR_sock_tx_timestamp
#define APP_WRAPPER_FOR_sock_tx_timestamp
#endif
 
#ifndef APP_WRAPPER_FOR_sock_tx_timestamp
#define APP_WRAPPER_FOR_sock_tx_timestamp
FUNCTION_WRAPPER(sock_tx_timestamp, (struct sock *sk, __u8 *tx_flags), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sock_tx_timestamp is invoked.\n");
    PRE_WRAPPER_FUNC(sk, tx_flags);
    int ret = sock_tx_timestamp(sk, tx_flags);
    POST_WRAPPER_FUNC(sk, tx_flags);
    kern_printk("sock_tx_timestamp returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_early_iounmap
#define APP_WRAPPER_FOR_early_iounmap
#endif
 
#ifndef APP_WRAPPER_FOR_early_iounmap
#define APP_WRAPPER_FOR_early_iounmap
FUNCTION_WRAPPER_VOID(early_iounmap, (void *addr, unsigned long size), {
    kern_printk("early_iounmap is invoked.\n");
    PRE_WRAPPER_FUNC(addr, size);
    early_iounmap(addr, size);
    POST_WRAPPER_FUNC(addr, size);
    kern_printk("early_iounmap returned.\n");
})
#endif


#ifndef KERN_ADDR_dev_change_net_namespace
#define APP_WRAPPER_FOR_dev_change_net_namespace
#endif
 
#ifndef APP_WRAPPER_FOR_dev_change_net_namespace
#define APP_WRAPPER_FOR_dev_change_net_namespace
FUNCTION_WRAPPER(dev_change_net_namespace, (struct net_device *_arg1, struct net *_arg2, const char *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("dev_change_net_namespace is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = dev_change_net_namespace(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("dev_change_net_namespace returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR___dev_remove_pack
#define APP_WRAPPER_FOR___dev_remove_pack
#endif
 
#ifndef APP_WRAPPER_FOR___dev_remove_pack
#define APP_WRAPPER_FOR___dev_remove_pack
FUNCTION_WRAPPER_VOID(__dev_remove_pack, (struct packet_type *pt), {
    WRAP_RECURSIVE(pt);
    TRACES_IF_WATCHPOINT(pt);
    SCAN_HEAD_FUNC(struct packet_type)(*(TO_UNWATCHED_ADDRESS(pt)));
    kern_printk("__dev_remove_pack is invoked.\n");
    PRE_WRAPPER_FUNC(pt);
    __dev_remove_pack(pt);
    POST_WRAPPER_FUNC(pt);
    kern_printk("__dev_remove_pack returned.\n");
    TRACES_IF_WATCHPOINT(pt);
    SCAN_HEAD_FUNC(struct packet_type)(*(TO_UNWATCHED_ADDRESS(pt)));
})
#endif


#ifndef KERN_ADDR_input_ff_create
#define APP_WRAPPER_FOR_input_ff_create
#endif
 
#ifndef APP_WRAPPER_FOR_input_ff_create
#define APP_WRAPPER_FOR_input_ff_create
FUNCTION_WRAPPER(input_ff_create, (struct input_dev *dev, unsigned int max_effects), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("input_ff_create is invoked.\n");
    PRE_WRAPPER_FUNC(dev, max_effects);
    int ret = input_ff_create(dev, max_effects);
    POST_WRAPPER_FUNC(dev, max_effects);
    kern_printk("input_ff_create returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_bus_private_data_handler
#define APP_WRAPPER_FOR_acpi_bus_private_data_handler
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_bus_private_data_handler
#define APP_WRAPPER_FOR_acpi_bus_private_data_handler
FUNCTION_WRAPPER_VOID(acpi_bus_private_data_handler, (acpi_handle _arg1, void *_arg2), {
    kern_printk("acpi_bus_private_data_handler is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    acpi_bus_private_data_handler(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("acpi_bus_private_data_handler returned.\n");
})
#endif


#ifndef KERN_ADDR_free_inode_nonrcu
#define APP_WRAPPER_FOR_free_inode_nonrcu
#endif
 
#ifndef APP_WRAPPER_FOR_free_inode_nonrcu
#define APP_WRAPPER_FOR_free_inode_nonrcu
FUNCTION_WRAPPER_VOID(free_inode_nonrcu, (struct inode *inode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("free_inode_nonrcu is invoked.\n");
    PRE_WRAPPER_FUNC(inode);
    free_inode_nonrcu(inode);
    POST_WRAPPER_FUNC(inode);
    kern_printk("free_inode_nonrcu returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_compat_sys_newfstatat
#define APP_WRAPPER_FOR_compat_sys_newfstatat
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_newfstatat
#define APP_WRAPPER_FOR_compat_sys_newfstatat
FUNCTION_WRAPPER(compat_sys_newfstatat, (unsigned int dfd, const char *filename, struct compat_stat *statbuf, int flag), {
    kern_printk("compat_sys_newfstatat is invoked.\n");
    PRE_WRAPPER_FUNC(dfd, filename, statbuf, flag);
    long ret = compat_sys_newfstatat(dfd, filename, statbuf, flag);
    POST_WRAPPER_FUNC(dfd, filename, statbuf, flag);
    kern_printk("compat_sys_newfstatat returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_setup_per_zone_wmarks
#define APP_WRAPPER_FOR_setup_per_zone_wmarks
#endif
 
#ifndef APP_WRAPPER_FOR_setup_per_zone_wmarks
#define APP_WRAPPER_FOR_setup_per_zone_wmarks
FUNCTION_WRAPPER_VOID(setup_per_zone_wmarks, (), {
    kern_printk("setup_per_zone_wmarks is invoked.\n");
    PRE_WRAPPER_FUNC();
    setup_per_zone_wmarks();
    POST_WRAPPER_FUNC();
    kern_printk("setup_per_zone_wmarks returned.\n");
})
#endif


#ifndef KERN_ADDR_driver_init
#define APP_WRAPPER_FOR_driver_init
#endif
 
#ifndef APP_WRAPPER_FOR_driver_init
#define APP_WRAPPER_FOR_driver_init
FUNCTION_WRAPPER_VOID(driver_init, (), {
    kern_printk("driver_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    driver_init();
    POST_WRAPPER_FUNC();
    kern_printk("driver_init returned.\n");
})
#endif


#ifndef KERN_ADDR_compat_sys_clock_getres
#define APP_WRAPPER_FOR_compat_sys_clock_getres
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_clock_getres
#define APP_WRAPPER_FOR_compat_sys_clock_getres
FUNCTION_WRAPPER(compat_sys_clock_getres, (clockid_t which_clock, struct compat_timespec *tp), {
    kern_printk("compat_sys_clock_getres is invoked.\n");
    PRE_WRAPPER_FUNC(which_clock, tp);
    long ret = compat_sys_clock_getres(which_clock, tp);
    POST_WRAPPER_FUNC(which_clock, tp);
    kern_printk("compat_sys_clock_getres returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_fiemap_check_flags
#define APP_WRAPPER_FOR_fiemap_check_flags
#endif
 
#ifndef APP_WRAPPER_FOR_fiemap_check_flags
#define APP_WRAPPER_FOR_fiemap_check_flags
FUNCTION_WRAPPER(fiemap_check_flags, (struct fiemap_extent_info *fieinfo, u32 fs_flags), {
    kern_printk("fiemap_check_flags is invoked.\n");
    PRE_WRAPPER_FUNC(fieinfo, fs_flags);
    int ret = fiemap_check_flags(fieinfo, fs_flags);
    POST_WRAPPER_FUNC(fieinfo, fs_flags);
    kern_printk("fiemap_check_flags returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_timekeeping_init
#define APP_WRAPPER_FOR_timekeeping_init
#endif
 
#ifndef APP_WRAPPER_FOR_timekeeping_init
#define APP_WRAPPER_FOR_timekeeping_init
FUNCTION_WRAPPER_VOID(timekeeping_init, (), {
    kern_printk("timekeeping_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    timekeeping_init();
    POST_WRAPPER_FUNC();
    kern_printk("timekeeping_init returned.\n");
})
#endif


#ifndef KERN_ADDR_neigh_event_ns
#define APP_WRAPPER_FOR_neigh_event_ns
#endif
 
#ifndef APP_WRAPPER_FOR_neigh_event_ns
#define APP_WRAPPER_FOR_neigh_event_ns
FUNCTION_WRAPPER(neigh_event_ns, (struct neigh_table *tbl, u8 *lladdr, void *saddr, struct net_device *dev), {
    WRAP_RECURSIVE(tbl);
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("neigh_event_ns is invoked.\n");
    PRE_WRAPPER_FUNC(tbl, lladdr, saddr, dev);
    struct neighbour *ret = neigh_event_ns(tbl, lladdr, saddr, dev);
    POST_WRAPPER_FUNC(tbl, lladdr, saddr, dev);
    kern_printk("neigh_event_ns returned.\n");
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_rw_copy_check_uvector
#define APP_WRAPPER_FOR_compat_rw_copy_check_uvector
#endif
 
#ifndef APP_WRAPPER_FOR_compat_rw_copy_check_uvector
#define APP_WRAPPER_FOR_compat_rw_copy_check_uvector
FUNCTION_WRAPPER(compat_rw_copy_check_uvector, (int type, const struct compat_iovec *uvector, unsigned long nr_segs, unsigned long fast_segs, struct iovec *fast_pointer, struct iovec **ret_pointer), {
    kern_printk("compat_rw_copy_check_uvector is invoked.\n");
    PRE_WRAPPER_FUNC(type, uvector, nr_segs, fast_segs, fast_pointer, ret_pointer);
    ssize_t ret = compat_rw_copy_check_uvector(type, uvector, nr_segs, fast_segs, fast_pointer, ret_pointer);
    POST_WRAPPER_FUNC(type, uvector, nr_segs, fast_segs, fast_pointer, ret_pointer);
    kern_printk("compat_rw_copy_check_uvector returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_add_wait_queue
#define APP_WRAPPER_FOR_add_wait_queue
#endif
 
#ifndef APP_WRAPPER_FOR_add_wait_queue
#define APP_WRAPPER_FOR_add_wait_queue
FUNCTION_WRAPPER_VOID(add_wait_queue, (wait_queue_head_t *q, wait_queue_t *wait), {
    WRAP_RECURSIVE(wait);
    TRACES_IF_WATCHPOINT(wait);
    SCAN_HEAD_FUNC(wait_queue_t)(*(TO_UNWATCHED_ADDRESS(wait)));
    kern_printk("add_wait_queue is invoked.\n");
    PRE_WRAPPER_FUNC(q, wait);
    add_wait_queue(q, wait);
    POST_WRAPPER_FUNC(q, wait);
    kern_printk("add_wait_queue returned.\n");
    TRACES_IF_WATCHPOINT(wait);
    SCAN_HEAD_FUNC(wait_queue_t)(*(TO_UNWATCHED_ADDRESS(wait)));
})
#endif


#ifndef KERN_ADDR___bitmap_intersects
#define APP_WRAPPER_FOR___bitmap_intersects
#endif
 
#ifndef APP_WRAPPER_FOR___bitmap_intersects
#define APP_WRAPPER_FOR___bitmap_intersects
FUNCTION_WRAPPER(__bitmap_intersects, (unsigned const long *bitmap1, unsigned const long *bitmap2, int bits), {
    kern_printk("__bitmap_intersects is invoked.\n");
    PRE_WRAPPER_FUNC(bitmap1, bitmap2, bits);
    int ret = __bitmap_intersects(bitmap1, bitmap2, bits);
    POST_WRAPPER_FUNC(bitmap1, bitmap2, bits);
    kern_printk("__bitmap_intersects returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pcpu_free_vm_areas
#define APP_WRAPPER_FOR_pcpu_free_vm_areas
#endif
 
#ifndef APP_WRAPPER_FOR_pcpu_free_vm_areas
#define APP_WRAPPER_FOR_pcpu_free_vm_areas
FUNCTION_WRAPPER_VOID(pcpu_free_vm_areas, (struct vm_struct **vms, int nr_vms), {
    WRAP_RECURSIVE(vms);
    TRACES_IF_WATCHPOINT(vms);
    SCAN_HEAD_FUNC(struct vm_struct *)(*(TO_UNWATCHED_ADDRESS(vms)));
    kern_printk("pcpu_free_vm_areas is invoked.\n");
    PRE_WRAPPER_FUNC(vms, nr_vms);
    pcpu_free_vm_areas(vms, nr_vms);
    POST_WRAPPER_FUNC(vms, nr_vms);
    kern_printk("pcpu_free_vm_areas returned.\n");
    TRACES_IF_WATCHPOINT(vms);
    SCAN_HEAD_FUNC(struct vm_struct *)(*(TO_UNWATCHED_ADDRESS(vms)));
})
#endif


#ifndef KERN_ADDR_posix_test_lock
#define APP_WRAPPER_FOR_posix_test_lock
#endif
 
#ifndef APP_WRAPPER_FOR_posix_test_lock
#define APP_WRAPPER_FOR_posix_test_lock
FUNCTION_WRAPPER_VOID(posix_test_lock, (struct file *_arg1, struct file_lock *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("posix_test_lock is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    posix_test_lock(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("posix_test_lock returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_init_currently_empty_zone
#define APP_WRAPPER_FOR_init_currently_empty_zone
#endif
 
#ifndef APP_WRAPPER_FOR_init_currently_empty_zone
#define APP_WRAPPER_FOR_init_currently_empty_zone
FUNCTION_WRAPPER(init_currently_empty_zone, (struct zone *zone, unsigned long start_pfn, unsigned long size, enum memmap_context context), {
    WRAP_RECURSIVE(zone);
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    kern_printk("init_currently_empty_zone is invoked.\n");
    PRE_WRAPPER_FUNC(zone, start_pfn, size, context);
    int ret = init_currently_empty_zone(zone, start_pfn, size, context);
    POST_WRAPPER_FUNC(zone, start_pfn, size, context);
    kern_printk("init_currently_empty_zone returned.\n");
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    return ret;
})
#endif


#ifndef KERN_ADDR___bitmap_complement
#define APP_WRAPPER_FOR___bitmap_complement
#endif
 
#ifndef APP_WRAPPER_FOR___bitmap_complement
#define APP_WRAPPER_FOR___bitmap_complement
FUNCTION_WRAPPER_VOID(__bitmap_complement, (unsigned long *dst, unsigned const long *src, int bits), {
    kern_printk("__bitmap_complement is invoked.\n");
    PRE_WRAPPER_FUNC(dst, src, bits);
    __bitmap_complement(dst, src, bits);
    POST_WRAPPER_FUNC(dst, src, bits);
    kern_printk("__bitmap_complement returned.\n");
})
#endif


#ifndef KERN_ADDR_sched_setscheduler
#define APP_WRAPPER_FOR_sched_setscheduler
#endif
 
#ifndef APP_WRAPPER_FOR_sched_setscheduler
#define APP_WRAPPER_FOR_sched_setscheduler
FUNCTION_WRAPPER(sched_setscheduler, (struct task_struct *_arg1, int _arg2, const struct sched_param *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("sched_setscheduler is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = sched_setscheduler(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("sched_setscheduler returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_writev
#define APP_WRAPPER_FOR_vfs_writev
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_writev
#define APP_WRAPPER_FOR_vfs_writev
FUNCTION_WRAPPER(vfs_writev, (struct file *_arg1, const struct iovec *_arg2, unsigned long _arg3, loff_t *_arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("vfs_writev is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    ssize_t ret = vfs_writev(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("vfs_writev returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bvec_alloc_bs
#define APP_WRAPPER_FOR_bvec_alloc_bs
#endif
 
#ifndef APP_WRAPPER_FOR_bvec_alloc_bs
#define APP_WRAPPER_FOR_bvec_alloc_bs
FUNCTION_WRAPPER(bvec_alloc_bs, (gfp_t _arg1, int _arg2, unsigned long *_arg3, struct bio_set *_arg4), {
    WRAP_RECURSIVE(_arg4);
    TRACES_IF_WATCHPOINT(_arg4);
    SCAN_HEAD_FUNC(struct bio_set)(*(TO_UNWATCHED_ADDRESS(_arg4)));
    kern_printk("bvec_alloc_bs is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    struct bio_vec *ret = bvec_alloc_bs(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("bvec_alloc_bs returned.\n");
    TRACES_IF_WATCHPOINT(_arg4);
    SCAN_HEAD_FUNC(struct bio_set)(*(TO_UNWATCHED_ADDRESS(_arg4)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_vmalloc_init
#define APP_WRAPPER_FOR_vmalloc_init
#endif
 
#ifndef APP_WRAPPER_FOR_vmalloc_init
#define APP_WRAPPER_FOR_vmalloc_init
FUNCTION_WRAPPER_VOID(vmalloc_init, (), {
    kern_printk("vmalloc_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    vmalloc_init();
    POST_WRAPPER_FUNC();
    kern_printk("vmalloc_init returned.\n");
})
#endif


#ifndef KERN_ADDR_clear_huge_page
#define APP_WRAPPER_FOR_clear_huge_page
#endif
 
#ifndef APP_WRAPPER_FOR_clear_huge_page
#define APP_WRAPPER_FOR_clear_huge_page
FUNCTION_WRAPPER_VOID(clear_huge_page, (struct page *page, unsigned long addr, unsigned int pages_per_huge_page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("clear_huge_page is invoked.\n");
    PRE_WRAPPER_FUNC(page, addr, pages_per_huge_page);
    clear_huge_page(page, addr, pages_per_huge_page);
    POST_WRAPPER_FUNC(page, addr, pages_per_huge_page);
    kern_printk("clear_huge_page returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_mpage_readpages
#define APP_WRAPPER_FOR_mpage_readpages
#endif
 
#ifndef APP_WRAPPER_FOR_mpage_readpages
#define APP_WRAPPER_FOR_mpage_readpages
FUNCTION_WRAPPER(mpage_readpages, (struct address_space *mapping, struct list_head *pages, unsigned int nr_pages, get_block_t get_block), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("mpage_readpages is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, pages, nr_pages, get_block);
    int ret = mpage_readpages(mapping, pages, nr_pages, get_block);
    POST_WRAPPER_FUNC(mapping, pages, nr_pages, get_block);
    kern_printk("mpage_readpages returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cap_task_setscheduler
#define APP_WRAPPER_FOR_cap_task_setscheduler
#endif
 
#ifndef APP_WRAPPER_FOR_cap_task_setscheduler
#define APP_WRAPPER_FOR_cap_task_setscheduler
FUNCTION_WRAPPER(cap_task_setscheduler, (struct task_struct *p), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("cap_task_setscheduler is invoked.\n");
    PRE_WRAPPER_FUNC(p);
    int ret = cap_task_setscheduler(p);
    POST_WRAPPER_FUNC(p);
    kern_printk("cap_task_setscheduler returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_queue_head
#define APP_WRAPPER_FOR_skb_queue_head
#endif
 
#ifndef APP_WRAPPER_FOR_skb_queue_head
#define APP_WRAPPER_FOR_skb_queue_head
FUNCTION_WRAPPER_VOID(skb_queue_head, (struct sk_buff_head *list, struct sk_buff *newsk), {
    WRAP_RECURSIVE(list);
    TRACES_IF_WATCHPOINT(list);
    SCAN_HEAD_FUNC(struct sk_buff_head)(*(TO_UNWATCHED_ADDRESS(list)));
    WRAP_RECURSIVE(newsk);
    TRACES_IF_WATCHPOINT(newsk);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(newsk)));
    kern_printk("skb_queue_head is invoked.\n");
    PRE_WRAPPER_FUNC(list, newsk);
    skb_queue_head(list, newsk);
    POST_WRAPPER_FUNC(list, newsk);
    kern_printk("skb_queue_head returned.\n");
    TRACES_IF_WATCHPOINT(list);
    SCAN_HEAD_FUNC(struct sk_buff_head)(*(TO_UNWATCHED_ADDRESS(list)));
    TRACES_IF_WATCHPOINT(newsk);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(newsk)));
})
#endif


#ifndef KERN_ADDR_rt_mutex_adjust_pi
#define APP_WRAPPER_FOR_rt_mutex_adjust_pi
#endif
 
#ifndef APP_WRAPPER_FOR_rt_mutex_adjust_pi
#define APP_WRAPPER_FOR_rt_mutex_adjust_pi
FUNCTION_WRAPPER_VOID(rt_mutex_adjust_pi, (struct task_struct *p), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("rt_mutex_adjust_pi is invoked.\n");
    PRE_WRAPPER_FUNC(p);
    rt_mutex_adjust_pi(p);
    POST_WRAPPER_FUNC(p);
    kern_printk("rt_mutex_adjust_pi returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
})
#endif


#ifndef KERN_ADDR_neigh_seq_start
#define APP_WRAPPER_FOR_neigh_seq_start
#endif
 
#ifndef APP_WRAPPER_FOR_neigh_seq_start
#define APP_WRAPPER_FOR_neigh_seq_start
FUNCTION_WRAPPER(neigh_seq_start, (struct seq_file *_arg1, loff_t *_arg2, struct neigh_table *_arg3, unsigned int _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("neigh_seq_start is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    void *ret = neigh_seq_start(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("neigh_seq_start returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___inc_zone_page_state
#define APP_WRAPPER_FOR___inc_zone_page_state
#endif
 
#ifndef APP_WRAPPER_FOR___inc_zone_page_state
#define APP_WRAPPER_FOR___inc_zone_page_state
FUNCTION_WRAPPER_VOID(__inc_zone_page_state, (struct page *_arg1, enum zone_stat_item _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__inc_zone_page_state is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    __inc_zone_page_state(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("__inc_zone_page_state returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_do_mmap_pgoff
#define APP_WRAPPER_FOR_do_mmap_pgoff
#endif
 
#ifndef APP_WRAPPER_FOR_do_mmap_pgoff
#define APP_WRAPPER_FOR_do_mmap_pgoff
FUNCTION_WRAPPER(do_mmap_pgoff, (struct file *_arg1, unsigned long _arg2, unsigned long _arg3, unsigned long _arg4, unsigned long _arg5, unsigned long _arg6), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("do_mmap_pgoff is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
    long ret = do_mmap_pgoff(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
    kern_printk("do_mmap_pgoff returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_param_set_charp
#define APP_WRAPPER_FOR_param_set_charp
#endif
 
#ifndef APP_WRAPPER_FOR_param_set_charp
#define APP_WRAPPER_FOR_param_set_charp
FUNCTION_WRAPPER(param_set_charp, (const char *val, const struct kernel_param *kp), {
    WRAP_RECURSIVE(kp);
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    kern_printk("param_set_charp is invoked.\n");
    PRE_WRAPPER_FUNC(val, kp);
    int ret = param_set_charp(val, kp);
    POST_WRAPPER_FUNC(val, kp);
    kern_printk("param_set_charp returned.\n");
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_read_bridge_bases
#define APP_WRAPPER_FOR_pci_read_bridge_bases
#endif
 
#ifndef APP_WRAPPER_FOR_pci_read_bridge_bases
#define APP_WRAPPER_FOR_pci_read_bridge_bases
FUNCTION_WRAPPER_VOID(pci_read_bridge_bases, (struct pci_bus *child), {
    WRAP_RECURSIVE(child);
    TRACES_IF_WATCHPOINT(child);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(child)));
    kern_printk("pci_read_bridge_bases is invoked.\n");
    PRE_WRAPPER_FUNC(child);
    pci_read_bridge_bases(child);
    POST_WRAPPER_FUNC(child);
    kern_printk("pci_read_bridge_bases returned.\n");
    TRACES_IF_WATCHPOINT(child);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(child)));
})
#endif


#ifndef KERN_ADDR_seq_list_next
#define APP_WRAPPER_FOR_seq_list_next
#endif
 
#ifndef APP_WRAPPER_FOR_seq_list_next
#define APP_WRAPPER_FOR_seq_list_next
FUNCTION_WRAPPER(seq_list_next, (void *v, struct list_head *head, loff_t *ppos), {
    kern_printk("seq_list_next is invoked.\n");
    PRE_WRAPPER_FUNC(v, head, ppos);
    struct list_head *ret = seq_list_next(v, head, ppos);
    POST_WRAPPER_FUNC(v, head, ppos);
    kern_printk("seq_list_next returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_buffer_to_resource
#define APP_WRAPPER_FOR_acpi_buffer_to_resource
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_buffer_to_resource
#define APP_WRAPPER_FOR_acpi_buffer_to_resource
FUNCTION_WRAPPER(acpi_buffer_to_resource, (u8 *aml_buffer, u16 aml_buffer_length, struct acpi_resource **resource_ptr), {
    kern_printk("acpi_buffer_to_resource is invoked.\n");
    PRE_WRAPPER_FUNC(aml_buffer, aml_buffer_length, resource_ptr);
    acpi_status ret = acpi_buffer_to_resource(aml_buffer, aml_buffer_length, resource_ptr);
    POST_WRAPPER_FUNC(aml_buffer, aml_buffer_length, resource_ptr);
    kern_printk("acpi_buffer_to_resource returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_test_taint
#define APP_WRAPPER_FOR_test_taint
#endif
 
#ifndef APP_WRAPPER_FOR_test_taint
#define APP_WRAPPER_FOR_test_taint
FUNCTION_WRAPPER(test_taint, (unsigned int flag), {
    kern_printk("test_taint is invoked.\n");
    PRE_WRAPPER_FUNC(flag);
    int ret = test_taint(flag);
    POST_WRAPPER_FUNC(flag);
    kern_printk("test_taint returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sas_port_async_suspend
#define APP_WRAPPER_FOR_ata_sas_port_async_suspend
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sas_port_async_suspend
#define APP_WRAPPER_FOR_ata_sas_port_async_suspend
FUNCTION_WRAPPER(ata_sas_port_async_suspend, (struct ata_port *ap, int *async), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_sas_port_async_suspend is invoked.\n");
    PRE_WRAPPER_FUNC(ap, async);
    int ret = ata_sas_port_async_suspend(ap, async);
    POST_WRAPPER_FUNC(ap, async);
    kern_printk("ata_sas_port_async_suspend returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vm_normal_page
#define APP_WRAPPER_FOR_vm_normal_page
#endif
 
#ifndef APP_WRAPPER_FOR_vm_normal_page
#define APP_WRAPPER_FOR_vm_normal_page
FUNCTION_WRAPPER(vm_normal_page, (struct vm_area_struct *vma, unsigned long addr, pte_t pte), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("vm_normal_page is invoked.\n");
    PRE_WRAPPER_FUNC(vma, addr, pte);
    struct page *ret = vm_normal_page(vma, addr, pte);
    POST_WRAPPER_FUNC(vma, addr, pte);
    kern_printk("vm_normal_page returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_tick_get_broadcast_oneshot_mask
#define APP_WRAPPER_FOR_tick_get_broadcast_oneshot_mask
#endif
 
#ifndef APP_WRAPPER_FOR_tick_get_broadcast_oneshot_mask
#define APP_WRAPPER_FOR_tick_get_broadcast_oneshot_mask
FUNCTION_WRAPPER(tick_get_broadcast_oneshot_mask, (), {
    kern_printk("tick_get_broadcast_oneshot_mask is invoked.\n");
    PRE_WRAPPER_FUNC();
    struct cpumask *ret = tick_get_broadcast_oneshot_mask();
    POST_WRAPPER_FUNC();
    kern_printk("tick_get_broadcast_oneshot_mask returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_set_timer_slack
#define APP_WRAPPER_FOR_set_timer_slack
#endif
 
#ifndef APP_WRAPPER_FOR_set_timer_slack
#define APP_WRAPPER_FOR_set_timer_slack
FUNCTION_WRAPPER_VOID(set_timer_slack, (struct timer_list *time, int slack_hz), {
    WRAP_RECURSIVE(time);
    TRACES_IF_WATCHPOINT(time);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(time)));
    kern_printk("set_timer_slack is invoked.\n");
    PRE_WRAPPER_FUNC(time, slack_hz);
    set_timer_slack(time, slack_hz);
    POST_WRAPPER_FUNC(time, slack_hz);
    kern_printk("set_timer_slack returned.\n");
    TRACES_IF_WATCHPOINT(time);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(time)));
})
#endif


#ifndef KERN_ADDR_ioremap_nocache
#define APP_WRAPPER_FOR_ioremap_nocache
#endif
 
#ifndef APP_WRAPPER_FOR_ioremap_nocache
#define APP_WRAPPER_FOR_ioremap_nocache
FUNCTION_WRAPPER(ioremap_nocache, (resource_size_t offset, unsigned long size), {
    kern_printk("ioremap_nocache is invoked.\n");
    PRE_WRAPPER_FUNC(offset, size);
    void *ret = ioremap_nocache(offset, size);
    POST_WRAPPER_FUNC(offset, size);
    kern_printk("ioremap_nocache returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_lookup_bdev
#define APP_WRAPPER_FOR_lookup_bdev
#endif
 
#ifndef APP_WRAPPER_FOR_lookup_bdev
#define APP_WRAPPER_FOR_lookup_bdev
FUNCTION_WRAPPER(lookup_bdev, (const char *_arg1), {
    kern_printk("lookup_bdev is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct block_device *ret = lookup_bdev(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("lookup_bdev returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_bus_get_private_data
#define APP_WRAPPER_FOR_acpi_bus_get_private_data
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_bus_get_private_data
#define APP_WRAPPER_FOR_acpi_bus_get_private_data
FUNCTION_WRAPPER(acpi_bus_get_private_data, (acpi_handle _arg1, void **_arg2), {
    kern_printk("acpi_bus_get_private_data is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = acpi_bus_get_private_data(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("acpi_bus_get_private_data returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_add_partition
#define APP_WRAPPER_FOR_add_partition
#endif
 
#ifndef APP_WRAPPER_FOR_add_partition
#define APP_WRAPPER_FOR_add_partition
FUNCTION_WRAPPER(add_partition, (struct gendisk *disk, int partno, sector_t start, sector_t len, int flags, struct partition_meta_info *info), {
    WRAP_RECURSIVE(disk);
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    kern_printk("add_partition is invoked.\n");
    PRE_WRAPPER_FUNC(disk, partno, start, len, flags, info);
    struct hd_struct *ret = add_partition(disk, partno, start, len, flags, info);
    POST_WRAPPER_FUNC(disk, partno, start, len, flags, info);
    kern_printk("add_partition returned.\n");
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_timerfd_clock_was_set
#define APP_WRAPPER_FOR_timerfd_clock_was_set
#endif
 
#ifndef APP_WRAPPER_FOR_timerfd_clock_was_set
#define APP_WRAPPER_FOR_timerfd_clock_was_set
FUNCTION_WRAPPER_VOID(timerfd_clock_was_set, (), {
    kern_printk("timerfd_clock_was_set is invoked.\n");
    PRE_WRAPPER_FUNC();
    timerfd_clock_was_set();
    POST_WRAPPER_FUNC();
    kern_printk("timerfd_clock_was_set returned.\n");
})
#endif


#ifndef KERN_ADDR_ioport_map
#define APP_WRAPPER_FOR_ioport_map
#endif
 
#ifndef APP_WRAPPER_FOR_ioport_map
#define APP_WRAPPER_FOR_ioport_map
FUNCTION_WRAPPER(ioport_map, (unsigned long port, unsigned int nr), {
    kern_printk("ioport_map is invoked.\n");
    PRE_WRAPPER_FUNC(port, nr);
    void *ret = ioport_map(port, nr);
    POST_WRAPPER_FUNC(port, nr);
    kern_printk("ioport_map returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_native_apic_icr_write
#define APP_WRAPPER_FOR_native_apic_icr_write
#endif
 
#ifndef APP_WRAPPER_FOR_native_apic_icr_write
#define APP_WRAPPER_FOR_native_apic_icr_write
FUNCTION_WRAPPER_VOID(native_apic_icr_write, (u32 low, u32 id), {
    kern_printk("native_apic_icr_write is invoked.\n");
    PRE_WRAPPER_FUNC(low, id);
    native_apic_icr_write(low, id);
    POST_WRAPPER_FUNC(low, id);
    kern_printk("native_apic_icr_write returned.\n");
})
#endif


#ifndef KERN_ADDR_register_quota_format
#define APP_WRAPPER_FOR_register_quota_format
#endif
 
#ifndef APP_WRAPPER_FOR_register_quota_format
#define APP_WRAPPER_FOR_register_quota_format
FUNCTION_WRAPPER(register_quota_format, (struct quota_format_type *fmt), {
    WRAP_RECURSIVE(fmt);
    TRACES_IF_WATCHPOINT(fmt);
    SCAN_HEAD_FUNC(struct quota_format_type)(*(TO_UNWATCHED_ADDRESS(fmt)));
    kern_printk("register_quota_format is invoked.\n");
    PRE_WRAPPER_FUNC(fmt);
    int ret = register_quota_format(fmt);
    POST_WRAPPER_FUNC(fmt);
    kern_printk("register_quota_format returned.\n");
    TRACES_IF_WATCHPOINT(fmt);
    SCAN_HEAD_FUNC(struct quota_format_type)(*(TO_UNWATCHED_ADDRESS(fmt)));
    return ret;
})
#endif


#ifndef KERN_ADDR_klist_iter_init
#define APP_WRAPPER_FOR_klist_iter_init
#endif
 
#ifndef APP_WRAPPER_FOR_klist_iter_init
#define APP_WRAPPER_FOR_klist_iter_init
FUNCTION_WRAPPER_VOID(klist_iter_init, (struct klist *k, struct klist_iter *i), {
    WRAP_RECURSIVE(k);
    TRACES_IF_WATCHPOINT(k);
    SCAN_HEAD_FUNC(struct klist)(*(TO_UNWATCHED_ADDRESS(k)));
    WRAP_RECURSIVE(i);
    TRACES_IF_WATCHPOINT(i);
    SCAN_HEAD_FUNC(struct klist_iter)(*(TO_UNWATCHED_ADDRESS(i)));
    kern_printk("klist_iter_init is invoked.\n");
    PRE_WRAPPER_FUNC(k, i);
    klist_iter_init(k, i);
    POST_WRAPPER_FUNC(k, i);
    kern_printk("klist_iter_init returned.\n");
    TRACES_IF_WATCHPOINT(k);
    SCAN_HEAD_FUNC(struct klist)(*(TO_UNWATCHED_ADDRESS(k)));
    TRACES_IF_WATCHPOINT(i);
    SCAN_HEAD_FUNC(struct klist_iter)(*(TO_UNWATCHED_ADDRESS(i)));
})
#endif


#ifndef KERN_ADDR_replace_page_cache_page
#define APP_WRAPPER_FOR_replace_page_cache_page
#endif
 
#ifndef APP_WRAPPER_FOR_replace_page_cache_page
#define APP_WRAPPER_FOR_replace_page_cache_page
FUNCTION_WRAPPER(replace_page_cache_page, (struct page *old, struct page *new_, gfp_t gfp_mask), {
    WRAP_RECURSIVE(old);
    TRACES_IF_WATCHPOINT(old);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(old)));
    WRAP_RECURSIVE(new_);
    TRACES_IF_WATCHPOINT(new_);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(new_)));
    kern_printk("replace_page_cache_page is invoked.\n");
    PRE_WRAPPER_FUNC(old, new_, gfp_mask);
    int ret = replace_page_cache_page(old, new_, gfp_mask);
    POST_WRAPPER_FUNC(old, new_, gfp_mask);
    kern_printk("replace_page_cache_page returned.\n");
    TRACES_IF_WATCHPOINT(old);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(old)));
    TRACES_IF_WATCHPOINT(new_);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(new_)));
    return ret;
})
#endif


#ifndef KERN_ADDR___netif_schedule
#define APP_WRAPPER_FOR___netif_schedule
#endif
 
#ifndef APP_WRAPPER_FOR___netif_schedule
#define APP_WRAPPER_FOR___netif_schedule
FUNCTION_WRAPPER_VOID(__netif_schedule, (struct Qdisc *q), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(q)));
    kern_printk("__netif_schedule is invoked.\n");
    PRE_WRAPPER_FUNC(q);
    __netif_schedule(q);
    POST_WRAPPER_FUNC(q);
    kern_printk("__netif_schedule returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(q)));
})
#endif


#ifndef KERN_ADDR_disk_stack_limits
#define APP_WRAPPER_FOR_disk_stack_limits
#endif
 
#ifndef APP_WRAPPER_FOR_disk_stack_limits
#define APP_WRAPPER_FOR_disk_stack_limits
FUNCTION_WRAPPER_VOID(disk_stack_limits, (struct gendisk *disk, struct block_device *bdev, sector_t offset), {
    WRAP_RECURSIVE(disk);
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    kern_printk("disk_stack_limits is invoked.\n");
    PRE_WRAPPER_FUNC(disk, bdev, offset);
    disk_stack_limits(disk, bdev, offset);
    POST_WRAPPER_FUNC(disk, bdev, offset);
    kern_printk("disk_stack_limits returned.\n");
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
})
#endif


#ifndef KERN_ADDR_devm_kfree
#define APP_WRAPPER_FOR_devm_kfree
#endif
 
#ifndef APP_WRAPPER_FOR_devm_kfree
#define APP_WRAPPER_FOR_devm_kfree
FUNCTION_WRAPPER_VOID(devm_kfree, (struct device *dev, void *p), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("devm_kfree is invoked.\n");
    PRE_WRAPPER_FUNC(dev, p);
    devm_kfree(dev, p);
    POST_WRAPPER_FUNC(dev, p);
    kern_printk("devm_kfree returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_xfrm_lookup
#define APP_WRAPPER_FOR_xfrm_lookup
#endif
 
#ifndef APP_WRAPPER_FOR_xfrm_lookup
#define APP_WRAPPER_FOR_xfrm_lookup
FUNCTION_WRAPPER(xfrm_lookup, (struct net *net, struct dst_entry *dst_orig, const struct flowi *fl, struct sock *sk, int flags), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    WRAP_RECURSIVE(dst_orig);
    TRACES_IF_WATCHPOINT(dst_orig);
    SCAN_HEAD_FUNC(struct dst_entry)(*(TO_UNWATCHED_ADDRESS(dst_orig)));
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("xfrm_lookup is invoked.\n");
    PRE_WRAPPER_FUNC(net, dst_orig, fl, sk, flags);
    struct dst_entry *ret = xfrm_lookup(net, dst_orig, fl, sk, flags);
    POST_WRAPPER_FUNC(net, dst_orig, fl, sk, flags);
    kern_printk("xfrm_lookup returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    TRACES_IF_WATCHPOINT(dst_orig);
    SCAN_HEAD_FUNC(struct dst_entry)(*(TO_UNWATCHED_ADDRESS(dst_orig)));
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_get_nohz_timer_target
#define APP_WRAPPER_FOR_get_nohz_timer_target
#endif
 
#ifndef APP_WRAPPER_FOR_get_nohz_timer_target
#define APP_WRAPPER_FOR_get_nohz_timer_target
FUNCTION_WRAPPER(get_nohz_timer_target, (), {
    kern_printk("get_nohz_timer_target is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = get_nohz_timer_target();
    POST_WRAPPER_FUNC();
    kern_printk("get_nohz_timer_target returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_filemap_flush
#define APP_WRAPPER_FOR_filemap_flush
#endif
 
#ifndef APP_WRAPPER_FOR_filemap_flush
#define APP_WRAPPER_FOR_filemap_flush
FUNCTION_WRAPPER(filemap_flush, (struct address_space *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("filemap_flush is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = filemap_flush(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("filemap_flush returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_invalidate_inode_pages2_range
#define APP_WRAPPER_FOR_invalidate_inode_pages2_range
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_inode_pages2_range
#define APP_WRAPPER_FOR_invalidate_inode_pages2_range
FUNCTION_WRAPPER(invalidate_inode_pages2_range, (struct address_space *mapping, unsigned long start, unsigned long end), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("invalidate_inode_pages2_range is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, start, end);
    int ret = invalidate_inode_pages2_range(mapping, start, end);
    POST_WRAPPER_FUNC(mapping, start, end);
    kern_printk("invalidate_inode_pages2_range returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mii_check_link
#define APP_WRAPPER_FOR_mii_check_link
#endif
 
#ifndef APP_WRAPPER_FOR_mii_check_link
#define APP_WRAPPER_FOR_mii_check_link
FUNCTION_WRAPPER_VOID(mii_check_link, (struct mii_if_info *mii), {
    WRAP_RECURSIVE(mii);
    TRACES_IF_WATCHPOINT(mii);
    SCAN_HEAD_FUNC(struct mii_if_info)(*(TO_UNWATCHED_ADDRESS(mii)));
    kern_printk("mii_check_link is invoked.\n");
    PRE_WRAPPER_FUNC(mii);
    mii_check_link(mii);
    POST_WRAPPER_FUNC(mii);
    kern_printk("mii_check_link returned.\n");
    TRACES_IF_WATCHPOINT(mii);
    SCAN_HEAD_FUNC(struct mii_if_info)(*(TO_UNWATCHED_ADDRESS(mii)));
})
#endif


#ifndef KERN_ADDR_pci_get_dma_source
#define APP_WRAPPER_FOR_pci_get_dma_source
#endif
 
#ifndef APP_WRAPPER_FOR_pci_get_dma_source
#define APP_WRAPPER_FOR_pci_get_dma_source
FUNCTION_WRAPPER(pci_get_dma_source, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_get_dma_source is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    struct pci_dev *ret = pci_get_dma_source(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_get_dma_source returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_block_commit_write
#define APP_WRAPPER_FOR_block_commit_write
#endif
 
#ifndef APP_WRAPPER_FOR_block_commit_write
#define APP_WRAPPER_FOR_block_commit_write
FUNCTION_WRAPPER(block_commit_write, (struct page *page, unsigned int from, unsigned int to), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("block_commit_write is invoked.\n");
    PRE_WRAPPER_FUNC(page, from, to);
    int ret = block_commit_write(page, from, to);
    POST_WRAPPER_FUNC(page, from, to);
    kern_printk("block_commit_write returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_net_sysctl_init
#define APP_WRAPPER_FOR_net_sysctl_init
#endif
 
#ifndef APP_WRAPPER_FOR_net_sysctl_init
#define APP_WRAPPER_FOR_net_sysctl_init
FUNCTION_WRAPPER(net_sysctl_init, (), {
    kern_printk("net_sysctl_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = net_sysctl_init();
    POST_WRAPPER_FUNC();
    kern_printk("net_sysctl_init returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___pm_wakeup_event
#define APP_WRAPPER_FOR___pm_wakeup_event
#endif
 
#ifndef APP_WRAPPER_FOR___pm_wakeup_event
#define APP_WRAPPER_FOR___pm_wakeup_event
FUNCTION_WRAPPER_VOID(__pm_wakeup_event, (struct wakeup_source *ws, unsigned int msec), {
    WRAP_RECURSIVE(ws);
    TRACES_IF_WATCHPOINT(ws);
    SCAN_HEAD_FUNC(struct wakeup_source)(*(TO_UNWATCHED_ADDRESS(ws)));
    kern_printk("__pm_wakeup_event is invoked.\n");
    PRE_WRAPPER_FUNC(ws, msec);
    __pm_wakeup_event(ws, msec);
    POST_WRAPPER_FUNC(ws, msec);
    kern_printk("__pm_wakeup_event returned.\n");
    TRACES_IF_WATCHPOINT(ws);
    SCAN_HEAD_FUNC(struct wakeup_source)(*(TO_UNWATCHED_ADDRESS(ws)));
})
#endif


#ifndef KERN_ADDR___nla_reserve_nohdr
#define APP_WRAPPER_FOR___nla_reserve_nohdr
#endif
 
#ifndef APP_WRAPPER_FOR___nla_reserve_nohdr
#define APP_WRAPPER_FOR___nla_reserve_nohdr
FUNCTION_WRAPPER(__nla_reserve_nohdr, (struct sk_buff *skb, int attrlen), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("__nla_reserve_nohdr is invoked.\n");
    PRE_WRAPPER_FUNC(skb, attrlen);
    void *ret = __nla_reserve_nohdr(skb, attrlen);
    POST_WRAPPER_FUNC(skb, attrlen);
    kern_printk("__nla_reserve_nohdr returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_unlink
#define APP_WRAPPER_FOR_vfs_unlink
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_unlink
#define APP_WRAPPER_FOR_vfs_unlink
FUNCTION_WRAPPER(vfs_unlink, (struct inode *_arg1, struct dentry *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("vfs_unlink is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = vfs_unlink(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("vfs_unlink returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_inode_dio_wait
#define APP_WRAPPER_FOR_inode_dio_wait
#endif
 
#ifndef APP_WRAPPER_FOR_inode_dio_wait
#define APP_WRAPPER_FOR_inode_dio_wait
FUNCTION_WRAPPER_VOID(inode_dio_wait, (struct inode *inode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("inode_dio_wait is invoked.\n");
    PRE_WRAPPER_FUNC(inode);
    inode_dio_wait(inode);
    POST_WRAPPER_FUNC(inode);
    kern_printk("inode_dio_wait returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_simple_release_fs
#define APP_WRAPPER_FOR_simple_release_fs
#endif
 
#ifndef APP_WRAPPER_FOR_simple_release_fs
#define APP_WRAPPER_FOR_simple_release_fs
FUNCTION_WRAPPER_VOID(simple_release_fs, (struct vfsmount **mount, int *count), {
    WRAP_RECURSIVE(mount);
    TRACES_IF_WATCHPOINT(mount);
    SCAN_HEAD_FUNC(struct vfsmount *)(*(TO_UNWATCHED_ADDRESS(mount)));
    kern_printk("simple_release_fs is invoked.\n");
    PRE_WRAPPER_FUNC(mount, count);
    simple_release_fs(mount, count);
    POST_WRAPPER_FUNC(mount, count);
    kern_printk("simple_release_fs returned.\n");
    TRACES_IF_WATCHPOINT(mount);
    SCAN_HEAD_FUNC(struct vfsmount *)(*(TO_UNWATCHED_ADDRESS(mount)));
})
#endif


#ifndef KERN_ADDR_put_compat_timeval
#define APP_WRAPPER_FOR_put_compat_timeval
#endif
 
#ifndef APP_WRAPPER_FOR_put_compat_timeval
#define APP_WRAPPER_FOR_put_compat_timeval
FUNCTION_WRAPPER(put_compat_timeval, (const struct timeval *_arg1, struct compat_timeval *_arg2), {
    kern_printk("put_compat_timeval is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = put_compat_timeval(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("put_compat_timeval returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_smp_x86_platform_ipi
#define APP_WRAPPER_FOR_smp_x86_platform_ipi
#endif
 
#ifndef APP_WRAPPER_FOR_smp_x86_platform_ipi
#define APP_WRAPPER_FOR_smp_x86_platform_ipi
FUNCTION_WRAPPER_VOID(smp_x86_platform_ipi, (struct pt_regs *_arg1), {
    kern_printk("smp_x86_platform_ipi is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    smp_x86_platform_ipi(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("smp_x86_platform_ipi returned.\n");
})
#endif


#ifndef KERN_ADDR_dcache_readdir
#define APP_WRAPPER_FOR_dcache_readdir
#endif
 
#ifndef APP_WRAPPER_FOR_dcache_readdir
#define APP_WRAPPER_FOR_dcache_readdir
FUNCTION_WRAPPER(dcache_readdir, (struct file *_arg1, void *_arg2, filldir_t _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_FUNCTION(_arg3);
    kern_printk("dcache_readdir is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = dcache_readdir(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("dcache_readdir returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_page_put_link
#define APP_WRAPPER_FOR_page_put_link
#endif
 
#ifndef APP_WRAPPER_FOR_page_put_link
#define APP_WRAPPER_FOR_page_put_link
FUNCTION_WRAPPER_VOID(page_put_link, (struct dentry *_arg1, struct nameidata *_arg2, void *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct nameidata)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("page_put_link is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    page_put_link(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("page_put_link returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct nameidata)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_init_special_inode
#define APP_WRAPPER_FOR_init_special_inode
#endif
 
#ifndef APP_WRAPPER_FOR_init_special_inode
#define APP_WRAPPER_FOR_init_special_inode
FUNCTION_WRAPPER_VOID(init_special_inode, (struct inode *_arg1, umode_t _arg2, dev_t _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("init_special_inode is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    init_special_inode(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("init_special_inode returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_sk_attach_filter
#define APP_WRAPPER_FOR_sk_attach_filter
#endif
 
#ifndef APP_WRAPPER_FOR_sk_attach_filter
#define APP_WRAPPER_FOR_sk_attach_filter
FUNCTION_WRAPPER(sk_attach_filter, (struct sock_fprog *fprog, struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sk_attach_filter is invoked.\n");
    PRE_WRAPPER_FUNC(fprog, sk);
    int ret = sk_attach_filter(fprog, sk);
    POST_WRAPPER_FUNC(fprog, sk);
    kern_printk("sk_attach_filter returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blocking_notifier_chain_register
#define APP_WRAPPER_FOR_blocking_notifier_chain_register
#endif
 
#ifndef APP_WRAPPER_FOR_blocking_notifier_chain_register
#define APP_WRAPPER_FOR_blocking_notifier_chain_register
FUNCTION_WRAPPER(blocking_notifier_chain_register, (struct blocking_notifier_head *nh, struct notifier_block *nb), {
    WRAP_RECURSIVE(nh);
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct blocking_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    WRAP_RECURSIVE(nb);
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    kern_printk("blocking_notifier_chain_register is invoked.\n");
    PRE_WRAPPER_FUNC(nh, nb);
    int ret = blocking_notifier_chain_register(nh, nb);
    POST_WRAPPER_FUNC(nh, nb);
    kern_printk("blocking_notifier_chain_register returned.\n");
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct blocking_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kmem_cache_init
#define APP_WRAPPER_FOR_kmem_cache_init
#endif
 
#ifndef APP_WRAPPER_FOR_kmem_cache_init
#define APP_WRAPPER_FOR_kmem_cache_init
FUNCTION_WRAPPER_VOID(kmem_cache_init, (), {
    kern_printk("kmem_cache_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    kmem_cache_init();
    POST_WRAPPER_FUNC();
    kern_printk("kmem_cache_init returned.\n");
})
#endif


#ifndef KERN_ADDR___ata_change_queue_depth
#define APP_WRAPPER_FOR___ata_change_queue_depth
#endif
 
#ifndef APP_WRAPPER_FOR___ata_change_queue_depth
#define APP_WRAPPER_FOR___ata_change_queue_depth
FUNCTION_WRAPPER(__ata_change_queue_depth, (struct ata_port *ap, struct scsi_device *sdev, int queue_depth, int reason), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("__ata_change_queue_depth is invoked.\n");
    PRE_WRAPPER_FUNC(ap, sdev, queue_depth, reason);
    int ret = __ata_change_queue_depth(ap, sdev, queue_depth, reason);
    POST_WRAPPER_FUNC(ap, sdev, queue_depth, reason);
    kern_printk("__ata_change_queue_depth returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_unfile_buffer
#define APP_WRAPPER_FOR_jbd2_journal_unfile_buffer
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_unfile_buffer
#define APP_WRAPPER_FOR_jbd2_journal_unfile_buffer
FUNCTION_WRAPPER_VOID(jbd2_journal_unfile_buffer, (journal_t *_arg1, struct journal_head *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("jbd2_journal_unfile_buffer is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    jbd2_journal_unfile_buffer(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("jbd2_journal_unfile_buffer returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_handle_percpu_irq
#define APP_WRAPPER_FOR_handle_percpu_irq
#endif
 
#ifndef APP_WRAPPER_FOR_handle_percpu_irq
#define APP_WRAPPER_FOR_handle_percpu_irq
FUNCTION_WRAPPER_VOID(handle_percpu_irq, (unsigned int irq, struct irq_desc *desc), {
    WRAP_RECURSIVE(desc);
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct irq_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
    kern_printk("handle_percpu_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq, desc);
    handle_percpu_irq(irq, desc);
    POST_WRAPPER_FUNC(irq, desc);
    kern_printk("handle_percpu_irq returned.\n");
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct irq_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
})
#endif


#ifndef KERN_ADDR_pci_bus_read_config_byte
#define APP_WRAPPER_FOR_pci_bus_read_config_byte
#endif
 
#ifndef APP_WRAPPER_FOR_pci_bus_read_config_byte
#define APP_WRAPPER_FOR_pci_bus_read_config_byte
FUNCTION_WRAPPER(pci_bus_read_config_byte, (struct pci_bus *bus, unsigned int devfn, int where, u8 *val), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_bus_read_config_byte is invoked.\n");
    PRE_WRAPPER_FUNC(bus, devfn, where, val);
    int ret = pci_bus_read_config_byte(bus, devfn, where, val);
    POST_WRAPPER_FUNC(bus, devfn, where, val);
    kern_printk("pci_bus_read_config_byte returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vma_merge
#define APP_WRAPPER_FOR_vma_merge
#endif
 
#ifndef APP_WRAPPER_FOR_vma_merge
#define APP_WRAPPER_FOR_vma_merge
FUNCTION_WRAPPER(vma_merge, (struct mm_struct *_arg1, struct vm_area_struct *prev, unsigned long addr, unsigned long end, unsigned long vm_flags, struct anon_vma *_arg2, struct file *_arg3, unsigned long _arg4, struct mempolicy *_arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(prev);
    TRACES_IF_WATCHPOINT(prev);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(prev)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("vma_merge is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, prev, addr, end, vm_flags, _arg2, _arg3, _arg4, _arg5);
    struct vm_area_struct *ret = vma_merge(_arg1, prev, addr, end, vm_flags, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, prev, addr, end, vm_flags, _arg2, _arg3, _arg4, _arg5);
    kern_printk("vma_merge returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(prev);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(prev)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_ppoll
#define APP_WRAPPER_FOR_compat_sys_ppoll
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_ppoll
#define APP_WRAPPER_FOR_compat_sys_ppoll
FUNCTION_WRAPPER(compat_sys_ppoll, (struct pollfd *ufds, unsigned int nfds, struct compat_timespec *tsp, const compat_sigset_t *sigmask, compat_size_t sigsetsize), {
    kern_printk("compat_sys_ppoll is invoked.\n");
    PRE_WRAPPER_FUNC(ufds, nfds, tsp, sigmask, sigsetsize);
    long ret = compat_sys_ppoll(ufds, nfds, tsp, sigmask, sigsetsize);
    POST_WRAPPER_FUNC(ufds, nfds, tsp, sigmask, sigsetsize);
    kern_printk("compat_sys_ppoll returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_subtract_range
#define APP_WRAPPER_FOR_subtract_range
#endif
 
#ifndef APP_WRAPPER_FOR_subtract_range
#define APP_WRAPPER_FOR_subtract_range
FUNCTION_WRAPPER_VOID(subtract_range, (struct range *range, int az, u64 start, u64 end), {
    kern_printk("subtract_range is invoked.\n");
    PRE_WRAPPER_FUNC(range, az, start, end);
    subtract_range(range, az, start, end);
    POST_WRAPPER_FUNC(range, az, start, end);
    kern_printk("subtract_range returned.\n");
})
#endif


#ifndef KERN_ADDR_pvclock_get_vsyscall_time_info
#define APP_WRAPPER_FOR_pvclock_get_vsyscall_time_info
#endif
 
#ifndef APP_WRAPPER_FOR_pvclock_get_vsyscall_time_info
#define APP_WRAPPER_FOR_pvclock_get_vsyscall_time_info
FUNCTION_WRAPPER(pvclock_get_vsyscall_time_info, (int cpu), {
    kern_printk("pvclock_get_vsyscall_time_info is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    struct pvclock_vcpu_time_info *ret = pvclock_get_vsyscall_time_info(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("pvclock_get_vsyscall_time_info returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_seq_hlist_next_rcu
#define APP_WRAPPER_FOR_seq_hlist_next_rcu
#endif
 
#ifndef APP_WRAPPER_FOR_seq_hlist_next_rcu
#define APP_WRAPPER_FOR_seq_hlist_next_rcu
FUNCTION_WRAPPER(seq_hlist_next_rcu, (void *v, struct hlist_head *head, loff_t *ppos), {
    kern_printk("seq_hlist_next_rcu is invoked.\n");
    PRE_WRAPPER_FUNC(v, head, ppos);
    struct hlist_node *ret = seq_hlist_next_rcu(v, head, ppos);
    POST_WRAPPER_FUNC(v, head, ppos);
    kern_printk("seq_hlist_next_rcu returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_get_vendor_resource
#define APP_WRAPPER_FOR_acpi_get_vendor_resource
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_vendor_resource
#define APP_WRAPPER_FOR_acpi_get_vendor_resource
FUNCTION_WRAPPER(acpi_get_vendor_resource, (acpi_handle device, char *name, struct acpi_vendor_uuid *uuid, struct acpi_buffer *ret_buffer), {
    kern_printk("acpi_get_vendor_resource is invoked.\n");
    PRE_WRAPPER_FUNC(device, name, uuid, ret_buffer);
    acpi_status ret = acpi_get_vendor_resource(device, name, uuid, ret_buffer);
    POST_WRAPPER_FUNC(device, name, uuid, ret_buffer);
    kern_printk("acpi_get_vendor_resource returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___mutex_init
#define APP_WRAPPER_FOR___mutex_init
#endif
 
#ifndef APP_WRAPPER_FOR___mutex_init
#define APP_WRAPPER_FOR___mutex_init
FUNCTION_WRAPPER_VOID(__mutex_init, (struct mutex *lock, const char *name, struct lock_class_key *key), {
    WRAP_RECURSIVE(lock);
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
    kern_printk("__mutex_init is invoked.\n");
    PRE_WRAPPER_FUNC(lock, name, key);
    __mutex_init(lock, name, key);
    POST_WRAPPER_FUNC(lock, name, key);
    kern_printk("__mutex_init returned.\n");
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
})
#endif


#ifndef KERN_ADDR_class_for_each_device
#define APP_WRAPPER_FOR_class_for_each_device
#endif
 
#ifndef APP_WRAPPER_FOR_class_for_each_device
#define APP_WRAPPER_FOR_class_for_each_device
FUNCTION_WRAPPER(class_for_each_device, (struct class_ *class_, struct device *start, void *data, int (*fn)(struct device *, void *)), {
    WRAP_RECURSIVE(class_);
    TRACES_IF_WATCHPOINT(class_);
    SCAN_HEAD_FUNC(struct class_)(*(TO_UNWATCHED_ADDRESS(class_)));
    WRAP_RECURSIVE(start);
    TRACES_IF_WATCHPOINT(start);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(start)));
    WRAP_FUNCTION(fn);
    kern_printk("class_for_each_device is invoked.\n");
    PRE_WRAPPER_FUNC(class_, start, data, fn);
    int ret = class_for_each_device(class_, start, data, fn);
    POST_WRAPPER_FUNC(class_, start, data, fn);
    kern_printk("class_for_each_device returned.\n");
    TRACES_IF_WATCHPOINT(class_);
    SCAN_HEAD_FUNC(struct class_)(*(TO_UNWATCHED_ADDRESS(class_)));
    TRACES_IF_WATCHPOINT(start);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(start)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sparse_mem_maps_populate_node
#define APP_WRAPPER_FOR_sparse_mem_maps_populate_node
#endif
 
#ifndef APP_WRAPPER_FOR_sparse_mem_maps_populate_node
#define APP_WRAPPER_FOR_sparse_mem_maps_populate_node
FUNCTION_WRAPPER_VOID(sparse_mem_maps_populate_node, (struct page **map_map, unsigned long pnum_begin, unsigned long pnum_end, unsigned long map_count, int nodeid), {
    WRAP_RECURSIVE(map_map);
    TRACES_IF_WATCHPOINT(map_map);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(map_map)));
    kern_printk("sparse_mem_maps_populate_node is invoked.\n");
    PRE_WRAPPER_FUNC(map_map, pnum_begin, pnum_end, map_count, nodeid);
    sparse_mem_maps_populate_node(map_map, pnum_begin, pnum_end, map_count, nodeid);
    POST_WRAPPER_FUNC(map_map, pnum_begin, pnum_end, map_count, nodeid);
    kern_printk("sparse_mem_maps_populate_node returned.\n");
    TRACES_IF_WATCHPOINT(map_map);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(map_map)));
})
#endif


#ifndef KERN_ADDR___split_huge_page_pmd
#define APP_WRAPPER_FOR___split_huge_page_pmd
#endif
 
#ifndef APP_WRAPPER_FOR___split_huge_page_pmd
#define APP_WRAPPER_FOR___split_huge_page_pmd
FUNCTION_WRAPPER_VOID(__split_huge_page_pmd, (struct vm_area_struct *vma, unsigned long address, pmd_t *pmd), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("__split_huge_page_pmd is invoked.\n");
    PRE_WRAPPER_FUNC(vma, address, pmd);
    __split_huge_page_pmd(vma, address, pmd);
    POST_WRAPPER_FUNC(vma, address, pmd);
    kern_printk("__split_huge_page_pmd returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
})
#endif


#ifndef KERN_ADDR_jbd2_journal_start_commit
#define APP_WRAPPER_FOR_jbd2_journal_start_commit
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_start_commit
#define APP_WRAPPER_FOR_jbd2_journal_start_commit
FUNCTION_WRAPPER(jbd2_journal_start_commit, (journal_t *journal, tid_t *tid), {
    WRAP_RECURSIVE(journal);
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    kern_printk("jbd2_journal_start_commit is invoked.\n");
    PRE_WRAPPER_FUNC(journal, tid);
    int ret = jbd2_journal_start_commit(journal, tid);
    POST_WRAPPER_FUNC(journal, tid);
    kern_printk("jbd2_journal_start_commit returned.\n");
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    return ret;
})
#endif


#ifndef KERN_ADDR_rcu_check_callbacks
#define APP_WRAPPER_FOR_rcu_check_callbacks
#endif
 
#ifndef APP_WRAPPER_FOR_rcu_check_callbacks
#define APP_WRAPPER_FOR_rcu_check_callbacks
FUNCTION_WRAPPER_VOID(rcu_check_callbacks, (int cpu, int user), {
    kern_printk("rcu_check_callbacks is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, user);
    rcu_check_callbacks(cpu, user);
    POST_WRAPPER_FUNC(cpu, user);
    kern_printk("rcu_check_callbacks returned.\n");
})
#endif


#ifndef KERN_ADDR_register_hugetlbfs_with_node
#define APP_WRAPPER_FOR_register_hugetlbfs_with_node
#endif
 
#ifndef APP_WRAPPER_FOR_register_hugetlbfs_with_node
#define APP_WRAPPER_FOR_register_hugetlbfs_with_node
FUNCTION_WRAPPER_VOID(register_hugetlbfs_with_node, (node_registration_func_t doregister, node_registration_func_t unregister), {
    WRAP_FUNCTION(doregister);
    WRAP_FUNCTION(unregister);
    kern_printk("register_hugetlbfs_with_node is invoked.\n");
    PRE_WRAPPER_FUNC(doregister, unregister);
    register_hugetlbfs_with_node(doregister, unregister);
    POST_WRAPPER_FUNC(doregister, unregister);
    kern_printk("register_hugetlbfs_with_node returned.\n");
})
#endif


#ifndef KERN_ADDR_compat_sock_common_getsockopt
#define APP_WRAPPER_FOR_compat_sock_common_getsockopt
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sock_common_getsockopt
#define APP_WRAPPER_FOR_compat_sock_common_getsockopt
FUNCTION_WRAPPER(compat_sock_common_getsockopt, (struct socket *sock, int level, int optname, char *optval, int *optlen), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    kern_printk("compat_sock_common_getsockopt is invoked.\n");
    PRE_WRAPPER_FUNC(sock, level, optname, optval, optlen);
    int ret = compat_sock_common_getsockopt(sock, level, optname, optval, optlen);
    POST_WRAPPER_FUNC(sock, level, optname, optval, optlen);
    kern_printk("compat_sock_common_getsockopt returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    return ret;
})
#endif


#ifndef KERN_ADDR_free_css_id
#define APP_WRAPPER_FOR_free_css_id
#endif
 
#ifndef APP_WRAPPER_FOR_free_css_id
#define APP_WRAPPER_FOR_free_css_id
FUNCTION_WRAPPER_VOID(free_css_id, (struct cgroup_subsys *ss, struct cgroup_subsys_state *css), {
    WRAP_RECURSIVE(ss);
    TRACES_IF_WATCHPOINT(ss);
    SCAN_HEAD_FUNC(struct cgroup_subsys)(*(TO_UNWATCHED_ADDRESS(ss)));
    WRAP_RECURSIVE(css);
    TRACES_IF_WATCHPOINT(css);
    SCAN_HEAD_FUNC(struct cgroup_subsys_state)(*(TO_UNWATCHED_ADDRESS(css)));
    kern_printk("free_css_id is invoked.\n");
    PRE_WRAPPER_FUNC(ss, css);
    free_css_id(ss, css);
    POST_WRAPPER_FUNC(ss, css);
    kern_printk("free_css_id returned.\n");
    TRACES_IF_WATCHPOINT(ss);
    SCAN_HEAD_FUNC(struct cgroup_subsys)(*(TO_UNWATCHED_ADDRESS(ss)));
    TRACES_IF_WATCHPOINT(css);
    SCAN_HEAD_FUNC(struct cgroup_subsys_state)(*(TO_UNWATCHED_ADDRESS(css)));
})
#endif


#ifndef KERN_ADDR_sk_reset_timer
#define APP_WRAPPER_FOR_sk_reset_timer
#endif
 
#ifndef APP_WRAPPER_FOR_sk_reset_timer
#define APP_WRAPPER_FOR_sk_reset_timer
FUNCTION_WRAPPER_VOID(sk_reset_timer, (struct sock *sk, struct timer_list *timer, unsigned long expires), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(timer);
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(timer)));
    kern_printk("sk_reset_timer is invoked.\n");
    PRE_WRAPPER_FUNC(sk, timer, expires);
    sk_reset_timer(sk, timer, expires);
    POST_WRAPPER_FUNC(sk, timer, expires);
    kern_printk("sk_reset_timer returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(timer)));
})
#endif


#ifndef KERN_ADDR_clockevents_register_device
#define APP_WRAPPER_FOR_clockevents_register_device
#endif
 
#ifndef APP_WRAPPER_FOR_clockevents_register_device
#define APP_WRAPPER_FOR_clockevents_register_device
FUNCTION_WRAPPER_VOID(clockevents_register_device, (struct clock_event_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct clock_event_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("clockevents_register_device is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    clockevents_register_device(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("clockevents_register_device returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct clock_event_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_acpi_bios_error
#define APP_WRAPPER_FOR_acpi_bios_error
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_bios_error
#define APP_WRAPPER_FOR_acpi_bios_error
FUNCTION_WRAPPER_VOID(acpi_bios_error, (const char *module_name, u32 line_number, const char *format, ...), {
    va_list args__;
    va_start(args__, format);
    // TODO: variadic arguments
    kern_printk("acpi_bios_error is invoked.\n");
    PRE_WRAPPER_FUNC(module_name, line_number, format);
    acpi_bios_error(module_name, line_number, format);
    POST_WRAPPER_FUNC(module_name, line_number, format);
    kern_printk("acpi_bios_error returned.\n");
    va_end(args__);
})
#endif


#ifndef KERN_ADDR_jbd2_journal_commit_transaction
#define APP_WRAPPER_FOR_jbd2_journal_commit_transaction
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_commit_transaction
#define APP_WRAPPER_FOR_jbd2_journal_commit_transaction
FUNCTION_WRAPPER_VOID(jbd2_journal_commit_transaction, (journal_t *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_commit_transaction is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    jbd2_journal_commit_transaction(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("jbd2_journal_commit_transaction returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_kmem_cache_free
#define APP_WRAPPER_FOR_kmem_cache_free
#endif
 
#ifndef APP_WRAPPER_FOR_kmem_cache_free
#define APP_WRAPPER_FOR_kmem_cache_free
FUNCTION_WRAPPER_VOID(kmem_cache_free, (struct kmem_cache *_arg1, void *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kmem_cache)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("kmem_cache_free is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    kmem_cache_free(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("kmem_cache_free returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kmem_cache)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_proc_flush_task
#define APP_WRAPPER_FOR_proc_flush_task
#endif
 
#ifndef APP_WRAPPER_FOR_proc_flush_task
#define APP_WRAPPER_FOR_proc_flush_task
FUNCTION_WRAPPER_VOID(proc_flush_task, (struct task_struct *task), {
    WRAP_RECURSIVE(task);
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    kern_printk("proc_flush_task is invoked.\n");
    PRE_WRAPPER_FUNC(task);
    proc_flush_task(task);
    POST_WRAPPER_FUNC(task);
    kern_printk("proc_flush_task returned.\n");
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
})
#endif


#ifndef KERN_ADDR_do_schedule_next_timer
#define APP_WRAPPER_FOR_do_schedule_next_timer
#endif
 
#ifndef APP_WRAPPER_FOR_do_schedule_next_timer
#define APP_WRAPPER_FOR_do_schedule_next_timer
FUNCTION_WRAPPER_VOID(do_schedule_next_timer, (struct siginfo *info), {
    kern_printk("do_schedule_next_timer is invoked.\n");
    PRE_WRAPPER_FUNC(info);
    do_schedule_next_timer(info);
    POST_WRAPPER_FUNC(info);
    kern_printk("do_schedule_next_timer returned.\n");
})
#endif


#ifndef KERN_ADDR_elv_latter_request
#define APP_WRAPPER_FOR_elv_latter_request
#endif
 
#ifndef APP_WRAPPER_FOR_elv_latter_request
#define APP_WRAPPER_FOR_elv_latter_request
FUNCTION_WRAPPER(elv_latter_request, (struct request_queue *_arg1, struct request *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("elv_latter_request is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct request *ret = elv_latter_request(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("elv_latter_request returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_kernel_restart_prepare
#define APP_WRAPPER_FOR_kernel_restart_prepare
#endif
 
#ifndef APP_WRAPPER_FOR_kernel_restart_prepare
#define APP_WRAPPER_FOR_kernel_restart_prepare
FUNCTION_WRAPPER_VOID(kernel_restart_prepare, (char *cmd), {
    kern_printk("kernel_restart_prepare is invoked.\n");
    PRE_WRAPPER_FUNC(cmd);
    kernel_restart_prepare(cmd);
    POST_WRAPPER_FUNC(cmd);
    kern_printk("kernel_restart_prepare returned.\n");
})
#endif


#ifndef KERN_ADDR_put_compat_timespec
#define APP_WRAPPER_FOR_put_compat_timespec
#endif
 
#ifndef APP_WRAPPER_FOR_put_compat_timespec
#define APP_WRAPPER_FOR_put_compat_timespec
FUNCTION_WRAPPER(put_compat_timespec, (const struct timespec *_arg1, struct compat_timespec *_arg2), {
    kern_printk("put_compat_timespec is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = put_compat_timespec(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("put_compat_timespec returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___css_tryget
#define APP_WRAPPER_FOR___css_tryget
#endif
 
#ifndef APP_WRAPPER_FOR___css_tryget
#define APP_WRAPPER_FOR___css_tryget
FUNCTION_WRAPPER(__css_tryget, (struct cgroup_subsys_state *css), {
    WRAP_RECURSIVE(css);
    TRACES_IF_WATCHPOINT(css);
    SCAN_HEAD_FUNC(struct cgroup_subsys_state)(*(TO_UNWATCHED_ADDRESS(css)));
    kern_printk("__css_tryget is invoked.\n");
    PRE_WRAPPER_FUNC(css);
    bool ret = __css_tryget(css);
    POST_WRAPPER_FUNC(css);
    kern_printk("__css_tryget returned.\n");
    TRACES_IF_WATCHPOINT(css);
    SCAN_HEAD_FUNC(struct cgroup_subsys_state)(*(TO_UNWATCHED_ADDRESS(css)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mark_mounts_for_expiry
#define APP_WRAPPER_FOR_mark_mounts_for_expiry
#endif
 
#ifndef APP_WRAPPER_FOR_mark_mounts_for_expiry
#define APP_WRAPPER_FOR_mark_mounts_for_expiry
FUNCTION_WRAPPER_VOID(mark_mounts_for_expiry, (struct list_head *mounts), {
    kern_printk("mark_mounts_for_expiry is invoked.\n");
    PRE_WRAPPER_FUNC(mounts);
    mark_mounts_for_expiry(mounts);
    POST_WRAPPER_FUNC(mounts);
    kern_printk("mark_mounts_for_expiry returned.\n");
})
#endif


#ifndef KERN_ADDR_netdev_crit
#define APP_WRAPPER_FOR_netdev_crit
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_crit
#define APP_WRAPPER_FOR_netdev_crit
FUNCTION_WRAPPER(netdev_crit, (const struct net_device *dev, const char *format, ...), {
    va_list args__;
    va_start(args__, format);
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    // TODO: variadic arguments
    kern_printk("netdev_crit is invoked.\n");
    PRE_WRAPPER_FUNC(dev, format);
    int ret = netdev_crit(dev, format);
    POST_WRAPPER_FUNC(dev, format);
    kern_printk("netdev_crit returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_read_cache_page_async
#define APP_WRAPPER_FOR_read_cache_page_async
#endif
 
#ifndef APP_WRAPPER_FOR_read_cache_page_async
#define APP_WRAPPER_FOR_read_cache_page_async
FUNCTION_WRAPPER(read_cache_page_async, (struct address_space *mapping, unsigned long index, filler_t *filler, void *data), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    WRAP_FUNCTION(filler);
    kern_printk("read_cache_page_async is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, index, filler, data);
    struct page *ret = read_cache_page_async(mapping, index, filler, data);
    POST_WRAPPER_FUNC(mapping, index, filler, data);
    kern_printk("read_cache_page_async returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_port_freeze
#define APP_WRAPPER_FOR_ata_port_freeze
#endif
 
#ifndef APP_WRAPPER_FOR_ata_port_freeze
#define APP_WRAPPER_FOR_ata_port_freeze
FUNCTION_WRAPPER(ata_port_freeze, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_port_freeze is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    int ret = ata_port_freeze(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_port_freeze returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR___pci_register_driver
#define APP_WRAPPER_FOR___pci_register_driver
#endif
 
#ifndef APP_WRAPPER_FOR___pci_register_driver
#define APP_WRAPPER_FOR___pci_register_driver
FUNCTION_WRAPPER(__pci_register_driver, (struct pci_driver *_arg1, struct module *_arg2, const char *mod_name), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_driver)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("__pci_register_driver is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, mod_name);
    int ret = __pci_register_driver(_arg1, _arg2, mod_name);
    POST_WRAPPER_FUNC(_arg1, _arg2, mod_name);
    kern_printk("__pci_register_driver returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_driver)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_invalidate_partition
#define APP_WRAPPER_FOR_invalidate_partition
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_partition
#define APP_WRAPPER_FOR_invalidate_partition
FUNCTION_WRAPPER(invalidate_partition, (struct gendisk *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("invalidate_partition is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = invalidate_partition(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("invalidate_partition returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_init_revoke
#define APP_WRAPPER_FOR_jbd2_journal_init_revoke
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_init_revoke
#define APP_WRAPPER_FOR_jbd2_journal_init_revoke
FUNCTION_WRAPPER(jbd2_journal_init_revoke, (journal_t *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_init_revoke is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = jbd2_journal_init_revoke(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("jbd2_journal_init_revoke returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_free_hot_cold_page
#define APP_WRAPPER_FOR_free_hot_cold_page
#endif
 
#ifndef APP_WRAPPER_FOR_free_hot_cold_page
#define APP_WRAPPER_FOR_free_hot_cold_page
FUNCTION_WRAPPER_VOID(free_hot_cold_page, (struct page *page, int cold), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("free_hot_cold_page is invoked.\n");
    PRE_WRAPPER_FUNC(page, cold);
    free_hot_cold_page(page, cold);
    POST_WRAPPER_FUNC(page, cold);
    kern_printk("free_hot_cold_page returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_acpi_unregister_ioapic
#define APP_WRAPPER_FOR_acpi_unregister_ioapic
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_unregister_ioapic
#define APP_WRAPPER_FOR_acpi_unregister_ioapic
FUNCTION_WRAPPER(acpi_unregister_ioapic, (acpi_handle handle, u32 gsi_base), {
    kern_printk("acpi_unregister_ioapic is invoked.\n");
    PRE_WRAPPER_FUNC(handle, gsi_base);
    int ret = acpi_unregister_ioapic(handle, gsi_base);
    POST_WRAPPER_FUNC(handle, gsi_base);
    kern_printk("acpi_unregister_ioapic returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_netdev_stats_to_stats64
#define APP_WRAPPER_FOR_netdev_stats_to_stats64
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_stats_to_stats64
#define APP_WRAPPER_FOR_netdev_stats_to_stats64
FUNCTION_WRAPPER_VOID(netdev_stats_to_stats64, (struct rtnl_link_stats64 *stats64, const struct net_device_stats *netdev_stats), {
    kern_printk("netdev_stats_to_stats64 is invoked.\n");
    PRE_WRAPPER_FUNC(stats64, netdev_stats);
    netdev_stats_to_stats64(stats64, netdev_stats);
    POST_WRAPPER_FUNC(stats64, netdev_stats);
    kern_printk("netdev_stats_to_stats64 returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_subsys_runtime_resume
#define APP_WRAPPER_FOR_acpi_subsys_runtime_resume
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_subsys_runtime_resume
#define APP_WRAPPER_FOR_acpi_subsys_runtime_resume
FUNCTION_WRAPPER(acpi_subsys_runtime_resume, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("acpi_subsys_runtime_resume is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = acpi_subsys_runtime_resume(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("acpi_subsys_runtime_resume returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_uc_add
#define APP_WRAPPER_FOR_dev_uc_add
#endif
 
#ifndef APP_WRAPPER_FOR_dev_uc_add
#define APP_WRAPPER_FOR_dev_uc_add
FUNCTION_WRAPPER(dev_uc_add, (struct net_device *dev, unsigned const char *addr), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_uc_add is invoked.\n");
    PRE_WRAPPER_FUNC(dev, addr);
    int ret = dev_uc_add(dev, addr);
    POST_WRAPPER_FUNC(dev, addr);
    kern_printk("dev_uc_add returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR___pte_alloc
#define APP_WRAPPER_FOR___pte_alloc
#endif
 
#ifndef APP_WRAPPER_FOR___pte_alloc
#define APP_WRAPPER_FOR___pte_alloc
FUNCTION_WRAPPER(__pte_alloc, (struct mm_struct *mm, struct vm_area_struct *vma, pmd_t *pmd, unsigned long address), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("__pte_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(mm, vma, pmd, address);
    int ret = __pte_alloc(mm, vma, pmd, address);
    POST_WRAPPER_FUNC(mm, vma, pmd, address);
    kern_printk("__pte_alloc returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_id_xfermask
#define APP_WRAPPER_FOR_ata_id_xfermask
#endif
 
#ifndef APP_WRAPPER_FOR_ata_id_xfermask
#define APP_WRAPPER_FOR_ata_id_xfermask
FUNCTION_WRAPPER(ata_id_xfermask, (const u16 *id), {
    kern_printk("ata_id_xfermask is invoked.\n");
    PRE_WRAPPER_FUNC(id);
    long ret = ata_id_xfermask(id);
    POST_WRAPPER_FUNC(id);
    kern_printk("ata_id_xfermask returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sata_scr_valid
#define APP_WRAPPER_FOR_sata_scr_valid
#endif
 
#ifndef APP_WRAPPER_FOR_sata_scr_valid
#define APP_WRAPPER_FOR_sata_scr_valid
FUNCTION_WRAPPER(sata_scr_valid, (struct ata_link *link), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    kern_printk("sata_scr_valid is invoked.\n");
    PRE_WRAPPER_FUNC(link);
    int ret = sata_scr_valid(link);
    POST_WRAPPER_FUNC(link);
    kern_printk("sata_scr_valid returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    return ret;
})
#endif


#ifndef KERN_ADDR_call_rcu_sched
#define APP_WRAPPER_FOR_call_rcu_sched
#endif
 
#ifndef APP_WRAPPER_FOR_call_rcu_sched
#define APP_WRAPPER_FOR_call_rcu_sched
FUNCTION_WRAPPER_VOID(call_rcu_sched, (struct callback_head *head, void (*func)(struct callback_head *)), {
    WRAP_RECURSIVE(head);
    TRACES_IF_WATCHPOINT(head);
    SCAN_HEAD_FUNC(struct callback_head)(*(TO_UNWATCHED_ADDRESS(head)));
    WRAP_FUNCTION(func);
    kern_printk("call_rcu_sched is invoked.\n");
    PRE_WRAPPER_FUNC(head, func);
    call_rcu_sched(head, func);
    POST_WRAPPER_FUNC(head, func);
    kern_printk("call_rcu_sched returned.\n");
    TRACES_IF_WATCHPOINT(head);
    SCAN_HEAD_FUNC(struct callback_head)(*(TO_UNWATCHED_ADDRESS(head)));
})
#endif


#ifndef KERN_ADDR_skb_dequeue_tail
#define APP_WRAPPER_FOR_skb_dequeue_tail
#endif
 
#ifndef APP_WRAPPER_FOR_skb_dequeue_tail
#define APP_WRAPPER_FOR_skb_dequeue_tail
FUNCTION_WRAPPER(skb_dequeue_tail, (struct sk_buff_head *list), {
    WRAP_RECURSIVE(list);
    TRACES_IF_WATCHPOINT(list);
    SCAN_HEAD_FUNC(struct sk_buff_head)(*(TO_UNWATCHED_ADDRESS(list)));
    kern_printk("skb_dequeue_tail is invoked.\n");
    PRE_WRAPPER_FUNC(list);
    struct sk_buff *ret = skb_dequeue_tail(list);
    POST_WRAPPER_FUNC(list);
    kern_printk("skb_dequeue_tail returned.\n");
    TRACES_IF_WATCHPOINT(list);
    SCAN_HEAD_FUNC(struct sk_buff_head)(*(TO_UNWATCHED_ADDRESS(list)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_mem_cgroup_sockets_destroy
#define APP_WRAPPER_FOR_mem_cgroup_sockets_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_mem_cgroup_sockets_destroy
#define APP_WRAPPER_FOR_mem_cgroup_sockets_destroy
FUNCTION_WRAPPER_VOID(mem_cgroup_sockets_destroy, (struct mem_cgroup *memcg), {
    kern_printk("mem_cgroup_sockets_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(memcg);
    mem_cgroup_sockets_destroy(memcg);
    POST_WRAPPER_FUNC(memcg);
    kern_printk("mem_cgroup_sockets_destroy returned.\n");
})
#endif


#ifndef KERN_ADDR_sg_scsi_ioctl
#define APP_WRAPPER_FOR_sg_scsi_ioctl
#endif
 
#ifndef APP_WRAPPER_FOR_sg_scsi_ioctl
#define APP_WRAPPER_FOR_sg_scsi_ioctl
FUNCTION_WRAPPER(sg_scsi_ioctl, (struct request_queue *_arg1, struct gendisk *_arg2, fmode_t _arg3, struct scsi_ioctl_command *_arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("sg_scsi_ioctl is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = sg_scsi_ioctl(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("sg_scsi_ioctl returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_nr_free_buffer_pages
#define APP_WRAPPER_FOR_nr_free_buffer_pages
#endif
 
#ifndef APP_WRAPPER_FOR_nr_free_buffer_pages
#define APP_WRAPPER_FOR_nr_free_buffer_pages
FUNCTION_WRAPPER(nr_free_buffer_pages, (), {
    kern_printk("nr_free_buffer_pages is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = nr_free_buffer_pages();
    POST_WRAPPER_FUNC();
    kern_printk("nr_free_buffer_pages returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___krealloc
#define APP_WRAPPER_FOR___krealloc
#endif
 
#ifndef APP_WRAPPER_FOR___krealloc
#define APP_WRAPPER_FOR___krealloc
FUNCTION_WRAPPER(__krealloc, (const void *_arg1, size_t _arg2, gfp_t _arg3), {
    kern_printk("__krealloc is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    void *ret = __krealloc(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("__krealloc returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pm_qos_update_request_timeout
#define APP_WRAPPER_FOR_pm_qos_update_request_timeout
#endif
 
#ifndef APP_WRAPPER_FOR_pm_qos_update_request_timeout
#define APP_WRAPPER_FOR_pm_qos_update_request_timeout
FUNCTION_WRAPPER_VOID(pm_qos_update_request_timeout, (struct pm_qos_request *req, s32 new_value, unsigned long timeout_us), {
    WRAP_RECURSIVE(req);
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct pm_qos_request)(*(TO_UNWATCHED_ADDRESS(req)));
    kern_printk("pm_qos_update_request_timeout is invoked.\n");
    PRE_WRAPPER_FUNC(req, new_value, timeout_us);
    pm_qos_update_request_timeout(req, new_value, timeout_us);
    POST_WRAPPER_FUNC(req, new_value, timeout_us);
    kern_printk("pm_qos_update_request_timeout returned.\n");
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct pm_qos_request)(*(TO_UNWATCHED_ADDRESS(req)));
})
#endif


#ifndef KERN_ADDR_klist_iter_init_node
#define APP_WRAPPER_FOR_klist_iter_init_node
#endif
 
#ifndef APP_WRAPPER_FOR_klist_iter_init_node
#define APP_WRAPPER_FOR_klist_iter_init_node
FUNCTION_WRAPPER_VOID(klist_iter_init_node, (struct klist *k, struct klist_iter *i, struct klist_node *n), {
    WRAP_RECURSIVE(k);
    TRACES_IF_WATCHPOINT(k);
    SCAN_HEAD_FUNC(struct klist)(*(TO_UNWATCHED_ADDRESS(k)));
    WRAP_RECURSIVE(i);
    TRACES_IF_WATCHPOINT(i);
    SCAN_HEAD_FUNC(struct klist_iter)(*(TO_UNWATCHED_ADDRESS(i)));
    kern_printk("klist_iter_init_node is invoked.\n");
    PRE_WRAPPER_FUNC(k, i, n);
    klist_iter_init_node(k, i, n);
    POST_WRAPPER_FUNC(k, i, n);
    kern_printk("klist_iter_init_node returned.\n");
    TRACES_IF_WATCHPOINT(k);
    SCAN_HEAD_FUNC(struct klist)(*(TO_UNWATCHED_ADDRESS(k)));
    TRACES_IF_WATCHPOINT(i);
    SCAN_HEAD_FUNC(struct klist_iter)(*(TO_UNWATCHED_ADDRESS(i)));
})
#endif


#ifndef KERN_ADDR_irq_setup_alt_chip
#define APP_WRAPPER_FOR_irq_setup_alt_chip
#endif
 
#ifndef APP_WRAPPER_FOR_irq_setup_alt_chip
#define APP_WRAPPER_FOR_irq_setup_alt_chip
FUNCTION_WRAPPER(irq_setup_alt_chip, (struct irq_data *d, unsigned int type), {
    WRAP_RECURSIVE(d);
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(d)));
    kern_printk("irq_setup_alt_chip is invoked.\n");
    PRE_WRAPPER_FUNC(d, type);
    int ret = irq_setup_alt_chip(d, type);
    POST_WRAPPER_FUNC(d, type);
    kern_printk("irq_setup_alt_chip returned.\n");
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(d)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kill_pid_info_as_cred
#define APP_WRAPPER_FOR_kill_pid_info_as_cred
#endif
 
#ifndef APP_WRAPPER_FOR_kill_pid_info_as_cred
#define APP_WRAPPER_FOR_kill_pid_info_as_cred
FUNCTION_WRAPPER(kill_pid_info_as_cred, (int _arg1, struct siginfo *_arg2, struct pid *_arg3, const struct cred *_arg4, u32 _arg5), {
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    WRAP_RECURSIVE(_arg4);
    TRACES_IF_WATCHPOINT(_arg4);
    SCAN_HEAD_FUNC(const struct cred)(*(TO_UNWATCHED_ADDRESS(_arg4)));
    kern_printk("kill_pid_info_as_cred is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = kill_pid_info_as_cred(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("kill_pid_info_as_cred returned.\n");
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    TRACES_IF_WATCHPOINT(_arg4);
    SCAN_HEAD_FUNC(const struct cred)(*(TO_UNWATCHED_ADDRESS(_arg4)));
    return ret;
})
#endif


#ifndef KERN_ADDR_neigh_changeaddr
#define APP_WRAPPER_FOR_neigh_changeaddr
#endif
 
#ifndef APP_WRAPPER_FOR_neigh_changeaddr
#define APP_WRAPPER_FOR_neigh_changeaddr
FUNCTION_WRAPPER_VOID(neigh_changeaddr, (struct neigh_table *tbl, struct net_device *dev), {
    WRAP_RECURSIVE(tbl);
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("neigh_changeaddr is invoked.\n");
    PRE_WRAPPER_FUNC(tbl, dev);
    neigh_changeaddr(tbl, dev);
    POST_WRAPPER_FUNC(tbl, dev);
    kern_printk("neigh_changeaddr returned.\n");
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_dqput
#define APP_WRAPPER_FOR_dqput
#endif
 
#ifndef APP_WRAPPER_FOR_dqput
#define APP_WRAPPER_FOR_dqput
FUNCTION_WRAPPER_VOID(dqput, (struct dquot *dquot), {
    WRAP_RECURSIVE(dquot);
    TRACES_IF_WATCHPOINT(dquot);
    SCAN_HEAD_FUNC(struct dquot)(*(TO_UNWATCHED_ADDRESS(dquot)));
    kern_printk("dqput is invoked.\n");
    PRE_WRAPPER_FUNC(dquot);
    dqput(dquot);
    POST_WRAPPER_FUNC(dquot);
    kern_printk("dqput returned.\n");
    TRACES_IF_WATCHPOINT(dquot);
    SCAN_HEAD_FUNC(struct dquot)(*(TO_UNWATCHED_ADDRESS(dquot)));
})
#endif


#ifndef KERN_ADDR___get_vm_area
#define APP_WRAPPER_FOR___get_vm_area
#endif
 
#ifndef APP_WRAPPER_FOR___get_vm_area
#define APP_WRAPPER_FOR___get_vm_area
FUNCTION_WRAPPER(__get_vm_area, (unsigned long size, unsigned long flags, unsigned long start, unsigned long end), {
    kern_printk("__get_vm_area is invoked.\n");
    PRE_WRAPPER_FUNC(size, flags, start, end);
    struct vm_struct *ret = __get_vm_area(size, flags, start, end);
    POST_WRAPPER_FUNC(size, flags, start, end);
    kern_printk("__get_vm_area returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sched_getaffinity
#define APP_WRAPPER_FOR_sched_getaffinity
#endif
 
#ifndef APP_WRAPPER_FOR_sched_getaffinity
#define APP_WRAPPER_FOR_sched_getaffinity
FUNCTION_WRAPPER(sched_getaffinity, (pid_t pid, struct cpumask *mask), {
    kern_printk("sched_getaffinity is invoked.\n");
    PRE_WRAPPER_FUNC(pid, mask);
    long ret = sched_getaffinity(pid, mask);
    POST_WRAPPER_FUNC(pid, mask);
    kern_printk("sched_getaffinity returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_io_submit
#define APP_WRAPPER_FOR_compat_sys_io_submit
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_io_submit
#define APP_WRAPPER_FOR_compat_sys_io_submit
FUNCTION_WRAPPER(compat_sys_io_submit, (aio_context_t ctx_id, int nr, u32 *iocb), {
    kern_printk("compat_sys_io_submit is invoked.\n");
    PRE_WRAPPER_FUNC(ctx_id, nr, iocb);
    long ret = compat_sys_io_submit(ctx_id, nr, iocb);
    POST_WRAPPER_FUNC(ctx_id, nr, iocb);
    kern_printk("compat_sys_io_submit returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_fsync
#define APP_WRAPPER_FOR_vfs_fsync
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_fsync
#define APP_WRAPPER_FOR_vfs_fsync
FUNCTION_WRAPPER(vfs_fsync, (struct file *file, int datasync), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("vfs_fsync is invoked.\n");
    PRE_WRAPPER_FUNC(file, datasync);
    int ret = vfs_fsync(file, datasync);
    POST_WRAPPER_FUNC(file, datasync);
    kern_printk("vfs_fsync returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_install_gpe_handler
#define APP_WRAPPER_FOR_acpi_install_gpe_handler
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_install_gpe_handler
#define APP_WRAPPER_FOR_acpi_install_gpe_handler
FUNCTION_WRAPPER(acpi_install_gpe_handler, (acpi_handle gpe_device, u32 gpe_number, u32 type, acpi_gpe_handler address, void *context), {
    WRAP_FUNCTION(address);
    kern_printk("acpi_install_gpe_handler is invoked.\n");
    PRE_WRAPPER_FUNC(gpe_device, gpe_number, type, address, context);
    acpi_status ret = acpi_install_gpe_handler(gpe_device, gpe_number, type, address, context);
    POST_WRAPPER_FUNC(gpe_device, gpe_number, type, address, context);
    kern_printk("acpi_install_gpe_handler returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_scsi_cmd_get_serial
#define APP_WRAPPER_FOR_scsi_cmd_get_serial
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_cmd_get_serial
#define APP_WRAPPER_FOR_scsi_cmd_get_serial
FUNCTION_WRAPPER_VOID(scsi_cmd_get_serial, (struct Scsi_Host *_arg1, struct scsi_cmnd *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("scsi_cmd_get_serial is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    scsi_cmd_get_serial(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("scsi_cmd_get_serial returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_pnp_register_card_driver
#define APP_WRAPPER_FOR_pnp_register_card_driver
#endif
 
#ifndef APP_WRAPPER_FOR_pnp_register_card_driver
#define APP_WRAPPER_FOR_pnp_register_card_driver
FUNCTION_WRAPPER(pnp_register_card_driver, (struct pnp_card_driver *drv), {
    WRAP_RECURSIVE(drv);
    TRACES_IF_WATCHPOINT(drv);
    SCAN_HEAD_FUNC(struct pnp_card_driver)(*(TO_UNWATCHED_ADDRESS(drv)));
    kern_printk("pnp_register_card_driver is invoked.\n");
    PRE_WRAPPER_FUNC(drv);
    int ret = pnp_register_card_driver(drv);
    POST_WRAPPER_FUNC(drv);
    kern_printk("pnp_register_card_driver returned.\n");
    TRACES_IF_WATCHPOINT(drv);
    SCAN_HEAD_FUNC(struct pnp_card_driver)(*(TO_UNWATCHED_ADDRESS(drv)));
    return ret;
})
#endif


#ifndef KERN_ADDR_do_notify_resume
#define APP_WRAPPER_FOR_do_notify_resume
#endif
 
#ifndef APP_WRAPPER_FOR_do_notify_resume
#define APP_WRAPPER_FOR_do_notify_resume
FUNCTION_WRAPPER_VOID(do_notify_resume, (struct pt_regs *_arg1, void *_arg2, __u32 _arg3), {
    kern_printk("do_notify_resume is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    do_notify_resume(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("do_notify_resume returned.\n");
})
#endif


#ifndef KERN_ADDR_ec_get_handle
#define APP_WRAPPER_FOR_ec_get_handle
#endif
 
#ifndef APP_WRAPPER_FOR_ec_get_handle
#define APP_WRAPPER_FOR_ec_get_handle
FUNCTION_WRAPPER(ec_get_handle, (), {
    kern_printk("ec_get_handle is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_handle ret = ec_get_handle();
    POST_WRAPPER_FUNC();
    kern_printk("ec_get_handle returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_clocksource_default_clock
#define APP_WRAPPER_FOR_clocksource_default_clock
#endif
 
#ifndef APP_WRAPPER_FOR_clocksource_default_clock
#define APP_WRAPPER_FOR_clocksource_default_clock
FUNCTION_WRAPPER(clocksource_default_clock, (), {
    kern_printk("clocksource_default_clock is invoked.\n");
    PRE_WRAPPER_FUNC();
    struct clocksource *ret = clocksource_default_clock();
    POST_WRAPPER_FUNC();
    kern_printk("clocksource_default_clock returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_rq_count_integrity_sg
#define APP_WRAPPER_FOR_blk_rq_count_integrity_sg
#endif
 
#ifndef APP_WRAPPER_FOR_blk_rq_count_integrity_sg
#define APP_WRAPPER_FOR_blk_rq_count_integrity_sg
FUNCTION_WRAPPER(blk_rq_count_integrity_sg, (struct request_queue *_arg1, struct bio *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("blk_rq_count_integrity_sg is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = blk_rq_count_integrity_sg(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_rq_count_integrity_sg returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_call_function_single_interrupt
#define APP_WRAPPER_FOR_call_function_single_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_call_function_single_interrupt
#define APP_WRAPPER_FOR_call_function_single_interrupt
FUNCTION_WRAPPER_VOID(call_function_single_interrupt, (), {
    kern_printk("call_function_single_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC();
    call_function_single_interrupt();
    POST_WRAPPER_FUNC();
    kern_printk("call_function_single_interrupt returned.\n");
})
#endif


#ifndef KERN_ADDR_atomic_notifier_chain_register
#define APP_WRAPPER_FOR_atomic_notifier_chain_register
#endif
 
#ifndef APP_WRAPPER_FOR_atomic_notifier_chain_register
#define APP_WRAPPER_FOR_atomic_notifier_chain_register
FUNCTION_WRAPPER(atomic_notifier_chain_register, (struct atomic_notifier_head *nh, struct notifier_block *nb), {
    WRAP_RECURSIVE(nh);
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct atomic_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    WRAP_RECURSIVE(nb);
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    kern_printk("atomic_notifier_chain_register is invoked.\n");
    PRE_WRAPPER_FUNC(nh, nb);
    int ret = atomic_notifier_chain_register(nh, nb);
    POST_WRAPPER_FUNC(nh, nb);
    kern_printk("atomic_notifier_chain_register returned.\n");
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct atomic_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_radix_tree_range_tag_if_tagged
#define APP_WRAPPER_FOR_radix_tree_range_tag_if_tagged
#endif
 
#ifndef APP_WRAPPER_FOR_radix_tree_range_tag_if_tagged
#define APP_WRAPPER_FOR_radix_tree_range_tag_if_tagged
FUNCTION_WRAPPER(radix_tree_range_tag_if_tagged, (struct radix_tree_root *root, unsigned long *first_indexp, unsigned long last_index, unsigned long nr_to_tag, unsigned int fromtag, unsigned int totag), {
    kern_printk("radix_tree_range_tag_if_tagged is invoked.\n");
    PRE_WRAPPER_FUNC(root, first_indexp, last_index, nr_to_tag, fromtag, totag);
    long ret = radix_tree_range_tag_if_tagged(root, first_indexp, last_index, nr_to_tag, fromtag, totag);
    POST_WRAPPER_FUNC(root, first_indexp, last_index, nr_to_tag, fromtag, totag);
    kern_printk("radix_tree_range_tag_if_tagged returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_id_string
#define APP_WRAPPER_FOR_ata_id_string
#endif
 
#ifndef APP_WRAPPER_FOR_ata_id_string
#define APP_WRAPPER_FOR_ata_id_string
FUNCTION_WRAPPER_VOID(ata_id_string, (const u16 *id, unsigned char *s, unsigned int ofs, unsigned int len), {
    kern_printk("ata_id_string is invoked.\n");
    PRE_WRAPPER_FUNC(id, s, ofs, len);
    ata_id_string(id, s, ofs, len);
    POST_WRAPPER_FUNC(id, s, ofs, len);
    kern_printk("ata_id_string returned.\n");
})
#endif


#ifndef KERN_ADDR_netif_carrier_off
#define APP_WRAPPER_FOR_netif_carrier_off
#endif
 
#ifndef APP_WRAPPER_FOR_netif_carrier_off
#define APP_WRAPPER_FOR_netif_carrier_off
FUNCTION_WRAPPER_VOID(netif_carrier_off, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("netif_carrier_off is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    netif_carrier_off(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("netif_carrier_off returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_x86_idle_thread_init
#define APP_WRAPPER_FOR_x86_idle_thread_init
#endif
 
#ifndef APP_WRAPPER_FOR_x86_idle_thread_init
#define APP_WRAPPER_FOR_x86_idle_thread_init
FUNCTION_WRAPPER_VOID(x86_idle_thread_init, (unsigned int cpu, struct task_struct *idle), {
    WRAP_RECURSIVE(idle);
    TRACES_IF_WATCHPOINT(idle);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(idle)));
    kern_printk("x86_idle_thread_init is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, idle);
    x86_idle_thread_init(cpu, idle);
    POST_WRAPPER_FUNC(cpu, idle);
    kern_printk("x86_idle_thread_init returned.\n");
    TRACES_IF_WATCHPOINT(idle);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(idle)));
})
#endif


#ifndef KERN_ADDR_acpi_dev_resume_early
#define APP_WRAPPER_FOR_acpi_dev_resume_early
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_dev_resume_early
#define APP_WRAPPER_FOR_acpi_dev_resume_early
FUNCTION_WRAPPER(acpi_dev_resume_early, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("acpi_dev_resume_early is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = acpi_dev_resume_early(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("acpi_dev_resume_early returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_bios_warning
#define APP_WRAPPER_FOR_acpi_bios_warning
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_bios_warning
#define APP_WRAPPER_FOR_acpi_bios_warning
FUNCTION_WRAPPER_VOID(acpi_bios_warning, (const char *module_name, u32 line_number, const char *format, ...), {
    va_list args__;
    va_start(args__, format);
    // TODO: variadic arguments
    kern_printk("acpi_bios_warning is invoked.\n");
    PRE_WRAPPER_FUNC(module_name, line_number, format);
    acpi_bios_warning(module_name, line_number, format);
    POST_WRAPPER_FUNC(module_name, line_number, format);
    kern_printk("acpi_bios_warning returned.\n");
    va_end(args__);
})
#endif


#ifndef KERN_ADDR_is_vmalloc_or_module_addr
#define APP_WRAPPER_FOR_is_vmalloc_or_module_addr
#endif
 
#ifndef APP_WRAPPER_FOR_is_vmalloc_or_module_addr
#define APP_WRAPPER_FOR_is_vmalloc_or_module_addr
FUNCTION_WRAPPER(is_vmalloc_or_module_addr, (const void *x), {
    kern_printk("is_vmalloc_or_module_addr is invoked.\n");
    PRE_WRAPPER_FUNC(x);
    int ret = is_vmalloc_or_module_addr(x);
    POST_WRAPPER_FUNC(x);
    kern_printk("is_vmalloc_or_module_addr returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_remove_interrupt_handler
#define APP_WRAPPER_FOR_acpi_os_remove_interrupt_handler
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_remove_interrupt_handler
#define APP_WRAPPER_FOR_acpi_os_remove_interrupt_handler
FUNCTION_WRAPPER(acpi_os_remove_interrupt_handler, (u32 gsi, acpi_osd_handler service_routine), {
    WRAP_FUNCTION(service_routine);
    kern_printk("acpi_os_remove_interrupt_handler is invoked.\n");
    PRE_WRAPPER_FUNC(gsi, service_routine);
    acpi_status ret = acpi_os_remove_interrupt_handler(gsi, service_routine);
    POST_WRAPPER_FUNC(gsi, service_routine);
    kern_printk("acpi_os_remove_interrupt_handler returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_bus_update_power
#define APP_WRAPPER_FOR_acpi_bus_update_power
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_bus_update_power
#define APP_WRAPPER_FOR_acpi_bus_update_power
FUNCTION_WRAPPER(acpi_bus_update_power, (acpi_handle handle, int *state_p), {
    kern_printk("acpi_bus_update_power is invoked.\n");
    PRE_WRAPPER_FUNC(handle, state_p);
    int ret = acpi_bus_update_power(handle, state_p);
    POST_WRAPPER_FUNC(handle, state_p);
    kern_printk("acpi_bus_update_power returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_register_pernet_device
#define APP_WRAPPER_FOR_register_pernet_device
#endif
 
#ifndef APP_WRAPPER_FOR_register_pernet_device
#define APP_WRAPPER_FOR_register_pernet_device
FUNCTION_WRAPPER(register_pernet_device, (struct pernet_operations *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pernet_operations)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("register_pernet_device is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = register_pernet_device(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("register_pernet_device returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pernet_operations)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_smp_call_function_single_interrupt
#define APP_WRAPPER_FOR_generic_smp_call_function_single_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_generic_smp_call_function_single_interrupt
#define APP_WRAPPER_FOR_generic_smp_call_function_single_interrupt
FUNCTION_WRAPPER_VOID(generic_smp_call_function_single_interrupt, (), {
    kern_printk("generic_smp_call_function_single_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC();
    generic_smp_call_function_single_interrupt();
    POST_WRAPPER_FUNC();
    kern_printk("generic_smp_call_function_single_interrupt returned.\n");
})
#endif


#ifndef KERN_ADDR_device_wakeup_disable
#define APP_WRAPPER_FOR_device_wakeup_disable
#endif
 
#ifndef APP_WRAPPER_FOR_device_wakeup_disable
#define APP_WRAPPER_FOR_device_wakeup_disable
FUNCTION_WRAPPER(device_wakeup_disable, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("device_wakeup_disable is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = device_wakeup_disable(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("device_wakeup_disable returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_dev_pm_attach
#define APP_WRAPPER_FOR_acpi_dev_pm_attach
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_dev_pm_attach
#define APP_WRAPPER_FOR_acpi_dev_pm_attach
FUNCTION_WRAPPER(acpi_dev_pm_attach, (struct device *dev, bool power_on), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("acpi_dev_pm_attach is invoked.\n");
    PRE_WRAPPER_FUNC(dev, power_on);
    int ret = acpi_dev_pm_attach(dev, power_on);
    POST_WRAPPER_FUNC(dev, power_on);
    kern_printk("acpi_dev_pm_attach returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kill_pid
#define APP_WRAPPER_FOR_kill_pid
#endif
 
#ifndef APP_WRAPPER_FOR_kill_pid
#define APP_WRAPPER_FOR_kill_pid
FUNCTION_WRAPPER(kill_pid, (struct pid *pid, int sig, int priv), {
    WRAP_RECURSIVE(pid);
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
    kern_printk("kill_pid is invoked.\n");
    PRE_WRAPPER_FUNC(pid, sig, priv);
    int ret = kill_pid(pid, sig, priv);
    POST_WRAPPER_FUNC(pid, sig, priv);
    kern_printk("kill_pid returned.\n");
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_user_read_config_byte
#define APP_WRAPPER_FOR_pci_user_read_config_byte
#endif
 
#ifndef APP_WRAPPER_FOR_pci_user_read_config_byte
#define APP_WRAPPER_FOR_pci_user_read_config_byte
FUNCTION_WRAPPER(pci_user_read_config_byte, (struct pci_dev *dev, int where, u8 *val), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_user_read_config_byte is invoked.\n");
    PRE_WRAPPER_FUNC(dev, where, val);
    int ret = pci_user_read_config_byte(dev, where, val);
    POST_WRAPPER_FUNC(dev, where, val);
    kern_printk("pci_user_read_config_byte returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_rwsem_downgrade_wake
#define APP_WRAPPER_FOR_rwsem_downgrade_wake
#endif
 
#ifndef APP_WRAPPER_FOR_rwsem_downgrade_wake
#define APP_WRAPPER_FOR_rwsem_downgrade_wake
FUNCTION_WRAPPER(rwsem_downgrade_wake, (struct rw_semaphore *sem), {
    kern_printk("rwsem_downgrade_wake is invoked.\n");
    PRE_WRAPPER_FUNC(sem);
    struct rw_semaphore *ret = rwsem_downgrade_wake(sem);
    POST_WRAPPER_FUNC(sem);
    kern_printk("rwsem_downgrade_wake returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_nf_unregister_afinfo
#define APP_WRAPPER_FOR_nf_unregister_afinfo
#endif
 
#ifndef APP_WRAPPER_FOR_nf_unregister_afinfo
#define APP_WRAPPER_FOR_nf_unregister_afinfo
FUNCTION_WRAPPER_VOID(nf_unregister_afinfo, (const struct nf_afinfo *afinfo), {
    WRAP_RECURSIVE(afinfo);
    TRACES_IF_WATCHPOINT(afinfo);
    SCAN_HEAD_FUNC(const struct nf_afinfo)(*(TO_UNWATCHED_ADDRESS(afinfo)));
    kern_printk("nf_unregister_afinfo is invoked.\n");
    PRE_WRAPPER_FUNC(afinfo);
    nf_unregister_afinfo(afinfo);
    POST_WRAPPER_FUNC(afinfo);
    kern_printk("nf_unregister_afinfo returned.\n");
    TRACES_IF_WATCHPOINT(afinfo);
    SCAN_HEAD_FUNC(const struct nf_afinfo)(*(TO_UNWATCHED_ADDRESS(afinfo)));
})
#endif


#ifndef KERN_ADDR___sw_hweight8
#define APP_WRAPPER_FOR___sw_hweight8
#endif
 
#ifndef APP_WRAPPER_FOR___sw_hweight8
#define APP_WRAPPER_FOR___sw_hweight8
FUNCTION_WRAPPER(__sw_hweight8, (unsigned int w), {
    kern_printk("__sw_hweight8 is invoked.\n");
    PRE_WRAPPER_FUNC(w);
    int ret = __sw_hweight8(w);
    POST_WRAPPER_FUNC(w);
    kern_printk("__sw_hweight8 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt27
#define APP_WRAPPER_FOR_invalidate_interrupt27
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt27
#define APP_WRAPPER_FOR_invalidate_interrupt27
FUNCTION_WRAPPER_VOID(invalidate_interrupt27, (), {
    kern_printk("invalidate_interrupt27 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt27();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt27 returned.\n");
})
#endif


#ifndef KERN_ADDR_request_threaded_irq
#define APP_WRAPPER_FOR_request_threaded_irq
#endif
 
#ifndef APP_WRAPPER_FOR_request_threaded_irq
#define APP_WRAPPER_FOR_request_threaded_irq
FUNCTION_WRAPPER(request_threaded_irq, (unsigned int irq, irq_handler_t handler, irq_handler_t thread_fn, unsigned long flags, const char *name, void *dev), {
    WRAP_FUNCTION(handler);
    WRAP_FUNCTION(thread_fn);
    kern_printk("request_threaded_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq, handler, thread_fn, flags, name, dev);
    int ret = request_threaded_irq(irq, handler, thread_fn, flags, name, dev);
    POST_WRAPPER_FUNC(irq, handler, thread_fn, flags, name, dev);
    kern_printk("request_threaded_irq returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_do_one_initcall
#define APP_WRAPPER_FOR_do_one_initcall
#endif
 
#ifndef APP_WRAPPER_FOR_do_one_initcall
#define APP_WRAPPER_FOR_do_one_initcall
FUNCTION_WRAPPER(do_one_initcall, (initcall_t fn), {
    WRAP_FUNCTION(fn);
    kern_printk("do_one_initcall is invoked.\n");
    PRE_WRAPPER_FUNC(fn);
    int ret = do_one_initcall(fn);
    POST_WRAPPER_FUNC(fn);
    kern_printk("do_one_initcall returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_remove_fixed_event_handler
#define APP_WRAPPER_FOR_acpi_remove_fixed_event_handler
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_remove_fixed_event_handler
#define APP_WRAPPER_FOR_acpi_remove_fixed_event_handler
FUNCTION_WRAPPER(acpi_remove_fixed_event_handler, (u32 acpi_event, acpi_event_handler handler), {
    WRAP_FUNCTION(handler);
    kern_printk("acpi_remove_fixed_event_handler is invoked.\n");
    PRE_WRAPPER_FUNC(acpi_event, handler);
    acpi_status ret = acpi_remove_fixed_event_handler(acpi_event, handler);
    POST_WRAPPER_FUNC(acpi_event, handler);
    kern_printk("acpi_remove_fixed_event_handler returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pdflush_proc_obsolete
#define APP_WRAPPER_FOR_pdflush_proc_obsolete
#endif
 
#ifndef APP_WRAPPER_FOR_pdflush_proc_obsolete
#define APP_WRAPPER_FOR_pdflush_proc_obsolete
FUNCTION_WRAPPER(pdflush_proc_obsolete, (struct ctl_table *table, int write, void *buffer, size_t *lenp, loff_t *ppos), {
    WRAP_RECURSIVE(table);
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    kern_printk("pdflush_proc_obsolete is invoked.\n");
    PRE_WRAPPER_FUNC(table, write, buffer, lenp, ppos);
    int ret = pdflush_proc_obsolete(table, write, buffer, lenp, ppos);
    POST_WRAPPER_FUNC(table, write, buffer, lenp, ppos);
    kern_printk("pdflush_proc_obsolete returned.\n");
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    return ret;
})
#endif


#ifndef KERN_ADDR_run_local_timers
#define APP_WRAPPER_FOR_run_local_timers
#endif
 
#ifndef APP_WRAPPER_FOR_run_local_timers
#define APP_WRAPPER_FOR_run_local_timers
FUNCTION_WRAPPER_VOID(run_local_timers, (), {
    kern_printk("run_local_timers is invoked.\n");
    PRE_WRAPPER_FUNC();
    run_local_timers();
    POST_WRAPPER_FUNC();
    kern_printk("run_local_timers returned.\n");
})
#endif


#ifndef KERN_ADDR_swiotlb_tbl_unmap_single
#define APP_WRAPPER_FOR_swiotlb_tbl_unmap_single
#endif
 
#ifndef APP_WRAPPER_FOR_swiotlb_tbl_unmap_single
#define APP_WRAPPER_FOR_swiotlb_tbl_unmap_single
FUNCTION_WRAPPER_VOID(swiotlb_tbl_unmap_single, (struct device *hwdev, phys_addr_t tlb_addr, size_t size, enum dma_data_direction dir), {
    WRAP_RECURSIVE(hwdev);
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
    kern_printk("swiotlb_tbl_unmap_single is invoked.\n");
    PRE_WRAPPER_FUNC(hwdev, tlb_addr, size, dir);
    swiotlb_tbl_unmap_single(hwdev, tlb_addr, size, dir);
    POST_WRAPPER_FUNC(hwdev, tlb_addr, size, dir);
    kern_printk("swiotlb_tbl_unmap_single returned.\n");
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
})
#endif


#ifndef KERN_ADDR_cgroup_lock_live_group
#define APP_WRAPPER_FOR_cgroup_lock_live_group
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_lock_live_group
#define APP_WRAPPER_FOR_cgroup_lock_live_group
FUNCTION_WRAPPER(cgroup_lock_live_group, (struct cgroup *cgrp), {
    WRAP_RECURSIVE(cgrp);
    TRACES_IF_WATCHPOINT(cgrp);
    SCAN_HEAD_FUNC(struct cgroup)(*(TO_UNWATCHED_ADDRESS(cgrp)));
    kern_printk("cgroup_lock_live_group is invoked.\n");
    PRE_WRAPPER_FUNC(cgrp);
    bool ret = cgroup_lock_live_group(cgrp);
    POST_WRAPPER_FUNC(cgrp);
    kern_printk("cgroup_lock_live_group returned.\n");
    TRACES_IF_WATCHPOINT(cgrp);
    SCAN_HEAD_FUNC(struct cgroup)(*(TO_UNWATCHED_ADDRESS(cgrp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_detect_extended_topology
#define APP_WRAPPER_FOR_detect_extended_topology
#endif
 
#ifndef APP_WRAPPER_FOR_detect_extended_topology
#define APP_WRAPPER_FOR_detect_extended_topology
FUNCTION_WRAPPER_VOID(detect_extended_topology, (struct cpuinfo_x86 *c), {
    kern_printk("detect_extended_topology is invoked.\n");
    PRE_WRAPPER_FUNC(c);
    detect_extended_topology(c);
    POST_WRAPPER_FUNC(c);
    kern_printk("detect_extended_topology returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_add_resource
#define APP_WRAPPER_FOR_pci_add_resource
#endif
 
#ifndef APP_WRAPPER_FOR_pci_add_resource
#define APP_WRAPPER_FOR_pci_add_resource
FUNCTION_WRAPPER_VOID(pci_add_resource, (struct list_head *resources, struct resource *res), {
    kern_printk("pci_add_resource is invoked.\n");
    PRE_WRAPPER_FUNC(resources, res);
    pci_add_resource(resources, res);
    POST_WRAPPER_FUNC(resources, res);
    kern_printk("pci_add_resource returned.\n");
})
#endif


#ifndef KERN_ADDR_page_writeback_init
#define APP_WRAPPER_FOR_page_writeback_init
#endif
 
#ifndef APP_WRAPPER_FOR_page_writeback_init
#define APP_WRAPPER_FOR_page_writeback_init
FUNCTION_WRAPPER_VOID(page_writeback_init, (), {
    kern_printk("page_writeback_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    page_writeback_init();
    POST_WRAPPER_FUNC();
    kern_printk("page_writeback_init returned.\n");
})
#endif


#ifndef KERN_ADDR_e820_setup_gap
#define APP_WRAPPER_FOR_e820_setup_gap
#endif
 
#ifndef APP_WRAPPER_FOR_e820_setup_gap
#define APP_WRAPPER_FOR_e820_setup_gap
FUNCTION_WRAPPER_VOID(e820_setup_gap, (), {
    kern_printk("e820_setup_gap is invoked.\n");
    PRE_WRAPPER_FUNC();
    e820_setup_gap();
    POST_WRAPPER_FUNC();
    kern_printk("e820_setup_gap returned.\n");
})
#endif


#ifndef KERN_ADDR_inode_init_once
#define APP_WRAPPER_FOR_inode_init_once
#endif
 
#ifndef APP_WRAPPER_FOR_inode_init_once
#define APP_WRAPPER_FOR_inode_init_once
FUNCTION_WRAPPER_VOID(inode_init_once, (struct inode *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("inode_init_once is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    inode_init_once(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("inode_init_once returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_neigh_table_clear
#define APP_WRAPPER_FOR_neigh_table_clear
#endif
 
#ifndef APP_WRAPPER_FOR_neigh_table_clear
#define APP_WRAPPER_FOR_neigh_table_clear
FUNCTION_WRAPPER(neigh_table_clear, (struct neigh_table *tbl), {
    WRAP_RECURSIVE(tbl);
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    kern_printk("neigh_table_clear is invoked.\n");
    PRE_WRAPPER_FUNC(tbl);
    int ret = neigh_table_clear(tbl);
    POST_WRAPPER_FUNC(tbl);
    kern_printk("neigh_table_clear returned.\n");
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_update_sb_log_tail
#define APP_WRAPPER_FOR_jbd2_journal_update_sb_log_tail
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_update_sb_log_tail
#define APP_WRAPPER_FOR_jbd2_journal_update_sb_log_tail
FUNCTION_WRAPPER_VOID(jbd2_journal_update_sb_log_tail, (journal_t *_arg1, tid_t _arg2, unsigned long _arg3, int _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_update_sb_log_tail is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    jbd2_journal_update_sb_log_tail(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("jbd2_journal_update_sb_log_tail returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_kill_block_super
#define APP_WRAPPER_FOR_kill_block_super
#endif
 
#ifndef APP_WRAPPER_FOR_kill_block_super
#define APP_WRAPPER_FOR_kill_block_super
FUNCTION_WRAPPER_VOID(kill_block_super, (struct super_block *sb), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("kill_block_super is invoked.\n");
    PRE_WRAPPER_FUNC(sb);
    kill_block_super(sb);
    POST_WRAPPER_FUNC(sb);
    kern_printk("kill_block_super returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
})
#endif


#ifndef KERN_ADDR_mb_cache_entry_find_next
#define APP_WRAPPER_FOR_mb_cache_entry_find_next
#endif
 
#ifndef APP_WRAPPER_FOR_mb_cache_entry_find_next
#define APP_WRAPPER_FOR_mb_cache_entry_find_next
FUNCTION_WRAPPER(mb_cache_entry_find_next, (struct mb_cache_entry *_arg1, struct block_device *_arg2, unsigned int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mb_cache_entry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("mb_cache_entry_find_next is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    struct mb_cache_entry *ret = mb_cache_entry_find_next(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("mb_cache_entry_find_next returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mb_cache_entry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_do_sys_open
#define APP_WRAPPER_FOR_do_sys_open
#endif
 
#ifndef APP_WRAPPER_FOR_do_sys_open
#define APP_WRAPPER_FOR_do_sys_open
FUNCTION_WRAPPER(do_sys_open, (int dfd, const char *filename, int flags, umode_t mode), {
    kern_printk("do_sys_open is invoked.\n");
    PRE_WRAPPER_FUNC(dfd, filename, flags, mode);
    long ret = do_sys_open(dfd, filename, flags, mode);
    POST_WRAPPER_FUNC(dfd, filename, flags, mode);
    kern_printk("do_sys_open returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_remove_gpe_block
#define APP_WRAPPER_FOR_acpi_remove_gpe_block
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_remove_gpe_block
#define APP_WRAPPER_FOR_acpi_remove_gpe_block
FUNCTION_WRAPPER(acpi_remove_gpe_block, (acpi_handle gpe_device), {
    kern_printk("acpi_remove_gpe_block is invoked.\n");
    PRE_WRAPPER_FUNC(gpe_device);
    acpi_status ret = acpi_remove_gpe_block(gpe_device);
    POST_WRAPPER_FUNC(gpe_device);
    kern_printk("acpi_remove_gpe_block returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_rtnl_is_locked
#define APP_WRAPPER_FOR_rtnl_is_locked
#endif
 
#ifndef APP_WRAPPER_FOR_rtnl_is_locked
#define APP_WRAPPER_FOR_rtnl_is_locked
FUNCTION_WRAPPER(rtnl_is_locked, (), {
    kern_printk("rtnl_is_locked is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = rtnl_is_locked();
    POST_WRAPPER_FUNC();
    kern_printk("rtnl_is_locked returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_unregister_blkdev
#define APP_WRAPPER_FOR_unregister_blkdev
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_blkdev
#define APP_WRAPPER_FOR_unregister_blkdev
FUNCTION_WRAPPER_VOID(unregister_blkdev, (unsigned int _arg1, const char *_arg2), {
    kern_printk("unregister_blkdev is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    unregister_blkdev(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("unregister_blkdev returned.\n");
})
#endif


#ifndef KERN_ADDR_dmaengine_put
#define APP_WRAPPER_FOR_dmaengine_put
#endif
 
#ifndef APP_WRAPPER_FOR_dmaengine_put
#define APP_WRAPPER_FOR_dmaengine_put
FUNCTION_WRAPPER_VOID(dmaengine_put, (), {
    kern_printk("dmaengine_put is invoked.\n");
    PRE_WRAPPER_FUNC();
    dmaengine_put();
    POST_WRAPPER_FUNC();
    kern_printk("dmaengine_put returned.\n");
})
#endif


#ifndef KERN_ADDR_inode_sub_rsv_space
#define APP_WRAPPER_FOR_inode_sub_rsv_space
#endif
 
#ifndef APP_WRAPPER_FOR_inode_sub_rsv_space
#define APP_WRAPPER_FOR_inode_sub_rsv_space
FUNCTION_WRAPPER_VOID(inode_sub_rsv_space, (struct inode *inode, qsize_t number), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("inode_sub_rsv_space is invoked.\n");
    PRE_WRAPPER_FUNC(inode, number);
    inode_sub_rsv_space(inode, number);
    POST_WRAPPER_FUNC(inode, number);
    kern_printk("inode_sub_rsv_space returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_elv_iosched_show
#define APP_WRAPPER_FOR_elv_iosched_show
#endif
 
#ifndef APP_WRAPPER_FOR_elv_iosched_show
#define APP_WRAPPER_FOR_elv_iosched_show
FUNCTION_WRAPPER(elv_iosched_show, (struct request_queue *_arg1, char *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("elv_iosched_show is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    ssize_t ret = elv_iosched_show(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("elv_iosched_show returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_queue_alignment_offset
#define APP_WRAPPER_FOR_blk_queue_alignment_offset
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_alignment_offset
#define APP_WRAPPER_FOR_blk_queue_alignment_offset
FUNCTION_WRAPPER_VOID(blk_queue_alignment_offset, (struct request_queue *q, unsigned int alignment), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    kern_printk("blk_queue_alignment_offset is invoked.\n");
    PRE_WRAPPER_FUNC(q, alignment);
    blk_queue_alignment_offset(q, alignment);
    POST_WRAPPER_FUNC(q, alignment);
    kern_printk("blk_queue_alignment_offset returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
})
#endif


#ifndef KERN_ADDR_devres_remove_group
#define APP_WRAPPER_FOR_devres_remove_group
#endif
 
#ifndef APP_WRAPPER_FOR_devres_remove_group
#define APP_WRAPPER_FOR_devres_remove_group
FUNCTION_WRAPPER_VOID(devres_remove_group, (struct device *dev, void *id), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("devres_remove_group is invoked.\n");
    PRE_WRAPPER_FUNC(dev, id);
    devres_remove_group(dev, id);
    POST_WRAPPER_FUNC(dev, id);
    kern_printk("devres_remove_group returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_add_wait_queue_exclusive
#define APP_WRAPPER_FOR_add_wait_queue_exclusive
#endif
 
#ifndef APP_WRAPPER_FOR_add_wait_queue_exclusive
#define APP_WRAPPER_FOR_add_wait_queue_exclusive
FUNCTION_WRAPPER_VOID(add_wait_queue_exclusive, (wait_queue_head_t *q, wait_queue_t *wait), {
    WRAP_RECURSIVE(wait);
    TRACES_IF_WATCHPOINT(wait);
    SCAN_HEAD_FUNC(wait_queue_t)(*(TO_UNWATCHED_ADDRESS(wait)));
    kern_printk("add_wait_queue_exclusive is invoked.\n");
    PRE_WRAPPER_FUNC(q, wait);
    add_wait_queue_exclusive(q, wait);
    POST_WRAPPER_FUNC(q, wait);
    kern_printk("add_wait_queue_exclusive returned.\n");
    TRACES_IF_WATCHPOINT(wait);
    SCAN_HEAD_FUNC(wait_queue_t)(*(TO_UNWATCHED_ADDRESS(wait)));
})
#endif


#ifndef KERN_ADDR_ata_sff_irq_clear
#define APP_WRAPPER_FOR_ata_sff_irq_clear
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_irq_clear
#define APP_WRAPPER_FOR_ata_sff_irq_clear
FUNCTION_WRAPPER_VOID(ata_sff_irq_clear, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_sff_irq_clear is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    ata_sff_irq_clear(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_sff_irq_clear returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_module_kallsyms_on_each_symbol
#define APP_WRAPPER_FOR_module_kallsyms_on_each_symbol
#endif
 
#ifndef APP_WRAPPER_FOR_module_kallsyms_on_each_symbol
#define APP_WRAPPER_FOR_module_kallsyms_on_each_symbol
FUNCTION_WRAPPER(module_kallsyms_on_each_symbol, (int (*fn)(void *, const char *, struct module *, unsigned long), void *data), {
    WRAP_FUNCTION(fn);
    kern_printk("module_kallsyms_on_each_symbol is invoked.\n");
    PRE_WRAPPER_FUNC(fn, data);
    int ret = module_kallsyms_on_each_symbol(fn, data);
    POST_WRAPPER_FUNC(fn, data);
    kern_printk("module_kallsyms_on_each_symbol returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_bus_for_each_dev
#define APP_WRAPPER_FOR_bus_for_each_dev
#endif
 
#ifndef APP_WRAPPER_FOR_bus_for_each_dev
#define APP_WRAPPER_FOR_bus_for_each_dev
FUNCTION_WRAPPER(bus_for_each_dev, (struct bus_type *bus, struct device *start, void *data, int (*fn)(struct device *, void *)), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    WRAP_RECURSIVE(start);
    TRACES_IF_WATCHPOINT(start);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(start)));
    WRAP_FUNCTION(fn);
    kern_printk("bus_for_each_dev is invoked.\n");
    PRE_WRAPPER_FUNC(bus, start, data, fn);
    int ret = bus_for_each_dev(bus, start, data, fn);
    POST_WRAPPER_FUNC(bus, start, data, fn);
    kern_printk("bus_for_each_dev returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    TRACES_IF_WATCHPOINT(start);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(start)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_register_queue
#define APP_WRAPPER_FOR_blk_register_queue
#endif
 
#ifndef APP_WRAPPER_FOR_blk_register_queue
#define APP_WRAPPER_FOR_blk_register_queue
FUNCTION_WRAPPER(blk_register_queue, (struct gendisk *disk), {
    WRAP_RECURSIVE(disk);
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    kern_printk("blk_register_queue is invoked.\n");
    PRE_WRAPPER_FUNC(disk);
    int ret = blk_register_queue(disk);
    POST_WRAPPER_FUNC(disk);
    kern_printk("blk_register_queue returned.\n");
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_smp_call_function_single_interrupt
#define APP_WRAPPER_FOR_smp_call_function_single_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_smp_call_function_single_interrupt
#define APP_WRAPPER_FOR_smp_call_function_single_interrupt
FUNCTION_WRAPPER_VOID(smp_call_function_single_interrupt, (struct pt_regs *_arg1), {
    kern_printk("smp_call_function_single_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    smp_call_function_single_interrupt(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("smp_call_function_single_interrupt returned.\n");
})
#endif


#ifndef KERN_ADDR_workqueue_congested
#define APP_WRAPPER_FOR_workqueue_congested
#endif
 
#ifndef APP_WRAPPER_FOR_workqueue_congested
#define APP_WRAPPER_FOR_workqueue_congested
FUNCTION_WRAPPER(workqueue_congested, (unsigned int cpu, struct workqueue_struct *wq), {
    kern_printk("workqueue_congested is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, wq);
    bool ret = workqueue_congested(cpu, wq);
    POST_WRAPPER_FUNC(cpu, wq);
    kern_printk("workqueue_congested returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_netif_napi_add
#define APP_WRAPPER_FOR_netif_napi_add
#endif
 
#ifndef APP_WRAPPER_FOR_netif_napi_add
#define APP_WRAPPER_FOR_netif_napi_add
FUNCTION_WRAPPER_VOID(netif_napi_add, (struct net_device *dev, struct napi_struct *napi, int (*poll)(struct napi_struct *, int), int weight), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(napi);
    TRACES_IF_WATCHPOINT(napi);
    SCAN_HEAD_FUNC(struct napi_struct)(*(TO_UNWATCHED_ADDRESS(napi)));
    WRAP_FUNCTION(poll);
    kern_printk("netif_napi_add is invoked.\n");
    PRE_WRAPPER_FUNC(dev, napi, poll, weight);
    netif_napi_add(dev, napi, poll, weight);
    POST_WRAPPER_FUNC(dev, napi, poll, weight);
    kern_printk("netif_napi_add returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(napi);
    SCAN_HEAD_FUNC(struct napi_struct)(*(TO_UNWATCHED_ADDRESS(napi)));
})
#endif


#ifndef KERN_ADDR_phy_register_fixup_for_id
#define APP_WRAPPER_FOR_phy_register_fixup_for_id
#endif
 
#ifndef APP_WRAPPER_FOR_phy_register_fixup_for_id
#define APP_WRAPPER_FOR_phy_register_fixup_for_id
FUNCTION_WRAPPER(phy_register_fixup_for_id, (const char *bus_id, int (*run)(struct phy_device *)), {
    WRAP_FUNCTION(run);
    kern_printk("phy_register_fixup_for_id is invoked.\n");
    PRE_WRAPPER_FUNC(bus_id, run);
    int ret = phy_register_fixup_for_id(bus_id, run);
    POST_WRAPPER_FUNC(bus_id, run);
    kern_printk("phy_register_fixup_for_id returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___scm_destroy
#define APP_WRAPPER_FOR___scm_destroy
#endif
 
#ifndef APP_WRAPPER_FOR___scm_destroy
#define APP_WRAPPER_FOR___scm_destroy
FUNCTION_WRAPPER_VOID(__scm_destroy, (struct scm_cookie *scm), {
    WRAP_RECURSIVE(scm);
    TRACES_IF_WATCHPOINT(scm);
    SCAN_HEAD_FUNC(struct scm_cookie)(*(TO_UNWATCHED_ADDRESS(scm)));
    kern_printk("__scm_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(scm);
    __scm_destroy(scm);
    POST_WRAPPER_FUNC(scm);
    kern_printk("__scm_destroy returned.\n");
    TRACES_IF_WATCHPOINT(scm);
    SCAN_HEAD_FUNC(struct scm_cookie)(*(TO_UNWATCHED_ADDRESS(scm)));
})
#endif


#ifndef KERN_ADDR_proc_nr_files
#define APP_WRAPPER_FOR_proc_nr_files
#endif
 
#ifndef APP_WRAPPER_FOR_proc_nr_files
#define APP_WRAPPER_FOR_proc_nr_files
FUNCTION_WRAPPER(proc_nr_files, (struct ctl_table *table, int write, void *buffer, size_t *lenp, loff_t *ppos), {
    WRAP_RECURSIVE(table);
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    kern_printk("proc_nr_files is invoked.\n");
    PRE_WRAPPER_FUNC(table, write, buffer, lenp, ppos);
    int ret = proc_nr_files(table, write, buffer, lenp, ppos);
    POST_WRAPPER_FUNC(table, write, buffer, lenp, ppos);
    kern_printk("proc_nr_files returned.\n");
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_crit
#define APP_WRAPPER_FOR_dev_crit
#endif
 
#ifndef APP_WRAPPER_FOR_dev_crit
#define APP_WRAPPER_FOR_dev_crit
FUNCTION_WRAPPER(dev_crit, (const struct device *dev, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    // TODO: variadic arguments
    kern_printk("dev_crit is invoked.\n");
    PRE_WRAPPER_FUNC(dev, fmt);
    int ret = dev_crit(dev, fmt);
    POST_WRAPPER_FUNC(dev, fmt);
    kern_printk("dev_crit returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR___bio_clone
#define APP_WRAPPER_FOR___bio_clone
#endif
 
#ifndef APP_WRAPPER_FOR___bio_clone
#define APP_WRAPPER_FOR___bio_clone
FUNCTION_WRAPPER_VOID(__bio_clone, (struct bio *_arg1, struct bio *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("__bio_clone is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    __bio_clone(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("__bio_clone returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_block_write_full_page
#define APP_WRAPPER_FOR_block_write_full_page
#endif
 
#ifndef APP_WRAPPER_FOR_block_write_full_page
#define APP_WRAPPER_FOR_block_write_full_page
FUNCTION_WRAPPER(block_write_full_page, (struct page *page, get_block_t *get_block, struct writeback_control *wbc), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    WRAP_FUNCTION(get_block);
    kern_printk("block_write_full_page is invoked.\n");
    PRE_WRAPPER_FUNC(page, get_block, wbc);
    int ret = block_write_full_page(page, get_block, wbc);
    POST_WRAPPER_FUNC(page, get_block, wbc);
    kern_printk("block_write_full_page returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_netdev_class_remove_file
#define APP_WRAPPER_FOR_netdev_class_remove_file
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_class_remove_file
#define APP_WRAPPER_FOR_netdev_class_remove_file
FUNCTION_WRAPPER_VOID(netdev_class_remove_file, (struct class_attribute *class_attr), {
    WRAP_RECURSIVE(class_attr);
    TRACES_IF_WATCHPOINT(class_attr);
    SCAN_HEAD_FUNC(struct class_attribute)(*(TO_UNWATCHED_ADDRESS(class_attr)));
    kern_printk("netdev_class_remove_file is invoked.\n");
    PRE_WRAPPER_FUNC(class_attr);
    netdev_class_remove_file(class_attr);
    POST_WRAPPER_FUNC(class_attr);
    kern_printk("netdev_class_remove_file returned.\n");
    TRACES_IF_WATCHPOINT(class_attr);
    SCAN_HEAD_FUNC(struct class_attribute)(*(TO_UNWATCHED_ADDRESS(class_attr)));
})
#endif


#ifndef KERN_ADDR_acpi_nvs_nosave
#define APP_WRAPPER_FOR_acpi_nvs_nosave
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_nvs_nosave
#define APP_WRAPPER_FOR_acpi_nvs_nosave
FUNCTION_WRAPPER_VOID(acpi_nvs_nosave, (), {
    kern_printk("acpi_nvs_nosave is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_nvs_nosave();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_nvs_nosave returned.\n");
})
#endif


#ifndef KERN_ADDR_blk_abort_request
#define APP_WRAPPER_FOR_blk_abort_request
#endif
 
#ifndef APP_WRAPPER_FOR_blk_abort_request
#define APP_WRAPPER_FOR_blk_abort_request
FUNCTION_WRAPPER_VOID(blk_abort_request, (struct request *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_abort_request is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    blk_abort_request(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("blk_abort_request returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_fd_statfs
#define APP_WRAPPER_FOR_fd_statfs
#endif
 
#ifndef APP_WRAPPER_FOR_fd_statfs
#define APP_WRAPPER_FOR_fd_statfs
FUNCTION_WRAPPER(fd_statfs, (int _arg1, struct kstatfs *_arg2), {
    kern_printk("fd_statfs is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = fd_statfs(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("fd_statfs returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blkdev_put
#define APP_WRAPPER_FOR_blkdev_put
#endif
 
#ifndef APP_WRAPPER_FOR_blkdev_put
#define APP_WRAPPER_FOR_blkdev_put
FUNCTION_WRAPPER(blkdev_put, (struct block_device *bdev, fmode_t mode), {
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    kern_printk("blkdev_put is invoked.\n");
    PRE_WRAPPER_FUNC(bdev, mode);
    int ret = blkdev_put(bdev, mode);
    POST_WRAPPER_FUNC(bdev, mode);
    kern_printk("blkdev_put returned.\n");
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_clocksource_mmio_readl_down
#define APP_WRAPPER_FOR_clocksource_mmio_readl_down
#endif
 
#ifndef APP_WRAPPER_FOR_clocksource_mmio_readl_down
#define APP_WRAPPER_FOR_clocksource_mmio_readl_down
FUNCTION_WRAPPER(clocksource_mmio_readl_down, (struct clocksource *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct clocksource)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("clocksource_mmio_readl_down is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    cycle_t ret = clocksource_mmio_readl_down(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("clocksource_mmio_readl_down returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct clocksource)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_proc_dohung_task_timeout_secs
#define APP_WRAPPER_FOR_proc_dohung_task_timeout_secs
#endif
 
#ifndef APP_WRAPPER_FOR_proc_dohung_task_timeout_secs
#define APP_WRAPPER_FOR_proc_dohung_task_timeout_secs
FUNCTION_WRAPPER(proc_dohung_task_timeout_secs, (struct ctl_table *table, int write, void *buffer, size_t *lenp, loff_t *ppos), {
    WRAP_RECURSIVE(table);
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    kern_printk("proc_dohung_task_timeout_secs is invoked.\n");
    PRE_WRAPPER_FUNC(table, write, buffer, lenp, ppos);
    int ret = proc_dohung_task_timeout_secs(table, write, buffer, lenp, ppos);
    POST_WRAPPER_FUNC(table, write, buffer, lenp, ppos);
    kern_printk("proc_dohung_task_timeout_secs returned.\n");
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vlan_dev_real_dev
#define APP_WRAPPER_FOR_vlan_dev_real_dev
#endif
 
#ifndef APP_WRAPPER_FOR_vlan_dev_real_dev
#define APP_WRAPPER_FOR_vlan_dev_real_dev
FUNCTION_WRAPPER(vlan_dev_real_dev, (const struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("vlan_dev_real_dev is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    struct net_device *ret = vlan_dev_real_dev(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("vlan_dev_real_dev returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_get_subsys
#define APP_WRAPPER_FOR_pci_get_subsys
#endif
 
#ifndef APP_WRAPPER_FOR_pci_get_subsys
#define APP_WRAPPER_FOR_pci_get_subsys
FUNCTION_WRAPPER(pci_get_subsys, (unsigned int vendor, unsigned int device, unsigned int ss_vendor, unsigned int ss_device, struct pci_dev *from), {
    WRAP_RECURSIVE(from);
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(from)));
    kern_printk("pci_get_subsys is invoked.\n");
    PRE_WRAPPER_FUNC(vendor, device, ss_vendor, ss_device, from);
    struct pci_dev *ret = pci_get_subsys(vendor, device, ss_vendor, ss_device, from);
    POST_WRAPPER_FUNC(vendor, device, ss_vendor, ss_device, from);
    kern_printk("pci_get_subsys returned.\n");
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(from)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_e820_print_map
#define APP_WRAPPER_FOR_e820_print_map
#endif
 
#ifndef APP_WRAPPER_FOR_e820_print_map
#define APP_WRAPPER_FOR_e820_print_map
FUNCTION_WRAPPER_VOID(e820_print_map, (char *who), {
    kern_printk("e820_print_map is invoked.\n");
    PRE_WRAPPER_FUNC(who);
    e820_print_map(who);
    POST_WRAPPER_FUNC(who);
    kern_printk("e820_print_map returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_get_class
#define APP_WRAPPER_FOR_pci_get_class
#endif
 
#ifndef APP_WRAPPER_FOR_pci_get_class
#define APP_WRAPPER_FOR_pci_get_class
FUNCTION_WRAPPER(pci_get_class, (unsigned int class_, struct pci_dev *from), {
    WRAP_RECURSIVE(from);
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(from)));
    kern_printk("pci_get_class is invoked.\n");
    PRE_WRAPPER_FUNC(class_, from);
    struct pci_dev *ret = pci_get_class(class_, from);
    POST_WRAPPER_FUNC(class_, from);
    kern_printk("pci_get_class returned.\n");
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(from)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_csk_delete_keepalive_timer
#define APP_WRAPPER_FOR_inet_csk_delete_keepalive_timer
#endif
 
#ifndef APP_WRAPPER_FOR_inet_csk_delete_keepalive_timer
#define APP_WRAPPER_FOR_inet_csk_delete_keepalive_timer
FUNCTION_WRAPPER_VOID(inet_csk_delete_keepalive_timer, (struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("inet_csk_delete_keepalive_timer is invoked.\n");
    PRE_WRAPPER_FUNC(sk);
    inet_csk_delete_keepalive_timer(sk);
    POST_WRAPPER_FUNC(sk);
    kern_printk("inet_csk_delete_keepalive_timer returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR_seq_hlist_start
#define APP_WRAPPER_FOR_seq_hlist_start
#endif
 
#ifndef APP_WRAPPER_FOR_seq_hlist_start
#define APP_WRAPPER_FOR_seq_hlist_start
FUNCTION_WRAPPER(seq_hlist_start, (struct hlist_head *head, loff_t pos), {
    kern_printk("seq_hlist_start is invoked.\n");
    PRE_WRAPPER_FUNC(head, pos);
    struct hlist_node *ret = seq_hlist_start(head, pos);
    POST_WRAPPER_FUNC(head, pos);
    kern_printk("seq_hlist_start returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_bus_generate_netlink_event
#define APP_WRAPPER_FOR_acpi_bus_generate_netlink_event
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_bus_generate_netlink_event
#define APP_WRAPPER_FOR_acpi_bus_generate_netlink_event
FUNCTION_WRAPPER(acpi_bus_generate_netlink_event, (const char *_arg1, const char *_arg2, u8 _arg3, int _arg4), {
    kern_printk("acpi_bus_generate_netlink_event is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = acpi_bus_generate_netlink_event(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("acpi_bus_generate_netlink_event returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_osi_setup
#define APP_WRAPPER_FOR_acpi_osi_setup
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_osi_setup
#define APP_WRAPPER_FOR_acpi_osi_setup
FUNCTION_WRAPPER_VOID(acpi_osi_setup, (char *str), {
    kern_printk("acpi_osi_setup is invoked.\n");
    PRE_WRAPPER_FUNC(str);
    acpi_osi_setup(str);
    POST_WRAPPER_FUNC(str);
    kern_printk("acpi_osi_setup returned.\n");
})
#endif


#ifndef KERN_ADDR_bitmap_parse_user
#define APP_WRAPPER_FOR_bitmap_parse_user
#endif
 
#ifndef APP_WRAPPER_FOR_bitmap_parse_user
#define APP_WRAPPER_FOR_bitmap_parse_user
FUNCTION_WRAPPER(bitmap_parse_user, (const char *ubuf, unsigned int ulen, unsigned long *dst, int nbits), {
    kern_printk("bitmap_parse_user is invoked.\n");
    PRE_WRAPPER_FUNC(ubuf, ulen, dst, nbits);
    int ret = bitmap_parse_user(ubuf, ulen, dst, nbits);
    POST_WRAPPER_FUNC(ubuf, ulen, dst, nbits);
    kern_printk("bitmap_parse_user returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_queue_delayed_work
#define APP_WRAPPER_FOR_queue_delayed_work
#endif
 
#ifndef APP_WRAPPER_FOR_queue_delayed_work
#define APP_WRAPPER_FOR_queue_delayed_work
FUNCTION_WRAPPER(queue_delayed_work, (struct workqueue_struct *wq, struct delayed_work *work, unsigned long delay), {
    WRAP_RECURSIVE(work);
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct delayed_work)(*(TO_UNWATCHED_ADDRESS(work)));
    kern_printk("queue_delayed_work is invoked.\n");
    PRE_WRAPPER_FUNC(wq, work, delay);
    bool ret = queue_delayed_work(wq, work, delay);
    POST_WRAPPER_FUNC(wq, work, delay);
    kern_printk("queue_delayed_work returned.\n");
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct delayed_work)(*(TO_UNWATCHED_ADDRESS(work)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_rq_map_user
#define APP_WRAPPER_FOR_blk_rq_map_user
#endif
 
#ifndef APP_WRAPPER_FOR_blk_rq_map_user
#define APP_WRAPPER_FOR_blk_rq_map_user
FUNCTION_WRAPPER(blk_rq_map_user, (struct request_queue *_arg1, struct request *_arg2, struct rq_map_data *_arg3, void *_arg4, unsigned long _arg5, gfp_t _arg6), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct rq_map_data)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("blk_rq_map_user is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
    int ret = blk_rq_map_user(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
    kern_printk("blk_rq_map_user returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct rq_map_data)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_idr_remove
#define APP_WRAPPER_FOR_idr_remove
#endif
 
#ifndef APP_WRAPPER_FOR_idr_remove
#define APP_WRAPPER_FOR_idr_remove
FUNCTION_WRAPPER_VOID(idr_remove, (struct idr *idp, int id), {
    WRAP_RECURSIVE(idp);
    TRACES_IF_WATCHPOINT(idp);
    SCAN_HEAD_FUNC(struct idr)(*(TO_UNWATCHED_ADDRESS(idp)));
    kern_printk("idr_remove is invoked.\n");
    PRE_WRAPPER_FUNC(idp, id);
    idr_remove(idp, id);
    POST_WRAPPER_FUNC(idp, id);
    kern_printk("idr_remove returned.\n");
    TRACES_IF_WATCHPOINT(idp);
    SCAN_HEAD_FUNC(struct idr)(*(TO_UNWATCHED_ADDRESS(idp)));
})
#endif


#ifndef KERN_ADDR_qdisc_watchdog_init
#define APP_WRAPPER_FOR_qdisc_watchdog_init
#endif
 
#ifndef APP_WRAPPER_FOR_qdisc_watchdog_init
#define APP_WRAPPER_FOR_qdisc_watchdog_init
FUNCTION_WRAPPER_VOID(qdisc_watchdog_init, (struct qdisc_watchdog *wd, struct Qdisc *qdisc), {
    WRAP_RECURSIVE(wd);
    TRACES_IF_WATCHPOINT(wd);
    SCAN_HEAD_FUNC(struct qdisc_watchdog)(*(TO_UNWATCHED_ADDRESS(wd)));
    WRAP_RECURSIVE(qdisc);
    TRACES_IF_WATCHPOINT(qdisc);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(qdisc)));
    kern_printk("qdisc_watchdog_init is invoked.\n");
    PRE_WRAPPER_FUNC(wd, qdisc);
    qdisc_watchdog_init(wd, qdisc);
    POST_WRAPPER_FUNC(wd, qdisc);
    kern_printk("qdisc_watchdog_init returned.\n");
    TRACES_IF_WATCHPOINT(wd);
    SCAN_HEAD_FUNC(struct qdisc_watchdog)(*(TO_UNWATCHED_ADDRESS(wd)));
    TRACES_IF_WATCHPOINT(qdisc);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(qdisc)));
})
#endif


#ifndef KERN_ADDR_phy_drivers_unregister
#define APP_WRAPPER_FOR_phy_drivers_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_phy_drivers_unregister
#define APP_WRAPPER_FOR_phy_drivers_unregister
FUNCTION_WRAPPER_VOID(phy_drivers_unregister, (struct phy_driver *drv, int n), {
    WRAP_RECURSIVE(drv);
    TRACES_IF_WATCHPOINT(drv);
    SCAN_HEAD_FUNC(struct phy_driver)(*(TO_UNWATCHED_ADDRESS(drv)));
    kern_printk("phy_drivers_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(drv, n);
    phy_drivers_unregister(drv, n);
    POST_WRAPPER_FUNC(drv, n);
    kern_printk("phy_drivers_unregister returned.\n");
    TRACES_IF_WATCHPOINT(drv);
    SCAN_HEAD_FUNC(struct phy_driver)(*(TO_UNWATCHED_ADDRESS(drv)));
})
#endif


#ifndef KERN_ADDR_cancel_delayed_work
#define APP_WRAPPER_FOR_cancel_delayed_work
#endif
 
#ifndef APP_WRAPPER_FOR_cancel_delayed_work
#define APP_WRAPPER_FOR_cancel_delayed_work
FUNCTION_WRAPPER(cancel_delayed_work, (struct delayed_work *dwork), {
    WRAP_RECURSIVE(dwork);
    TRACES_IF_WATCHPOINT(dwork);
    SCAN_HEAD_FUNC(struct delayed_work)(*(TO_UNWATCHED_ADDRESS(dwork)));
    kern_printk("cancel_delayed_work is invoked.\n");
    PRE_WRAPPER_FUNC(dwork);
    bool ret = cancel_delayed_work(dwork);
    POST_WRAPPER_FUNC(dwork);
    kern_printk("cancel_delayed_work returned.\n");
    TRACES_IF_WATCHPOINT(dwork);
    SCAN_HEAD_FUNC(struct delayed_work)(*(TO_UNWATCHED_ADDRESS(dwork)));
    return ret;
})
#endif


#ifndef KERN_ADDR_lapic_shutdown
#define APP_WRAPPER_FOR_lapic_shutdown
#endif
 
#ifndef APP_WRAPPER_FOR_lapic_shutdown
#define APP_WRAPPER_FOR_lapic_shutdown
FUNCTION_WRAPPER_VOID(lapic_shutdown, (), {
    kern_printk("lapic_shutdown is invoked.\n");
    PRE_WRAPPER_FUNC();
    lapic_shutdown();
    POST_WRAPPER_FUNC();
    kern_printk("lapic_shutdown returned.\n");
})
#endif


#ifndef KERN_ADDR_task_cputime_adjusted
#define APP_WRAPPER_FOR_task_cputime_adjusted
#endif
 
#ifndef APP_WRAPPER_FOR_task_cputime_adjusted
#define APP_WRAPPER_FOR_task_cputime_adjusted
FUNCTION_WRAPPER_VOID(task_cputime_adjusted, (struct task_struct *p, cputime_t *ut, cputime_t *st), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("task_cputime_adjusted is invoked.\n");
    PRE_WRAPPER_FUNC(p, ut, st);
    task_cputime_adjusted(p, ut, st);
    POST_WRAPPER_FUNC(p, ut, st);
    kern_printk("task_cputime_adjusted returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
})
#endif


#ifndef KERN_ADDR_simple_write_to_buffer
#define APP_WRAPPER_FOR_simple_write_to_buffer
#endif
 
#ifndef APP_WRAPPER_FOR_simple_write_to_buffer
#define APP_WRAPPER_FOR_simple_write_to_buffer
FUNCTION_WRAPPER(simple_write_to_buffer, (void *to, size_t available, loff_t *ppos, const void *from, size_t count), {
    kern_printk("simple_write_to_buffer is invoked.\n");
    PRE_WRAPPER_FUNC(to, available, ppos, from, count);
    ssize_t ret = simple_write_to_buffer(to, available, ppos, from, count);
    POST_WRAPPER_FUNC(to, available, ppos, from, count);
    kern_printk("simple_write_to_buffer returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_get_parent_ip
#define APP_WRAPPER_FOR_get_parent_ip
#endif
 
#ifndef APP_WRAPPER_FOR_get_parent_ip
#define APP_WRAPPER_FOR_get_parent_ip
FUNCTION_WRAPPER(get_parent_ip, (unsigned long addr), {
    kern_printk("get_parent_ip is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    long ret = get_parent_ip(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("get_parent_ip returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pvclock_read_flags
#define APP_WRAPPER_FOR_pvclock_read_flags
#endif
 
#ifndef APP_WRAPPER_FOR_pvclock_read_flags
#define APP_WRAPPER_FOR_pvclock_read_flags
FUNCTION_WRAPPER(pvclock_read_flags, (struct pvclock_vcpu_time_info *src), {
    kern_printk("pvclock_read_flags is invoked.\n");
    PRE_WRAPPER_FUNC(src);
    u8 ret = pvclock_read_flags(src);
    POST_WRAPPER_FUNC(src);
    kern_printk("pvclock_read_flags returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_iounmap
#define APP_WRAPPER_FOR_pci_iounmap
#endif
 
#ifndef APP_WRAPPER_FOR_pci_iounmap
#define APP_WRAPPER_FOR_pci_iounmap
FUNCTION_WRAPPER_VOID(pci_iounmap, (struct pci_dev *dev, void *_arg1), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_iounmap is invoked.\n");
    PRE_WRAPPER_FUNC(dev, _arg1);
    pci_iounmap(dev, _arg1);
    POST_WRAPPER_FUNC(dev, _arg1);
    kern_printk("pci_iounmap returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_ata_std_qc_defer
#define APP_WRAPPER_FOR_ata_std_qc_defer
#endif
 
#ifndef APP_WRAPPER_FOR_ata_std_qc_defer
#define APP_WRAPPER_FOR_ata_std_qc_defer
FUNCTION_WRAPPER(ata_std_qc_defer, (struct ata_queued_cmd *qc), {
    WRAP_RECURSIVE(qc);
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    kern_printk("ata_std_qc_defer is invoked.\n");
    PRE_WRAPPER_FUNC(qc);
    int ret = ata_std_qc_defer(qc);
    POST_WRAPPER_FUNC(qc);
    kern_printk("ata_std_qc_defer returned.\n");
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    return ret;
})
#endif


#ifndef KERN_ADDR_eisa_set_level_irq
#define APP_WRAPPER_FOR_eisa_set_level_irq
#endif
 
#ifndef APP_WRAPPER_FOR_eisa_set_level_irq
#define APP_WRAPPER_FOR_eisa_set_level_irq
FUNCTION_WRAPPER_VOID(eisa_set_level_irq, (unsigned int irq), {
    kern_printk("eisa_set_level_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq);
    eisa_set_level_irq(irq);
    POST_WRAPPER_FUNC(irq);
    kern_printk("eisa_set_level_irq returned.\n");
})
#endif


#ifndef KERN_ADDR_set_pages_array_wc
#define APP_WRAPPER_FOR_set_pages_array_wc
#endif
 
#ifndef APP_WRAPPER_FOR_set_pages_array_wc
#define APP_WRAPPER_FOR_set_pages_array_wc
FUNCTION_WRAPPER(set_pages_array_wc, (struct page **pages, int addrinarray), {
    WRAP_RECURSIVE(pages);
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    kern_printk("set_pages_array_wc is invoked.\n");
    PRE_WRAPPER_FUNC(pages, addrinarray);
    int ret = set_pages_array_wc(pages, addrinarray);
    POST_WRAPPER_FUNC(pages, addrinarray);
    kern_printk("set_pages_array_wc returned.\n");
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    return ret;
})
#endif


#ifndef KERN_ADDR_set_pages_array_wb
#define APP_WRAPPER_FOR_set_pages_array_wb
#endif
 
#ifndef APP_WRAPPER_FOR_set_pages_array_wb
#define APP_WRAPPER_FOR_set_pages_array_wb
FUNCTION_WRAPPER(set_pages_array_wb, (struct page **pages, int addrinarray), {
    WRAP_RECURSIVE(pages);
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    kern_printk("set_pages_array_wb is invoked.\n");
    PRE_WRAPPER_FUNC(pages, addrinarray);
    int ret = set_pages_array_wb(pages, addrinarray);
    POST_WRAPPER_FUNC(pages, addrinarray);
    kern_printk("set_pages_array_wb returned.\n");
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    return ret;
})
#endif


#ifndef KERN_ADDR_percpu_down_read
#define APP_WRAPPER_FOR_percpu_down_read
#endif
 
#ifndef APP_WRAPPER_FOR_percpu_down_read
#define APP_WRAPPER_FOR_percpu_down_read
FUNCTION_WRAPPER_VOID(percpu_down_read, (struct percpu_rw_semaphore *_arg1), {
    kern_printk("percpu_down_read is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    percpu_down_read(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("percpu_down_read returned.\n");
})
#endif


#ifndef KERN_ADDR___register_chrdev
#define APP_WRAPPER_FOR___register_chrdev
#endif
 
#ifndef APP_WRAPPER_FOR___register_chrdev
#define APP_WRAPPER_FOR___register_chrdev
FUNCTION_WRAPPER(__register_chrdev, (unsigned int major, unsigned int baseminor, unsigned int count, const char *name, const struct file_operations *fops), {
    WRAP_RECURSIVE(fops);
    TRACES_IF_WATCHPOINT(fops);
    SCAN_HEAD_FUNC(const struct file_operations)(*(TO_UNWATCHED_ADDRESS(fops)));
    kern_printk("__register_chrdev is invoked.\n");
    PRE_WRAPPER_FUNC(major, baseminor, count, name, fops);
    int ret = __register_chrdev(major, baseminor, count, name, fops);
    POST_WRAPPER_FUNC(major, baseminor, count, name, fops);
    kern_printk("__register_chrdev returned.\n");
    TRACES_IF_WATCHPOINT(fops);
    SCAN_HEAD_FUNC(const struct file_operations)(*(TO_UNWATCHED_ADDRESS(fops)));
    return ret;
})
#endif


#ifndef KERN_ADDR_is_subdir
#define APP_WRAPPER_FOR_is_subdir
#endif
 
#ifndef APP_WRAPPER_FOR_is_subdir
#define APP_WRAPPER_FOR_is_subdir
FUNCTION_WRAPPER(is_subdir, (struct dentry *_arg1, struct dentry *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("is_subdir is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = is_subdir(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("is_subdir returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_get_super_thawed
#define APP_WRAPPER_FOR_get_super_thawed
#endif
 
#ifndef APP_WRAPPER_FOR_get_super_thawed
#define APP_WRAPPER_FOR_get_super_thawed
FUNCTION_WRAPPER(get_super_thawed, (struct block_device *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("get_super_thawed is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct super_block *ret = get_super_thawed(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("get_super_thawed returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sk_stream_error
#define APP_WRAPPER_FOR_sk_stream_error
#endif
 
#ifndef APP_WRAPPER_FOR_sk_stream_error
#define APP_WRAPPER_FOR_sk_stream_error
FUNCTION_WRAPPER(sk_stream_error, (struct sock *sk, int flags, int err), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sk_stream_error is invoked.\n");
    PRE_WRAPPER_FUNC(sk, flags, err);
    int ret = sk_stream_error(sk, flags, err);
    POST_WRAPPER_FUNC(sk, flags, err);
    kern_printk("sk_stream_error returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_clockevents_exchange_device
#define APP_WRAPPER_FOR_clockevents_exchange_device
#endif
 
#ifndef APP_WRAPPER_FOR_clockevents_exchange_device
#define APP_WRAPPER_FOR_clockevents_exchange_device
FUNCTION_WRAPPER_VOID(clockevents_exchange_device, (struct clock_event_device *old, struct clock_event_device *new_), {
    WRAP_RECURSIVE(old);
    TRACES_IF_WATCHPOINT(old);
    SCAN_HEAD_FUNC(struct clock_event_device)(*(TO_UNWATCHED_ADDRESS(old)));
    WRAP_RECURSIVE(new_);
    TRACES_IF_WATCHPOINT(new_);
    SCAN_HEAD_FUNC(struct clock_event_device)(*(TO_UNWATCHED_ADDRESS(new_)));
    kern_printk("clockevents_exchange_device is invoked.\n");
    PRE_WRAPPER_FUNC(old, new_);
    clockevents_exchange_device(old, new_);
    POST_WRAPPER_FUNC(old, new_);
    kern_printk("clockevents_exchange_device returned.\n");
    TRACES_IF_WATCHPOINT(old);
    SCAN_HEAD_FUNC(struct clock_event_device)(*(TO_UNWATCHED_ADDRESS(old)));
    TRACES_IF_WATCHPOINT(new_);
    SCAN_HEAD_FUNC(struct clock_event_device)(*(TO_UNWATCHED_ADDRESS(new_)));
})
#endif


#ifndef KERN_ADDR_mii_check_gmii_support
#define APP_WRAPPER_FOR_mii_check_gmii_support
#endif
 
#ifndef APP_WRAPPER_FOR_mii_check_gmii_support
#define APP_WRAPPER_FOR_mii_check_gmii_support
FUNCTION_WRAPPER(mii_check_gmii_support, (struct mii_if_info *mii), {
    WRAP_RECURSIVE(mii);
    TRACES_IF_WATCHPOINT(mii);
    SCAN_HEAD_FUNC(struct mii_if_info)(*(TO_UNWATCHED_ADDRESS(mii)));
    kern_printk("mii_check_gmii_support is invoked.\n");
    PRE_WRAPPER_FUNC(mii);
    int ret = mii_check_gmii_support(mii);
    POST_WRAPPER_FUNC(mii);
    kern_printk("mii_check_gmii_support returned.\n");
    TRACES_IF_WATCHPOINT(mii);
    SCAN_HEAD_FUNC(struct mii_if_info)(*(TO_UNWATCHED_ADDRESS(mii)));
    return ret;
})
#endif


#ifndef KERN_ADDR_hrtimer_get_res
#define APP_WRAPPER_FOR_hrtimer_get_res
#endif
 
#ifndef APP_WRAPPER_FOR_hrtimer_get_res
#define APP_WRAPPER_FOR_hrtimer_get_res
FUNCTION_WRAPPER(hrtimer_get_res, (const clockid_t which_clock, struct timespec *tp), {
    kern_printk("hrtimer_get_res is invoked.\n");
    PRE_WRAPPER_FUNC(which_clock, tp);
    int ret = hrtimer_get_res(which_clock, tp);
    POST_WRAPPER_FUNC(which_clock, tp);
    kern_printk("hrtimer_get_res returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_run_osc
#define APP_WRAPPER_FOR_acpi_run_osc
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_run_osc
#define APP_WRAPPER_FOR_acpi_run_osc
FUNCTION_WRAPPER(acpi_run_osc, (acpi_handle handle, struct acpi_osc_context *context), {
    kern_printk("acpi_run_osc is invoked.\n");
    PRE_WRAPPER_FUNC(handle, context);
    acpi_status ret = acpi_run_osc(handle, context);
    POST_WRAPPER_FUNC(handle, context);
    kern_printk("acpi_run_osc returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_walk_system_ram_range
#define APP_WRAPPER_FOR_walk_system_ram_range
#endif
 
#ifndef APP_WRAPPER_FOR_walk_system_ram_range
#define APP_WRAPPER_FOR_walk_system_ram_range
FUNCTION_WRAPPER(walk_system_ram_range, (unsigned long start_pfn, unsigned long nr_pages, void *arg, int (*func)(unsigned long, unsigned long, void *)), {
    WRAP_FUNCTION(func);
    kern_printk("walk_system_ram_range is invoked.\n");
    PRE_WRAPPER_FUNC(start_pfn, nr_pages, arg, func);
    int ret = walk_system_ram_range(start_pfn, nr_pages, arg, func);
    POST_WRAPPER_FUNC(start_pfn, nr_pages, arg, func);
    kern_printk("walk_system_ram_range returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dma_generic_free_coherent
#define APP_WRAPPER_FOR_dma_generic_free_coherent
#endif
 
#ifndef APP_WRAPPER_FOR_dma_generic_free_coherent
#define APP_WRAPPER_FOR_dma_generic_free_coherent
FUNCTION_WRAPPER_VOID(dma_generic_free_coherent, (struct device *dev, size_t size, void *vaddr, dma_addr_t dma_addr, struct dma_attrs *attrs), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dma_generic_free_coherent is invoked.\n");
    PRE_WRAPPER_FUNC(dev, size, vaddr, dma_addr, attrs);
    dma_generic_free_coherent(dev, size, vaddr, dma_addr, attrs);
    POST_WRAPPER_FUNC(dev, size, vaddr, dma_addr, attrs);
    kern_printk("dma_generic_free_coherent returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_render_sigset_t
#define APP_WRAPPER_FOR_render_sigset_t
#endif
 
#ifndef APP_WRAPPER_FOR_render_sigset_t
#define APP_WRAPPER_FOR_render_sigset_t
FUNCTION_WRAPPER_VOID(render_sigset_t, (struct seq_file *m, const char *header, sigset_t *set), {
    WRAP_RECURSIVE(m);
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
    kern_printk("render_sigset_t is invoked.\n");
    PRE_WRAPPER_FUNC(m, header, set);
    render_sigset_t(m, header, set);
    POST_WRAPPER_FUNC(m, header, set);
    kern_printk("render_sigset_t returned.\n");
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
})
#endif


#ifndef KERN_ADDR_irq_get_next_irq
#define APP_WRAPPER_FOR_irq_get_next_irq
#endif
 
#ifndef APP_WRAPPER_FOR_irq_get_next_irq
#define APP_WRAPPER_FOR_irq_get_next_irq
FUNCTION_WRAPPER(irq_get_next_irq, (unsigned int offset), {
    kern_printk("irq_get_next_irq is invoked.\n");
    PRE_WRAPPER_FUNC(offset);
    int ret = irq_get_next_irq(offset);
    POST_WRAPPER_FUNC(offset);
    kern_printk("irq_get_next_irq returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_handle_irq
#define APP_WRAPPER_FOR_generic_handle_irq
#endif
 
#ifndef APP_WRAPPER_FOR_generic_handle_irq
#define APP_WRAPPER_FOR_generic_handle_irq
FUNCTION_WRAPPER(generic_handle_irq, (unsigned int irq), {
    kern_printk("generic_handle_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq);
    int ret = generic_handle_irq(irq);
    POST_WRAPPER_FUNC(irq);
    kern_printk("generic_handle_irq returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___ethtool_get_settings
#define APP_WRAPPER_FOR___ethtool_get_settings
#endif
 
#ifndef APP_WRAPPER_FOR___ethtool_get_settings
#define APP_WRAPPER_FOR___ethtool_get_settings
FUNCTION_WRAPPER(__ethtool_get_settings, (struct net_device *dev, struct ethtool_cmd *cmd), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("__ethtool_get_settings is invoked.\n");
    PRE_WRAPPER_FUNC(dev, cmd);
    int ret = __ethtool_get_settings(dev, cmd);
    POST_WRAPPER_FUNC(dev, cmd);
    kern_printk("__ethtool_get_settings returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR___bitmap_subset
#define APP_WRAPPER_FOR___bitmap_subset
#endif
 
#ifndef APP_WRAPPER_FOR___bitmap_subset
#define APP_WRAPPER_FOR___bitmap_subset
FUNCTION_WRAPPER(__bitmap_subset, (unsigned const long *bitmap1, unsigned const long *bitmap2, int bits), {
    kern_printk("__bitmap_subset is invoked.\n");
    PRE_WRAPPER_FUNC(bitmap1, bitmap2, bits);
    int ret = __bitmap_subset(bitmap1, bitmap2, bits);
    POST_WRAPPER_FUNC(bitmap1, bitmap2, bits);
    kern_printk("__bitmap_subset returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_finish_wait
#define APP_WRAPPER_FOR_finish_wait
#endif
 
#ifndef APP_WRAPPER_FOR_finish_wait
#define APP_WRAPPER_FOR_finish_wait
FUNCTION_WRAPPER_VOID(finish_wait, (wait_queue_head_t *q, wait_queue_t *wait), {
    WRAP_RECURSIVE(wait);
    TRACES_IF_WATCHPOINT(wait);
    SCAN_HEAD_FUNC(wait_queue_t)(*(TO_UNWATCHED_ADDRESS(wait)));
    kern_printk("finish_wait is invoked.\n");
    PRE_WRAPPER_FUNC(q, wait);
    finish_wait(q, wait);
    POST_WRAPPER_FUNC(q, wait);
    kern_printk("finish_wait returned.\n");
    TRACES_IF_WATCHPOINT(wait);
    SCAN_HEAD_FUNC(wait_queue_t)(*(TO_UNWATCHED_ADDRESS(wait)));
})
#endif


#ifndef KERN_ADDR_device_add
#define APP_WRAPPER_FOR_device_add
#endif
 
#ifndef APP_WRAPPER_FOR_device_add
#define APP_WRAPPER_FOR_device_add
FUNCTION_WRAPPER(device_add, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("device_add is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = device_add(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("device_add returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_key_revoke
#define APP_WRAPPER_FOR_key_revoke
#endif
 
#ifndef APP_WRAPPER_FOR_key_revoke
#define APP_WRAPPER_FOR_key_revoke
FUNCTION_WRAPPER_VOID(key_revoke, (struct key *key), {
    kern_printk("key_revoke is invoked.\n");
    PRE_WRAPPER_FUNC(key);
    key_revoke(key);
    POST_WRAPPER_FUNC(key);
    kern_printk("key_revoke returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_install_interface_handler
#define APP_WRAPPER_FOR_acpi_install_interface_handler
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_install_interface_handler
#define APP_WRAPPER_FOR_acpi_install_interface_handler
FUNCTION_WRAPPER(acpi_install_interface_handler, (acpi_interface_handler handler), {
    WRAP_FUNCTION(handler);
    kern_printk("acpi_install_interface_handler is invoked.\n");
    PRE_WRAPPER_FUNC(handler);
    acpi_status ret = acpi_install_interface_handler(handler);
    POST_WRAPPER_FUNC(handler);
    kern_printk("acpi_install_interface_handler returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_paravirt_end_context_switch
#define APP_WRAPPER_FOR_paravirt_end_context_switch
#endif
 
#ifndef APP_WRAPPER_FOR_paravirt_end_context_switch
#define APP_WRAPPER_FOR_paravirt_end_context_switch
FUNCTION_WRAPPER_VOID(paravirt_end_context_switch, (struct task_struct *next), {
    WRAP_RECURSIVE(next);
    TRACES_IF_WATCHPOINT(next);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(next)));
    kern_printk("paravirt_end_context_switch is invoked.\n");
    PRE_WRAPPER_FUNC(next);
    paravirt_end_context_switch(next);
    POST_WRAPPER_FUNC(next);
    kern_printk("paravirt_end_context_switch returned.\n");
    TRACES_IF_WATCHPOINT(next);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(next)));
})
#endif


#ifndef KERN_ADDR_device_register
#define APP_WRAPPER_FOR_device_register
#endif
 
#ifndef APP_WRAPPER_FOR_device_register
#define APP_WRAPPER_FOR_device_register
FUNCTION_WRAPPER(device_register, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("device_register is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = device_register(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("device_register returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_bus_max_busnr
#define APP_WRAPPER_FOR_pci_bus_max_busnr
#endif
 
#ifndef APP_WRAPPER_FOR_pci_bus_max_busnr
#define APP_WRAPPER_FOR_pci_bus_max_busnr
FUNCTION_WRAPPER(pci_bus_max_busnr, (struct pci_bus *bus), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_bus_max_busnr is invoked.\n");
    PRE_WRAPPER_FUNC(bus);
    char ret = pci_bus_max_busnr(bus);
    POST_WRAPPER_FUNC(bus);
    kern_printk("pci_bus_max_busnr returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    return ret;
})
#endif


#ifndef KERN_ADDR_native_set_fixmap
#define APP_WRAPPER_FOR_native_set_fixmap
#endif
 
#ifndef APP_WRAPPER_FOR_native_set_fixmap
#define APP_WRAPPER_FOR_native_set_fixmap
FUNCTION_WRAPPER_VOID(native_set_fixmap, (enum fixed_addresses idx, phys_addr_t phys, pgprot_t flags), {
    kern_printk("native_set_fixmap is invoked.\n");
    PRE_WRAPPER_FUNC(idx, phys, flags);
    native_set_fixmap(idx, phys, flags);
    POST_WRAPPER_FUNC(idx, phys, flags);
    kern_printk("native_set_fixmap returned.\n");
})
#endif


#ifndef KERN_ADDR_dma_async_device_register
#define APP_WRAPPER_FOR_dma_async_device_register
#endif
 
#ifndef APP_WRAPPER_FOR_dma_async_device_register
#define APP_WRAPPER_FOR_dma_async_device_register
FUNCTION_WRAPPER(dma_async_device_register, (struct dma_device *device), {
    WRAP_RECURSIVE(device);
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct dma_device)(*(TO_UNWATCHED_ADDRESS(device)));
    kern_printk("dma_async_device_register is invoked.\n");
    PRE_WRAPPER_FUNC(device);
    int ret = dma_async_device_register(device);
    POST_WRAPPER_FUNC(device);
    kern_printk("dma_async_device_register returned.\n");
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct dma_device)(*(TO_UNWATCHED_ADDRESS(device)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_std_bios_param
#define APP_WRAPPER_FOR_ata_std_bios_param
#endif
 
#ifndef APP_WRAPPER_FOR_ata_std_bios_param
#define APP_WRAPPER_FOR_ata_std_bios_param
FUNCTION_WRAPPER(ata_std_bios_param, (struct scsi_device *sdev, struct block_device *bdev, sector_t capacity, int geom[]), {
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    kern_printk("ata_std_bios_param is invoked.\n");
    PRE_WRAPPER_FUNC(sdev, bdev, capacity, geom);
    int ret = ata_std_bios_param(sdev, bdev, capacity, geom);
    POST_WRAPPER_FUNC(sdev, bdev, capacity, geom);
    kern_printk("ata_std_bios_param returned.\n");
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vlan_vids_add_by_dev
#define APP_WRAPPER_FOR_vlan_vids_add_by_dev
#endif
 
#ifndef APP_WRAPPER_FOR_vlan_vids_add_by_dev
#define APP_WRAPPER_FOR_vlan_vids_add_by_dev
FUNCTION_WRAPPER(vlan_vids_add_by_dev, (struct net_device *dev, const struct net_device *by_dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(by_dev);
    TRACES_IF_WATCHPOINT(by_dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(by_dev)));
    kern_printk("vlan_vids_add_by_dev is invoked.\n");
    PRE_WRAPPER_FUNC(dev, by_dev);
    int ret = vlan_vids_add_by_dev(dev, by_dev);
    POST_WRAPPER_FUNC(dev, by_dev);
    kern_printk("vlan_vids_add_by_dev returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(by_dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(by_dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bio_map_user_iov
#define APP_WRAPPER_FOR_bio_map_user_iov
#endif
 
#ifndef APP_WRAPPER_FOR_bio_map_user_iov
#define APP_WRAPPER_FOR_bio_map_user_iov
FUNCTION_WRAPPER(bio_map_user_iov, (struct request_queue *_arg1, struct block_device *_arg2, struct sg_iovec *_arg3, int _arg4, int _arg5, gfp_t _arg6), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("bio_map_user_iov is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
    struct bio *ret = bio_map_user_iov(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
    kern_printk("bio_map_user_iov returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_unregister_node
#define APP_WRAPPER_FOR_unregister_node
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_node
#define APP_WRAPPER_FOR_unregister_node
FUNCTION_WRAPPER_VOID(unregister_node, (struct node *node), {
    WRAP_RECURSIVE(node);
    TRACES_IF_WATCHPOINT(node);
    SCAN_HEAD_FUNC(struct node)(*(TO_UNWATCHED_ADDRESS(node)));
    kern_printk("unregister_node is invoked.\n");
    PRE_WRAPPER_FUNC(node);
    unregister_node(node);
    POST_WRAPPER_FUNC(node);
    kern_printk("unregister_node returned.\n");
    TRACES_IF_WATCHPOINT(node);
    SCAN_HEAD_FUNC(struct node)(*(TO_UNWATCHED_ADDRESS(node)));
})
#endif


#ifndef KERN_ADDR_unlock_flocks
#define APP_WRAPPER_FOR_unlock_flocks
#endif
 
#ifndef APP_WRAPPER_FOR_unlock_flocks
#define APP_WRAPPER_FOR_unlock_flocks
FUNCTION_WRAPPER_VOID(unlock_flocks, (), {
    kern_printk("unlock_flocks is invoked.\n");
    PRE_WRAPPER_FUNC();
    unlock_flocks();
    POST_WRAPPER_FUNC();
    kern_printk("unlock_flocks returned.\n");
})
#endif


#ifndef KERN_ADDR_skb_make_writable
#define APP_WRAPPER_FOR_skb_make_writable
#endif
 
#ifndef APP_WRAPPER_FOR_skb_make_writable
#define APP_WRAPPER_FOR_skb_make_writable
FUNCTION_WRAPPER(skb_make_writable, (struct sk_buff *skb, unsigned int writable_len), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_make_writable is invoked.\n");
    PRE_WRAPPER_FUNC(skb, writable_len);
    int ret = skb_make_writable(skb, writable_len);
    POST_WRAPPER_FUNC(skb, writable_len);
    kern_printk("skb_make_writable returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_do_pipe_flags
#define APP_WRAPPER_FOR_do_pipe_flags
#endif
 
#ifndef APP_WRAPPER_FOR_do_pipe_flags
#define APP_WRAPPER_FOR_do_pipe_flags
FUNCTION_WRAPPER(do_pipe_flags, (int *_arg1, int _arg2), {
    kern_printk("do_pipe_flags is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = do_pipe_flags(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("do_pipe_flags returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_module_refcount
#define APP_WRAPPER_FOR_module_refcount
#endif
 
#ifndef APP_WRAPPER_FOR_module_refcount
#define APP_WRAPPER_FOR_module_refcount
FUNCTION_WRAPPER(module_refcount, (struct module *mod), {
    WRAP_RECURSIVE(mod);
    TRACES_IF_WATCHPOINT(mod);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(mod)));
    kern_printk("module_refcount is invoked.\n");
    PRE_WRAPPER_FUNC(mod);
    long ret = module_refcount(mod);
    POST_WRAPPER_FUNC(mod);
    kern_printk("module_refcount returned.\n");
    TRACES_IF_WATCHPOINT(mod);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(mod)));
    return ret;
})
#endif


#ifndef KERN_ADDR_request_firmware_nowait
#define APP_WRAPPER_FOR_request_firmware_nowait
#endif
 
#ifndef APP_WRAPPER_FOR_request_firmware_nowait
#define APP_WRAPPER_FOR_request_firmware_nowait
FUNCTION_WRAPPER(request_firmware_nowait, (struct module *module, bool uevent, const char *name, struct device *device, gfp_t gfp, void *context, void (*cont)(const struct firmware *, void *)), {
    WRAP_RECURSIVE(module);
    TRACES_IF_WATCHPOINT(module);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(module)));
    WRAP_RECURSIVE(device);
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(device)));
    WRAP_FUNCTION(cont);
    kern_printk("request_firmware_nowait is invoked.\n");
    PRE_WRAPPER_FUNC(module, uevent, name, device, gfp, context, cont);
    int ret = request_firmware_nowait(module, uevent, name, device, gfp, context, cont);
    POST_WRAPPER_FUNC(module, uevent, name, device, gfp, context, cont);
    kern_printk("request_firmware_nowait returned.\n");
    TRACES_IF_WATCHPOINT(module);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(module)));
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(device)));
    return ret;
})
#endif


#ifndef KERN_ADDR_default_setup_apic_routing
#define APP_WRAPPER_FOR_default_setup_apic_routing
#endif
 
#ifndef APP_WRAPPER_FOR_default_setup_apic_routing
#define APP_WRAPPER_FOR_default_setup_apic_routing
FUNCTION_WRAPPER_VOID(default_setup_apic_routing, (), {
    kern_printk("default_setup_apic_routing is invoked.\n");
    PRE_WRAPPER_FUNC();
    default_setup_apic_routing();
    POST_WRAPPER_FUNC();
    kern_printk("default_setup_apic_routing returned.\n");
})
#endif


#ifndef KERN_ADDR_phy_disconnect
#define APP_WRAPPER_FOR_phy_disconnect
#endif
 
#ifndef APP_WRAPPER_FOR_phy_disconnect
#define APP_WRAPPER_FOR_phy_disconnect
FUNCTION_WRAPPER_VOID(phy_disconnect, (struct phy_device *phydev), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    kern_printk("phy_disconnect is invoked.\n");
    PRE_WRAPPER_FUNC(phydev);
    phy_disconnect(phydev);
    POST_WRAPPER_FUNC(phydev);
    kern_printk("phy_disconnect returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
})
#endif


#ifndef KERN_ADDR_pid_ns_release_proc
#define APP_WRAPPER_FOR_pid_ns_release_proc
#endif
 
#ifndef APP_WRAPPER_FOR_pid_ns_release_proc
#define APP_WRAPPER_FOR_pid_ns_release_proc
FUNCTION_WRAPPER_VOID(pid_ns_release_proc, (struct pid_namespace *ns), {
    kern_printk("pid_ns_release_proc is invoked.\n");
    PRE_WRAPPER_FUNC(ns);
    pid_ns_release_proc(ns);
    POST_WRAPPER_FUNC(ns);
    kern_printk("pid_ns_release_proc returned.\n");
})
#endif


#ifndef KERN_ADDR_phy_attach
#define APP_WRAPPER_FOR_phy_attach
#endif
 
#ifndef APP_WRAPPER_FOR_phy_attach
#define APP_WRAPPER_FOR_phy_attach
FUNCTION_WRAPPER(phy_attach, (struct net_device *dev, const char *bus_id, u32 flags, phy_interface_t interface), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("phy_attach is invoked.\n");
    PRE_WRAPPER_FUNC(dev, bus_id, flags, interface);
    struct phy_device *ret = phy_attach(dev, bus_id, flags, interface);
    POST_WRAPPER_FUNC(dev, bus_id, flags, interface);
    kern_printk("phy_attach returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_native_io_apic_read
#define APP_WRAPPER_FOR_native_io_apic_read
#endif
 
#ifndef APP_WRAPPER_FOR_native_io_apic_read
#define APP_WRAPPER_FOR_native_io_apic_read
FUNCTION_WRAPPER(native_io_apic_read, (unsigned int apic, unsigned int reg), {
    kern_printk("native_io_apic_read is invoked.\n");
    PRE_WRAPPER_FUNC(apic, reg);
    int ret = native_io_apic_read(apic, reg);
    POST_WRAPPER_FUNC(apic, reg);
    kern_printk("native_io_apic_read returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_set_normalized_timespec
#define APP_WRAPPER_FOR_set_normalized_timespec
#endif
 
#ifndef APP_WRAPPER_FOR_set_normalized_timespec
#define APP_WRAPPER_FOR_set_normalized_timespec
FUNCTION_WRAPPER_VOID(set_normalized_timespec, (struct timespec *ts, time_t sec, s64 nsec), {
    kern_printk("set_normalized_timespec is invoked.\n");
    PRE_WRAPPER_FUNC(ts, sec, nsec);
    set_normalized_timespec(ts, sec, nsec);
    POST_WRAPPER_FUNC(ts, sec, nsec);
    kern_printk("set_normalized_timespec returned.\n");
})
#endif


#ifndef KERN_ADDR_exit_sem
#define APP_WRAPPER_FOR_exit_sem
#endif
 
#ifndef APP_WRAPPER_FOR_exit_sem
#define APP_WRAPPER_FOR_exit_sem
FUNCTION_WRAPPER_VOID(exit_sem, (struct task_struct *tsk), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("exit_sem is invoked.\n");
    PRE_WRAPPER_FUNC(tsk);
    exit_sem(tsk);
    POST_WRAPPER_FUNC(tsk);
    kern_printk("exit_sem returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
})
#endif


#ifndef KERN_ADDR_put_filesystem
#define APP_WRAPPER_FOR_put_filesystem
#endif
 
#ifndef APP_WRAPPER_FOR_put_filesystem
#define APP_WRAPPER_FOR_put_filesystem
FUNCTION_WRAPPER_VOID(put_filesystem, (struct file_system_type *fs), {
    WRAP_RECURSIVE(fs);
    TRACES_IF_WATCHPOINT(fs);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(fs)));
    kern_printk("put_filesystem is invoked.\n");
    PRE_WRAPPER_FUNC(fs);
    put_filesystem(fs);
    POST_WRAPPER_FUNC(fs);
    kern_printk("put_filesystem returned.\n");
    TRACES_IF_WATCHPOINT(fs);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(fs)));
})
#endif


#ifndef KERN_ADDR_unregister_filesystem
#define APP_WRAPPER_FOR_unregister_filesystem
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_filesystem
#define APP_WRAPPER_FOR_unregister_filesystem
FUNCTION_WRAPPER(unregister_filesystem, (struct file_system_type *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("unregister_filesystem is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = unregister_filesystem(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("unregister_filesystem returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_datagram_poll
#define APP_WRAPPER_FOR_datagram_poll
#endif
 
#ifndef APP_WRAPPER_FOR_datagram_poll
#define APP_WRAPPER_FOR_datagram_poll
FUNCTION_WRAPPER(datagram_poll, (struct file *file, struct socket *sock, struct poll_table_struct *wait), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    WRAP_RECURSIVE(wait);
    TRACES_IF_WATCHPOINT(wait);
    SCAN_HEAD_FUNC(struct poll_table_struct)(*(TO_UNWATCHED_ADDRESS(wait)));
    kern_printk("datagram_poll is invoked.\n");
    PRE_WRAPPER_FUNC(file, sock, wait);
    int ret = datagram_poll(file, sock, wait);
    POST_WRAPPER_FUNC(file, sock, wait);
    kern_printk("datagram_poll returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    TRACES_IF_WATCHPOINT(wait);
    SCAN_HEAD_FUNC(struct poll_table_struct)(*(TO_UNWATCHED_ADDRESS(wait)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_fixup_irqs
#define APP_WRAPPER_FOR_pci_fixup_irqs
#endif
 
#ifndef APP_WRAPPER_FOR_pci_fixup_irqs
#define APP_WRAPPER_FOR_pci_fixup_irqs
FUNCTION_WRAPPER_VOID(pci_fixup_irqs, (u8 (*_arg1)(struct pci_dev *, u8 *), int (*_arg2)(const struct pci_dev *, u8, u8)), {
    WRAP_FUNCTION(_arg1);
    WRAP_FUNCTION(_arg2);
    kern_printk("pci_fixup_irqs is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    pci_fixup_irqs(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("pci_fixup_irqs returned.\n");
})
#endif


#ifndef KERN_ADDR_switch_to_new_gdt
#define APP_WRAPPER_FOR_switch_to_new_gdt
#endif
 
#ifndef APP_WRAPPER_FOR_switch_to_new_gdt
#define APP_WRAPPER_FOR_switch_to_new_gdt
FUNCTION_WRAPPER_VOID(switch_to_new_gdt, (int _arg1), {
    kern_printk("switch_to_new_gdt is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    switch_to_new_gdt(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("switch_to_new_gdt returned.\n");
})
#endif


#ifndef KERN_ADDR_clocksource_mmio_readw_down
#define APP_WRAPPER_FOR_clocksource_mmio_readw_down
#endif
 
#ifndef APP_WRAPPER_FOR_clocksource_mmio_readw_down
#define APP_WRAPPER_FOR_clocksource_mmio_readw_down
FUNCTION_WRAPPER(clocksource_mmio_readw_down, (struct clocksource *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct clocksource)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("clocksource_mmio_readw_down is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    cycle_t ret = clocksource_mmio_readw_down(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("clocksource_mmio_readw_down returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct clocksource)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_request_key_async
#define APP_WRAPPER_FOR_request_key_async
#endif
 
#ifndef APP_WRAPPER_FOR_request_key_async
#define APP_WRAPPER_FOR_request_key_async
FUNCTION_WRAPPER(request_key_async, (struct key_type *type, const char *description, const void *callout_info, size_t callout_len), {
    kern_printk("request_key_async is invoked.\n");
    PRE_WRAPPER_FUNC(type, description, callout_info, callout_len);
    struct key *ret = request_key_async(type, description, callout_info, callout_len);
    POST_WRAPPER_FUNC(type, description, callout_info, callout_len);
    kern_printk("request_key_async returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_idr_replace
#define APP_WRAPPER_FOR_idr_replace
#endif
 
#ifndef APP_WRAPPER_FOR_idr_replace
#define APP_WRAPPER_FOR_idr_replace
FUNCTION_WRAPPER(idr_replace, (struct idr *idp, void *ptr, int id), {
    WRAP_RECURSIVE(idp);
    TRACES_IF_WATCHPOINT(idp);
    SCAN_HEAD_FUNC(struct idr)(*(TO_UNWATCHED_ADDRESS(idp)));
    kern_printk("idr_replace is invoked.\n");
    PRE_WRAPPER_FUNC(idp, ptr, id);
    void *ret = idr_replace(idp, ptr, id);
    POST_WRAPPER_FUNC(idp, ptr, id);
    kern_printk("idr_replace returned.\n");
    TRACES_IF_WATCHPOINT(idp);
    SCAN_HEAD_FUNC(struct idr)(*(TO_UNWATCHED_ADDRESS(idp)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sysfs_chmod_file
#define APP_WRAPPER_FOR_sysfs_chmod_file
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_chmod_file
#define APP_WRAPPER_FOR_sysfs_chmod_file
FUNCTION_WRAPPER(sysfs_chmod_file, (struct kobject *kobj, const struct attribute *attr, umode_t mode), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    kern_printk("sysfs_chmod_file is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, attr, mode);
    int ret = sysfs_chmod_file(kobj, attr, mode);
    POST_WRAPPER_FUNC(kobj, attr, mode);
    kern_printk("sysfs_chmod_file returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kobject_put
#define APP_WRAPPER_FOR_kobject_put
#endif
 
#ifndef APP_WRAPPER_FOR_kobject_put
#define APP_WRAPPER_FOR_kobject_put
FUNCTION_WRAPPER_VOID(kobject_put, (struct kobject *kobj), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    kern_printk("kobject_put is invoked.\n");
    PRE_WRAPPER_FUNC(kobj);
    kobject_put(kobj);
    POST_WRAPPER_FUNC(kobj);
    kern_printk("kobject_put returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
})
#endif


#ifndef KERN_ADDR_handle_edge_eoi_irq
#define APP_WRAPPER_FOR_handle_edge_eoi_irq
#endif
 
#ifndef APP_WRAPPER_FOR_handle_edge_eoi_irq
#define APP_WRAPPER_FOR_handle_edge_eoi_irq
FUNCTION_WRAPPER_VOID(handle_edge_eoi_irq, (unsigned int irq, struct irq_desc *desc), {
    WRAP_RECURSIVE(desc);
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct irq_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
    kern_printk("handle_edge_eoi_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq, desc);
    handle_edge_eoi_irq(irq, desc);
    POST_WRAPPER_FUNC(irq, desc);
    kern_printk("handle_edge_eoi_irq returned.\n");
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct irq_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
})
#endif


#ifndef KERN_ADDR_irq_set_percpu_devid
#define APP_WRAPPER_FOR_irq_set_percpu_devid
#endif
 
#ifndef APP_WRAPPER_FOR_irq_set_percpu_devid
#define APP_WRAPPER_FOR_irq_set_percpu_devid
FUNCTION_WRAPPER(irq_set_percpu_devid, (unsigned int irq), {
    kern_printk("irq_set_percpu_devid is invoked.\n");
    PRE_WRAPPER_FUNC(irq);
    int ret = irq_set_percpu_devid(irq);
    POST_WRAPPER_FUNC(irq);
    kern_printk("irq_set_percpu_devid returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sk_prot_clear_portaddr_nulls
#define APP_WRAPPER_FOR_sk_prot_clear_portaddr_nulls
#endif
 
#ifndef APP_WRAPPER_FOR_sk_prot_clear_portaddr_nulls
#define APP_WRAPPER_FOR_sk_prot_clear_portaddr_nulls
FUNCTION_WRAPPER_VOID(sk_prot_clear_portaddr_nulls, (struct sock *sk, int size), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sk_prot_clear_portaddr_nulls is invoked.\n");
    PRE_WRAPPER_FUNC(sk, size);
    sk_prot_clear_portaddr_nulls(sk, size);
    POST_WRAPPER_FUNC(sk, size);
    kern_printk("sk_prot_clear_portaddr_nulls returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR_ata_sff_wait_ready
#define APP_WRAPPER_FOR_ata_sff_wait_ready
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_wait_ready
#define APP_WRAPPER_FOR_ata_sff_wait_ready
FUNCTION_WRAPPER(ata_sff_wait_ready, (struct ata_link *link, unsigned long deadline), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    kern_printk("ata_sff_wait_ready is invoked.\n");
    PRE_WRAPPER_FUNC(link, deadline);
    int ret = ata_sff_wait_ready(link, deadline);
    POST_WRAPPER_FUNC(link, deadline);
    kern_printk("ata_sff_wait_ready returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    return ret;
})
#endif


#ifndef KERN_ADDR_init_irq_proc
#define APP_WRAPPER_FOR_init_irq_proc
#endif
 
#ifndef APP_WRAPPER_FOR_init_irq_proc
#define APP_WRAPPER_FOR_init_irq_proc
FUNCTION_WRAPPER_VOID(init_irq_proc, (), {
    kern_printk("init_irq_proc is invoked.\n");
    PRE_WRAPPER_FUNC();
    init_irq_proc();
    POST_WRAPPER_FUNC();
    kern_printk("init_irq_proc returned.\n");
})
#endif


#ifndef KERN_ADDR_blk_integrity_unregister
#define APP_WRAPPER_FOR_blk_integrity_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_blk_integrity_unregister
#define APP_WRAPPER_FOR_blk_integrity_unregister
FUNCTION_WRAPPER_VOID(blk_integrity_unregister, (struct gendisk *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_integrity_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    blk_integrity_unregister(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("blk_integrity_unregister returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_dev_getbyhwaddr_rcu
#define APP_WRAPPER_FOR_dev_getbyhwaddr_rcu
#endif
 
#ifndef APP_WRAPPER_FOR_dev_getbyhwaddr_rcu
#define APP_WRAPPER_FOR_dev_getbyhwaddr_rcu
FUNCTION_WRAPPER(dev_getbyhwaddr_rcu, (struct net *net, unsigned short type, const char *hwaddr), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    kern_printk("dev_getbyhwaddr_rcu is invoked.\n");
    PRE_WRAPPER_FUNC(net, type, hwaddr);
    struct net_device *ret = dev_getbyhwaddr_rcu(net, type, hwaddr);
    POST_WRAPPER_FUNC(net, type, hwaddr);
    kern_printk("dev_getbyhwaddr_rcu returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_find_get_pages_contig
#define APP_WRAPPER_FOR_find_get_pages_contig
#endif
 
#ifndef APP_WRAPPER_FOR_find_get_pages_contig
#define APP_WRAPPER_FOR_find_get_pages_contig
FUNCTION_WRAPPER(find_get_pages_contig, (struct address_space *mapping, unsigned long start, unsigned int nr_pages, struct page **pages), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    WRAP_RECURSIVE(pages);
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    kern_printk("find_get_pages_contig is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, start, nr_pages, pages);
    int ret = find_get_pages_contig(mapping, start, nr_pages, pages);
    POST_WRAPPER_FUNC(mapping, start, nr_pages, pages);
    kern_printk("find_get_pages_contig returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    return ret;
})
#endif


#ifndef KERN_ADDR_e820_update_range
#define APP_WRAPPER_FOR_e820_update_range
#endif
 
#ifndef APP_WRAPPER_FOR_e820_update_range
#define APP_WRAPPER_FOR_e820_update_range
FUNCTION_WRAPPER(e820_update_range, (u64 start, u64 size, unsigned int old_type, unsigned int new_type), {
    kern_printk("e820_update_range is invoked.\n");
    PRE_WRAPPER_FUNC(start, size, old_type, new_type);
    u64 ret = e820_update_range(start, size, old_type, new_type);
    POST_WRAPPER_FUNC(start, size, old_type, new_type);
    kern_printk("e820_update_range returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_rotate_reclaimable_page
#define APP_WRAPPER_FOR_rotate_reclaimable_page
#endif
 
#ifndef APP_WRAPPER_FOR_rotate_reclaimable_page
#define APP_WRAPPER_FOR_rotate_reclaimable_page
FUNCTION_WRAPPER_VOID(rotate_reclaimable_page, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("rotate_reclaimable_page is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    rotate_reclaimable_page(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("rotate_reclaimable_page returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_ata_acpi_stm
#define APP_WRAPPER_FOR_ata_acpi_stm
#endif
 
#ifndef APP_WRAPPER_FOR_ata_acpi_stm
#define APP_WRAPPER_FOR_ata_acpi_stm
FUNCTION_WRAPPER(ata_acpi_stm, (struct ata_port *ap, const struct ata_acpi_gtm *stm), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_acpi_stm is invoked.\n");
    PRE_WRAPPER_FUNC(ap, stm);
    int ret = ata_acpi_stm(ap, stm);
    POST_WRAPPER_FUNC(ap, stm);
    kern_printk("ata_acpi_stm returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_mmcfg_early_init
#define APP_WRAPPER_FOR_pci_mmcfg_early_init
#endif
 
#ifndef APP_WRAPPER_FOR_pci_mmcfg_early_init
#define APP_WRAPPER_FOR_pci_mmcfg_early_init
FUNCTION_WRAPPER_VOID(pci_mmcfg_early_init, (), {
    kern_printk("pci_mmcfg_early_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    pci_mmcfg_early_init();
    POST_WRAPPER_FUNC();
    kern_printk("pci_mmcfg_early_init returned.\n");
})
#endif


#ifndef KERN_ADDR_set_device_ro
#define APP_WRAPPER_FOR_set_device_ro
#endif
 
#ifndef APP_WRAPPER_FOR_set_device_ro
#define APP_WRAPPER_FOR_set_device_ro
FUNCTION_WRAPPER_VOID(set_device_ro, (struct block_device *bdev, int flag), {
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    kern_printk("set_device_ro is invoked.\n");
    PRE_WRAPPER_FUNC(bdev, flag);
    set_device_ro(bdev, flag);
    POST_WRAPPER_FUNC(bdev, flag);
    kern_printk("set_device_ro returned.\n");
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
})
#endif


#ifndef KERN_ADDR_copy_from_user_nmi
#define APP_WRAPPER_FOR_copy_from_user_nmi
#endif
 
#ifndef APP_WRAPPER_FOR_copy_from_user_nmi
#define APP_WRAPPER_FOR_copy_from_user_nmi
FUNCTION_WRAPPER(copy_from_user_nmi, (void *to, const void *from, unsigned long n), {
    kern_printk("copy_from_user_nmi is invoked.\n");
    PRE_WRAPPER_FUNC(to, from, n);
    long ret = copy_from_user_nmi(to, from, n);
    POST_WRAPPER_FUNC(to, from, n);
    kern_printk("copy_from_user_nmi returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dma_pool_create
#define APP_WRAPPER_FOR_dma_pool_create
#endif
 
#ifndef APP_WRAPPER_FOR_dma_pool_create
#define APP_WRAPPER_FOR_dma_pool_create
FUNCTION_WRAPPER(dma_pool_create, (const char *name, struct device *dev, size_t size, size_t align, size_t allocation), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dma_pool_create is invoked.\n");
    PRE_WRAPPER_FUNC(name, dev, size, align, allocation);
    struct dma_pool *ret = dma_pool_create(name, dev, size, align, allocation);
    POST_WRAPPER_FUNC(name, dev, size, align, allocation);
    kern_printk("dma_pool_create returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_insert_resource_conflict
#define APP_WRAPPER_FOR_insert_resource_conflict
#endif
 
#ifndef APP_WRAPPER_FOR_insert_resource_conflict
#define APP_WRAPPER_FOR_insert_resource_conflict
FUNCTION_WRAPPER(insert_resource_conflict, (struct resource *parent, struct resource *new_), {
    kern_printk("insert_resource_conflict is invoked.\n");
    PRE_WRAPPER_FUNC(parent, new_);
    struct resource *ret = insert_resource_conflict(parent, new_);
    POST_WRAPPER_FUNC(parent, new_);
    kern_printk("insert_resource_conflict returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_rdmsr_on_cpu
#define APP_WRAPPER_FOR_rdmsr_on_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_rdmsr_on_cpu
#define APP_WRAPPER_FOR_rdmsr_on_cpu
FUNCTION_WRAPPER(rdmsr_on_cpu, (unsigned int cpu, u32 msr_no, u32 *l, u32 *h), {
    kern_printk("rdmsr_on_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, msr_no, l, h);
    int ret = rdmsr_on_cpu(cpu, msr_no, l, h);
    POST_WRAPPER_FUNC(cpu, msr_no, l, h);
    kern_printk("rdmsr_on_cpu returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_add_to_page_cache_lru
#define APP_WRAPPER_FOR_add_to_page_cache_lru
#endif
 
#ifndef APP_WRAPPER_FOR_add_to_page_cache_lru
#define APP_WRAPPER_FOR_add_to_page_cache_lru
FUNCTION_WRAPPER(add_to_page_cache_lru, (struct page *page, struct address_space *mapping, unsigned long index, gfp_t gfp_mask), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("add_to_page_cache_lru is invoked.\n");
    PRE_WRAPPER_FUNC(page, mapping, index, gfp_mask);
    int ret = add_to_page_cache_lru(page, mapping, index, gfp_mask);
    POST_WRAPPER_FUNC(page, mapping, index, gfp_mask);
    kern_printk("add_to_page_cache_lru returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    return ret;
})
#endif


#ifndef KERN_ADDR_in_egroup_p
#define APP_WRAPPER_FOR_in_egroup_p
#endif
 
#ifndef APP_WRAPPER_FOR_in_egroup_p
#define APP_WRAPPER_FOR_in_egroup_p
FUNCTION_WRAPPER(in_egroup_p, (kgid_t _arg1), {
    kern_printk("in_egroup_p is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = in_egroup_p(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("in_egroup_p returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_unpack_xfermask
#define APP_WRAPPER_FOR_ata_unpack_xfermask
#endif
 
#ifndef APP_WRAPPER_FOR_ata_unpack_xfermask
#define APP_WRAPPER_FOR_ata_unpack_xfermask
FUNCTION_WRAPPER_VOID(ata_unpack_xfermask, (unsigned long xfer_mask, unsigned long *pio_mask, unsigned long *mwdma_mask, unsigned long *udma_mask), {
    kern_printk("ata_unpack_xfermask is invoked.\n");
    PRE_WRAPPER_FUNC(xfer_mask, pio_mask, mwdma_mask, udma_mask);
    ata_unpack_xfermask(xfer_mask, pio_mask, mwdma_mask, udma_mask);
    POST_WRAPPER_FUNC(xfer_mask, pio_mask, mwdma_mask, udma_mask);
    kern_printk("ata_unpack_xfermask returned.\n");
})
#endif


#ifndef KERN_ADDR_irq_force_complete_move
#define APP_WRAPPER_FOR_irq_force_complete_move
#endif
 
#ifndef APP_WRAPPER_FOR_irq_force_complete_move
#define APP_WRAPPER_FOR_irq_force_complete_move
FUNCTION_WRAPPER_VOID(irq_force_complete_move, (int _arg1), {
    kern_printk("irq_force_complete_move is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    irq_force_complete_move(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("irq_force_complete_move returned.\n");
})
#endif


#ifndef KERN_ADDR_bio_add_pc_page
#define APP_WRAPPER_FOR_bio_add_pc_page
#endif
 
#ifndef APP_WRAPPER_FOR_bio_add_pc_page
#define APP_WRAPPER_FOR_bio_add_pc_page
FUNCTION_WRAPPER(bio_add_pc_page, (struct request_queue *_arg1, struct bio *_arg2, struct page *_arg3, unsigned int _arg4, unsigned int _arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("bio_add_pc_page is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = bio_add_pc_page(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("bio_add_pc_page returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cpu_has_amd_erratum
#define APP_WRAPPER_FOR_cpu_has_amd_erratum
#endif
 
#ifndef APP_WRAPPER_FOR_cpu_has_amd_erratum
#define APP_WRAPPER_FOR_cpu_has_amd_erratum
FUNCTION_WRAPPER(cpu_has_amd_erratum, (const int *_arg1), {
    kern_printk("cpu_has_amd_erratum is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    bool ret = cpu_has_amd_erratum(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("cpu_has_amd_erratum returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_rb_first
#define APP_WRAPPER_FOR_rb_first
#endif
 
#ifndef APP_WRAPPER_FOR_rb_first
#define APP_WRAPPER_FOR_rb_first
FUNCTION_WRAPPER(rb_first, (const struct rb_root *_arg1), {
    kern_printk("rb_first is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct rb_node *ret = rb_first(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("rb_first returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ktime_add_safe
#define APP_WRAPPER_FOR_ktime_add_safe
#endif
 
#ifndef APP_WRAPPER_FOR_ktime_add_safe
#define APP_WRAPPER_FOR_ktime_add_safe
FUNCTION_WRAPPER(ktime_add_safe, (const ktime_t lhs, const ktime_t rhs), {
    kern_printk("ktime_add_safe is invoked.\n");
    PRE_WRAPPER_FUNC(lhs, rhs);
    ktime_t ret = ktime_add_safe(lhs, rhs);
    POST_WRAPPER_FUNC(lhs, rhs);
    kern_printk("ktime_add_safe returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_extend
#define APP_WRAPPER_FOR_jbd2_journal_extend
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_extend
#define APP_WRAPPER_FOR_jbd2_journal_extend
FUNCTION_WRAPPER(jbd2_journal_extend, (handle_t *_arg1, int nblocks), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(handle_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_extend is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, nblocks);
    int ret = jbd2_journal_extend(_arg1, nblocks);
    POST_WRAPPER_FUNC(_arg1, nblocks);
    kern_printk("jbd2_journal_extend returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(handle_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR___put_cred
#define APP_WRAPPER_FOR___put_cred
#endif
 
#ifndef APP_WRAPPER_FOR___put_cred
#define APP_WRAPPER_FOR___put_cred
FUNCTION_WRAPPER_VOID(__put_cred, (struct cred *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct cred)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__put_cred is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    __put_cred(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__put_cred returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct cred)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_acpi_os_read_pci_configuration
#define APP_WRAPPER_FOR_acpi_os_read_pci_configuration
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_read_pci_configuration
#define APP_WRAPPER_FOR_acpi_os_read_pci_configuration
FUNCTION_WRAPPER(acpi_os_read_pci_configuration, (struct acpi_pci_id *pci_id, u32 reg, u64 *value, u32 width), {
    kern_printk("acpi_os_read_pci_configuration is invoked.\n");
    PRE_WRAPPER_FUNC(pci_id, reg, value, width);
    acpi_status ret = acpi_os_read_pci_configuration(pci_id, reg, value, width);
    POST_WRAPPER_FUNC(pci_id, reg, value, width);
    kern_printk("acpi_os_read_pci_configuration returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_file_read_actor
#define APP_WRAPPER_FOR_file_read_actor
#endif
 
#ifndef APP_WRAPPER_FOR_file_read_actor
#define APP_WRAPPER_FOR_file_read_actor
FUNCTION_WRAPPER(file_read_actor, (read_descriptor_t *desc, struct page *page, unsigned long offset, unsigned long size), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("file_read_actor is invoked.\n");
    PRE_WRAPPER_FUNC(desc, page, offset, size);
    int ret = file_read_actor(desc, page, offset, size);
    POST_WRAPPER_FUNC(desc, page, offset, size);
    kern_printk("file_read_actor returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_lost_interrupt
#define APP_WRAPPER_FOR_pci_lost_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_pci_lost_interrupt
#define APP_WRAPPER_FOR_pci_lost_interrupt
FUNCTION_WRAPPER(pci_lost_interrupt, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_lost_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    enum pci_lost_interrupt_reason ret = pci_lost_interrupt(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_lost_interrupt returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_d_materialise_unique
#define APP_WRAPPER_FOR_d_materialise_unique
#endif
 
#ifndef APP_WRAPPER_FOR_d_materialise_unique
#define APP_WRAPPER_FOR_d_materialise_unique
FUNCTION_WRAPPER(d_materialise_unique, (struct dentry *_arg1, struct inode *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("d_materialise_unique is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct dentry *ret = d_materialise_unique(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("d_materialise_unique returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_cap_bprm_set_creds
#define APP_WRAPPER_FOR_cap_bprm_set_creds
#endif
 
#ifndef APP_WRAPPER_FOR_cap_bprm_set_creds
#define APP_WRAPPER_FOR_cap_bprm_set_creds
FUNCTION_WRAPPER(cap_bprm_set_creds, (struct linux_binprm *bprm), {
    kern_printk("cap_bprm_set_creds is invoked.\n");
    PRE_WRAPPER_FUNC(bprm);
    int ret = cap_bprm_set_creds(bprm);
    POST_WRAPPER_FUNC(bprm);
    kern_printk("cap_bprm_set_creds returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_mb_cache_create
#define APP_WRAPPER_FOR_mb_cache_create
#endif
 
#ifndef APP_WRAPPER_FOR_mb_cache_create
#define APP_WRAPPER_FOR_mb_cache_create
FUNCTION_WRAPPER(mb_cache_create, (const char *_arg1, int _arg2), {
    kern_printk("mb_cache_create is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct mb_cache *ret = mb_cache_create(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("mb_cache_create returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_mknod
#define APP_WRAPPER_FOR_vfs_mknod
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_mknod
#define APP_WRAPPER_FOR_vfs_mknod
FUNCTION_WRAPPER(vfs_mknod, (struct inode *_arg1, struct dentry *_arg2, umode_t _arg3, dev_t _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("vfs_mknod is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = vfs_mknod(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("vfs_mknod returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_native_setup_msi_irqs
#define APP_WRAPPER_FOR_native_setup_msi_irqs
#endif
 
#ifndef APP_WRAPPER_FOR_native_setup_msi_irqs
#define APP_WRAPPER_FOR_native_setup_msi_irqs
FUNCTION_WRAPPER(native_setup_msi_irqs, (struct pci_dev *dev, int nvec, int type), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("native_setup_msi_irqs is invoked.\n");
    PRE_WRAPPER_FUNC(dev, nvec, type);
    int ret = native_setup_msi_irqs(dev, nvec, type);
    POST_WRAPPER_FUNC(dev, nvec, type);
    kern_printk("native_setup_msi_irqs returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_get_physical_device_location
#define APP_WRAPPER_FOR_acpi_get_physical_device_location
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_physical_device_location
#define APP_WRAPPER_FOR_acpi_get_physical_device_location
FUNCTION_WRAPPER(acpi_get_physical_device_location, (acpi_handle handle, struct acpi_pld_info **pld), {
    kern_printk("acpi_get_physical_device_location is invoked.\n");
    PRE_WRAPPER_FUNC(handle, pld);
    acpi_status ret = acpi_get_physical_device_location(handle, pld);
    POST_WRAPPER_FUNC(handle, pld);
    kern_printk("acpi_get_physical_device_location returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_trans_will_send_data_barrier
#define APP_WRAPPER_FOR_jbd2_trans_will_send_data_barrier
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_trans_will_send_data_barrier
#define APP_WRAPPER_FOR_jbd2_trans_will_send_data_barrier
FUNCTION_WRAPPER(jbd2_trans_will_send_data_barrier, (journal_t *journal, tid_t tid), {
    WRAP_RECURSIVE(journal);
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    kern_printk("jbd2_trans_will_send_data_barrier is invoked.\n");
    PRE_WRAPPER_FUNC(journal, tid);
    int ret = jbd2_trans_will_send_data_barrier(journal, tid);
    POST_WRAPPER_FUNC(journal, tid);
    kern_printk("jbd2_trans_will_send_data_barrier returned.\n");
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    return ret;
})
#endif


#ifndef KERN_ADDR_rtnl_configure_link
#define APP_WRAPPER_FOR_rtnl_configure_link
#endif
 
#ifndef APP_WRAPPER_FOR_rtnl_configure_link
#define APP_WRAPPER_FOR_rtnl_configure_link
FUNCTION_WRAPPER(rtnl_configure_link, (struct net_device *dev, const struct ifinfomsg *ifm), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("rtnl_configure_link is invoked.\n");
    PRE_WRAPPER_FUNC(dev, ifm);
    int ret = rtnl_configure_link(dev, ifm);
    POST_WRAPPER_FUNC(dev, ifm);
    kern_printk("rtnl_configure_link returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_timekeeping_notify
#define APP_WRAPPER_FOR_timekeeping_notify
#endif
 
#ifndef APP_WRAPPER_FOR_timekeeping_notify
#define APP_WRAPPER_FOR_timekeeping_notify
FUNCTION_WRAPPER_VOID(timekeeping_notify, (struct clocksource *clock), {
    WRAP_RECURSIVE(clock);
    TRACES_IF_WATCHPOINT(clock);
    SCAN_HEAD_FUNC(struct clocksource)(*(TO_UNWATCHED_ADDRESS(clock)));
    kern_printk("timekeeping_notify is invoked.\n");
    PRE_WRAPPER_FUNC(clock);
    timekeeping_notify(clock);
    POST_WRAPPER_FUNC(clock);
    kern_printk("timekeeping_notify returned.\n");
    TRACES_IF_WATCHPOINT(clock);
    SCAN_HEAD_FUNC(struct clocksource)(*(TO_UNWATCHED_ADDRESS(clock)));
})
#endif


#ifndef KERN_ADDR_strnstr
#define APP_WRAPPER_FOR_strnstr
#endif
 
#ifndef APP_WRAPPER_FOR_strnstr
#define APP_WRAPPER_FOR_strnstr
FUNCTION_WRAPPER(strnstr, (const char *_arg1, const char *_arg2, size_t _arg3), {
    kern_printk("strnstr is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    char *ret = strnstr(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("strnstr returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_bmdma_irq_clear
#define APP_WRAPPER_FOR_ata_bmdma_irq_clear
#endif
 
#ifndef APP_WRAPPER_FOR_ata_bmdma_irq_clear
#define APP_WRAPPER_FOR_ata_bmdma_irq_clear
FUNCTION_WRAPPER_VOID(ata_bmdma_irq_clear, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_bmdma_irq_clear is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    ata_bmdma_irq_clear(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_bmdma_irq_clear returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_raw_pci_read
#define APP_WRAPPER_FOR_raw_pci_read
#endif
 
#ifndef APP_WRAPPER_FOR_raw_pci_read
#define APP_WRAPPER_FOR_raw_pci_read
FUNCTION_WRAPPER(raw_pci_read, (unsigned int domain, unsigned int bus, unsigned int devfn, int reg, int len, u32 *val), {
    kern_printk("raw_pci_read is invoked.\n");
    PRE_WRAPPER_FUNC(domain, bus, devfn, reg, len, val);
    int ret = raw_pci_read(domain, bus, devfn, reg, len, val);
    POST_WRAPPER_FUNC(domain, bus, devfn, reg, len, val);
    kern_printk("raw_pci_read returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_newfstat
#define APP_WRAPPER_FOR_compat_sys_newfstat
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_newfstat
#define APP_WRAPPER_FOR_compat_sys_newfstat
FUNCTION_WRAPPER(compat_sys_newfstat, (unsigned int fd, struct compat_stat *statbuf), {
    kern_printk("compat_sys_newfstat is invoked.\n");
    PRE_WRAPPER_FUNC(fd, statbuf);
    long ret = compat_sys_newfstat(fd, statbuf);
    POST_WRAPPER_FUNC(fd, statbuf);
    kern_printk("compat_sys_newfstat returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ioread16_rep
#define APP_WRAPPER_FOR_ioread16_rep
#endif
 
#ifndef APP_WRAPPER_FOR_ioread16_rep
#define APP_WRAPPER_FOR_ioread16_rep
FUNCTION_WRAPPER_VOID(ioread16_rep, (void *port, void *buf, unsigned long count), {
    kern_printk("ioread16_rep is invoked.\n");
    PRE_WRAPPER_FUNC(port, buf, count);
    ioread16_rep(port, buf, count);
    POST_WRAPPER_FUNC(port, buf, count);
    kern_printk("ioread16_rep returned.\n");
})
#endif


#ifndef KERN_ADDR_disk_clear_events
#define APP_WRAPPER_FOR_disk_clear_events
#endif
 
#ifndef APP_WRAPPER_FOR_disk_clear_events
#define APP_WRAPPER_FOR_disk_clear_events
FUNCTION_WRAPPER(disk_clear_events, (struct gendisk *disk, unsigned int mask), {
    WRAP_RECURSIVE(disk);
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    kern_printk("disk_clear_events is invoked.\n");
    PRE_WRAPPER_FUNC(disk, mask);
    int ret = disk_clear_events(disk, mask);
    POST_WRAPPER_FUNC(disk, mask);
    kern_printk("disk_clear_events returned.\n");
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_gnet_stats_copy_rate_est
#define APP_WRAPPER_FOR_gnet_stats_copy_rate_est
#endif
 
#ifndef APP_WRAPPER_FOR_gnet_stats_copy_rate_est
#define APP_WRAPPER_FOR_gnet_stats_copy_rate_est
FUNCTION_WRAPPER(gnet_stats_copy_rate_est, (struct gnet_dump *d, const struct gnet_stats_basic_packed *b, struct gnet_stats_rate_est *r), {
    WRAP_RECURSIVE(d);
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct gnet_dump)(*(TO_UNWATCHED_ADDRESS(d)));
    kern_printk("gnet_stats_copy_rate_est is invoked.\n");
    PRE_WRAPPER_FUNC(d, b, r);
    int ret = gnet_stats_copy_rate_est(d, b, r);
    POST_WRAPPER_FUNC(d, b, r);
    kern_printk("gnet_stats_copy_rate_est returned.\n");
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct gnet_dump)(*(TO_UNWATCHED_ADDRESS(d)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_pm_qos_update_flags
#define APP_WRAPPER_FOR_dev_pm_qos_update_flags
#endif
 
#ifndef APP_WRAPPER_FOR_dev_pm_qos_update_flags
#define APP_WRAPPER_FOR_dev_pm_qos_update_flags
FUNCTION_WRAPPER(dev_pm_qos_update_flags, (struct device *dev, s32 mask, bool set), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_pm_qos_update_flags is invoked.\n");
    PRE_WRAPPER_FUNC(dev, mask, set);
    int ret = dev_pm_qos_update_flags(dev, mask, set);
    POST_WRAPPER_FUNC(dev, mask, set);
    kern_printk("dev_pm_qos_update_flags returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dquot_release
#define APP_WRAPPER_FOR_dquot_release
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_release
#define APP_WRAPPER_FOR_dquot_release
FUNCTION_WRAPPER(dquot_release, (struct dquot *dquot), {
    WRAP_RECURSIVE(dquot);
    TRACES_IF_WATCHPOINT(dquot);
    SCAN_HEAD_FUNC(struct dquot)(*(TO_UNWATCHED_ADDRESS(dquot)));
    kern_printk("dquot_release is invoked.\n");
    PRE_WRAPPER_FUNC(dquot);
    int ret = dquot_release(dquot);
    POST_WRAPPER_FUNC(dquot);
    kern_printk("dquot_release returned.\n");
    TRACES_IF_WATCHPOINT(dquot);
    SCAN_HEAD_FUNC(struct dquot)(*(TO_UNWATCHED_ADDRESS(dquot)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cpu_coregroup_mask
#define APP_WRAPPER_FOR_cpu_coregroup_mask
#endif
 
#ifndef APP_WRAPPER_FOR_cpu_coregroup_mask
#define APP_WRAPPER_FOR_cpu_coregroup_mask
FUNCTION_WRAPPER(cpu_coregroup_mask, (int cpu), {
    kern_printk("cpu_coregroup_mask is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    const struct cpumask *ret = cpu_coregroup_mask(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("cpu_coregroup_mask returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_clocksource_resume
#define APP_WRAPPER_FOR_clocksource_resume
#endif
 
#ifndef APP_WRAPPER_FOR_clocksource_resume
#define APP_WRAPPER_FOR_clocksource_resume
FUNCTION_WRAPPER_VOID(clocksource_resume, (), {
    kern_printk("clocksource_resume is invoked.\n");
    PRE_WRAPPER_FUNC();
    clocksource_resume();
    POST_WRAPPER_FUNC();
    kern_printk("clocksource_resume returned.\n");
})
#endif


#ifndef KERN_ADDR_input_register_handler
#define APP_WRAPPER_FOR_input_register_handler
#endif
 
#ifndef APP_WRAPPER_FOR_input_register_handler
#define APP_WRAPPER_FOR_input_register_handler
FUNCTION_WRAPPER(input_register_handler, (struct input_handler *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct input_handler)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("input_register_handler is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = input_register_handler(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("input_register_handler returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct input_handler)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_tf_from_fis
#define APP_WRAPPER_FOR_ata_tf_from_fis
#endif
 
#ifndef APP_WRAPPER_FOR_ata_tf_from_fis
#define APP_WRAPPER_FOR_ata_tf_from_fis
FUNCTION_WRAPPER_VOID(ata_tf_from_fis, (const u8 *fis, struct ata_taskfile *tf), {
    kern_printk("ata_tf_from_fis is invoked.\n");
    PRE_WRAPPER_FUNC(fis, tf);
    ata_tf_from_fis(fis, tf);
    POST_WRAPPER_FUNC(fis, tf);
    kern_printk("ata_tf_from_fis returned.\n");
})
#endif


#ifndef KERN_ADDR_devm_request_threaded_irq
#define APP_WRAPPER_FOR_devm_request_threaded_irq
#endif
 
#ifndef APP_WRAPPER_FOR_devm_request_threaded_irq
#define APP_WRAPPER_FOR_devm_request_threaded_irq
FUNCTION_WRAPPER(devm_request_threaded_irq, (struct device *dev, unsigned int irq, irq_handler_t handler, irq_handler_t thread_fn, unsigned long irqflags, const char *devname, void *dev_id), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_FUNCTION(handler);
    WRAP_FUNCTION(thread_fn);
    kern_printk("devm_request_threaded_irq is invoked.\n");
    PRE_WRAPPER_FUNC(dev, irq, handler, thread_fn, irqflags, devname, dev_id);
    int ret = devm_request_threaded_irq(dev, irq, handler, thread_fn, irqflags, devname, dev_id);
    POST_WRAPPER_FUNC(dev, irq, handler, thread_fn, irqflags, devname, dev_id);
    kern_printk("devm_request_threaded_irq returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_mq_notify
#define APP_WRAPPER_FOR_compat_sys_mq_notify
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_mq_notify
#define APP_WRAPPER_FOR_compat_sys_mq_notify
FUNCTION_WRAPPER(compat_sys_mq_notify, (mqd_t mqdes, const struct compat_sigevent *u_notification), {
    kern_printk("compat_sys_mq_notify is invoked.\n");
    PRE_WRAPPER_FUNC(mqdes, u_notification);
    long ret = compat_sys_mq_notify(mqdes, u_notification);
    POST_WRAPPER_FUNC(mqdes, u_notification);
    kern_printk("compat_sys_mq_notify returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_bus_create_file
#define APP_WRAPPER_FOR_bus_create_file
#endif
 
#ifndef APP_WRAPPER_FOR_bus_create_file
#define APP_WRAPPER_FOR_bus_create_file
FUNCTION_WRAPPER(bus_create_file, (struct bus_type *_arg1, struct bus_attribute *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bus_attribute)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("bus_create_file is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = bus_create_file(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("bus_create_file returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bus_attribute)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_no_recvmsg
#define APP_WRAPPER_FOR_sock_no_recvmsg
#endif
 
#ifndef APP_WRAPPER_FOR_sock_no_recvmsg
#define APP_WRAPPER_FOR_sock_no_recvmsg
FUNCTION_WRAPPER(sock_no_recvmsg, (struct kiocb *_arg1, struct socket *_arg2, struct msghdr *_arg3, size_t _arg4, int _arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("sock_no_recvmsg is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = sock_no_recvmsg(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("sock_no_recvmsg returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_pm_qos_constraints_destroy
#define APP_WRAPPER_FOR_dev_pm_qos_constraints_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_dev_pm_qos_constraints_destroy
#define APP_WRAPPER_FOR_dev_pm_qos_constraints_destroy
FUNCTION_WRAPPER_VOID(dev_pm_qos_constraints_destroy, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_pm_qos_constraints_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    dev_pm_qos_constraints_destroy(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_pm_qos_constraints_destroy returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_set_nlink
#define APP_WRAPPER_FOR_set_nlink
#endif
 
#ifndef APP_WRAPPER_FOR_set_nlink
#define APP_WRAPPER_FOR_set_nlink
FUNCTION_WRAPPER_VOID(set_nlink, (struct inode *inode, unsigned int nlink), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("set_nlink is invoked.\n");
    PRE_WRAPPER_FUNC(inode, nlink);
    set_nlink(inode, nlink);
    POST_WRAPPER_FUNC(inode, nlink);
    kern_printk("set_nlink returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_mm_release
#define APP_WRAPPER_FOR_mm_release
#endif
 
#ifndef APP_WRAPPER_FOR_mm_release
#define APP_WRAPPER_FOR_mm_release
FUNCTION_WRAPPER_VOID(mm_release, (struct task_struct *_arg1, struct mm_struct *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("mm_release is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    mm_release(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("mm_release returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_compat_sys_fstatfs
#define APP_WRAPPER_FOR_compat_sys_fstatfs
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_fstatfs
#define APP_WRAPPER_FOR_compat_sys_fstatfs
FUNCTION_WRAPPER(compat_sys_fstatfs, (unsigned int fd, struct compat_statfs *buf), {
    kern_printk("compat_sys_fstatfs is invoked.\n");
    PRE_WRAPPER_FUNC(fd, buf);
    long ret = compat_sys_fstatfs(fd, buf);
    POST_WRAPPER_FUNC(fd, buf);
    kern_printk("compat_sys_fstatfs returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_netlink_unregister_notifier
#define APP_WRAPPER_FOR_netlink_unregister_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_netlink_unregister_notifier
#define APP_WRAPPER_FOR_netlink_unregister_notifier
FUNCTION_WRAPPER(netlink_unregister_notifier, (struct notifier_block *nb), {
    WRAP_RECURSIVE(nb);
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    kern_printk("netlink_unregister_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(nb);
    int ret = netlink_unregister_notifier(nb);
    POST_WRAPPER_FUNC(nb);
    kern_printk("netlink_unregister_notifier returned.\n");
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_machine_restart
#define APP_WRAPPER_FOR_machine_restart
#endif
 
#ifndef APP_WRAPPER_FOR_machine_restart
#define APP_WRAPPER_FOR_machine_restart
FUNCTION_WRAPPER_VOID(machine_restart, (char *cmd), {
    kern_printk("machine_restart is invoked.\n");
    PRE_WRAPPER_FUNC(cmd);
    machine_restart(cmd);
    POST_WRAPPER_FUNC(cmd);
    kern_printk("machine_restart returned.\n");
})
#endif


#ifndef KERN_ADDR___wait_on_buffer
#define APP_WRAPPER_FOR___wait_on_buffer
#endif
 
#ifndef APP_WRAPPER_FOR___wait_on_buffer
#define APP_WRAPPER_FOR___wait_on_buffer
FUNCTION_WRAPPER_VOID(__wait_on_buffer, (struct buffer_head *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__wait_on_buffer is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    __wait_on_buffer(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__wait_on_buffer returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_skb_complete_wifi_ack
#define APP_WRAPPER_FOR_skb_complete_wifi_ack
#endif
 
#ifndef APP_WRAPPER_FOR_skb_complete_wifi_ack
#define APP_WRAPPER_FOR_skb_complete_wifi_ack
FUNCTION_WRAPPER_VOID(skb_complete_wifi_ack, (struct sk_buff *skb, bool acked), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_complete_wifi_ack is invoked.\n");
    PRE_WRAPPER_FUNC(skb, acked);
    skb_complete_wifi_ack(skb, acked);
    POST_WRAPPER_FUNC(skb, acked);
    kern_printk("skb_complete_wifi_ack returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_input_reset_device
#define APP_WRAPPER_FOR_input_reset_device
#endif
 
#ifndef APP_WRAPPER_FOR_input_reset_device
#define APP_WRAPPER_FOR_input_reset_device
FUNCTION_WRAPPER_VOID(input_reset_device, (struct input_dev *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("input_reset_device is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    input_reset_device(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("input_reset_device returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_inet_proto_csum_replace16
#define APP_WRAPPER_FOR_inet_proto_csum_replace16
#endif
 
#ifndef APP_WRAPPER_FOR_inet_proto_csum_replace16
#define APP_WRAPPER_FOR_inet_proto_csum_replace16
FUNCTION_WRAPPER_VOID(inet_proto_csum_replace16, (__sum16 *sum, struct sk_buff *skb, const __be32 *from, const __be32 *to, int pseudohdr), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("inet_proto_csum_replace16 is invoked.\n");
    PRE_WRAPPER_FUNC(sum, skb, from, to, pseudohdr);
    inet_proto_csum_replace16(sum, skb, from, to, pseudohdr);
    POST_WRAPPER_FUNC(sum, skb, from, to, pseudohdr);
    kern_printk("inet_proto_csum_replace16 returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_zap_huge_pmd
#define APP_WRAPPER_FOR_zap_huge_pmd
#endif
 
#ifndef APP_WRAPPER_FOR_zap_huge_pmd
#define APP_WRAPPER_FOR_zap_huge_pmd
FUNCTION_WRAPPER(zap_huge_pmd, (struct mmu_gather *tlb, struct vm_area_struct *vma, pmd_t *pmd, unsigned long addr), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("zap_huge_pmd is invoked.\n");
    PRE_WRAPPER_FUNC(tlb, vma, pmd, addr);
    int ret = zap_huge_pmd(tlb, vma, pmd, addr);
    POST_WRAPPER_FUNC(tlb, vma, pmd, addr);
    kern_printk("zap_huge_pmd returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_copy_user_generic_unrolled
#define APP_WRAPPER_FOR_copy_user_generic_unrolled
#endif
 
#ifndef APP_WRAPPER_FOR_copy_user_generic_unrolled
#define APP_WRAPPER_FOR_copy_user_generic_unrolled
FUNCTION_WRAPPER(copy_user_generic_unrolled, (void *to, const void *from, unsigned int len), {
    kern_printk("copy_user_generic_unrolled is invoked.\n");
    PRE_WRAPPER_FUNC(to, from, len);
    long ret = copy_user_generic_unrolled(to, from, len);
    POST_WRAPPER_FUNC(to, from, len);
    kern_printk("copy_user_generic_unrolled returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_param_get_ulong
#define APP_WRAPPER_FOR_param_get_ulong
#endif
 
#ifndef APP_WRAPPER_FOR_param_get_ulong
#define APP_WRAPPER_FOR_param_get_ulong
FUNCTION_WRAPPER(param_get_ulong, (char *buffer, const struct kernel_param *kp), {
    WRAP_RECURSIVE(kp);
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    kern_printk("param_get_ulong is invoked.\n");
    PRE_WRAPPER_FUNC(buffer, kp);
    int ret = param_get_ulong(buffer, kp);
    POST_WRAPPER_FUNC(buffer, kp);
    kern_printk("param_get_ulong returned.\n");
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_find_root_pointer
#define APP_WRAPPER_FOR_acpi_find_root_pointer
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_find_root_pointer
#define APP_WRAPPER_FOR_acpi_find_root_pointer
FUNCTION_WRAPPER(acpi_find_root_pointer, (acpi_size *rsdp_address), {
    kern_printk("acpi_find_root_pointer is invoked.\n");
    PRE_WRAPPER_FUNC(rsdp_address);
    acpi_status ret = acpi_find_root_pointer(rsdp_address);
    POST_WRAPPER_FUNC(rsdp_address);
    kern_printk("acpi_find_root_pointer returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_laptop_sync_completion
#define APP_WRAPPER_FOR_laptop_sync_completion
#endif
 
#ifndef APP_WRAPPER_FOR_laptop_sync_completion
#define APP_WRAPPER_FOR_laptop_sync_completion
FUNCTION_WRAPPER_VOID(laptop_sync_completion, (), {
    kern_printk("laptop_sync_completion is invoked.\n");
    PRE_WRAPPER_FUNC();
    laptop_sync_completion();
    POST_WRAPPER_FUNC();
    kern_printk("laptop_sync_completion returned.\n");
})
#endif


#ifndef KERN_ADDR_down_interruptible
#define APP_WRAPPER_FOR_down_interruptible
#endif
 
#ifndef APP_WRAPPER_FOR_down_interruptible
#define APP_WRAPPER_FOR_down_interruptible
FUNCTION_WRAPPER(down_interruptible, (struct semaphore *sem), {
    kern_printk("down_interruptible is invoked.\n");
    PRE_WRAPPER_FUNC(sem);
    int ret = down_interruptible(sem);
    POST_WRAPPER_FUNC(sem);
    kern_printk("down_interruptible returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sparse_remove_one_section
#define APP_WRAPPER_FOR_sparse_remove_one_section
#endif
 
#ifndef APP_WRAPPER_FOR_sparse_remove_one_section
#define APP_WRAPPER_FOR_sparse_remove_one_section
FUNCTION_WRAPPER_VOID(sparse_remove_one_section, (struct zone *zone, struct mem_section *ms), {
    WRAP_RECURSIVE(zone);
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    kern_printk("sparse_remove_one_section is invoked.\n");
    PRE_WRAPPER_FUNC(zone, ms);
    sparse_remove_one_section(zone, ms);
    POST_WRAPPER_FUNC(zone, ms);
    kern_printk("sparse_remove_one_section returned.\n");
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
})
#endif


#ifndef KERN_ADDR_spurious_interrupt
#define APP_WRAPPER_FOR_spurious_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_spurious_interrupt
#define APP_WRAPPER_FOR_spurious_interrupt
FUNCTION_WRAPPER_VOID(spurious_interrupt, (), {
    kern_printk("spurious_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC();
    spurious_interrupt();
    POST_WRAPPER_FUNC();
    kern_printk("spurious_interrupt returned.\n");
})
#endif


#ifndef KERN_ADDR_mp_find_ioapic_pin
#define APP_WRAPPER_FOR_mp_find_ioapic_pin
#endif
 
#ifndef APP_WRAPPER_FOR_mp_find_ioapic_pin
#define APP_WRAPPER_FOR_mp_find_ioapic_pin
FUNCTION_WRAPPER(mp_find_ioapic_pin, (int ioapic, u32 gsi), {
    kern_printk("mp_find_ioapic_pin is invoked.\n");
    PRE_WRAPPER_FUNC(ioapic, gsi);
    int ret = mp_find_ioapic_pin(ioapic, gsi);
    POST_WRAPPER_FUNC(ioapic, gsi);
    kern_printk("mp_find_ioapic_pin returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_add_to_swap
#define APP_WRAPPER_FOR_add_to_swap
#endif
 
#ifndef APP_WRAPPER_FOR_add_to_swap
#define APP_WRAPPER_FOR_add_to_swap
FUNCTION_WRAPPER(add_to_swap, (struct page *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("add_to_swap is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = add_to_swap(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("add_to_swap returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_swiotlb_sync_sg_for_cpu
#define APP_WRAPPER_FOR_swiotlb_sync_sg_for_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_swiotlb_sync_sg_for_cpu
#define APP_WRAPPER_FOR_swiotlb_sync_sg_for_cpu
FUNCTION_WRAPPER_VOID(swiotlb_sync_sg_for_cpu, (struct device *hwdev, struct scatterlist *sg, int nelems, enum dma_data_direction dir), {
    WRAP_RECURSIVE(hwdev);
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
    kern_printk("swiotlb_sync_sg_for_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(hwdev, sg, nelems, dir);
    swiotlb_sync_sg_for_cpu(hwdev, sg, nelems, dir);
    POST_WRAPPER_FUNC(hwdev, sg, nelems, dir);
    kern_printk("swiotlb_sync_sg_for_cpu returned.\n");
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
})
#endif


#ifndef KERN_ADDR_dev_printk_emit
#define APP_WRAPPER_FOR_dev_printk_emit
#endif
 
#ifndef APP_WRAPPER_FOR_dev_printk_emit
#define APP_WRAPPER_FOR_dev_printk_emit
FUNCTION_WRAPPER(dev_printk_emit, (int level, const struct device *dev, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    // TODO: variadic arguments
    kern_printk("dev_printk_emit is invoked.\n");
    PRE_WRAPPER_FUNC(level, dev, fmt);
    int ret = dev_printk_emit(level, dev, fmt);
    POST_WRAPPER_FUNC(level, dev, fmt);
    kern_printk("dev_printk_emit returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_neigh_app_ns
#define APP_WRAPPER_FOR_neigh_app_ns
#endif
 
#ifndef APP_WRAPPER_FOR_neigh_app_ns
#define APP_WRAPPER_FOR_neigh_app_ns
FUNCTION_WRAPPER_VOID(neigh_app_ns, (struct neighbour *n), {
    WRAP_RECURSIVE(n);
    TRACES_IF_WATCHPOINT(n);
    SCAN_HEAD_FUNC(struct neighbour)(*(TO_UNWATCHED_ADDRESS(n)));
    kern_printk("neigh_app_ns is invoked.\n");
    PRE_WRAPPER_FUNC(n);
    neigh_app_ns(n);
    POST_WRAPPER_FUNC(n);
    kern_printk("neigh_app_ns returned.\n");
    TRACES_IF_WATCHPOINT(n);
    SCAN_HEAD_FUNC(struct neighbour)(*(TO_UNWATCHED_ADDRESS(n)));
})
#endif


#ifndef KERN_ADDR_acpi_set_current_resources
#define APP_WRAPPER_FOR_acpi_set_current_resources
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_set_current_resources
#define APP_WRAPPER_FOR_acpi_set_current_resources
FUNCTION_WRAPPER(acpi_set_current_resources, (acpi_handle device, struct acpi_buffer *in_buffer), {
    kern_printk("acpi_set_current_resources is invoked.\n");
    PRE_WRAPPER_FUNC(device, in_buffer);
    acpi_status ret = acpi_set_current_resources(device, in_buffer);
    POST_WRAPPER_FUNC(device, in_buffer);
    kern_printk("acpi_set_current_resources returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___copy_user_nocache
#define APP_WRAPPER_FOR___copy_user_nocache
#endif
 
#ifndef APP_WRAPPER_FOR___copy_user_nocache
#define APP_WRAPPER_FOR___copy_user_nocache
FUNCTION_WRAPPER(__copy_user_nocache, (void *dst, const void *src, unsigned int size, int zerorest), {
    kern_printk("__copy_user_nocache is invoked.\n");
    PRE_WRAPPER_FUNC(dst, src, size, zerorest);
    long ret = __copy_user_nocache(dst, src, size, zerorest);
    POST_WRAPPER_FUNC(dst, src, size, zerorest);
    kern_printk("__copy_user_nocache returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_queue_max_write_same_sectors
#define APP_WRAPPER_FOR_blk_queue_max_write_same_sectors
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_max_write_same_sectors
#define APP_WRAPPER_FOR_blk_queue_max_write_same_sectors
FUNCTION_WRAPPER_VOID(blk_queue_max_write_same_sectors, (struct request_queue *q, unsigned int max_write_same_sectors), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    kern_printk("blk_queue_max_write_same_sectors is invoked.\n");
    PRE_WRAPPER_FUNC(q, max_write_same_sectors);
    blk_queue_max_write_same_sectors(q, max_write_same_sectors);
    POST_WRAPPER_FUNC(q, max_write_same_sectors);
    kern_printk("blk_queue_max_write_same_sectors returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
})
#endif


#ifndef KERN_ADDR_devres_remove
#define APP_WRAPPER_FOR_devres_remove
#endif
 
#ifndef APP_WRAPPER_FOR_devres_remove
#define APP_WRAPPER_FOR_devres_remove
FUNCTION_WRAPPER(devres_remove, (struct device *dev, dr_release_t release, dr_match_t match, void *match_data), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_FUNCTION(release);
    WRAP_FUNCTION(match);
    kern_printk("devres_remove is invoked.\n");
    PRE_WRAPPER_FUNC(dev, release, match, match_data);
    void *ret = devres_remove(dev, release, match, match_data);
    POST_WRAPPER_FUNC(dev, release, match, match_data);
    kern_printk("devres_remove returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_cdrom_mode_sense
#define APP_WRAPPER_FOR_cdrom_mode_sense
#endif
 
#ifndef APP_WRAPPER_FOR_cdrom_mode_sense
#define APP_WRAPPER_FOR_cdrom_mode_sense
FUNCTION_WRAPPER(cdrom_mode_sense, (struct cdrom_device_info *cdi, struct packet_command *cgc, int page_code, int page_control), {
    WRAP_RECURSIVE(cdi);
    TRACES_IF_WATCHPOINT(cdi);
    SCAN_HEAD_FUNC(struct cdrom_device_info)(*(TO_UNWATCHED_ADDRESS(cdi)));
    kern_printk("cdrom_mode_sense is invoked.\n");
    PRE_WRAPPER_FUNC(cdi, cgc, page_code, page_control);
    int ret = cdrom_mode_sense(cdi, cgc, page_code, page_control);
    POST_WRAPPER_FUNC(cdi, cgc, page_code, page_control);
    kern_printk("cdrom_mode_sense returned.\n");
    TRACES_IF_WATCHPOINT(cdi);
    SCAN_HEAD_FUNC(struct cdrom_device_info)(*(TO_UNWATCHED_ADDRESS(cdi)));
    return ret;
})
#endif


#ifndef KERN_ADDR_scan_unevictable_unregister_node
#define APP_WRAPPER_FOR_scan_unevictable_unregister_node
#endif
 
#ifndef APP_WRAPPER_FOR_scan_unevictable_unregister_node
#define APP_WRAPPER_FOR_scan_unevictable_unregister_node
FUNCTION_WRAPPER_VOID(scan_unevictable_unregister_node, (struct node *node), {
    WRAP_RECURSIVE(node);
    TRACES_IF_WATCHPOINT(node);
    SCAN_HEAD_FUNC(struct node)(*(TO_UNWATCHED_ADDRESS(node)));
    kern_printk("scan_unevictable_unregister_node is invoked.\n");
    PRE_WRAPPER_FUNC(node);
    scan_unevictable_unregister_node(node);
    POST_WRAPPER_FUNC(node);
    kern_printk("scan_unevictable_unregister_node returned.\n");
    TRACES_IF_WATCHPOINT(node);
    SCAN_HEAD_FUNC(struct node)(*(TO_UNWATCHED_ADDRESS(node)));
})
#endif


#ifndef KERN_ADDR_do_huge_pmd_anonymous_page
#define APP_WRAPPER_FOR_do_huge_pmd_anonymous_page
#endif
 
#ifndef APP_WRAPPER_FOR_do_huge_pmd_anonymous_page
#define APP_WRAPPER_FOR_do_huge_pmd_anonymous_page
FUNCTION_WRAPPER(do_huge_pmd_anonymous_page, (struct mm_struct *mm, struct vm_area_struct *vma, unsigned long address, pmd_t *pmd, unsigned int flags), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("do_huge_pmd_anonymous_page is invoked.\n");
    PRE_WRAPPER_FUNC(mm, vma, address, pmd, flags);
    int ret = do_huge_pmd_anonymous_page(mm, vma, address, pmd, flags);
    POST_WRAPPER_FUNC(mm, vma, address, pmd, flags);
    kern_printk("do_huge_pmd_anonymous_page returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_timespec_add_safe
#define APP_WRAPPER_FOR_timespec_add_safe
#endif
 
#ifndef APP_WRAPPER_FOR_timespec_add_safe
#define APP_WRAPPER_FOR_timespec_add_safe
FUNCTION_WRAPPER(timespec_add_safe, (const struct timespec lhs, const struct timespec rhs), {
    kern_printk("timespec_add_safe is invoked.\n");
    PRE_WRAPPER_FUNC(lhs, rhs);
    struct timespec ret = timespec_add_safe(lhs, rhs);
    POST_WRAPPER_FUNC(lhs, rhs);
    kern_printk("timespec_add_safe returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_grab_cache_page_nowait
#define APP_WRAPPER_FOR_grab_cache_page_nowait
#endif
 
#ifndef APP_WRAPPER_FOR_grab_cache_page_nowait
#define APP_WRAPPER_FOR_grab_cache_page_nowait
FUNCTION_WRAPPER(grab_cache_page_nowait, (struct address_space *mapping, unsigned long index), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("grab_cache_page_nowait is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, index);
    struct page *ret = grab_cache_page_nowait(mapping, index);
    POST_WRAPPER_FUNC(mapping, index);
    kern_printk("grab_cache_page_nowait returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ioread16be
#define APP_WRAPPER_FOR_ioread16be
#endif
 
#ifndef APP_WRAPPER_FOR_ioread16be
#define APP_WRAPPER_FOR_ioread16be
FUNCTION_WRAPPER(ioread16be, (void *_arg1), {
    kern_printk("ioread16be is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = ioread16be(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("ioread16be returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_execute_rq
#define APP_WRAPPER_FOR_blk_execute_rq
#endif
 
#ifndef APP_WRAPPER_FOR_blk_execute_rq
#define APP_WRAPPER_FOR_blk_execute_rq
FUNCTION_WRAPPER(blk_execute_rq, (struct request_queue *_arg1, struct gendisk *_arg2, struct request *_arg3, int _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("blk_execute_rq is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = blk_execute_rq(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("blk_execute_rq returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_std_error_handler
#define APP_WRAPPER_FOR_ata_std_error_handler
#endif
 
#ifndef APP_WRAPPER_FOR_ata_std_error_handler
#define APP_WRAPPER_FOR_ata_std_error_handler
FUNCTION_WRAPPER_VOID(ata_std_error_handler, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_std_error_handler is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    ata_std_error_handler(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_std_error_handler returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_acpi_get_pci_dev
#define APP_WRAPPER_FOR_acpi_get_pci_dev
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_pci_dev
#define APP_WRAPPER_FOR_acpi_get_pci_dev
FUNCTION_WRAPPER(acpi_get_pci_dev, (acpi_handle _arg1), {
    kern_printk("acpi_get_pci_dev is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct pci_dev *ret = acpi_get_pci_dev(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("acpi_get_pci_dev returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_waitid
#define APP_WRAPPER_FOR_compat_sys_waitid
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_waitid
#define APP_WRAPPER_FOR_compat_sys_waitid
FUNCTION_WRAPPER(compat_sys_waitid, (int _arg1, compat_pid_t _arg2, struct compat_siginfo *_arg3, int _arg4, struct compat_rusage *_arg5), {
    kern_printk("compat_sys_waitid is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    long ret = compat_sys_waitid(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("compat_sys_waitid returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_vm_munmap
#define APP_WRAPPER_FOR_vm_munmap
#endif
 
#ifndef APP_WRAPPER_FOR_vm_munmap
#define APP_WRAPPER_FOR_vm_munmap
FUNCTION_WRAPPER(vm_munmap, (unsigned long _arg1, size_t _arg2), {
    kern_printk("vm_munmap is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = vm_munmap(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("vm_munmap returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_force_sig
#define APP_WRAPPER_FOR_force_sig
#endif
 
#ifndef APP_WRAPPER_FOR_force_sig
#define APP_WRAPPER_FOR_force_sig
FUNCTION_WRAPPER_VOID(force_sig, (int _arg1, struct task_struct *_arg2), {
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("force_sig is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    force_sig(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("force_sig returned.\n");
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_generic_processor_info
#define APP_WRAPPER_FOR_generic_processor_info
#endif
 
#ifndef APP_WRAPPER_FOR_generic_processor_info
#define APP_WRAPPER_FOR_generic_processor_info
FUNCTION_WRAPPER_VOID(generic_processor_info, (int apicid, int version), {
    kern_printk("generic_processor_info is invoked.\n");
    PRE_WRAPPER_FUNC(apicid, version);
    generic_processor_info(apicid, version);
    POST_WRAPPER_FUNC(apicid, version);
    kern_printk("generic_processor_info returned.\n");
})
#endif


#ifndef KERN_ADDR_rb_insert_color
#define APP_WRAPPER_FOR_rb_insert_color
#endif
 
#ifndef APP_WRAPPER_FOR_rb_insert_color
#define APP_WRAPPER_FOR_rb_insert_color
FUNCTION_WRAPPER_VOID(rb_insert_color, (struct rb_node *_arg1, struct rb_root *_arg2), {
    kern_printk("rb_insert_color is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    rb_insert_color(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("rb_insert_color returned.\n");
})
#endif


#ifndef KERN_ADDR_iterate_bdevs
#define APP_WRAPPER_FOR_iterate_bdevs
#endif
 
#ifndef APP_WRAPPER_FOR_iterate_bdevs
#define APP_WRAPPER_FOR_iterate_bdevs
FUNCTION_WRAPPER_VOID(iterate_bdevs, (void (*_arg1)(struct block_device *, void *), void *_arg2), {
    WRAP_FUNCTION(_arg1);
    kern_printk("iterate_bdevs is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    iterate_bdevs(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("iterate_bdevs returned.\n");
})
#endif


#ifndef KERN_ADDR_vmalloc_32
#define APP_WRAPPER_FOR_vmalloc_32
#endif
 
#ifndef APP_WRAPPER_FOR_vmalloc_32
#define APP_WRAPPER_FOR_vmalloc_32
FUNCTION_WRAPPER(vmalloc_32, (unsigned long size), {
    kern_printk("vmalloc_32 is invoked.\n");
    PRE_WRAPPER_FUNC(size);
    void *ret = vmalloc_32(size);
    POST_WRAPPER_FUNC(size);
    kern_printk("vmalloc_32 returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_monotonic_to_bootbased
#define APP_WRAPPER_FOR_monotonic_to_bootbased
#endif
 
#ifndef APP_WRAPPER_FOR_monotonic_to_bootbased
#define APP_WRAPPER_FOR_monotonic_to_bootbased
FUNCTION_WRAPPER_VOID(monotonic_to_bootbased, (struct timespec *ts), {
    kern_printk("monotonic_to_bootbased is invoked.\n");
    PRE_WRAPPER_FUNC(ts);
    monotonic_to_bootbased(ts);
    POST_WRAPPER_FUNC(ts);
    kern_printk("monotonic_to_bootbased returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_bus_add_devices
#define APP_WRAPPER_FOR_pci_bus_add_devices
#endif
 
#ifndef APP_WRAPPER_FOR_pci_bus_add_devices
#define APP_WRAPPER_FOR_pci_bus_add_devices
FUNCTION_WRAPPER_VOID(pci_bus_add_devices, (const struct pci_bus *bus), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(const struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_bus_add_devices is invoked.\n");
    PRE_WRAPPER_FUNC(bus);
    pci_bus_add_devices(bus);
    POST_WRAPPER_FUNC(bus);
    kern_printk("pci_bus_add_devices returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(const struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
})
#endif


#ifndef KERN_ADDR_elv_rq_merge_ok
#define APP_WRAPPER_FOR_elv_rq_merge_ok
#endif
 
#ifndef APP_WRAPPER_FOR_elv_rq_merge_ok
#define APP_WRAPPER_FOR_elv_rq_merge_ok
FUNCTION_WRAPPER(elv_rq_merge_ok, (struct request *_arg1, struct bio *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("elv_rq_merge_ok is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    bool ret = elv_rq_merge_ok(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("elv_rq_merge_ok returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_inode_capable
#define APP_WRAPPER_FOR_inode_capable
#endif
 
#ifndef APP_WRAPPER_FOR_inode_capable
#define APP_WRAPPER_FOR_inode_capable
FUNCTION_WRAPPER(inode_capable, (const struct inode *inode, int cap), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(const struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("inode_capable is invoked.\n");
    PRE_WRAPPER_FUNC(inode, cap);
    bool ret = inode_capable(inode, cap);
    POST_WRAPPER_FUNC(inode, cap);
    kern_printk("inode_capable returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(const struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_getsockopt
#define APP_WRAPPER_FOR_sock_getsockopt
#endif
 
#ifndef APP_WRAPPER_FOR_sock_getsockopt
#define APP_WRAPPER_FOR_sock_getsockopt
FUNCTION_WRAPPER(sock_getsockopt, (struct socket *sock, int level, int op, char *optval, int *optlen), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    kern_printk("sock_getsockopt is invoked.\n");
    PRE_WRAPPER_FUNC(sock, level, op, optval, optlen);
    int ret = sock_getsockopt(sock, level, op, optval, optlen);
    POST_WRAPPER_FUNC(sock, level, op, optval, optlen);
    kern_printk("sock_getsockopt returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    return ret;
})
#endif


#ifndef KERN_ADDR_set_cpu_present
#define APP_WRAPPER_FOR_set_cpu_present
#endif
 
#ifndef APP_WRAPPER_FOR_set_cpu_present
#define APP_WRAPPER_FOR_set_cpu_present
FUNCTION_WRAPPER_VOID(set_cpu_present, (unsigned int cpu, bool present), {
    kern_printk("set_cpu_present is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, present);
    set_cpu_present(cpu, present);
    POST_WRAPPER_FUNC(cpu, present);
    kern_printk("set_cpu_present returned.\n");
})
#endif


#ifndef KERN_ADDR_vm_unmap_ram
#define APP_WRAPPER_FOR_vm_unmap_ram
#endif
 
#ifndef APP_WRAPPER_FOR_vm_unmap_ram
#define APP_WRAPPER_FOR_vm_unmap_ram
FUNCTION_WRAPPER_VOID(vm_unmap_ram, (const void *mem, unsigned int count), {
    kern_printk("vm_unmap_ram is invoked.\n");
    PRE_WRAPPER_FUNC(mem, count);
    vm_unmap_ram(mem, count);
    POST_WRAPPER_FUNC(mem, count);
    kern_printk("vm_unmap_ram returned.\n");
})
#endif


#ifndef KERN_ADDR_hrtimer_peek_ahead_timers
#define APP_WRAPPER_FOR_hrtimer_peek_ahead_timers
#endif
 
#ifndef APP_WRAPPER_FOR_hrtimer_peek_ahead_timers
#define APP_WRAPPER_FOR_hrtimer_peek_ahead_timers
FUNCTION_WRAPPER_VOID(hrtimer_peek_ahead_timers, (), {
    kern_printk("hrtimer_peek_ahead_timers is invoked.\n");
    PRE_WRAPPER_FUNC();
    hrtimer_peek_ahead_timers();
    POST_WRAPPER_FUNC();
    kern_printk("hrtimer_peek_ahead_timers returned.\n");
})
#endif


#ifndef KERN_ADDR___lock_task_sighand
#define APP_WRAPPER_FOR___lock_task_sighand
#endif
 
#ifndef APP_WRAPPER_FOR___lock_task_sighand
#define APP_WRAPPER_FOR___lock_task_sighand
FUNCTION_WRAPPER(__lock_task_sighand, (struct task_struct *tsk, unsigned long *flags), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("__lock_task_sighand is invoked.\n");
    PRE_WRAPPER_FUNC(tsk, flags);
    struct sighand_struct *ret = __lock_task_sighand(tsk, flags);
    POST_WRAPPER_FUNC(tsk, flags);
    kern_printk("__lock_task_sighand returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___delay
#define APP_WRAPPER_FOR___delay
#endif
 
#ifndef APP_WRAPPER_FOR___delay
#define APP_WRAPPER_FOR___delay
FUNCTION_WRAPPER_VOID(__delay, (unsigned long loops), {
    kern_printk("__delay is invoked.\n");
    PRE_WRAPPER_FUNC(loops);
    __delay(loops);
    POST_WRAPPER_FUNC(loops);
    kern_printk("__delay returned.\n");
})
#endif


#ifndef KERN_ADDR_sock_rfree
#define APP_WRAPPER_FOR_sock_rfree
#endif
 
#ifndef APP_WRAPPER_FOR_sock_rfree
#define APP_WRAPPER_FOR_sock_rfree
FUNCTION_WRAPPER_VOID(sock_rfree, (struct sk_buff *skb), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("sock_rfree is invoked.\n");
    PRE_WRAPPER_FUNC(skb);
    sock_rfree(skb);
    POST_WRAPPER_FUNC(skb);
    kern_printk("sock_rfree returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_pcie_capability_clear_and_set_word
#define APP_WRAPPER_FOR_pcie_capability_clear_and_set_word
#endif
 
#ifndef APP_WRAPPER_FOR_pcie_capability_clear_and_set_word
#define APP_WRAPPER_FOR_pcie_capability_clear_and_set_word
FUNCTION_WRAPPER(pcie_capability_clear_and_set_word, (struct pci_dev *dev, int pos, u16 clear, u16 set), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pcie_capability_clear_and_set_word is invoked.\n");
    PRE_WRAPPER_FUNC(dev, pos, clear, set);
    int ret = pcie_capability_clear_and_set_word(dev, pos, clear, set);
    POST_WRAPPER_FUNC(dev, pos, clear, set);
    kern_printk("pcie_capability_clear_and_set_word returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_submit_bio
#define APP_WRAPPER_FOR_submit_bio
#endif
 
#ifndef APP_WRAPPER_FOR_submit_bio
#define APP_WRAPPER_FOR_submit_bio
FUNCTION_WRAPPER_VOID(submit_bio, (int _arg1, struct bio *_arg2), {
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("submit_bio is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    submit_bio(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("submit_bio returned.\n");
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_proc_net_remove
#define APP_WRAPPER_FOR_proc_net_remove
#endif
 
#ifndef APP_WRAPPER_FOR_proc_net_remove
#define APP_WRAPPER_FOR_proc_net_remove
FUNCTION_WRAPPER_VOID(proc_net_remove, (struct net *net, const char *name), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    kern_printk("proc_net_remove is invoked.\n");
    PRE_WRAPPER_FUNC(net, name);
    proc_net_remove(net, name);
    POST_WRAPPER_FUNC(net, name);
    kern_printk("proc_net_remove returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
})
#endif


#ifndef KERN_ADDR_blocking_notifier_chain_cond_register
#define APP_WRAPPER_FOR_blocking_notifier_chain_cond_register
#endif
 
#ifndef APP_WRAPPER_FOR_blocking_notifier_chain_cond_register
#define APP_WRAPPER_FOR_blocking_notifier_chain_cond_register
FUNCTION_WRAPPER(blocking_notifier_chain_cond_register, (struct blocking_notifier_head *nh, struct notifier_block *nb), {
    WRAP_RECURSIVE(nh);
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct blocking_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    WRAP_RECURSIVE(nb);
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    kern_printk("blocking_notifier_chain_cond_register is invoked.\n");
    PRE_WRAPPER_FUNC(nh, nb);
    int ret = blocking_notifier_chain_cond_register(nh, nb);
    POST_WRAPPER_FUNC(nh, nb);
    kern_printk("blocking_notifier_chain_cond_register returned.\n");
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct blocking_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_strcmp
#define APP_WRAPPER_FOR_strcmp
#endif
 
#ifndef APP_WRAPPER_FOR_strcmp
#define APP_WRAPPER_FOR_strcmp
FUNCTION_WRAPPER(strcmp, (const char *_arg1, const char *_arg2), {
    kern_printk("strcmp is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = strcmp(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("strcmp returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_cdrom_media_changed
#define APP_WRAPPER_FOR_cdrom_media_changed
#endif
 
#ifndef APP_WRAPPER_FOR_cdrom_media_changed
#define APP_WRAPPER_FOR_cdrom_media_changed
FUNCTION_WRAPPER(cdrom_media_changed, (struct cdrom_device_info *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct cdrom_device_info)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("cdrom_media_changed is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = cdrom_media_changed(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("cdrom_media_changed returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct cdrom_device_info)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_lru_add_drain_cpu
#define APP_WRAPPER_FOR_lru_add_drain_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_lru_add_drain_cpu
#define APP_WRAPPER_FOR_lru_add_drain_cpu
FUNCTION_WRAPPER_VOID(lru_add_drain_cpu, (int cpu), {
    kern_printk("lru_add_drain_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    lru_add_drain_cpu(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("lru_add_drain_cpu returned.\n");
})
#endif


#ifndef KERN_ADDR_compat_sys_readv
#define APP_WRAPPER_FOR_compat_sys_readv
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_readv
#define APP_WRAPPER_FOR_compat_sys_readv
FUNCTION_WRAPPER(compat_sys_readv, (unsigned long fd, const struct compat_iovec *vec, unsigned long vlen), {
    kern_printk("compat_sys_readv is invoked.\n");
    PRE_WRAPPER_FUNC(fd, vec, vlen);
    ssize_t ret = compat_sys_readv(fd, vec, vlen);
    POST_WRAPPER_FUNC(fd, vec, vlen);
    kern_printk("compat_sys_readv returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_register_region
#define APP_WRAPPER_FOR_blk_register_region
#endif
 
#ifndef APP_WRAPPER_FOR_blk_register_region
#define APP_WRAPPER_FOR_blk_register_region
FUNCTION_WRAPPER_VOID(blk_register_region, (dev_t devt, unsigned long range, struct module *module, struct kobject *(*probe)(dev_t, int *, void *), int (*lock)(dev_t, void *), void *data), {
    WRAP_RECURSIVE(module);
    TRACES_IF_WATCHPOINT(module);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(module)));
    WRAP_FUNCTION(probe);
    WRAP_FUNCTION(lock);
    kern_printk("blk_register_region is invoked.\n");
    PRE_WRAPPER_FUNC(devt, range, module, probe, lock, data);
    blk_register_region(devt, range, module, probe, lock, data);
    POST_WRAPPER_FUNC(devt, range, module, probe, lock, data);
    kern_printk("blk_register_region returned.\n");
    TRACES_IF_WATCHPOINT(module);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(module)));
})
#endif


#ifndef KERN_ADDR_ida_remove
#define APP_WRAPPER_FOR_ida_remove
#endif
 
#ifndef APP_WRAPPER_FOR_ida_remove
#define APP_WRAPPER_FOR_ida_remove
FUNCTION_WRAPPER_VOID(ida_remove, (struct ida *ida, int id), {
    WRAP_RECURSIVE(ida);
    TRACES_IF_WATCHPOINT(ida);
    SCAN_HEAD_FUNC(struct ida)(*(TO_UNWATCHED_ADDRESS(ida)));
    kern_printk("ida_remove is invoked.\n");
    PRE_WRAPPER_FUNC(ida, id);
    ida_remove(ida, id);
    POST_WRAPPER_FUNC(ida, id);
    kern_printk("ida_remove returned.\n");
    TRACES_IF_WATCHPOINT(ida);
    SCAN_HEAD_FUNC(struct ida)(*(TO_UNWATCHED_ADDRESS(ida)));
})
#endif


#ifndef KERN_ADDR_pci_unregister_driver
#define APP_WRAPPER_FOR_pci_unregister_driver
#endif
 
#ifndef APP_WRAPPER_FOR_pci_unregister_driver
#define APP_WRAPPER_FOR_pci_unregister_driver
FUNCTION_WRAPPER_VOID(pci_unregister_driver, (struct pci_driver *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_driver)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_unregister_driver is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pci_unregister_driver(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_unregister_driver returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_driver)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_nobh_truncate_page
#define APP_WRAPPER_FOR_nobh_truncate_page
#endif
 
#ifndef APP_WRAPPER_FOR_nobh_truncate_page
#define APP_WRAPPER_FOR_nobh_truncate_page
FUNCTION_WRAPPER(nobh_truncate_page, (struct address_space *_arg1, loff_t _arg2, get_block_t *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_FUNCTION(_arg3);
    kern_printk("nobh_truncate_page is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = nobh_truncate_page(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("nobh_truncate_page returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_end_request_err
#define APP_WRAPPER_FOR_blk_end_request_err
#endif
 
#ifndef APP_WRAPPER_FOR_blk_end_request_err
#define APP_WRAPPER_FOR_blk_end_request_err
FUNCTION_WRAPPER(blk_end_request_err, (struct request *rq, int error), {
    WRAP_RECURSIVE(rq);
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    kern_printk("blk_end_request_err is invoked.\n");
    PRE_WRAPPER_FUNC(rq, error);
    bool ret = blk_end_request_err(rq, error);
    POST_WRAPPER_FUNC(rq, error);
    kern_printk("blk_end_request_err returned.\n");
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    return ret;
})
#endif


#ifndef KERN_ADDR_do_writepages
#define APP_WRAPPER_FOR_do_writepages
#endif
 
#ifndef APP_WRAPPER_FOR_do_writepages
#define APP_WRAPPER_FOR_do_writepages
FUNCTION_WRAPPER(do_writepages, (struct address_space *mapping, struct writeback_control *wbc), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("do_writepages is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, wbc);
    int ret = do_writepages(mapping, wbc);
    POST_WRAPPER_FUNC(mapping, wbc);
    kern_printk("do_writepages returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    return ret;
})
#endif


#ifndef KERN_ADDR_can_do_mlock
#define APP_WRAPPER_FOR_can_do_mlock
#endif
 
#ifndef APP_WRAPPER_FOR_can_do_mlock
#define APP_WRAPPER_FOR_can_do_mlock
FUNCTION_WRAPPER(can_do_mlock, (), {
    kern_printk("can_do_mlock is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = can_do_mlock();
    POST_WRAPPER_FUNC();
    kern_printk("can_do_mlock returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_module_param_sysfs_remove
#define APP_WRAPPER_FOR_module_param_sysfs_remove
#endif
 
#ifndef APP_WRAPPER_FOR_module_param_sysfs_remove
#define APP_WRAPPER_FOR_module_param_sysfs_remove
FUNCTION_WRAPPER_VOID(module_param_sysfs_remove, (struct module *mod), {
    WRAP_RECURSIVE(mod);
    TRACES_IF_WATCHPOINT(mod);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(mod)));
    kern_printk("module_param_sysfs_remove is invoked.\n");
    PRE_WRAPPER_FUNC(mod);
    module_param_sysfs_remove(mod);
    POST_WRAPPER_FUNC(mod);
    kern_printk("module_param_sysfs_remove returned.\n");
    TRACES_IF_WATCHPOINT(mod);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(mod)));
})
#endif


#ifndef KERN_ADDR_jbd2_journal_flush
#define APP_WRAPPER_FOR_jbd2_journal_flush
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_flush
#define APP_WRAPPER_FOR_jbd2_journal_flush
FUNCTION_WRAPPER(jbd2_journal_flush, (journal_t *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_flush is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = jbd2_journal_flush(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("jbd2_journal_flush returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_select_estimate_accuracy
#define APP_WRAPPER_FOR_select_estimate_accuracy
#endif
 
#ifndef APP_WRAPPER_FOR_select_estimate_accuracy
#define APP_WRAPPER_FOR_select_estimate_accuracy
FUNCTION_WRAPPER(select_estimate_accuracy, (struct timespec *tv), {
    kern_printk("select_estimate_accuracy is invoked.\n");
    PRE_WRAPPER_FUNC(tv);
    long ret = select_estimate_accuracy(tv);
    POST_WRAPPER_FUNC(tv);
    kern_printk("select_estimate_accuracy returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_msix_table_size
#define APP_WRAPPER_FOR_pci_msix_table_size
#endif
 
#ifndef APP_WRAPPER_FOR_pci_msix_table_size
#define APP_WRAPPER_FOR_pci_msix_table_size
FUNCTION_WRAPPER(pci_msix_table_size, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_msix_table_size is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pci_msix_table_size(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_msix_table_size returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_iowrite32_rep
#define APP_WRAPPER_FOR_iowrite32_rep
#endif
 
#ifndef APP_WRAPPER_FOR_iowrite32_rep
#define APP_WRAPPER_FOR_iowrite32_rep
FUNCTION_WRAPPER_VOID(iowrite32_rep, (void *port, const void *buf, unsigned long count), {
    kern_printk("iowrite32_rep is invoked.\n");
    PRE_WRAPPER_FUNC(port, buf, count);
    iowrite32_rep(port, buf, count);
    POST_WRAPPER_FUNC(port, buf, count);
    kern_printk("iowrite32_rep returned.\n");
})
#endif


#ifndef KERN_ADDR_d_path_with_unreachable
#define APP_WRAPPER_FOR_d_path_with_unreachable
#endif
 
#ifndef APP_WRAPPER_FOR_d_path_with_unreachable
#define APP_WRAPPER_FOR_d_path_with_unreachable
FUNCTION_WRAPPER(d_path_with_unreachable, (const struct path *_arg1, char *_arg2, int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("d_path_with_unreachable is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    char *ret = d_path_with_unreachable(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("d_path_with_unreachable returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_simple_setattr
#define APP_WRAPPER_FOR_simple_setattr
#endif
 
#ifndef APP_WRAPPER_FOR_simple_setattr
#define APP_WRAPPER_FOR_simple_setattr
FUNCTION_WRAPPER(simple_setattr, (struct dentry *_arg1, struct iattr *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct iattr)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("simple_setattr is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = simple_setattr(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("simple_setattr returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct iattr)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sk_release_kernel
#define APP_WRAPPER_FOR_sk_release_kernel
#endif
 
#ifndef APP_WRAPPER_FOR_sk_release_kernel
#define APP_WRAPPER_FOR_sk_release_kernel
FUNCTION_WRAPPER_VOID(sk_release_kernel, (struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sk_release_kernel is invoked.\n");
    PRE_WRAPPER_FUNC(sk);
    sk_release_kernel(sk);
    POST_WRAPPER_FUNC(sk);
    kern_printk("sk_release_kernel returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR___qdisc_run
#define APP_WRAPPER_FOR___qdisc_run
#endif
 
#ifndef APP_WRAPPER_FOR___qdisc_run
#define APP_WRAPPER_FOR___qdisc_run
FUNCTION_WRAPPER_VOID(__qdisc_run, (struct Qdisc *q), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(q)));
    kern_printk("__qdisc_run is invoked.\n");
    PRE_WRAPPER_FUNC(q);
    __qdisc_run(q);
    POST_WRAPPER_FUNC(q);
    kern_printk("__qdisc_run returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(q)));
})
#endif


#ifndef KERN_ADDR_simple_xattr_remove
#define APP_WRAPPER_FOR_simple_xattr_remove
#endif
 
#ifndef APP_WRAPPER_FOR_simple_xattr_remove
#define APP_WRAPPER_FOR_simple_xattr_remove
FUNCTION_WRAPPER(simple_xattr_remove, (struct simple_xattrs *xattrs, const char *name), {
    kern_printk("simple_xattr_remove is invoked.\n");
    PRE_WRAPPER_FUNC(xattrs, name);
    int ret = simple_xattr_remove(xattrs, name);
    POST_WRAPPER_FUNC(xattrs, name);
    kern_printk("simple_xattr_remove returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_dev_runtime_suspend
#define APP_WRAPPER_FOR_acpi_dev_runtime_suspend
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_dev_runtime_suspend
#define APP_WRAPPER_FOR_acpi_dev_runtime_suspend
FUNCTION_WRAPPER(acpi_dev_runtime_suspend, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("acpi_dev_runtime_suspend is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = acpi_dev_runtime_suspend(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("acpi_dev_runtime_suspend returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR___bitmap_shift_left
#define APP_WRAPPER_FOR___bitmap_shift_left
#endif
 
#ifndef APP_WRAPPER_FOR___bitmap_shift_left
#define APP_WRAPPER_FOR___bitmap_shift_left
FUNCTION_WRAPPER_VOID(__bitmap_shift_left, (unsigned long *dst, unsigned const long *src, int shift, int bits), {
    kern_printk("__bitmap_shift_left is invoked.\n");
    PRE_WRAPPER_FUNC(dst, src, shift, bits);
    __bitmap_shift_left(dst, src, shift, bits);
    POST_WRAPPER_FUNC(dst, src, shift, bits);
    kern_printk("__bitmap_shift_left returned.\n");
})
#endif


#ifndef KERN_ADDR_preempt_notifier_register
#define APP_WRAPPER_FOR_preempt_notifier_register
#endif
 
#ifndef APP_WRAPPER_FOR_preempt_notifier_register
#define APP_WRAPPER_FOR_preempt_notifier_register
FUNCTION_WRAPPER_VOID(preempt_notifier_register, (struct preempt_notifier *notifier), {
    WRAP_RECURSIVE(notifier);
    TRACES_IF_WATCHPOINT(notifier);
    SCAN_HEAD_FUNC(struct preempt_notifier)(*(TO_UNWATCHED_ADDRESS(notifier)));
    kern_printk("preempt_notifier_register is invoked.\n");
    PRE_WRAPPER_FUNC(notifier);
    preempt_notifier_register(notifier);
    POST_WRAPPER_FUNC(notifier);
    kern_printk("preempt_notifier_register returned.\n");
    TRACES_IF_WATCHPOINT(notifier);
    SCAN_HEAD_FUNC(struct preempt_notifier)(*(TO_UNWATCHED_ADDRESS(notifier)));
})
#endif


#ifndef KERN_ADDR_fprop_local_destroy_percpu
#define APP_WRAPPER_FOR_fprop_local_destroy_percpu
#endif
 
#ifndef APP_WRAPPER_FOR_fprop_local_destroy_percpu
#define APP_WRAPPER_FOR_fprop_local_destroy_percpu
FUNCTION_WRAPPER_VOID(fprop_local_destroy_percpu, (struct fprop_local_percpu *pl), {
    kern_printk("fprop_local_destroy_percpu is invoked.\n");
    PRE_WRAPPER_FUNC(pl);
    fprop_local_destroy_percpu(pl);
    POST_WRAPPER_FUNC(pl);
    kern_printk("fprop_local_destroy_percpu returned.\n");
})
#endif


#ifndef KERN_ADDR_sk_get_filter
#define APP_WRAPPER_FOR_sk_get_filter
#endif
 
#ifndef APP_WRAPPER_FOR_sk_get_filter
#define APP_WRAPPER_FOR_sk_get_filter
FUNCTION_WRAPPER(sk_get_filter, (struct sock *sk, struct sock_filter *filter, unsigned int len), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sk_get_filter is invoked.\n");
    PRE_WRAPPER_FUNC(sk, filter, len);
    int ret = sk_get_filter(sk, filter, len);
    POST_WRAPPER_FUNC(sk, filter, len);
    kern_printk("sk_get_filter returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_mc_unsync
#define APP_WRAPPER_FOR_dev_mc_unsync
#endif
 
#ifndef APP_WRAPPER_FOR_dev_mc_unsync
#define APP_WRAPPER_FOR_dev_mc_unsync
FUNCTION_WRAPPER_VOID(dev_mc_unsync, (struct net_device *to, struct net_device *from), {
    WRAP_RECURSIVE(to);
    TRACES_IF_WATCHPOINT(to);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(to)));
    WRAP_RECURSIVE(from);
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(from)));
    kern_printk("dev_mc_unsync is invoked.\n");
    PRE_WRAPPER_FUNC(to, from);
    dev_mc_unsync(to, from);
    POST_WRAPPER_FUNC(to, from);
    kern_printk("dev_mc_unsync returned.\n");
    TRACES_IF_WATCHPOINT(to);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(to)));
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(from)));
})
#endif


#ifndef KERN_ADDR_change_create_files_as
#define APP_WRAPPER_FOR_change_create_files_as
#endif
 
#ifndef APP_WRAPPER_FOR_change_create_files_as
#define APP_WRAPPER_FOR_change_create_files_as
FUNCTION_WRAPPER(change_create_files_as, (struct cred *_arg1, struct inode *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct cred)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("change_create_files_as is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = change_create_files_as(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("change_create_files_as returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct cred)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_disable_sriov
#define APP_WRAPPER_FOR_pci_disable_sriov
#endif
 
#ifndef APP_WRAPPER_FOR_pci_disable_sriov
#define APP_WRAPPER_FOR_pci_disable_sriov
FUNCTION_WRAPPER_VOID(pci_disable_sriov, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_disable_sriov is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pci_disable_sriov(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_disable_sriov returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_acpi_os_stall
#define APP_WRAPPER_FOR_acpi_os_stall
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_stall
#define APP_WRAPPER_FOR_acpi_os_stall
FUNCTION_WRAPPER_VOID(acpi_os_stall, (u32 microseconds), {
    kern_printk("acpi_os_stall is invoked.\n");
    PRE_WRAPPER_FUNC(microseconds);
    acpi_os_stall(microseconds);
    POST_WRAPPER_FUNC(microseconds);
    kern_printk("acpi_os_stall returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_unregister_gsi
#define APP_WRAPPER_FOR_acpi_unregister_gsi
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_unregister_gsi
#define APP_WRAPPER_FOR_acpi_unregister_gsi
FUNCTION_WRAPPER_VOID(acpi_unregister_gsi, (u32 gsi), {
    kern_printk("acpi_unregister_gsi is invoked.\n");
    PRE_WRAPPER_FUNC(gsi);
    acpi_unregister_gsi(gsi);
    POST_WRAPPER_FUNC(gsi);
    kern_printk("acpi_unregister_gsi returned.\n");
})
#endif


#ifndef KERN_ADDR_find_module
#define APP_WRAPPER_FOR_find_module
#endif
 
#ifndef APP_WRAPPER_FOR_find_module
#define APP_WRAPPER_FOR_find_module
FUNCTION_WRAPPER(find_module, (const char *name), {
    kern_printk("find_module is invoked.\n");
    PRE_WRAPPER_FUNC(name);
    struct module *ret = find_module(name);
    POST_WRAPPER_FUNC(name);
    kern_printk("find_module returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_shmat
#define APP_WRAPPER_FOR_compat_sys_shmat
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_shmat
#define APP_WRAPPER_FOR_compat_sys_shmat
FUNCTION_WRAPPER(compat_sys_shmat, (int first, int second, compat_uptr_t third, int version, void *uptr), {
    kern_printk("compat_sys_shmat is invoked.\n");
    PRE_WRAPPER_FUNC(first, second, third, version, uptr);
    long ret = compat_sys_shmat(first, second, third, version, uptr);
    POST_WRAPPER_FUNC(first, second, third, version, uptr);
    kern_printk("compat_sys_shmat returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___kmalloc_node
#define APP_WRAPPER_FOR___kmalloc_node
#endif
 
#ifndef APP_WRAPPER_FOR___kmalloc_node
#define APP_WRAPPER_FOR___kmalloc_node
FUNCTION_WRAPPER(__kmalloc_node, (size_t size, gfp_t flags, int node), {
    kern_printk("__kmalloc_node is invoked.\n");
    PRE_WRAPPER_FUNC(size, flags, node);
    void *ret = __kmalloc_node(size, flags, node);
    POST_WRAPPER_FUNC(size, flags, node);
    kern_printk("__kmalloc_node returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_select_idle_routine
#define APP_WRAPPER_FOR_select_idle_routine
#endif
 
#ifndef APP_WRAPPER_FOR_select_idle_routine
#define APP_WRAPPER_FOR_select_idle_routine
FUNCTION_WRAPPER_VOID(select_idle_routine, (const struct cpuinfo_x86 *c), {
    kern_printk("select_idle_routine is invoked.\n");
    PRE_WRAPPER_FUNC(c);
    select_idle_routine(c);
    POST_WRAPPER_FUNC(c);
    kern_printk("select_idle_routine returned.\n");
})
#endif


#ifndef KERN_ADDR_devmem_is_allowed
#define APP_WRAPPER_FOR_devmem_is_allowed
#endif
 
#ifndef APP_WRAPPER_FOR_devmem_is_allowed
#define APP_WRAPPER_FOR_devmem_is_allowed
FUNCTION_WRAPPER(devmem_is_allowed, (unsigned long pagenr), {
    kern_printk("devmem_is_allowed is invoked.\n");
    PRE_WRAPPER_FUNC(pagenr);
    int ret = devmem_is_allowed(pagenr);
    POST_WRAPPER_FUNC(pagenr);
    kern_printk("devmem_is_allowed returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_uc_add_excl
#define APP_WRAPPER_FOR_dev_uc_add_excl
#endif
 
#ifndef APP_WRAPPER_FOR_dev_uc_add_excl
#define APP_WRAPPER_FOR_dev_uc_add_excl
FUNCTION_WRAPPER(dev_uc_add_excl, (struct net_device *dev, unsigned const char *addr), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_uc_add_excl is invoked.\n");
    PRE_WRAPPER_FUNC(dev, addr);
    int ret = dev_uc_add_excl(dev, addr);
    POST_WRAPPER_FUNC(dev, addr);
    kern_printk("dev_uc_add_excl returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_utimes
#define APP_WRAPPER_FOR_compat_sys_utimes
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_utimes
#define APP_WRAPPER_FOR_compat_sys_utimes
FUNCTION_WRAPPER(compat_sys_utimes, (const char *filename, struct compat_timeval *t), {
    kern_printk("compat_sys_utimes is invoked.\n");
    PRE_WRAPPER_FUNC(filename, t);
    long ret = compat_sys_utimes(filename, t);
    POST_WRAPPER_FUNC(filename, t);
    kern_printk("compat_sys_utimes returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_allocate
#define APP_WRAPPER_FOR_acpi_allocate
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_allocate
#define APP_WRAPPER_FOR_acpi_allocate
FUNCTION_WRAPPER(acpi_allocate, (u32 size), {
    kern_printk("acpi_allocate is invoked.\n");
    PRE_WRAPPER_FUNC(size);
    void *ret = acpi_allocate(size);
    POST_WRAPPER_FUNC(size);
    kern_printk("acpi_allocate returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_simple_write_end
#define APP_WRAPPER_FOR_simple_write_end
#endif
 
#ifndef APP_WRAPPER_FOR_simple_write_end
#define APP_WRAPPER_FOR_simple_write_end
FUNCTION_WRAPPER(simple_write_end, (struct file *file, struct address_space *mapping, loff_t pos, unsigned int len, unsigned int copied, struct page *page, void *fsdata), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("simple_write_end is invoked.\n");
    PRE_WRAPPER_FUNC(file, mapping, pos, len, copied, page, fsdata);
    int ret = simple_write_end(file, mapping, pos, len, copied, page, fsdata);
    POST_WRAPPER_FUNC(file, mapping, pos, len, copied, page, fsdata);
    kern_printk("simple_write_end returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kobject_set_name_vargs
#define APP_WRAPPER_FOR_kobject_set_name_vargs
#endif
 
#ifndef APP_WRAPPER_FOR_kobject_set_name_vargs
#define APP_WRAPPER_FOR_kobject_set_name_vargs
FUNCTION_WRAPPER(kobject_set_name_vargs, (struct kobject *kobj, const char *fmt, va_list vargs), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    kern_printk("kobject_set_name_vargs is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, fmt, vargs);
    int ret = kobject_set_name_vargs(kobj, fmt, vargs);
    POST_WRAPPER_FUNC(kobj, fmt, vargs);
    kern_printk("kobject_set_name_vargs returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_store_saved_state
#define APP_WRAPPER_FOR_pci_store_saved_state
#endif
 
#ifndef APP_WRAPPER_FOR_pci_store_saved_state
#define APP_WRAPPER_FOR_pci_store_saved_state
FUNCTION_WRAPPER(pci_store_saved_state, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_store_saved_state is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    struct pci_saved_state *ret = pci_store_saved_state(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_store_saved_state returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_can_nice
#define APP_WRAPPER_FOR_can_nice
#endif
 
#ifndef APP_WRAPPER_FOR_can_nice
#define APP_WRAPPER_FOR_can_nice
FUNCTION_WRAPPER(can_nice, (const struct task_struct *p, const int nice), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(const struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("can_nice is invoked.\n");
    PRE_WRAPPER_FUNC(p, nice);
    int ret = can_nice(p, nice);
    POST_WRAPPER_FUNC(p, nice);
    kern_printk("can_nice returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(const struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dmam_alloc_coherent
#define APP_WRAPPER_FOR_dmam_alloc_coherent
#endif
 
#ifndef APP_WRAPPER_FOR_dmam_alloc_coherent
#define APP_WRAPPER_FOR_dmam_alloc_coherent
FUNCTION_WRAPPER(dmam_alloc_coherent, (struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dmam_alloc_coherent is invoked.\n");
    PRE_WRAPPER_FUNC(dev, size, dma_handle, gfp);
    void *ret = dmam_alloc_coherent(dev, size, dma_handle, gfp);
    POST_WRAPPER_FUNC(dev, size, dma_handle, gfp);
    kern_printk("dmam_alloc_coherent returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___sk_mem_schedule
#define APP_WRAPPER_FOR___sk_mem_schedule
#endif
 
#ifndef APP_WRAPPER_FOR___sk_mem_schedule
#define APP_WRAPPER_FOR___sk_mem_schedule
FUNCTION_WRAPPER(__sk_mem_schedule, (struct sock *sk, int size, int kind), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("__sk_mem_schedule is invoked.\n");
    PRE_WRAPPER_FUNC(sk, size, kind);
    int ret = __sk_mem_schedule(sk, size, kind);
    POST_WRAPPER_FUNC(sk, size, kind);
    kern_printk("__sk_mem_schedule returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_locks_copy_lock
#define APP_WRAPPER_FOR_locks_copy_lock
#endif
 
#ifndef APP_WRAPPER_FOR_locks_copy_lock
#define APP_WRAPPER_FOR_locks_copy_lock
FUNCTION_WRAPPER_VOID(locks_copy_lock, (struct file_lock *_arg1, struct file_lock *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("locks_copy_lock is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    locks_copy_lock(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("locks_copy_lock returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_device_unregister
#define APP_WRAPPER_FOR_device_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_device_unregister
#define APP_WRAPPER_FOR_device_unregister
FUNCTION_WRAPPER_VOID(device_unregister, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("device_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    device_unregister(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("device_unregister returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR__raw_write_unlock
#define APP_WRAPPER_FOR__raw_write_unlock
#endif
 
#ifndef APP_WRAPPER_FOR__raw_write_unlock
#define APP_WRAPPER_FOR__raw_write_unlock
FUNCTION_WRAPPER_VOID(_raw_write_unlock, (rwlock_t *lock), {
    kern_printk("_raw_write_unlock is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    _raw_write_unlock(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("_raw_write_unlock returned.\n");
})
#endif


#ifndef KERN_ADDR_add_to_swap_cache
#define APP_WRAPPER_FOR_add_to_swap_cache
#endif
 
#ifndef APP_WRAPPER_FOR_add_to_swap_cache
#define APP_WRAPPER_FOR_add_to_swap_cache
FUNCTION_WRAPPER(add_to_swap_cache, (struct page *_arg1, swp_entry_t _arg2, gfp_t _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("add_to_swap_cache is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = add_to_swap_cache(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("add_to_swap_cache returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_memcpy_fromiovec
#define APP_WRAPPER_FOR_memcpy_fromiovec
#endif
 
#ifndef APP_WRAPPER_FOR_memcpy_fromiovec
#define APP_WRAPPER_FOR_memcpy_fromiovec
FUNCTION_WRAPPER(memcpy_fromiovec, (unsigned char *kdata, struct iovec *iov, int len), {
    kern_printk("memcpy_fromiovec is invoked.\n");
    PRE_WRAPPER_FUNC(kdata, iov, len);
    int ret = memcpy_fromiovec(kdata, iov, len);
    POST_WRAPPER_FUNC(kdata, iov, len);
    kern_printk("memcpy_fromiovec returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_setup_cardbus
#define APP_WRAPPER_FOR_pci_setup_cardbus
#endif
 
#ifndef APP_WRAPPER_FOR_pci_setup_cardbus
#define APP_WRAPPER_FOR_pci_setup_cardbus
FUNCTION_WRAPPER_VOID(pci_setup_cardbus, (struct pci_bus *bus), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_setup_cardbus is invoked.\n");
    PRE_WRAPPER_FUNC(bus);
    pci_setup_cardbus(bus);
    POST_WRAPPER_FUNC(bus);
    kern_printk("pci_setup_cardbus returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
})
#endif


#ifndef KERN_ADDR_scsi_host_put
#define APP_WRAPPER_FOR_scsi_host_put
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_host_put
#define APP_WRAPPER_FOR_scsi_host_put
FUNCTION_WRAPPER_VOID(scsi_host_put, (struct Scsi_Host *t), {
    WRAP_RECURSIVE(t);
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(t)));
    kern_printk("scsi_host_put is invoked.\n");
    PRE_WRAPPER_FUNC(t);
    scsi_host_put(t);
    POST_WRAPPER_FUNC(t);
    kern_printk("scsi_host_put returned.\n");
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(t)));
})
#endif


#ifndef KERN_ADDR_nd_jump_link
#define APP_WRAPPER_FOR_nd_jump_link
#endif
 
#ifndef APP_WRAPPER_FOR_nd_jump_link
#define APP_WRAPPER_FOR_nd_jump_link
FUNCTION_WRAPPER_VOID(nd_jump_link, (struct nameidata *nd, struct path *path), {
    WRAP_RECURSIVE(nd);
    TRACES_IF_WATCHPOINT(nd);
    SCAN_HEAD_FUNC(struct nameidata)(*(TO_UNWATCHED_ADDRESS(nd)));
    WRAP_RECURSIVE(path);
    TRACES_IF_WATCHPOINT(path);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(path)));
    kern_printk("nd_jump_link is invoked.\n");
    PRE_WRAPPER_FUNC(nd, path);
    nd_jump_link(nd, path);
    POST_WRAPPER_FUNC(nd, path);
    kern_printk("nd_jump_link returned.\n");
    TRACES_IF_WATCHPOINT(nd);
    SCAN_HEAD_FUNC(struct nameidata)(*(TO_UNWATCHED_ADDRESS(nd)));
    TRACES_IF_WATCHPOINT(path);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(path)));
})
#endif


#ifndef KERN_ADDR_devm_ioport_unmap
#define APP_WRAPPER_FOR_devm_ioport_unmap
#endif
 
#ifndef APP_WRAPPER_FOR_devm_ioport_unmap
#define APP_WRAPPER_FOR_devm_ioport_unmap
FUNCTION_WRAPPER_VOID(devm_ioport_unmap, (struct device *dev, void *addr), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("devm_ioport_unmap is invoked.\n");
    PRE_WRAPPER_FUNC(dev, addr);
    devm_ioport_unmap(dev, addr);
    POST_WRAPPER_FUNC(dev, addr);
    kern_printk("devm_ioport_unmap returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_compat_sys_setrlimit
#define APP_WRAPPER_FOR_compat_sys_setrlimit
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_setrlimit
#define APP_WRAPPER_FOR_compat_sys_setrlimit
FUNCTION_WRAPPER(compat_sys_setrlimit, (unsigned int resource, struct compat_rlimit *rlim), {
    kern_printk("compat_sys_setrlimit is invoked.\n");
    PRE_WRAPPER_FUNC(resource, rlim);
    long ret = compat_sys_setrlimit(resource, rlim);
    POST_WRAPPER_FUNC(resource, rlim);
    kern_printk("compat_sys_setrlimit returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_try_module_get
#define APP_WRAPPER_FOR_try_module_get
#endif
 
#ifndef APP_WRAPPER_FOR_try_module_get
#define APP_WRAPPER_FOR_try_module_get
FUNCTION_WRAPPER(try_module_get, (struct module *module), {
    WRAP_RECURSIVE(module);
    TRACES_IF_WATCHPOINT(module);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(module)));
    kern_printk("try_module_get is invoked.\n");
    PRE_WRAPPER_FUNC(module);
    bool ret = try_module_get(module);
    POST_WRAPPER_FUNC(module);
    kern_printk("try_module_get returned.\n");
    TRACES_IF_WATCHPOINT(module);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(module)));
    return ret;
})
#endif


#ifndef KERN_ADDR_atapi_cmd_type
#define APP_WRAPPER_FOR_atapi_cmd_type
#endif
 
#ifndef APP_WRAPPER_FOR_atapi_cmd_type
#define APP_WRAPPER_FOR_atapi_cmd_type
FUNCTION_WRAPPER(atapi_cmd_type, (u8 opcode), {
    kern_printk("atapi_cmd_type is invoked.\n");
    PRE_WRAPPER_FUNC(opcode);
    int ret = atapi_cmd_type(opcode);
    POST_WRAPPER_FUNC(opcode);
    kern_printk("atapi_cmd_type returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_pme_wakeup_bus
#define APP_WRAPPER_FOR_pci_pme_wakeup_bus
#endif
 
#ifndef APP_WRAPPER_FOR_pci_pme_wakeup_bus
#define APP_WRAPPER_FOR_pci_pme_wakeup_bus
FUNCTION_WRAPPER_VOID(pci_pme_wakeup_bus, (struct pci_bus *bus), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_pme_wakeup_bus is invoked.\n");
    PRE_WRAPPER_FUNC(bus);
    pci_pme_wakeup_bus(bus);
    POST_WRAPPER_FUNC(bus);
    kern_printk("pci_pme_wakeup_bus returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
})
#endif


#ifndef KERN_ADDR_pci_stop_and_remove_bus_device
#define APP_WRAPPER_FOR_pci_stop_and_remove_bus_device
#endif
 
#ifndef APP_WRAPPER_FOR_pci_stop_and_remove_bus_device
#define APP_WRAPPER_FOR_pci_stop_and_remove_bus_device
FUNCTION_WRAPPER_VOID(pci_stop_and_remove_bus_device, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_stop_and_remove_bus_device is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pci_stop_and_remove_bus_device(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_stop_and_remove_bus_device returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_dev_add_pack
#define APP_WRAPPER_FOR_dev_add_pack
#endif
 
#ifndef APP_WRAPPER_FOR_dev_add_pack
#define APP_WRAPPER_FOR_dev_add_pack
FUNCTION_WRAPPER_VOID(dev_add_pack, (struct packet_type *pt), {
    WRAP_RECURSIVE(pt);
    TRACES_IF_WATCHPOINT(pt);
    SCAN_HEAD_FUNC(struct packet_type)(*(TO_UNWATCHED_ADDRESS(pt)));
    kern_printk("dev_add_pack is invoked.\n");
    PRE_WRAPPER_FUNC(pt);
    dev_add_pack(pt);
    POST_WRAPPER_FUNC(pt);
    kern_printk("dev_add_pack returned.\n");
    TRACES_IF_WATCHPOINT(pt);
    SCAN_HEAD_FUNC(struct packet_type)(*(TO_UNWATCHED_ADDRESS(pt)));
})
#endif


#ifndef KERN_ADDR_blk_queue_rq_timed_out
#define APP_WRAPPER_FOR_blk_queue_rq_timed_out
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_rq_timed_out
#define APP_WRAPPER_FOR_blk_queue_rq_timed_out
FUNCTION_WRAPPER_VOID(blk_queue_rq_timed_out, (struct request_queue *_arg1, rq_timed_out_fn *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_FUNCTION(_arg2);
    kern_printk("blk_queue_rq_timed_out is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    blk_queue_rq_timed_out(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_queue_rq_timed_out returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_nsec_to_clock_t
#define APP_WRAPPER_FOR_nsec_to_clock_t
#endif
 
#ifndef APP_WRAPPER_FOR_nsec_to_clock_t
#define APP_WRAPPER_FOR_nsec_to_clock_t
FUNCTION_WRAPPER(nsec_to_clock_t, (u64 x), {
    kern_printk("nsec_to_clock_t is invoked.\n");
    PRE_WRAPPER_FUNC(x);
    u64 ret = nsec_to_clock_t(x);
    POST_WRAPPER_FUNC(x);
    kern_printk("nsec_to_clock_t returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_fh_to_dentry
#define APP_WRAPPER_FOR_generic_fh_to_dentry
#endif
 
#ifndef APP_WRAPPER_FOR_generic_fh_to_dentry
#define APP_WRAPPER_FOR_generic_fh_to_dentry
FUNCTION_WRAPPER(generic_fh_to_dentry, (struct super_block *sb, struct fid *fid, int fh_len, int fh_type, struct inode *(*get_inode)(struct super_block *, u64, u32)), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    WRAP_FUNCTION(get_inode);
    kern_printk("generic_fh_to_dentry is invoked.\n");
    PRE_WRAPPER_FUNC(sb, fid, fh_len, fh_type, get_inode);
    struct dentry *ret = generic_fh_to_dentry(sb, fid, fh_len, fh_type, get_inode);
    POST_WRAPPER_FUNC(sb, fid, fh_len, fh_type, get_inode);
    kern_printk("generic_fh_to_dentry returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pvclock_clocksource_read
#define APP_WRAPPER_FOR_pvclock_clocksource_read
#endif
 
#ifndef APP_WRAPPER_FOR_pvclock_clocksource_read
#define APP_WRAPPER_FOR_pvclock_clocksource_read
FUNCTION_WRAPPER(pvclock_clocksource_read, (struct pvclock_vcpu_time_info *src), {
    kern_printk("pvclock_clocksource_read is invoked.\n");
    PRE_WRAPPER_FUNC(src);
    cycle_t ret = pvclock_clocksource_read(src);
    POST_WRAPPER_FUNC(src);
    kern_printk("pvclock_clocksource_read returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ntp_tick_length
#define APP_WRAPPER_FOR_ntp_tick_length
#endif
 
#ifndef APP_WRAPPER_FOR_ntp_tick_length
#define APP_WRAPPER_FOR_ntp_tick_length
FUNCTION_WRAPPER(ntp_tick_length, (), {
    kern_printk("ntp_tick_length is invoked.\n");
    PRE_WRAPPER_FUNC();
    u64 ret = ntp_tick_length();
    POST_WRAPPER_FUNC();
    kern_printk("ntp_tick_length returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___dev_pm_qos_read_value
#define APP_WRAPPER_FOR___dev_pm_qos_read_value
#endif
 
#ifndef APP_WRAPPER_FOR___dev_pm_qos_read_value
#define APP_WRAPPER_FOR___dev_pm_qos_read_value
FUNCTION_WRAPPER(__dev_pm_qos_read_value, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("__dev_pm_qos_read_value is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    s32 ret = __dev_pm_qos_read_value(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("__dev_pm_qos_read_value returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_enable_subsystem
#define APP_WRAPPER_FOR_acpi_enable_subsystem
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_enable_subsystem
#define APP_WRAPPER_FOR_acpi_enable_subsystem
FUNCTION_WRAPPER(acpi_enable_subsystem, (u32 flags), {
    kern_printk("acpi_enable_subsystem is invoked.\n");
    PRE_WRAPPER_FUNC(flags);
    acpi_status ret = acpi_enable_subsystem(flags);
    POST_WRAPPER_FUNC(flags);
    kern_printk("acpi_enable_subsystem returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___skb_checksum_complete
#define APP_WRAPPER_FOR___skb_checksum_complete
#endif
 
#ifndef APP_WRAPPER_FOR___skb_checksum_complete
#define APP_WRAPPER_FOR___skb_checksum_complete
FUNCTION_WRAPPER(__skb_checksum_complete, (struct sk_buff *skb), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("__skb_checksum_complete is invoked.\n");
    PRE_WRAPPER_FUNC(skb);
    __sum16 ret = __skb_checksum_complete(skb);
    POST_WRAPPER_FUNC(skb);
    kern_printk("__skb_checksum_complete returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_recv_datagram
#define APP_WRAPPER_FOR_skb_recv_datagram
#endif
 
#ifndef APP_WRAPPER_FOR_skb_recv_datagram
#define APP_WRAPPER_FOR_skb_recv_datagram
FUNCTION_WRAPPER(skb_recv_datagram, (struct sock *sk, unsigned int flags, int noblock, int *err), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("skb_recv_datagram is invoked.\n");
    PRE_WRAPPER_FUNC(sk, flags, noblock, err);
    struct sk_buff *ret = skb_recv_datagram(sk, flags, noblock, err);
    POST_WRAPPER_FUNC(sk, flags, noblock, err);
    kern_printk("skb_recv_datagram returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_set_pages_array_uc
#define APP_WRAPPER_FOR_set_pages_array_uc
#endif
 
#ifndef APP_WRAPPER_FOR_set_pages_array_uc
#define APP_WRAPPER_FOR_set_pages_array_uc
FUNCTION_WRAPPER(set_pages_array_uc, (struct page **pages, int addrinarray), {
    WRAP_RECURSIVE(pages);
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    kern_printk("set_pages_array_uc is invoked.\n");
    PRE_WRAPPER_FUNC(pages, addrinarray);
    int ret = set_pages_array_uc(pages, addrinarray);
    POST_WRAPPER_FUNC(pages, addrinarray);
    kern_printk("set_pages_array_uc returned.\n");
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_error
#define APP_WRAPPER_FOR_acpi_error
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_error
#define APP_WRAPPER_FOR_acpi_error
FUNCTION_WRAPPER_VOID(acpi_error, (const char *module_name, u32 line_number, const char *format, ...), {
    va_list args__;
    va_start(args__, format);
    // TODO: variadic arguments
    kern_printk("acpi_error is invoked.\n");
    PRE_WRAPPER_FUNC(module_name, line_number, format);
    acpi_error(module_name, line_number, format);
    POST_WRAPPER_FUNC(module_name, line_number, format);
    kern_printk("acpi_error returned.\n");
    va_end(args__);
})
#endif


#ifndef KERN_ADDR_handle_bad_irq
#define APP_WRAPPER_FOR_handle_bad_irq
#endif
 
#ifndef APP_WRAPPER_FOR_handle_bad_irq
#define APP_WRAPPER_FOR_handle_bad_irq
FUNCTION_WRAPPER_VOID(handle_bad_irq, (unsigned int irq, struct irq_desc *desc), {
    WRAP_RECURSIVE(desc);
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct irq_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
    kern_printk("handle_bad_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq, desc);
    handle_bad_irq(irq, desc);
    POST_WRAPPER_FUNC(irq, desc);
    kern_printk("handle_bad_irq returned.\n");
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct irq_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
})
#endif


#ifndef KERN_ADDR_pcibios_fixup_bus
#define APP_WRAPPER_FOR_pcibios_fixup_bus
#endif
 
#ifndef APP_WRAPPER_FOR_pcibios_fixup_bus
#define APP_WRAPPER_FOR_pcibios_fixup_bus
FUNCTION_WRAPPER_VOID(pcibios_fixup_bus, (struct pci_bus *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("pcibios_fixup_bus is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    pcibios_fixup_bus(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("pcibios_fixup_bus returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_acpi_os_release_object
#define APP_WRAPPER_FOR_acpi_os_release_object
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_release_object
#define APP_WRAPPER_FOR_acpi_os_release_object
FUNCTION_WRAPPER(acpi_os_release_object, (struct kmem_cache *cache, void *object), {
    WRAP_RECURSIVE(cache);
    TRACES_IF_WATCHPOINT(cache);
    SCAN_HEAD_FUNC(struct kmem_cache)(*(TO_UNWATCHED_ADDRESS(cache)));
    kern_printk("acpi_os_release_object is invoked.\n");
    PRE_WRAPPER_FUNC(cache, object);
    acpi_status ret = acpi_os_release_object(cache, object);
    POST_WRAPPER_FUNC(cache, object);
    kern_printk("acpi_os_release_object returned.\n");
    TRACES_IF_WATCHPOINT(cache);
    SCAN_HEAD_FUNC(struct kmem_cache)(*(TO_UNWATCHED_ADDRESS(cache)));
    return ret;
})
#endif


#ifndef KERN_ADDR_timespec_trunc
#define APP_WRAPPER_FOR_timespec_trunc
#endif
 
#ifndef APP_WRAPPER_FOR_timespec_trunc
#define APP_WRAPPER_FOR_timespec_trunc
FUNCTION_WRAPPER(timespec_trunc, (struct timespec t, unsigned int gran), {
    kern_printk("timespec_trunc is invoked.\n");
    PRE_WRAPPER_FUNC(t, gran);
    struct timespec ret = timespec_trunc(t, gran);
    POST_WRAPPER_FUNC(t, gran);
    kern_printk("timespec_trunc returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dquot_alloc
#define APP_WRAPPER_FOR_dquot_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_alloc
#define APP_WRAPPER_FOR_dquot_alloc
FUNCTION_WRAPPER(dquot_alloc, (struct super_block *sb, int type), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("dquot_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(sb, type);
    struct dquot *ret = dquot_alloc(sb, type);
    POST_WRAPPER_FUNC(sb, type);
    kern_printk("dquot_alloc returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_table_get_mode
#define APP_WRAPPER_FOR_dm_table_get_mode
#endif
 
#ifndef APP_WRAPPER_FOR_dm_table_get_mode
#define APP_WRAPPER_FOR_dm_table_get_mode
FUNCTION_WRAPPER(dm_table_get_mode, (struct dm_table *t), {
    kern_printk("dm_table_get_mode is invoked.\n");
    PRE_WRAPPER_FUNC(t);
    fmode_t ret = dm_table_get_mode(t);
    POST_WRAPPER_FUNC(t);
    kern_printk("dm_table_get_mode returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_dev_put
#define APP_WRAPPER_FOR_pci_dev_put
#endif
 
#ifndef APP_WRAPPER_FOR_pci_dev_put
#define APP_WRAPPER_FOR_pci_dev_put
FUNCTION_WRAPPER_VOID(pci_dev_put, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_dev_put is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pci_dev_put(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_dev_put returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_cgroup_next_descendant_pre
#define APP_WRAPPER_FOR_cgroup_next_descendant_pre
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_next_descendant_pre
#define APP_WRAPPER_FOR_cgroup_next_descendant_pre
FUNCTION_WRAPPER(cgroup_next_descendant_pre, (struct cgroup *pos, struct cgroup *cgroup), {
    WRAP_RECURSIVE(pos);
    TRACES_IF_WATCHPOINT(pos);
    SCAN_HEAD_FUNC(struct cgroup)(*(TO_UNWATCHED_ADDRESS(pos)));
    WRAP_RECURSIVE(cgroup);
    TRACES_IF_WATCHPOINT(cgroup);
    SCAN_HEAD_FUNC(struct cgroup)(*(TO_UNWATCHED_ADDRESS(cgroup)));
    kern_printk("cgroup_next_descendant_pre is invoked.\n");
    PRE_WRAPPER_FUNC(pos, cgroup);
    struct cgroup *ret = cgroup_next_descendant_pre(pos, cgroup);
    POST_WRAPPER_FUNC(pos, cgroup);
    kern_printk("cgroup_next_descendant_pre returned.\n");
    TRACES_IF_WATCHPOINT(pos);
    SCAN_HEAD_FUNC(struct cgroup)(*(TO_UNWATCHED_ADDRESS(pos)));
    TRACES_IF_WATCHPOINT(cgroup);
    SCAN_HEAD_FUNC(struct cgroup)(*(TO_UNWATCHED_ADDRESS(cgroup)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_usecs_to_jiffies
#define APP_WRAPPER_FOR_usecs_to_jiffies
#endif
 
#ifndef APP_WRAPPER_FOR_usecs_to_jiffies
#define APP_WRAPPER_FOR_usecs_to_jiffies
FUNCTION_WRAPPER(usecs_to_jiffies, (unsigned const int u), {
    kern_printk("usecs_to_jiffies is invoked.\n");
    PRE_WRAPPER_FUNC(u);
    long ret = usecs_to_jiffies(u);
    POST_WRAPPER_FUNC(u);
    kern_printk("usecs_to_jiffies returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_destroy_params
#define APP_WRAPPER_FOR_destroy_params
#endif
 
#ifndef APP_WRAPPER_FOR_destroy_params
#define APP_WRAPPER_FOR_destroy_params
FUNCTION_WRAPPER_VOID(destroy_params, (const struct kernel_param *params, unsigned int num), {
    WRAP_RECURSIVE(params);
    TRACES_IF_WATCHPOINT(params);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(params)));
    kern_printk("destroy_params is invoked.\n");
    PRE_WRAPPER_FUNC(params, num);
    destroy_params(params, num);
    POST_WRAPPER_FUNC(params, num);
    kern_printk("destroy_params returned.\n");
    TRACES_IF_WATCHPOINT(params);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(params)));
})
#endif


#ifndef KERN_ADDR_simple_attr_open
#define APP_WRAPPER_FOR_simple_attr_open
#endif
 
#ifndef APP_WRAPPER_FOR_simple_attr_open
#define APP_WRAPPER_FOR_simple_attr_open
FUNCTION_WRAPPER(simple_attr_open, (struct inode *inode, struct file *file, int (*get)(void *, u64 *), int (*set)(void *, u64), const char *fmt), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    WRAP_FUNCTION(get);
    WRAP_FUNCTION(set);
    kern_printk("simple_attr_open is invoked.\n");
    PRE_WRAPPER_FUNC(inode, file, get, set, fmt);
    int ret = simple_attr_open(inode, file, get, set, fmt);
    POST_WRAPPER_FUNC(inode, file, get, set, fmt);
    kern_printk("simple_attr_open returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_emergency_sync
#define APP_WRAPPER_FOR_emergency_sync
#endif
 
#ifndef APP_WRAPPER_FOR_emergency_sync
#define APP_WRAPPER_FOR_emergency_sync
FUNCTION_WRAPPER_VOID(emergency_sync, (), {
    kern_printk("emergency_sync is invoked.\n");
    PRE_WRAPPER_FUNC();
    emergency_sync();
    POST_WRAPPER_FUNC();
    kern_printk("emergency_sync returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_os_purge_cache
#define APP_WRAPPER_FOR_acpi_os_purge_cache
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_purge_cache
#define APP_WRAPPER_FOR_acpi_os_purge_cache
FUNCTION_WRAPPER(acpi_os_purge_cache, (struct kmem_cache *cache), {
    WRAP_RECURSIVE(cache);
    TRACES_IF_WATCHPOINT(cache);
    SCAN_HEAD_FUNC(struct kmem_cache)(*(TO_UNWATCHED_ADDRESS(cache)));
    kern_printk("acpi_os_purge_cache is invoked.\n");
    PRE_WRAPPER_FUNC(cache);
    acpi_status ret = acpi_os_purge_cache(cache);
    POST_WRAPPER_FUNC(cache);
    kern_printk("acpi_os_purge_cache returned.\n");
    TRACES_IF_WATCHPOINT(cache);
    SCAN_HEAD_FUNC(struct kmem_cache)(*(TO_UNWATCHED_ADDRESS(cache)));
    return ret;
})
#endif


#ifndef KERN_ADDR_clear_local_APIC
#define APP_WRAPPER_FOR_clear_local_APIC
#endif
 
#ifndef APP_WRAPPER_FOR_clear_local_APIC
#define APP_WRAPPER_FOR_clear_local_APIC
FUNCTION_WRAPPER_VOID(clear_local_APIC, (), {
    kern_printk("clear_local_APIC is invoked.\n");
    PRE_WRAPPER_FUNC();
    clear_local_APIC();
    POST_WRAPPER_FUNC();
    kern_printk("clear_local_APIC returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_set_power_state
#define APP_WRAPPER_FOR_pci_set_power_state
#endif
 
#ifndef APP_WRAPPER_FOR_pci_set_power_state
#define APP_WRAPPER_FOR_pci_set_power_state
FUNCTION_WRAPPER(pci_set_power_state, (struct pci_dev *dev, pci_power_t state), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_set_power_state is invoked.\n");
    PRE_WRAPPER_FUNC(dev, state);
    int ret = pci_set_power_state(dev, state);
    POST_WRAPPER_FUNC(dev, state);
    kern_printk("pci_set_power_state returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_heap_init
#define APP_WRAPPER_FOR_heap_init
#endif
 
#ifndef APP_WRAPPER_FOR_heap_init
#define APP_WRAPPER_FOR_heap_init
FUNCTION_WRAPPER(heap_init, (struct ptr_heap *heap, size_t size, gfp_t gfp_mask, int (*gt)(void *, void *)), {
    WRAP_RECURSIVE(heap);
    TRACES_IF_WATCHPOINT(heap);
    SCAN_HEAD_FUNC(struct ptr_heap)(*(TO_UNWATCHED_ADDRESS(heap)));
    WRAP_FUNCTION(gt);
    kern_printk("heap_init is invoked.\n");
    PRE_WRAPPER_FUNC(heap, size, gfp_mask, gt);
    int ret = heap_init(heap, size, gfp_mask, gt);
    POST_WRAPPER_FUNC(heap, size, gfp_mask, gt);
    kern_printk("heap_init returned.\n");
    TRACES_IF_WATCHPOINT(heap);
    SCAN_HEAD_FUNC(struct ptr_heap)(*(TO_UNWATCHED_ADDRESS(heap)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_queue_resize_tags
#define APP_WRAPPER_FOR_blk_queue_resize_tags
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_resize_tags
#define APP_WRAPPER_FOR_blk_queue_resize_tags
FUNCTION_WRAPPER(blk_queue_resize_tags, (struct request_queue *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_queue_resize_tags is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = blk_queue_resize_tags(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_queue_resize_tags returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_writeback_set_ratelimit
#define APP_WRAPPER_FOR_writeback_set_ratelimit
#endif
 
#ifndef APP_WRAPPER_FOR_writeback_set_ratelimit
#define APP_WRAPPER_FOR_writeback_set_ratelimit
FUNCTION_WRAPPER_VOID(writeback_set_ratelimit, (), {
    kern_printk("writeback_set_ratelimit is invoked.\n");
    PRE_WRAPPER_FUNC();
    writeback_set_ratelimit();
    POST_WRAPPER_FUNC();
    kern_printk("writeback_set_ratelimit returned.\n");
})
#endif


#ifndef KERN_ADDR_dev_pm_qos_expose_flags
#define APP_WRAPPER_FOR_dev_pm_qos_expose_flags
#endif
 
#ifndef APP_WRAPPER_FOR_dev_pm_qos_expose_flags
#define APP_WRAPPER_FOR_dev_pm_qos_expose_flags
FUNCTION_WRAPPER(dev_pm_qos_expose_flags, (struct device *dev, s32 value), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_pm_qos_expose_flags is invoked.\n");
    PRE_WRAPPER_FUNC(dev, value);
    int ret = dev_pm_qos_expose_flags(dev, value);
    POST_WRAPPER_FUNC(dev, value);
    kern_printk("dev_pm_qos_expose_flags returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_do_io_submit
#define APP_WRAPPER_FOR_do_io_submit
#endif
 
#ifndef APP_WRAPPER_FOR_do_io_submit
#define APP_WRAPPER_FOR_do_io_submit
FUNCTION_WRAPPER(do_io_submit, (aio_context_t ctx_id, long nr, struct iocb **iocbpp, bool compat), {
    kern_printk("do_io_submit is invoked.\n");
    PRE_WRAPPER_FUNC(ctx_id, nr, iocbpp, compat);
    long ret = do_io_submit(ctx_id, nr, iocbpp, compat);
    POST_WRAPPER_FUNC(ctx_id, nr, iocbpp, compat);
    kern_printk("do_io_submit returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_register_mem_sect_under_node
#define APP_WRAPPER_FOR_register_mem_sect_under_node
#endif
 
#ifndef APP_WRAPPER_FOR_register_mem_sect_under_node
#define APP_WRAPPER_FOR_register_mem_sect_under_node
FUNCTION_WRAPPER(register_mem_sect_under_node, (struct memory_block *mem_blk, int nid), {
    kern_printk("register_mem_sect_under_node is invoked.\n");
    PRE_WRAPPER_FUNC(mem_blk, nid);
    int ret = register_mem_sect_under_node(mem_blk, nid);
    POST_WRAPPER_FUNC(mem_blk, nid);
    kern_printk("register_mem_sect_under_node returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_css_get_next
#define APP_WRAPPER_FOR_css_get_next
#endif
 
#ifndef APP_WRAPPER_FOR_css_get_next
#define APP_WRAPPER_FOR_css_get_next
FUNCTION_WRAPPER(css_get_next, (struct cgroup_subsys *ss, int id, struct cgroup_subsys_state *root, int *foundid), {
    WRAP_RECURSIVE(ss);
    TRACES_IF_WATCHPOINT(ss);
    SCAN_HEAD_FUNC(struct cgroup_subsys)(*(TO_UNWATCHED_ADDRESS(ss)));
    WRAP_RECURSIVE(root);
    TRACES_IF_WATCHPOINT(root);
    SCAN_HEAD_FUNC(struct cgroup_subsys_state)(*(TO_UNWATCHED_ADDRESS(root)));
    kern_printk("css_get_next is invoked.\n");
    PRE_WRAPPER_FUNC(ss, id, root, foundid);
    struct cgroup_subsys_state *ret = css_get_next(ss, id, root, foundid);
    POST_WRAPPER_FUNC(ss, id, root, foundid);
    kern_printk("css_get_next returned.\n");
    TRACES_IF_WATCHPOINT(ss);
    SCAN_HEAD_FUNC(struct cgroup_subsys)(*(TO_UNWATCHED_ADDRESS(ss)));
    TRACES_IF_WATCHPOINT(root);
    SCAN_HEAD_FUNC(struct cgroup_subsys_state)(*(TO_UNWATCHED_ADDRESS(root)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___tasklet_schedule
#define APP_WRAPPER_FOR___tasklet_schedule
#endif
 
#ifndef APP_WRAPPER_FOR___tasklet_schedule
#define APP_WRAPPER_FOR___tasklet_schedule
FUNCTION_WRAPPER_VOID(__tasklet_schedule, (struct tasklet_struct *t), {
    WRAP_RECURSIVE(t);
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct tasklet_struct)(*(TO_UNWATCHED_ADDRESS(t)));
    kern_printk("__tasklet_schedule is invoked.\n");
    PRE_WRAPPER_FUNC(t);
    __tasklet_schedule(t);
    POST_WRAPPER_FUNC(t);
    kern_printk("__tasklet_schedule returned.\n");
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct tasklet_struct)(*(TO_UNWATCHED_ADDRESS(t)));
})
#endif


#ifndef KERN_ADDR_free_irq
#define APP_WRAPPER_FOR_free_irq
#endif
 
#ifndef APP_WRAPPER_FOR_free_irq
#define APP_WRAPPER_FOR_free_irq
FUNCTION_WRAPPER_VOID(free_irq, (unsigned int _arg1, void *_arg2), {
    kern_printk("free_irq is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    free_irq(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("free_irq returned.\n");
})
#endif


#ifndef KERN_ADDR_jbd2_journal_check_available_features
#define APP_WRAPPER_FOR_jbd2_journal_check_available_features
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_check_available_features
#define APP_WRAPPER_FOR_jbd2_journal_check_available_features
FUNCTION_WRAPPER(jbd2_journal_check_available_features, (journal_t *_arg1, unsigned long _arg2, unsigned long _arg3, unsigned long _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_check_available_features is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = jbd2_journal_check_available_features(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("jbd2_journal_check_available_features returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_preadv
#define APP_WRAPPER_FOR_compat_sys_preadv
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_preadv
#define APP_WRAPPER_FOR_compat_sys_preadv
FUNCTION_WRAPPER(compat_sys_preadv, (unsigned long fd, const struct compat_iovec *vec, unsigned long vlen, u32 pos_low, u32 pos_high), {
    kern_printk("compat_sys_preadv is invoked.\n");
    PRE_WRAPPER_FUNC(fd, vec, vlen, pos_low, pos_high);
    ssize_t ret = compat_sys_preadv(fd, vec, vlen, pos_low, pos_high);
    POST_WRAPPER_FUNC(fd, vec, vlen, pos_low, pos_high);
    kern_printk("compat_sys_preadv returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dquot_initialize
#define APP_WRAPPER_FOR_dquot_initialize
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_initialize
#define APP_WRAPPER_FOR_dquot_initialize
FUNCTION_WRAPPER_VOID(dquot_initialize, (struct inode *inode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("dquot_initialize is invoked.\n");
    PRE_WRAPPER_FUNC(inode);
    dquot_initialize(inode);
    POST_WRAPPER_FUNC(inode);
    kern_printk("dquot_initialize returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_rtnl_unicast
#define APP_WRAPPER_FOR_rtnl_unicast
#endif
 
#ifndef APP_WRAPPER_FOR_rtnl_unicast
#define APP_WRAPPER_FOR_rtnl_unicast
FUNCTION_WRAPPER(rtnl_unicast, (struct sk_buff *skb, struct net *net, u32 pid), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    kern_printk("rtnl_unicast is invoked.\n");
    PRE_WRAPPER_FUNC(skb, net, pid);
    int ret = rtnl_unicast(skb, net, pid);
    POST_WRAPPER_FUNC(skb, net, pid);
    kern_printk("rtnl_unicast returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    return ret;
})
#endif


#ifndef KERN_ADDR_register_acpi_notifier
#define APP_WRAPPER_FOR_register_acpi_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_register_acpi_notifier
#define APP_WRAPPER_FOR_register_acpi_notifier
FUNCTION_WRAPPER(register_acpi_notifier, (struct notifier_block *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("register_acpi_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = register_acpi_notifier(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("register_acpi_notifier returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_assign_unassigned_bridge_resources
#define APP_WRAPPER_FOR_pci_assign_unassigned_bridge_resources
#endif
 
#ifndef APP_WRAPPER_FOR_pci_assign_unassigned_bridge_resources
#define APP_WRAPPER_FOR_pci_assign_unassigned_bridge_resources
FUNCTION_WRAPPER_VOID(pci_assign_unassigned_bridge_resources, (struct pci_dev *bridge), {
    WRAP_RECURSIVE(bridge);
    TRACES_IF_WATCHPOINT(bridge);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(bridge)));
    kern_printk("pci_assign_unassigned_bridge_resources is invoked.\n");
    PRE_WRAPPER_FUNC(bridge);
    pci_assign_unassigned_bridge_resources(bridge);
    POST_WRAPPER_FUNC(bridge);
    kern_printk("pci_assign_unassigned_bridge_resources returned.\n");
    TRACES_IF_WATCHPOINT(bridge);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(bridge)));
})
#endif


#ifndef KERN_ADDR_add_uevent_var
#define APP_WRAPPER_FOR_add_uevent_var
#endif
 
#ifndef APP_WRAPPER_FOR_add_uevent_var
#define APP_WRAPPER_FOR_add_uevent_var
FUNCTION_WRAPPER(add_uevent_var, (struct kobj_uevent_env *env, const char *format, ...), {
    va_list args__;
    va_start(args__, format);
    // TODO: variadic arguments
    kern_printk("add_uevent_var is invoked.\n");
    PRE_WRAPPER_FUNC(env, format);
    int ret = add_uevent_var(env, format);
    POST_WRAPPER_FUNC(env, format);
    kern_printk("add_uevent_var returned.\n");
    va_end(args__);
    return ret;
})
#endif


#ifndef KERN_ADDR_netlink_unicast
#define APP_WRAPPER_FOR_netlink_unicast
#endif
 
#ifndef APP_WRAPPER_FOR_netlink_unicast
#define APP_WRAPPER_FOR_netlink_unicast
FUNCTION_WRAPPER(netlink_unicast, (struct sock *ssk, struct sk_buff *skb, __u32 portid, int nonblock), {
    WRAP_RECURSIVE(ssk);
    TRACES_IF_WATCHPOINT(ssk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(ssk)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("netlink_unicast is invoked.\n");
    PRE_WRAPPER_FUNC(ssk, skb, portid, nonblock);
    int ret = netlink_unicast(ssk, skb, portid, nonblock);
    POST_WRAPPER_FUNC(ssk, skb, portid, nonblock);
    kern_printk("netlink_unicast returned.\n");
    TRACES_IF_WATCHPOINT(ssk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(ssk)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_default_check_phys_apicid_present
#define APP_WRAPPER_FOR_default_check_phys_apicid_present
#endif
 
#ifndef APP_WRAPPER_FOR_default_check_phys_apicid_present
#define APP_WRAPPER_FOR_default_check_phys_apicid_present
FUNCTION_WRAPPER(default_check_phys_apicid_present, (int phys_apicid), {
    kern_printk("default_check_phys_apicid_present is invoked.\n");
    PRE_WRAPPER_FUNC(phys_apicid);
    int ret = default_check_phys_apicid_present(phys_apicid);
    POST_WRAPPER_FUNC(phys_apicid);
    kern_printk("default_check_phys_apicid_present returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sff_lost_interrupt
#define APP_WRAPPER_FOR_ata_sff_lost_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_lost_interrupt
#define APP_WRAPPER_FOR_ata_sff_lost_interrupt
FUNCTION_WRAPPER_VOID(ata_sff_lost_interrupt, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_sff_lost_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    ata_sff_lost_interrupt(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_sff_lost_interrupt returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_elv_add_request
#define APP_WRAPPER_FOR_elv_add_request
#endif
 
#ifndef APP_WRAPPER_FOR_elv_add_request
#define APP_WRAPPER_FOR_elv_add_request
FUNCTION_WRAPPER_VOID(elv_add_request, (struct request_queue *_arg1, struct request *_arg2, int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("elv_add_request is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    elv_add_request(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("elv_add_request returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_wbinvd_on_cpu
#define APP_WRAPPER_FOR_wbinvd_on_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_wbinvd_on_cpu
#define APP_WRAPPER_FOR_wbinvd_on_cpu
FUNCTION_WRAPPER_VOID(wbinvd_on_cpu, (int cpu), {
    kern_printk("wbinvd_on_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    wbinvd_on_cpu(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("wbinvd_on_cpu returned.\n");
})
#endif


#ifndef KERN_ADDR_generic_file_buffered_write
#define APP_WRAPPER_FOR_generic_file_buffered_write
#endif
 
#ifndef APP_WRAPPER_FOR_generic_file_buffered_write
#define APP_WRAPPER_FOR_generic_file_buffered_write
FUNCTION_WRAPPER(generic_file_buffered_write, (struct kiocb *_arg1, const struct iovec *_arg2, unsigned long _arg3, loff_t _arg4, loff_t *_arg5, size_t _arg6, ssize_t _arg7), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("generic_file_buffered_write is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
    ssize_t ret = generic_file_buffered_write(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
    kern_printk("generic_file_buffered_write returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_eh_thaw_port
#define APP_WRAPPER_FOR_ata_eh_thaw_port
#endif
 
#ifndef APP_WRAPPER_FOR_ata_eh_thaw_port
#define APP_WRAPPER_FOR_ata_eh_thaw_port
FUNCTION_WRAPPER_VOID(ata_eh_thaw_port, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_eh_thaw_port is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    ata_eh_thaw_port(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_eh_thaw_port returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_kernel_bind
#define APP_WRAPPER_FOR_kernel_bind
#endif
 
#ifndef APP_WRAPPER_FOR_kernel_bind
#define APP_WRAPPER_FOR_kernel_bind
FUNCTION_WRAPPER(kernel_bind, (struct socket *sock, struct sockaddr *addr, int addrlen), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    kern_printk("kernel_bind is invoked.\n");
    PRE_WRAPPER_FUNC(sock, addr, addrlen);
    int ret = kernel_bind(sock, addr, addrlen);
    POST_WRAPPER_FUNC(sock, addr, addrlen);
    kern_printk("kernel_bind returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    return ret;
})
#endif


#ifndef KERN_ADDR_unlock_rename
#define APP_WRAPPER_FOR_unlock_rename
#endif
 
#ifndef APP_WRAPPER_FOR_unlock_rename
#define APP_WRAPPER_FOR_unlock_rename
FUNCTION_WRAPPER_VOID(unlock_rename, (struct dentry *_arg1, struct dentry *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("unlock_rename is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    unlock_rename(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("unlock_rename returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_out_of_line_wait_on_bit_lock
#define APP_WRAPPER_FOR_out_of_line_wait_on_bit_lock
#endif
 
#ifndef APP_WRAPPER_FOR_out_of_line_wait_on_bit_lock
#define APP_WRAPPER_FOR_out_of_line_wait_on_bit_lock
FUNCTION_WRAPPER(out_of_line_wait_on_bit_lock, (void *_arg1, int _arg2, int (*_arg3)(void *), unsigned int _arg4), {
    WRAP_FUNCTION(_arg3);
    kern_printk("out_of_line_wait_on_bit_lock is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = out_of_line_wait_on_bit_lock(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("out_of_line_wait_on_bit_lock returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_preempt_notifier_unregister
#define APP_WRAPPER_FOR_preempt_notifier_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_preempt_notifier_unregister
#define APP_WRAPPER_FOR_preempt_notifier_unregister
FUNCTION_WRAPPER_VOID(preempt_notifier_unregister, (struct preempt_notifier *notifier), {
    WRAP_RECURSIVE(notifier);
    TRACES_IF_WATCHPOINT(notifier);
    SCAN_HEAD_FUNC(struct preempt_notifier)(*(TO_UNWATCHED_ADDRESS(notifier)));
    kern_printk("preempt_notifier_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(notifier);
    preempt_notifier_unregister(notifier);
    POST_WRAPPER_FUNC(notifier);
    kern_printk("preempt_notifier_unregister returned.\n");
    TRACES_IF_WATCHPOINT(notifier);
    SCAN_HEAD_FUNC(struct preempt_notifier)(*(TO_UNWATCHED_ADDRESS(notifier)));
})
#endif


#ifndef KERN_ADDR_pci_pme_capable
#define APP_WRAPPER_FOR_pci_pme_capable
#endif
 
#ifndef APP_WRAPPER_FOR_pci_pme_capable
#define APP_WRAPPER_FOR_pci_pme_capable
FUNCTION_WRAPPER(pci_pme_capable, (struct pci_dev *dev, pci_power_t state), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_pme_capable is invoked.\n");
    PRE_WRAPPER_FUNC(dev, state);
    bool ret = pci_pme_capable(dev, state);
    POST_WRAPPER_FUNC(dev, state);
    kern_printk("pci_pme_capable returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bdi_dirty_limit
#define APP_WRAPPER_FOR_bdi_dirty_limit
#endif
 
#ifndef APP_WRAPPER_FOR_bdi_dirty_limit
#define APP_WRAPPER_FOR_bdi_dirty_limit
FUNCTION_WRAPPER(bdi_dirty_limit, (struct backing_dev_info *bdi, unsigned long dirty), {
    WRAP_RECURSIVE(bdi);
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
    kern_printk("bdi_dirty_limit is invoked.\n");
    PRE_WRAPPER_FUNC(bdi, dirty);
    long ret = bdi_dirty_limit(bdi, dirty);
    POST_WRAPPER_FUNC(bdi, dirty);
    kern_printk("bdi_dirty_limit returned.\n");
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
    return ret;
})
#endif


#ifndef KERN_ADDR_msleep_interruptible
#define APP_WRAPPER_FOR_msleep_interruptible
#endif
 
#ifndef APP_WRAPPER_FOR_msleep_interruptible
#define APP_WRAPPER_FOR_msleep_interruptible
FUNCTION_WRAPPER(msleep_interruptible, (unsigned int msecs), {
    kern_printk("msleep_interruptible is invoked.\n");
    PRE_WRAPPER_FUNC(msecs);
    long ret = msleep_interruptible(msecs);
    POST_WRAPPER_FUNC(msecs);
    kern_printk("msleep_interruptible returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_remove_interface
#define APP_WRAPPER_FOR_acpi_remove_interface
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_remove_interface
#define APP_WRAPPER_FOR_acpi_remove_interface
FUNCTION_WRAPPER(acpi_remove_interface, (acpi_string interface_name), {
    kern_printk("acpi_remove_interface is invoked.\n");
    PRE_WRAPPER_FUNC(interface_name);
    acpi_status ret = acpi_remove_interface(interface_name);
    POST_WRAPPER_FUNC(interface_name);
    kern_printk("acpi_remove_interface returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_skip_recovery
#define APP_WRAPPER_FOR_jbd2_journal_skip_recovery
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_skip_recovery
#define APP_WRAPPER_FOR_jbd2_journal_skip_recovery
FUNCTION_WRAPPER(jbd2_journal_skip_recovery, (journal_t *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_skip_recovery is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = jbd2_journal_skip_recovery(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("jbd2_journal_skip_recovery returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_nr_uninterruptible
#define APP_WRAPPER_FOR_nr_uninterruptible
#endif
 
#ifndef APP_WRAPPER_FOR_nr_uninterruptible
#define APP_WRAPPER_FOR_nr_uninterruptible
FUNCTION_WRAPPER(nr_uninterruptible, (), {
    kern_printk("nr_uninterruptible is invoked.\n");
    PRE_WRAPPER_FUNC();
    long ret = nr_uninterruptible();
    POST_WRAPPER_FUNC();
    kern_printk("nr_uninterruptible returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_enable_device
#define APP_WRAPPER_FOR_pci_enable_device
#endif
 
#ifndef APP_WRAPPER_FOR_pci_enable_device
#define APP_WRAPPER_FOR_pci_enable_device
FUNCTION_WRAPPER(pci_enable_device, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_enable_device is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pci_enable_device(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_enable_device returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_files_init
#define APP_WRAPPER_FOR_files_init
#endif
 
#ifndef APP_WRAPPER_FOR_files_init
#define APP_WRAPPER_FOR_files_init
FUNCTION_WRAPPER_VOID(files_init, (unsigned long _arg1), {
    kern_printk("files_init is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    files_init(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("files_init returned.\n");
})
#endif


#ifndef KERN_ADDR_skb_copy_expand
#define APP_WRAPPER_FOR_skb_copy_expand
#endif
 
#ifndef APP_WRAPPER_FOR_skb_copy_expand
#define APP_WRAPPER_FOR_skb_copy_expand
FUNCTION_WRAPPER(skb_copy_expand, (const struct sk_buff *skb, int newheadroom, int newtailroom, gfp_t priority), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(const struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_copy_expand is invoked.\n");
    PRE_WRAPPER_FUNC(skb, newheadroom, newtailroom, priority);
    struct sk_buff *ret = skb_copy_expand(skb, newheadroom, newtailroom, priority);
    POST_WRAPPER_FUNC(skb, newheadroom, newtailroom, priority);
    kern_printk("skb_copy_expand returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(const struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_pci_bmdma_prepare_host
#define APP_WRAPPER_FOR_ata_pci_bmdma_prepare_host
#endif
 
#ifndef APP_WRAPPER_FOR_ata_pci_bmdma_prepare_host
#define APP_WRAPPER_FOR_ata_pci_bmdma_prepare_host
FUNCTION_WRAPPER(ata_pci_bmdma_prepare_host, (struct pci_dev *pdev, const struct ata_port_info ** const ppi, struct ata_host **r_host), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    WRAP_RECURSIVE(ppi);
    TRACES_IF_WATCHPOINT(ppi);
  //  SCAN_HEAD_FUNC(const struct ata_port_info * const)(*(TO_UNWATCHED_ADDRESS(ppi)));
    WRAP_RECURSIVE(r_host);
    TRACES_IF_WATCHPOINT(r_host);
   // SCAN_HEAD_FUNC(struct ata_host *)(*(TO_UNWATCHED_ADDRESS(r_host)));
    kern_printk("ata_pci_bmdma_prepare_host is invoked.\n");
    PRE_WRAPPER_FUNC(pdev, ppi, r_host);
    int ret = ata_pci_bmdma_prepare_host(pdev, ppi, r_host);
    POST_WRAPPER_FUNC(pdev, ppi, r_host);
    kern_printk("ata_pci_bmdma_prepare_host returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    TRACES_IF_WATCHPOINT(ppi);
//    SCAN_HEAD_FUNC(const struct ata_port_info * const)(*(TO_UNWATCHED_ADDRESS(ppi)));
    TRACES_IF_WATCHPOINT(r_host);
  //  SCAN_HEAD_FUNC(struct ata_host *)(*(TO_UNWATCHED_ADDRESS(r_host)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mnt_set_expiry
#define APP_WRAPPER_FOR_mnt_set_expiry
#endif
 
#ifndef APP_WRAPPER_FOR_mnt_set_expiry
#define APP_WRAPPER_FOR_mnt_set_expiry
FUNCTION_WRAPPER_VOID(mnt_set_expiry, (struct vfsmount *mnt, struct list_head *expiry_list), {
    WRAP_RECURSIVE(mnt);
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
    kern_printk("mnt_set_expiry is invoked.\n");
    PRE_WRAPPER_FUNC(mnt, expiry_list);
    mnt_set_expiry(mnt, expiry_list);
    POST_WRAPPER_FUNC(mnt, expiry_list);
    kern_printk("mnt_set_expiry returned.\n");
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
})
#endif


#ifndef KERN_ADDR_param_get_ushort
#define APP_WRAPPER_FOR_param_get_ushort
#endif
 
#ifndef APP_WRAPPER_FOR_param_get_ushort
#define APP_WRAPPER_FOR_param_get_ushort
FUNCTION_WRAPPER(param_get_ushort, (char *buffer, const struct kernel_param *kp), {
    WRAP_RECURSIVE(kp);
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    kern_printk("param_get_ushort is invoked.\n");
    PRE_WRAPPER_FUNC(buffer, kp);
    int ret = param_get_ushort(buffer, kp);
    POST_WRAPPER_FUNC(buffer, kp);
    kern_printk("param_get_ushort returned.\n");
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_show_mem
#define APP_WRAPPER_FOR_show_mem
#endif
 
#ifndef APP_WRAPPER_FOR_show_mem
#define APP_WRAPPER_FOR_show_mem
FUNCTION_WRAPPER_VOID(show_mem, (unsigned int flags), {
    kern_printk("show_mem is invoked.\n");
    PRE_WRAPPER_FUNC(flags);
    show_mem(flags);
    POST_WRAPPER_FUNC(flags);
    kern_printk("show_mem returned.\n");
})
#endif


#ifndef KERN_ADDR___percpu_init_rwsem
#define APP_WRAPPER_FOR___percpu_init_rwsem
#endif
 
#ifndef APP_WRAPPER_FOR___percpu_init_rwsem
#define APP_WRAPPER_FOR___percpu_init_rwsem
FUNCTION_WRAPPER(__percpu_init_rwsem, (struct percpu_rw_semaphore *_arg1, const char *_arg2, struct lock_class_key *_arg3), {
    kern_printk("__percpu_init_rwsem is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = __percpu_init_rwsem(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("__percpu_init_rwsem returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_kset_register
#define APP_WRAPPER_FOR_kset_register
#endif
 
#ifndef APP_WRAPPER_FOR_kset_register
#define APP_WRAPPER_FOR_kset_register
FUNCTION_WRAPPER(kset_register, (struct kset *kset), {
    WRAP_RECURSIVE(kset);
    TRACES_IF_WATCHPOINT(kset);
    SCAN_HEAD_FUNC(struct kset)(*(TO_UNWATCHED_ADDRESS(kset)));
    kern_printk("kset_register is invoked.\n");
    PRE_WRAPPER_FUNC(kset);
    int ret = kset_register(kset);
    POST_WRAPPER_FUNC(kset);
    kern_printk("kset_register returned.\n");
    TRACES_IF_WATCHPOINT(kset);
    SCAN_HEAD_FUNC(struct kset)(*(TO_UNWATCHED_ADDRESS(kset)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bioset_free
#define APP_WRAPPER_FOR_bioset_free
#endif
 
#ifndef APP_WRAPPER_FOR_bioset_free
#define APP_WRAPPER_FOR_bioset_free
FUNCTION_WRAPPER_VOID(bioset_free, (struct bio_set *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio_set)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bioset_free is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    bioset_free(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("bioset_free returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio_set)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR___jbd2_journal_file_buffer
#define APP_WRAPPER_FOR___jbd2_journal_file_buffer
#endif
 
#ifndef APP_WRAPPER_FOR___jbd2_journal_file_buffer
#define APP_WRAPPER_FOR___jbd2_journal_file_buffer
FUNCTION_WRAPPER_VOID(__jbd2_journal_file_buffer, (struct journal_head *_arg1, transaction_t *_arg2, int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(transaction_t)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("__jbd2_journal_file_buffer is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    __jbd2_journal_file_buffer(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("__jbd2_journal_file_buffer returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(transaction_t)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_device_reprobe
#define APP_WRAPPER_FOR_device_reprobe
#endif
 
#ifndef APP_WRAPPER_FOR_device_reprobe
#define APP_WRAPPER_FOR_device_reprobe
FUNCTION_WRAPPER(device_reprobe, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("device_reprobe is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = device_reprobe(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("device_reprobe returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_device_del
#define APP_WRAPPER_FOR_device_del
#endif
 
#ifndef APP_WRAPPER_FOR_device_del
#define APP_WRAPPER_FOR_device_del
FUNCTION_WRAPPER_VOID(device_del, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("device_del is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    device_del(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("device_del returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_free_uid
#define APP_WRAPPER_FOR_free_uid
#endif
 
#ifndef APP_WRAPPER_FOR_free_uid
#define APP_WRAPPER_FOR_free_uid
FUNCTION_WRAPPER_VOID(free_uid, (struct user_struct *_arg1), {
    kern_printk("free_uid is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    free_uid(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("free_uid returned.\n");
})
#endif


#ifndef KERN_ADDR_disk_expand_part_tbl
#define APP_WRAPPER_FOR_disk_expand_part_tbl
#endif
 
#ifndef APP_WRAPPER_FOR_disk_expand_part_tbl
#define APP_WRAPPER_FOR_disk_expand_part_tbl
FUNCTION_WRAPPER(disk_expand_part_tbl, (struct gendisk *disk, int target), {
    WRAP_RECURSIVE(disk);
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    kern_printk("disk_expand_part_tbl is invoked.\n");
    PRE_WRAPPER_FUNC(disk, target);
    int ret = disk_expand_part_tbl(disk, target);
    POST_WRAPPER_FUNC(disk, target);
    kern_printk("disk_expand_part_tbl returned.\n");
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_change_name
#define APP_WRAPPER_FOR_dev_change_name
#endif
 
#ifndef APP_WRAPPER_FOR_dev_change_name
#define APP_WRAPPER_FOR_dev_change_name
FUNCTION_WRAPPER(dev_change_name, (struct net_device *_arg1, const char *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("dev_change_name is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = dev_change_name(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("dev_change_name returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vm_brk
#define APP_WRAPPER_FOR_vm_brk
#endif
 
#ifndef APP_WRAPPER_FOR_vm_brk
#define APP_WRAPPER_FOR_vm_brk
FUNCTION_WRAPPER(vm_brk, (unsigned long _arg1, unsigned long _arg2), {
    kern_printk("vm_brk is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    long ret = vm_brk(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("vm_brk returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_write_one_page
#define APP_WRAPPER_FOR_write_one_page
#endif
 
#ifndef APP_WRAPPER_FOR_write_one_page
#define APP_WRAPPER_FOR_write_one_page
FUNCTION_WRAPPER(write_one_page, (struct page *page, int wait), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("write_one_page is invoked.\n");
    PRE_WRAPPER_FUNC(page, wait);
    int ret = write_one_page(page, wait);
    POST_WRAPPER_FUNC(page, wait);
    kern_printk("write_one_page returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_file_mmap
#define APP_WRAPPER_FOR_generic_file_mmap
#endif
 
#ifndef APP_WRAPPER_FOR_generic_file_mmap
#define APP_WRAPPER_FOR_generic_file_mmap
FUNCTION_WRAPPER(generic_file_mmap, (struct file *_arg1, struct vm_area_struct *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("generic_file_mmap is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = generic_file_mmap(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("generic_file_mmap returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_device_pm_unlock
#define APP_WRAPPER_FOR_device_pm_unlock
#endif
 
#ifndef APP_WRAPPER_FOR_device_pm_unlock
#define APP_WRAPPER_FOR_device_pm_unlock
FUNCTION_WRAPPER_VOID(device_pm_unlock, (), {
    kern_printk("device_pm_unlock is invoked.\n");
    PRE_WRAPPER_FUNC();
    device_pm_unlock();
    POST_WRAPPER_FUNC();
    kern_printk("device_pm_unlock returned.\n");
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt29
#define APP_WRAPPER_FOR_invalidate_interrupt29
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt29
#define APP_WRAPPER_FOR_invalidate_interrupt29
FUNCTION_WRAPPER_VOID(invalidate_interrupt29, (), {
    kern_printk("invalidate_interrupt29 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt29();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt29 returned.\n");
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt28
#define APP_WRAPPER_FOR_invalidate_interrupt28
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt28
#define APP_WRAPPER_FOR_invalidate_interrupt28
FUNCTION_WRAPPER_VOID(invalidate_interrupt28, (), {
    kern_printk("invalidate_interrupt28 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt28();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt28 returned.\n");
})
#endif


#ifndef KERN_ADDR_schedule_work_on
#define APP_WRAPPER_FOR_schedule_work_on
#endif
 
#ifndef APP_WRAPPER_FOR_schedule_work_on
#define APP_WRAPPER_FOR_schedule_work_on
FUNCTION_WRAPPER(schedule_work_on, (int cpu, struct work_struct *work), {
    WRAP_RECURSIVE(work);
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
    kern_printk("schedule_work_on is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, work);
    bool ret = schedule_work_on(cpu, work);
    POST_WRAPPER_FUNC(cpu, work);
    kern_printk("schedule_work_on returned.\n");
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
    return ret;
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt23
#define APP_WRAPPER_FOR_invalidate_interrupt23
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt23
#define APP_WRAPPER_FOR_invalidate_interrupt23
FUNCTION_WRAPPER_VOID(invalidate_interrupt23, (), {
    kern_printk("invalidate_interrupt23 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt23();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt23 returned.\n");
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt22
#define APP_WRAPPER_FOR_invalidate_interrupt22
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt22
#define APP_WRAPPER_FOR_invalidate_interrupt22
FUNCTION_WRAPPER_VOID(invalidate_interrupt22, (), {
    kern_printk("invalidate_interrupt22 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt22();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt22 returned.\n");
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt21
#define APP_WRAPPER_FOR_invalidate_interrupt21
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt21
#define APP_WRAPPER_FOR_invalidate_interrupt21
FUNCTION_WRAPPER_VOID(invalidate_interrupt21, (), {
    kern_printk("invalidate_interrupt21 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt21();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt21 returned.\n");
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt20
#define APP_WRAPPER_FOR_invalidate_interrupt20
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt20
#define APP_WRAPPER_FOR_invalidate_interrupt20
FUNCTION_WRAPPER_VOID(invalidate_interrupt20, (), {
    kern_printk("invalidate_interrupt20 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt20();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt20 returned.\n");
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt26
#define APP_WRAPPER_FOR_invalidate_interrupt26
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt26
#define APP_WRAPPER_FOR_invalidate_interrupt26
FUNCTION_WRAPPER_VOID(invalidate_interrupt26, (), {
    kern_printk("invalidate_interrupt26 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt26();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt26 returned.\n");
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt25
#define APP_WRAPPER_FOR_invalidate_interrupt25
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt25
#define APP_WRAPPER_FOR_invalidate_interrupt25
FUNCTION_WRAPPER_VOID(invalidate_interrupt25, (), {
    kern_printk("invalidate_interrupt25 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt25();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt25 returned.\n");
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt24
#define APP_WRAPPER_FOR_invalidate_interrupt24
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt24
#define APP_WRAPPER_FOR_invalidate_interrupt24
FUNCTION_WRAPPER_VOID(invalidate_interrupt24, (), {
    kern_printk("invalidate_interrupt24 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt24();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt24 returned.\n");
})
#endif


#ifndef KERN_ADDR_ata_sff_dev_select
#define APP_WRAPPER_FOR_ata_sff_dev_select
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_dev_select
#define APP_WRAPPER_FOR_ata_sff_dev_select
FUNCTION_WRAPPER_VOID(ata_sff_dev_select, (struct ata_port *ap, unsigned int device), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_sff_dev_select is invoked.\n");
    PRE_WRAPPER_FUNC(ap, device);
    ata_sff_dev_select(ap, device);
    POST_WRAPPER_FUNC(ap, device);
    kern_printk("ata_sff_dev_select returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_raise_softirq
#define APP_WRAPPER_FOR_raise_softirq
#endif
 
#ifndef APP_WRAPPER_FOR_raise_softirq
#define APP_WRAPPER_FOR_raise_softirq
FUNCTION_WRAPPER_VOID(raise_softirq, (unsigned int nr), {
    kern_printk("raise_softirq is invoked.\n");
    PRE_WRAPPER_FUNC(nr);
    raise_softirq(nr);
    POST_WRAPPER_FUNC(nr);
    kern_printk("raise_softirq returned.\n");
})
#endif


#ifndef KERN_ADDR_inet_twdr_twkill_work
#define APP_WRAPPER_FOR_inet_twdr_twkill_work
#endif
 
#ifndef APP_WRAPPER_FOR_inet_twdr_twkill_work
#define APP_WRAPPER_FOR_inet_twdr_twkill_work
FUNCTION_WRAPPER_VOID(inet_twdr_twkill_work, (struct work_struct *work), {
    WRAP_RECURSIVE(work);
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
    kern_printk("inet_twdr_twkill_work is invoked.\n");
    PRE_WRAPPER_FUNC(work);
    inet_twdr_twkill_work(work);
    POST_WRAPPER_FUNC(work);
    kern_printk("inet_twdr_twkill_work returned.\n");
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
})
#endif


#ifndef KERN_ADDR_register_lapic_address
#define APP_WRAPPER_FOR_register_lapic_address
#endif
 
#ifndef APP_WRAPPER_FOR_register_lapic_address
#define APP_WRAPPER_FOR_register_lapic_address
FUNCTION_WRAPPER_VOID(register_lapic_address, (unsigned long address), {
    kern_printk("register_lapic_address is invoked.\n");
    PRE_WRAPPER_FUNC(address);
    register_lapic_address(address);
    POST_WRAPPER_FUNC(address);
    kern_printk("register_lapic_address returned.\n");
})
#endif


#ifndef KERN_ADDR_split_huge_page
#define APP_WRAPPER_FOR_split_huge_page
#endif
 
#ifndef APP_WRAPPER_FOR_split_huge_page
#define APP_WRAPPER_FOR_split_huge_page
FUNCTION_WRAPPER(split_huge_page, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("split_huge_page is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    int ret = split_huge_page(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("split_huge_page returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ktime_get_real
#define APP_WRAPPER_FOR_ktime_get_real
#endif
 
#ifndef APP_WRAPPER_FOR_ktime_get_real
#define APP_WRAPPER_FOR_ktime_get_real
FUNCTION_WRAPPER(ktime_get_real, (), {
    kern_printk("ktime_get_real is invoked.\n");
    PRE_WRAPPER_FUNC();
    ktime_t ret = ktime_get_real();
    POST_WRAPPER_FUNC();
    kern_printk("ktime_get_real returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sff_irq_on
#define APP_WRAPPER_FOR_ata_sff_irq_on
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_irq_on
#define APP_WRAPPER_FOR_ata_sff_irq_on
FUNCTION_WRAPPER_VOID(ata_sff_irq_on, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_sff_irq_on is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    ata_sff_irq_on(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_sff_irq_on returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_has_ns_capability
#define APP_WRAPPER_FOR_has_ns_capability
#endif
 
#ifndef APP_WRAPPER_FOR_has_ns_capability
#define APP_WRAPPER_FOR_has_ns_capability
FUNCTION_WRAPPER(has_ns_capability, (struct task_struct *t, struct user_namespace *ns, int cap), {
    WRAP_RECURSIVE(t);
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(t)));
    kern_printk("has_ns_capability is invoked.\n");
    PRE_WRAPPER_FUNC(t, ns, cap);
    bool ret = has_ns_capability(t, ns, cap);
    POST_WRAPPER_FUNC(t, ns, cap);
    kern_printk("has_ns_capability returned.\n");
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(t)));
    return ret;
})
#endif


#ifndef KERN_ADDR_iov_iter_copy_from_user
#define APP_WRAPPER_FOR_iov_iter_copy_from_user
#endif
 
#ifndef APP_WRAPPER_FOR_iov_iter_copy_from_user
#define APP_WRAPPER_FOR_iov_iter_copy_from_user
FUNCTION_WRAPPER(iov_iter_copy_from_user, (struct page *page, struct iov_iter *i, unsigned long offset, size_t bytes), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("iov_iter_copy_from_user is invoked.\n");
    PRE_WRAPPER_FUNC(page, i, offset, bytes);
    size_t ret = iov_iter_copy_from_user(page, i, offset, bytes);
    POST_WRAPPER_FUNC(page, i, offset, bytes);
    kern_printk("iov_iter_copy_from_user returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_pad
#define APP_WRAPPER_FOR_skb_pad
#endif
 
#ifndef APP_WRAPPER_FOR_skb_pad
#define APP_WRAPPER_FOR_skb_pad
FUNCTION_WRAPPER(skb_pad, (struct sk_buff *skb, int pad), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_pad is invoked.\n");
    PRE_WRAPPER_FUNC(skb, pad);
    int ret = skb_pad(skb, pad);
    POST_WRAPPER_FUNC(skb, pad);
    kern_printk("skb_pad returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dma_memcpy_to_iovec
#define APP_WRAPPER_FOR_dma_memcpy_to_iovec
#endif
 
#ifndef APP_WRAPPER_FOR_dma_memcpy_to_iovec
#define APP_WRAPPER_FOR_dma_memcpy_to_iovec
FUNCTION_WRAPPER(dma_memcpy_to_iovec, (struct dma_chan *chan, struct iovec *iov, struct dma_pinned_list *pinned_list, unsigned char *kdata, size_t len), {
    WRAP_RECURSIVE(chan);
    TRACES_IF_WATCHPOINT(chan);
    SCAN_HEAD_FUNC(struct dma_chan)(*(TO_UNWATCHED_ADDRESS(chan)));
    kern_printk("dma_memcpy_to_iovec is invoked.\n");
    PRE_WRAPPER_FUNC(chan, iov, pinned_list, kdata, len);
    dma_cookie_t ret = dma_memcpy_to_iovec(chan, iov, pinned_list, kdata, len);
    POST_WRAPPER_FUNC(chan, iov, pinned_list, kdata, len);
    kern_printk("dma_memcpy_to_iovec returned.\n");
    TRACES_IF_WATCHPOINT(chan);
    SCAN_HEAD_FUNC(struct dma_chan)(*(TO_UNWATCHED_ADDRESS(chan)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_numa_slit_init
#define APP_WRAPPER_FOR_acpi_numa_slit_init
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_numa_slit_init
#define APP_WRAPPER_FOR_acpi_numa_slit_init
FUNCTION_WRAPPER_VOID(acpi_numa_slit_init, (struct acpi_table_slit *slit), {
    kern_printk("acpi_numa_slit_init is invoked.\n");
    PRE_WRAPPER_FUNC(slit);
    acpi_numa_slit_init(slit);
    POST_WRAPPER_FUNC(slit);
    kern_printk("acpi_numa_slit_init returned.\n");
})
#endif


#ifndef KERN_ADDR_input_get_keycode
#define APP_WRAPPER_FOR_input_get_keycode
#endif
 
#ifndef APP_WRAPPER_FOR_input_get_keycode
#define APP_WRAPPER_FOR_input_get_keycode
FUNCTION_WRAPPER(input_get_keycode, (struct input_dev *dev, struct input_keymap_entry *ke), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("input_get_keycode is invoked.\n");
    PRE_WRAPPER_FUNC(dev, ke);
    int ret = input_get_keycode(dev, ke);
    POST_WRAPPER_FUNC(dev, ke);
    kern_printk("input_get_keycode returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cgroup_unlock
#define APP_WRAPPER_FOR_cgroup_unlock
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_unlock
#define APP_WRAPPER_FOR_cgroup_unlock
FUNCTION_WRAPPER_VOID(cgroup_unlock, (), {
    kern_printk("cgroup_unlock is invoked.\n");
    PRE_WRAPPER_FUNC();
    cgroup_unlock();
    POST_WRAPPER_FUNC();
    kern_printk("cgroup_unlock returned.\n");
})
#endif


#ifndef KERN_ADDR_do_mremap
#define APP_WRAPPER_FOR_do_mremap
#endif
 
#ifndef APP_WRAPPER_FOR_do_mremap
#define APP_WRAPPER_FOR_do_mremap
FUNCTION_WRAPPER(do_mremap, (unsigned long addr, unsigned long old_len, unsigned long new_len, unsigned long flags, unsigned long new_addr), {
    kern_printk("do_mremap is invoked.\n");
    PRE_WRAPPER_FUNC(addr, old_len, new_len, flags, new_addr);
    long ret = do_mremap(addr, old_len, new_len, flags, new_addr);
    POST_WRAPPER_FUNC(addr, old_len, new_len, flags, new_addr);
    kern_printk("do_mremap returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___suspend_report_result
#define APP_WRAPPER_FOR___suspend_report_result
#endif
 
#ifndef APP_WRAPPER_FOR___suspend_report_result
#define APP_WRAPPER_FOR___suspend_report_result
FUNCTION_WRAPPER_VOID(__suspend_report_result, (const char *function, void *fn, int ret), {
    kern_printk("__suspend_report_result is invoked.\n");
    PRE_WRAPPER_FUNC(function, fn, ret);
    __suspend_report_result(function, fn, ret);
    POST_WRAPPER_FUNC(function, fn, ret);
    kern_printk("__suspend_report_result returned.\n");
})
#endif


#ifndef KERN_ADDR_sysfs_create_link
#define APP_WRAPPER_FOR_sysfs_create_link
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_create_link
#define APP_WRAPPER_FOR_sysfs_create_link
FUNCTION_WRAPPER(sysfs_create_link, (struct kobject *kobj, struct kobject *target, const char *name), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    WRAP_RECURSIVE(target);
    TRACES_IF_WATCHPOINT(target);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(target)));
    kern_printk("sysfs_create_link is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, target, name);
    int ret = sysfs_create_link(kobj, target, name);
    POST_WRAPPER_FUNC(kobj, target, name);
    kern_printk("sysfs_create_link returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    TRACES_IF_WATCHPOINT(target);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(target)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_unlock_updates
#define APP_WRAPPER_FOR_jbd2_journal_unlock_updates
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_unlock_updates
#define APP_WRAPPER_FOR_jbd2_journal_unlock_updates
FUNCTION_WRAPPER_VOID(jbd2_journal_unlock_updates, (journal_t *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_unlock_updates is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    jbd2_journal_unlock_updates(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("jbd2_journal_unlock_updates returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_netlink_set_err
#define APP_WRAPPER_FOR_netlink_set_err
#endif
 
#ifndef APP_WRAPPER_FOR_netlink_set_err
#define APP_WRAPPER_FOR_netlink_set_err
FUNCTION_WRAPPER(netlink_set_err, (struct sock *ssk, __u32 portid, __u32 group, int code), {
    WRAP_RECURSIVE(ssk);
    TRACES_IF_WATCHPOINT(ssk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(ssk)));
    kern_printk("netlink_set_err is invoked.\n");
    PRE_WRAPPER_FUNC(ssk, portid, group, code);
    int ret = netlink_set_err(ssk, portid, group, code);
    POST_WRAPPER_FUNC(ssk, portid, group, code);
    kern_printk("netlink_set_err returned.\n");
    TRACES_IF_WATCHPOINT(ssk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(ssk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_host_start
#define APP_WRAPPER_FOR_ata_host_start
#endif
 
#ifndef APP_WRAPPER_FOR_ata_host_start
#define APP_WRAPPER_FOR_ata_host_start
FUNCTION_WRAPPER(ata_host_start, (struct ata_host *host), {
    WRAP_RECURSIVE(host);
    TRACES_IF_WATCHPOINT(host);
    SCAN_HEAD_FUNC(struct ata_host)(*(TO_UNWATCHED_ADDRESS(host)));
    kern_printk("ata_host_start is invoked.\n");
    PRE_WRAPPER_FUNC(host);
    int ret = ata_host_start(host);
    POST_WRAPPER_FUNC(host);
    kern_printk("ata_host_start returned.\n");
    TRACES_IF_WATCHPOINT(host);
    SCAN_HEAD_FUNC(struct ata_host)(*(TO_UNWATCHED_ADDRESS(host)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_readlink
#define APP_WRAPPER_FOR_vfs_readlink
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_readlink
#define APP_WRAPPER_FOR_vfs_readlink
FUNCTION_WRAPPER(vfs_readlink, (struct dentry *_arg1, char *_arg2, int _arg3, const char *_arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("vfs_readlink is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = vfs_readlink(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("vfs_readlink returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR___wait_on_bit_lock
#define APP_WRAPPER_FOR___wait_on_bit_lock
#endif
 
#ifndef APP_WRAPPER_FOR___wait_on_bit_lock
#define APP_WRAPPER_FOR___wait_on_bit_lock
FUNCTION_WRAPPER(__wait_on_bit_lock, (wait_queue_head_t *_arg1, struct wait_bit_queue *_arg2, int (*_arg3)(void *), unsigned int _arg4), {
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct wait_bit_queue)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_FUNCTION(_arg3);
    kern_printk("__wait_on_bit_lock is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = __wait_on_bit_lock(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("__wait_on_bit_lock returned.\n");
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct wait_bit_queue)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_tick_get_broadcast_device
#define APP_WRAPPER_FOR_tick_get_broadcast_device
#endif
 
#ifndef APP_WRAPPER_FOR_tick_get_broadcast_device
#define APP_WRAPPER_FOR_tick_get_broadcast_device
FUNCTION_WRAPPER(tick_get_broadcast_device, (), {
    kern_printk("tick_get_broadcast_device is invoked.\n");
    PRE_WRAPPER_FUNC();
    struct tick_device *ret = tick_get_broadcast_device();
    POST_WRAPPER_FUNC();
    kern_printk("tick_get_broadcast_device returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_nsproxy_cache_init
#define APP_WRAPPER_FOR_nsproxy_cache_init
#endif
 
#ifndef APP_WRAPPER_FOR_nsproxy_cache_init
#define APP_WRAPPER_FOR_nsproxy_cache_init
FUNCTION_WRAPPER(nsproxy_cache_init, (), {
    kern_printk("nsproxy_cache_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = nsproxy_cache_init();
    POST_WRAPPER_FUNC();
    kern_printk("nsproxy_cache_init returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_shutdown
#define APP_WRAPPER_FOR_dev_shutdown
#endif
 
#ifndef APP_WRAPPER_FOR_dev_shutdown
#define APP_WRAPPER_FOR_dev_shutdown
FUNCTION_WRAPPER_VOID(dev_shutdown, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_shutdown is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    dev_shutdown(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_shutdown returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_pcibios_assign_all_busses
#define APP_WRAPPER_FOR_pcibios_assign_all_busses
#endif
 
#ifndef APP_WRAPPER_FOR_pcibios_assign_all_busses
#define APP_WRAPPER_FOR_pcibios_assign_all_busses
FUNCTION_WRAPPER(pcibios_assign_all_busses, (), {
    kern_printk("pcibios_assign_all_busses is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = pcibios_assign_all_busses();
    POST_WRAPPER_FUNC();
    kern_printk("pcibios_assign_all_busses returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ip_compute_csum
#define APP_WRAPPER_FOR_ip_compute_csum
#endif
 
#ifndef APP_WRAPPER_FOR_ip_compute_csum
#define APP_WRAPPER_FOR_ip_compute_csum
FUNCTION_WRAPPER(ip_compute_csum, (const void *buff, int len), {
    kern_printk("ip_compute_csum is invoked.\n");
    PRE_WRAPPER_FUNC(buff, len);
    __sum16 ret = ip_compute_csum(buff, len);
    POST_WRAPPER_FUNC(buff, len);
    kern_printk("ip_compute_csum returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_unregister_chrdev_region
#define APP_WRAPPER_FOR_unregister_chrdev_region
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_chrdev_region
#define APP_WRAPPER_FOR_unregister_chrdev_region
FUNCTION_WRAPPER_VOID(unregister_chrdev_region, (dev_t _arg1, unsigned int _arg2), {
    kern_printk("unregister_chrdev_region is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    unregister_chrdev_region(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("unregister_chrdev_region returned.\n");
})
#endif


#ifndef KERN_ADDR_parameq
#define APP_WRAPPER_FOR_parameq
#endif
 
#ifndef APP_WRAPPER_FOR_parameq
#define APP_WRAPPER_FOR_parameq
FUNCTION_WRAPPER(parameq, (const char *name1, const char *name2), {
    kern_printk("parameq is invoked.\n");
    PRE_WRAPPER_FUNC(name1, name2);
    bool ret = parameq(name1, name2);
    POST_WRAPPER_FUNC(name1, name2);
    kern_printk("parameq returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_vscnprintf
#define APP_WRAPPER_FOR_vscnprintf
#endif
 
#ifndef APP_WRAPPER_FOR_vscnprintf
#define APP_WRAPPER_FOR_vscnprintf
FUNCTION_WRAPPER(vscnprintf, (char *buf, size_t size, const char *fmt, va_list args), {
    kern_printk("vscnprintf is invoked.\n");
    PRE_WRAPPER_FUNC(buf, size, fmt, args);
    int ret = vscnprintf(buf, size, fmt, args);
    POST_WRAPPER_FUNC(buf, size, fmt, args);
    kern_printk("vscnprintf returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_should_remove_suid
#define APP_WRAPPER_FOR_should_remove_suid
#endif
 
#ifndef APP_WRAPPER_FOR_should_remove_suid
#define APP_WRAPPER_FOR_should_remove_suid
FUNCTION_WRAPPER(should_remove_suid, (struct dentry *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("should_remove_suid is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = should_remove_suid(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("should_remove_suid returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_gc_mask_disable_reg_and_ack
#define APP_WRAPPER_FOR_irq_gc_mask_disable_reg_and_ack
#endif
 
#ifndef APP_WRAPPER_FOR_irq_gc_mask_disable_reg_and_ack
#define APP_WRAPPER_FOR_irq_gc_mask_disable_reg_and_ack
FUNCTION_WRAPPER_VOID(irq_gc_mask_disable_reg_and_ack, (struct irq_data *d), {
    WRAP_RECURSIVE(d);
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(d)));
    kern_printk("irq_gc_mask_disable_reg_and_ack is invoked.\n");
    PRE_WRAPPER_FUNC(d);
    irq_gc_mask_disable_reg_and_ack(d);
    POST_WRAPPER_FUNC(d);
    kern_printk("irq_gc_mask_disable_reg_and_ack returned.\n");
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(d)));
})
#endif


#ifndef KERN_ADDR_llist_del_first
#define APP_WRAPPER_FOR_llist_del_first
#endif
 
#ifndef APP_WRAPPER_FOR_llist_del_first
#define APP_WRAPPER_FOR_llist_del_first
FUNCTION_WRAPPER(llist_del_first, (struct llist_head *head), {
    kern_printk("llist_del_first is invoked.\n");
    PRE_WRAPPER_FUNC(head);
    struct llist_node *ret = llist_del_first(head);
    POST_WRAPPER_FUNC(head);
    kern_printk("llist_del_first returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dcbnl_ieee_notify
#define APP_WRAPPER_FOR_dcbnl_ieee_notify
#endif
 
#ifndef APP_WRAPPER_FOR_dcbnl_ieee_notify
#define APP_WRAPPER_FOR_dcbnl_ieee_notify
FUNCTION_WRAPPER(dcbnl_ieee_notify, (struct net_device *dev, int event, int cmd, u32 seq, u32 pid), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dcbnl_ieee_notify is invoked.\n");
    PRE_WRAPPER_FUNC(dev, event, cmd, seq, pid);
    int ret = dcbnl_ieee_notify(dev, event, cmd, seq, pid);
    POST_WRAPPER_FUNC(dev, event, cmd, seq, pid);
    kern_printk("dcbnl_ieee_notify returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_f_getown
#define APP_WRAPPER_FOR_f_getown
#endif
 
#ifndef APP_WRAPPER_FOR_f_getown
#define APP_WRAPPER_FOR_f_getown
FUNCTION_WRAPPER(f_getown, (struct file *filp), {
    WRAP_RECURSIVE(filp);
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    kern_printk("f_getown is invoked.\n");
    PRE_WRAPPER_FUNC(filp);
    pid_t ret = f_getown(filp);
    POST_WRAPPER_FUNC(filp);
    kern_printk("f_getown returned.\n");
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_kfree_skb_irq
#define APP_WRAPPER_FOR_dev_kfree_skb_irq
#endif
 
#ifndef APP_WRAPPER_FOR_dev_kfree_skb_irq
#define APP_WRAPPER_FOR_dev_kfree_skb_irq
FUNCTION_WRAPPER_VOID(dev_kfree_skb_irq, (struct sk_buff *skb), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("dev_kfree_skb_irq is invoked.\n");
    PRE_WRAPPER_FUNC(skb);
    dev_kfree_skb_irq(skb);
    POST_WRAPPER_FUNC(skb);
    kern_printk("dev_kfree_skb_irq returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_pxm_to_node
#define APP_WRAPPER_FOR_pxm_to_node
#endif
 
#ifndef APP_WRAPPER_FOR_pxm_to_node
#define APP_WRAPPER_FOR_pxm_to_node
FUNCTION_WRAPPER(pxm_to_node, (int _arg1), {
    kern_printk("pxm_to_node is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = pxm_to_node(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("pxm_to_node returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_lock_vector_lock
#define APP_WRAPPER_FOR_lock_vector_lock
#endif
 
#ifndef APP_WRAPPER_FOR_lock_vector_lock
#define APP_WRAPPER_FOR_lock_vector_lock
FUNCTION_WRAPPER_VOID(lock_vector_lock, (), {
    kern_printk("lock_vector_lock is invoked.\n");
    PRE_WRAPPER_FUNC();
    lock_vector_lock();
    POST_WRAPPER_FUNC();
    kern_printk("lock_vector_lock returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_os_install_interrupt_handler
#define APP_WRAPPER_FOR_acpi_os_install_interrupt_handler
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_install_interrupt_handler
#define APP_WRAPPER_FOR_acpi_os_install_interrupt_handler
FUNCTION_WRAPPER(acpi_os_install_interrupt_handler, (u32 gsi, acpi_osd_handler service_routine, void *context), {
    WRAP_FUNCTION(service_routine);
    kern_printk("acpi_os_install_interrupt_handler is invoked.\n");
    PRE_WRAPPER_FUNC(gsi, service_routine, context);
    acpi_status ret = acpi_os_install_interrupt_handler(gsi, service_routine, context);
    POST_WRAPPER_FUNC(gsi, service_routine, context);
    kern_printk("acpi_os_install_interrupt_handler returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___acpi_map_table
#define APP_WRAPPER_FOR___acpi_map_table
#endif
 
#ifndef APP_WRAPPER_FOR___acpi_map_table
#define APP_WRAPPER_FOR___acpi_map_table
FUNCTION_WRAPPER(__acpi_map_table, (unsigned long phys_addr, unsigned long size), {
    kern_printk("__acpi_map_table is invoked.\n");
    PRE_WRAPPER_FUNC(phys_addr, size);
    char *ret = __acpi_map_table(phys_addr, size);
    POST_WRAPPER_FUNC(phys_addr, size);
    kern_printk("__acpi_map_table returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_find_text
#define APP_WRAPPER_FOR_skb_find_text
#endif
 
#ifndef APP_WRAPPER_FOR_skb_find_text
#define APP_WRAPPER_FOR_skb_find_text
FUNCTION_WRAPPER(skb_find_text, (struct sk_buff *skb, unsigned int from, unsigned int to, struct ts_config *config, struct ts_state *state), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_RECURSIVE(config);
    TRACES_IF_WATCHPOINT(config);
    SCAN_HEAD_FUNC(struct ts_config)(*(TO_UNWATCHED_ADDRESS(config)));
    kern_printk("skb_find_text is invoked.\n");
    PRE_WRAPPER_FUNC(skb, from, to, config, state);
    int ret = skb_find_text(skb, from, to, config, state);
    POST_WRAPPER_FUNC(skb, from, to, config, state);
    kern_printk("skb_find_text returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    TRACES_IF_WATCHPOINT(config);
    SCAN_HEAD_FUNC(struct ts_config)(*(TO_UNWATCHED_ADDRESS(config)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_dev_resource_io
#define APP_WRAPPER_FOR_acpi_dev_resource_io
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_dev_resource_io
#define APP_WRAPPER_FOR_acpi_dev_resource_io
FUNCTION_WRAPPER(acpi_dev_resource_io, (struct acpi_resource *ares, struct resource *res), {
    kern_printk("acpi_dev_resource_io is invoked.\n");
    PRE_WRAPPER_FUNC(ares, res);
    bool ret = acpi_dev_resource_io(ares, res);
    POST_WRAPPER_FUNC(ares, res);
    kern_printk("acpi_dev_resource_io returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_rcu_batches_completed_bh
#define APP_WRAPPER_FOR_rcu_batches_completed_bh
#endif
 
#ifndef APP_WRAPPER_FOR_rcu_batches_completed_bh
#define APP_WRAPPER_FOR_rcu_batches_completed_bh
FUNCTION_WRAPPER(rcu_batches_completed_bh, (), {
    kern_printk("rcu_batches_completed_bh is invoked.\n");
    PRE_WRAPPER_FUNC();
    long ret = rcu_batches_completed_bh();
    POST_WRAPPER_FUNC();
    kern_printk("rcu_batches_completed_bh returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_setup_IO_APIC
#define APP_WRAPPER_FOR_setup_IO_APIC
#endif
 
#ifndef APP_WRAPPER_FOR_setup_IO_APIC
#define APP_WRAPPER_FOR_setup_IO_APIC
FUNCTION_WRAPPER_VOID(setup_IO_APIC, (), {
    kern_printk("setup_IO_APIC is invoked.\n");
    PRE_WRAPPER_FUNC();
    setup_IO_APIC();
    POST_WRAPPER_FUNC();
    kern_printk("setup_IO_APIC returned.\n");
})
#endif


#ifndef KERN_ADDR_elv_merge
#define APP_WRAPPER_FOR_elv_merge
#endif
 
#ifndef APP_WRAPPER_FOR_elv_merge
#define APP_WRAPPER_FOR_elv_merge
FUNCTION_WRAPPER(elv_merge, (struct request_queue *_arg1, struct request **_arg2, struct bio *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request *)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("elv_merge is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = elv_merge(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("elv_merge returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request *)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_getxattr_alloc
#define APP_WRAPPER_FOR_vfs_getxattr_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_getxattr_alloc
#define APP_WRAPPER_FOR_vfs_getxattr_alloc
FUNCTION_WRAPPER(vfs_getxattr_alloc, (struct dentry *dentry, const char *name, char **xattr_value, size_t size, gfp_t flags), {
    WRAP_RECURSIVE(dentry);
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    kern_printk("vfs_getxattr_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(dentry, name, xattr_value, size, flags);
    ssize_t ret = vfs_getxattr_alloc(dentry, name, xattr_value, size, flags);
    POST_WRAPPER_FUNC(dentry, name, xattr_value, size, flags);
    kern_printk("vfs_getxattr_alloc returned.\n");
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    return ret;
})
#endif


#ifndef KERN_ADDR_input_unregister_handler
#define APP_WRAPPER_FOR_input_unregister_handler
#endif
 
#ifndef APP_WRAPPER_FOR_input_unregister_handler
#define APP_WRAPPER_FOR_input_unregister_handler
FUNCTION_WRAPPER_VOID(input_unregister_handler, (struct input_handler *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct input_handler)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("input_unregister_handler is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    input_unregister_handler(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("input_unregister_handler returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct input_handler)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_kernel_sendpage
#define APP_WRAPPER_FOR_kernel_sendpage
#endif
 
#ifndef APP_WRAPPER_FOR_kernel_sendpage
#define APP_WRAPPER_FOR_kernel_sendpage
FUNCTION_WRAPPER(kernel_sendpage, (struct socket *sock, struct page *page, int offset, size_t size, int flags), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("kernel_sendpage is invoked.\n");
    PRE_WRAPPER_FUNC(sock, page, offset, size, flags);
    int ret = kernel_sendpage(sock, page, offset, size, flags);
    POST_WRAPPER_FUNC(sock, page, offset, size, flags);
    kern_printk("kernel_sendpage returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_next_uevent_seq
#define APP_WRAPPER_FOR_dm_next_uevent_seq
#endif
 
#ifndef APP_WRAPPER_FOR_dm_next_uevent_seq
#define APP_WRAPPER_FOR_dm_next_uevent_seq
FUNCTION_WRAPPER(dm_next_uevent_seq, (struct mapped_device *md), {
    kern_printk("dm_next_uevent_seq is invoked.\n");
    PRE_WRAPPER_FUNC(md);
    uint32_t ret = dm_next_uevent_seq(md);
    POST_WRAPPER_FUNC(md);
    kern_printk("dm_next_uevent_seq returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_elv_abort_queue
#define APP_WRAPPER_FOR_elv_abort_queue
#endif
 
#ifndef APP_WRAPPER_FOR_elv_abort_queue
#define APP_WRAPPER_FOR_elv_abort_queue
FUNCTION_WRAPPER_VOID(elv_abort_queue, (struct request_queue *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("elv_abort_queue is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    elv_abort_queue(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("elv_abort_queue returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_filemap_fdatawait
#define APP_WRAPPER_FOR_filemap_fdatawait
#endif
 
#ifndef APP_WRAPPER_FOR_filemap_fdatawait
#define APP_WRAPPER_FOR_filemap_fdatawait
FUNCTION_WRAPPER(filemap_fdatawait, (struct address_space *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("filemap_fdatawait is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = filemap_fdatawait(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("filemap_fdatawait returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dump_page
#define APP_WRAPPER_FOR_dump_page
#endif
 
#ifndef APP_WRAPPER_FOR_dump_page
#define APP_WRAPPER_FOR_dump_page
FUNCTION_WRAPPER_VOID(dump_page, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("dump_page is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    dump_page(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("dump_page returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_pcibios_bus_to_resource
#define APP_WRAPPER_FOR_pcibios_bus_to_resource
#endif
 
#ifndef APP_WRAPPER_FOR_pcibios_bus_to_resource
#define APP_WRAPPER_FOR_pcibios_bus_to_resource
FUNCTION_WRAPPER_VOID(pcibios_bus_to_resource, (struct pci_dev *dev, struct resource *res, struct pci_bus_region *region), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pcibios_bus_to_resource is invoked.\n");
    PRE_WRAPPER_FUNC(dev, res, region);
    pcibios_bus_to_resource(dev, res, region);
    POST_WRAPPER_FUNC(dev, res, region);
    kern_printk("pcibios_bus_to_resource returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_native_read_tsc
#define APP_WRAPPER_FOR_native_read_tsc
#endif
 
#ifndef APP_WRAPPER_FOR_native_read_tsc
#define APP_WRAPPER_FOR_native_read_tsc
FUNCTION_WRAPPER(native_read_tsc, (), {
    kern_printk("native_read_tsc is invoked.\n");
    PRE_WRAPPER_FUNC();
    long long ret = native_read_tsc();
    POST_WRAPPER_FUNC();
    kern_printk("native_read_tsc returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_scan_slot
#define APP_WRAPPER_FOR_pci_scan_slot
#endif
 
#ifndef APP_WRAPPER_FOR_pci_scan_slot
#define APP_WRAPPER_FOR_pci_scan_slot
FUNCTION_WRAPPER(pci_scan_slot, (struct pci_bus *bus, int devfn), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_scan_slot is invoked.\n");
    PRE_WRAPPER_FUNC(bus, devfn);
    int ret = pci_scan_slot(bus, devfn);
    POST_WRAPPER_FUNC(bus, devfn);
    kern_printk("pci_scan_slot returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_newlstat
#define APP_WRAPPER_FOR_compat_sys_newlstat
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_newlstat
#define APP_WRAPPER_FOR_compat_sys_newlstat
FUNCTION_WRAPPER(compat_sys_newlstat, (const char *filename, struct compat_stat *statbuf), {
    kern_printk("compat_sys_newlstat is invoked.\n");
    PRE_WRAPPER_FUNC(filename, statbuf);
    long ret = compat_sys_newlstat(filename, statbuf);
    POST_WRAPPER_FUNC(filename, statbuf);
    kern_printk("compat_sys_newlstat returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_csk_route_req
#define APP_WRAPPER_FOR_inet_csk_route_req
#endif
 
#ifndef APP_WRAPPER_FOR_inet_csk_route_req
#define APP_WRAPPER_FOR_inet_csk_route_req
FUNCTION_WRAPPER(inet_csk_route_req, (struct sock *sk, struct flowi4 *fl4, const struct request_sock *req), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(req);
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(const struct request_sock)(*(TO_UNWATCHED_ADDRESS(req)));
    kern_printk("inet_csk_route_req is invoked.\n");
    PRE_WRAPPER_FUNC(sk, fl4, req);
    struct dst_entry *ret = inet_csk_route_req(sk, fl4, req);
    POST_WRAPPER_FUNC(sk, fl4, req);
    kern_printk("inet_csk_route_req returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(const struct request_sock)(*(TO_UNWATCHED_ADDRESS(req)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_native_calibrate_tsc
#define APP_WRAPPER_FOR_native_calibrate_tsc
#endif
 
#ifndef APP_WRAPPER_FOR_native_calibrate_tsc
#define APP_WRAPPER_FOR_native_calibrate_tsc
FUNCTION_WRAPPER(native_calibrate_tsc, (), {
    kern_printk("native_calibrate_tsc is invoked.\n");
    PRE_WRAPPER_FUNC();
    long ret = native_calibrate_tsc();
    POST_WRAPPER_FUNC();
    kern_printk("native_calibrate_tsc returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___bforget
#define APP_WRAPPER_FOR___bforget
#endif
 
#ifndef APP_WRAPPER_FOR___bforget
#define APP_WRAPPER_FOR___bforget
FUNCTION_WRAPPER_VOID(__bforget, (struct buffer_head *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__bforget is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    __bforget(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__bforget returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_memblock_find_dma_reserve
#define APP_WRAPPER_FOR_memblock_find_dma_reserve
#endif
 
#ifndef APP_WRAPPER_FOR_memblock_find_dma_reserve
#define APP_WRAPPER_FOR_memblock_find_dma_reserve
FUNCTION_WRAPPER_VOID(memblock_find_dma_reserve, (), {
    kern_printk("memblock_find_dma_reserve is invoked.\n");
    PRE_WRAPPER_FUNC();
    memblock_find_dma_reserve();
    POST_WRAPPER_FUNC();
    kern_printk("memblock_find_dma_reserve returned.\n");
})
#endif


#ifndef KERN_ADDR_sock_kmalloc
#define APP_WRAPPER_FOR_sock_kmalloc
#endif
 
#ifndef APP_WRAPPER_FOR_sock_kmalloc
#define APP_WRAPPER_FOR_sock_kmalloc
FUNCTION_WRAPPER(sock_kmalloc, (struct sock *sk, int size, gfp_t priority), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sock_kmalloc is invoked.\n");
    PRE_WRAPPER_FUNC(sk, size, priority);
    void *ret = sock_kmalloc(sk, size, priority);
    POST_WRAPPER_FUNC(sk, size, priority);
    kern_printk("sock_kmalloc returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_synchronize_srcu
#define APP_WRAPPER_FOR_synchronize_srcu
#endif
 
#ifndef APP_WRAPPER_FOR_synchronize_srcu
#define APP_WRAPPER_FOR_synchronize_srcu
FUNCTION_WRAPPER_VOID(synchronize_srcu, (struct srcu_struct *sp), {
    WRAP_RECURSIVE(sp);
    TRACES_IF_WATCHPOINT(sp);
    SCAN_HEAD_FUNC(struct srcu_struct)(*(TO_UNWATCHED_ADDRESS(sp)));
    kern_printk("synchronize_srcu is invoked.\n");
    PRE_WRAPPER_FUNC(sp);
    synchronize_srcu(sp);
    POST_WRAPPER_FUNC(sp);
    kern_printk("synchronize_srcu returned.\n");
    TRACES_IF_WATCHPOINT(sp);
    SCAN_HEAD_FUNC(struct srcu_struct)(*(TO_UNWATCHED_ADDRESS(sp)));
})
#endif


#ifndef KERN_ADDR_ata_xfer_mask2mode
#define APP_WRAPPER_FOR_ata_xfer_mask2mode
#endif
 
#ifndef APP_WRAPPER_FOR_ata_xfer_mask2mode
#define APP_WRAPPER_FOR_ata_xfer_mask2mode
FUNCTION_WRAPPER(ata_xfer_mask2mode, (unsigned long xfer_mask), {
    kern_printk("ata_xfer_mask2mode is invoked.\n");
    PRE_WRAPPER_FUNC(xfer_mask);
    u8 ret = ata_xfer_mask2mode(xfer_mask);
    POST_WRAPPER_FUNC(xfer_mask);
    kern_printk("ata_xfer_mask2mode returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_clear_gpe
#define APP_WRAPPER_FOR_acpi_clear_gpe
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_clear_gpe
#define APP_WRAPPER_FOR_acpi_clear_gpe
FUNCTION_WRAPPER(acpi_clear_gpe, (acpi_handle gpe_device, u32 gpe_number), {
    kern_printk("acpi_clear_gpe is invoked.\n");
    PRE_WRAPPER_FUNC(gpe_device, gpe_number);
    acpi_status ret = acpi_clear_gpe(gpe_device, gpe_number);
    POST_WRAPPER_FUNC(gpe_device, gpe_number);
    kern_printk("acpi_clear_gpe returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sched_init_smp
#define APP_WRAPPER_FOR_sched_init_smp
#endif
 
#ifndef APP_WRAPPER_FOR_sched_init_smp
#define APP_WRAPPER_FOR_sched_init_smp
FUNCTION_WRAPPER_VOID(sched_init_smp, (), {
    kern_printk("sched_init_smp is invoked.\n");
    PRE_WRAPPER_FUNC();
    sched_init_smp();
    POST_WRAPPER_FUNC();
    kern_printk("sched_init_smp returned.\n");
})
#endif


#ifndef KERN_ADDR_generic_setlease
#define APP_WRAPPER_FOR_generic_setlease
#endif
 
#ifndef APP_WRAPPER_FOR_generic_setlease
#define APP_WRAPPER_FOR_generic_setlease
FUNCTION_WRAPPER(generic_setlease, (struct file *_arg1, long _arg2, struct file_lock **_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct file_lock *)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("generic_setlease is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = generic_setlease(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("generic_setlease returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct file_lock *)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_eth_mac_addr
#define APP_WRAPPER_FOR_eth_mac_addr
#endif
 
#ifndef APP_WRAPPER_FOR_eth_mac_addr
#define APP_WRAPPER_FOR_eth_mac_addr
FUNCTION_WRAPPER(eth_mac_addr, (struct net_device *dev, void *p), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("eth_mac_addr is invoked.\n");
    PRE_WRAPPER_FUNC(dev, p);
    int ret = eth_mac_addr(dev, p);
    POST_WRAPPER_FUNC(dev, p);
    kern_printk("eth_mac_addr returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_device_create_bin_file
#define APP_WRAPPER_FOR_device_create_bin_file
#endif
 
#ifndef APP_WRAPPER_FOR_device_create_bin_file
#define APP_WRAPPER_FOR_device_create_bin_file
FUNCTION_WRAPPER(device_create_bin_file, (struct device *dev, const struct bin_attribute *attr), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(attr);
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(const struct bin_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    kern_printk("device_create_bin_file is invoked.\n");
    PRE_WRAPPER_FUNC(dev, attr);
    int ret = device_create_bin_file(dev, attr);
    POST_WRAPPER_FUNC(dev, attr);
    kern_printk("device_create_bin_file returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(const struct bin_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_pm_qos_hide_latency_limit
#define APP_WRAPPER_FOR_dev_pm_qos_hide_latency_limit
#endif
 
#ifndef APP_WRAPPER_FOR_dev_pm_qos_hide_latency_limit
#define APP_WRAPPER_FOR_dev_pm_qos_hide_latency_limit
FUNCTION_WRAPPER_VOID(dev_pm_qos_hide_latency_limit, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_pm_qos_hide_latency_limit is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    dev_pm_qos_hide_latency_limit(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_pm_qos_hide_latency_limit returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_compat_sys_set_mempolicy
#define APP_WRAPPER_FOR_compat_sys_set_mempolicy
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_set_mempolicy
#define APP_WRAPPER_FOR_compat_sys_set_mempolicy
FUNCTION_WRAPPER(compat_sys_set_mempolicy, (int mode, compat_ulong_t *nmask, compat_ulong_t maxnode), {
    kern_printk("compat_sys_set_mempolicy is invoked.\n");
    PRE_WRAPPER_FUNC(mode, nmask, maxnode);
    long ret = compat_sys_set_mempolicy(mode, nmask, maxnode);
    POST_WRAPPER_FUNC(mode, nmask, maxnode);
    kern_printk("compat_sys_set_mempolicy returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sched_setscheduler_nocheck
#define APP_WRAPPER_FOR_sched_setscheduler_nocheck
#endif
 
#ifndef APP_WRAPPER_FOR_sched_setscheduler_nocheck
#define APP_WRAPPER_FOR_sched_setscheduler_nocheck
FUNCTION_WRAPPER(sched_setscheduler_nocheck, (struct task_struct *_arg1, int _arg2, const struct sched_param *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("sched_setscheduler_nocheck is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = sched_setscheduler_nocheck(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("sched_setscheduler_nocheck returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_core_sys_select
#define APP_WRAPPER_FOR_core_sys_select
#endif
 
#ifndef APP_WRAPPER_FOR_core_sys_select
#define APP_WRAPPER_FOR_core_sys_select
FUNCTION_WRAPPER(core_sys_select, (int n, fd_set *inp, fd_set *outp, fd_set *exp, struct timespec *end_time), {
    kern_printk("core_sys_select is invoked.\n");
    PRE_WRAPPER_FUNC(n, inp, outp, exp, end_time);
    int ret = core_sys_select(n, inp, outp, exp, end_time);
    POST_WRAPPER_FUNC(n, inp, outp, exp, end_time);
    kern_printk("core_sys_select returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_do_eh
#define APP_WRAPPER_FOR_ata_do_eh
#endif
 
#ifndef APP_WRAPPER_FOR_ata_do_eh
#define APP_WRAPPER_FOR_ata_do_eh
FUNCTION_WRAPPER_VOID(ata_do_eh, (struct ata_port *ap, ata_prereset_fn_t prereset, ata_reset_fn_t softreset, ata_reset_fn_t hardreset, ata_postreset_fn_t postreset), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    WRAP_FUNCTION(prereset);
    WRAP_FUNCTION(softreset);
    WRAP_FUNCTION(hardreset);
    WRAP_FUNCTION(postreset);
    kern_printk("ata_do_eh is invoked.\n");
    PRE_WRAPPER_FUNC(ap, prereset, softreset, hardreset, postreset);
    ata_do_eh(ap, prereset, softreset, hardreset, postreset);
    POST_WRAPPER_FUNC(ap, prereset, softreset, hardreset, postreset);
    kern_printk("ata_do_eh returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_copy_thread
#define APP_WRAPPER_FOR_copy_thread
#endif
 
#ifndef APP_WRAPPER_FOR_copy_thread
#define APP_WRAPPER_FOR_copy_thread
FUNCTION_WRAPPER(copy_thread, (unsigned long _arg1, unsigned long _arg2, unsigned long _arg3, struct task_struct *_arg4), {
    WRAP_RECURSIVE(_arg4);
    TRACES_IF_WATCHPOINT(_arg4);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg4)));
    kern_printk("copy_thread is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = copy_thread(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("copy_thread returned.\n");
    TRACES_IF_WATCHPOINT(_arg4);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg4)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bdi_lock_two
#define APP_WRAPPER_FOR_bdi_lock_two
#endif
 
#ifndef APP_WRAPPER_FOR_bdi_lock_two
#define APP_WRAPPER_FOR_bdi_lock_two
FUNCTION_WRAPPER_VOID(bdi_lock_two, (struct bdi_writeback *wb1, struct bdi_writeback *wb2), {
    WRAP_RECURSIVE(wb1);
    TRACES_IF_WATCHPOINT(wb1);
    SCAN_HEAD_FUNC(struct bdi_writeback)(*(TO_UNWATCHED_ADDRESS(wb1)));
    WRAP_RECURSIVE(wb2);
    TRACES_IF_WATCHPOINT(wb2);
    SCAN_HEAD_FUNC(struct bdi_writeback)(*(TO_UNWATCHED_ADDRESS(wb2)));
    kern_printk("bdi_lock_two is invoked.\n");
    PRE_WRAPPER_FUNC(wb1, wb2);
    bdi_lock_two(wb1, wb2);
    POST_WRAPPER_FUNC(wb1, wb2);
    kern_printk("bdi_lock_two returned.\n");
    TRACES_IF_WATCHPOINT(wb1);
    SCAN_HEAD_FUNC(struct bdi_writeback)(*(TO_UNWATCHED_ADDRESS(wb1)));
    TRACES_IF_WATCHPOINT(wb2);
    SCAN_HEAD_FUNC(struct bdi_writeback)(*(TO_UNWATCHED_ADDRESS(wb2)));
})
#endif


#ifndef KERN_ADDR_set_memory_ro
#define APP_WRAPPER_FOR_set_memory_ro
#endif
 
#ifndef APP_WRAPPER_FOR_set_memory_ro
#define APP_WRAPPER_FOR_set_memory_ro
FUNCTION_WRAPPER(set_memory_ro, (unsigned long addr, int numpages), {
    kern_printk("set_memory_ro is invoked.\n");
    PRE_WRAPPER_FUNC(addr, numpages);
    int ret = set_memory_ro(addr, numpages);
    POST_WRAPPER_FUNC(addr, numpages);
    kern_printk("set_memory_ro returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_early_quirks
#define APP_WRAPPER_FOR_early_quirks
#endif
 
#ifndef APP_WRAPPER_FOR_early_quirks
#define APP_WRAPPER_FOR_early_quirks
FUNCTION_WRAPPER_VOID(early_quirks, (), {
    kern_printk("early_quirks is invoked.\n");
    PRE_WRAPPER_FUNC();
    early_quirks();
    POST_WRAPPER_FUNC();
    kern_printk("early_quirks returned.\n");
})
#endif


#ifndef KERN_ADDR_proc_symlink
#define APP_WRAPPER_FOR_proc_symlink
#endif
 
#ifndef APP_WRAPPER_FOR_proc_symlink
#define APP_WRAPPER_FOR_proc_symlink
FUNCTION_WRAPPER(proc_symlink, (const char *_arg1, struct proc_dir_entry *_arg2, const char *_arg3), {
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct proc_dir_entry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("proc_symlink is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    struct proc_dir_entry *ret = proc_symlink(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("proc_symlink returned.\n");
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct proc_dir_entry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_queue_work
#define APP_WRAPPER_FOR_queue_work
#endif
 
#ifndef APP_WRAPPER_FOR_queue_work
#define APP_WRAPPER_FOR_queue_work
FUNCTION_WRAPPER(queue_work, (struct workqueue_struct *wq, struct work_struct *work), {
    WRAP_RECURSIVE(work);
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
    kern_printk("queue_work is invoked.\n");
    PRE_WRAPPER_FUNC(wq, work);
    bool ret = queue_work(wq, work);
    POST_WRAPPER_FUNC(wq, work);
    kern_printk("queue_work returned.\n");
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sysfs_remove_link
#define APP_WRAPPER_FOR_sysfs_remove_link
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_remove_link
#define APP_WRAPPER_FOR_sysfs_remove_link
FUNCTION_WRAPPER_VOID(sysfs_remove_link, (struct kobject *kobj, const char *name), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    kern_printk("sysfs_remove_link is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, name);
    sysfs_remove_link(kobj, name);
    POST_WRAPPER_FUNC(kobj, name);
    kern_printk("sysfs_remove_link returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
})
#endif


#ifndef KERN_ADDR_normalize_rt_tasks
#define APP_WRAPPER_FOR_normalize_rt_tasks
#endif
 
#ifndef APP_WRAPPER_FOR_normalize_rt_tasks
#define APP_WRAPPER_FOR_normalize_rt_tasks
FUNCTION_WRAPPER_VOID(normalize_rt_tasks, (), {
    kern_printk("normalize_rt_tasks is invoked.\n");
    PRE_WRAPPER_FUNC();
    normalize_rt_tasks();
    POST_WRAPPER_FUNC();
    kern_printk("normalize_rt_tasks returned.\n");
})
#endif


#ifndef KERN_ADDR_swap_type_of
#define APP_WRAPPER_FOR_swap_type_of
#endif
 
#ifndef APP_WRAPPER_FOR_swap_type_of
#define APP_WRAPPER_FOR_swap_type_of
FUNCTION_WRAPPER(swap_type_of, (dev_t _arg1, sector_t _arg2, struct block_device **_arg3), {
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct block_device *)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("swap_type_of is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = swap_type_of(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("swap_type_of returned.\n");
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct block_device *)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_thread_group_cputime_adjusted
#define APP_WRAPPER_FOR_thread_group_cputime_adjusted
#endif
 
#ifndef APP_WRAPPER_FOR_thread_group_cputime_adjusted
#define APP_WRAPPER_FOR_thread_group_cputime_adjusted
FUNCTION_WRAPPER_VOID(thread_group_cputime_adjusted, (struct task_struct *p, cputime_t *ut, cputime_t *st), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("thread_group_cputime_adjusted is invoked.\n");
    PRE_WRAPPER_FUNC(p, ut, st);
    thread_group_cputime_adjusted(p, ut, st);
    POST_WRAPPER_FUNC(p, ut, st);
    kern_printk("thread_group_cputime_adjusted returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
})
#endif


#ifndef KERN_ADDR_current_user_ns
#define APP_WRAPPER_FOR_current_user_ns
#endif
 
#ifndef APP_WRAPPER_FOR_current_user_ns
#define APP_WRAPPER_FOR_current_user_ns
FUNCTION_WRAPPER(current_user_ns, (), {
    kern_printk("current_user_ns is invoked.\n");
    PRE_WRAPPER_FUNC();
    struct user_namespace *ret = current_user_ns();
    POST_WRAPPER_FUNC();
    kern_printk("current_user_ns returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dst_destroy
#define APP_WRAPPER_FOR_dst_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_dst_destroy
#define APP_WRAPPER_FOR_dst_destroy
FUNCTION_WRAPPER(dst_destroy, (struct dst_entry *dst), {
    WRAP_RECURSIVE(dst);
    TRACES_IF_WATCHPOINT(dst);
    SCAN_HEAD_FUNC(struct dst_entry)(*(TO_UNWATCHED_ADDRESS(dst)));
    kern_printk("dst_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(dst);
    struct dst_entry *ret = dst_destroy(dst);
    POST_WRAPPER_FUNC(dst);
    kern_printk("dst_destroy returned.\n");
    TRACES_IF_WATCHPOINT(dst);
    SCAN_HEAD_FUNC(struct dst_entry)(*(TO_UNWATCHED_ADDRESS(dst)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_default_cpu_mask_to_apicid_and
#define APP_WRAPPER_FOR_default_cpu_mask_to_apicid_and
#endif
 
#ifndef APP_WRAPPER_FOR_default_cpu_mask_to_apicid_and
#define APP_WRAPPER_FOR_default_cpu_mask_to_apicid_and
FUNCTION_WRAPPER(default_cpu_mask_to_apicid_and, (const struct cpumask *cpumask, const struct cpumask *andmask, unsigned int *apicid), {
    kern_printk("default_cpu_mask_to_apicid_and is invoked.\n");
    PRE_WRAPPER_FUNC(cpumask, andmask, apicid);
    int ret = default_cpu_mask_to_apicid_and(cpumask, andmask, apicid);
    POST_WRAPPER_FUNC(cpumask, andmask, apicid);
    kern_printk("default_cpu_mask_to_apicid_and returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_queue_max_segment_size
#define APP_WRAPPER_FOR_blk_queue_max_segment_size
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_max_segment_size
#define APP_WRAPPER_FOR_blk_queue_max_segment_size
FUNCTION_WRAPPER_VOID(blk_queue_max_segment_size, (struct request_queue *_arg1, unsigned int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_queue_max_segment_size is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    blk_queue_max_segment_size(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_queue_max_segment_size returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR___fprop_inc_percpu_max
#define APP_WRAPPER_FOR___fprop_inc_percpu_max
#endif
 
#ifndef APP_WRAPPER_FOR___fprop_inc_percpu_max
#define APP_WRAPPER_FOR___fprop_inc_percpu_max
FUNCTION_WRAPPER_VOID(__fprop_inc_percpu_max, (struct fprop_global *p, struct fprop_local_percpu *pl, int max_frac), {
    kern_printk("__fprop_inc_percpu_max is invoked.\n");
    PRE_WRAPPER_FUNC(p, pl, max_frac);
    __fprop_inc_percpu_max(p, pl, max_frac);
    POST_WRAPPER_FUNC(p, pl, max_frac);
    kern_printk("__fprop_inc_percpu_max returned.\n");
})
#endif


#ifndef KERN_ADDR_io_schedule_timeout
#define APP_WRAPPER_FOR_io_schedule_timeout
#endif
 
#ifndef APP_WRAPPER_FOR_io_schedule_timeout
#define APP_WRAPPER_FOR_io_schedule_timeout
FUNCTION_WRAPPER(io_schedule_timeout, (long timeout), {
    kern_printk("io_schedule_timeout is invoked.\n");
    PRE_WRAPPER_FUNC(timeout);
    long ret = io_schedule_timeout(timeout);
    POST_WRAPPER_FUNC(timeout);
    kern_printk("io_schedule_timeout returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_net_enable_timestamp
#define APP_WRAPPER_FOR_net_enable_timestamp
#endif
 
#ifndef APP_WRAPPER_FOR_net_enable_timestamp
#define APP_WRAPPER_FOR_net_enable_timestamp
FUNCTION_WRAPPER_VOID(net_enable_timestamp, (), {
    kern_printk("net_enable_timestamp is invoked.\n");
    PRE_WRAPPER_FUNC();
    net_enable_timestamp();
    POST_WRAPPER_FUNC();
    kern_printk("net_enable_timestamp returned.\n");
})
#endif


#ifndef KERN_ADDR_pgtable_trans_huge_deposit
#define APP_WRAPPER_FOR_pgtable_trans_huge_deposit
#endif
 
#ifndef APP_WRAPPER_FOR_pgtable_trans_huge_deposit
#define APP_WRAPPER_FOR_pgtable_trans_huge_deposit
FUNCTION_WRAPPER_VOID(pgtable_trans_huge_deposit, (struct mm_struct *mm, pgtable_t pgtable), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    WRAP_RECURSIVE(pgtable);
    TRACES_IF_WATCHPOINT(pgtable);
//    SCAN_HEAD_FUNC(pgtable_t)(*(TO_UNWATCHED_ADDRESS(pgtable)));
    kern_printk("pgtable_trans_huge_deposit is invoked.\n");
    PRE_WRAPPER_FUNC(mm, pgtable);
    pgtable_trans_huge_deposit(mm, pgtable);
    POST_WRAPPER_FUNC(mm, pgtable);
    kern_printk("pgtable_trans_huge_deposit returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    TRACES_IF_WATCHPOINT(pgtable);
  //  SCAN_HEAD_FUNC(pgtable_t)(*(TO_UNWATCHED_ADDRESS(pgtable)));
})
#endif


#ifndef KERN_ADDR_end_buffer_read_sync
#define APP_WRAPPER_FOR_end_buffer_read_sync
#endif
 
#ifndef APP_WRAPPER_FOR_end_buffer_read_sync
#define APP_WRAPPER_FOR_end_buffer_read_sync
FUNCTION_WRAPPER_VOID(end_buffer_read_sync, (struct buffer_head *bh, int uptodate), {
    WRAP_RECURSIVE(bh);
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    kern_printk("end_buffer_read_sync is invoked.\n");
    PRE_WRAPPER_FUNC(bh, uptodate);
    end_buffer_read_sync(bh, uptodate);
    POST_WRAPPER_FUNC(bh, uptodate);
    kern_printk("end_buffer_read_sync returned.\n");
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
})
#endif


#ifndef KERN_ADDR_dquot_get_dqinfo
#define APP_WRAPPER_FOR_dquot_get_dqinfo
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_get_dqinfo
#define APP_WRAPPER_FOR_dquot_get_dqinfo
FUNCTION_WRAPPER(dquot_get_dqinfo, (struct super_block *sb, int type, struct if_dqinfo *ii), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("dquot_get_dqinfo is invoked.\n");
    PRE_WRAPPER_FUNC(sb, type, ii);
    int ret = dquot_get_dqinfo(sb, type, ii);
    POST_WRAPPER_FUNC(sb, type, ii);
    kern_printk("dquot_get_dqinfo returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sff_busy_sleep
#define APP_WRAPPER_FOR_ata_sff_busy_sleep
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_busy_sleep
#define APP_WRAPPER_FOR_ata_sff_busy_sleep
FUNCTION_WRAPPER(ata_sff_busy_sleep, (struct ata_port *ap, unsigned long timeout_pat, unsigned long timeout), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_sff_busy_sleep is invoked.\n");
    PRE_WRAPPER_FUNC(ap, timeout_pat, timeout);
    int ret = ata_sff_busy_sleep(ap, timeout_pat, timeout);
    POST_WRAPPER_FUNC(ap, timeout_pat, timeout);
    kern_printk("ata_sff_busy_sleep returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_choose_state
#define APP_WRAPPER_FOR_pci_choose_state
#endif
 
#ifndef APP_WRAPPER_FOR_pci_choose_state
#define APP_WRAPPER_FOR_pci_choose_state
FUNCTION_WRAPPER(pci_choose_state, (struct pci_dev *dev, pm_message_t state), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_choose_state is invoked.\n");
    PRE_WRAPPER_FUNC(dev, state);
    pci_power_t ret = pci_choose_state(dev, state);
    POST_WRAPPER_FUNC(dev, state);
    kern_printk("pci_choose_state returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR___sk_mem_reclaim
#define APP_WRAPPER_FOR___sk_mem_reclaim
#endif
 
#ifndef APP_WRAPPER_FOR___sk_mem_reclaim
#define APP_WRAPPER_FOR___sk_mem_reclaim
FUNCTION_WRAPPER_VOID(__sk_mem_reclaim, (struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("__sk_mem_reclaim is invoked.\n");
    PRE_WRAPPER_FUNC(sk);
    __sk_mem_reclaim(sk);
    POST_WRAPPER_FUNC(sk);
    kern_printk("__sk_mem_reclaim returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR___bitmap_empty
#define APP_WRAPPER_FOR___bitmap_empty
#endif
 
#ifndef APP_WRAPPER_FOR___bitmap_empty
#define APP_WRAPPER_FOR___bitmap_empty
FUNCTION_WRAPPER(__bitmap_empty, (unsigned const long *bitmap, int bits), {
    kern_printk("__bitmap_empty is invoked.\n");
    PRE_WRAPPER_FUNC(bitmap, bits);
    int ret = __bitmap_empty(bitmap, bits);
    POST_WRAPPER_FUNC(bitmap, bits);
    kern_printk("__bitmap_empty returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___pci_reset_function_locked
#define APP_WRAPPER_FOR___pci_reset_function_locked
#endif
 
#ifndef APP_WRAPPER_FOR___pci_reset_function_locked
#define APP_WRAPPER_FOR___pci_reset_function_locked
FUNCTION_WRAPPER(__pci_reset_function_locked, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("__pci_reset_function_locked is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = __pci_reset_function_locked(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("__pci_reset_function_locked returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_save_ioapic_entries
#define APP_WRAPPER_FOR_save_ioapic_entries
#endif
 
#ifndef APP_WRAPPER_FOR_save_ioapic_entries
#define APP_WRAPPER_FOR_save_ioapic_entries
FUNCTION_WRAPPER(save_ioapic_entries, (), {
    kern_printk("save_ioapic_entries is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = save_ioapic_entries();
    POST_WRAPPER_FUNC();
    kern_printk("save_ioapic_entries returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_copy_net_ns
#define APP_WRAPPER_FOR_copy_net_ns
#endif
 
#ifndef APP_WRAPPER_FOR_copy_net_ns
#define APP_WRAPPER_FOR_copy_net_ns
FUNCTION_WRAPPER(copy_net_ns, (unsigned long flags, struct user_namespace *user_ns, struct net *old_net), {
    WRAP_RECURSIVE(old_net);
    TRACES_IF_WATCHPOINT(old_net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(old_net)));
    kern_printk("copy_net_ns is invoked.\n");
    PRE_WRAPPER_FUNC(flags, user_ns, old_net);
    struct net *ret = copy_net_ns(flags, user_ns, old_net);
    POST_WRAPPER_FUNC(flags, user_ns, old_net);
    kern_printk("copy_net_ns returned.\n");
    TRACES_IF_WATCHPOINT(old_net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(old_net)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_verify_iovec
#define APP_WRAPPER_FOR_verify_iovec
#endif
 
#ifndef APP_WRAPPER_FOR_verify_iovec
#define APP_WRAPPER_FOR_verify_iovec
FUNCTION_WRAPPER(verify_iovec, (struct msghdr *m, struct iovec *iov, struct __kernel_sockaddr_storage *address, int mode), {
    kern_printk("verify_iovec is invoked.\n");
    PRE_WRAPPER_FUNC(m, iov, address, mode);
    int ret = verify_iovec(m, iov, address, mode);
    POST_WRAPPER_FUNC(m, iov, address, mode);
    kern_printk("verify_iovec returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_proc_sched_autogroup_show_task
#define APP_WRAPPER_FOR_proc_sched_autogroup_show_task
#endif
 
#ifndef APP_WRAPPER_FOR_proc_sched_autogroup_show_task
#define APP_WRAPPER_FOR_proc_sched_autogroup_show_task
FUNCTION_WRAPPER_VOID(proc_sched_autogroup_show_task, (struct task_struct *p, struct seq_file *m), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    WRAP_RECURSIVE(m);
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
    kern_printk("proc_sched_autogroup_show_task is invoked.\n");
    PRE_WRAPPER_FUNC(p, m);
    proc_sched_autogroup_show_task(p, m);
    POST_WRAPPER_FUNC(p, m);
    kern_printk("proc_sched_autogroup_show_task returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
})
#endif


#ifndef KERN_ADDR_sock_kfree_s
#define APP_WRAPPER_FOR_sock_kfree_s
#endif
 
#ifndef APP_WRAPPER_FOR_sock_kfree_s
#define APP_WRAPPER_FOR_sock_kfree_s
FUNCTION_WRAPPER_VOID(sock_kfree_s, (struct sock *sk, void *mem, int size), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sock_kfree_s is invoked.\n");
    PRE_WRAPPER_FUNC(sk, mem, size);
    sock_kfree_s(sk, mem, size);
    POST_WRAPPER_FUNC(sk, mem, size);
    kern_printk("sock_kfree_s returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR___usermodehelper_set_disable_depth
#define APP_WRAPPER_FOR___usermodehelper_set_disable_depth
#endif
 
#ifndef APP_WRAPPER_FOR___usermodehelper_set_disable_depth
#define APP_WRAPPER_FOR___usermodehelper_set_disable_depth
FUNCTION_WRAPPER_VOID(__usermodehelper_set_disable_depth, (enum umh_disable_depth depth), {
    kern_printk("__usermodehelper_set_disable_depth is invoked.\n");
    PRE_WRAPPER_FUNC(depth);
    __usermodehelper_set_disable_depth(depth);
    POST_WRAPPER_FUNC(depth);
    kern_printk("__usermodehelper_set_disable_depth returned.\n");
})
#endif


#ifndef KERN_ADDR_task_curr
#define APP_WRAPPER_FOR_task_curr
#endif
 
#ifndef APP_WRAPPER_FOR_task_curr
#define APP_WRAPPER_FOR_task_curr
FUNCTION_WRAPPER(task_curr, (const struct task_struct *p), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(const struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("task_curr is invoked.\n");
    PRE_WRAPPER_FUNC(p);
    int ret = task_curr(p);
    POST_WRAPPER_FUNC(p);
    kern_printk("task_curr returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(const struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    return ret;
})
#endif


#ifndef KERN_ADDR_release_thread
#define APP_WRAPPER_FOR_release_thread
#endif
 
#ifndef APP_WRAPPER_FOR_release_thread
#define APP_WRAPPER_FOR_release_thread
FUNCTION_WRAPPER_VOID(release_thread, (struct task_struct *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("release_thread is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    release_thread(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("release_thread returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_seq_put_decimal_ll
#define APP_WRAPPER_FOR_seq_put_decimal_ll
#endif
 
#ifndef APP_WRAPPER_FOR_seq_put_decimal_ll
#define APP_WRAPPER_FOR_seq_put_decimal_ll
FUNCTION_WRAPPER(seq_put_decimal_ll, (struct seq_file *m, char delimiter, long long num), {
    WRAP_RECURSIVE(m);
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
    kern_printk("seq_put_decimal_ll is invoked.\n");
    PRE_WRAPPER_FUNC(m, delimiter, num);
    int ret = seq_put_decimal_ll(m, delimiter, num);
    POST_WRAPPER_FUNC(m, delimiter, num);
    kern_printk("seq_put_decimal_ll returned.\n");
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bio_unmap_user
#define APP_WRAPPER_FOR_bio_unmap_user
#endif
 
#ifndef APP_WRAPPER_FOR_bio_unmap_user
#define APP_WRAPPER_FOR_bio_unmap_user
FUNCTION_WRAPPER_VOID(bio_unmap_user, (struct bio *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bio_unmap_user is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    bio_unmap_user(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("bio_unmap_user returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_acpi_dev_resource_address_space
#define APP_WRAPPER_FOR_acpi_dev_resource_address_space
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_dev_resource_address_space
#define APP_WRAPPER_FOR_acpi_dev_resource_address_space
FUNCTION_WRAPPER(acpi_dev_resource_address_space, (struct acpi_resource *ares, struct resource *res), {
    kern_printk("acpi_dev_resource_address_space is invoked.\n");
    PRE_WRAPPER_FUNC(ares, res);
    bool ret = acpi_dev_resource_address_space(ares, res);
    POST_WRAPPER_FUNC(ares, res);
    kern_printk("acpi_dev_resource_address_space returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_input_set_keycode
#define APP_WRAPPER_FOR_input_set_keycode
#endif
 
#ifndef APP_WRAPPER_FOR_input_set_keycode
#define APP_WRAPPER_FOR_input_set_keycode
FUNCTION_WRAPPER(input_set_keycode, (struct input_dev *dev, const struct input_keymap_entry *ke), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("input_set_keycode is invoked.\n");
    PRE_WRAPPER_FUNC(dev, ke);
    int ret = input_set_keycode(dev, ke);
    POST_WRAPPER_FUNC(dev, ke);
    kern_printk("input_set_keycode returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_param_get_int
#define APP_WRAPPER_FOR_param_get_int
#endif
 
#ifndef APP_WRAPPER_FOR_param_get_int
#define APP_WRAPPER_FOR_param_get_int
FUNCTION_WRAPPER(param_get_int, (char *buffer, const struct kernel_param *kp), {
    WRAP_RECURSIVE(kp);
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    kern_printk("param_get_int is invoked.\n");
    PRE_WRAPPER_FUNC(buffer, kp);
    int ret = param_get_int(buffer, kp);
    POST_WRAPPER_FUNC(buffer, kp);
    kern_printk("param_get_int returned.\n");
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_adjust_resource
#define APP_WRAPPER_FOR_adjust_resource
#endif
 
#ifndef APP_WRAPPER_FOR_adjust_resource
#define APP_WRAPPER_FOR_adjust_resource
FUNCTION_WRAPPER(adjust_resource, (struct resource *res, resource_size_t start, resource_size_t size), {
    kern_printk("adjust_resource is invoked.\n");
    PRE_WRAPPER_FUNC(res, start, size);
    int ret = adjust_resource(res, start, size);
    POST_WRAPPER_FUNC(res, start, size);
    kern_printk("adjust_resource returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_show_class_attr_string
#define APP_WRAPPER_FOR_show_class_attr_string
#endif
 
#ifndef APP_WRAPPER_FOR_show_class_attr_string
#define APP_WRAPPER_FOR_show_class_attr_string
FUNCTION_WRAPPER(show_class_attr_string, (struct class_ *class_, struct class_attribute *attr, char *buf), {
    WRAP_RECURSIVE(class_);
    TRACES_IF_WATCHPOINT(class_);
    SCAN_HEAD_FUNC(struct class_)(*(TO_UNWATCHED_ADDRESS(class_)));
    WRAP_RECURSIVE(attr);
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(struct class_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    kern_printk("show_class_attr_string is invoked.\n");
    PRE_WRAPPER_FUNC(class_, attr, buf);
    ssize_t ret = show_class_attr_string(class_, attr, buf);
    POST_WRAPPER_FUNC(class_, attr, buf);
    kern_printk("show_class_attr_string returned.\n");
    TRACES_IF_WATCHPOINT(class_);
    SCAN_HEAD_FUNC(struct class_)(*(TO_UNWATCHED_ADDRESS(class_)));
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(struct class_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ntp_init
#define APP_WRAPPER_FOR_ntp_init
#endif
 
#ifndef APP_WRAPPER_FOR_ntp_init
#define APP_WRAPPER_FOR_ntp_init
FUNCTION_WRAPPER_VOID(ntp_init, (), {
    kern_printk("ntp_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    ntp_init();
    POST_WRAPPER_FUNC();
    kern_printk("ntp_init returned.\n");
})
#endif


#ifndef KERN_ADDR_net_disable_timestamp
#define APP_WRAPPER_FOR_net_disable_timestamp
#endif
 
#ifndef APP_WRAPPER_FOR_net_disable_timestamp
#define APP_WRAPPER_FOR_net_disable_timestamp
FUNCTION_WRAPPER_VOID(net_disable_timestamp, (), {
    kern_printk("net_disable_timestamp is invoked.\n");
    PRE_WRAPPER_FUNC();
    net_disable_timestamp();
    POST_WRAPPER_FUNC();
    kern_printk("net_disable_timestamp returned.\n");
})
#endif


#ifndef KERN_ADDR_ata_acpi_gtm_xfermask
#define APP_WRAPPER_FOR_ata_acpi_gtm_xfermask
#endif
 
#ifndef APP_WRAPPER_FOR_ata_acpi_gtm_xfermask
#define APP_WRAPPER_FOR_ata_acpi_gtm_xfermask
FUNCTION_WRAPPER(ata_acpi_gtm_xfermask, (struct ata_device *dev, const struct ata_acpi_gtm *gtm), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct ata_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("ata_acpi_gtm_xfermask is invoked.\n");
    PRE_WRAPPER_FUNC(dev, gtm);
    long ret = ata_acpi_gtm_xfermask(dev, gtm);
    POST_WRAPPER_FUNC(dev, gtm);
    kern_printk("ata_acpi_gtm_xfermask returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct ata_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pneigh_enqueue
#define APP_WRAPPER_FOR_pneigh_enqueue
#endif
 
#ifndef APP_WRAPPER_FOR_pneigh_enqueue
#define APP_WRAPPER_FOR_pneigh_enqueue
FUNCTION_WRAPPER_VOID(pneigh_enqueue, (struct neigh_table *tbl, struct neigh_parms *p, struct sk_buff *skb), {
    WRAP_RECURSIVE(tbl);
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct neigh_parms)(*(TO_UNWATCHED_ADDRESS(p)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("pneigh_enqueue is invoked.\n");
    PRE_WRAPPER_FUNC(tbl, p, skb);
    pneigh_enqueue(tbl, p, skb);
    POST_WRAPPER_FUNC(tbl, p, skb);
    kern_printk("pneigh_enqueue returned.\n");
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct neigh_parms)(*(TO_UNWATCHED_ADDRESS(p)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_rwsem_down_read_failed
#define APP_WRAPPER_FOR_rwsem_down_read_failed
#endif
 
#ifndef APP_WRAPPER_FOR_rwsem_down_read_failed
#define APP_WRAPPER_FOR_rwsem_down_read_failed
FUNCTION_WRAPPER(rwsem_down_read_failed, (struct rw_semaphore *sem), {
    kern_printk("rwsem_down_read_failed is invoked.\n");
    PRE_WRAPPER_FUNC(sem);
    struct rw_semaphore *ret = rwsem_down_read_failed(sem);
    POST_WRAPPER_FUNC(sem);
    kern_printk("rwsem_down_read_failed returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_wait_for_device_probe
#define APP_WRAPPER_FOR_wait_for_device_probe
#endif
 
#ifndef APP_WRAPPER_FOR_wait_for_device_probe
#define APP_WRAPPER_FOR_wait_for_device_probe
FUNCTION_WRAPPER_VOID(wait_for_device_probe, (), {
    kern_printk("wait_for_device_probe is invoked.\n");
    PRE_WRAPPER_FUNC();
    wait_for_device_probe();
    POST_WRAPPER_FUNC();
    kern_printk("wait_for_device_probe returned.\n");
})
#endif


#ifndef KERN_ADDR_jbd2__journal_restart
#define APP_WRAPPER_FOR_jbd2__journal_restart
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2__journal_restart
#define APP_WRAPPER_FOR_jbd2__journal_restart
FUNCTION_WRAPPER(jbd2__journal_restart, (handle_t *_arg1, int nblocks, gfp_t gfp_mask), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(handle_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2__journal_restart is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, nblocks, gfp_mask);
    int ret = jbd2__journal_restart(_arg1, nblocks, gfp_mask);
    POST_WRAPPER_FUNC(_arg1, nblocks, gfp_mask);
    kern_printk("jbd2__journal_restart returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(handle_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_timing_merge
#define APP_WRAPPER_FOR_ata_timing_merge
#endif
 
#ifndef APP_WRAPPER_FOR_ata_timing_merge
#define APP_WRAPPER_FOR_ata_timing_merge
FUNCTION_WRAPPER_VOID(ata_timing_merge, (const struct ata_timing *_arg1, const struct ata_timing *_arg2, struct ata_timing *_arg3, unsigned int _arg4), {
    kern_printk("ata_timing_merge is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    ata_timing_merge(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("ata_timing_merge returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_remove_gpe_handler
#define APP_WRAPPER_FOR_acpi_remove_gpe_handler
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_remove_gpe_handler
#define APP_WRAPPER_FOR_acpi_remove_gpe_handler
FUNCTION_WRAPPER(acpi_remove_gpe_handler, (acpi_handle gpe_device, u32 gpe_number, acpi_gpe_handler address), {
    WRAP_FUNCTION(address);
    kern_printk("acpi_remove_gpe_handler is invoked.\n");
    PRE_WRAPPER_FUNC(gpe_device, gpe_number, address);
    acpi_status ret = acpi_remove_gpe_handler(gpe_device, gpe_number, address);
    POST_WRAPPER_FUNC(gpe_device, gpe_number, address);
    kern_printk("acpi_remove_gpe_handler returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_print_version
#define APP_WRAPPER_FOR_ata_print_version
#endif
 
#ifndef APP_WRAPPER_FOR_ata_print_version
#define APP_WRAPPER_FOR_ata_print_version
FUNCTION_WRAPPER_VOID(ata_print_version, (const struct device *dev, const char *version), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("ata_print_version is invoked.\n");
    PRE_WRAPPER_FUNC(dev, version);
    ata_print_version(dev, version);
    POST_WRAPPER_FUNC(dev, version);
    kern_printk("ata_print_version returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_synchronize_irq
#define APP_WRAPPER_FOR_synchronize_irq
#endif
 
#ifndef APP_WRAPPER_FOR_synchronize_irq
#define APP_WRAPPER_FOR_synchronize_irq
FUNCTION_WRAPPER_VOID(synchronize_irq, (unsigned int irq), {
    kern_printk("synchronize_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq);
    synchronize_irq(irq);
    POST_WRAPPER_FUNC(irq);
    kern_printk("synchronize_irq returned.\n");
})
#endif


#ifndef KERN_ADDR_inet_twdr_twcal_tick
#define APP_WRAPPER_FOR_inet_twdr_twcal_tick
#endif
 
#ifndef APP_WRAPPER_FOR_inet_twdr_twcal_tick
#define APP_WRAPPER_FOR_inet_twdr_twcal_tick
FUNCTION_WRAPPER_VOID(inet_twdr_twcal_tick, (unsigned long data), {
    kern_printk("inet_twdr_twcal_tick is invoked.\n");
    PRE_WRAPPER_FUNC(data);
    inet_twdr_twcal_tick(data);
    POST_WRAPPER_FUNC(data);
    kern_printk("inet_twdr_twcal_tick returned.\n");
})
#endif


#ifndef KERN_ADDR_set_page_dirty
#define APP_WRAPPER_FOR_set_page_dirty
#endif
 
#ifndef APP_WRAPPER_FOR_set_page_dirty
#define APP_WRAPPER_FOR_set_page_dirty
FUNCTION_WRAPPER(set_page_dirty, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("set_page_dirty is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    int ret = set_page_dirty(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("set_page_dirty returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_account_page_writeback
#define APP_WRAPPER_FOR_account_page_writeback
#endif
 
#ifndef APP_WRAPPER_FOR_account_page_writeback
#define APP_WRAPPER_FOR_account_page_writeback
FUNCTION_WRAPPER_VOID(account_page_writeback, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("account_page_writeback is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    account_page_writeback(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("account_page_writeback returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_neigh_seq_stop
#define APP_WRAPPER_FOR_neigh_seq_stop
#endif
 
#ifndef APP_WRAPPER_FOR_neigh_seq_stop
#define APP_WRAPPER_FOR_neigh_seq_stop
FUNCTION_WRAPPER_VOID(neigh_seq_stop, (struct seq_file *_arg1, void *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("neigh_seq_stop is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    neigh_seq_stop(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("neigh_seq_stop returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_swap_set_page_dirty
#define APP_WRAPPER_FOR_swap_set_page_dirty
#endif
 
#ifndef APP_WRAPPER_FOR_swap_set_page_dirty
#define APP_WRAPPER_FOR_swap_set_page_dirty
FUNCTION_WRAPPER(swap_set_page_dirty, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("swap_set_page_dirty is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    int ret = swap_set_page_dirty(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("swap_set_page_dirty returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_release_sock
#define APP_WRAPPER_FOR_release_sock
#endif
 
#ifndef APP_WRAPPER_FOR_release_sock
#define APP_WRAPPER_FOR_release_sock
FUNCTION_WRAPPER_VOID(release_sock, (struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("release_sock is invoked.\n");
    PRE_WRAPPER_FUNC(sk);
    release_sock(sk);
    POST_WRAPPER_FUNC(sk);
    kern_printk("release_sock returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR_inet_frags_exit_net
#define APP_WRAPPER_FOR_inet_frags_exit_net
#endif
 
#ifndef APP_WRAPPER_FOR_inet_frags_exit_net
#define APP_WRAPPER_FOR_inet_frags_exit_net
FUNCTION_WRAPPER_VOID(inet_frags_exit_net, (struct netns_frags *nf, struct inet_frags *f), {
    WRAP_RECURSIVE(f);
    TRACES_IF_WATCHPOINT(f);
    SCAN_HEAD_FUNC(struct inet_frags)(*(TO_UNWATCHED_ADDRESS(f)));
    kern_printk("inet_frags_exit_net is invoked.\n");
    PRE_WRAPPER_FUNC(nf, f);
    inet_frags_exit_net(nf, f);
    POST_WRAPPER_FUNC(nf, f);
    kern_printk("inet_frags_exit_net returned.\n");
    TRACES_IF_WATCHPOINT(f);
    SCAN_HEAD_FUNC(struct inet_frags)(*(TO_UNWATCHED_ADDRESS(f)));
})
#endif


#ifndef KERN_ADDR_wakeup_source_prepare
#define APP_WRAPPER_FOR_wakeup_source_prepare
#endif
 
#ifndef APP_WRAPPER_FOR_wakeup_source_prepare
#define APP_WRAPPER_FOR_wakeup_source_prepare
FUNCTION_WRAPPER_VOID(wakeup_source_prepare, (struct wakeup_source *ws, const char *name), {
    WRAP_RECURSIVE(ws);
    TRACES_IF_WATCHPOINT(ws);
    SCAN_HEAD_FUNC(struct wakeup_source)(*(TO_UNWATCHED_ADDRESS(ws)));
    kern_printk("wakeup_source_prepare is invoked.\n");
    PRE_WRAPPER_FUNC(ws, name);
    wakeup_source_prepare(ws, name);
    POST_WRAPPER_FUNC(ws, name);
    kern_printk("wakeup_source_prepare returned.\n");
    TRACES_IF_WATCHPOINT(ws);
    SCAN_HEAD_FUNC(struct wakeup_source)(*(TO_UNWATCHED_ADDRESS(ws)));
})
#endif


#ifndef KERN_ADDR_mutex_lock_interruptible
#define APP_WRAPPER_FOR_mutex_lock_interruptible
#endif
 
#ifndef APP_WRAPPER_FOR_mutex_lock_interruptible
#define APP_WRAPPER_FOR_mutex_lock_interruptible
FUNCTION_WRAPPER(mutex_lock_interruptible, (struct mutex *lock), {
    WRAP_RECURSIVE(lock);
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
    kern_printk("mutex_lock_interruptible is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    int ret = mutex_lock_interruptible(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("mutex_lock_interruptible returned.\n");
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
    return ret;
})
#endif


#ifndef KERN_ADDR_key_set_timeout
#define APP_WRAPPER_FOR_key_set_timeout
#endif
 
#ifndef APP_WRAPPER_FOR_key_set_timeout
#define APP_WRAPPER_FOR_key_set_timeout
FUNCTION_WRAPPER_VOID(key_set_timeout, (struct key *_arg1, unsigned int _arg2), {
    kern_printk("key_set_timeout is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    key_set_timeout(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("key_set_timeout returned.\n");
})
#endif


#ifndef KERN_ADDR_class_dev_iter_exit
#define APP_WRAPPER_FOR_class_dev_iter_exit
#endif
 
#ifndef APP_WRAPPER_FOR_class_dev_iter_exit
#define APP_WRAPPER_FOR_class_dev_iter_exit
FUNCTION_WRAPPER_VOID(class_dev_iter_exit, (struct class_dev_iter *iter), {
    WRAP_RECURSIVE(iter);
    TRACES_IF_WATCHPOINT(iter);
    SCAN_HEAD_FUNC(struct class_dev_iter)(*(TO_UNWATCHED_ADDRESS(iter)));
    kern_printk("class_dev_iter_exit is invoked.\n");
    PRE_WRAPPER_FUNC(iter);
    class_dev_iter_exit(iter);
    POST_WRAPPER_FUNC(iter);
    kern_printk("class_dev_iter_exit returned.\n");
    TRACES_IF_WATCHPOINT(iter);
    SCAN_HEAD_FUNC(struct class_dev_iter)(*(TO_UNWATCHED_ADDRESS(iter)));
})
#endif


#ifndef KERN_ADDR_ata_ehi_clear_desc
#define APP_WRAPPER_FOR_ata_ehi_clear_desc
#endif
 
#ifndef APP_WRAPPER_FOR_ata_ehi_clear_desc
#define APP_WRAPPER_FOR_ata_ehi_clear_desc
FUNCTION_WRAPPER_VOID(ata_ehi_clear_desc, (struct ata_eh_info *ehi), {
    WRAP_RECURSIVE(ehi);
    TRACES_IF_WATCHPOINT(ehi);
    SCAN_HEAD_FUNC(struct ata_eh_info)(*(TO_UNWATCHED_ADDRESS(ehi)));
    kern_printk("ata_ehi_clear_desc is invoked.\n");
    PRE_WRAPPER_FUNC(ehi);
    ata_ehi_clear_desc(ehi);
    POST_WRAPPER_FUNC(ehi);
    kern_printk("ata_ehi_clear_desc returned.\n");
    TRACES_IF_WATCHPOINT(ehi);
    SCAN_HEAD_FUNC(struct ata_eh_info)(*(TO_UNWATCHED_ADDRESS(ehi)));
})
#endif


#ifndef KERN_ADDR_tcf_destroy_chain
#define APP_WRAPPER_FOR_tcf_destroy_chain
#endif
 
#ifndef APP_WRAPPER_FOR_tcf_destroy_chain
#define APP_WRAPPER_FOR_tcf_destroy_chain
FUNCTION_WRAPPER_VOID(tcf_destroy_chain, (struct tcf_proto **fl), {
    WRAP_RECURSIVE(fl);
    TRACES_IF_WATCHPOINT(fl);
    SCAN_HEAD_FUNC(struct tcf_proto *)(*(TO_UNWATCHED_ADDRESS(fl)));
    kern_printk("tcf_destroy_chain is invoked.\n");
    PRE_WRAPPER_FUNC(fl);
    tcf_destroy_chain(fl);
    POST_WRAPPER_FUNC(fl);
    kern_printk("tcf_destroy_chain returned.\n");
    TRACES_IF_WATCHPOINT(fl);
    SCAN_HEAD_FUNC(struct tcf_proto *)(*(TO_UNWATCHED_ADDRESS(fl)));
})
#endif


#ifndef KERN_ADDR_dev_pm_qos_update_request
#define APP_WRAPPER_FOR_dev_pm_qos_update_request
#endif
 
#ifndef APP_WRAPPER_FOR_dev_pm_qos_update_request
#define APP_WRAPPER_FOR_dev_pm_qos_update_request
FUNCTION_WRAPPER(dev_pm_qos_update_request, (struct dev_pm_qos_request *req, s32 new_value), {
    WRAP_RECURSIVE(req);
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct dev_pm_qos_request)(*(TO_UNWATCHED_ADDRESS(req)));
    kern_printk("dev_pm_qos_update_request is invoked.\n");
    PRE_WRAPPER_FUNC(req, new_value);
    int ret = dev_pm_qos_update_request(req, new_value);
    POST_WRAPPER_FUNC(req, new_value);
    kern_printk("dev_pm_qos_update_request returned.\n");
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct dev_pm_qos_request)(*(TO_UNWATCHED_ADDRESS(req)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_reenable_device
#define APP_WRAPPER_FOR_pci_reenable_device
#endif
 
#ifndef APP_WRAPPER_FOR_pci_reenable_device
#define APP_WRAPPER_FOR_pci_reenable_device
FUNCTION_WRAPPER(pci_reenable_device, (struct pci_dev *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("pci_reenable_device is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = pci_reenable_device(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("pci_reenable_device returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pneigh_lookup
#define APP_WRAPPER_FOR_pneigh_lookup
#endif
 
#ifndef APP_WRAPPER_FOR_pneigh_lookup
#define APP_WRAPPER_FOR_pneigh_lookup
FUNCTION_WRAPPER(pneigh_lookup, (struct neigh_table *tbl, struct net *net, const void *key, struct net_device *dev, int creat), {
    WRAP_RECURSIVE(tbl);
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pneigh_lookup is invoked.\n");
    PRE_WRAPPER_FUNC(tbl, net, key, dev, creat);
    struct pneigh_entry *ret = pneigh_lookup(tbl, net, key, dev, creat);
    POST_WRAPPER_FUNC(tbl, net, key, dev, creat);
    kern_printk("pneigh_lookup returned.\n");
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_bmdma_stop
#define APP_WRAPPER_FOR_ata_bmdma_stop
#endif
 
#ifndef APP_WRAPPER_FOR_ata_bmdma_stop
#define APP_WRAPPER_FOR_ata_bmdma_stop
FUNCTION_WRAPPER_VOID(ata_bmdma_stop, (struct ata_queued_cmd *qc), {
    WRAP_RECURSIVE(qc);
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    kern_printk("ata_bmdma_stop is invoked.\n");
    PRE_WRAPPER_FUNC(qc);
    ata_bmdma_stop(qc);
    POST_WRAPPER_FUNC(qc);
    kern_printk("ata_bmdma_stop returned.\n");
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
})
#endif


#ifndef KERN_ADDR_no_llseek
#define APP_WRAPPER_FOR_no_llseek
#endif
 
#ifndef APP_WRAPPER_FOR_no_llseek
#define APP_WRAPPER_FOR_no_llseek
FUNCTION_WRAPPER(no_llseek, (struct file *file, loff_t offset, int whence), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("no_llseek is invoked.\n");
    PRE_WRAPPER_FUNC(file, offset, whence);
    loff_t ret = no_llseek(file, offset, whence);
    POST_WRAPPER_FUNC(file, offset, whence);
    kern_printk("no_llseek returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_get_md
#define APP_WRAPPER_FOR_dm_get_md
#endif
 
#ifndef APP_WRAPPER_FOR_dm_get_md
#define APP_WRAPPER_FOR_dm_get_md
FUNCTION_WRAPPER(dm_get_md, (dev_t dev), {
    kern_printk("dm_get_md is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    struct mapped_device *ret = dm_get_md(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dm_get_md returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___acpi_unmap_table
#define APP_WRAPPER_FOR___acpi_unmap_table
#endif
 
#ifndef APP_WRAPPER_FOR___acpi_unmap_table
#define APP_WRAPPER_FOR___acpi_unmap_table
FUNCTION_WRAPPER_VOID(__acpi_unmap_table, (char *map, unsigned long size), {
    kern_printk("__acpi_unmap_table is invoked.\n");
    PRE_WRAPPER_FUNC(map, size);
    __acpi_unmap_table(map, size);
    POST_WRAPPER_FUNC(map, size);
    kern_printk("__acpi_unmap_table returned.\n");
})
#endif


#ifndef KERN_ADDR___bdevname
#define APP_WRAPPER_FOR___bdevname
#endif
 
#ifndef APP_WRAPPER_FOR___bdevname
#define APP_WRAPPER_FOR___bdevname
FUNCTION_WRAPPER(__bdevname, (dev_t _arg1, char *buffer), {
    kern_printk("__bdevname is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, buffer);
    const char *ret = __bdevname(_arg1, buffer);
    POST_WRAPPER_FUNC(_arg1, buffer);
    kern_printk("__bdevname returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_path_get
#define APP_WRAPPER_FOR_path_get
#endif
 
#ifndef APP_WRAPPER_FOR_path_get
#define APP_WRAPPER_FOR_path_get
FUNCTION_WRAPPER_VOID(path_get, (struct path *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("path_get is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    path_get(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("path_get returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_register_dock_notifier
#define APP_WRAPPER_FOR_register_dock_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_register_dock_notifier
#define APP_WRAPPER_FOR_register_dock_notifier
FUNCTION_WRAPPER(register_dock_notifier, (struct notifier_block *nb), {
    WRAP_RECURSIVE(nb);
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    kern_printk("register_dock_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(nb);
    int ret = register_dock_notifier(nb);
    POST_WRAPPER_FUNC(nb);
    kern_printk("register_dock_notifier returned.\n");
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_si_meminfo_node
#define APP_WRAPPER_FOR_si_meminfo_node
#endif
 
#ifndef APP_WRAPPER_FOR_si_meminfo_node
#define APP_WRAPPER_FOR_si_meminfo_node
FUNCTION_WRAPPER_VOID(si_meminfo_node, (struct sysinfo *val, int nid), {
    kern_printk("si_meminfo_node is invoked.\n");
    PRE_WRAPPER_FUNC(val, nid);
    si_meminfo_node(val, nid);
    POST_WRAPPER_FUNC(val, nid);
    kern_printk("si_meminfo_node returned.\n");
})
#endif


#ifndef KERN_ADDR_devres_release
#define APP_WRAPPER_FOR_devres_release
#endif
 
#ifndef APP_WRAPPER_FOR_devres_release
#define APP_WRAPPER_FOR_devres_release
FUNCTION_WRAPPER(devres_release, (struct device *dev, dr_release_t release, dr_match_t match, void *match_data), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_FUNCTION(release);
    WRAP_FUNCTION(match);
    kern_printk("devres_release is invoked.\n");
    PRE_WRAPPER_FUNC(dev, release, match, match_data);
    int ret = devres_release(dev, release, match, match_data);
    POST_WRAPPER_FUNC(dev, release, match, match_data);
    kern_printk("devres_release returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_hrtimer_init
#define APP_WRAPPER_FOR_hrtimer_init
#endif
 
#ifndef APP_WRAPPER_FOR_hrtimer_init
#define APP_WRAPPER_FOR_hrtimer_init
FUNCTION_WRAPPER_VOID(hrtimer_init, (struct hrtimer *timer, clockid_t which_clock, enum hrtimer_mode mode), {
    WRAP_RECURSIVE(timer);
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct hrtimer)(*(TO_UNWATCHED_ADDRESS(timer)));
    kern_printk("hrtimer_init is invoked.\n");
    PRE_WRAPPER_FUNC(timer, which_clock, mode);
    hrtimer_init(timer, which_clock, mode);
    POST_WRAPPER_FUNC(timer, which_clock, mode);
    kern_printk("hrtimer_init returned.\n");
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct hrtimer)(*(TO_UNWATCHED_ADDRESS(timer)));
})
#endif


#ifndef KERN_ADDR_acpi_device_hid
#define APP_WRAPPER_FOR_acpi_device_hid
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_device_hid
#define APP_WRAPPER_FOR_acpi_device_hid
FUNCTION_WRAPPER(acpi_device_hid, (struct acpi_device *device), {
    WRAP_RECURSIVE(device);
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(device)));
    kern_printk("acpi_device_hid is invoked.\n");
    PRE_WRAPPER_FUNC(device);
    const char *ret = acpi_device_hid(device);
    POST_WRAPPER_FUNC(device);
    kern_printk("acpi_device_hid returned.\n");
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(device)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_unxlate_dev_mem_ptr
#define APP_WRAPPER_FOR_unxlate_dev_mem_ptr
#endif
 
#ifndef APP_WRAPPER_FOR_unxlate_dev_mem_ptr
#define APP_WRAPPER_FOR_unxlate_dev_mem_ptr
FUNCTION_WRAPPER_VOID(unxlate_dev_mem_ptr, (unsigned long phys, void *addr), {
    kern_printk("unxlate_dev_mem_ptr is invoked.\n");
    PRE_WRAPPER_FUNC(phys, addr);
    unxlate_dev_mem_ptr(phys, addr);
    POST_WRAPPER_FUNC(phys, addr);
    kern_printk("unxlate_dev_mem_ptr returned.\n");
})
#endif


#ifndef KERN_ADDR_cleanup_srcu_struct
#define APP_WRAPPER_FOR_cleanup_srcu_struct
#endif
 
#ifndef APP_WRAPPER_FOR_cleanup_srcu_struct
#define APP_WRAPPER_FOR_cleanup_srcu_struct
FUNCTION_WRAPPER_VOID(cleanup_srcu_struct, (struct srcu_struct *sp), {
    WRAP_RECURSIVE(sp);
    TRACES_IF_WATCHPOINT(sp);
    SCAN_HEAD_FUNC(struct srcu_struct)(*(TO_UNWATCHED_ADDRESS(sp)));
    kern_printk("cleanup_srcu_struct is invoked.\n");
    PRE_WRAPPER_FUNC(sp);
    cleanup_srcu_struct(sp);
    POST_WRAPPER_FUNC(sp);
    kern_printk("cleanup_srcu_struct returned.\n");
    TRACES_IF_WATCHPOINT(sp);
    SCAN_HEAD_FUNC(struct srcu_struct)(*(TO_UNWATCHED_ADDRESS(sp)));
})
#endif


#ifndef KERN_ADDR_seq_path
#define APP_WRAPPER_FOR_seq_path
#endif
 
#ifndef APP_WRAPPER_FOR_seq_path
#define APP_WRAPPER_FOR_seq_path
FUNCTION_WRAPPER(seq_path, (struct seq_file *_arg1, const struct path *_arg2, const char *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(const struct path)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("seq_path is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = seq_path(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("seq_path returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(const struct path)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_tsc_save_sched_clock_state
#define APP_WRAPPER_FOR_tsc_save_sched_clock_state
#endif
 
#ifndef APP_WRAPPER_FOR_tsc_save_sched_clock_state
#define APP_WRAPPER_FOR_tsc_save_sched_clock_state
FUNCTION_WRAPPER_VOID(tsc_save_sched_clock_state, (), {
    kern_printk("tsc_save_sched_clock_state is invoked.\n");
    PRE_WRAPPER_FUNC();
    tsc_save_sched_clock_state();
    POST_WRAPPER_FUNC();
    kern_printk("tsc_save_sched_clock_state returned.\n");
})
#endif


#ifndef KERN_ADDR_init_idle
#define APP_WRAPPER_FOR_init_idle
#endif
 
#ifndef APP_WRAPPER_FOR_init_idle
#define APP_WRAPPER_FOR_init_idle
FUNCTION_WRAPPER_VOID(init_idle, (struct task_struct *idle, int cpu), {
    WRAP_RECURSIVE(idle);
    TRACES_IF_WATCHPOINT(idle);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(idle)));
    kern_printk("init_idle is invoked.\n");
    PRE_WRAPPER_FUNC(idle, cpu);
    init_idle(idle, cpu);
    POST_WRAPPER_FUNC(idle, cpu);
    kern_printk("init_idle returned.\n");
    TRACES_IF_WATCHPOINT(idle);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(idle)));
})
#endif


#ifndef KERN_ADDR_wakeup_secondary_cpu_via_nmi
#define APP_WRAPPER_FOR_wakeup_secondary_cpu_via_nmi
#endif
 
#ifndef APP_WRAPPER_FOR_wakeup_secondary_cpu_via_nmi
#define APP_WRAPPER_FOR_wakeup_secondary_cpu_via_nmi
FUNCTION_WRAPPER(wakeup_secondary_cpu_via_nmi, (int apicid, unsigned long start_eip), {
    kern_printk("wakeup_secondary_cpu_via_nmi is invoked.\n");
    PRE_WRAPPER_FUNC(apicid, start_eip);
    int ret = wakeup_secondary_cpu_via_nmi(apicid, start_eip);
    POST_WRAPPER_FUNC(apicid, start_eip);
    kern_printk("wakeup_secondary_cpu_via_nmi returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_csk_reqsk_queue_prune
#define APP_WRAPPER_FOR_inet_csk_reqsk_queue_prune
#endif
 
#ifndef APP_WRAPPER_FOR_inet_csk_reqsk_queue_prune
#define APP_WRAPPER_FOR_inet_csk_reqsk_queue_prune
FUNCTION_WRAPPER_VOID(inet_csk_reqsk_queue_prune, (struct sock *parent, unsigned const long interval, unsigned const long timeout, unsigned const long max_rto), {
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(parent)));
    kern_printk("inet_csk_reqsk_queue_prune is invoked.\n");
    PRE_WRAPPER_FUNC(parent, interval, timeout, max_rto);
    inet_csk_reqsk_queue_prune(parent, interval, timeout, max_rto);
    POST_WRAPPER_FUNC(parent, interval, timeout, max_rto);
    kern_printk("inet_csk_reqsk_queue_prune returned.\n");
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(parent)));
})
#endif


#ifndef KERN_ADDR_nf_register_afinfo
#define APP_WRAPPER_FOR_nf_register_afinfo
#endif
 
#ifndef APP_WRAPPER_FOR_nf_register_afinfo
#define APP_WRAPPER_FOR_nf_register_afinfo
FUNCTION_WRAPPER(nf_register_afinfo, (const struct nf_afinfo *afinfo), {
    WRAP_RECURSIVE(afinfo);
    TRACES_IF_WATCHPOINT(afinfo);
    SCAN_HEAD_FUNC(const struct nf_afinfo)(*(TO_UNWATCHED_ADDRESS(afinfo)));
    kern_printk("nf_register_afinfo is invoked.\n");
    PRE_WRAPPER_FUNC(afinfo);
    int ret = nf_register_afinfo(afinfo);
    POST_WRAPPER_FUNC(afinfo);
    kern_printk("nf_register_afinfo returned.\n");
    TRACES_IF_WATCHPOINT(afinfo);
    SCAN_HEAD_FUNC(const struct nf_afinfo)(*(TO_UNWATCHED_ADDRESS(afinfo)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sata_pmp_qc_defer_cmd_switch
#define APP_WRAPPER_FOR_sata_pmp_qc_defer_cmd_switch
#endif
 
#ifndef APP_WRAPPER_FOR_sata_pmp_qc_defer_cmd_switch
#define APP_WRAPPER_FOR_sata_pmp_qc_defer_cmd_switch
FUNCTION_WRAPPER(sata_pmp_qc_defer_cmd_switch, (struct ata_queued_cmd *qc), {
    WRAP_RECURSIVE(qc);
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    kern_printk("sata_pmp_qc_defer_cmd_switch is invoked.\n");
    PRE_WRAPPER_FUNC(qc);
    int ret = sata_pmp_qc_defer_cmd_switch(qc);
    POST_WRAPPER_FUNC(qc);
    kern_printk("sata_pmp_qc_defer_cmd_switch returned.\n");
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    return ret;
})
#endif


#ifndef KERN_ADDR_phy_device_free
#define APP_WRAPPER_FOR_phy_device_free
#endif
 
#ifndef APP_WRAPPER_FOR_phy_device_free
#define APP_WRAPPER_FOR_phy_device_free
FUNCTION_WRAPPER_VOID(phy_device_free, (struct phy_device *phydev), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    kern_printk("phy_device_free is invoked.\n");
    PRE_WRAPPER_FUNC(phydev);
    phy_device_free(phydev);
    POST_WRAPPER_FUNC(phydev);
    kern_printk("phy_device_free returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
})
#endif


#ifndef KERN_ADDR_offline_pages
#define APP_WRAPPER_FOR_offline_pages
#endif
 
#ifndef APP_WRAPPER_FOR_offline_pages
#define APP_WRAPPER_FOR_offline_pages
FUNCTION_WRAPPER(offline_pages, (unsigned long start_pfn, unsigned long nr_pages), {
    kern_printk("offline_pages is invoked.\n");
    PRE_WRAPPER_FUNC(start_pfn, nr_pages);
    int ret = offline_pages(start_pfn, nr_pages);
    POST_WRAPPER_FUNC(start_pfn, nr_pages);
    kern_printk("offline_pages returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_prop_local_destroy_single
#define APP_WRAPPER_FOR_prop_local_destroy_single
#endif
 
#ifndef APP_WRAPPER_FOR_prop_local_destroy_single
#define APP_WRAPPER_FOR_prop_local_destroy_single
FUNCTION_WRAPPER_VOID(prop_local_destroy_single, (struct prop_local_single *pl), {
    kern_printk("prop_local_destroy_single is invoked.\n");
    PRE_WRAPPER_FUNC(pl);
    prop_local_destroy_single(pl);
    POST_WRAPPER_FUNC(pl);
    kern_printk("prop_local_destroy_single returned.\n");
})
#endif


#ifndef KERN_ADDR_init_scattered_cpuid_features
#define APP_WRAPPER_FOR_init_scattered_cpuid_features
#endif
 
#ifndef APP_WRAPPER_FOR_init_scattered_cpuid_features
#define APP_WRAPPER_FOR_init_scattered_cpuid_features
FUNCTION_WRAPPER_VOID(init_scattered_cpuid_features, (struct cpuinfo_x86 *c), {
    kern_printk("init_scattered_cpuid_features is invoked.\n");
    PRE_WRAPPER_FUNC(c);
    init_scattered_cpuid_features(c);
    POST_WRAPPER_FUNC(c);
    kern_printk("init_scattered_cpuid_features returned.\n");
})
#endif


#ifndef KERN_ADDR_mempool_free_slab
#define APP_WRAPPER_FOR_mempool_free_slab
#endif
 
#ifndef APP_WRAPPER_FOR_mempool_free_slab
#define APP_WRAPPER_FOR_mempool_free_slab
FUNCTION_WRAPPER_VOID(mempool_free_slab, (void *element, void *pool_data), {
    kern_printk("mempool_free_slab is invoked.\n");
    PRE_WRAPPER_FUNC(element, pool_data);
    mempool_free_slab(element, pool_data);
    POST_WRAPPER_FUNC(element, pool_data);
    kern_printk("mempool_free_slab returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_power_resource_unregister_device
#define APP_WRAPPER_FOR_acpi_power_resource_unregister_device
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_power_resource_unregister_device
#define APP_WRAPPER_FOR_acpi_power_resource_unregister_device
FUNCTION_WRAPPER_VOID(acpi_power_resource_unregister_device, (struct device *dev, acpi_handle handle), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("acpi_power_resource_unregister_device is invoked.\n");
    PRE_WRAPPER_FUNC(dev, handle);
    acpi_power_resource_unregister_device(dev, handle);
    POST_WRAPPER_FUNC(dev, handle);
    kern_printk("acpi_power_resource_unregister_device returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_mpage_writepages
#define APP_WRAPPER_FOR_mpage_writepages
#endif
 
#ifndef APP_WRAPPER_FOR_mpage_writepages
#define APP_WRAPPER_FOR_mpage_writepages
FUNCTION_WRAPPER(mpage_writepages, (struct address_space *mapping, struct writeback_control *wbc, get_block_t get_block), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("mpage_writepages is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, wbc, get_block);
    int ret = mpage_writepages(mapping, wbc, get_block);
    POST_WRAPPER_FUNC(mapping, wbc, get_block);
    kern_printk("mpage_writepages returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    return ret;
})
#endif


#ifndef KERN_ADDR_fasync_helper
#define APP_WRAPPER_FOR_fasync_helper
#endif
 
#ifndef APP_WRAPPER_FOR_fasync_helper
#define APP_WRAPPER_FOR_fasync_helper
FUNCTION_WRAPPER(fasync_helper, (int _arg1, struct file *_arg2, int _arg3, struct fasync_struct **_arg4), {
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg4);
    TRACES_IF_WATCHPOINT(_arg4);
    SCAN_HEAD_FUNC(struct fasync_struct *)(*(TO_UNWATCHED_ADDRESS(_arg4)));
    kern_printk("fasync_helper is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = fasync_helper(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("fasync_helper returned.\n");
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg4);
    SCAN_HEAD_FUNC(struct fasync_struct *)(*(TO_UNWATCHED_ADDRESS(_arg4)));
    return ret;
})
#endif


#ifndef KERN_ADDR___round_jiffies_up_relative
#define APP_WRAPPER_FOR___round_jiffies_up_relative
#endif
 
#ifndef APP_WRAPPER_FOR___round_jiffies_up_relative
#define APP_WRAPPER_FOR___round_jiffies_up_relative
FUNCTION_WRAPPER(__round_jiffies_up_relative, (unsigned long j, int cpu), {
    kern_printk("__round_jiffies_up_relative is invoked.\n");
    PRE_WRAPPER_FUNC(j, cpu);
    long ret = __round_jiffies_up_relative(j, cpu);
    POST_WRAPPER_FUNC(j, cpu);
    kern_printk("__round_jiffies_up_relative returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_pci_link_allocate_irq
#define APP_WRAPPER_FOR_acpi_pci_link_allocate_irq
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_pci_link_allocate_irq
#define APP_WRAPPER_FOR_acpi_pci_link_allocate_irq
FUNCTION_WRAPPER(acpi_pci_link_allocate_irq, (acpi_handle handle, int index, int *triggering, int *polarity, char **name), {
    kern_printk("acpi_pci_link_allocate_irq is invoked.\n");
    PRE_WRAPPER_FUNC(handle, index, triggering, polarity, name);
    int ret = acpi_pci_link_allocate_irq(handle, index, triggering, polarity, name);
    POST_WRAPPER_FUNC(handle, index, triggering, polarity, name);
    kern_printk("acpi_pci_link_allocate_irq returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_zone_pcp_reset
#define APP_WRAPPER_FOR_zone_pcp_reset
#endif
 
#ifndef APP_WRAPPER_FOR_zone_pcp_reset
#define APP_WRAPPER_FOR_zone_pcp_reset
FUNCTION_WRAPPER_VOID(zone_pcp_reset, (struct zone *zone), {
    WRAP_RECURSIVE(zone);
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    kern_printk("zone_pcp_reset is invoked.\n");
    PRE_WRAPPER_FUNC(zone);
    zone_pcp_reset(zone);
    POST_WRAPPER_FUNC(zone);
    kern_printk("zone_pcp_reset returned.\n");
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
})
#endif


#ifndef KERN_ADDR_dev_seq_next
#define APP_WRAPPER_FOR_dev_seq_next
#endif
 
#ifndef APP_WRAPPER_FOR_dev_seq_next
#define APP_WRAPPER_FOR_dev_seq_next
FUNCTION_WRAPPER(dev_seq_next, (struct seq_file *seq, void *v, loff_t *pos), {
    WRAP_RECURSIVE(seq);
    TRACES_IF_WATCHPOINT(seq);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(seq)));
    kern_printk("dev_seq_next is invoked.\n");
    PRE_WRAPPER_FUNC(seq, v, pos);
    void *ret = dev_seq_next(seq, v, pos);
    POST_WRAPPER_FUNC(seq, v, pos);
    kern_printk("dev_seq_next returned.\n");
    TRACES_IF_WATCHPOINT(seq);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(seq)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_file_aio_write
#define APP_WRAPPER_FOR_generic_file_aio_write
#endif
 
#ifndef APP_WRAPPER_FOR_generic_file_aio_write
#define APP_WRAPPER_FOR_generic_file_aio_write
FUNCTION_WRAPPER(generic_file_aio_write, (struct kiocb *_arg1, const struct iovec *_arg2, unsigned long _arg3, loff_t _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("generic_file_aio_write is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    ssize_t ret = generic_file_aio_write(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("generic_file_aio_write returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_flock_lock_file_wait
#define APP_WRAPPER_FOR_flock_lock_file_wait
#endif
 
#ifndef APP_WRAPPER_FOR_flock_lock_file_wait
#define APP_WRAPPER_FOR_flock_lock_file_wait
FUNCTION_WRAPPER(flock_lock_file_wait, (struct file *filp, struct file_lock *fl), {
    WRAP_RECURSIVE(filp);
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    WRAP_RECURSIVE(fl);
    TRACES_IF_WATCHPOINT(fl);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(fl)));
    kern_printk("flock_lock_file_wait is invoked.\n");
    PRE_WRAPPER_FUNC(filp, fl);
    int ret = flock_lock_file_wait(filp, fl);
    POST_WRAPPER_FUNC(filp, fl);
    kern_printk("flock_lock_file_wait returned.\n");
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    TRACES_IF_WATCHPOINT(fl);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(fl)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kill_pid_info
#define APP_WRAPPER_FOR_kill_pid_info
#endif
 
#ifndef APP_WRAPPER_FOR_kill_pid_info
#define APP_WRAPPER_FOR_kill_pid_info
FUNCTION_WRAPPER(kill_pid_info, (int sig, struct siginfo *info, struct pid *pid), {
    WRAP_RECURSIVE(pid);
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
    kern_printk("kill_pid_info is invoked.\n");
    PRE_WRAPPER_FUNC(sig, info, pid);
    int ret = kill_pid_info(sig, info, pid);
    POST_WRAPPER_FUNC(sig, info, pid);
    kern_printk("kill_pid_info returned.\n");
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_frags_init_net
#define APP_WRAPPER_FOR_inet_frags_init_net
#endif
 
#ifndef APP_WRAPPER_FOR_inet_frags_init_net
#define APP_WRAPPER_FOR_inet_frags_init_net
FUNCTION_WRAPPER_VOID(inet_frags_init_net, (struct netns_frags *nf), {
    kern_printk("inet_frags_init_net is invoked.\n");
    PRE_WRAPPER_FUNC(nf);
    inet_frags_init_net(nf);
    POST_WRAPPER_FUNC(nf);
    kern_printk("inet_frags_init_net returned.\n");
})
#endif


#ifndef KERN_ADDR_redirty_page_for_writepage
#define APP_WRAPPER_FOR_redirty_page_for_writepage
#endif
 
#ifndef APP_WRAPPER_FOR_redirty_page_for_writepage
#define APP_WRAPPER_FOR_redirty_page_for_writepage
FUNCTION_WRAPPER(redirty_page_for_writepage, (struct writeback_control *wbc, struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("redirty_page_for_writepage is invoked.\n");
    PRE_WRAPPER_FUNC(wbc, page);
    int ret = redirty_page_for_writepage(wbc, page);
    POST_WRAPPER_FUNC(wbc, page);
    kern_printk("redirty_page_for_writepage returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kmem_cache_destroy
#define APP_WRAPPER_FOR_kmem_cache_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_kmem_cache_destroy
#define APP_WRAPPER_FOR_kmem_cache_destroy
FUNCTION_WRAPPER_VOID(kmem_cache_destroy, (struct kmem_cache *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kmem_cache)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("kmem_cache_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    kmem_cache_destroy(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("kmem_cache_destroy returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kmem_cache)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_tc_classify_compat
#define APP_WRAPPER_FOR_tc_classify_compat
#endif
 
#ifndef APP_WRAPPER_FOR_tc_classify_compat
#define APP_WRAPPER_FOR_tc_classify_compat
FUNCTION_WRAPPER(tc_classify_compat, (struct sk_buff *skb, const struct tcf_proto *tp, struct tcf_result *res), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_RECURSIVE(tp);
    TRACES_IF_WATCHPOINT(tp);
    SCAN_HEAD_FUNC(const struct tcf_proto)(*(TO_UNWATCHED_ADDRESS(tp)));
    kern_printk("tc_classify_compat is invoked.\n");
    PRE_WRAPPER_FUNC(skb, tp, res);
    int ret = tc_classify_compat(skb, tp, res);
    POST_WRAPPER_FUNC(skb, tp, res);
    kern_printk("tc_classify_compat returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    TRACES_IF_WATCHPOINT(tp);
    SCAN_HEAD_FUNC(const struct tcf_proto)(*(TO_UNWATCHED_ADDRESS(tp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_write_sync
#define APP_WRAPPER_FOR_generic_write_sync
#endif
 
#ifndef APP_WRAPPER_FOR_generic_write_sync
#define APP_WRAPPER_FOR_generic_write_sync
FUNCTION_WRAPPER(generic_write_sync, (struct file *file, loff_t pos, loff_t count), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("generic_write_sync is invoked.\n");
    PRE_WRAPPER_FUNC(file, pos, count);
    int ret = generic_write_sync(file, pos, count);
    POST_WRAPPER_FUNC(file, pos, count);
    kern_printk("generic_write_sync returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sched_move_task
#define APP_WRAPPER_FOR_sched_move_task
#endif
 
#ifndef APP_WRAPPER_FOR_sched_move_task
#define APP_WRAPPER_FOR_sched_move_task
FUNCTION_WRAPPER_VOID(sched_move_task, (struct task_struct *tsk), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("sched_move_task is invoked.\n");
    PRE_WRAPPER_FUNC(tsk);
    sched_move_task(tsk);
    POST_WRAPPER_FUNC(tsk);
    kern_printk("sched_move_task returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
})
#endif


#ifndef KERN_ADDR_blocking_notifier_call_chain
#define APP_WRAPPER_FOR_blocking_notifier_call_chain
#endif
 
#ifndef APP_WRAPPER_FOR_blocking_notifier_call_chain
#define APP_WRAPPER_FOR_blocking_notifier_call_chain
FUNCTION_WRAPPER(blocking_notifier_call_chain, (struct blocking_notifier_head *nh, unsigned long val, void *v), {
    WRAP_RECURSIVE(nh);
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct blocking_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    kern_printk("blocking_notifier_call_chain is invoked.\n");
    PRE_WRAPPER_FUNC(nh, val, v);
    int ret = blocking_notifier_call_chain(nh, val, v);
    POST_WRAPPER_FUNC(nh, val, v);
    kern_printk("blocking_notifier_call_chain returned.\n");
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct blocking_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    return ret;
})
#endif


#ifndef KERN_ADDR_res_counter_charge
#define APP_WRAPPER_FOR_res_counter_charge
#endif
 
#ifndef APP_WRAPPER_FOR_res_counter_charge
#define APP_WRAPPER_FOR_res_counter_charge
FUNCTION_WRAPPER(res_counter_charge, (struct res_counter *counter, unsigned long val, struct res_counter **limit_fail_at), {
    kern_printk("res_counter_charge is invoked.\n");
    PRE_WRAPPER_FUNC(counter, val, limit_fail_at);
    int ret = res_counter_charge(counter, val, limit_fail_at);
    POST_WRAPPER_FUNC(counter, val, limit_fail_at);
    kern_printk("res_counter_charge returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_lru_add_drain
#define APP_WRAPPER_FOR_lru_add_drain
#endif
 
#ifndef APP_WRAPPER_FOR_lru_add_drain
#define APP_WRAPPER_FOR_lru_add_drain
FUNCTION_WRAPPER_VOID(lru_add_drain, (), {
    kern_printk("lru_add_drain is invoked.\n");
    PRE_WRAPPER_FUNC();
    lru_add_drain();
    POST_WRAPPER_FUNC();
    kern_printk("lru_add_drain returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_os_predefined_override
#define APP_WRAPPER_FOR_acpi_os_predefined_override
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_predefined_override
#define APP_WRAPPER_FOR_acpi_os_predefined_override
FUNCTION_WRAPPER(acpi_os_predefined_override, (const struct acpi_predefined_names *init_val, acpi_string *new_val), {
    kern_printk("acpi_os_predefined_override is invoked.\n");
    PRE_WRAPPER_FUNC(init_val, new_val);
    acpi_status ret = acpi_os_predefined_override(init_val, new_val);
    POST_WRAPPER_FUNC(init_val, new_val);
    kern_printk("acpi_os_predefined_override returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ec_write
#define APP_WRAPPER_FOR_ec_write
#endif
 
#ifndef APP_WRAPPER_FOR_ec_write
#define APP_WRAPPER_FOR_ec_write
FUNCTION_WRAPPER(ec_write, (u8 addr, u8 val), {
    kern_printk("ec_write is invoked.\n");
    PRE_WRAPPER_FUNC(addr, val);
    int ret = ec_write(addr, val);
    POST_WRAPPER_FUNC(addr, val);
    kern_printk("ec_write returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_release_mutex
#define APP_WRAPPER_FOR_acpi_release_mutex
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_release_mutex
#define APP_WRAPPER_FOR_acpi_release_mutex
FUNCTION_WRAPPER(acpi_release_mutex, (acpi_handle handle, acpi_string pathname), {
    kern_printk("acpi_release_mutex is invoked.\n");
    PRE_WRAPPER_FUNC(handle, pathname);
    acpi_status ret = acpi_release_mutex(handle, pathname);
    POST_WRAPPER_FUNC(handle, pathname);
    kern_printk("acpi_release_mutex returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_qid_valid
#define APP_WRAPPER_FOR_qid_valid
#endif
 
#ifndef APP_WRAPPER_FOR_qid_valid
#define APP_WRAPPER_FOR_qid_valid
FUNCTION_WRAPPER(qid_valid, (struct kqid qid), {
    kern_printk("qid_valid is invoked.\n");
    PRE_WRAPPER_FUNC(qid);
    bool ret = qid_valid(qid);
    POST_WRAPPER_FUNC(qid);
    kern_printk("qid_valid returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_csum_partial_copy_to_user
#define APP_WRAPPER_FOR_csum_partial_copy_to_user
#endif
 
#ifndef APP_WRAPPER_FOR_csum_partial_copy_to_user
#define APP_WRAPPER_FOR_csum_partial_copy_to_user
FUNCTION_WRAPPER(csum_partial_copy_to_user, (const void *src, void *dst, int len, __wsum isum, int *errp), {
    kern_printk("csum_partial_copy_to_user is invoked.\n");
    PRE_WRAPPER_FUNC(src, dst, len, isum, errp);
    __wsum ret = csum_partial_copy_to_user(src, dst, len, isum, errp);
    POST_WRAPPER_FUNC(src, dst, len, isum, errp);
    kern_printk("csum_partial_copy_to_user returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___page_file_mapping
#define APP_WRAPPER_FOR___page_file_mapping
#endif
 
#ifndef APP_WRAPPER_FOR___page_file_mapping
#define APP_WRAPPER_FOR___page_file_mapping
FUNCTION_WRAPPER(__page_file_mapping, (struct page *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__page_file_mapping is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct address_space *ret = __page_file_mapping(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__page_file_mapping returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_cont_write_begin
#define APP_WRAPPER_FOR_cont_write_begin
#endif
 
#ifndef APP_WRAPPER_FOR_cont_write_begin
#define APP_WRAPPER_FOR_cont_write_begin
FUNCTION_WRAPPER(cont_write_begin, (struct file *_arg1, struct address_space *_arg2, loff_t _arg3, unsigned int _arg4, unsigned int _arg5, struct page **_arg6, void **_arg7, get_block_t *_arg8, loff_t *_arg9), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg6);
    TRACES_IF_WATCHPOINT(_arg6);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(_arg6)));
    WRAP_FUNCTION(_arg8);
    kern_printk("cont_write_begin is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9);
    int ret = cont_write_begin(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9);
    kern_printk("cont_write_begin returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg6);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(_arg6)));
    return ret;
})
#endif


#ifndef KERN_ADDR_seq_list_start_head
#define APP_WRAPPER_FOR_seq_list_start_head
#endif
 
#ifndef APP_WRAPPER_FOR_seq_list_start_head
#define APP_WRAPPER_FOR_seq_list_start_head
FUNCTION_WRAPPER(seq_list_start_head, (struct list_head *head, loff_t pos), {
    kern_printk("seq_list_start_head is invoked.\n");
    PRE_WRAPPER_FUNC(head, pos);
    struct list_head *ret = seq_list_start_head(head, pos);
    POST_WRAPPER_FUNC(head, pos);
    kern_printk("seq_list_start_head returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_do_IRQ
#define APP_WRAPPER_FOR_do_IRQ
#endif
 
#ifndef APP_WRAPPER_FOR_do_IRQ
#define APP_WRAPPER_FOR_do_IRQ
FUNCTION_WRAPPER(do_IRQ, (struct pt_regs *regs), {
    kern_printk("do_IRQ is invoked.\n");
    PRE_WRAPPER_FUNC(regs);
    int ret = do_IRQ(regs);
    POST_WRAPPER_FUNC(regs);
    kern_printk("do_IRQ returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_paravirt_get_lazy_mode
#define APP_WRAPPER_FOR_paravirt_get_lazy_mode
#endif
 
#ifndef APP_WRAPPER_FOR_paravirt_get_lazy_mode
#define APP_WRAPPER_FOR_paravirt_get_lazy_mode
FUNCTION_WRAPPER(paravirt_get_lazy_mode, (), {
    kern_printk("paravirt_get_lazy_mode is invoked.\n");
    PRE_WRAPPER_FUNC();
    enum paravirt_lazy_mode ret = paravirt_get_lazy_mode();
    POST_WRAPPER_FUNC();
    kern_printk("paravirt_get_lazy_mode returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_open
#define APP_WRAPPER_FOR_compat_sys_open
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_open
#define APP_WRAPPER_FOR_compat_sys_open
FUNCTION_WRAPPER(compat_sys_open, (const char *filename, int flags, umode_t mode), {
    kern_printk("compat_sys_open is invoked.\n");
    PRE_WRAPPER_FUNC(filename, flags, mode);
    long ret = compat_sys_open(filename, flags, mode);
    POST_WRAPPER_FUNC(filename, flags, mode);
    kern_printk("compat_sys_open returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___set_page_dirty_no_writeback
#define APP_WRAPPER_FOR___set_page_dirty_no_writeback
#endif
 
#ifndef APP_WRAPPER_FOR___set_page_dirty_no_writeback
#define APP_WRAPPER_FOR___set_page_dirty_no_writeback
FUNCTION_WRAPPER(__set_page_dirty_no_writeback, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("__set_page_dirty_no_writeback is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    int ret = __set_page_dirty_no_writeback(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("__set_page_dirty_no_writeback returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_get_task_pid
#define APP_WRAPPER_FOR_get_task_pid
#endif
 
#ifndef APP_WRAPPER_FOR_get_task_pid
#define APP_WRAPPER_FOR_get_task_pid
FUNCTION_WRAPPER(get_task_pid, (struct task_struct *task, enum pid_type type), {
    WRAP_RECURSIVE(task);
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    kern_printk("get_task_pid is invoked.\n");
    PRE_WRAPPER_FUNC(task, type);
    struct pid *ret = get_task_pid(task, type);
    POST_WRAPPER_FUNC(task, type);
    kern_printk("get_task_pid returned.\n");
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_xen_biovec_phys_mergeable
#define APP_WRAPPER_FOR_xen_biovec_phys_mergeable
#endif
 
#ifndef APP_WRAPPER_FOR_xen_biovec_phys_mergeable
#define APP_WRAPPER_FOR_xen_biovec_phys_mergeable
FUNCTION_WRAPPER(xen_biovec_phys_mergeable, (const struct bio_vec *vec1, const struct bio_vec *vec2), {
    WRAP_RECURSIVE(vec1);
    TRACES_IF_WATCHPOINT(vec1);
    SCAN_HEAD_FUNC(const struct bio_vec)(*(TO_UNWATCHED_ADDRESS(vec1)));
    WRAP_RECURSIVE(vec2);
    TRACES_IF_WATCHPOINT(vec2);
    SCAN_HEAD_FUNC(const struct bio_vec)(*(TO_UNWATCHED_ADDRESS(vec2)));
    kern_printk("xen_biovec_phys_mergeable is invoked.\n");
    PRE_WRAPPER_FUNC(vec1, vec2);
    bool ret = xen_biovec_phys_mergeable(vec1, vec2);
    POST_WRAPPER_FUNC(vec1, vec2);
    kern_printk("xen_biovec_phys_mergeable returned.\n");
    TRACES_IF_WATCHPOINT(vec1);
    SCAN_HEAD_FUNC(const struct bio_vec)(*(TO_UNWATCHED_ADDRESS(vec1)));
    TRACES_IF_WATCHPOINT(vec2);
    SCAN_HEAD_FUNC(const struct bio_vec)(*(TO_UNWATCHED_ADDRESS(vec2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_gnet_stats_finish_copy
#define APP_WRAPPER_FOR_gnet_stats_finish_copy
#endif
 
#ifndef APP_WRAPPER_FOR_gnet_stats_finish_copy
#define APP_WRAPPER_FOR_gnet_stats_finish_copy
FUNCTION_WRAPPER(gnet_stats_finish_copy, (struct gnet_dump *d), {
    WRAP_RECURSIVE(d);
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct gnet_dump)(*(TO_UNWATCHED_ADDRESS(d)));
    kern_printk("gnet_stats_finish_copy is invoked.\n");
    PRE_WRAPPER_FUNC(d);
    int ret = gnet_stats_finish_copy(d);
    POST_WRAPPER_FUNC(d);
    kern_printk("gnet_stats_finish_copy returned.\n");
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct gnet_dump)(*(TO_UNWATCHED_ADDRESS(d)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cache_show
#define APP_WRAPPER_FOR_cache_show
#endif
 
#ifndef APP_WRAPPER_FOR_cache_show
#define APP_WRAPPER_FOR_cache_show
FUNCTION_WRAPPER(cache_show, (struct kmem_cache *s, struct seq_file *m), {
    WRAP_RECURSIVE(s);
    TRACES_IF_WATCHPOINT(s);
    SCAN_HEAD_FUNC(struct kmem_cache)(*(TO_UNWATCHED_ADDRESS(s)));
    WRAP_RECURSIVE(m);
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
    kern_printk("cache_show is invoked.\n");
    PRE_WRAPPER_FUNC(s, m);
    int ret = cache_show(s, m);
    POST_WRAPPER_FUNC(s, m);
    kern_printk("cache_show returned.\n");
    TRACES_IF_WATCHPOINT(s);
    SCAN_HEAD_FUNC(struct kmem_cache)(*(TO_UNWATCHED_ADDRESS(s)));
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
    return ret;
})
#endif


#ifndef KERN_ADDR_input_flush_device
#define APP_WRAPPER_FOR_input_flush_device
#endif
 
#ifndef APP_WRAPPER_FOR_input_flush_device
#define APP_WRAPPER_FOR_input_flush_device
FUNCTION_WRAPPER(input_flush_device, (struct input_handle *handle, struct file *file), {
    WRAP_RECURSIVE(handle);
    TRACES_IF_WATCHPOINT(handle);
    SCAN_HEAD_FUNC(struct input_handle)(*(TO_UNWATCHED_ADDRESS(handle)));
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("input_flush_device is invoked.\n");
    PRE_WRAPPER_FUNC(handle, file);
    int ret = input_flush_device(handle, file);
    POST_WRAPPER_FUNC(handle, file);
    kern_printk("input_flush_device returned.\n");
    TRACES_IF_WATCHPOINT(handle);
    SCAN_HEAD_FUNC(struct input_handle)(*(TO_UNWATCHED_ADDRESS(handle)));
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR__raw_spin_lock
#define APP_WRAPPER_FOR__raw_spin_lock
#endif
 
#ifndef APP_WRAPPER_FOR__raw_spin_lock
#define APP_WRAPPER_FOR__raw_spin_lock
FUNCTION_WRAPPER_VOID(_raw_spin_lock, (raw_spinlock_t *lock), {
    kern_printk("_raw_spin_lock is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    _raw_spin_lock(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("_raw_spin_lock returned.\n");
})
#endif


#ifndef KERN_ADDR_set_mm_exe_file
#define APP_WRAPPER_FOR_set_mm_exe_file
#endif
 
#ifndef APP_WRAPPER_FOR_set_mm_exe_file
#define APP_WRAPPER_FOR_set_mm_exe_file
FUNCTION_WRAPPER_VOID(set_mm_exe_file, (struct mm_struct *mm, struct file *new_exe_file), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    WRAP_RECURSIVE(new_exe_file);
    TRACES_IF_WATCHPOINT(new_exe_file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(new_exe_file)));
    kern_printk("set_mm_exe_file is invoked.\n");
    PRE_WRAPPER_FUNC(mm, new_exe_file);
    set_mm_exe_file(mm, new_exe_file);
    POST_WRAPPER_FUNC(mm, new_exe_file);
    kern_printk("set_mm_exe_file returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    TRACES_IF_WATCHPOINT(new_exe_file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(new_exe_file)));
})
#endif


#ifndef KERN_ADDR_blk_queue_start_tag
#define APP_WRAPPER_FOR_blk_queue_start_tag
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_start_tag
#define APP_WRAPPER_FOR_blk_queue_start_tag
FUNCTION_WRAPPER(blk_queue_start_tag, (struct request_queue *_arg1, struct request *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("blk_queue_start_tag is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = blk_queue_start_tag(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_queue_start_tag returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_csk_reset_keepalive_timer
#define APP_WRAPPER_FOR_inet_csk_reset_keepalive_timer
#endif
 
#ifndef APP_WRAPPER_FOR_inet_csk_reset_keepalive_timer
#define APP_WRAPPER_FOR_inet_csk_reset_keepalive_timer
FUNCTION_WRAPPER_VOID(inet_csk_reset_keepalive_timer, (struct sock *sk, unsigned long timeout), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("inet_csk_reset_keepalive_timer is invoked.\n");
    PRE_WRAPPER_FUNC(sk, timeout);
    inet_csk_reset_keepalive_timer(sk, timeout);
    POST_WRAPPER_FUNC(sk, timeout);
    kern_printk("inet_csk_reset_keepalive_timer returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR_lock_rename
#define APP_WRAPPER_FOR_lock_rename
#endif
 
#ifndef APP_WRAPPER_FOR_lock_rename
#define APP_WRAPPER_FOR_lock_rename
FUNCTION_WRAPPER(lock_rename, (struct dentry *_arg1, struct dentry *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("lock_rename is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct dentry *ret = lock_rename(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("lock_rename returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ndo_dflt_bridge_getlink
#define APP_WRAPPER_FOR_ndo_dflt_bridge_getlink
#endif
 
#ifndef APP_WRAPPER_FOR_ndo_dflt_bridge_getlink
#define APP_WRAPPER_FOR_ndo_dflt_bridge_getlink
FUNCTION_WRAPPER(ndo_dflt_bridge_getlink, (struct sk_buff *skb, u32 pid, u32 seq, struct net_device *dev, u16 mode), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("ndo_dflt_bridge_getlink is invoked.\n");
    PRE_WRAPPER_FUNC(skb, pid, seq, dev, mode);
    int ret = ndo_dflt_bridge_getlink(skb, pid, seq, dev, mode);
    POST_WRAPPER_FUNC(skb, pid, seq, dev, mode);
    kern_printk("ndo_dflt_bridge_getlink returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_up_write
#define APP_WRAPPER_FOR_up_write
#endif
 
#ifndef APP_WRAPPER_FOR_up_write
#define APP_WRAPPER_FOR_up_write
FUNCTION_WRAPPER_VOID(up_write, (struct rw_semaphore *sem), {
    kern_printk("up_write is invoked.\n");
    PRE_WRAPPER_FUNC(sem);
    up_write(sem);
    POST_WRAPPER_FUNC(sem);
    kern_printk("up_write returned.\n");
})
#endif


#ifndef KERN_ADDR_strstr
#define APP_WRAPPER_FOR_strstr
#endif
 
#ifndef APP_WRAPPER_FOR_strstr
#define APP_WRAPPER_FOR_strstr
FUNCTION_WRAPPER(strstr, (const char *_arg1, const char *_arg2), {
    kern_printk("strstr is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    char *ret = strstr(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("strstr returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_remove_vm_area
#define APP_WRAPPER_FOR_remove_vm_area
#endif
 
#ifndef APP_WRAPPER_FOR_remove_vm_area
#define APP_WRAPPER_FOR_remove_vm_area
FUNCTION_WRAPPER(remove_vm_area, (const void *addr), {
    kern_printk("remove_vm_area is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    struct vm_struct *ret = remove_vm_area(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("remove_vm_area returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_down_timeout
#define APP_WRAPPER_FOR_down_timeout
#endif
 
#ifndef APP_WRAPPER_FOR_down_timeout
#define APP_WRAPPER_FOR_down_timeout
FUNCTION_WRAPPER(down_timeout, (struct semaphore *sem, long jiffies), {
    kern_printk("down_timeout is invoked.\n");
    PRE_WRAPPER_FUNC(sem, jiffies);
    int ret = down_timeout(sem, jiffies);
    POST_WRAPPER_FUNC(sem, jiffies);
    kern_printk("down_timeout returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dquot_alloc_inode
#define APP_WRAPPER_FOR_dquot_alloc_inode
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_alloc_inode
#define APP_WRAPPER_FOR_dquot_alloc_inode
FUNCTION_WRAPPER(dquot_alloc_inode, (const struct inode *inode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(const struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("dquot_alloc_inode is invoked.\n");
    PRE_WRAPPER_FUNC(inode);
    int ret = dquot_alloc_inode(inode);
    POST_WRAPPER_FUNC(inode);
    kern_printk("dquot_alloc_inode returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(const struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blkdev_fsync
#define APP_WRAPPER_FOR_blkdev_fsync
#endif
 
#ifndef APP_WRAPPER_FOR_blkdev_fsync
#define APP_WRAPPER_FOR_blkdev_fsync
FUNCTION_WRAPPER(blkdev_fsync, (struct file *filp, loff_t start, loff_t end, int datasync), {
    WRAP_RECURSIVE(filp);
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    kern_printk("blkdev_fsync is invoked.\n");
    PRE_WRAPPER_FUNC(filp, start, end, datasync);
    int ret = blkdev_fsync(filp, start, end, datasync);
    POST_WRAPPER_FUNC(filp, start, end, datasync);
    kern_printk("blkdev_fsync returned.\n");
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sysfs_get
#define APP_WRAPPER_FOR_sysfs_get
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_get
#define APP_WRAPPER_FOR_sysfs_get
FUNCTION_WRAPPER(sysfs_get, (struct sysfs_dirent *sd), {
    kern_printk("sysfs_get is invoked.\n");
    PRE_WRAPPER_FUNC(sd);
    struct sysfs_dirent *ret = sysfs_get(sd);
    POST_WRAPPER_FUNC(sd);
    kern_printk("sysfs_get returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_rtnl_link_get_net
#define APP_WRAPPER_FOR_rtnl_link_get_net
#endif
 
#ifndef APP_WRAPPER_FOR_rtnl_link_get_net
#define APP_WRAPPER_FOR_rtnl_link_get_net
FUNCTION_WRAPPER(rtnl_link_get_net, (struct net *src_net, struct nlattr * tb[]), {
    WRAP_RECURSIVE(src_net);
    TRACES_IF_WATCHPOINT(src_net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(src_net)));
    kern_printk("rtnl_link_get_net is invoked.\n");
    PRE_WRAPPER_FUNC(src_net, tb);
    struct net *ret = rtnl_link_get_net(src_net, tb);
    POST_WRAPPER_FUNC(src_net, tb);
    kern_printk("rtnl_link_get_net returned.\n");
    TRACES_IF_WATCHPOINT(src_net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(src_net)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_default_idle
#define APP_WRAPPER_FOR_default_idle
#endif
 
#ifndef APP_WRAPPER_FOR_default_idle
#define APP_WRAPPER_FOR_default_idle
FUNCTION_WRAPPER_VOID(default_idle, (), {
    kern_printk("default_idle is invoked.\n");
    PRE_WRAPPER_FUNC();
    default_idle();
    POST_WRAPPER_FUNC();
    kern_printk("default_idle returned.\n");
})
#endif


#ifndef KERN_ADDR_ktime_get_update_offsets
#define APP_WRAPPER_FOR_ktime_get_update_offsets
#endif
 
#ifndef APP_WRAPPER_FOR_ktime_get_update_offsets
#define APP_WRAPPER_FOR_ktime_get_update_offsets
FUNCTION_WRAPPER(ktime_get_update_offsets, (ktime_t *offs_real, ktime_t *offs_boot), {
    kern_printk("ktime_get_update_offsets is invoked.\n");
    PRE_WRAPPER_FUNC(offs_real, offs_boot);
    ktime_t ret = ktime_get_update_offsets(offs_real, offs_boot);
    POST_WRAPPER_FUNC(offs_real, offs_boot);
    kern_printk("ktime_get_update_offsets returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___jbd2_journal_remove_checkpoint
#define APP_WRAPPER_FOR___jbd2_journal_remove_checkpoint
#endif
 
#ifndef APP_WRAPPER_FOR___jbd2_journal_remove_checkpoint
#define APP_WRAPPER_FOR___jbd2_journal_remove_checkpoint
FUNCTION_WRAPPER(__jbd2_journal_remove_checkpoint, (struct journal_head *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__jbd2_journal_remove_checkpoint is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = __jbd2_journal_remove_checkpoint(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__jbd2_journal_remove_checkpoint returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR___get_user_bad
#define APP_WRAPPER_FOR___get_user_bad
#endif
 
#ifndef APP_WRAPPER_FOR___get_user_bad
#define APP_WRAPPER_FOR___get_user_bad
FUNCTION_WRAPPER(__get_user_bad, (), {
    kern_printk("__get_user_bad is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = __get_user_bad();
    POST_WRAPPER_FUNC();
    kern_printk("__get_user_bad returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___filemap_fdatawrite_range
#define APP_WRAPPER_FOR___filemap_fdatawrite_range
#endif
 
#ifndef APP_WRAPPER_FOR___filemap_fdatawrite_range
#define APP_WRAPPER_FOR___filemap_fdatawrite_range
FUNCTION_WRAPPER(__filemap_fdatawrite_range, (struct address_space *mapping, loff_t start, loff_t end, int sync_mode), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("__filemap_fdatawrite_range is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, start, end, sync_mode);
    int ret = __filemap_fdatawrite_range(mapping, start, end, sync_mode);
    POST_WRAPPER_FUNC(mapping, start, end, sync_mode);
    kern_printk("__filemap_fdatawrite_range returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pcpu_get_vm_areas
#define APP_WRAPPER_FOR_pcpu_get_vm_areas
#endif
 
#ifndef APP_WRAPPER_FOR_pcpu_get_vm_areas
#define APP_WRAPPER_FOR_pcpu_get_vm_areas
FUNCTION_WRAPPER(pcpu_get_vm_areas, (unsigned const long *offsets, const size_t *sizes, int nr_vms, size_t align), {
    kern_printk("pcpu_get_vm_areas is invoked.\n");
    PRE_WRAPPER_FUNC(offsets, sizes, nr_vms, align);
    struct vm_struct **ret = pcpu_get_vm_areas(offsets, sizes, nr_vms, align);
    POST_WRAPPER_FUNC(offsets, sizes, nr_vms, align);
    kern_printk("pcpu_get_vm_areas returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_idle_cpu
#define APP_WRAPPER_FOR_idle_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_idle_cpu
#define APP_WRAPPER_FOR_idle_cpu
FUNCTION_WRAPPER(idle_cpu, (int cpu), {
    kern_printk("idle_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    int ret = idle_cpu(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("idle_cpu returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_rt_mutex_lock_interruptible
#define APP_WRAPPER_FOR_rt_mutex_lock_interruptible
#endif
 
#ifndef APP_WRAPPER_FOR_rt_mutex_lock_interruptible
#define APP_WRAPPER_FOR_rt_mutex_lock_interruptible
FUNCTION_WRAPPER(rt_mutex_lock_interruptible, (struct rt_mutex *lock, int detect_deadlock), {
    WRAP_RECURSIVE(lock);
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct rt_mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
    kern_printk("rt_mutex_lock_interruptible is invoked.\n");
    PRE_WRAPPER_FUNC(lock, detect_deadlock);
    int ret = rt_mutex_lock_interruptible(lock, detect_deadlock);
    POST_WRAPPER_FUNC(lock, detect_deadlock);
    kern_printk("rt_mutex_lock_interruptible returned.\n");
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct rt_mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_timerfd_settime
#define APP_WRAPPER_FOR_compat_sys_timerfd_settime
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_timerfd_settime
#define APP_WRAPPER_FOR_compat_sys_timerfd_settime
FUNCTION_WRAPPER(compat_sys_timerfd_settime, (int ufd, int flags, const struct compat_itimerspec *utmr, struct compat_itimerspec *otmr), {
    kern_printk("compat_sys_timerfd_settime is invoked.\n");
    PRE_WRAPPER_FUNC(ufd, flags, utmr, otmr);
    long ret = compat_sys_timerfd_settime(ufd, flags, utmr, otmr);
    POST_WRAPPER_FUNC(ufd, flags, utmr, otmr);
    kern_printk("compat_sys_timerfd_settime returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_get_compat_sigevent
#define APP_WRAPPER_FOR_get_compat_sigevent
#endif
 
#ifndef APP_WRAPPER_FOR_get_compat_sigevent
#define APP_WRAPPER_FOR_get_compat_sigevent
FUNCTION_WRAPPER(get_compat_sigevent, (struct sigevent *event, const struct compat_sigevent *u_event), {
    kern_printk("get_compat_sigevent is invoked.\n");
    PRE_WRAPPER_FUNC(event, u_event);
    int ret = get_compat_sigevent(event, u_event);
    POST_WRAPPER_FUNC(event, u_event);
    kern_printk("get_compat_sigevent returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_bus_find_device_by_name
#define APP_WRAPPER_FOR_bus_find_device_by_name
#endif
 
#ifndef APP_WRAPPER_FOR_bus_find_device_by_name
#define APP_WRAPPER_FOR_bus_find_device_by_name
FUNCTION_WRAPPER(bus_find_device_by_name, (struct bus_type *bus, struct device *start, const char *name), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    WRAP_RECURSIVE(start);
    TRACES_IF_WATCHPOINT(start);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(start)));
    kern_printk("bus_find_device_by_name is invoked.\n");
    PRE_WRAPPER_FUNC(bus, start, name);
    struct device *ret = bus_find_device_by_name(bus, start, name);
    POST_WRAPPER_FUNC(bus, start, name);
    kern_printk("bus_find_device_by_name returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    TRACES_IF_WATCHPOINT(start);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(start)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___kernel_text_address
#define APP_WRAPPER_FOR___kernel_text_address
#endif
 
#ifndef APP_WRAPPER_FOR___kernel_text_address
#define APP_WRAPPER_FOR___kernel_text_address
FUNCTION_WRAPPER(__kernel_text_address, (unsigned long addr), {
    kern_printk("__kernel_text_address is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    int ret = __kernel_text_address(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("__kernel_text_address returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_remove_pm_notifier
#define APP_WRAPPER_FOR_acpi_remove_pm_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_remove_pm_notifier
#define APP_WRAPPER_FOR_acpi_remove_pm_notifier
FUNCTION_WRAPPER(acpi_remove_pm_notifier, (struct acpi_device *adev, acpi_notify_handler handler), {
    WRAP_RECURSIVE(adev);
    TRACES_IF_WATCHPOINT(adev);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(adev)));
    WRAP_FUNCTION(handler);
    kern_printk("acpi_remove_pm_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(adev, handler);
    acpi_status ret = acpi_remove_pm_notifier(adev, handler);
    POST_WRAPPER_FUNC(adev, handler);
    kern_printk("acpi_remove_pm_notifier returned.\n");
    TRACES_IF_WATCHPOINT(adev);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(adev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bdi_register
#define APP_WRAPPER_FOR_bdi_register
#endif
 
#ifndef APP_WRAPPER_FOR_bdi_register
#define APP_WRAPPER_FOR_bdi_register
FUNCTION_WRAPPER(bdi_register, (struct backing_dev_info *bdi, struct device *parent, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    WRAP_RECURSIVE(bdi);
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(parent)));
    // TODO: variadic arguments
    kern_printk("bdi_register is invoked.\n");
    PRE_WRAPPER_FUNC(bdi, parent, fmt);
    int ret = bdi_register(bdi, parent, fmt);
    POST_WRAPPER_FUNC(bdi, parent, fmt);
    kern_printk("bdi_register returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(parent)));
    return ret;
})
#endif


#ifndef KERN_ADDR_unregister_exec_domain
#define APP_WRAPPER_FOR_unregister_exec_domain
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_exec_domain
#define APP_WRAPPER_FOR_unregister_exec_domain
FUNCTION_WRAPPER(unregister_exec_domain, (struct exec_domain *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct exec_domain)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("unregister_exec_domain is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = unregister_exec_domain(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("unregister_exec_domain returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct exec_domain)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pm_restore_gfp_mask
#define APP_WRAPPER_FOR_pm_restore_gfp_mask
#endif
 
#ifndef APP_WRAPPER_FOR_pm_restore_gfp_mask
#define APP_WRAPPER_FOR_pm_restore_gfp_mask
FUNCTION_WRAPPER_VOID(pm_restore_gfp_mask, (), {
    kern_printk("pm_restore_gfp_mask is invoked.\n");
    PRE_WRAPPER_FUNC();
    pm_restore_gfp_mask();
    POST_WRAPPER_FUNC();
    kern_printk("pm_restore_gfp_mask returned.\n");
})
#endif


#ifndef KERN_ADDR_pm_generic_thaw_early
#define APP_WRAPPER_FOR_pm_generic_thaw_early
#endif
 
#ifndef APP_WRAPPER_FOR_pm_generic_thaw_early
#define APP_WRAPPER_FOR_pm_generic_thaw_early
FUNCTION_WRAPPER(pm_generic_thaw_early, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pm_generic_thaw_early is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pm_generic_thaw_early(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pm_generic_thaw_early returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sysfs_remove_bin_file
#define APP_WRAPPER_FOR_sysfs_remove_bin_file
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_remove_bin_file
#define APP_WRAPPER_FOR_sysfs_remove_bin_file
FUNCTION_WRAPPER_VOID(sysfs_remove_bin_file, (struct kobject *kobj, const struct bin_attribute *attr), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    WRAP_RECURSIVE(attr);
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(const struct bin_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    kern_printk("sysfs_remove_bin_file is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, attr);
    sysfs_remove_bin_file(kobj, attr);
    POST_WRAPPER_FUNC(kobj, attr);
    kern_printk("sysfs_remove_bin_file returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(const struct bin_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
})
#endif


#ifndef KERN_ADDR_acpi_os_wait_semaphore
#define APP_WRAPPER_FOR_acpi_os_wait_semaphore
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_wait_semaphore
#define APP_WRAPPER_FOR_acpi_os_wait_semaphore
FUNCTION_WRAPPER(acpi_os_wait_semaphore, (void *handle, u32 units, u16 timeout), {
    kern_printk("acpi_os_wait_semaphore is invoked.\n");
    PRE_WRAPPER_FUNC(handle, units, timeout);
    acpi_status ret = acpi_os_wait_semaphore(handle, units, timeout);
    POST_WRAPPER_FUNC(handle, units, timeout);
    kern_printk("acpi_os_wait_semaphore returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_cow_data
#define APP_WRAPPER_FOR_skb_cow_data
#endif
 
#ifndef APP_WRAPPER_FOR_skb_cow_data
#define APP_WRAPPER_FOR_skb_cow_data
FUNCTION_WRAPPER(skb_cow_data, (struct sk_buff *skb, int tailbits, struct sk_buff **trailer), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_RECURSIVE(trailer);
    TRACES_IF_WATCHPOINT(trailer);
    SCAN_HEAD_FUNC(struct sk_buff *)(*(TO_UNWATCHED_ADDRESS(trailer)));
    kern_printk("skb_cow_data is invoked.\n");
    PRE_WRAPPER_FUNC(skb, tailbits, trailer);
    int ret = skb_cow_data(skb, tailbits, trailer);
    POST_WRAPPER_FUNC(skb, tailbits, trailer);
    kern_printk("skb_cow_data returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    TRACES_IF_WATCHPOINT(trailer);
    SCAN_HEAD_FUNC(struct sk_buff *)(*(TO_UNWATCHED_ADDRESS(trailer)));
    return ret;
})
#endif


#ifndef KERN_ADDR_getrawmonotonic
#define APP_WRAPPER_FOR_getrawmonotonic
#endif
 
#ifndef APP_WRAPPER_FOR_getrawmonotonic
#define APP_WRAPPER_FOR_getrawmonotonic
FUNCTION_WRAPPER_VOID(getrawmonotonic, (struct timespec *ts), {
    kern_printk("getrawmonotonic is invoked.\n");
    PRE_WRAPPER_FUNC(ts);
    getrawmonotonic(ts);
    POST_WRAPPER_FUNC(ts);
    kern_printk("getrawmonotonic returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_vpd_find_info_keyword
#define APP_WRAPPER_FOR_pci_vpd_find_info_keyword
#endif
 
#ifndef APP_WRAPPER_FOR_pci_vpd_find_info_keyword
#define APP_WRAPPER_FOR_pci_vpd_find_info_keyword
FUNCTION_WRAPPER(pci_vpd_find_info_keyword, (const u8 *buf, unsigned int off, unsigned int len, const char *kw), {
    kern_printk("pci_vpd_find_info_keyword is invoked.\n");
    PRE_WRAPPER_FUNC(buf, off, len, kw);
    int ret = pci_vpd_find_info_keyword(buf, off, len, kw);
    POST_WRAPPER_FUNC(buf, off, len, kw);
    kern_printk("pci_vpd_find_info_keyword returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___sync_dirty_buffer
#define APP_WRAPPER_FOR___sync_dirty_buffer
#endif
 
#ifndef APP_WRAPPER_FOR___sync_dirty_buffer
#define APP_WRAPPER_FOR___sync_dirty_buffer
FUNCTION_WRAPPER(__sync_dirty_buffer, (struct buffer_head *bh, int rw), {
    WRAP_RECURSIVE(bh);
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    kern_printk("__sync_dirty_buffer is invoked.\n");
    PRE_WRAPPER_FUNC(bh, rw);
    int ret = __sync_dirty_buffer(bh, rw);
    POST_WRAPPER_FUNC(bh, rw);
    kern_printk("__sync_dirty_buffer returned.\n");
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_pio_need_iordy
#define APP_WRAPPER_FOR_ata_pio_need_iordy
#endif
 
#ifndef APP_WRAPPER_FOR_ata_pio_need_iordy
#define APP_WRAPPER_FOR_ata_pio_need_iordy
FUNCTION_WRAPPER(ata_pio_need_iordy, (const struct ata_device *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct ata_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("ata_pio_need_iordy is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = ata_pio_need_iordy(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("ata_pio_need_iordy returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct ata_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kernel_power_off
#define APP_WRAPPER_FOR_kernel_power_off
#endif
 
#ifndef APP_WRAPPER_FOR_kernel_power_off
#define APP_WRAPPER_FOR_kernel_power_off
FUNCTION_WRAPPER_VOID(kernel_power_off, (), {
    kern_printk("kernel_power_off is invoked.\n");
    PRE_WRAPPER_FUNC();
    kernel_power_off();
    POST_WRAPPER_FUNC();
    kern_printk("kernel_power_off returned.\n");
})
#endif


#ifndef KERN_ADDR_compat_sys_wait4
#define APP_WRAPPER_FOR_compat_sys_wait4
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_wait4
#define APP_WRAPPER_FOR_compat_sys_wait4
FUNCTION_WRAPPER(compat_sys_wait4, (compat_pid_t pid, compat_uint_t *stat_addr, int options, struct compat_rusage *ru), {
    kern_printk("compat_sys_wait4 is invoked.\n");
    PRE_WRAPPER_FUNC(pid, stat_addr, options, ru);
    long ret = compat_sys_wait4(pid, stat_addr, options, ru);
    POST_WRAPPER_FUNC(pid, stat_addr, options, ru);
    kern_printk("compat_sys_wait4 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_mempool_alloc_pages
#define APP_WRAPPER_FOR_mempool_alloc_pages
#endif
 
#ifndef APP_WRAPPER_FOR_mempool_alloc_pages
#define APP_WRAPPER_FOR_mempool_alloc_pages
FUNCTION_WRAPPER(mempool_alloc_pages, (gfp_t gfp_mask, void *pool_data), {
    kern_printk("mempool_alloc_pages is invoked.\n");
    PRE_WRAPPER_FUNC(gfp_mask, pool_data);
    void *ret = mempool_alloc_pages(gfp_mask, pool_data);
    POST_WRAPPER_FUNC(gfp_mask, pool_data);
    kern_printk("mempool_alloc_pages returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_mincore_huge_pmd
#define APP_WRAPPER_FOR_mincore_huge_pmd
#endif
 
#ifndef APP_WRAPPER_FOR_mincore_huge_pmd
#define APP_WRAPPER_FOR_mincore_huge_pmd
FUNCTION_WRAPPER(mincore_huge_pmd, (struct vm_area_struct *vma, pmd_t *pmd, unsigned long addr, unsigned long end, unsigned char *vec), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("mincore_huge_pmd is invoked.\n");
    PRE_WRAPPER_FUNC(vma, pmd, addr, end, vec);
    int ret = mincore_huge_pmd(vma, pmd, addr, end, vec);
    POST_WRAPPER_FUNC(vma, pmd, addr, end, vec);
    kern_printk("mincore_huge_pmd returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_build_ehash_secret
#define APP_WRAPPER_FOR_build_ehash_secret
#endif
 
#ifndef APP_WRAPPER_FOR_build_ehash_secret
#define APP_WRAPPER_FOR_build_ehash_secret
FUNCTION_WRAPPER_VOID(build_ehash_secret, (), {
    kern_printk("build_ehash_secret is invoked.\n");
    PRE_WRAPPER_FUNC();
    build_ehash_secret();
    POST_WRAPPER_FUNC();
    kern_printk("build_ehash_secret returned.\n");
})
#endif


#ifndef KERN_ADDR_kobject_add
#define APP_WRAPPER_FOR_kobject_add
#endif
 
#ifndef APP_WRAPPER_FOR_kobject_add
#define APP_WRAPPER_FOR_kobject_add
FUNCTION_WRAPPER(kobject_add, (struct kobject *kobj, struct kobject *parent, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(parent)));
    // TODO: variadic arguments
    kern_printk("kobject_add is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, parent, fmt);
    int ret = kobject_add(kobj, parent, fmt);
    POST_WRAPPER_FUNC(kobj, parent, fmt);
    kern_printk("kobject_add returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(parent)));
    return ret;
})
#endif


#ifndef KERN_ADDR_radix_tree_preload
#define APP_WRAPPER_FOR_radix_tree_preload
#endif
 
#ifndef APP_WRAPPER_FOR_radix_tree_preload
#define APP_WRAPPER_FOR_radix_tree_preload
FUNCTION_WRAPPER(radix_tree_preload, (gfp_t gfp_mask), {
    kern_printk("radix_tree_preload is invoked.\n");
    PRE_WRAPPER_FUNC(gfp_mask);
    int ret = radix_tree_preload(gfp_mask);
    POST_WRAPPER_FUNC(gfp_mask);
    kern_printk("radix_tree_preload returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_resume_device_irqs
#define APP_WRAPPER_FOR_resume_device_irqs
#endif
 
#ifndef APP_WRAPPER_FOR_resume_device_irqs
#define APP_WRAPPER_FOR_resume_device_irqs
FUNCTION_WRAPPER_VOID(resume_device_irqs, (), {
    kern_printk("resume_device_irqs is invoked.\n");
    PRE_WRAPPER_FUNC();
    resume_device_irqs();
    POST_WRAPPER_FUNC();
    kern_printk("resume_device_irqs returned.\n");
})
#endif


#ifndef KERN_ADDR_vm_is_stack
#define APP_WRAPPER_FOR_vm_is_stack
#endif
 
#ifndef APP_WRAPPER_FOR_vm_is_stack
#define APP_WRAPPER_FOR_vm_is_stack
FUNCTION_WRAPPER(vm_is_stack, (struct task_struct *task, struct vm_area_struct *vma, int in_group), {
    WRAP_RECURSIVE(task);
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("vm_is_stack is invoked.\n");
    PRE_WRAPPER_FUNC(task, vma, in_group);
    pid_t ret = vm_is_stack(task, vma, in_group);
    POST_WRAPPER_FUNC(task, vma, in_group);
    kern_printk("vm_is_stack returned.\n");
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_rcu_nmi_enter
#define APP_WRAPPER_FOR_rcu_nmi_enter
#endif
 
#ifndef APP_WRAPPER_FOR_rcu_nmi_enter
#define APP_WRAPPER_FOR_rcu_nmi_enter
FUNCTION_WRAPPER_VOID(rcu_nmi_enter, (), {
    kern_printk("rcu_nmi_enter is invoked.\n");
    PRE_WRAPPER_FUNC();
    rcu_nmi_enter();
    POST_WRAPPER_FUNC();
    kern_printk("rcu_nmi_enter returned.\n");
})
#endif


#ifndef KERN_ADDR___request_module
#define APP_WRAPPER_FOR___request_module
#endif
 
#ifndef APP_WRAPPER_FOR___request_module
#define APP_WRAPPER_FOR___request_module
FUNCTION_WRAPPER(__request_module, (bool wait, const char *name, ...), {
    va_list args__;
    va_start(args__, name);
    // TODO: variadic arguments
    kern_printk("__request_module is invoked.\n");
    PRE_WRAPPER_FUNC(wait, name);
    int ret = __request_module(wait, name);
    POST_WRAPPER_FUNC(wait, name);
    kern_printk("__request_module returned.\n");
    va_end(args__);
    return ret;
})
#endif


#ifndef KERN_ADDR_xlate_dev_mem_ptr
#define APP_WRAPPER_FOR_xlate_dev_mem_ptr
#endif
 
#ifndef APP_WRAPPER_FOR_xlate_dev_mem_ptr
#define APP_WRAPPER_FOR_xlate_dev_mem_ptr
FUNCTION_WRAPPER(xlate_dev_mem_ptr, (unsigned long phys), {
    kern_printk("xlate_dev_mem_ptr is invoked.\n");
    PRE_WRAPPER_FUNC(phys);
    void *ret = xlate_dev_mem_ptr(phys);
    POST_WRAPPER_FUNC(phys);
    kern_printk("xlate_dev_mem_ptr returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_numa_init
#define APP_WRAPPER_FOR_acpi_numa_init
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_numa_init
#define APP_WRAPPER_FOR_acpi_numa_init
FUNCTION_WRAPPER(acpi_numa_init, (), {
    kern_printk("acpi_numa_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = acpi_numa_init();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_numa_init returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_match_octal
#define APP_WRAPPER_FOR_match_octal
#endif
 
#ifndef APP_WRAPPER_FOR_match_octal
#define APP_WRAPPER_FOR_match_octal
FUNCTION_WRAPPER(match_octal, (substring_t *_arg1, int *result), {
    kern_printk("match_octal is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, result);
    int ret = match_octal(_arg1, result);
    POST_WRAPPER_FUNC(_arg1, result);
    kern_printk("match_octal returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___bus_register
#define APP_WRAPPER_FOR___bus_register
#endif
 
#ifndef APP_WRAPPER_FOR___bus_register
#define APP_WRAPPER_FOR___bus_register
FUNCTION_WRAPPER(__bus_register, (struct bus_type *bus, struct lock_class_key *key), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("__bus_register is invoked.\n");
    PRE_WRAPPER_FUNC(bus, key);
    int ret = __bus_register(bus, key);
    POST_WRAPPER_FUNC(bus, key);
    kern_printk("__bus_register returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    return ret;
})
#endif


#ifndef KERN_ADDR_prandom_bytes
#define APP_WRAPPER_FOR_prandom_bytes
#endif
 
#ifndef APP_WRAPPER_FOR_prandom_bytes
#define APP_WRAPPER_FOR_prandom_bytes
FUNCTION_WRAPPER_VOID(prandom_bytes, (void *buf, int nbytes), {
    kern_printk("prandom_bytes is invoked.\n");
    PRE_WRAPPER_FUNC(buf, nbytes);
    prandom_bytes(buf, nbytes);
    POST_WRAPPER_FUNC(buf, nbytes);
    kern_printk("prandom_bytes returned.\n");
})
#endif


#ifndef KERN_ADDR_do_get_thread_area
#define APP_WRAPPER_FOR_do_get_thread_area
#endif
 
#ifndef APP_WRAPPER_FOR_do_get_thread_area
#define APP_WRAPPER_FOR_do_get_thread_area
FUNCTION_WRAPPER(do_get_thread_area, (struct task_struct *p, int idx, struct user_desc *info), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("do_get_thread_area is invoked.\n");
    PRE_WRAPPER_FUNC(p, idx, info);
    int ret = do_get_thread_area(p, idx, info);
    POST_WRAPPER_FUNC(p, idx, info);
    kern_printk("do_get_thread_area returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_table_get
#define APP_WRAPPER_FOR_dm_table_get
#endif
 
#ifndef APP_WRAPPER_FOR_dm_table_get
#define APP_WRAPPER_FOR_dm_table_get
FUNCTION_WRAPPER_VOID(dm_table_get, (struct dm_table *t), {
    kern_printk("dm_table_get is invoked.\n");
    PRE_WRAPPER_FUNC(t);
    dm_table_get(t);
    POST_WRAPPER_FUNC(t);
    kern_printk("dm_table_get returned.\n");
})
#endif


#ifndef KERN_ADDR_sg_alloc_table
#define APP_WRAPPER_FOR_sg_alloc_table
#endif
 
#ifndef APP_WRAPPER_FOR_sg_alloc_table
#define APP_WRAPPER_FOR_sg_alloc_table
FUNCTION_WRAPPER(sg_alloc_table, (struct sg_table *_arg1, unsigned int _arg2, gfp_t _arg3), {
    kern_printk("sg_alloc_table is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = sg_alloc_table(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("sg_alloc_table returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_bmap
#define APP_WRAPPER_FOR_bmap
#endif
 
#ifndef APP_WRAPPER_FOR_bmap
#define APP_WRAPPER_FOR_bmap
FUNCTION_WRAPPER(bmap, (struct inode *_arg1, sector_t _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bmap is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    sector_t ret = bmap(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("bmap returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_get_log_tail
#define APP_WRAPPER_FOR_jbd2_journal_get_log_tail
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_get_log_tail
#define APP_WRAPPER_FOR_jbd2_journal_get_log_tail
FUNCTION_WRAPPER(jbd2_journal_get_log_tail, (journal_t *journal, tid_t *tid, unsigned long *block), {
    WRAP_RECURSIVE(journal);
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    kern_printk("jbd2_journal_get_log_tail is invoked.\n");
    PRE_WRAPPER_FUNC(journal, tid, block);
    int ret = jbd2_journal_get_log_tail(journal, tid, block);
    POST_WRAPPER_FUNC(journal, tid, block);
    kern_printk("jbd2_journal_get_log_tail returned.\n");
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    return ret;
})
#endif


#ifndef KERN_ADDR_round_jiffies_relative
#define APP_WRAPPER_FOR_round_jiffies_relative
#endif
 
#ifndef APP_WRAPPER_FOR_round_jiffies_relative
#define APP_WRAPPER_FOR_round_jiffies_relative
FUNCTION_WRAPPER(round_jiffies_relative, (unsigned long j), {
    kern_printk("round_jiffies_relative is invoked.\n");
    PRE_WRAPPER_FUNC(j);
    long ret = round_jiffies_relative(j);
    POST_WRAPPER_FUNC(j);
    kern_printk("round_jiffies_relative returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_kernel_sock_ioctl
#define APP_WRAPPER_FOR_kernel_sock_ioctl
#endif
 
#ifndef APP_WRAPPER_FOR_kernel_sock_ioctl
#define APP_WRAPPER_FOR_kernel_sock_ioctl
FUNCTION_WRAPPER(kernel_sock_ioctl, (struct socket *sock, int cmd, unsigned long arg), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    kern_printk("kernel_sock_ioctl is invoked.\n");
    PRE_WRAPPER_FUNC(sock, cmd, arg);
    int ret = kernel_sock_ioctl(sock, cmd, arg);
    POST_WRAPPER_FUNC(sock, cmd, arg);
    kern_printk("kernel_sock_ioctl returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_ack_err
#define APP_WRAPPER_FOR_jbd2_journal_ack_err
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_ack_err
#define APP_WRAPPER_FOR_jbd2_journal_ack_err
FUNCTION_WRAPPER_VOID(jbd2_journal_ack_err, (journal_t *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_ack_err is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    jbd2_journal_ack_err(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("jbd2_journal_ack_err returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_simple_transaction_get
#define APP_WRAPPER_FOR_simple_transaction_get
#endif
 
#ifndef APP_WRAPPER_FOR_simple_transaction_get
#define APP_WRAPPER_FOR_simple_transaction_get
FUNCTION_WRAPPER(simple_transaction_get, (struct file *file, const char *buf, size_t size), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("simple_transaction_get is invoked.\n");
    PRE_WRAPPER_FUNC(file, buf, size);
    char *ret = simple_transaction_get(file, buf, size);
    POST_WRAPPER_FUNC(file, buf, size);
    kern_printk("simple_transaction_get returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_bd_unlink_disk_holder
#define APP_WRAPPER_FOR_bd_unlink_disk_holder
#endif
 
#ifndef APP_WRAPPER_FOR_bd_unlink_disk_holder
#define APP_WRAPPER_FOR_bd_unlink_disk_holder
FUNCTION_WRAPPER_VOID(bd_unlink_disk_holder, (struct block_device *bdev, struct gendisk *disk), {
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    WRAP_RECURSIVE(disk);
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    kern_printk("bd_unlink_disk_holder is invoked.\n");
    PRE_WRAPPER_FUNC(bdev, disk);
    bd_unlink_disk_holder(bdev, disk);
    POST_WRAPPER_FUNC(bdev, disk);
    kern_printk("bd_unlink_disk_holder returned.\n");
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
})
#endif


#ifndef KERN_ADDR_sigsuspend
#define APP_WRAPPER_FOR_sigsuspend
#endif
 
#ifndef APP_WRAPPER_FOR_sigsuspend
#define APP_WRAPPER_FOR_sigsuspend
FUNCTION_WRAPPER(sigsuspend, (sigset_t *_arg1), {
    kern_printk("sigsuspend is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = sigsuspend(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("sigsuspend returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dquot_mark_dquot_dirty
#define APP_WRAPPER_FOR_dquot_mark_dquot_dirty
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_mark_dquot_dirty
#define APP_WRAPPER_FOR_dquot_mark_dquot_dirty
FUNCTION_WRAPPER(dquot_mark_dquot_dirty, (struct dquot *dquot), {
    WRAP_RECURSIVE(dquot);
    TRACES_IF_WATCHPOINT(dquot);
    SCAN_HEAD_FUNC(struct dquot)(*(TO_UNWATCHED_ADDRESS(dquot)));
    kern_printk("dquot_mark_dquot_dirty is invoked.\n");
    PRE_WRAPPER_FUNC(dquot);
    int ret = dquot_mark_dquot_dirty(dquot);
    POST_WRAPPER_FUNC(dquot);
    kern_printk("dquot_mark_dquot_dirty returned.\n");
    TRACES_IF_WATCHPOINT(dquot);
    SCAN_HEAD_FUNC(struct dquot)(*(TO_UNWATCHED_ADDRESS(dquot)));
    return ret;
})
#endif


#ifndef KERN_ADDR_scsi_free_host_dev
#define APP_WRAPPER_FOR_scsi_free_host_dev
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_free_host_dev
#define APP_WRAPPER_FOR_scsi_free_host_dev
FUNCTION_WRAPPER_VOID(scsi_free_host_dev, (struct scsi_device *_arg1), {
    kern_printk("scsi_free_host_dev is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    scsi_free_host_dev(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("scsi_free_host_dev returned.\n");
})
#endif


#ifndef KERN_ADDR_sg_init_table
#define APP_WRAPPER_FOR_sg_init_table
#endif
 
#ifndef APP_WRAPPER_FOR_sg_init_table
#define APP_WRAPPER_FOR_sg_init_table
FUNCTION_WRAPPER_VOID(sg_init_table, (struct scatterlist *_arg1, unsigned int _arg2), {
    kern_printk("sg_init_table is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    sg_init_table(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("sg_init_table returned.\n");
})
#endif


#ifndef KERN_ADDR_early_ioremap_reset
#define APP_WRAPPER_FOR_early_ioremap_reset
#endif
 
#ifndef APP_WRAPPER_FOR_early_ioremap_reset
#define APP_WRAPPER_FOR_early_ioremap_reset
FUNCTION_WRAPPER_VOID(early_ioremap_reset, (), {
    kern_printk("early_ioremap_reset is invoked.\n");
    PRE_WRAPPER_FUNC();
    early_ioremap_reset();
    POST_WRAPPER_FUNC();
    kern_printk("early_ioremap_reset returned.\n");
})
#endif


#ifndef KERN_ADDR_proc_dostring
#define APP_WRAPPER_FOR_proc_dostring
#endif
 
#ifndef APP_WRAPPER_FOR_proc_dostring
#define APP_WRAPPER_FOR_proc_dostring
FUNCTION_WRAPPER(proc_dostring, (struct ctl_table *_arg1, int _arg2, void *_arg3, size_t *_arg4, loff_t *_arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("proc_dostring is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = proc_dostring(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("proc_dostring returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_memcg_update_all_caches
#define APP_WRAPPER_FOR_memcg_update_all_caches
#endif
 
#ifndef APP_WRAPPER_FOR_memcg_update_all_caches
#define APP_WRAPPER_FOR_memcg_update_all_caches
FUNCTION_WRAPPER(memcg_update_all_caches, (int num_memcgs), {
    kern_printk("memcg_update_all_caches is invoked.\n");
    PRE_WRAPPER_FUNC(num_memcgs);
    int ret = memcg_update_all_caches(num_memcgs);
    POST_WRAPPER_FUNC(num_memcgs);
    kern_printk("memcg_update_all_caches returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_suspend
#define APP_WRAPPER_FOR_dm_suspend
#endif
 
#ifndef APP_WRAPPER_FOR_dm_suspend
#define APP_WRAPPER_FOR_dm_suspend
FUNCTION_WRAPPER(dm_suspend, (struct mapped_device *md, unsigned int suspend_flags), {
    kern_printk("dm_suspend is invoked.\n");
    PRE_WRAPPER_FUNC(md, suspend_flags);
    int ret = dm_suspend(md, suspend_flags);
    POST_WRAPPER_FUNC(md, suspend_flags);
    kern_printk("dm_suspend returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_workqueue_set_max_active
#define APP_WRAPPER_FOR_workqueue_set_max_active
#endif
 
#ifndef APP_WRAPPER_FOR_workqueue_set_max_active
#define APP_WRAPPER_FOR_workqueue_set_max_active
FUNCTION_WRAPPER_VOID(workqueue_set_max_active, (struct workqueue_struct *wq, int max_active), {
    kern_printk("workqueue_set_max_active is invoked.\n");
    PRE_WRAPPER_FUNC(wq, max_active);
    workqueue_set_max_active(wq, max_active);
    POST_WRAPPER_FUNC(wq, max_active);
    kern_printk("workqueue_set_max_active returned.\n");
})
#endif


#ifndef KERN_ADDR_pid_ns_prepare_proc
#define APP_WRAPPER_FOR_pid_ns_prepare_proc
#endif
 
#ifndef APP_WRAPPER_FOR_pid_ns_prepare_proc
#define APP_WRAPPER_FOR_pid_ns_prepare_proc
FUNCTION_WRAPPER(pid_ns_prepare_proc, (struct pid_namespace *ns), {
    kern_printk("pid_ns_prepare_proc is invoked.\n");
    PRE_WRAPPER_FUNC(ns);
    int ret = pid_ns_prepare_proc(ns);
    POST_WRAPPER_FUNC(ns);
    kern_printk("pid_ns_prepare_proc returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_scan_bridge
#define APP_WRAPPER_FOR_pci_scan_bridge
#endif
 
#ifndef APP_WRAPPER_FOR_pci_scan_bridge
#define APP_WRAPPER_FOR_pci_scan_bridge
FUNCTION_WRAPPER(pci_scan_bridge, (struct pci_bus *bus, struct pci_dev *dev, int max, int pass), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_scan_bridge is invoked.\n");
    PRE_WRAPPER_FUNC(bus, dev, max, pass);
    int ret = pci_scan_bridge(bus, dev, max, pass);
    POST_WRAPPER_FUNC(bus, dev, max, pass);
    kern_printk("pci_scan_bridge returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_task_sched_runtime
#define APP_WRAPPER_FOR_task_sched_runtime
#endif
 
#ifndef APP_WRAPPER_FOR_task_sched_runtime
#define APP_WRAPPER_FOR_task_sched_runtime
FUNCTION_WRAPPER(task_sched_runtime, (struct task_struct *task), {
    WRAP_RECURSIVE(task);
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    kern_printk("task_sched_runtime is invoked.\n");
    PRE_WRAPPER_FUNC(task);
    long long ret = task_sched_runtime(task);
    POST_WRAPPER_FUNC(task);
    kern_printk("task_sched_runtime returned.\n");
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pgd_clear_bad
#define APP_WRAPPER_FOR_pgd_clear_bad
#endif
 
#ifndef APP_WRAPPER_FOR_pgd_clear_bad
#define APP_WRAPPER_FOR_pgd_clear_bad
FUNCTION_WRAPPER_VOID(pgd_clear_bad, (pgd_t *_arg1), {
    kern_printk("pgd_clear_bad is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    pgd_clear_bad(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("pgd_clear_bad returned.\n");
})
#endif


#ifndef KERN_ADDR_jbd2_journal_stop
#define APP_WRAPPER_FOR_jbd2_journal_stop
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_stop
#define APP_WRAPPER_FOR_jbd2_journal_stop
FUNCTION_WRAPPER(jbd2_journal_stop, (handle_t *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(handle_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_stop is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = jbd2_journal_stop(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("jbd2_journal_stop returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(handle_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pm_generic_resume_early
#define APP_WRAPPER_FOR_pm_generic_resume_early
#endif
 
#ifndef APP_WRAPPER_FOR_pm_generic_resume_early
#define APP_WRAPPER_FOR_pm_generic_resume_early
FUNCTION_WRAPPER(pm_generic_resume_early, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pm_generic_resume_early is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pm_generic_resume_early(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pm_generic_resume_early returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_csum_partial_copy_nocheck
#define APP_WRAPPER_FOR_csum_partial_copy_nocheck
#endif
 
#ifndef APP_WRAPPER_FOR_csum_partial_copy_nocheck
#define APP_WRAPPER_FOR_csum_partial_copy_nocheck
FUNCTION_WRAPPER(csum_partial_copy_nocheck, (const void *src, void *dst, int len, __wsum sum), {
    kern_printk("csum_partial_copy_nocheck is invoked.\n");
    PRE_WRAPPER_FUNC(src, dst, len, sum);
    __wsum ret = csum_partial_copy_nocheck(src, dst, len, sum);
    POST_WRAPPER_FUNC(src, dst, len, sum);
    kern_printk("csum_partial_copy_nocheck returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_netdev_rx_handler_register
#define APP_WRAPPER_FOR_netdev_rx_handler_register
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_rx_handler_register
#define APP_WRAPPER_FOR_netdev_rx_handler_register
FUNCTION_WRAPPER(netdev_rx_handler_register, (struct net_device *dev, rx_handler_func_t *rx_handler, void *rx_handler_data), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_FUNCTION(rx_handler);
    kern_printk("netdev_rx_handler_register is invoked.\n");
    PRE_WRAPPER_FUNC(dev, rx_handler, rx_handler_data);
    int ret = netdev_rx_handler_register(dev, rx_handler, rx_handler_data);
    POST_WRAPPER_FUNC(dev, rx_handler, rx_handler_data);
    kern_printk("netdev_rx_handler_register returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_follow_up
#define APP_WRAPPER_FOR_follow_up
#endif
 
#ifndef APP_WRAPPER_FOR_follow_up
#define APP_WRAPPER_FOR_follow_up
FUNCTION_WRAPPER(follow_up, (struct path *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("follow_up is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = follow_up(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("follow_up returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_copy_ubufs
#define APP_WRAPPER_FOR_skb_copy_ubufs
#endif
 
#ifndef APP_WRAPPER_FOR_skb_copy_ubufs
#define APP_WRAPPER_FOR_skb_copy_ubufs
FUNCTION_WRAPPER(skb_copy_ubufs, (struct sk_buff *skb, gfp_t gfp_mask), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_copy_ubufs is invoked.\n");
    PRE_WRAPPER_FUNC(skb, gfp_mask);
    int ret = skb_copy_ubufs(skb, gfp_mask);
    POST_WRAPPER_FUNC(skb, gfp_mask);
    kern_printk("skb_copy_ubufs returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_cpu_online
#define APP_WRAPPER_FOR_irq_cpu_online
#endif
 
#ifndef APP_WRAPPER_FOR_irq_cpu_online
#define APP_WRAPPER_FOR_irq_cpu_online
FUNCTION_WRAPPER_VOID(irq_cpu_online, (), {
    kern_printk("irq_cpu_online is invoked.\n");
    PRE_WRAPPER_FUNC();
    irq_cpu_online();
    POST_WRAPPER_FUNC();
    kern_printk("irq_cpu_online returned.\n");
})
#endif


#ifndef KERN_ADDR_fasync_insert_entry
#define APP_WRAPPER_FOR_fasync_insert_entry
#endif
 
#ifndef APP_WRAPPER_FOR_fasync_insert_entry
#define APP_WRAPPER_FOR_fasync_insert_entry
FUNCTION_WRAPPER(fasync_insert_entry, (int _arg1, struct file *_arg2, struct fasync_struct **_arg3, struct fasync_struct *_arg4), {
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct fasync_struct *)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    WRAP_RECURSIVE(_arg4);
    TRACES_IF_WATCHPOINT(_arg4);
    SCAN_HEAD_FUNC(struct fasync_struct)(*(TO_UNWATCHED_ADDRESS(_arg4)));
    kern_printk("fasync_insert_entry is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    struct fasync_struct *ret = fasync_insert_entry(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("fasync_insert_entry returned.\n");
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct fasync_struct *)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    TRACES_IF_WATCHPOINT(_arg4);
    SCAN_HEAD_FUNC(struct fasync_struct)(*(TO_UNWATCHED_ADDRESS(_arg4)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_get_by_index_rcu
#define APP_WRAPPER_FOR_dev_get_by_index_rcu
#endif
 
#ifndef APP_WRAPPER_FOR_dev_get_by_index_rcu
#define APP_WRAPPER_FOR_dev_get_by_index_rcu
FUNCTION_WRAPPER(dev_get_by_index_rcu, (struct net *net, int ifindex), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    kern_printk("dev_get_by_index_rcu is invoked.\n");
    PRE_WRAPPER_FUNC(net, ifindex);
    struct net_device *ret = dev_get_by_index_rcu(net, ifindex);
    POST_WRAPPER_FUNC(net, ifindex);
    kern_printk("dev_get_by_index_rcu returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_nla_policy_len
#define APP_WRAPPER_FOR_nla_policy_len
#endif
 
#ifndef APP_WRAPPER_FOR_nla_policy_len
#define APP_WRAPPER_FOR_nla_policy_len
FUNCTION_WRAPPER(nla_policy_len, (const struct nla_policy *_arg1, int _arg2), {
    kern_printk("nla_policy_len is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = nla_policy_len(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("nla_policy_len returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ethtool_op_get_ts_info
#define APP_WRAPPER_FOR_ethtool_op_get_ts_info
#endif
 
#ifndef APP_WRAPPER_FOR_ethtool_op_get_ts_info
#define APP_WRAPPER_FOR_ethtool_op_get_ts_info
FUNCTION_WRAPPER(ethtool_op_get_ts_info, (struct net_device *dev, struct ethtool_ts_info *eti), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("ethtool_op_get_ts_info is invoked.\n");
    PRE_WRAPPER_FUNC(dev, eti);
    int ret = ethtool_op_get_ts_info(dev, eti);
    POST_WRAPPER_FUNC(dev, eti);
    kern_printk("ethtool_op_get_ts_info returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_res_counter_read
#define APP_WRAPPER_FOR_res_counter_read
#endif
 
#ifndef APP_WRAPPER_FOR_res_counter_read
#define APP_WRAPPER_FOR_res_counter_read
FUNCTION_WRAPPER(res_counter_read, (struct res_counter *counter, int member, const char *buf, size_t nbytes, loff_t *pos, int (*read_strategy)(unsigned long long, char *)), {
    WRAP_FUNCTION(read_strategy);
    kern_printk("res_counter_read is invoked.\n");
    PRE_WRAPPER_FUNC(counter, member, buf, nbytes, pos, read_strategy);
    ssize_t ret = res_counter_read(counter, member, buf, nbytes, pos, read_strategy);
    POST_WRAPPER_FUNC(counter, member, buf, nbytes, pos, read_strategy);
    kern_printk("res_counter_read returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_exit_creds
#define APP_WRAPPER_FOR_exit_creds
#endif
 
#ifndef APP_WRAPPER_FOR_exit_creds
#define APP_WRAPPER_FOR_exit_creds
FUNCTION_WRAPPER_VOID(exit_creds, (struct task_struct *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("exit_creds is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    exit_creds(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("exit_creds returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_pci_find_bus
#define APP_WRAPPER_FOR_pci_find_bus
#endif
 
#ifndef APP_WRAPPER_FOR_pci_find_bus
#define APP_WRAPPER_FOR_pci_find_bus
FUNCTION_WRAPPER(pci_find_bus, (int domain, int busnr), {
    kern_printk("pci_find_bus is invoked.\n");
    PRE_WRAPPER_FUNC(domain, busnr);
    struct pci_bus *ret = pci_find_bus(domain, busnr);
    POST_WRAPPER_FUNC(domain, busnr);
    kern_printk("pci_find_bus returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_handle_pte_fault
#define APP_WRAPPER_FOR_handle_pte_fault
#endif
 
#ifndef APP_WRAPPER_FOR_handle_pte_fault
#define APP_WRAPPER_FOR_handle_pte_fault
FUNCTION_WRAPPER(handle_pte_fault, (struct mm_struct *mm, struct vm_area_struct *vma, unsigned long address, pte_t *pte, pmd_t *pmd, unsigned int flags), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("handle_pte_fault is invoked.\n");
    PRE_WRAPPER_FUNC(mm, vma, address, pte, pmd, flags);
    int ret = handle_pte_fault(mm, vma, address, pte, pmd, flags);
    POST_WRAPPER_FUNC(mm, vma, address, pte, pmd, flags);
    kern_printk("handle_pte_fault returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_set_personality_ia32
#define APP_WRAPPER_FOR_set_personality_ia32
#endif
 
#ifndef APP_WRAPPER_FOR_set_personality_ia32
#define APP_WRAPPER_FOR_set_personality_ia32
FUNCTION_WRAPPER_VOID(set_personality_ia32, (bool _arg1), {
    kern_printk("set_personality_ia32 is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    set_personality_ia32(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("set_personality_ia32 returned.\n");
})
#endif


#ifndef KERN_ADDR_vfs_caches_init_early
#define APP_WRAPPER_FOR_vfs_caches_init_early
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_caches_init_early
#define APP_WRAPPER_FOR_vfs_caches_init_early
FUNCTION_WRAPPER_VOID(vfs_caches_init_early, (), {
    kern_printk("vfs_caches_init_early is invoked.\n");
    PRE_WRAPPER_FUNC();
    vfs_caches_init_early();
    POST_WRAPPER_FUNC();
    kern_printk("vfs_caches_init_early returned.\n");
})
#endif


#ifndef KERN_ADDR_blk_flush_plug_list
#define APP_WRAPPER_FOR_blk_flush_plug_list
#endif
 
#ifndef APP_WRAPPER_FOR_blk_flush_plug_list
#define APP_WRAPPER_FOR_blk_flush_plug_list
FUNCTION_WRAPPER_VOID(blk_flush_plug_list, (struct blk_plug *_arg1, bool _arg2), {
    kern_printk("blk_flush_plug_list is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    blk_flush_plug_list(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_flush_plug_list returned.\n");
})
#endif


#ifndef KERN_ADDR_irq_gc_mask_set_bit
#define APP_WRAPPER_FOR_irq_gc_mask_set_bit
#endif
 
#ifndef APP_WRAPPER_FOR_irq_gc_mask_set_bit
#define APP_WRAPPER_FOR_irq_gc_mask_set_bit
FUNCTION_WRAPPER_VOID(irq_gc_mask_set_bit, (struct irq_data *d), {
    WRAP_RECURSIVE(d);
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(d)));
    kern_printk("irq_gc_mask_set_bit is invoked.\n");
    PRE_WRAPPER_FUNC(d);
    irq_gc_mask_set_bit(d);
    POST_WRAPPER_FUNC(d);
    kern_printk("irq_gc_mask_set_bit returned.\n");
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(d)));
})
#endif


#ifndef KERN_ADDR_pid_nr_ns
#define APP_WRAPPER_FOR_pid_nr_ns
#endif
 
#ifndef APP_WRAPPER_FOR_pid_nr_ns
#define APP_WRAPPER_FOR_pid_nr_ns
FUNCTION_WRAPPER(pid_nr_ns, (struct pid *pid, struct pid_namespace *ns), {
    WRAP_RECURSIVE(pid);
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
    kern_printk("pid_nr_ns is invoked.\n");
    PRE_WRAPPER_FUNC(pid, ns);
    pid_t ret = pid_nr_ns(pid, ns);
    POST_WRAPPER_FUNC(pid, ns);
    kern_printk("pid_nr_ns returned.\n");
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
    return ret;
})
#endif


#ifndef KERN_ADDR_round_jiffies_up_relative
#define APP_WRAPPER_FOR_round_jiffies_up_relative
#endif
 
#ifndef APP_WRAPPER_FOR_round_jiffies_up_relative
#define APP_WRAPPER_FOR_round_jiffies_up_relative
FUNCTION_WRAPPER(round_jiffies_up_relative, (unsigned long j), {
    kern_printk("round_jiffies_up_relative is invoked.\n");
    PRE_WRAPPER_FUNC(j);
    long ret = round_jiffies_up_relative(j);
    POST_WRAPPER_FUNC(j);
    kern_printk("round_jiffies_up_relative returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_posix_acl_permission
#define APP_WRAPPER_FOR_posix_acl_permission
#endif
 
#ifndef APP_WRAPPER_FOR_posix_acl_permission
#define APP_WRAPPER_FOR_posix_acl_permission
FUNCTION_WRAPPER(posix_acl_permission, (struct inode *_arg1, const struct posix_acl *_arg2, int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("posix_acl_permission is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = posix_acl_permission(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("posix_acl_permission returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_numa_free_all_bootmem
#define APP_WRAPPER_FOR_numa_free_all_bootmem
#endif
 
#ifndef APP_WRAPPER_FOR_numa_free_all_bootmem
#define APP_WRAPPER_FOR_numa_free_all_bootmem
FUNCTION_WRAPPER(numa_free_all_bootmem, (), {
    kern_printk("numa_free_all_bootmem is invoked.\n");
    PRE_WRAPPER_FUNC();
    long ret = numa_free_all_bootmem();
    POST_WRAPPER_FUNC();
    kern_printk("numa_free_all_bootmem returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_update_process_times
#define APP_WRAPPER_FOR_update_process_times
#endif
 
#ifndef APP_WRAPPER_FOR_update_process_times
#define APP_WRAPPER_FOR_update_process_times
FUNCTION_WRAPPER_VOID(update_process_times, (int user), {
    kern_printk("update_process_times is invoked.\n");
    PRE_WRAPPER_FUNC(user);
    update_process_times(user);
    POST_WRAPPER_FUNC(user);
    kern_printk("update_process_times returned.\n");
})
#endif


#ifndef KERN_ADDR_d_invalidate
#define APP_WRAPPER_FOR_d_invalidate
#endif
 
#ifndef APP_WRAPPER_FOR_d_invalidate
#define APP_WRAPPER_FOR_d_invalidate
FUNCTION_WRAPPER(d_invalidate, (struct dentry *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("d_invalidate is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = d_invalidate(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("d_invalidate returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_cfg_space_size_ext
#define APP_WRAPPER_FOR_pci_cfg_space_size_ext
#endif
 
#ifndef APP_WRAPPER_FOR_pci_cfg_space_size_ext
#define APP_WRAPPER_FOR_pci_cfg_space_size_ext
FUNCTION_WRAPPER(pci_cfg_space_size_ext, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_cfg_space_size_ext is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pci_cfg_space_size_ext(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_cfg_space_size_ext returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_syscall_trace_enter
#define APP_WRAPPER_FOR_syscall_trace_enter
#endif
 
#ifndef APP_WRAPPER_FOR_syscall_trace_enter
#define APP_WRAPPER_FOR_syscall_trace_enter
FUNCTION_WRAPPER(syscall_trace_enter, (struct pt_regs *_arg1), {
    kern_printk("syscall_trace_enter is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    long ret = syscall_trace_enter(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("syscall_trace_enter returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_set_memory_np
#define APP_WRAPPER_FOR_set_memory_np
#endif
 
#ifndef APP_WRAPPER_FOR_set_memory_np
#define APP_WRAPPER_FOR_set_memory_np
FUNCTION_WRAPPER(set_memory_np, (unsigned long addr, int numpages), {
    kern_printk("set_memory_np is invoked.\n");
    PRE_WRAPPER_FUNC(addr, numpages);
    int ret = set_memory_np(addr, numpages);
    POST_WRAPPER_FUNC(addr, numpages);
    kern_printk("set_memory_np returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_kthread_bind
#define APP_WRAPPER_FOR_kthread_bind
#endif
 
#ifndef APP_WRAPPER_FOR_kthread_bind
#define APP_WRAPPER_FOR_kthread_bind
FUNCTION_WRAPPER_VOID(kthread_bind, (struct task_struct *k, unsigned int cpu), {
    WRAP_RECURSIVE(k);
    TRACES_IF_WATCHPOINT(k);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(k)));
    kern_printk("kthread_bind is invoked.\n");
    PRE_WRAPPER_FUNC(k, cpu);
    kthread_bind(k, cpu);
    POST_WRAPPER_FUNC(k, cpu);
    kern_printk("kthread_bind returned.\n");
    TRACES_IF_WATCHPOINT(k);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(k)));
})
#endif


#ifndef KERN_ADDR_deactivate_super
#define APP_WRAPPER_FOR_deactivate_super
#endif
 
#ifndef APP_WRAPPER_FOR_deactivate_super
#define APP_WRAPPER_FOR_deactivate_super
FUNCTION_WRAPPER_VOID(deactivate_super, (struct super_block *sb), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("deactivate_super is invoked.\n");
    PRE_WRAPPER_FUNC(sb);
    deactivate_super(sb);
    POST_WRAPPER_FUNC(sb);
    kern_printk("deactivate_super returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
})
#endif


#ifndef KERN_ADDR_class_create_file
#define APP_WRAPPER_FOR_class_create_file
#endif
 
#ifndef APP_WRAPPER_FOR_class_create_file
#define APP_WRAPPER_FOR_class_create_file
FUNCTION_WRAPPER(class_create_file, (struct class_ *class_, const struct class_attribute *attr), {
    WRAP_RECURSIVE(class_);
    TRACES_IF_WATCHPOINT(class_);
    SCAN_HEAD_FUNC(struct class_)(*(TO_UNWATCHED_ADDRESS(class_)));
    WRAP_RECURSIVE(attr);
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(const struct class_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    kern_printk("class_create_file is invoked.\n");
    PRE_WRAPPER_FUNC(class_, attr);
    int ret = class_create_file(class_, attr);
    POST_WRAPPER_FUNC(class_, attr);
    kern_printk("class_create_file returned.\n");
    TRACES_IF_WATCHPOINT(class_);
    SCAN_HEAD_FUNC(struct class_)(*(TO_UNWATCHED_ADDRESS(class_)));
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(const struct class_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kstrtoint_from_user
#define APP_WRAPPER_FOR_kstrtoint_from_user
#endif
 
#ifndef APP_WRAPPER_FOR_kstrtoint_from_user
#define APP_WRAPPER_FOR_kstrtoint_from_user
FUNCTION_WRAPPER(kstrtoint_from_user, (const char *s, size_t count, unsigned int base, int *res), {
    kern_printk("kstrtoint_from_user is invoked.\n");
    PRE_WRAPPER_FUNC(s, count, base, res);
    int ret = kstrtoint_from_user(s, count, base, res);
    POST_WRAPPER_FUNC(s, count, base, res);
    kern_printk("kstrtoint_from_user returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sb_set_blocksize
#define APP_WRAPPER_FOR_sb_set_blocksize
#endif
 
#ifndef APP_WRAPPER_FOR_sb_set_blocksize
#define APP_WRAPPER_FOR_sb_set_blocksize
FUNCTION_WRAPPER(sb_set_blocksize, (struct super_block *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("sb_set_blocksize is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = sb_set_blocksize(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("sb_set_blocksize returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_runqueue_is_locked
#define APP_WRAPPER_FOR_runqueue_is_locked
#endif
 
#ifndef APP_WRAPPER_FOR_runqueue_is_locked
#define APP_WRAPPER_FOR_runqueue_is_locked
FUNCTION_WRAPPER(runqueue_is_locked, (int cpu), {
    kern_printk("runqueue_is_locked is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    int ret = runqueue_is_locked(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("runqueue_is_locked returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_msi_remove_pci_irq_vectors
#define APP_WRAPPER_FOR_msi_remove_pci_irq_vectors
#endif
 
#ifndef APP_WRAPPER_FOR_msi_remove_pci_irq_vectors
#define APP_WRAPPER_FOR_msi_remove_pci_irq_vectors
FUNCTION_WRAPPER_VOID(msi_remove_pci_irq_vectors, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("msi_remove_pci_irq_vectors is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    msi_remove_pci_irq_vectors(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("msi_remove_pci_irq_vectors returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_netlink_kernel_release
#define APP_WRAPPER_FOR_netlink_kernel_release
#endif
 
#ifndef APP_WRAPPER_FOR_netlink_kernel_release
#define APP_WRAPPER_FOR_netlink_kernel_release
FUNCTION_WRAPPER_VOID(netlink_kernel_release, (struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("netlink_kernel_release is invoked.\n");
    PRE_WRAPPER_FUNC(sk);
    netlink_kernel_release(sk);
    POST_WRAPPER_FUNC(sk);
    kern_printk("netlink_kernel_release returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR___nlmsg_put
#define APP_WRAPPER_FOR___nlmsg_put
#endif
 
#ifndef APP_WRAPPER_FOR___nlmsg_put
#define APP_WRAPPER_FOR___nlmsg_put
FUNCTION_WRAPPER(__nlmsg_put, (struct sk_buff *skb, u32 portid, u32 seq, int type, int len, int flags), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("__nlmsg_put is invoked.\n");
    PRE_WRAPPER_FUNC(skb, portid, seq, type, len, flags);
    struct nlmsghdr *ret = __nlmsg_put(skb, portid, seq, type, len, flags);
    POST_WRAPPER_FUNC(skb, portid, seq, type, len, flags);
    kern_printk("__nlmsg_put returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___pmd_alloc
#define APP_WRAPPER_FOR___pmd_alloc
#endif
 
#ifndef APP_WRAPPER_FOR___pmd_alloc
#define APP_WRAPPER_FOR___pmd_alloc
FUNCTION_WRAPPER(__pmd_alloc, (struct mm_struct *mm, pud_t *pud, unsigned long address), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    kern_printk("__pmd_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(mm, pud, address);
    int ret = __pmd_alloc(mm, pud, address);
    POST_WRAPPER_FUNC(mm, pud, address);
    kern_printk("__pmd_alloc returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_pci_register_driver
#define APP_WRAPPER_FOR_acpi_pci_register_driver
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_pci_register_driver
#define APP_WRAPPER_FOR_acpi_pci_register_driver
FUNCTION_WRAPPER(acpi_pci_register_driver, (struct acpi_pci_driver *driver), {
    WRAP_RECURSIVE(driver);
    TRACES_IF_WATCHPOINT(driver);
    SCAN_HEAD_FUNC(struct acpi_pci_driver)(*(TO_UNWATCHED_ADDRESS(driver)));
    kern_printk("acpi_pci_register_driver is invoked.\n");
    PRE_WRAPPER_FUNC(driver);
    int ret = acpi_pci_register_driver(driver);
    POST_WRAPPER_FUNC(driver);
    kern_printk("acpi_pci_register_driver returned.\n");
    TRACES_IF_WATCHPOINT(driver);
    SCAN_HEAD_FUNC(struct acpi_pci_driver)(*(TO_UNWATCHED_ADDRESS(driver)));
    return ret;
})
#endif


#ifndef KERN_ADDR_fprop_global_destroy
#define APP_WRAPPER_FOR_fprop_global_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_fprop_global_destroy
#define APP_WRAPPER_FOR_fprop_global_destroy
FUNCTION_WRAPPER_VOID(fprop_global_destroy, (struct fprop_global *p), {
    kern_printk("fprop_global_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(p);
    fprop_global_destroy(p);
    POST_WRAPPER_FUNC(p);
    kern_printk("fprop_global_destroy returned.\n");
})
#endif


#ifndef KERN_ADDR_this_cpu_load
#define APP_WRAPPER_FOR_this_cpu_load
#endif
 
#ifndef APP_WRAPPER_FOR_this_cpu_load
#define APP_WRAPPER_FOR_this_cpu_load
FUNCTION_WRAPPER(this_cpu_load, (), {
    kern_printk("this_cpu_load is invoked.\n");
    PRE_WRAPPER_FUNC();
    long ret = this_cpu_load();
    POST_WRAPPER_FUNC();
    kern_printk("this_cpu_load returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_lock_flocks
#define APP_WRAPPER_FOR_lock_flocks
#endif
 
#ifndef APP_WRAPPER_FOR_lock_flocks
#define APP_WRAPPER_FOR_lock_flocks
FUNCTION_WRAPPER_VOID(lock_flocks, (), {
    kern_printk("lock_flocks is invoked.\n");
    PRE_WRAPPER_FUNC();
    lock_flocks();
    POST_WRAPPER_FUNC();
    kern_printk("lock_flocks returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_write_vpd
#define APP_WRAPPER_FOR_pci_write_vpd
#endif
 
#ifndef APP_WRAPPER_FOR_pci_write_vpd
#define APP_WRAPPER_FOR_pci_write_vpd
FUNCTION_WRAPPER(pci_write_vpd, (struct pci_dev *dev, loff_t pos, size_t count, const void *buf), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_write_vpd is invoked.\n");
    PRE_WRAPPER_FUNC(dev, pos, count, buf);
    ssize_t ret = pci_write_vpd(dev, pos, count, buf);
    POST_WRAPPER_FUNC(dev, pos, count, buf);
    kern_printk("pci_write_vpd returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_user_path_at_empty
#define APP_WRAPPER_FOR_user_path_at_empty
#endif
 
#ifndef APP_WRAPPER_FOR_user_path_at_empty
#define APP_WRAPPER_FOR_user_path_at_empty
FUNCTION_WRAPPER(user_path_at_empty, (int _arg1, const char *_arg2, unsigned int _arg3, struct path *_arg4, int *empty), {
    WRAP_RECURSIVE(_arg4);
    TRACES_IF_WATCHPOINT(_arg4);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg4)));
    kern_printk("user_path_at_empty is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, empty);
    int ret = user_path_at_empty(_arg1, _arg2, _arg3, _arg4, empty);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, empty);
    kern_printk("user_path_at_empty returned.\n");
    TRACES_IF_WATCHPOINT(_arg4);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg4)));
    return ret;
})
#endif


#ifndef KERN_ADDR_genphy_suspend
#define APP_WRAPPER_FOR_genphy_suspend
#endif
 
#ifndef APP_WRAPPER_FOR_genphy_suspend
#define APP_WRAPPER_FOR_genphy_suspend
FUNCTION_WRAPPER(genphy_suspend, (struct phy_device *phydev), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    kern_printk("genphy_suspend is invoked.\n");
    PRE_WRAPPER_FUNC(phydev);
    int ret = genphy_suspend(phydev);
    POST_WRAPPER_FUNC(phydev);
    kern_printk("genphy_suspend returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_stime
#define APP_WRAPPER_FOR_compat_sys_stime
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_stime
#define APP_WRAPPER_FOR_compat_sys_stime
FUNCTION_WRAPPER(compat_sys_stime, (compat_time_t *tptr), {
    kern_printk("compat_sys_stime is invoked.\n");
    PRE_WRAPPER_FUNC(tptr);
    long ret = compat_sys_stime(tptr);
    POST_WRAPPER_FUNC(tptr);
    kern_printk("compat_sys_stime returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_sysctl
#define APP_WRAPPER_FOR_compat_sys_sysctl
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_sysctl
#define APP_WRAPPER_FOR_compat_sys_sysctl
FUNCTION_WRAPPER(compat_sys_sysctl, (struct compat_sysctl_args *args), {
    kern_printk("compat_sys_sysctl is invoked.\n");
    PRE_WRAPPER_FUNC(args);
    long ret = compat_sys_sysctl(args);
    POST_WRAPPER_FUNC(args);
    kern_printk("compat_sys_sysctl returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_unlock_buffer
#define APP_WRAPPER_FOR_unlock_buffer
#endif
 
#ifndef APP_WRAPPER_FOR_unlock_buffer
#define APP_WRAPPER_FOR_unlock_buffer
FUNCTION_WRAPPER_VOID(unlock_buffer, (struct buffer_head *bh), {
    WRAP_RECURSIVE(bh);
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    kern_printk("unlock_buffer is invoked.\n");
    PRE_WRAPPER_FUNC(bh);
    unlock_buffer(bh);
    POST_WRAPPER_FUNC(bh);
    kern_printk("unlock_buffer returned.\n");
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
})
#endif


#ifndef KERN_ADDR_find_extend_vma
#define APP_WRAPPER_FOR_find_extend_vma
#endif
 
#ifndef APP_WRAPPER_FOR_find_extend_vma
#define APP_WRAPPER_FOR_find_extend_vma
FUNCTION_WRAPPER(find_extend_vma, (struct mm_struct *_arg1, unsigned long addr), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("find_extend_vma is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, addr);
    struct vm_area_struct *ret = find_extend_vma(_arg1, addr);
    POST_WRAPPER_FUNC(_arg1, addr);
    kern_printk("find_extend_vma returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___netlink_clear_multicast_users
#define APP_WRAPPER_FOR___netlink_clear_multicast_users
#endif
 
#ifndef APP_WRAPPER_FOR___netlink_clear_multicast_users
#define APP_WRAPPER_FOR___netlink_clear_multicast_users
FUNCTION_WRAPPER_VOID(__netlink_clear_multicast_users, (struct sock *sk, unsigned int group), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("__netlink_clear_multicast_users is invoked.\n");
    PRE_WRAPPER_FUNC(sk, group);
    __netlink_clear_multicast_users(sk, group);
    POST_WRAPPER_FUNC(sk, group);
    kern_printk("__netlink_clear_multicast_users returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR_sk_unattached_filter_create
#define APP_WRAPPER_FOR_sk_unattached_filter_create
#endif
 
#ifndef APP_WRAPPER_FOR_sk_unattached_filter_create
#define APP_WRAPPER_FOR_sk_unattached_filter_create
FUNCTION_WRAPPER(sk_unattached_filter_create, (struct sk_filter **pfp, struct sock_fprog *fprog), {
    WRAP_RECURSIVE(pfp);
    TRACES_IF_WATCHPOINT(pfp);
    SCAN_HEAD_FUNC(struct sk_filter *)(*(TO_UNWATCHED_ADDRESS(pfp)));
    kern_printk("sk_unattached_filter_create is invoked.\n");
    PRE_WRAPPER_FUNC(pfp, fprog);
    int ret = sk_unattached_filter_create(pfp, fprog);
    POST_WRAPPER_FUNC(pfp, fprog);
    kern_printk("sk_unattached_filter_create returned.\n");
    TRACES_IF_WATCHPOINT(pfp);
    SCAN_HEAD_FUNC(struct sk_filter *)(*(TO_UNWATCHED_ADDRESS(pfp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_arch_randomize_brk
#define APP_WRAPPER_FOR_arch_randomize_brk
#endif
 
#ifndef APP_WRAPPER_FOR_arch_randomize_brk
#define APP_WRAPPER_FOR_arch_randomize_brk
FUNCTION_WRAPPER(arch_randomize_brk, (struct mm_struct *mm), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    kern_printk("arch_randomize_brk is invoked.\n");
    PRE_WRAPPER_FUNC(mm);
    long ret = arch_randomize_brk(mm);
    POST_WRAPPER_FUNC(mm);
    kern_printk("arch_randomize_brk returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_copy_and_csum_bits
#define APP_WRAPPER_FOR_skb_copy_and_csum_bits
#endif
 
#ifndef APP_WRAPPER_FOR_skb_copy_and_csum_bits
#define APP_WRAPPER_FOR_skb_copy_and_csum_bits
FUNCTION_WRAPPER(skb_copy_and_csum_bits, (const struct sk_buff *skb, int offset, u8 *to, int len, __wsum csum), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(const struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_copy_and_csum_bits is invoked.\n");
    PRE_WRAPPER_FUNC(skb, offset, to, len, csum);
    __wsum ret = skb_copy_and_csum_bits(skb, offset, to, len, csum);
    POST_WRAPPER_FUNC(skb, offset, to, len, csum);
    kern_printk("skb_copy_and_csum_bits returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(const struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_destroy_workqueue
#define APP_WRAPPER_FOR_destroy_workqueue
#endif
 
#ifndef APP_WRAPPER_FOR_destroy_workqueue
#define APP_WRAPPER_FOR_destroy_workqueue
FUNCTION_WRAPPER_VOID(destroy_workqueue, (struct workqueue_struct *wq), {
    kern_printk("destroy_workqueue is invoked.\n");
    PRE_WRAPPER_FUNC(wq);
    destroy_workqueue(wq);
    POST_WRAPPER_FUNC(wq);
    kern_printk("destroy_workqueue returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_bus_write_config_dword
#define APP_WRAPPER_FOR_pci_bus_write_config_dword
#endif
 
#ifndef APP_WRAPPER_FOR_pci_bus_write_config_dword
#define APP_WRAPPER_FOR_pci_bus_write_config_dword
FUNCTION_WRAPPER(pci_bus_write_config_dword, (struct pci_bus *bus, unsigned int devfn, int where, u32 val), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_bus_write_config_dword is invoked.\n");
    PRE_WRAPPER_FUNC(bus, devfn, where, val);
    int ret = pci_bus_write_config_dword(bus, devfn, where, val);
    POST_WRAPPER_FUNC(bus, devfn, where, val);
    kern_printk("pci_bus_write_config_dword returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_scsi_slave_config
#define APP_WRAPPER_FOR_ata_scsi_slave_config
#endif
 
#ifndef APP_WRAPPER_FOR_ata_scsi_slave_config
#define APP_WRAPPER_FOR_ata_scsi_slave_config
FUNCTION_WRAPPER(ata_scsi_slave_config, (struct scsi_device *sdev), {
    kern_printk("ata_scsi_slave_config is invoked.\n");
    PRE_WRAPPER_FUNC(sdev);
    int ret = ata_scsi_slave_config(sdev);
    POST_WRAPPER_FUNC(sdev);
    kern_printk("ata_scsi_slave_config returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_netlink_has_listeners
#define APP_WRAPPER_FOR_netlink_has_listeners
#endif
 
#ifndef APP_WRAPPER_FOR_netlink_has_listeners
#define APP_WRAPPER_FOR_netlink_has_listeners
FUNCTION_WRAPPER(netlink_has_listeners, (struct sock *sk, unsigned int group), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("netlink_has_listeners is invoked.\n");
    PRE_WRAPPER_FUNC(sk, group);
    int ret = netlink_has_listeners(sk, group);
    POST_WRAPPER_FUNC(sk, group);
    kern_printk("netlink_has_listeners returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_class_compat_unregister
#define APP_WRAPPER_FOR_class_compat_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_class_compat_unregister
#define APP_WRAPPER_FOR_class_compat_unregister
FUNCTION_WRAPPER_VOID(class_compat_unregister, (struct class_compat *cls), {
    kern_printk("class_compat_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(cls);
    class_compat_unregister(cls);
    POST_WRAPPER_FUNC(cls);
    kern_printk("class_compat_unregister returned.\n");
})
#endif


#ifndef KERN_ADDR_inet_csk_clone_lock
#define APP_WRAPPER_FOR_inet_csk_clone_lock
#endif
 
#ifndef APP_WRAPPER_FOR_inet_csk_clone_lock
#define APP_WRAPPER_FOR_inet_csk_clone_lock
FUNCTION_WRAPPER(inet_csk_clone_lock, (const struct sock *sk, const struct request_sock *req, const gfp_t priority), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(const struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(req);
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(const struct request_sock)(*(TO_UNWATCHED_ADDRESS(req)));
    kern_printk("inet_csk_clone_lock is invoked.\n");
    PRE_WRAPPER_FUNC(sk, req, priority);
    struct sock *ret = inet_csk_clone_lock(sk, req, priority);
    POST_WRAPPER_FUNC(sk, req, priority);
    kern_printk("inet_csk_clone_lock returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(const struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(const struct request_sock)(*(TO_UNWATCHED_ADDRESS(req)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_huge_pmd_set_accessed
#define APP_WRAPPER_FOR_huge_pmd_set_accessed
#endif
 
#ifndef APP_WRAPPER_FOR_huge_pmd_set_accessed
#define APP_WRAPPER_FOR_huge_pmd_set_accessed
FUNCTION_WRAPPER_VOID(huge_pmd_set_accessed, (struct mm_struct *mm, struct vm_area_struct *vma, unsigned long address, pmd_t *pmd, pmd_t orig_pmd, int dirty), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("huge_pmd_set_accessed is invoked.\n");
    PRE_WRAPPER_FUNC(mm, vma, address, pmd, orig_pmd, dirty);
    huge_pmd_set_accessed(mm, vma, address, pmd, orig_pmd, dirty);
    POST_WRAPPER_FUNC(mm, vma, address, pmd, orig_pmd, dirty);
    kern_printk("huge_pmd_set_accessed returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
})
#endif


#ifndef KERN_ADDR_radix_tree_init
#define APP_WRAPPER_FOR_radix_tree_init
#endif
 
#ifndef APP_WRAPPER_FOR_radix_tree_init
#define APP_WRAPPER_FOR_radix_tree_init
FUNCTION_WRAPPER_VOID(radix_tree_init, (), {
    kern_printk("radix_tree_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    radix_tree_init();
    POST_WRAPPER_FUNC();
    kern_printk("radix_tree_init returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_dev_free_resource_list
#define APP_WRAPPER_FOR_acpi_dev_free_resource_list
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_dev_free_resource_list
#define APP_WRAPPER_FOR_acpi_dev_free_resource_list
FUNCTION_WRAPPER_VOID(acpi_dev_free_resource_list, (struct list_head *list), {
    kern_printk("acpi_dev_free_resource_list is invoked.\n");
    PRE_WRAPPER_FUNC(list);
    acpi_dev_free_resource_list(list);
    POST_WRAPPER_FUNC(list);
    kern_printk("acpi_dev_free_resource_list returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_prepare_to_sleep
#define APP_WRAPPER_FOR_pci_prepare_to_sleep
#endif
 
#ifndef APP_WRAPPER_FOR_pci_prepare_to_sleep
#define APP_WRAPPER_FOR_pci_prepare_to_sleep
FUNCTION_WRAPPER(pci_prepare_to_sleep, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_prepare_to_sleep is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pci_prepare_to_sleep(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_prepare_to_sleep returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kthread_unpark
#define APP_WRAPPER_FOR_kthread_unpark
#endif
 
#ifndef APP_WRAPPER_FOR_kthread_unpark
#define APP_WRAPPER_FOR_kthread_unpark
FUNCTION_WRAPPER_VOID(kthread_unpark, (struct task_struct *k), {
    WRAP_RECURSIVE(k);
    TRACES_IF_WATCHPOINT(k);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(k)));
    kern_printk("kthread_unpark is invoked.\n");
    PRE_WRAPPER_FUNC(k);
    kthread_unpark(k);
    POST_WRAPPER_FUNC(k);
    kern_printk("kthread_unpark returned.\n");
    TRACES_IF_WATCHPOINT(k);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(k)));
})
#endif


#ifndef KERN_ADDR_pci_bus_find_capability
#define APP_WRAPPER_FOR_pci_bus_find_capability
#endif
 
#ifndef APP_WRAPPER_FOR_pci_bus_find_capability
#define APP_WRAPPER_FOR_pci_bus_find_capability
FUNCTION_WRAPPER(pci_bus_find_capability, (struct pci_bus *bus, unsigned int devfn, int cap), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_bus_find_capability is invoked.\n");
    PRE_WRAPPER_FUNC(bus, devfn, cap);
    int ret = pci_bus_find_capability(bus, devfn, cap);
    POST_WRAPPER_FUNC(bus, devfn, cap);
    kern_printk("pci_bus_find_capability returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dma_release_channel
#define APP_WRAPPER_FOR_dma_release_channel
#endif
 
#ifndef APP_WRAPPER_FOR_dma_release_channel
#define APP_WRAPPER_FOR_dma_release_channel
FUNCTION_WRAPPER_VOID(dma_release_channel, (struct dma_chan *chan), {
    WRAP_RECURSIVE(chan);
    TRACES_IF_WATCHPOINT(chan);
    SCAN_HEAD_FUNC(struct dma_chan)(*(TO_UNWATCHED_ADDRESS(chan)));
    kern_printk("dma_release_channel is invoked.\n");
    PRE_WRAPPER_FUNC(chan);
    dma_release_channel(chan);
    POST_WRAPPER_FUNC(chan);
    kern_printk("dma_release_channel returned.\n");
    TRACES_IF_WATCHPOINT(chan);
    SCAN_HEAD_FUNC(struct dma_chan)(*(TO_UNWATCHED_ADDRESS(chan)));
})
#endif


#ifndef KERN_ADDR_unblock_all_signals
#define APP_WRAPPER_FOR_unblock_all_signals
#endif
 
#ifndef APP_WRAPPER_FOR_unblock_all_signals
#define APP_WRAPPER_FOR_unblock_all_signals
FUNCTION_WRAPPER_VOID(unblock_all_signals, (), {
    kern_printk("unblock_all_signals is invoked.\n");
    PRE_WRAPPER_FUNC();
    unblock_all_signals();
    POST_WRAPPER_FUNC();
    kern_printk("unblock_all_signals returned.\n");
})
#endif


#ifndef KERN_ADDR_elv_dispatch_add_tail
#define APP_WRAPPER_FOR_elv_dispatch_add_tail
#endif
 
#ifndef APP_WRAPPER_FOR_elv_dispatch_add_tail
#define APP_WRAPPER_FOR_elv_dispatch_add_tail
FUNCTION_WRAPPER_VOID(elv_dispatch_add_tail, (struct request_queue *_arg1, struct request *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("elv_dispatch_add_tail is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    elv_dispatch_add_tail(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("elv_dispatch_add_tail returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_devres_free
#define APP_WRAPPER_FOR_devres_free
#endif
 
#ifndef APP_WRAPPER_FOR_devres_free
#define APP_WRAPPER_FOR_devres_free
FUNCTION_WRAPPER_VOID(devres_free, (void *res), {
    kern_printk("devres_free is invoked.\n");
    PRE_WRAPPER_FUNC(res);
    devres_free(res);
    POST_WRAPPER_FUNC(res);
    kern_printk("devres_free returned.\n");
})
#endif


#ifndef KERN_ADDR_qdisc_class_hash_remove
#define APP_WRAPPER_FOR_qdisc_class_hash_remove
#endif
 
#ifndef APP_WRAPPER_FOR_qdisc_class_hash_remove
#define APP_WRAPPER_FOR_qdisc_class_hash_remove
FUNCTION_WRAPPER_VOID(qdisc_class_hash_remove, (struct Qdisc_class_hash *_arg1, struct Qdisc_class_common *_arg2), {
    kern_printk("qdisc_class_hash_remove is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    qdisc_class_hash_remove(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("qdisc_class_hash_remove returned.\n");
})
#endif


#ifndef KERN_ADDR_mdiobus_read
#define APP_WRAPPER_FOR_mdiobus_read
#endif
 
#ifndef APP_WRAPPER_FOR_mdiobus_read
#define APP_WRAPPER_FOR_mdiobus_read
FUNCTION_WRAPPER(mdiobus_read, (struct mii_bus *bus, int addr, u32 regnum), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct mii_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("mdiobus_read is invoked.\n");
    PRE_WRAPPER_FUNC(bus, addr, regnum);
    int ret = mdiobus_read(bus, addr, regnum);
    POST_WRAPPER_FUNC(bus, addr, regnum);
    kern_printk("mdiobus_read returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct mii_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pcim_iomap
#define APP_WRAPPER_FOR_pcim_iomap
#endif
 
#ifndef APP_WRAPPER_FOR_pcim_iomap
#define APP_WRAPPER_FOR_pcim_iomap
FUNCTION_WRAPPER(pcim_iomap, (struct pci_dev *pdev, int bar, unsigned long maxlen), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("pcim_iomap is invoked.\n");
    PRE_WRAPPER_FUNC(pdev, bar, maxlen);
    void *ret = pcim_iomap(pdev, bar, maxlen);
    POST_WRAPPER_FUNC(pdev, bar, maxlen);
    kern_printk("pcim_iomap returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_cdrom_mode_select
#define APP_WRAPPER_FOR_cdrom_mode_select
#endif
 
#ifndef APP_WRAPPER_FOR_cdrom_mode_select
#define APP_WRAPPER_FOR_cdrom_mode_select
FUNCTION_WRAPPER(cdrom_mode_select, (struct cdrom_device_info *cdi, struct packet_command *cgc), {
    WRAP_RECURSIVE(cdi);
    TRACES_IF_WATCHPOINT(cdi);
    SCAN_HEAD_FUNC(struct cdrom_device_info)(*(TO_UNWATCHED_ADDRESS(cdi)));
    kern_printk("cdrom_mode_select is invoked.\n");
    PRE_WRAPPER_FUNC(cdi, cgc);
    int ret = cdrom_mode_select(cdi, cgc);
    POST_WRAPPER_FUNC(cdi, cgc);
    kern_printk("cdrom_mode_select returned.\n");
    TRACES_IF_WATCHPOINT(cdi);
    SCAN_HEAD_FUNC(struct cdrom_device_info)(*(TO_UNWATCHED_ADDRESS(cdi)));
    return ret;
})
#endif


#ifndef KERN_ADDR_device_create_file
#define APP_WRAPPER_FOR_device_create_file
#endif
 
#ifndef APP_WRAPPER_FOR_device_create_file
#define APP_WRAPPER_FOR_device_create_file
FUNCTION_WRAPPER(device_create_file, (struct device *device, const struct device_attribute *entry), {
    WRAP_RECURSIVE(device);
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(device)));
    WRAP_RECURSIVE(entry);
    TRACES_IF_WATCHPOINT(entry);
    SCAN_HEAD_FUNC(const struct device_attribute)(*(TO_UNWATCHED_ADDRESS(entry)));
    kern_printk("device_create_file is invoked.\n");
    PRE_WRAPPER_FUNC(device, entry);
    int ret = device_create_file(device, entry);
    POST_WRAPPER_FUNC(device, entry);
    kern_printk("device_create_file returned.\n");
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(device)));
    TRACES_IF_WATCHPOINT(entry);
    SCAN_HEAD_FUNC(const struct device_attribute)(*(TO_UNWATCHED_ADDRESS(entry)));
    return ret;
})
#endif


#ifndef KERN_ADDR_iget5_locked
#define APP_WRAPPER_FOR_iget5_locked
#endif
 
#ifndef APP_WRAPPER_FOR_iget5_locked
#define APP_WRAPPER_FOR_iget5_locked
FUNCTION_WRAPPER(iget5_locked, (struct super_block *_arg1, unsigned long _arg2, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_FUNCTION(test);
    WRAP_FUNCTION(set);
    kern_printk("iget5_locked is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, test, set, _arg3);
    struct inode *ret = iget5_locked(_arg1, _arg2, test, set, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, test, set, _arg3);
    kern_printk("iget5_locked returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_percpu_counter_set
#define APP_WRAPPER_FOR_percpu_counter_set
#endif
 
#ifndef APP_WRAPPER_FOR_percpu_counter_set
#define APP_WRAPPER_FOR_percpu_counter_set
FUNCTION_WRAPPER_VOID(percpu_counter_set, (struct percpu_counter *fbc, s64 amount), {
    kern_printk("percpu_counter_set is invoked.\n");
    PRE_WRAPPER_FUNC(fbc, amount);
    percpu_counter_set(fbc, amount);
    POST_WRAPPER_FUNC(fbc, amount);
    kern_printk("percpu_counter_set returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_common_swizzle
#define APP_WRAPPER_FOR_pci_common_swizzle
#endif
 
#ifndef APP_WRAPPER_FOR_pci_common_swizzle
#define APP_WRAPPER_FOR_pci_common_swizzle
FUNCTION_WRAPPER(pci_common_swizzle, (struct pci_dev *dev, u8 *pinp), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_common_swizzle is invoked.\n");
    PRE_WRAPPER_FUNC(dev, pinp);
    u8 ret = pci_common_swizzle(dev, pinp);
    POST_WRAPPER_FUNC(dev, pinp);
    kern_printk("pci_common_swizzle returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bitmap_bitremap
#define APP_WRAPPER_FOR_bitmap_bitremap
#endif
 
#ifndef APP_WRAPPER_FOR_bitmap_bitremap
#define APP_WRAPPER_FOR_bitmap_bitremap
FUNCTION_WRAPPER(bitmap_bitremap, (int oldbit, unsigned const long *old, unsigned const long *new_, int bits), {
    kern_printk("bitmap_bitremap is invoked.\n");
    PRE_WRAPPER_FUNC(oldbit, old, new_, bits);
    int ret = bitmap_bitremap(oldbit, old, new_, bits);
    POST_WRAPPER_FUNC(oldbit, old, new_, bits);
    kern_printk("bitmap_bitremap returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___irq_set_handler
#define APP_WRAPPER_FOR___irq_set_handler
#endif
 
#ifndef APP_WRAPPER_FOR___irq_set_handler
#define APP_WRAPPER_FOR___irq_set_handler
FUNCTION_WRAPPER_VOID(__irq_set_handler, (unsigned int irq, irq_flow_handler_t handle, int is_chained, const char *name), {
    WRAP_FUNCTION(handle);
    kern_printk("__irq_set_handler is invoked.\n");
    PRE_WRAPPER_FUNC(irq, handle, is_chained, name);
    __irq_set_handler(irq, handle, is_chained, name);
    POST_WRAPPER_FUNC(irq, handle, is_chained, name);
    kern_printk("__irq_set_handler returned.\n");
})
#endif


#ifndef KERN_ADDR_inet_csk_prepare_forced_close
#define APP_WRAPPER_FOR_inet_csk_prepare_forced_close
#endif
 
#ifndef APP_WRAPPER_FOR_inet_csk_prepare_forced_close
#define APP_WRAPPER_FOR_inet_csk_prepare_forced_close
FUNCTION_WRAPPER_VOID(inet_csk_prepare_forced_close, (struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("inet_csk_prepare_forced_close is invoked.\n");
    PRE_WRAPPER_FUNC(sk);
    inet_csk_prepare_forced_close(sk);
    POST_WRAPPER_FUNC(sk);
    kern_printk("inet_csk_prepare_forced_close returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR_pm_qos_read_value
#define APP_WRAPPER_FOR_pm_qos_read_value
#endif
 
#ifndef APP_WRAPPER_FOR_pm_qos_read_value
#define APP_WRAPPER_FOR_pm_qos_read_value
FUNCTION_WRAPPER(pm_qos_read_value, (struct pm_qos_constraints *c), {
    WRAP_RECURSIVE(c);
    TRACES_IF_WATCHPOINT(c);
    SCAN_HEAD_FUNC(struct pm_qos_constraints)(*(TO_UNWATCHED_ADDRESS(c)));
    kern_printk("pm_qos_read_value is invoked.\n");
    PRE_WRAPPER_FUNC(c);
    s32 ret = pm_qos_read_value(c);
    POST_WRAPPER_FUNC(c);
    kern_printk("pm_qos_read_value returned.\n");
    TRACES_IF_WATCHPOINT(c);
    SCAN_HEAD_FUNC(struct pm_qos_constraints)(*(TO_UNWATCHED_ADDRESS(c)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pcibios_update_irq
#define APP_WRAPPER_FOR_pcibios_update_irq
#endif
 
#ifndef APP_WRAPPER_FOR_pcibios_update_irq
#define APP_WRAPPER_FOR_pcibios_update_irq
FUNCTION_WRAPPER_VOID(pcibios_update_irq, (struct pci_dev *_arg1, int irq), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("pcibios_update_irq is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, irq);
    pcibios_update_irq(_arg1, irq);
    POST_WRAPPER_FUNC(_arg1, irq);
    kern_printk("pcibios_update_irq returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_sk_stream_alloc_skb
#define APP_WRAPPER_FOR_sk_stream_alloc_skb
#endif
 
#ifndef APP_WRAPPER_FOR_sk_stream_alloc_skb
#define APP_WRAPPER_FOR_sk_stream_alloc_skb
FUNCTION_WRAPPER(sk_stream_alloc_skb, (struct sock *sk, int size, gfp_t gfp), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sk_stream_alloc_skb is invoked.\n");
    PRE_WRAPPER_FUNC(sk, size, gfp);
    struct sk_buff *ret = sk_stream_alloc_skb(sk, size, gfp);
    POST_WRAPPER_FUNC(sk, size, gfp);
    kern_printk("sk_stream_alloc_skb returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pnp_range_reserved
#define APP_WRAPPER_FOR_pnp_range_reserved
#endif
 
#ifndef APP_WRAPPER_FOR_pnp_range_reserved
#define APP_WRAPPER_FOR_pnp_range_reserved
FUNCTION_WRAPPER(pnp_range_reserved, (resource_size_t start, resource_size_t end), {
    kern_printk("pnp_range_reserved is invoked.\n");
    PRE_WRAPPER_FUNC(start, end);
    int ret = pnp_range_reserved(start, end);
    POST_WRAPPER_FUNC(start, end);
    kern_printk("pnp_range_reserved returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_free_percpu_irq
#define APP_WRAPPER_FOR_free_percpu_irq
#endif
 
#ifndef APP_WRAPPER_FOR_free_percpu_irq
#define APP_WRAPPER_FOR_free_percpu_irq
FUNCTION_WRAPPER_VOID(free_percpu_irq, (unsigned int _arg1, void *_arg2), {
    kern_printk("free_percpu_irq is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    free_percpu_irq(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("free_percpu_irq returned.\n");
})
#endif


#ifndef KERN_ADDR_ata_bmdma_status
#define APP_WRAPPER_FOR_ata_bmdma_status
#endif
 
#ifndef APP_WRAPPER_FOR_ata_bmdma_status
#define APP_WRAPPER_FOR_ata_bmdma_status
FUNCTION_WRAPPER(ata_bmdma_status, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_bmdma_status is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    u8 ret = ata_bmdma_status(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_bmdma_status returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR_timecounter_read
#define APP_WRAPPER_FOR_timecounter_read
#endif
 
#ifndef APP_WRAPPER_FOR_timecounter_read
#define APP_WRAPPER_FOR_timecounter_read
FUNCTION_WRAPPER(timecounter_read, (struct timecounter *tc), {
    WRAP_RECURSIVE(tc);
    TRACES_IF_WATCHPOINT(tc);
    SCAN_HEAD_FUNC(struct timecounter)(*(TO_UNWATCHED_ADDRESS(tc)));
    kern_printk("timecounter_read is invoked.\n");
    PRE_WRAPPER_FUNC(tc);
    u64 ret = timecounter_read(tc);
    POST_WRAPPER_FUNC(tc);
    kern_printk("timecounter_read returned.\n");
    TRACES_IF_WATCHPOINT(tc);
    SCAN_HEAD_FUNC(struct timecounter)(*(TO_UNWATCHED_ADDRESS(tc)));
    return ret;
})
#endif


#ifndef KERN_ADDR_usermodehelper_read_unlock
#define APP_WRAPPER_FOR_usermodehelper_read_unlock
#endif
 
#ifndef APP_WRAPPER_FOR_usermodehelper_read_unlock
#define APP_WRAPPER_FOR_usermodehelper_read_unlock
FUNCTION_WRAPPER_VOID(usermodehelper_read_unlock, (), {
    kern_printk("usermodehelper_read_unlock is invoked.\n");
    PRE_WRAPPER_FUNC();
    usermodehelper_read_unlock();
    POST_WRAPPER_FUNC();
    kern_printk("usermodehelper_read_unlock returned.\n");
})
#endif


#ifndef KERN_ADDR___request_region
#define APP_WRAPPER_FOR___request_region
#endif
 
#ifndef APP_WRAPPER_FOR___request_region
#define APP_WRAPPER_FOR___request_region
FUNCTION_WRAPPER(__request_region, (struct resource *_arg1, resource_size_t start, resource_size_t n, const char *name, int flags), {
    kern_printk("__request_region is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, start, n, name, flags);
    struct resource *ret = __request_region(_arg1, start, n, name, flags);
    POST_WRAPPER_FUNC(_arg1, start, n, name, flags);
    kern_printk("__request_region returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___locks_copy_lock
#define APP_WRAPPER_FOR___locks_copy_lock
#endif
 
#ifndef APP_WRAPPER_FOR___locks_copy_lock
#define APP_WRAPPER_FOR___locks_copy_lock
FUNCTION_WRAPPER_VOID(__locks_copy_lock, (struct file_lock *_arg1, const struct file_lock *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(const struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("__locks_copy_lock is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    __locks_copy_lock(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("__locks_copy_lock returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(const struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_dquot_free_inode
#define APP_WRAPPER_FOR_dquot_free_inode
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_free_inode
#define APP_WRAPPER_FOR_dquot_free_inode
FUNCTION_WRAPPER_VOID(dquot_free_inode, (const struct inode *inode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(const struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("dquot_free_inode is invoked.\n");
    PRE_WRAPPER_FUNC(inode);
    dquot_free_inode(inode);
    POST_WRAPPER_FUNC(inode);
    kern_printk("dquot_free_inode returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(const struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_has_capability_noaudit
#define APP_WRAPPER_FOR_has_capability_noaudit
#endif
 
#ifndef APP_WRAPPER_FOR_has_capability_noaudit
#define APP_WRAPPER_FOR_has_capability_noaudit
FUNCTION_WRAPPER(has_capability_noaudit, (struct task_struct *t, int cap), {
    WRAP_RECURSIVE(t);
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(t)));
    kern_printk("has_capability_noaudit is invoked.\n");
    PRE_WRAPPER_FUNC(t, cap);
    bool ret = has_capability_noaudit(t, cap);
    POST_WRAPPER_FUNC(t, cap);
    kern_printk("has_capability_noaudit returned.\n");
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(t)));
    return ret;
})
#endif


#ifndef KERN_ADDR_setup_arch
#define APP_WRAPPER_FOR_setup_arch
#endif
 
#ifndef APP_WRAPPER_FOR_setup_arch
#define APP_WRAPPER_FOR_setup_arch
FUNCTION_WRAPPER_VOID(setup_arch, (char **_arg1), {
    kern_printk("setup_arch is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    setup_arch(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("setup_arch returned.\n");
})
#endif


#ifndef KERN_ADDR___f_setown
#define APP_WRAPPER_FOR___f_setown
#endif
 
#ifndef APP_WRAPPER_FOR___f_setown
#define APP_WRAPPER_FOR___f_setown
FUNCTION_WRAPPER(__f_setown, (struct file *filp, struct pid *_arg1, enum pid_type _arg2, int force), {
    WRAP_RECURSIVE(filp);
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__f_setown is invoked.\n");
    PRE_WRAPPER_FUNC(filp, _arg1, _arg2, force);
    int ret = __f_setown(filp, _arg1, _arg2, force);
    POST_WRAPPER_FUNC(filp, _arg1, _arg2, force);
    kern_printk("__f_setown returned.\n");
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_gc_ack_set_bit
#define APP_WRAPPER_FOR_irq_gc_ack_set_bit
#endif
 
#ifndef APP_WRAPPER_FOR_irq_gc_ack_set_bit
#define APP_WRAPPER_FOR_irq_gc_ack_set_bit
FUNCTION_WRAPPER_VOID(irq_gc_ack_set_bit, (struct irq_data *d), {
    WRAP_RECURSIVE(d);
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(d)));
    kern_printk("irq_gc_ack_set_bit is invoked.\n");
    PRE_WRAPPER_FUNC(d);
    irq_gc_ack_set_bit(d);
    POST_WRAPPER_FUNC(d);
    kern_printk("irq_gc_ack_set_bit returned.\n");
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(d)));
})
#endif


#ifndef KERN_ADDR_ata_wait_after_reset
#define APP_WRAPPER_FOR_ata_wait_after_reset
#endif
 
#ifndef APP_WRAPPER_FOR_ata_wait_after_reset
#define APP_WRAPPER_FOR_ata_wait_after_reset
FUNCTION_WRAPPER(ata_wait_after_reset, (struct ata_link *link, unsigned long deadline, int (*check_ready)(struct ata_link *)), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    WRAP_FUNCTION(check_ready);
    kern_printk("ata_wait_after_reset is invoked.\n");
    PRE_WRAPPER_FUNC(link, deadline, check_ready);
    int ret = ata_wait_after_reset(link, deadline, check_ready);
    POST_WRAPPER_FUNC(link, deadline, check_ready);
    kern_printk("ata_wait_after_reset returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_end_request_cur
#define APP_WRAPPER_FOR_blk_end_request_cur
#endif
 
#ifndef APP_WRAPPER_FOR_blk_end_request_cur
#define APP_WRAPPER_FOR_blk_end_request_cur
FUNCTION_WRAPPER(blk_end_request_cur, (struct request *rq, int error), {
    WRAP_RECURSIVE(rq);
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    kern_printk("blk_end_request_cur is invoked.\n");
    PRE_WRAPPER_FUNC(rq, error);
    bool ret = blk_end_request_cur(rq, error);
    POST_WRAPPER_FUNC(rq, error);
    kern_printk("blk_end_request_cur returned.\n");
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    return ret;
})
#endif


#ifndef KERN_ADDR_wait_for_key_construction
#define APP_WRAPPER_FOR_wait_for_key_construction
#endif
 
#ifndef APP_WRAPPER_FOR_wait_for_key_construction
#define APP_WRAPPER_FOR_wait_for_key_construction
FUNCTION_WRAPPER(wait_for_key_construction, (struct key *key, bool intr), {
    kern_printk("wait_for_key_construction is invoked.\n");
    PRE_WRAPPER_FUNC(key, intr);
    int ret = wait_for_key_construction(key, intr);
    POST_WRAPPER_FUNC(key, intr);
    kern_printk("wait_for_key_construction returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_queue_io_min
#define APP_WRAPPER_FOR_blk_queue_io_min
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_io_min
#define APP_WRAPPER_FOR_blk_queue_io_min
FUNCTION_WRAPPER_VOID(blk_queue_io_min, (struct request_queue *q, unsigned int min), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    kern_printk("blk_queue_io_min is invoked.\n");
    PRE_WRAPPER_FUNC(q, min);
    blk_queue_io_min(q, min);
    POST_WRAPPER_FUNC(q, min);
    kern_printk("blk_queue_io_min returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
})
#endif


#ifndef KERN_ADDR___wake_up
#define APP_WRAPPER_FOR___wake_up
#endif
 
#ifndef APP_WRAPPER_FOR___wake_up
#define APP_WRAPPER_FOR___wake_up
FUNCTION_WRAPPER_VOID(__wake_up, (wait_queue_head_t *q, unsigned int mode, int nr, void *key), {
    kern_printk("__wake_up is invoked.\n");
    PRE_WRAPPER_FUNC(q, mode, nr, key);
    __wake_up(q, mode, nr, key);
    POST_WRAPPER_FUNC(q, mode, nr, key);
    kern_printk("__wake_up returned.\n");
})
#endif


#ifndef KERN_ADDR_blk_limits_max_hw_sectors
#define APP_WRAPPER_FOR_blk_limits_max_hw_sectors
#endif
 
#ifndef APP_WRAPPER_FOR_blk_limits_max_hw_sectors
#define APP_WRAPPER_FOR_blk_limits_max_hw_sectors
FUNCTION_WRAPPER_VOID(blk_limits_max_hw_sectors, (struct queue_limits *_arg1, unsigned int _arg2), {
    kern_printk("blk_limits_max_hw_sectors is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    blk_limits_max_hw_sectors(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_limits_max_hw_sectors returned.\n");
})
#endif


#ifndef KERN_ADDR_vprintk_emit
#define APP_WRAPPER_FOR_vprintk_emit
#endif
 
#ifndef APP_WRAPPER_FOR_vprintk_emit
#define APP_WRAPPER_FOR_vprintk_emit
FUNCTION_WRAPPER(vprintk_emit, (int facility, int level, const char *dict, size_t dictlen, const char *fmt, va_list args), {
    kern_printk("vprintk_emit is invoked.\n");
    PRE_WRAPPER_FUNC(facility, level, dict, dictlen, fmt, args);
    int ret = vprintk_emit(facility, level, dict, dictlen, fmt, args);
    POST_WRAPPER_FUNC(facility, level, dict, dictlen, fmt, args);
    kern_printk("vprintk_emit returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_request_key_async_with_auxdata
#define APP_WRAPPER_FOR_request_key_async_with_auxdata
#endif
 
#ifndef APP_WRAPPER_FOR_request_key_async_with_auxdata
#define APP_WRAPPER_FOR_request_key_async_with_auxdata
FUNCTION_WRAPPER(request_key_async_with_auxdata, (struct key_type *type, const char *description, const void *callout_info, size_t callout_len, void *aux), {
    kern_printk("request_key_async_with_auxdata is invoked.\n");
    PRE_WRAPPER_FUNC(type, description, callout_info, callout_len, aux);
    struct key *ret = request_key_async_with_auxdata(type, description, callout_info, callout_len, aux);
    POST_WRAPPER_FUNC(type, description, callout_info, callout_len, aux);
    kern_printk("request_key_async_with_auxdata returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_arch_vma_name
#define APP_WRAPPER_FOR_arch_vma_name
#endif
 
#ifndef APP_WRAPPER_FOR_arch_vma_name
#define APP_WRAPPER_FOR_arch_vma_name
FUNCTION_WRAPPER(arch_vma_name, (struct vm_area_struct *vma), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("arch_vma_name is invoked.\n");
    PRE_WRAPPER_FUNC(vma);
    const char *ret = arch_vma_name(vma);
    POST_WRAPPER_FUNC(vma);
    kern_printk("arch_vma_name returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_collect_mounts
#define APP_WRAPPER_FOR_collect_mounts
#endif
 
#ifndef APP_WRAPPER_FOR_collect_mounts
#define APP_WRAPPER_FOR_collect_mounts
FUNCTION_WRAPPER(collect_mounts, (struct path *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("collect_mounts is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct vfsmount *ret = collect_mounts(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("collect_mounts returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___do_softirq
#define APP_WRAPPER_FOR___do_softirq
#endif
 
#ifndef APP_WRAPPER_FOR___do_softirq
#define APP_WRAPPER_FOR___do_softirq
FUNCTION_WRAPPER_VOID(__do_softirq, (), {
    kern_printk("__do_softirq is invoked.\n");
    PRE_WRAPPER_FUNC();
    __do_softirq();
    POST_WRAPPER_FUNC();
    kern_printk("__do_softirq returned.\n");
})
#endif


#ifndef KERN_ADDR_kobject_create
#define APP_WRAPPER_FOR_kobject_create
#endif
 
#ifndef APP_WRAPPER_FOR_kobject_create
#define APP_WRAPPER_FOR_kobject_create
FUNCTION_WRAPPER(kobject_create, (), {
    kern_printk("kobject_create is invoked.\n");
    PRE_WRAPPER_FUNC();
    struct kobject *ret = kobject_create();
    POST_WRAPPER_FUNC();
    kern_printk("kobject_create returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_integrity_register
#define APP_WRAPPER_FOR_blk_integrity_register
#endif
 
#ifndef APP_WRAPPER_FOR_blk_integrity_register
#define APP_WRAPPER_FOR_blk_integrity_register
FUNCTION_WRAPPER(blk_integrity_register, (struct gendisk *_arg1, struct blk_integrity *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct blk_integrity)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("blk_integrity_register is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = blk_integrity_register(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_integrity_register returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct blk_integrity)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_wake_up_idle_cpu
#define APP_WRAPPER_FOR_wake_up_idle_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_wake_up_idle_cpu
#define APP_WRAPPER_FOR_wake_up_idle_cpu
FUNCTION_WRAPPER_VOID(wake_up_idle_cpu, (int cpu), {
    kern_printk("wake_up_idle_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    wake_up_idle_cpu(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("wake_up_idle_cpu returned.\n");
})
#endif


#ifndef KERN_ADDR_simple_xattr_set
#define APP_WRAPPER_FOR_simple_xattr_set
#endif
 
#ifndef APP_WRAPPER_FOR_simple_xattr_set
#define APP_WRAPPER_FOR_simple_xattr_set
FUNCTION_WRAPPER(simple_xattr_set, (struct simple_xattrs *xattrs, const char *name, const void *value, size_t size, int flags), {
    kern_printk("simple_xattr_set is invoked.\n");
    PRE_WRAPPER_FUNC(xattrs, name, value, size, flags);
    int ret = simple_xattr_set(xattrs, name, value, size, flags);
    POST_WRAPPER_FUNC(xattrs, name, value, size, flags);
    kern_printk("simple_xattr_set returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_fsync_range
#define APP_WRAPPER_FOR_vfs_fsync_range
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_fsync_range
#define APP_WRAPPER_FOR_vfs_fsync_range
FUNCTION_WRAPPER(vfs_fsync_range, (struct file *file, loff_t start, loff_t end, int datasync), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("vfs_fsync_range is invoked.\n");
    PRE_WRAPPER_FUNC(file, start, end, datasync);
    int ret = vfs_fsync_range(file, start, end, datasync);
    POST_WRAPPER_FUNC(file, start, end, datasync);
    kern_printk("vfs_fsync_range returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_amd_get_nb_id
#define APP_WRAPPER_FOR_amd_get_nb_id
#endif
 
#ifndef APP_WRAPPER_FOR_amd_get_nb_id
#define APP_WRAPPER_FOR_amd_get_nb_id
FUNCTION_WRAPPER(amd_get_nb_id, (int cpu), {
    kern_printk("amd_get_nb_id is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    int ret = amd_get_nb_id(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("amd_get_nb_id returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pdev_enable_device
#define APP_WRAPPER_FOR_pdev_enable_device
#endif
 
#ifndef APP_WRAPPER_FOR_pdev_enable_device
#define APP_WRAPPER_FOR_pdev_enable_device
FUNCTION_WRAPPER_VOID(pdev_enable_device, (struct pci_dev *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("pdev_enable_device is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    pdev_enable_device(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("pdev_enable_device returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_css_depth
#define APP_WRAPPER_FOR_css_depth
#endif
 
#ifndef APP_WRAPPER_FOR_css_depth
#define APP_WRAPPER_FOR_css_depth
FUNCTION_WRAPPER(css_depth, (struct cgroup_subsys_state *css), {
    WRAP_RECURSIVE(css);
    TRACES_IF_WATCHPOINT(css);
    SCAN_HEAD_FUNC(struct cgroup_subsys_state)(*(TO_UNWATCHED_ADDRESS(css)));
    kern_printk("css_depth is invoked.\n");
    PRE_WRAPPER_FUNC(css);
    short ret = css_depth(css);
    POST_WRAPPER_FUNC(css);
    kern_printk("css_depth returned.\n");
    TRACES_IF_WATCHPOINT(css);
    SCAN_HEAD_FUNC(struct cgroup_subsys_state)(*(TO_UNWATCHED_ADDRESS(css)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_physical_table_override
#define APP_WRAPPER_FOR_acpi_os_physical_table_override
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_physical_table_override
#define APP_WRAPPER_FOR_acpi_os_physical_table_override
FUNCTION_WRAPPER(acpi_os_physical_table_override, (struct acpi_table_header *existing_table, acpi_physical_address *new_address, u32 *new_table_length), {
    kern_printk("acpi_os_physical_table_override is invoked.\n");
    PRE_WRAPPER_FUNC(existing_table, new_address, new_table_length);
    acpi_status ret = acpi_os_physical_table_override(existing_table, new_address, new_table_length);
    POST_WRAPPER_FUNC(existing_table, new_address, new_table_length);
    kern_printk("acpi_os_physical_table_override returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_add_timer
#define APP_WRAPPER_FOR_add_timer
#endif
 
#ifndef APP_WRAPPER_FOR_add_timer
#define APP_WRAPPER_FOR_add_timer
FUNCTION_WRAPPER_VOID(add_timer, (struct timer_list *timer), {
    WRAP_RECURSIVE(timer);
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(timer)));
    kern_printk("add_timer is invoked.\n");
    PRE_WRAPPER_FUNC(timer);
    add_timer(timer);
    POST_WRAPPER_FUNC(timer);
    kern_printk("add_timer returned.\n");
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(timer)));
})
#endif


#ifndef KERN_ADDR_cgroup_css_from_dir
#define APP_WRAPPER_FOR_cgroup_css_from_dir
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_css_from_dir
#define APP_WRAPPER_FOR_cgroup_css_from_dir
FUNCTION_WRAPPER(cgroup_css_from_dir, (struct file *f, int id), {
    WRAP_RECURSIVE(f);
    TRACES_IF_WATCHPOINT(f);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(f)));
    kern_printk("cgroup_css_from_dir is invoked.\n");
    PRE_WRAPPER_FUNC(f, id);
    struct cgroup_subsys_state *ret = cgroup_css_from_dir(f, id);
    POST_WRAPPER_FUNC(f, id);
    kern_printk("cgroup_css_from_dir returned.\n");
    TRACES_IF_WATCHPOINT(f);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(f)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_fixup_irqs
#define APP_WRAPPER_FOR_fixup_irqs
#endif
 
#ifndef APP_WRAPPER_FOR_fixup_irqs
#define APP_WRAPPER_FOR_fixup_irqs
FUNCTION_WRAPPER_VOID(fixup_irqs, (), {
    kern_printk("fixup_irqs is invoked.\n");
    PRE_WRAPPER_FUNC();
    fixup_irqs();
    POST_WRAPPER_FUNC();
    kern_printk("fixup_irqs returned.\n");
})
#endif


#ifndef KERN_ADDR_set_memory_array_uc
#define APP_WRAPPER_FOR_set_memory_array_uc
#endif
 
#ifndef APP_WRAPPER_FOR_set_memory_array_uc
#define APP_WRAPPER_FOR_set_memory_array_uc
FUNCTION_WRAPPER(set_memory_array_uc, (unsigned long *addr, int addrinarray), {
    kern_printk("set_memory_array_uc is invoked.\n");
    PRE_WRAPPER_FUNC(addr, addrinarray);
    int ret = set_memory_array_uc(addr, addrinarray);
    POST_WRAPPER_FUNC(addr, addrinarray);
    kern_printk("set_memory_array_uc returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pm_generic_poweroff
#define APP_WRAPPER_FOR_pm_generic_poweroff
#endif
 
#ifndef APP_WRAPPER_FOR_pm_generic_poweroff
#define APP_WRAPPER_FOR_pm_generic_poweroff
FUNCTION_WRAPPER(pm_generic_poweroff, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pm_generic_poweroff is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pm_generic_poweroff(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pm_generic_poweroff returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pcie_capability_read_word
#define APP_WRAPPER_FOR_pcie_capability_read_word
#endif
 
#ifndef APP_WRAPPER_FOR_pcie_capability_read_word
#define APP_WRAPPER_FOR_pcie_capability_read_word
FUNCTION_WRAPPER(pcie_capability_read_word, (struct pci_dev *dev, int pos, u16 *val), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pcie_capability_read_word is invoked.\n");
    PRE_WRAPPER_FUNC(dev, pos, val);
    int ret = pcie_capability_read_word(dev, pos, val);
    POST_WRAPPER_FUNC(dev, pos, val);
    kern_printk("pcie_capability_read_word returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR___sock_recv_ts_and_drops
#define APP_WRAPPER_FOR___sock_recv_ts_and_drops
#endif
 
#ifndef APP_WRAPPER_FOR___sock_recv_ts_and_drops
#define APP_WRAPPER_FOR___sock_recv_ts_and_drops
FUNCTION_WRAPPER_VOID(__sock_recv_ts_and_drops, (struct msghdr *msg, struct sock *sk, struct sk_buff *skb), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("__sock_recv_ts_and_drops is invoked.\n");
    PRE_WRAPPER_FUNC(msg, sk, skb);
    __sock_recv_ts_and_drops(msg, sk, skb);
    POST_WRAPPER_FUNC(msg, sk, skb);
    kern_printk("__sock_recv_ts_and_drops returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_find_vma
#define APP_WRAPPER_FOR_find_vma
#endif
 
#ifndef APP_WRAPPER_FOR_find_vma
#define APP_WRAPPER_FOR_find_vma
FUNCTION_WRAPPER(find_vma, (struct mm_struct *mm, unsigned long addr), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    kern_printk("find_vma is invoked.\n");
    PRE_WRAPPER_FUNC(mm, addr);
    struct vm_area_struct *ret = find_vma(mm, addr);
    POST_WRAPPER_FUNC(mm, addr);
    kern_printk("find_vma returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_print_slabinfo_header
#define APP_WRAPPER_FOR_print_slabinfo_header
#endif
 
#ifndef APP_WRAPPER_FOR_print_slabinfo_header
#define APP_WRAPPER_FOR_print_slabinfo_header
FUNCTION_WRAPPER_VOID(print_slabinfo_header, (struct seq_file *m), {
    WRAP_RECURSIVE(m);
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
    kern_printk("print_slabinfo_header is invoked.\n");
    PRE_WRAPPER_FUNC(m);
    print_slabinfo_header(m);
    POST_WRAPPER_FUNC(m);
    kern_printk("print_slabinfo_header returned.\n");
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
})
#endif


#ifndef KERN_ADDR___bitmap_or
#define APP_WRAPPER_FOR___bitmap_or
#endif
 
#ifndef APP_WRAPPER_FOR___bitmap_or
#define APP_WRAPPER_FOR___bitmap_or
FUNCTION_WRAPPER_VOID(__bitmap_or, (unsigned long *dst, unsigned const long *bitmap1, unsigned const long *bitmap2, int bits), {
    kern_printk("__bitmap_or is invoked.\n");
    PRE_WRAPPER_FUNC(dst, bitmap1, bitmap2, bits);
    __bitmap_or(dst, bitmap1, bitmap2, bits);
    POST_WRAPPER_FUNC(dst, bitmap1, bitmap2, bits);
    kern_printk("__bitmap_or returned.\n");
})
#endif


#ifndef KERN_ADDR_has_ns_capability_noaudit
#define APP_WRAPPER_FOR_has_ns_capability_noaudit
#endif
 
#ifndef APP_WRAPPER_FOR_has_ns_capability_noaudit
#define APP_WRAPPER_FOR_has_ns_capability_noaudit
FUNCTION_WRAPPER(has_ns_capability_noaudit, (struct task_struct *t, struct user_namespace *ns, int cap), {
    WRAP_RECURSIVE(t);
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(t)));
    kern_printk("has_ns_capability_noaudit is invoked.\n");
    PRE_WRAPPER_FUNC(t, ns, cap);
    bool ret = has_ns_capability_noaudit(t, ns, cap);
    POST_WRAPPER_FUNC(t, ns, cap);
    kern_printk("has_ns_capability_noaudit returned.\n");
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(t)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_dispatch_request
#define APP_WRAPPER_FOR_dm_dispatch_request
#endif
 
#ifndef APP_WRAPPER_FOR_dm_dispatch_request
#define APP_WRAPPER_FOR_dm_dispatch_request
FUNCTION_WRAPPER_VOID(dm_dispatch_request, (struct request *rq), {
    WRAP_RECURSIVE(rq);
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    kern_printk("dm_dispatch_request is invoked.\n");
    PRE_WRAPPER_FUNC(rq);
    dm_dispatch_request(rq);
    POST_WRAPPER_FUNC(rq);
    kern_printk("dm_dispatch_request returned.\n");
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
})
#endif


#ifndef KERN_ADDR_mii_link_ok
#define APP_WRAPPER_FOR_mii_link_ok
#endif
 
#ifndef APP_WRAPPER_FOR_mii_link_ok
#define APP_WRAPPER_FOR_mii_link_ok
FUNCTION_WRAPPER(mii_link_ok, (struct mii_if_info *mii), {
    WRAP_RECURSIVE(mii);
    TRACES_IF_WATCHPOINT(mii);
    SCAN_HEAD_FUNC(struct mii_if_info)(*(TO_UNWATCHED_ADDRESS(mii)));
    kern_printk("mii_link_ok is invoked.\n");
    PRE_WRAPPER_FUNC(mii);
    int ret = mii_link_ok(mii);
    POST_WRAPPER_FUNC(mii);
    kern_printk("mii_link_ok returned.\n");
    TRACES_IF_WATCHPOINT(mii);
    SCAN_HEAD_FUNC(struct mii_if_info)(*(TO_UNWATCHED_ADDRESS(mii)));
    return ret;
})
#endif


#ifndef KERN_ADDR_param_get_invbool
#define APP_WRAPPER_FOR_param_get_invbool
#endif
 
#ifndef APP_WRAPPER_FOR_param_get_invbool
#define APP_WRAPPER_FOR_param_get_invbool
FUNCTION_WRAPPER(param_get_invbool, (char *buffer, const struct kernel_param *kp), {
    WRAP_RECURSIVE(kp);
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    kern_printk("param_get_invbool is invoked.\n");
    PRE_WRAPPER_FUNC(buffer, kp);
    int ret = param_get_invbool(buffer, kp);
    POST_WRAPPER_FUNC(buffer, kp);
    kern_printk("param_get_invbool returned.\n");
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_setup_sysctl_set
#define APP_WRAPPER_FOR_setup_sysctl_set
#endif
 
#ifndef APP_WRAPPER_FOR_setup_sysctl_set
#define APP_WRAPPER_FOR_setup_sysctl_set
FUNCTION_WRAPPER_VOID(setup_sysctl_set, (struct ctl_table_set *p, struct ctl_table_root *root, int (*is_seen)(struct ctl_table_set *)), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct ctl_table_set)(*(TO_UNWATCHED_ADDRESS(p)));
    WRAP_RECURSIVE(root);
    TRACES_IF_WATCHPOINT(root);
    SCAN_HEAD_FUNC(struct ctl_table_root)(*(TO_UNWATCHED_ADDRESS(root)));
    WRAP_FUNCTION(is_seen);
    kern_printk("setup_sysctl_set is invoked.\n");
    PRE_WRAPPER_FUNC(p, root, is_seen);
    setup_sysctl_set(p, root, is_seen);
    POST_WRAPPER_FUNC(p, root, is_seen);
    kern_printk("setup_sysctl_set returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct ctl_table_set)(*(TO_UNWATCHED_ADDRESS(p)));
    TRACES_IF_WATCHPOINT(root);
    SCAN_HEAD_FUNC(struct ctl_table_root)(*(TO_UNWATCHED_ADDRESS(root)));
})
#endif


#ifndef KERN_ADDR_netif_napi_del
#define APP_WRAPPER_FOR_netif_napi_del
#endif
 
#ifndef APP_WRAPPER_FOR_netif_napi_del
#define APP_WRAPPER_FOR_netif_napi_del
FUNCTION_WRAPPER_VOID(netif_napi_del, (struct napi_struct *napi), {
    WRAP_RECURSIVE(napi);
    TRACES_IF_WATCHPOINT(napi);
    SCAN_HEAD_FUNC(struct napi_struct)(*(TO_UNWATCHED_ADDRESS(napi)));
    kern_printk("netif_napi_del is invoked.\n");
    PRE_WRAPPER_FUNC(napi);
    netif_napi_del(napi);
    POST_WRAPPER_FUNC(napi);
    kern_printk("netif_napi_del returned.\n");
    TRACES_IF_WATCHPOINT(napi);
    SCAN_HEAD_FUNC(struct napi_struct)(*(TO_UNWATCHED_ADDRESS(napi)));
})
#endif


#ifndef KERN_ADDR_drain_zonestat
#define APP_WRAPPER_FOR_drain_zonestat
#endif
 
#ifndef APP_WRAPPER_FOR_drain_zonestat
#define APP_WRAPPER_FOR_drain_zonestat
FUNCTION_WRAPPER_VOID(drain_zonestat, (struct zone *zone, struct per_cpu_pageset *_arg1), {
    WRAP_RECURSIVE(zone);
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    kern_printk("drain_zonestat is invoked.\n");
    PRE_WRAPPER_FUNC(zone, _arg1);
    drain_zonestat(zone, _arg1);
    POST_WRAPPER_FUNC(zone, _arg1);
    kern_printk("drain_zonestat returned.\n");
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
})
#endif


#ifndef KERN_ADDR_unlock_page
#define APP_WRAPPER_FOR_unlock_page
#endif
 
#ifndef APP_WRAPPER_FOR_unlock_page
#define APP_WRAPPER_FOR_unlock_page
FUNCTION_WRAPPER_VOID(unlock_page, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("unlock_page is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    unlock_page(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("unlock_page returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_pci_enable_obff
#define APP_WRAPPER_FOR_pci_enable_obff
#endif
 
#ifndef APP_WRAPPER_FOR_pci_enable_obff
#define APP_WRAPPER_FOR_pci_enable_obff
FUNCTION_WRAPPER(pci_enable_obff, (struct pci_dev *dev, enum pci_obff_signal_type _arg1), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_enable_obff is invoked.\n");
    PRE_WRAPPER_FUNC(dev, _arg1);
    int ret = pci_enable_obff(dev, _arg1);
    POST_WRAPPER_FUNC(dev, _arg1);
    kern_printk("pci_enable_obff returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR___smp_call_function_single
#define APP_WRAPPER_FOR___smp_call_function_single
#endif
 
#ifndef APP_WRAPPER_FOR___smp_call_function_single
#define APP_WRAPPER_FOR___smp_call_function_single
FUNCTION_WRAPPER_VOID(__smp_call_function_single, (int cpuid, struct call_single_data *data, int wait), {
    WRAP_RECURSIVE(data);
    TRACES_IF_WATCHPOINT(data);
    SCAN_HEAD_FUNC(struct call_single_data)(*(TO_UNWATCHED_ADDRESS(data)));
    kern_printk("__smp_call_function_single is invoked.\n");
    PRE_WRAPPER_FUNC(cpuid, data, wait);
    __smp_call_function_single(cpuid, data, wait);
    POST_WRAPPER_FUNC(cpuid, data, wait);
    kern_printk("__smp_call_function_single returned.\n");
    TRACES_IF_WATCHPOINT(data);
    SCAN_HEAD_FUNC(struct call_single_data)(*(TO_UNWATCHED_ADDRESS(data)));
})
#endif


#ifndef KERN_ADDR_module_param_sysfs_setup
#define APP_WRAPPER_FOR_module_param_sysfs_setup
#endif
 
#ifndef APP_WRAPPER_FOR_module_param_sysfs_setup
#define APP_WRAPPER_FOR_module_param_sysfs_setup
FUNCTION_WRAPPER(module_param_sysfs_setup, (struct module *mod, const struct kernel_param *kparam, unsigned int num_params), {
    WRAP_RECURSIVE(mod);
    TRACES_IF_WATCHPOINT(mod);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(mod)));
    WRAP_RECURSIVE(kparam);
    TRACES_IF_WATCHPOINT(kparam);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kparam)));
    kern_printk("module_param_sysfs_setup is invoked.\n");
    PRE_WRAPPER_FUNC(mod, kparam, num_params);
    int ret = module_param_sysfs_setup(mod, kparam, num_params);
    POST_WRAPPER_FUNC(mod, kparam, num_params);
    kern_printk("module_param_sysfs_setup returned.\n");
    TRACES_IF_WATCHPOINT(mod);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(mod)));
    TRACES_IF_WATCHPOINT(kparam);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kparam)));
    return ret;
})
#endif


#ifndef KERN_ADDR_arch_uprobe_xol_was_trapped
#define APP_WRAPPER_FOR_arch_uprobe_xol_was_trapped
#endif
 
#ifndef APP_WRAPPER_FOR_arch_uprobe_xol_was_trapped
#define APP_WRAPPER_FOR_arch_uprobe_xol_was_trapped
FUNCTION_WRAPPER(arch_uprobe_xol_was_trapped, (struct task_struct *tsk), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("arch_uprobe_xol_was_trapped is invoked.\n");
    PRE_WRAPPER_FUNC(tsk);
    bool ret = arch_uprobe_xol_was_trapped(tsk);
    POST_WRAPPER_FUNC(tsk);
    kern_printk("arch_uprobe_xol_was_trapped returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_set_user_nice
#define APP_WRAPPER_FOR_set_user_nice
#endif
 
#ifndef APP_WRAPPER_FOR_set_user_nice
#define APP_WRAPPER_FOR_set_user_nice
FUNCTION_WRAPPER_VOID(set_user_nice, (struct task_struct *p, long nice), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("set_user_nice is invoked.\n");
    PRE_WRAPPER_FUNC(p, nice);
    set_user_nice(p, nice);
    POST_WRAPPER_FUNC(p, nice);
    kern_printk("set_user_nice returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
})
#endif


#ifndef KERN_ADDR_sg_miter_next
#define APP_WRAPPER_FOR_sg_miter_next
#endif
 
#ifndef APP_WRAPPER_FOR_sg_miter_next
#define APP_WRAPPER_FOR_sg_miter_next
FUNCTION_WRAPPER(sg_miter_next, (struct sg_mapping_iter *miter), {
    WRAP_RECURSIVE(miter);
    TRACES_IF_WATCHPOINT(miter);
    SCAN_HEAD_FUNC(struct sg_mapping_iter)(*(TO_UNWATCHED_ADDRESS(miter)));
    kern_printk("sg_miter_next is invoked.\n");
    PRE_WRAPPER_FUNC(miter);
    bool ret = sg_miter_next(miter);
    POST_WRAPPER_FUNC(miter);
    kern_printk("sg_miter_next returned.\n");
    TRACES_IF_WATCHPOINT(miter);
    SCAN_HEAD_FUNC(struct sg_mapping_iter)(*(TO_UNWATCHED_ADDRESS(miter)));
    return ret;
})
#endif


#ifndef KERN_ADDR_nlmsg_notify
#define APP_WRAPPER_FOR_nlmsg_notify
#endif
 
#ifndef APP_WRAPPER_FOR_nlmsg_notify
#define APP_WRAPPER_FOR_nlmsg_notify
FUNCTION_WRAPPER(nlmsg_notify, (struct sock *sk, struct sk_buff *skb, u32 portid, unsigned int group, int report, gfp_t flags), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("nlmsg_notify is invoked.\n");
    PRE_WRAPPER_FUNC(sk, skb, portid, group, report, flags);
    int ret = nlmsg_notify(sk, skb, portid, group, report, flags);
    POST_WRAPPER_FUNC(sk, skb, portid, group, report, flags);
    kern_printk("nlmsg_notify returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_wrmsr_on_cpus
#define APP_WRAPPER_FOR_wrmsr_on_cpus
#endif
 
#ifndef APP_WRAPPER_FOR_wrmsr_on_cpus
#define APP_WRAPPER_FOR_wrmsr_on_cpus
FUNCTION_WRAPPER_VOID(wrmsr_on_cpus, (const struct cpumask *mask, u32 msr_no, struct msr *msrs), {
    kern_printk("wrmsr_on_cpus is invoked.\n");
    PRE_WRAPPER_FUNC(mask, msr_no, msrs);
    wrmsr_on_cpus(mask, msr_no, msrs);
    POST_WRAPPER_FUNC(mask, msr_no, msrs);
    kern_printk("wrmsr_on_cpus returned.\n");
})
#endif


#ifndef KERN_ADDR_commit_creds
#define APP_WRAPPER_FOR_commit_creds
#endif
 
#ifndef APP_WRAPPER_FOR_commit_creds
#define APP_WRAPPER_FOR_commit_creds
FUNCTION_WRAPPER(commit_creds, (struct cred *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct cred)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("commit_creds is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = commit_creds(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("commit_creds returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct cred)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_setitimer
#define APP_WRAPPER_FOR_compat_sys_setitimer
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_setitimer
#define APP_WRAPPER_FOR_compat_sys_setitimer
FUNCTION_WRAPPER(compat_sys_setitimer, (int which, struct compat_itimerval *in, struct compat_itimerval *out), {
    kern_printk("compat_sys_setitimer is invoked.\n");
    PRE_WRAPPER_FUNC(which, in, out);
    long ret = compat_sys_setitimer(which, in, out);
    POST_WRAPPER_FUNC(which, in, out);
    kern_printk("compat_sys_setitimer returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_block_truncate_page
#define APP_WRAPPER_FOR_block_truncate_page
#endif
 
#ifndef APP_WRAPPER_FOR_block_truncate_page
#define APP_WRAPPER_FOR_block_truncate_page
FUNCTION_WRAPPER(block_truncate_page, (struct address_space *_arg1, loff_t _arg2, get_block_t *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_FUNCTION(_arg3);
    kern_printk("block_truncate_page is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = block_truncate_page(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("block_truncate_page returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_page_swap_info
#define APP_WRAPPER_FOR_page_swap_info
#endif
 
#ifndef APP_WRAPPER_FOR_page_swap_info
#define APP_WRAPPER_FOR_page_swap_info
FUNCTION_WRAPPER(page_swap_info, (struct page *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("page_swap_info is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct swap_info_struct *ret = page_swap_info(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("page_swap_info returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pmdp_test_and_clear_young
#define APP_WRAPPER_FOR_pmdp_test_and_clear_young
#endif
 
#ifndef APP_WRAPPER_FOR_pmdp_test_and_clear_young
#define APP_WRAPPER_FOR_pmdp_test_and_clear_young
FUNCTION_WRAPPER(pmdp_test_and_clear_young, (struct vm_area_struct *vma, unsigned long addr, pmd_t *pmdp), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("pmdp_test_and_clear_young is invoked.\n");
    PRE_WRAPPER_FUNC(vma, addr, pmdp);
    int ret = pmdp_test_and_clear_young(vma, addr, pmdp);
    POST_WRAPPER_FUNC(vma, addr, pmdp);
    kern_printk("pmdp_test_and_clear_young returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_qdisc_list_del
#define APP_WRAPPER_FOR_qdisc_list_del
#endif
 
#ifndef APP_WRAPPER_FOR_qdisc_list_del
#define APP_WRAPPER_FOR_qdisc_list_del
FUNCTION_WRAPPER_VOID(qdisc_list_del, (struct Qdisc *q), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(q)));
    kern_printk("qdisc_list_del is invoked.\n");
    PRE_WRAPPER_FUNC(q);
    qdisc_list_del(q);
    POST_WRAPPER_FUNC(q);
    kern_printk("qdisc_list_del returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(q)));
})
#endif


#ifndef KERN_ADDR_compat_sys_pwritev
#define APP_WRAPPER_FOR_compat_sys_pwritev
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_pwritev
#define APP_WRAPPER_FOR_compat_sys_pwritev
FUNCTION_WRAPPER(compat_sys_pwritev, (unsigned long fd, const struct compat_iovec *vec, unsigned long vlen, u32 pos_low, u32 pos_high), {
    kern_printk("compat_sys_pwritev is invoked.\n");
    PRE_WRAPPER_FUNC(fd, vec, vlen, pos_low, pos_high);
    ssize_t ret = compat_sys_pwritev(fd, vec, vlen, pos_low, pos_high);
    POST_WRAPPER_FUNC(fd, vec, vlen, pos_low, pos_high);
    kern_printk("compat_sys_pwritev returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pcibios_scan_root
#define APP_WRAPPER_FOR_pcibios_scan_root
#endif
 
#ifndef APP_WRAPPER_FOR_pcibios_scan_root
#define APP_WRAPPER_FOR_pcibios_scan_root
FUNCTION_WRAPPER(pcibios_scan_root, (int bus), {
    kern_printk("pcibios_scan_root is invoked.\n");
    PRE_WRAPPER_FUNC(bus);
    struct pci_bus *ret = pcibios_scan_root(bus);
    POST_WRAPPER_FUNC(bus);
    kern_printk("pcibios_scan_root returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_bitmap_scnprintf
#define APP_WRAPPER_FOR_bitmap_scnprintf
#endif
 
#ifndef APP_WRAPPER_FOR_bitmap_scnprintf
#define APP_WRAPPER_FOR_bitmap_scnprintf
FUNCTION_WRAPPER(bitmap_scnprintf, (char *buf, unsigned int len, unsigned const long *src, int nbits), {
    kern_printk("bitmap_scnprintf is invoked.\n");
    PRE_WRAPPER_FUNC(buf, len, src, nbits);
    int ret = bitmap_scnprintf(buf, len, src, nbits);
    POST_WRAPPER_FUNC(buf, len, src, nbits);
    kern_printk("bitmap_scnprintf returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_vmemmap_pmd_populate
#define APP_WRAPPER_FOR_vmemmap_pmd_populate
#endif
 
#ifndef APP_WRAPPER_FOR_vmemmap_pmd_populate
#define APP_WRAPPER_FOR_vmemmap_pmd_populate
FUNCTION_WRAPPER(vmemmap_pmd_populate, (pud_t *pud, unsigned long addr, int node), {
    kern_printk("vmemmap_pmd_populate is invoked.\n");
    PRE_WRAPPER_FUNC(pud, addr, node);
    pmd_t *ret = vmemmap_pmd_populate(pud, addr, node);
    POST_WRAPPER_FUNC(pud, addr, node);
    kern_printk("vmemmap_pmd_populate returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_smp_reschedule_interrupt
#define APP_WRAPPER_FOR_smp_reschedule_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_smp_reschedule_interrupt
#define APP_WRAPPER_FOR_smp_reschedule_interrupt
FUNCTION_WRAPPER_VOID(smp_reschedule_interrupt, (struct pt_regs *_arg1), {
    kern_printk("smp_reschedule_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    smp_reschedule_interrupt(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("smp_reschedule_interrupt returned.\n");
})
#endif


#ifndef KERN_ADDR_wrmsr_on_cpu
#define APP_WRAPPER_FOR_wrmsr_on_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_wrmsr_on_cpu
#define APP_WRAPPER_FOR_wrmsr_on_cpu
FUNCTION_WRAPPER(wrmsr_on_cpu, (unsigned int cpu, u32 msr_no, u32 l, u32 h), {
    kern_printk("wrmsr_on_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, msr_no, l, h);
    int ret = wrmsr_on_cpu(cpu, msr_no, l, h);
    POST_WRAPPER_FUNC(cpu, msr_no, l, h);
    kern_printk("wrmsr_on_cpu returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_table_parse_entries
#define APP_WRAPPER_FOR_acpi_table_parse_entries
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_table_parse_entries
#define APP_WRAPPER_FOR_acpi_table_parse_entries
FUNCTION_WRAPPER(acpi_table_parse_entries, (char *id, unsigned long table_size, int entry_id, acpi_table_entry_handler handler, unsigned int max_entries), {
    WRAP_FUNCTION(handler);
    kern_printk("acpi_table_parse_entries is invoked.\n");
    PRE_WRAPPER_FUNC(id, table_size, entry_id, handler, max_entries);
    int ret = acpi_table_parse_entries(id, table_size, entry_id, handler, max_entries);
    POST_WRAPPER_FUNC(id, table_size, entry_id, handler, max_entries);
    kern_printk("acpi_table_parse_entries returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_netif_device_detach
#define APP_WRAPPER_FOR_netif_device_detach
#endif
 
#ifndef APP_WRAPPER_FOR_netif_device_detach
#define APP_WRAPPER_FOR_netif_device_detach
FUNCTION_WRAPPER_VOID(netif_device_detach, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("netif_device_detach is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    netif_device_detach(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("netif_device_detach returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_blk_alloc_devt
#define APP_WRAPPER_FOR_blk_alloc_devt
#endif
 
#ifndef APP_WRAPPER_FOR_blk_alloc_devt
#define APP_WRAPPER_FOR_blk_alloc_devt
FUNCTION_WRAPPER(blk_alloc_devt, (struct hd_struct *part, dev_t *devt), {
    WRAP_RECURSIVE(part);
    TRACES_IF_WATCHPOINT(part);
    SCAN_HEAD_FUNC(struct hd_struct)(*(TO_UNWATCHED_ADDRESS(part)));
    kern_printk("blk_alloc_devt is invoked.\n");
    PRE_WRAPPER_FUNC(part, devt);
    int ret = blk_alloc_devt(part, devt);
    POST_WRAPPER_FUNC(part, devt);
    kern_printk("blk_alloc_devt returned.\n");
    TRACES_IF_WATCHPOINT(part);
    SCAN_HEAD_FUNC(struct hd_struct)(*(TO_UNWATCHED_ADDRESS(part)));
    return ret;
})
#endif


#ifndef KERN_ADDR_timespec_to_jiffies
#define APP_WRAPPER_FOR_timespec_to_jiffies
#endif
 
#ifndef APP_WRAPPER_FOR_timespec_to_jiffies
#define APP_WRAPPER_FOR_timespec_to_jiffies
FUNCTION_WRAPPER(timespec_to_jiffies, (const struct timespec *value), {
    kern_printk("timespec_to_jiffies is invoked.\n");
    PRE_WRAPPER_FUNC(value);
    long ret = timespec_to_jiffies(value);
    POST_WRAPPER_FUNC(value);
    kern_printk("timespec_to_jiffies returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___class_create
#define APP_WRAPPER_FOR___class_create
#endif
 
#ifndef APP_WRAPPER_FOR___class_create
#define APP_WRAPPER_FOR___class_create
FUNCTION_WRAPPER(__class_create, (struct module *owner, const char *name, struct lock_class_key *key), {
    WRAP_RECURSIVE(owner);
    TRACES_IF_WATCHPOINT(owner);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(owner)));
    kern_printk("__class_create is invoked.\n");
    PRE_WRAPPER_FUNC(owner, name, key);
    struct class_ *ret = __class_create(owner, name, key);
    POST_WRAPPER_FUNC(owner, name, key);
    kern_printk("__class_create returned.\n");
    TRACES_IF_WATCHPOINT(owner);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(owner)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR__copy_from_user
#define APP_WRAPPER_FOR__copy_from_user
#endif
 
#ifndef APP_WRAPPER_FOR__copy_from_user
#define APP_WRAPPER_FOR__copy_from_user
FUNCTION_WRAPPER(_copy_from_user, (void *to, const void *from, unsigned int len), {
    kern_printk("_copy_from_user is invoked.\n");
    PRE_WRAPPER_FUNC(to, from, len);
    long ret = _copy_from_user(to, from, len);
    POST_WRAPPER_FUNC(to, from, len);
    kern_printk("_copy_from_user returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_kernel_getsockname
#define APP_WRAPPER_FOR_kernel_getsockname
#endif
 
#ifndef APP_WRAPPER_FOR_kernel_getsockname
#define APP_WRAPPER_FOR_kernel_getsockname
FUNCTION_WRAPPER(kernel_getsockname, (struct socket *sock, struct sockaddr *addr, int *addrlen), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    kern_printk("kernel_getsockname is invoked.\n");
    PRE_WRAPPER_FUNC(sock, addr, addrlen);
    int ret = kernel_getsockname(sock, addr, addrlen);
    POST_WRAPPER_FUNC(sock, addr, addrlen);
    kern_printk("kernel_getsockname returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_twsk_put
#define APP_WRAPPER_FOR_inet_twsk_put
#endif
 
#ifndef APP_WRAPPER_FOR_inet_twsk_put
#define APP_WRAPPER_FOR_inet_twsk_put
FUNCTION_WRAPPER_VOID(inet_twsk_put, (struct inet_timewait_sock *tw), {
    WRAP_RECURSIVE(tw);
    TRACES_IF_WATCHPOINT(tw);
    SCAN_HEAD_FUNC(struct inet_timewait_sock)(*(TO_UNWATCHED_ADDRESS(tw)));
    kern_printk("inet_twsk_put is invoked.\n");
    PRE_WRAPPER_FUNC(tw);
    inet_twsk_put(tw);
    POST_WRAPPER_FUNC(tw);
    kern_printk("inet_twsk_put returned.\n");
    TRACES_IF_WATCHPOINT(tw);
    SCAN_HEAD_FUNC(struct inet_timewait_sock)(*(TO_UNWATCHED_ADDRESS(tw)));
})
#endif


#ifndef KERN_ADDR_kobj_ns_type_registered
#define APP_WRAPPER_FOR_kobj_ns_type_registered
#endif
 
#ifndef APP_WRAPPER_FOR_kobj_ns_type_registered
#define APP_WRAPPER_FOR_kobj_ns_type_registered
FUNCTION_WRAPPER(kobj_ns_type_registered, (enum kobj_ns_type type), {
    kern_printk("kobj_ns_type_registered is invoked.\n");
    PRE_WRAPPER_FUNC(type);
    int ret = kobj_ns_type_registered(type);
    POST_WRAPPER_FUNC(type);
    kern_printk("kobj_ns_type_registered returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___account_scheduler_latency
#define APP_WRAPPER_FOR___account_scheduler_latency
#endif
 
#ifndef APP_WRAPPER_FOR___account_scheduler_latency
#define APP_WRAPPER_FOR___account_scheduler_latency
FUNCTION_WRAPPER_VOID(__account_scheduler_latency, (struct task_struct *task, int usecs, int inter), {
    WRAP_RECURSIVE(task);
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    kern_printk("__account_scheduler_latency is invoked.\n");
    PRE_WRAPPER_FUNC(task, usecs, inter);
    __account_scheduler_latency(task, usecs, inter);
    POST_WRAPPER_FUNC(task, usecs, inter);
    kern_printk("__account_scheduler_latency returned.\n");
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
})
#endif


#ifndef KERN_ADDR_idr_pre_get
#define APP_WRAPPER_FOR_idr_pre_get
#endif
 
#ifndef APP_WRAPPER_FOR_idr_pre_get
#define APP_WRAPPER_FOR_idr_pre_get
FUNCTION_WRAPPER(idr_pre_get, (struct idr *idp, gfp_t gfp_mask), {
    WRAP_RECURSIVE(idp);
    TRACES_IF_WATCHPOINT(idp);
    SCAN_HEAD_FUNC(struct idr)(*(TO_UNWATCHED_ADDRESS(idp)));
    kern_printk("idr_pre_get is invoked.\n");
    PRE_WRAPPER_FUNC(idp, gfp_mask);
    int ret = idr_pre_get(idp, gfp_mask);
    POST_WRAPPER_FUNC(idp, gfp_mask);
    kern_printk("idr_pre_get returned.\n");
    TRACES_IF_WATCHPOINT(idp);
    SCAN_HEAD_FUNC(struct idr)(*(TO_UNWATCHED_ADDRESS(idp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_file_buffer
#define APP_WRAPPER_FOR_jbd2_journal_file_buffer
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_file_buffer
#define APP_WRAPPER_FOR_jbd2_journal_file_buffer
FUNCTION_WRAPPER_VOID(jbd2_journal_file_buffer, (struct journal_head *_arg1, transaction_t *_arg2, int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(transaction_t)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("jbd2_journal_file_buffer is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    jbd2_journal_file_buffer(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("jbd2_journal_file_buffer returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(transaction_t)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_ata_host_activate
#define APP_WRAPPER_FOR_ata_host_activate
#endif
 
#ifndef APP_WRAPPER_FOR_ata_host_activate
#define APP_WRAPPER_FOR_ata_host_activate
FUNCTION_WRAPPER(ata_host_activate, (struct ata_host *host, int irq, irq_handler_t irq_handler, unsigned long irq_flags, struct scsi_host_template *sht), {
    WRAP_RECURSIVE(host);
    TRACES_IF_WATCHPOINT(host);
    SCAN_HEAD_FUNC(struct ata_host)(*(TO_UNWATCHED_ADDRESS(host)));
    WRAP_FUNCTION(irq_handler);
    WRAP_RECURSIVE(sht);
    TRACES_IF_WATCHPOINT(sht);
    SCAN_HEAD_FUNC(struct scsi_host_template)(*(TO_UNWATCHED_ADDRESS(sht)));
    kern_printk("ata_host_activate is invoked.\n");
    PRE_WRAPPER_FUNC(host, irq, irq_handler, irq_flags, sht);
    int ret = ata_host_activate(host, irq, irq_handler, irq_flags, sht);
    POST_WRAPPER_FUNC(host, irq, irq_handler, irq_flags, sht);
    kern_printk("ata_host_activate returned.\n");
    TRACES_IF_WATCHPOINT(host);
    SCAN_HEAD_FUNC(struct ata_host)(*(TO_UNWATCHED_ADDRESS(host)));
    TRACES_IF_WATCHPOINT(sht);
    SCAN_HEAD_FUNC(struct scsi_host_template)(*(TO_UNWATCHED_ADDRESS(sht)));
    return ret;
})
#endif


#ifndef KERN_ADDR___alloc_skb
#define APP_WRAPPER_FOR___alloc_skb
#endif
 
#ifndef APP_WRAPPER_FOR___alloc_skb
#define APP_WRAPPER_FOR___alloc_skb
FUNCTION_WRAPPER(__alloc_skb, (unsigned int size, gfp_t priority, int flags, int node), {
    kern_printk("__alloc_skb is invoked.\n");
    PRE_WRAPPER_FUNC(size, priority, flags, node);
    struct sk_buff *ret = __alloc_skb(size, priority, flags, node);
    POST_WRAPPER_FUNC(size, priority, flags, node);
    kern_printk("__alloc_skb returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_vmalloc_exec
#define APP_WRAPPER_FOR_vmalloc_exec
#endif
 
#ifndef APP_WRAPPER_FOR_vmalloc_exec
#define APP_WRAPPER_FOR_vmalloc_exec
FUNCTION_WRAPPER(vmalloc_exec, (unsigned long size), {
    kern_printk("vmalloc_exec is invoked.\n");
    PRE_WRAPPER_FUNC(size);
    void *ret = vmalloc_exec(size);
    POST_WRAPPER_FUNC(size);
    kern_printk("vmalloc_exec returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___bdi_update_bandwidth
#define APP_WRAPPER_FOR___bdi_update_bandwidth
#endif
 
#ifndef APP_WRAPPER_FOR___bdi_update_bandwidth
#define APP_WRAPPER_FOR___bdi_update_bandwidth
FUNCTION_WRAPPER_VOID(__bdi_update_bandwidth, (struct backing_dev_info *bdi, unsigned long thresh, unsigned long bg_thresh, unsigned long dirty, unsigned long bdi_thresh, unsigned long bdi_dirty, unsigned long start_time), {
    WRAP_RECURSIVE(bdi);
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
    kern_printk("__bdi_update_bandwidth is invoked.\n");
    PRE_WRAPPER_FUNC(bdi, thresh, bg_thresh, dirty, bdi_thresh, bdi_dirty, start_time);
    __bdi_update_bandwidth(bdi, thresh, bg_thresh, dirty, bdi_thresh, bdi_dirty, start_time);
    POST_WRAPPER_FUNC(bdi, thresh, bg_thresh, dirty, bdi_thresh, bdi_dirty, start_time);
    kern_printk("__bdi_update_bandwidth returned.\n");
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
})
#endif


#ifndef KERN_ADDR_add_page_wait_queue
#define APP_WRAPPER_FOR_add_page_wait_queue
#endif
 
#ifndef APP_WRAPPER_FOR_add_page_wait_queue
#define APP_WRAPPER_FOR_add_page_wait_queue
FUNCTION_WRAPPER_VOID(add_page_wait_queue, (struct page *page, wait_queue_t *waiter), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    WRAP_RECURSIVE(waiter);
    TRACES_IF_WATCHPOINT(waiter);
    SCAN_HEAD_FUNC(wait_queue_t)(*(TO_UNWATCHED_ADDRESS(waiter)));
    kern_printk("add_page_wait_queue is invoked.\n");
    PRE_WRAPPER_FUNC(page, waiter);
    add_page_wait_queue(page, waiter);
    POST_WRAPPER_FUNC(page, waiter);
    kern_printk("add_page_wait_queue returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    TRACES_IF_WATCHPOINT(waiter);
    SCAN_HEAD_FUNC(wait_queue_t)(*(TO_UNWATCHED_ADDRESS(waiter)));
})
#endif


#ifndef KERN_ADDR_sk_common_release
#define APP_WRAPPER_FOR_sk_common_release
#endif
 
#ifndef APP_WRAPPER_FOR_sk_common_release
#define APP_WRAPPER_FOR_sk_common_release
FUNCTION_WRAPPER_VOID(sk_common_release, (struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sk_common_release is invoked.\n");
    PRE_WRAPPER_FUNC(sk);
    sk_common_release(sk);
    POST_WRAPPER_FUNC(sk);
    kern_printk("sk_common_release returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR_mem_cgroup_shrink_node_zone
#define APP_WRAPPER_FOR_mem_cgroup_shrink_node_zone
#endif
 
#ifndef APP_WRAPPER_FOR_mem_cgroup_shrink_node_zone
#define APP_WRAPPER_FOR_mem_cgroup_shrink_node_zone
FUNCTION_WRAPPER(mem_cgroup_shrink_node_zone, (struct mem_cgroup *mem, gfp_t gfp_mask, bool noswap, struct zone *zone, unsigned long *nr_scanned), {
    WRAP_RECURSIVE(zone);
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    kern_printk("mem_cgroup_shrink_node_zone is invoked.\n");
    PRE_WRAPPER_FUNC(mem, gfp_mask, noswap, zone, nr_scanned);
    long ret = mem_cgroup_shrink_node_zone(mem, gfp_mask, noswap, zone, nr_scanned);
    POST_WRAPPER_FUNC(mem, gfp_mask, noswap, zone, nr_scanned);
    kern_printk("mem_cgroup_shrink_node_zone returned.\n");
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    return ret;
})
#endif


#ifndef KERN_ADDR_task_prio
#define APP_WRAPPER_FOR_task_prio
#endif
 
#ifndef APP_WRAPPER_FOR_task_prio
#define APP_WRAPPER_FOR_task_prio
FUNCTION_WRAPPER(task_prio, (const struct task_struct *p), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(const struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("task_prio is invoked.\n");
    PRE_WRAPPER_FUNC(p);
    int ret = task_prio(p);
    POST_WRAPPER_FUNC(p);
    kern_printk("task_prio returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(const struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bvec_nr_vecs
#define APP_WRAPPER_FOR_bvec_nr_vecs
#endif
 
#ifndef APP_WRAPPER_FOR_bvec_nr_vecs
#define APP_WRAPPER_FOR_bvec_nr_vecs
FUNCTION_WRAPPER(bvec_nr_vecs, (unsigned short idx), {
    kern_printk("bvec_nr_vecs is invoked.\n");
    PRE_WRAPPER_FUNC(idx);
    int ret = bvec_nr_vecs(idx);
    POST_WRAPPER_FUNC(idx);
    kern_printk("bvec_nr_vecs returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_devres_close_group
#define APP_WRAPPER_FOR_devres_close_group
#endif
 
#ifndef APP_WRAPPER_FOR_devres_close_group
#define APP_WRAPPER_FOR_devres_close_group
FUNCTION_WRAPPER_VOID(devres_close_group, (struct device *dev, void *id), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("devres_close_group is invoked.\n");
    PRE_WRAPPER_FUNC(dev, id);
    devres_close_group(dev, id);
    POST_WRAPPER_FUNC(dev, id);
    kern_printk("devres_close_group returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_enable_x2apic
#define APP_WRAPPER_FOR_enable_x2apic
#endif
 
#ifndef APP_WRAPPER_FOR_enable_x2apic
#define APP_WRAPPER_FOR_enable_x2apic
FUNCTION_WRAPPER_VOID(enable_x2apic, (), {
    kern_printk("enable_x2apic is invoked.\n");
    PRE_WRAPPER_FUNC();
    enable_x2apic();
    POST_WRAPPER_FUNC();
    kern_printk("enable_x2apic returned.\n");
})
#endif


#ifndef KERN_ADDR_set_pages_nx
#define APP_WRAPPER_FOR_set_pages_nx
#endif
 
#ifndef APP_WRAPPER_FOR_set_pages_nx
#define APP_WRAPPER_FOR_set_pages_nx
FUNCTION_WRAPPER(set_pages_nx, (struct page *page, int numpages), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("set_pages_nx is invoked.\n");
    PRE_WRAPPER_FUNC(page, numpages);
    int ret = set_pages_nx(page, numpages);
    POST_WRAPPER_FUNC(page, numpages);
    kern_printk("set_pages_nx returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_switch_task_namespaces
#define APP_WRAPPER_FOR_switch_task_namespaces
#endif
 
#ifndef APP_WRAPPER_FOR_switch_task_namespaces
#define APP_WRAPPER_FOR_switch_task_namespaces
FUNCTION_WRAPPER_VOID(switch_task_namespaces, (struct task_struct *tsk, struct nsproxy *new_), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    WRAP_RECURSIVE(new_);
    TRACES_IF_WATCHPOINT(new_);
    SCAN_HEAD_FUNC(struct nsproxy)(*(TO_UNWATCHED_ADDRESS(new_)));
    kern_printk("switch_task_namespaces is invoked.\n");
    PRE_WRAPPER_FUNC(tsk, new_);
    switch_task_namespaces(tsk, new_);
    POST_WRAPPER_FUNC(tsk, new_);
    kern_printk("switch_task_namespaces returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    TRACES_IF_WATCHPOINT(new_);
    SCAN_HEAD_FUNC(struct nsproxy)(*(TO_UNWATCHED_ADDRESS(new_)));
})
#endif


#ifndef KERN_ADDR_timerqueue_iterate_next
#define APP_WRAPPER_FOR_timerqueue_iterate_next
#endif
 
#ifndef APP_WRAPPER_FOR_timerqueue_iterate_next
#define APP_WRAPPER_FOR_timerqueue_iterate_next
FUNCTION_WRAPPER(timerqueue_iterate_next, (struct timerqueue_node *node), {
    kern_printk("timerqueue_iterate_next is invoked.\n");
    PRE_WRAPPER_FUNC(node);
    struct timerqueue_node *ret = timerqueue_iterate_next(node);
    POST_WRAPPER_FUNC(node);
    kern_printk("timerqueue_iterate_next returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_driver_register
#define APP_WRAPPER_FOR_driver_register
#endif
 
#ifndef APP_WRAPPER_FOR_driver_register
#define APP_WRAPPER_FOR_driver_register
FUNCTION_WRAPPER(driver_register, (struct device_driver *drv), {
    WRAP_RECURSIVE(drv);
    TRACES_IF_WATCHPOINT(drv);
    SCAN_HEAD_FUNC(struct device_driver)(*(TO_UNWATCHED_ADDRESS(drv)));
    kern_printk("driver_register is invoked.\n");
    PRE_WRAPPER_FUNC(drv);
    int ret = driver_register(drv);
    POST_WRAPPER_FUNC(drv);
    kern_printk("driver_register returned.\n");
    TRACES_IF_WATCHPOINT(drv);
    SCAN_HEAD_FUNC(struct device_driver)(*(TO_UNWATCHED_ADDRESS(drv)));
    return ret;
})
#endif


#ifndef KERN_ADDR_rwsem_wake
#define APP_WRAPPER_FOR_rwsem_wake
#endif
 
#ifndef APP_WRAPPER_FOR_rwsem_wake
#define APP_WRAPPER_FOR_rwsem_wake
FUNCTION_WRAPPER(rwsem_wake, (struct rw_semaphore *_arg1), {
    kern_printk("rwsem_wake is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct rw_semaphore *ret = rwsem_wake(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("rwsem_wake returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_set_task_ioprio
#define APP_WRAPPER_FOR_set_task_ioprio
#endif
 
#ifndef APP_WRAPPER_FOR_set_task_ioprio
#define APP_WRAPPER_FOR_set_task_ioprio
FUNCTION_WRAPPER(set_task_ioprio, (struct task_struct *task, int ioprio), {
    WRAP_RECURSIVE(task);
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    kern_printk("set_task_ioprio is invoked.\n");
    PRE_WRAPPER_FUNC(task, ioprio);
    int ret = set_task_ioprio(task, ioprio);
    POST_WRAPPER_FUNC(task, ioprio);
    kern_printk("set_task_ioprio returned.\n");
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    return ret;
})
#endif


#ifndef KERN_ADDR_clocksource_get_next
#define APP_WRAPPER_FOR_clocksource_get_next
#endif
 
#ifndef APP_WRAPPER_FOR_clocksource_get_next
#define APP_WRAPPER_FOR_clocksource_get_next
FUNCTION_WRAPPER(clocksource_get_next, (), {
    kern_printk("clocksource_get_next is invoked.\n");
    PRE_WRAPPER_FUNC();
    struct clocksource *ret = clocksource_get_next();
    POST_WRAPPER_FUNC();
    kern_printk("clocksource_get_next returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_bio_check_pages_dirty
#define APP_WRAPPER_FOR_bio_check_pages_dirty
#endif
 
#ifndef APP_WRAPPER_FOR_bio_check_pages_dirty
#define APP_WRAPPER_FOR_bio_check_pages_dirty
FUNCTION_WRAPPER_VOID(bio_check_pages_dirty, (struct bio *bio), {
    WRAP_RECURSIVE(bio);
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
    kern_printk("bio_check_pages_dirty is invoked.\n");
    PRE_WRAPPER_FUNC(bio);
    bio_check_pages_dirty(bio);
    POST_WRAPPER_FUNC(bio);
    kern_printk("bio_check_pages_dirty returned.\n");
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
})
#endif


#ifndef KERN_ADDR_acpi_os_release_lock
#define APP_WRAPPER_FOR_acpi_os_release_lock
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_release_lock
#define APP_WRAPPER_FOR_acpi_os_release_lock
FUNCTION_WRAPPER_VOID(acpi_os_release_lock, (spinlock_t *handle, unsigned long flags), {
    kern_printk("acpi_os_release_lock is invoked.\n");
    PRE_WRAPPER_FUNC(handle, flags);
    acpi_os_release_lock(handle, flags);
    POST_WRAPPER_FUNC(handle, flags);
    kern_printk("acpi_os_release_lock returned.\n");
})
#endif


#ifndef KERN_ADDR_is_vma_temporary_stack
#define APP_WRAPPER_FOR_is_vma_temporary_stack
#endif
 
#ifndef APP_WRAPPER_FOR_is_vma_temporary_stack
#define APP_WRAPPER_FOR_is_vma_temporary_stack
FUNCTION_WRAPPER(is_vma_temporary_stack, (struct vm_area_struct *vma), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("is_vma_temporary_stack is invoked.\n");
    PRE_WRAPPER_FUNC(vma);
    bool ret = is_vma_temporary_stack(vma);
    POST_WRAPPER_FUNC(vma);
    kern_printk("is_vma_temporary_stack returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_set_master
#define APP_WRAPPER_FOR_pci_set_master
#endif
 
#ifndef APP_WRAPPER_FOR_pci_set_master
#define APP_WRAPPER_FOR_pci_set_master
FUNCTION_WRAPPER_VOID(pci_set_master, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_set_master is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pci_set_master(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_set_master returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_sata_link_hardreset
#define APP_WRAPPER_FOR_sata_link_hardreset
#endif
 
#ifndef APP_WRAPPER_FOR_sata_link_hardreset
#define APP_WRAPPER_FOR_sata_link_hardreset
FUNCTION_WRAPPER(sata_link_hardreset, (struct ata_link *link, unsigned const long *timing, unsigned long deadline, bool *online, int (*check_ready)(struct ata_link *)), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    WRAP_FUNCTION(check_ready);
    kern_printk("sata_link_hardreset is invoked.\n");
    PRE_WRAPPER_FUNC(link, timing, deadline, online, check_ready);
    int ret = sata_link_hardreset(link, timing, deadline, online, check_ready);
    POST_WRAPPER_FUNC(link, timing, deadline, online, check_ready);
    kern_printk("sata_link_hardreset returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    return ret;
})
#endif


#ifndef KERN_ADDR_set_memory_4k
#define APP_WRAPPER_FOR_set_memory_4k
#endif
 
#ifndef APP_WRAPPER_FOR_set_memory_4k
#define APP_WRAPPER_FOR_set_memory_4k
FUNCTION_WRAPPER(set_memory_4k, (unsigned long addr, int numpages), {
    kern_printk("set_memory_4k is invoked.\n");
    PRE_WRAPPER_FUNC(addr, numpages);
    int ret = set_memory_4k(addr, numpages);
    POST_WRAPPER_FUNC(addr, numpages);
    kern_printk("set_memory_4k returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_early_acpi_os_unmap_memory
#define APP_WRAPPER_FOR_early_acpi_os_unmap_memory
#endif
 
#ifndef APP_WRAPPER_FOR_early_acpi_os_unmap_memory
#define APP_WRAPPER_FOR_early_acpi_os_unmap_memory
FUNCTION_WRAPPER_VOID(early_acpi_os_unmap_memory, (void *virt, acpi_size size), {
    kern_printk("early_acpi_os_unmap_memory is invoked.\n");
    PRE_WRAPPER_FUNC(virt, size);
    early_acpi_os_unmap_memory(virt, size);
    POST_WRAPPER_FUNC(virt, size);
    kern_printk("early_acpi_os_unmap_memory returned.\n");
})
#endif


#ifndef KERN_ADDR_scsi_is_host_device
#define APP_WRAPPER_FOR_scsi_is_host_device
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_is_host_device
#define APP_WRAPPER_FOR_scsi_is_host_device
FUNCTION_WRAPPER(scsi_is_host_device, (const struct device *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("scsi_is_host_device is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = scsi_is_host_device(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("scsi_is_host_device returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_zone_watermark_ok
#define APP_WRAPPER_FOR_zone_watermark_ok
#endif
 
#ifndef APP_WRAPPER_FOR_zone_watermark_ok
#define APP_WRAPPER_FOR_zone_watermark_ok
FUNCTION_WRAPPER(zone_watermark_ok, (struct zone *z, int order, unsigned long mark, int classzone_idx, int alloc_flags), {
    WRAP_RECURSIVE(z);
    TRACES_IF_WATCHPOINT(z);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(z)));
    kern_printk("zone_watermark_ok is invoked.\n");
    PRE_WRAPPER_FUNC(z, order, mark, classzone_idx, alloc_flags);
    bool ret = zone_watermark_ok(z, order, mark, classzone_idx, alloc_flags);
    POST_WRAPPER_FUNC(z, order, mark, classzone_idx, alloc_flags);
    kern_printk("zone_watermark_ok returned.\n");
    TRACES_IF_WATCHPOINT(z);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(z)));
    return ret;
})
#endif


#ifndef KERN_ADDR_copy_siginfo_to_user32
#define APP_WRAPPER_FOR_copy_siginfo_to_user32
#endif
 
#ifndef APP_WRAPPER_FOR_copy_siginfo_to_user32
#define APP_WRAPPER_FOR_copy_siginfo_to_user32
FUNCTION_WRAPPER(copy_siginfo_to_user32, (struct compat_siginfo *to, siginfo_t *from), {
    kern_printk("copy_siginfo_to_user32 is invoked.\n");
    PRE_WRAPPER_FUNC(to, from);
    int ret = copy_siginfo_to_user32(to, from);
    POST_WRAPPER_FUNC(to, from);
    kern_printk("copy_siginfo_to_user32 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___block_page_mkwrite
#define APP_WRAPPER_FOR___block_page_mkwrite
#endif
 
#ifndef APP_WRAPPER_FOR___block_page_mkwrite
#define APP_WRAPPER_FOR___block_page_mkwrite
FUNCTION_WRAPPER(__block_page_mkwrite, (struct vm_area_struct *vma, struct vm_fault *vmf, get_block_t get_block), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    WRAP_RECURSIVE(vmf);
    TRACES_IF_WATCHPOINT(vmf);
    SCAN_HEAD_FUNC(struct vm_fault)(*(TO_UNWATCHED_ADDRESS(vmf)));
    kern_printk("__block_page_mkwrite is invoked.\n");
    PRE_WRAPPER_FUNC(vma, vmf, get_block);
    int ret = __block_page_mkwrite(vma, vmf, get_block);
    POST_WRAPPER_FUNC(vma, vmf, get_block);
    kern_printk("__block_page_mkwrite returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    TRACES_IF_WATCHPOINT(vmf);
    SCAN_HEAD_FUNC(struct vm_fault)(*(TO_UNWATCHED_ADDRESS(vmf)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_common_setsockopt
#define APP_WRAPPER_FOR_sock_common_setsockopt
#endif
 
#ifndef APP_WRAPPER_FOR_sock_common_setsockopt
#define APP_WRAPPER_FOR_sock_common_setsockopt
FUNCTION_WRAPPER(sock_common_setsockopt, (struct socket *sock, int level, int optname, char *optval, unsigned int optlen), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    kern_printk("sock_common_setsockopt is invoked.\n");
    PRE_WRAPPER_FUNC(sock, level, optname, optval, optlen);
    int ret = sock_common_setsockopt(sock, level, optname, optval, optlen);
    POST_WRAPPER_FUNC(sock, level, optname, optval, optlen);
    kern_printk("sock_common_setsockopt returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pm_restrict_gfp_mask
#define APP_WRAPPER_FOR_pm_restrict_gfp_mask
#endif
 
#ifndef APP_WRAPPER_FOR_pm_restrict_gfp_mask
#define APP_WRAPPER_FOR_pm_restrict_gfp_mask
FUNCTION_WRAPPER_VOID(pm_restrict_gfp_mask, (), {
    kern_printk("pm_restrict_gfp_mask is invoked.\n");
    PRE_WRAPPER_FUNC();
    pm_restrict_gfp_mask();
    POST_WRAPPER_FUNC();
    kern_printk("pm_restrict_gfp_mask returned.\n");
})
#endif


#ifndef KERN_ADDR_mdiobus_alloc_size
#define APP_WRAPPER_FOR_mdiobus_alloc_size
#endif
 
#ifndef APP_WRAPPER_FOR_mdiobus_alloc_size
#define APP_WRAPPER_FOR_mdiobus_alloc_size
FUNCTION_WRAPPER(mdiobus_alloc_size, (size_t _arg1), {
    kern_printk("mdiobus_alloc_size is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct mii_bus *ret = mdiobus_alloc_size(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("mdiobus_alloc_size returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sort_range
#define APP_WRAPPER_FOR_sort_range
#endif
 
#ifndef APP_WRAPPER_FOR_sort_range
#define APP_WRAPPER_FOR_sort_range
FUNCTION_WRAPPER_VOID(sort_range, (struct range *range, int nr_range), {
    kern_printk("sort_range is invoked.\n");
    PRE_WRAPPER_FUNC(range, nr_range);
    sort_range(range, nr_range);
    POST_WRAPPER_FUNC(range, nr_range);
    kern_printk("sort_range returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_remove_root_bus
#define APP_WRAPPER_FOR_pci_remove_root_bus
#endif
 
#ifndef APP_WRAPPER_FOR_pci_remove_root_bus
#define APP_WRAPPER_FOR_pci_remove_root_bus
FUNCTION_WRAPPER_VOID(pci_remove_root_bus, (struct pci_bus *bus), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_remove_root_bus is invoked.\n");
    PRE_WRAPPER_FUNC(bus);
    pci_remove_root_bus(bus);
    POST_WRAPPER_FUNC(bus);
    kern_printk("pci_remove_root_bus returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
})
#endif


#ifndef KERN_ADDR_I_BDEV
#define APP_WRAPPER_FOR_I_BDEV
#endif
 
#ifndef APP_WRAPPER_FOR_I_BDEV
#define APP_WRAPPER_FOR_I_BDEV
FUNCTION_WRAPPER(I_BDEV, (struct inode *inode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("I_BDEV is invoked.\n");
    PRE_WRAPPER_FUNC(inode);
    struct block_device *ret = I_BDEV(inode);
    POST_WRAPPER_FUNC(inode);
    kern_printk("I_BDEV returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_rcu_irq_enter
#define APP_WRAPPER_FOR_rcu_irq_enter
#endif
 
#ifndef APP_WRAPPER_FOR_rcu_irq_enter
#define APP_WRAPPER_FOR_rcu_irq_enter
FUNCTION_WRAPPER_VOID(rcu_irq_enter, (), {
    kern_printk("rcu_irq_enter is invoked.\n");
    PRE_WRAPPER_FUNC();
    rcu_irq_enter();
    POST_WRAPPER_FUNC();
    kern_printk("rcu_irq_enter returned.\n");
})
#endif


#ifndef KERN_ADDR___modver_version_show
#define APP_WRAPPER_FOR___modver_version_show
#endif
 
#ifndef APP_WRAPPER_FOR___modver_version_show
#define APP_WRAPPER_FOR___modver_version_show
FUNCTION_WRAPPER(__modver_version_show, (struct module_attribute *_arg1, struct module_kobject *_arg2, char *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct module_attribute)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct module_kobject)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("__modver_version_show is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    ssize_t ret = __modver_version_show(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("__modver_version_show returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct module_attribute)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct module_kobject)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_init_module
#define APP_WRAPPER_FOR_init_module
#endif
 
#ifndef APP_WRAPPER_FOR_init_module
#define APP_WRAPPER_FOR_init_module
FUNCTION_WRAPPER(init_module, (), {
    kern_printk("init_module is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = init_module();
    POST_WRAPPER_FUNC();
    kern_printk("init_module returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_get_write_access
#define APP_WRAPPER_FOR_jbd2_journal_get_write_access
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_get_write_access
#define APP_WRAPPER_FOR_jbd2_journal_get_write_access
FUNCTION_WRAPPER(jbd2_journal_get_write_access, (handle_t *_arg1, struct buffer_head *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(handle_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("jbd2_journal_get_write_access is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = jbd2_journal_get_write_access(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("jbd2_journal_get_write_access returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(handle_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_css_lookup
#define APP_WRAPPER_FOR_css_lookup
#endif
 
#ifndef APP_WRAPPER_FOR_css_lookup
#define APP_WRAPPER_FOR_css_lookup
FUNCTION_WRAPPER(css_lookup, (struct cgroup_subsys *ss, int id), {
    WRAP_RECURSIVE(ss);
    TRACES_IF_WATCHPOINT(ss);
    SCAN_HEAD_FUNC(struct cgroup_subsys)(*(TO_UNWATCHED_ADDRESS(ss)));
    kern_printk("css_lookup is invoked.\n");
    PRE_WRAPPER_FUNC(ss, id);
    struct cgroup_subsys_state *ret = css_lookup(ss, id);
    POST_WRAPPER_FUNC(ss, id);
    kern_printk("css_lookup returned.\n");
    TRACES_IF_WATCHPOINT(ss);
    SCAN_HEAD_FUNC(struct cgroup_subsys)(*(TO_UNWATCHED_ADDRESS(ss)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pid_task
#define APP_WRAPPER_FOR_pid_task
#endif
 
#ifndef APP_WRAPPER_FOR_pid_task
#define APP_WRAPPER_FOR_pid_task
FUNCTION_WRAPPER(pid_task, (struct pid *pid, enum pid_type _arg1), {
    WRAP_RECURSIVE(pid);
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
    kern_printk("pid_task is invoked.\n");
    PRE_WRAPPER_FUNC(pid, _arg1);
    struct task_struct *ret = pid_task(pid, _arg1);
    POST_WRAPPER_FUNC(pid, _arg1);
    kern_printk("pid_task returned.\n");
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_scsi_host_state_name
#define APP_WRAPPER_FOR_scsi_host_state_name
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_host_state_name
#define APP_WRAPPER_FOR_scsi_host_state_name
FUNCTION_WRAPPER(scsi_host_state_name, (enum scsi_host_state _arg1), {
    kern_printk("scsi_host_state_name is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    const char *ret = scsi_host_state_name(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("scsi_host_state_name returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_mb_cache_entry_get
#define APP_WRAPPER_FOR_mb_cache_entry_get
#endif
 
#ifndef APP_WRAPPER_FOR_mb_cache_entry_get
#define APP_WRAPPER_FOR_mb_cache_entry_get
FUNCTION_WRAPPER(mb_cache_entry_get, (struct mb_cache *_arg1, struct block_device *_arg2, sector_t _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mb_cache)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("mb_cache_entry_get is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    struct mb_cache_entry *ret = mb_cache_entry_get(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("mb_cache_entry_get returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mb_cache)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_native_cpu_die
#define APP_WRAPPER_FOR_native_cpu_die
#endif
 
#ifndef APP_WRAPPER_FOR_native_cpu_die
#define APP_WRAPPER_FOR_native_cpu_die
FUNCTION_WRAPPER_VOID(native_cpu_die, (unsigned int cpu), {
    kern_printk("native_cpu_die is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    native_cpu_die(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("native_cpu_die returned.\n");
})
#endif


#ifndef KERN_ADDR_dm_read_arg
#define APP_WRAPPER_FOR_dm_read_arg
#endif
 
#ifndef APP_WRAPPER_FOR_dm_read_arg
#define APP_WRAPPER_FOR_dm_read_arg
FUNCTION_WRAPPER(dm_read_arg, (struct dm_arg *arg, struct dm_arg_set *arg_set, unsigned int *value, char **error), {
    kern_printk("dm_read_arg is invoked.\n");
    PRE_WRAPPER_FUNC(arg, arg_set, value, error);
    int ret = dm_read_arg(arg, arg_set, value, error);
    POST_WRAPPER_FUNC(arg, arg_set, value, error);
    kern_printk("dm_read_arg returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pcibios_add_device
#define APP_WRAPPER_FOR_pcibios_add_device
#endif
 
#ifndef APP_WRAPPER_FOR_pcibios_add_device
#define APP_WRAPPER_FOR_pcibios_add_device
FUNCTION_WRAPPER(pcibios_add_device, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pcibios_add_device is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pcibios_add_device(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pcibios_add_device returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_read
#define APP_WRAPPER_FOR_acpi_read
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_read
#define APP_WRAPPER_FOR_acpi_read
FUNCTION_WRAPPER(acpi_read, (u64 *value, struct acpi_generic_address *reg), {
    kern_printk("acpi_read is invoked.\n");
    PRE_WRAPPER_FUNC(value, reg);
    acpi_status ret = acpi_read(value, reg);
    POST_WRAPPER_FUNC(value, reg);
    kern_printk("acpi_read returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_mmput
#define APP_WRAPPER_FOR_mmput
#endif
 
#ifndef APP_WRAPPER_FOR_mmput
#define APP_WRAPPER_FOR_mmput
FUNCTION_WRAPPER_VOID(mmput, (struct mm_struct *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("mmput is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    mmput(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("mmput returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR__raw_read_unlock
#define APP_WRAPPER_FOR__raw_read_unlock
#endif
 
#ifndef APP_WRAPPER_FOR__raw_read_unlock
#define APP_WRAPPER_FOR__raw_read_unlock
FUNCTION_WRAPPER_VOID(_raw_read_unlock, (rwlock_t *lock), {
    kern_printk("_raw_read_unlock is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    _raw_read_unlock(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("_raw_read_unlock returned.\n");
})
#endif


#ifndef KERN_ADDR_dev_pm_qos_remove_request
#define APP_WRAPPER_FOR_dev_pm_qos_remove_request
#endif
 
#ifndef APP_WRAPPER_FOR_dev_pm_qos_remove_request
#define APP_WRAPPER_FOR_dev_pm_qos_remove_request
FUNCTION_WRAPPER(dev_pm_qos_remove_request, (struct dev_pm_qos_request *req), {
    WRAP_RECURSIVE(req);
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct dev_pm_qos_request)(*(TO_UNWATCHED_ADDRESS(req)));
    kern_printk("dev_pm_qos_remove_request is invoked.\n");
    PRE_WRAPPER_FUNC(req);
    int ret = dev_pm_qos_remove_request(req);
    POST_WRAPPER_FUNC(req);
    kern_printk("dev_pm_qos_remove_request returned.\n");
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct dev_pm_qos_request)(*(TO_UNWATCHED_ADDRESS(req)));
    return ret;
})
#endif


#ifndef KERN_ADDR_apic_force_enable
#define APP_WRAPPER_FOR_apic_force_enable
#endif
 
#ifndef APP_WRAPPER_FOR_apic_force_enable
#define APP_WRAPPER_FOR_apic_force_enable
FUNCTION_WRAPPER(apic_force_enable, (unsigned long addr), {
    kern_printk("apic_force_enable is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    int ret = apic_force_enable(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("apic_force_enable returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_slave_link_init
#define APP_WRAPPER_FOR_ata_slave_link_init
#endif
 
#ifndef APP_WRAPPER_FOR_ata_slave_link_init
#define APP_WRAPPER_FOR_ata_slave_link_init
FUNCTION_WRAPPER(ata_slave_link_init, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_slave_link_init is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    int ret = ata_slave_link_init(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_slave_link_init returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR_expand_downwards
#define APP_WRAPPER_FOR_expand_downwards
#endif
 
#ifndef APP_WRAPPER_FOR_expand_downwards
#define APP_WRAPPER_FOR_expand_downwards
FUNCTION_WRAPPER(expand_downwards, (struct vm_area_struct *vma, unsigned long address), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("expand_downwards is invoked.\n");
    PRE_WRAPPER_FUNC(vma, address);
    int ret = expand_downwards(vma, address);
    POST_WRAPPER_FUNC(vma, address);
    kern_printk("expand_downwards returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_rt_sigtimedwait
#define APP_WRAPPER_FOR_compat_sys_rt_sigtimedwait
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_rt_sigtimedwait
#define APP_WRAPPER_FOR_compat_sys_rt_sigtimedwait
FUNCTION_WRAPPER(compat_sys_rt_sigtimedwait, (compat_sigset_t *uthese, struct compat_siginfo *uinfo, struct compat_timespec *uts, compat_size_t sigsetsize), {
    kern_printk("compat_sys_rt_sigtimedwait is invoked.\n");
    PRE_WRAPPER_FUNC(uthese, uinfo, uts, sigsetsize);
    long ret = compat_sys_rt_sigtimedwait(uthese, uinfo, uts, sigsetsize);
    POST_WRAPPER_FUNC(uthese, uinfo, uts, sigsetsize);
    kern_printk("compat_sys_rt_sigtimedwait returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dquot_transfer
#define APP_WRAPPER_FOR_dquot_transfer
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_transfer
#define APP_WRAPPER_FOR_dquot_transfer
FUNCTION_WRAPPER(dquot_transfer, (struct inode *inode, struct iattr *iattr), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    WRAP_RECURSIVE(iattr);
    TRACES_IF_WATCHPOINT(iattr);
    SCAN_HEAD_FUNC(struct iattr)(*(TO_UNWATCHED_ADDRESS(iattr)));
    kern_printk("dquot_transfer is invoked.\n");
    PRE_WRAPPER_FUNC(inode, iattr);
    int ret = dquot_transfer(inode, iattr);
    POST_WRAPPER_FUNC(inode, iattr);
    kern_printk("dquot_transfer returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    TRACES_IF_WATCHPOINT(iattr);
    SCAN_HEAD_FUNC(struct iattr)(*(TO_UNWATCHED_ADDRESS(iattr)));
    return ret;
})
#endif


#ifndef KERN_ADDR_netlink_attachskb
#define APP_WRAPPER_FOR_netlink_attachskb
#endif
 
#ifndef APP_WRAPPER_FOR_netlink_attachskb
#define APP_WRAPPER_FOR_netlink_attachskb
FUNCTION_WRAPPER(netlink_attachskb, (struct sock *sk, struct sk_buff *skb, long *timeo, struct sock *ssk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_RECURSIVE(ssk);
    TRACES_IF_WATCHPOINT(ssk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(ssk)));
    kern_printk("netlink_attachskb is invoked.\n");
    PRE_WRAPPER_FUNC(sk, skb, timeo, ssk);
    int ret = netlink_attachskb(sk, skb, timeo, ssk);
    POST_WRAPPER_FUNC(sk, skb, timeo, ssk);
    kern_printk("netlink_attachskb returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    TRACES_IF_WATCHPOINT(ssk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(ssk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_proc_caches_init
#define APP_WRAPPER_FOR_proc_caches_init
#endif
 
#ifndef APP_WRAPPER_FOR_proc_caches_init
#define APP_WRAPPER_FOR_proc_caches_init
FUNCTION_WRAPPER_VOID(proc_caches_init, (), {
    kern_printk("proc_caches_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    proc_caches_init();
    POST_WRAPPER_FUNC();
    kern_printk("proc_caches_init returned.\n");
})
#endif


#ifndef KERN_ADDR_do_invalidatepage
#define APP_WRAPPER_FOR_do_invalidatepage
#endif
 
#ifndef APP_WRAPPER_FOR_do_invalidatepage
#define APP_WRAPPER_FOR_do_invalidatepage
FUNCTION_WRAPPER_VOID(do_invalidatepage, (struct page *page, unsigned long offset), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("do_invalidatepage is invoked.\n");
    PRE_WRAPPER_FUNC(page, offset);
    do_invalidatepage(page, offset);
    POST_WRAPPER_FUNC(page, offset);
    kern_printk("do_invalidatepage returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_ioread16
#define APP_WRAPPER_FOR_ioread16
#endif
 
#ifndef APP_WRAPPER_FOR_ioread16
#define APP_WRAPPER_FOR_ioread16
FUNCTION_WRAPPER(ioread16, (void *_arg1), {
    kern_printk("ioread16 is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = ioread16(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("ioread16 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_getnstimeofday
#define APP_WRAPPER_FOR_getnstimeofday
#endif
 
#ifndef APP_WRAPPER_FOR_getnstimeofday
#define APP_WRAPPER_FOR_getnstimeofday
FUNCTION_WRAPPER_VOID(getnstimeofday, (struct timespec *tv), {
    kern_printk("getnstimeofday is invoked.\n");
    PRE_WRAPPER_FUNC(tv);
    getnstimeofday(tv);
    POST_WRAPPER_FUNC(tv);
    kern_printk("getnstimeofday returned.\n");
})
#endif


#ifndef KERN_ADDR___vlan_find_dev_deep
#define APP_WRAPPER_FOR___vlan_find_dev_deep
#endif
 
#ifndef APP_WRAPPER_FOR___vlan_find_dev_deep
#define APP_WRAPPER_FOR___vlan_find_dev_deep
FUNCTION_WRAPPER(__vlan_find_dev_deep, (struct net_device *real_dev, u16 vlan_id), {
    WRAP_RECURSIVE(real_dev);
    TRACES_IF_WATCHPOINT(real_dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(real_dev)));
    kern_printk("__vlan_find_dev_deep is invoked.\n");
    PRE_WRAPPER_FUNC(real_dev, vlan_id);
    struct net_device *ret = __vlan_find_dev_deep(real_dev, vlan_id);
    POST_WRAPPER_FUNC(real_dev, vlan_id);
    kern_printk("__vlan_find_dev_deep returned.\n");
    TRACES_IF_WATCHPOINT(real_dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(real_dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dcb_setapp
#define APP_WRAPPER_FOR_dcb_setapp
#endif
 
#ifndef APP_WRAPPER_FOR_dcb_setapp
#define APP_WRAPPER_FOR_dcb_setapp
FUNCTION_WRAPPER(dcb_setapp, (struct net_device *_arg1, struct dcb_app *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("dcb_setapp is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = dcb_setapp(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("dcb_setapp returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_linear_hugepage_index
#define APP_WRAPPER_FOR_linear_hugepage_index
#endif
 
#ifndef APP_WRAPPER_FOR_linear_hugepage_index
#define APP_WRAPPER_FOR_linear_hugepage_index
FUNCTION_WRAPPER(linear_hugepage_index, (struct vm_area_struct *vma, unsigned long address), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("linear_hugepage_index is invoked.\n");
    PRE_WRAPPER_FUNC(vma, address);
    long ret = linear_hugepage_index(vma, address);
    POST_WRAPPER_FUNC(vma, address);
    kern_printk("linear_hugepage_index returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_pm_qos_add_ancestor_request
#define APP_WRAPPER_FOR_dev_pm_qos_add_ancestor_request
#endif
 
#ifndef APP_WRAPPER_FOR_dev_pm_qos_add_ancestor_request
#define APP_WRAPPER_FOR_dev_pm_qos_add_ancestor_request
FUNCTION_WRAPPER(dev_pm_qos_add_ancestor_request, (struct device *dev, struct dev_pm_qos_request *req, s32 value), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(req);
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct dev_pm_qos_request)(*(TO_UNWATCHED_ADDRESS(req)));
    kern_printk("dev_pm_qos_add_ancestor_request is invoked.\n");
    PRE_WRAPPER_FUNC(dev, req, value);
    int ret = dev_pm_qos_add_ancestor_request(dev, req, value);
    POST_WRAPPER_FUNC(dev, req, value);
    kern_printk("dev_pm_qos_add_ancestor_request returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct dev_pm_qos_request)(*(TO_UNWATCHED_ADDRESS(req)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_create_lite
#define APP_WRAPPER_FOR_sock_create_lite
#endif
 
#ifndef APP_WRAPPER_FOR_sock_create_lite
#define APP_WRAPPER_FOR_sock_create_lite
FUNCTION_WRAPPER(sock_create_lite, (int family, int type, int proto, struct socket **res), {
    WRAP_RECURSIVE(res);
    TRACES_IF_WATCHPOINT(res);
    SCAN_HEAD_FUNC(struct socket *)(*(TO_UNWATCHED_ADDRESS(res)));
    kern_printk("sock_create_lite is invoked.\n");
    PRE_WRAPPER_FUNC(family, type, proto, res);
    int ret = sock_create_lite(family, type, proto, res);
    POST_WRAPPER_FUNC(family, type, proto, res);
    kern_printk("sock_create_lite returned.\n");
    TRACES_IF_WATCHPOINT(res);
    SCAN_HEAD_FUNC(struct socket *)(*(TO_UNWATCHED_ADDRESS(res)));
    return ret;
})
#endif


#ifndef KERN_ADDR_early_ioremap_init
#define APP_WRAPPER_FOR_early_ioremap_init
#endif
 
#ifndef APP_WRAPPER_FOR_early_ioremap_init
#define APP_WRAPPER_FOR_early_ioremap_init
FUNCTION_WRAPPER_VOID(early_ioremap_init, (), {
    kern_printk("early_ioremap_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    early_ioremap_init();
    POST_WRAPPER_FUNC();
    kern_printk("early_ioremap_init returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_release_global_lock
#define APP_WRAPPER_FOR_acpi_release_global_lock
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_release_global_lock
#define APP_WRAPPER_FOR_acpi_release_global_lock
FUNCTION_WRAPPER(acpi_release_global_lock, (u32 handle), {
    kern_printk("acpi_release_global_lock is invoked.\n");
    PRE_WRAPPER_FUNC(handle);
    acpi_status ret = acpi_release_global_lock(handle);
    POST_WRAPPER_FUNC(handle);
    kern_printk("acpi_release_global_lock returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_getrusage
#define APP_WRAPPER_FOR_getrusage
#endif
 
#ifndef APP_WRAPPER_FOR_getrusage
#define APP_WRAPPER_FOR_getrusage
FUNCTION_WRAPPER(getrusage, (struct task_struct *p, int who, struct rusage *ru), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("getrusage is invoked.\n");
    PRE_WRAPPER_FUNC(p, who, ru);
    int ret = getrusage(p, who, ru);
    POST_WRAPPER_FUNC(p, who, ru);
    kern_printk("getrusage returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    return ret;
})
#endif


#ifndef KERN_ADDR_match_hex
#define APP_WRAPPER_FOR_match_hex
#endif
 
#ifndef APP_WRAPPER_FOR_match_hex
#define APP_WRAPPER_FOR_match_hex
FUNCTION_WRAPPER(match_hex, (substring_t *_arg1, int *result), {
    kern_printk("match_hex is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, result);
    int ret = match_hex(_arg1, result);
    POST_WRAPPER_FUNC(_arg1, result);
    kern_printk("match_hex returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_vsprintf
#define APP_WRAPPER_FOR_vsprintf
#endif
 
#ifndef APP_WRAPPER_FOR_vsprintf
#define APP_WRAPPER_FOR_vsprintf
FUNCTION_WRAPPER(vsprintf, (char *buf, const char *_arg1, va_list _arg2), {
    kern_printk("vsprintf is invoked.\n");
    PRE_WRAPPER_FUNC(buf, _arg1, _arg2);
    int ret = vsprintf(buf, _arg1, _arg2);
    POST_WRAPPER_FUNC(buf, _arg1, _arg2);
    kern_printk("vsprintf returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_percpu_counter_compare
#define APP_WRAPPER_FOR_percpu_counter_compare
#endif
 
#ifndef APP_WRAPPER_FOR_percpu_counter_compare
#define APP_WRAPPER_FOR_percpu_counter_compare
FUNCTION_WRAPPER(percpu_counter_compare, (struct percpu_counter *fbc, s64 rhs), {
    kern_printk("percpu_counter_compare is invoked.\n");
    PRE_WRAPPER_FUNC(fbc, rhs);
    int ret = percpu_counter_compare(fbc, rhs);
    POST_WRAPPER_FUNC(fbc, rhs);
    kern_printk("percpu_counter_compare returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_bio_add_page
#define APP_WRAPPER_FOR_bio_add_page
#endif
 
#ifndef APP_WRAPPER_FOR_bio_add_page
#define APP_WRAPPER_FOR_bio_add_page
FUNCTION_WRAPPER(bio_add_page, (struct bio *_arg1, struct page *_arg2, unsigned int _arg3, unsigned int _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("bio_add_page is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = bio_add_page(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("bio_add_page returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_queue_work_on
#define APP_WRAPPER_FOR_queue_work_on
#endif
 
#ifndef APP_WRAPPER_FOR_queue_work_on
#define APP_WRAPPER_FOR_queue_work_on
FUNCTION_WRAPPER(queue_work_on, (int cpu, struct workqueue_struct *wq, struct work_struct *work), {
    WRAP_RECURSIVE(work);
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
    kern_printk("queue_work_on is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, wq, work);
    bool ret = queue_work_on(cpu, wq, work);
    POST_WRAPPER_FUNC(cpu, wq, work);
    kern_printk("queue_work_on returned.\n");
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
    return ret;
})
#endif


#ifndef KERN_ADDR_put_io_context_active
#define APP_WRAPPER_FOR_put_io_context_active
#endif
 
#ifndef APP_WRAPPER_FOR_put_io_context_active
#define APP_WRAPPER_FOR_put_io_context_active
FUNCTION_WRAPPER_VOID(put_io_context_active, (struct io_context *ioc), {
    WRAP_RECURSIVE(ioc);
    TRACES_IF_WATCHPOINT(ioc);
    SCAN_HEAD_FUNC(struct io_context)(*(TO_UNWATCHED_ADDRESS(ioc)));
    kern_printk("put_io_context_active is invoked.\n");
    PRE_WRAPPER_FUNC(ioc);
    put_io_context_active(ioc);
    POST_WRAPPER_FUNC(ioc);
    kern_printk("put_io_context_active returned.\n");
    TRACES_IF_WATCHPOINT(ioc);
    SCAN_HEAD_FUNC(struct io_context)(*(TO_UNWATCHED_ADDRESS(ioc)));
})
#endif


#ifndef KERN_ADDR_arch_uprobe_pre_xol
#define APP_WRAPPER_FOR_arch_uprobe_pre_xol
#endif
 
#ifndef APP_WRAPPER_FOR_arch_uprobe_pre_xol
#define APP_WRAPPER_FOR_arch_uprobe_pre_xol
FUNCTION_WRAPPER(arch_uprobe_pre_xol, (struct arch_uprobe *aup, struct pt_regs *regs), {
    kern_printk("arch_uprobe_pre_xol is invoked.\n");
    PRE_WRAPPER_FUNC(aup, regs);
    int ret = arch_uprobe_pre_xol(aup, regs);
    POST_WRAPPER_FUNC(aup, regs);
    kern_printk("arch_uprobe_pre_xol returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_usemap_size
#define APP_WRAPPER_FOR_usemap_size
#endif
 
#ifndef APP_WRAPPER_FOR_usemap_size
#define APP_WRAPPER_FOR_usemap_size
FUNCTION_WRAPPER(usemap_size, (), {
    kern_printk("usemap_size is invoked.\n");
    PRE_WRAPPER_FUNC();
    long ret = usemap_size();
    POST_WRAPPER_FUNC();
    kern_printk("usemap_size returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_update_cpu_load_nohz
#define APP_WRAPPER_FOR_update_cpu_load_nohz
#endif
 
#ifndef APP_WRAPPER_FOR_update_cpu_load_nohz
#define APP_WRAPPER_FOR_update_cpu_load_nohz
FUNCTION_WRAPPER_VOID(update_cpu_load_nohz, (), {
    kern_printk("update_cpu_load_nohz is invoked.\n");
    PRE_WRAPPER_FUNC();
    update_cpu_load_nohz();
    POST_WRAPPER_FUNC();
    kern_printk("update_cpu_load_nohz returned.\n");
})
#endif


#ifndef KERN_ADDR_zone_watermark_ok_safe
#define APP_WRAPPER_FOR_zone_watermark_ok_safe
#endif
 
#ifndef APP_WRAPPER_FOR_zone_watermark_ok_safe
#define APP_WRAPPER_FOR_zone_watermark_ok_safe
FUNCTION_WRAPPER(zone_watermark_ok_safe, (struct zone *z, int order, unsigned long mark, int classzone_idx, int alloc_flags), {
    WRAP_RECURSIVE(z);
    TRACES_IF_WATCHPOINT(z);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(z)));
    kern_printk("zone_watermark_ok_safe is invoked.\n");
    PRE_WRAPPER_FUNC(z, order, mark, classzone_idx, alloc_flags);
    bool ret = zone_watermark_ok_safe(z, order, mark, classzone_idx, alloc_flags);
    POST_WRAPPER_FUNC(z, order, mark, classzone_idx, alloc_flags);
    kern_printk("zone_watermark_ok_safe returned.\n");
    TRACES_IF_WATCHPOINT(z);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(z)));
    return ret;
})
#endif


#ifndef KERN_ADDR_unregister_sysctl_table
#define APP_WRAPPER_FOR_unregister_sysctl_table
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_sysctl_table
#define APP_WRAPPER_FOR_unregister_sysctl_table
FUNCTION_WRAPPER_VOID(unregister_sysctl_table, (struct ctl_table_header *table), {
    WRAP_RECURSIVE(table);
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table_header)(*(TO_UNWATCHED_ADDRESS(table)));
    kern_printk("unregister_sysctl_table is invoked.\n");
    PRE_WRAPPER_FUNC(table);
    unregister_sysctl_table(table);
    POST_WRAPPER_FUNC(table);
    kern_printk("unregister_sysctl_table returned.\n");
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table_header)(*(TO_UNWATCHED_ADDRESS(table)));
})
#endif


#ifndef KERN_ADDR_compat_sys_utime
#define APP_WRAPPER_FOR_compat_sys_utime
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_utime
#define APP_WRAPPER_FOR_compat_sys_utime
FUNCTION_WRAPPER(compat_sys_utime, (const char *filename, struct compat_utimbuf *t), {
    kern_printk("compat_sys_utime is invoked.\n");
    PRE_WRAPPER_FUNC(filename, t);
    long ret = compat_sys_utime(filename, t);
    POST_WRAPPER_FUNC(filename, t);
    kern_printk("compat_sys_utime returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___sw_hweight64
#define APP_WRAPPER_FOR___sw_hweight64
#endif
 
#ifndef APP_WRAPPER_FOR___sw_hweight64
#define APP_WRAPPER_FOR___sw_hweight64
FUNCTION_WRAPPER(__sw_hweight64, (__u64 w), {
    kern_printk("__sw_hweight64 is invoked.\n");
    PRE_WRAPPER_FUNC(w);
    long ret = __sw_hweight64(w);
    POST_WRAPPER_FUNC(w);
    kern_printk("__sw_hweight64 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_signalfd
#define APP_WRAPPER_FOR_compat_sys_signalfd
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_signalfd
#define APP_WRAPPER_FOR_compat_sys_signalfd
FUNCTION_WRAPPER(compat_sys_signalfd, (int ufd, const compat_sigset_t *sigmask, compat_size_t sigsetsize), {
    kern_printk("compat_sys_signalfd is invoked.\n");
    PRE_WRAPPER_FUNC(ufd, sigmask, sigsetsize);
    long ret = compat_sys_signalfd(ufd, sigmask, sigsetsize);
    POST_WRAPPER_FUNC(ufd, sigmask, sigsetsize);
    kern_printk("compat_sys_signalfd returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_iowrite32
#define APP_WRAPPER_FOR_iowrite32
#endif
 
#ifndef APP_WRAPPER_FOR_iowrite32
#define APP_WRAPPER_FOR_iowrite32
FUNCTION_WRAPPER_VOID(iowrite32, (u32 _arg1, void *_arg2), {
    kern_printk("iowrite32 is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    iowrite32(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("iowrite32 returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_pm_device_run_wake
#define APP_WRAPPER_FOR_acpi_pm_device_run_wake
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_pm_device_run_wake
#define APP_WRAPPER_FOR_acpi_pm_device_run_wake
FUNCTION_WRAPPER(acpi_pm_device_run_wake, (struct device *_arg1, bool _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("acpi_pm_device_run_wake is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = acpi_pm_device_run_wake(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("acpi_pm_device_run_wake returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_find_symbol
#define APP_WRAPPER_FOR_find_symbol
#endif
 
#ifndef APP_WRAPPER_FOR_find_symbol
#define APP_WRAPPER_FOR_find_symbol
FUNCTION_WRAPPER(find_symbol, (const char *name, struct module **owner, unsigned const long **crc, bool gplok, bool warn), {
    WRAP_RECURSIVE(owner);
    TRACES_IF_WATCHPOINT(owner);
    SCAN_HEAD_FUNC(struct module *)(*(TO_UNWATCHED_ADDRESS(owner)));
    kern_printk("find_symbol is invoked.\n");
    PRE_WRAPPER_FUNC(name, owner, crc, gplok, warn);
    const struct kernel_symbol *ret = find_symbol(name, owner, crc, gplok, warn);
    POST_WRAPPER_FUNC(name, owner, crc, gplok, warn);
    kern_printk("find_symbol returned.\n");
    TRACES_IF_WATCHPOINT(owner);
    SCAN_HEAD_FUNC(struct module *)(*(TO_UNWATCHED_ADDRESS(owner)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_install_table_handler
#define APP_WRAPPER_FOR_acpi_install_table_handler
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_install_table_handler
#define APP_WRAPPER_FOR_acpi_install_table_handler
FUNCTION_WRAPPER(acpi_install_table_handler, (acpi_tbl_handler handler, void *context), {
    WRAP_FUNCTION(handler);
    kern_printk("acpi_install_table_handler is invoked.\n");
    PRE_WRAPPER_FUNC(handler, context);
    acpi_status ret = acpi_install_table_handler(handler, context);
    POST_WRAPPER_FUNC(handler, context);
    kern_printk("acpi_install_table_handler returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___bad_uid
#define APP_WRAPPER_FOR___bad_uid
#endif
 
#ifndef APP_WRAPPER_FOR___bad_uid
#define APP_WRAPPER_FOR___bad_uid
FUNCTION_WRAPPER_VOID(__bad_uid, (), {
    kern_printk("__bad_uid is invoked.\n");
    PRE_WRAPPER_FUNC();
    __bad_uid();
    POST_WRAPPER_FUNC();
    kern_printk("__bad_uid returned.\n");
})
#endif


#ifndef KERN_ADDR_can_request_irq
#define APP_WRAPPER_FOR_can_request_irq
#endif
 
#ifndef APP_WRAPPER_FOR_can_request_irq
#define APP_WRAPPER_FOR_can_request_irq
FUNCTION_WRAPPER(can_request_irq, (unsigned int irq, unsigned long irqflags), {
    kern_printk("can_request_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq, irqflags);
    int ret = can_request_irq(irq, irqflags);
    POST_WRAPPER_FUNC(irq, irqflags);
    kern_printk("can_request_irq returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_bio_copy_kern
#define APP_WRAPPER_FOR_bio_copy_kern
#endif
 
#ifndef APP_WRAPPER_FOR_bio_copy_kern
#define APP_WRAPPER_FOR_bio_copy_kern
FUNCTION_WRAPPER(bio_copy_kern, (struct request_queue *_arg1, void *_arg2, unsigned int _arg3, gfp_t _arg4, int _arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bio_copy_kern is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    struct bio *ret = bio_copy_kern(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("bio_copy_kern returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR__raw_spin_lock_nest_lock
#define APP_WRAPPER_FOR__raw_spin_lock_nest_lock
#endif
 
#ifndef APP_WRAPPER_FOR__raw_spin_lock_nest_lock
#define APP_WRAPPER_FOR__raw_spin_lock_nest_lock
FUNCTION_WRAPPER_VOID(_raw_spin_lock_nest_lock, (raw_spinlock_t *lock, struct lockdep_map *map), {
    kern_printk("_raw_spin_lock_nest_lock is invoked.\n");
    PRE_WRAPPER_FUNC(lock, map);
    _raw_spin_lock_nest_lock(lock, map);
    POST_WRAPPER_FUNC(lock, map);
    kern_printk("_raw_spin_lock_nest_lock returned.\n");
})
#endif


#ifndef KERN_ADDR_ktime_get
#define APP_WRAPPER_FOR_ktime_get
#endif
 
#ifndef APP_WRAPPER_FOR_ktime_get
#define APP_WRAPPER_FOR_ktime_get
FUNCTION_WRAPPER(ktime_get, (), {
    kern_printk("ktime_get is invoked.\n");
    PRE_WRAPPER_FUNC();
    ktime_t ret = ktime_get();
    POST_WRAPPER_FUNC();
    kern_printk("ktime_get returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___prop_inc_percpu
#define APP_WRAPPER_FOR___prop_inc_percpu
#endif
 
#ifndef APP_WRAPPER_FOR___prop_inc_percpu
#define APP_WRAPPER_FOR___prop_inc_percpu
FUNCTION_WRAPPER_VOID(__prop_inc_percpu, (struct prop_descriptor *pd, struct prop_local_percpu *pl), {
    WRAP_RECURSIVE(pd);
    TRACES_IF_WATCHPOINT(pd);
    SCAN_HEAD_FUNC(struct prop_descriptor)(*(TO_UNWATCHED_ADDRESS(pd)));
    kern_printk("__prop_inc_percpu is invoked.\n");
    PRE_WRAPPER_FUNC(pd, pl);
    __prop_inc_percpu(pd, pl);
    POST_WRAPPER_FUNC(pd, pl);
    kern_printk("__prop_inc_percpu returned.\n");
    TRACES_IF_WATCHPOINT(pd);
    SCAN_HEAD_FUNC(struct prop_descriptor)(*(TO_UNWATCHED_ADDRESS(pd)));
})
#endif


#ifndef KERN_ADDR__raw_write_trylock
#define APP_WRAPPER_FOR__raw_write_trylock
#endif
 
#ifndef APP_WRAPPER_FOR__raw_write_trylock
#define APP_WRAPPER_FOR__raw_write_trylock
FUNCTION_WRAPPER(_raw_write_trylock, (rwlock_t *lock), {
    kern_printk("_raw_write_trylock is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    int ret = _raw_write_trylock(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("_raw_write_trylock returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_integrity_compare
#define APP_WRAPPER_FOR_blk_integrity_compare
#endif
 
#ifndef APP_WRAPPER_FOR_blk_integrity_compare
#define APP_WRAPPER_FOR_blk_integrity_compare
FUNCTION_WRAPPER(blk_integrity_compare, (struct gendisk *_arg1, struct gendisk *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("blk_integrity_compare is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = blk_integrity_compare(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_integrity_compare returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_wrmsr_safe_regs
#define APP_WRAPPER_FOR_wrmsr_safe_regs
#endif
 
#ifndef APP_WRAPPER_FOR_wrmsr_safe_regs
#define APP_WRAPPER_FOR_wrmsr_safe_regs
FUNCTION_WRAPPER(wrmsr_safe_regs, (u32 regs[8]), {
    kern_printk("wrmsr_safe_regs is invoked.\n");
    PRE_WRAPPER_FUNC(regs);
    int ret = wrmsr_safe_regs(regs);
    POST_WRAPPER_FUNC(regs);
    kern_printk("wrmsr_safe_regs returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_csum_partial_copy_generic
#define APP_WRAPPER_FOR_csum_partial_copy_generic
#endif
 
#ifndef APP_WRAPPER_FOR_csum_partial_copy_generic
#define APP_WRAPPER_FOR_csum_partial_copy_generic
FUNCTION_WRAPPER(csum_partial_copy_generic, (const void *src, const void *dst, int len, __wsum sum, int *src_err_ptr, int *dst_err_ptr), {
    kern_printk("csum_partial_copy_generic is invoked.\n");
    PRE_WRAPPER_FUNC(src, dst, len, sum, src_err_ptr, dst_err_ptr);
    __wsum ret = csum_partial_copy_generic(src, dst, len, sum, src_err_ptr, dst_err_ptr);
    POST_WRAPPER_FUNC(src, dst, len, sum, src_err_ptr, dst_err_ptr);
    kern_printk("csum_partial_copy_generic returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sched_show_task
#define APP_WRAPPER_FOR_sched_show_task
#endif
 
#ifndef APP_WRAPPER_FOR_sched_show_task
#define APP_WRAPPER_FOR_sched_show_task
FUNCTION_WRAPPER_VOID(sched_show_task, (struct task_struct *p), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("sched_show_task is invoked.\n");
    PRE_WRAPPER_FUNC(p);
    sched_show_task(p);
    POST_WRAPPER_FUNC(p);
    kern_printk("sched_show_task returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
})
#endif


#ifndef KERN_ADDR_ata_scsi_ioctl
#define APP_WRAPPER_FOR_ata_scsi_ioctl
#endif
 
#ifndef APP_WRAPPER_FOR_ata_scsi_ioctl
#define APP_WRAPPER_FOR_ata_scsi_ioctl
FUNCTION_WRAPPER(ata_scsi_ioctl, (struct scsi_device *dev, int cmd, void *arg), {
    kern_printk("ata_scsi_ioctl is invoked.\n");
    PRE_WRAPPER_FUNC(dev, cmd, arg);
    int ret = ata_scsi_ioctl(dev, cmd, arg);
    POST_WRAPPER_FUNC(dev, cmd, arg);
    kern_printk("ata_scsi_ioctl returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_bdi_writeback_thread
#define APP_WRAPPER_FOR_bdi_writeback_thread
#endif
 
#ifndef APP_WRAPPER_FOR_bdi_writeback_thread
#define APP_WRAPPER_FOR_bdi_writeback_thread
FUNCTION_WRAPPER(bdi_writeback_thread, (void *data), {
    kern_printk("bdi_writeback_thread is invoked.\n");
    PRE_WRAPPER_FUNC(data);
    int ret = bdi_writeback_thread(data);
    POST_WRAPPER_FUNC(data);
    kern_printk("bdi_writeback_thread returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_walk_page_range
#define APP_WRAPPER_FOR_walk_page_range
#endif
 
#ifndef APP_WRAPPER_FOR_walk_page_range
#define APP_WRAPPER_FOR_walk_page_range
FUNCTION_WRAPPER(walk_page_range, (unsigned long addr, unsigned long end, struct mm_walk *walk), {
    WRAP_RECURSIVE(walk);
    TRACES_IF_WATCHPOINT(walk);
    SCAN_HEAD_FUNC(struct mm_walk)(*(TO_UNWATCHED_ADDRESS(walk)));
    kern_printk("walk_page_range is invoked.\n");
    PRE_WRAPPER_FUNC(addr, end, walk);
    int ret = walk_page_range(addr, end, walk);
    POST_WRAPPER_FUNC(addr, end, walk);
    kern_printk("walk_page_range returned.\n");
    TRACES_IF_WATCHPOINT(walk);
    SCAN_HEAD_FUNC(struct mm_walk)(*(TO_UNWATCHED_ADDRESS(walk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_set_dma_reserve
#define APP_WRAPPER_FOR_set_dma_reserve
#endif
 
#ifndef APP_WRAPPER_FOR_set_dma_reserve
#define APP_WRAPPER_FOR_set_dma_reserve
FUNCTION_WRAPPER_VOID(set_dma_reserve, (unsigned long new_dma_reserve), {
    kern_printk("set_dma_reserve is invoked.\n");
    PRE_WRAPPER_FUNC(new_dma_reserve);
    set_dma_reserve(new_dma_reserve);
    POST_WRAPPER_FUNC(new_dma_reserve);
    kern_printk("set_dma_reserve returned.\n");
})
#endif


#ifndef KERN_ADDR_dcb_ieee_setapp
#define APP_WRAPPER_FOR_dcb_ieee_setapp
#endif
 
#ifndef APP_WRAPPER_FOR_dcb_ieee_setapp
#define APP_WRAPPER_FOR_dcb_ieee_setapp
FUNCTION_WRAPPER(dcb_ieee_setapp, (struct net_device *_arg1, struct dcb_app *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("dcb_ieee_setapp is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = dcb_ieee_setapp(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("dcb_ieee_setapp returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_qtree_release_dquot
#define APP_WRAPPER_FOR_qtree_release_dquot
#endif
 
#ifndef APP_WRAPPER_FOR_qtree_release_dquot
#define APP_WRAPPER_FOR_qtree_release_dquot
FUNCTION_WRAPPER(qtree_release_dquot, (struct qtree_mem_dqinfo *info, struct dquot *dquot), {
    WRAP_RECURSIVE(info);
    TRACES_IF_WATCHPOINT(info);
    SCAN_HEAD_FUNC(struct qtree_mem_dqinfo)(*(TO_UNWATCHED_ADDRESS(info)));
    WRAP_RECURSIVE(dquot);
    TRACES_IF_WATCHPOINT(dquot);
    SCAN_HEAD_FUNC(struct dquot)(*(TO_UNWATCHED_ADDRESS(dquot)));
    kern_printk("qtree_release_dquot is invoked.\n");
    PRE_WRAPPER_FUNC(info, dquot);
    int ret = qtree_release_dquot(info, dquot);
    POST_WRAPPER_FUNC(info, dquot);
    kern_printk("qtree_release_dquot returned.\n");
    TRACES_IF_WATCHPOINT(info);
    SCAN_HEAD_FUNC(struct qtree_mem_dqinfo)(*(TO_UNWATCHED_ADDRESS(info)));
    TRACES_IF_WATCHPOINT(dquot);
    SCAN_HEAD_FUNC(struct dquot)(*(TO_UNWATCHED_ADDRESS(dquot)));
    return ret;
})
#endif


#ifndef KERN_ADDR_native_restore_msi_irqs
#define APP_WRAPPER_FOR_native_restore_msi_irqs
#endif
 
#ifndef APP_WRAPPER_FOR_native_restore_msi_irqs
#define APP_WRAPPER_FOR_native_restore_msi_irqs
FUNCTION_WRAPPER_VOID(native_restore_msi_irqs, (struct pci_dev *dev, int irq), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("native_restore_msi_irqs is invoked.\n");
    PRE_WRAPPER_FUNC(dev, irq);
    native_restore_msi_irqs(dev, irq);
    POST_WRAPPER_FUNC(dev, irq);
    kern_printk("native_restore_msi_irqs returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_device_release_driver
#define APP_WRAPPER_FOR_device_release_driver
#endif
 
#ifndef APP_WRAPPER_FOR_device_release_driver
#define APP_WRAPPER_FOR_device_release_driver
FUNCTION_WRAPPER_VOID(device_release_driver, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("device_release_driver is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    device_release_driver(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("device_release_driver returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_delete_from_swap_cache
#define APP_WRAPPER_FOR_delete_from_swap_cache
#endif
 
#ifndef APP_WRAPPER_FOR_delete_from_swap_cache
#define APP_WRAPPER_FOR_delete_from_swap_cache
FUNCTION_WRAPPER_VOID(delete_from_swap_cache, (struct page *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("delete_from_swap_cache is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    delete_from_swap_cache(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("delete_from_swap_cache returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_netif_get_num_default_rss_queues
#define APP_WRAPPER_FOR_netif_get_num_default_rss_queues
#endif
 
#ifndef APP_WRAPPER_FOR_netif_get_num_default_rss_queues
#define APP_WRAPPER_FOR_netif_get_num_default_rss_queues
FUNCTION_WRAPPER(netif_get_num_default_rss_queues, (), {
    kern_printk("netif_get_num_default_rss_queues is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = netif_get_num_default_rss_queues();
    POST_WRAPPER_FUNC();
    kern_printk("netif_get_num_default_rss_queues returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_phy_mii_ioctl
#define APP_WRAPPER_FOR_phy_mii_ioctl
#endif
 
#ifndef APP_WRAPPER_FOR_phy_mii_ioctl
#define APP_WRAPPER_FOR_phy_mii_ioctl
FUNCTION_WRAPPER(phy_mii_ioctl, (struct phy_device *phydev, struct ifreq *ifr, int cmd), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    kern_printk("phy_mii_ioctl is invoked.\n");
    PRE_WRAPPER_FUNC(phydev, ifr, cmd);
    int ret = phy_mii_ioctl(phydev, ifr, cmd);
    POST_WRAPPER_FUNC(phydev, ifr, cmd);
    kern_printk("phy_mii_ioctl returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_acs_enabled
#define APP_WRAPPER_FOR_pci_acs_enabled
#endif
 
#ifndef APP_WRAPPER_FOR_pci_acs_enabled
#define APP_WRAPPER_FOR_pci_acs_enabled
FUNCTION_WRAPPER(pci_acs_enabled, (struct pci_dev *pdev, u16 acs_flags), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("pci_acs_enabled is invoked.\n");
    PRE_WRAPPER_FUNC(pdev, acs_flags);
    bool ret = pci_acs_enabled(pdev, acs_flags);
    POST_WRAPPER_FUNC(pdev, acs_flags);
    kern_printk("pci_acs_enabled returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_gso_segment
#define APP_WRAPPER_FOR_skb_gso_segment
#endif
 
#ifndef APP_WRAPPER_FOR_skb_gso_segment
#define APP_WRAPPER_FOR_skb_gso_segment
FUNCTION_WRAPPER(skb_gso_segment, (struct sk_buff *skb, netdev_features_t features), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_gso_segment is invoked.\n");
    PRE_WRAPPER_FUNC(skb, features);
    struct sk_buff *ret = skb_gso_segment(skb, features);
    POST_WRAPPER_FUNC(skb, features);
    kern_printk("skb_gso_segment returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_net_dma_find_channel
#define APP_WRAPPER_FOR_net_dma_find_channel
#endif
 
#ifndef APP_WRAPPER_FOR_net_dma_find_channel
#define APP_WRAPPER_FOR_net_dma_find_channel
FUNCTION_WRAPPER(net_dma_find_channel, (), {
    kern_printk("net_dma_find_channel is invoked.\n");
    PRE_WRAPPER_FUNC();
    struct dma_chan *ret = net_dma_find_channel();
    POST_WRAPPER_FUNC();
    kern_printk("net_dma_find_channel returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_bpf_jit_compile
#define APP_WRAPPER_FOR_bpf_jit_compile
#endif
 
#ifndef APP_WRAPPER_FOR_bpf_jit_compile
#define APP_WRAPPER_FOR_bpf_jit_compile
FUNCTION_WRAPPER_VOID(bpf_jit_compile, (struct sk_filter *fp), {
    WRAP_RECURSIVE(fp);
    TRACES_IF_WATCHPOINT(fp);
    SCAN_HEAD_FUNC(struct sk_filter)(*(TO_UNWATCHED_ADDRESS(fp)));
    kern_printk("bpf_jit_compile is invoked.\n");
    PRE_WRAPPER_FUNC(fp);
    bpf_jit_compile(fp);
    POST_WRAPPER_FUNC(fp);
    kern_printk("bpf_jit_compile returned.\n");
    TRACES_IF_WATCHPOINT(fp);
    SCAN_HEAD_FUNC(struct sk_filter)(*(TO_UNWATCHED_ADDRESS(fp)));
})
#endif


#ifndef KERN_ADDR__raw_read_unlock_irqrestore
#define APP_WRAPPER_FOR__raw_read_unlock_irqrestore
#endif
 
#ifndef APP_WRAPPER_FOR__raw_read_unlock_irqrestore
#define APP_WRAPPER_FOR__raw_read_unlock_irqrestore
FUNCTION_WRAPPER_VOID(_raw_read_unlock_irqrestore, (rwlock_t *lock, unsigned long flags), {
    kern_printk("_raw_read_unlock_irqrestore is invoked.\n");
    PRE_WRAPPER_FUNC(lock, flags);
    _raw_read_unlock_irqrestore(lock, flags);
    POST_WRAPPER_FUNC(lock, flags);
    kern_printk("_raw_read_unlock_irqrestore returned.\n");
})
#endif


#ifndef KERN_ADDR_get_task_cred
#define APP_WRAPPER_FOR_get_task_cred
#endif
 
#ifndef APP_WRAPPER_FOR_get_task_cred
#define APP_WRAPPER_FOR_get_task_cred
FUNCTION_WRAPPER(get_task_cred, (struct task_struct *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("get_task_cred is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    const struct cred *ret = get_task_cred(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("get_task_cred returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_proto_unregister
#define APP_WRAPPER_FOR_proto_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_proto_unregister
#define APP_WRAPPER_FOR_proto_unregister
FUNCTION_WRAPPER_VOID(proto_unregister, (struct proto *prot), {
    WRAP_RECURSIVE(prot);
    TRACES_IF_WATCHPOINT(prot);
    SCAN_HEAD_FUNC(struct proto)(*(TO_UNWATCHED_ADDRESS(prot)));
    kern_printk("proto_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(prot);
    proto_unregister(prot);
    POST_WRAPPER_FUNC(prot);
    kern_printk("proto_unregister returned.\n");
    TRACES_IF_WATCHPOINT(prot);
    SCAN_HEAD_FUNC(struct proto)(*(TO_UNWATCHED_ADDRESS(prot)));
})
#endif


#ifndef KERN_ADDR_nobh_write_begin
#define APP_WRAPPER_FOR_nobh_write_begin
#endif
 
#ifndef APP_WRAPPER_FOR_nobh_write_begin
#define APP_WRAPPER_FOR_nobh_write_begin
FUNCTION_WRAPPER(nobh_write_begin, (struct address_space *_arg1, loff_t _arg2, unsigned int _arg3, unsigned int _arg4, struct page **_arg5, void **_arg6, get_block_t *_arg7), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg5);
    TRACES_IF_WATCHPOINT(_arg5);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(_arg5)));
    WRAP_FUNCTION(_arg7);
    kern_printk("nobh_write_begin is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
    int ret = nobh_write_begin(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
    kern_printk("nobh_write_begin returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg5);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(_arg5)));
    return ret;
})
#endif


#ifndef KERN_ADDR_simple_strtol
#define APP_WRAPPER_FOR_simple_strtol
#endif
 
#ifndef APP_WRAPPER_FOR_simple_strtol
#define APP_WRAPPER_FOR_simple_strtol
FUNCTION_WRAPPER(simple_strtol, (const char *_arg1, char **_arg2, unsigned int _arg3), {
    kern_printk("simple_strtol is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    long ret = simple_strtol(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("simple_strtol returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_strcpy
#define APP_WRAPPER_FOR_strcpy
#endif
 
#ifndef APP_WRAPPER_FOR_strcpy
#define APP_WRAPPER_FOR_strcpy
FUNCTION_WRAPPER(strcpy, (char *_arg1, const char *_arg2), {
    kern_printk("strcpy is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    char *ret = strcpy(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("strcpy returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_do_send_sig_info
#define APP_WRAPPER_FOR_do_send_sig_info
#endif
 
#ifndef APP_WRAPPER_FOR_do_send_sig_info
#define APP_WRAPPER_FOR_do_send_sig_info
FUNCTION_WRAPPER(do_send_sig_info, (int sig, struct siginfo *info, struct task_struct *p, bool group), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("do_send_sig_info is invoked.\n");
    PRE_WRAPPER_FUNC(sig, info, p, group);
    int ret = do_send_sig_info(sig, info, p, group);
    POST_WRAPPER_FUNC(sig, info, p, group);
    kern_printk("do_send_sig_info returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vma_adjust
#define APP_WRAPPER_FOR_vma_adjust
#endif
 
#ifndef APP_WRAPPER_FOR_vma_adjust
#define APP_WRAPPER_FOR_vma_adjust
FUNCTION_WRAPPER(vma_adjust, (struct vm_area_struct *vma, unsigned long start, unsigned long end, unsigned long pgoff, struct vm_area_struct *insert), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    WRAP_RECURSIVE(insert);
    TRACES_IF_WATCHPOINT(insert);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(insert)));
    kern_printk("vma_adjust is invoked.\n");
    PRE_WRAPPER_FUNC(vma, start, end, pgoff, insert);
    int ret = vma_adjust(vma, start, end, pgoff, insert);
    POST_WRAPPER_FUNC(vma, start, end, pgoff, insert);
    kern_printk("vma_adjust returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    TRACES_IF_WATCHPOINT(insert);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(insert)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kfree_call_rcu
#define APP_WRAPPER_FOR_kfree_call_rcu
#endif
 
#ifndef APP_WRAPPER_FOR_kfree_call_rcu
#define APP_WRAPPER_FOR_kfree_call_rcu
FUNCTION_WRAPPER_VOID(kfree_call_rcu, (struct callback_head *head, void (*func)(struct callback_head *)), {
    WRAP_RECURSIVE(head);
    TRACES_IF_WATCHPOINT(head);
    SCAN_HEAD_FUNC(struct callback_head)(*(TO_UNWATCHED_ADDRESS(head)));
    WRAP_FUNCTION(func);
    kern_printk("kfree_call_rcu is invoked.\n");
    PRE_WRAPPER_FUNC(head, func);
    kfree_call_rcu(head, func);
    POST_WRAPPER_FUNC(head, func);
    kern_printk("kfree_call_rcu returned.\n");
    TRACES_IF_WATCHPOINT(head);
    SCAN_HEAD_FUNC(struct callback_head)(*(TO_UNWATCHED_ADDRESS(head)));
})
#endif


#ifndef KERN_ADDR_release_task
#define APP_WRAPPER_FOR_release_task
#endif
 
#ifndef APP_WRAPPER_FOR_release_task
#define APP_WRAPPER_FOR_release_task
FUNCTION_WRAPPER_VOID(release_task, (struct task_struct *p), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("release_task is invoked.\n");
    PRE_WRAPPER_FUNC(p);
    release_task(p);
    POST_WRAPPER_FUNC(p);
    kern_printk("release_task returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
})
#endif


#ifndef KERN_ADDR_dev_mcast_init
#define APP_WRAPPER_FOR_dev_mcast_init
#endif
 
#ifndef APP_WRAPPER_FOR_dev_mcast_init
#define APP_WRAPPER_FOR_dev_mcast_init
FUNCTION_WRAPPER_VOID(dev_mcast_init, (), {
    kern_printk("dev_mcast_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    dev_mcast_init();
    POST_WRAPPER_FUNC();
    kern_printk("dev_mcast_init returned.\n");
})
#endif


#ifndef KERN_ADDR_netif_rx_ni
#define APP_WRAPPER_FOR_netif_rx_ni
#endif
 
#ifndef APP_WRAPPER_FOR_netif_rx_ni
#define APP_WRAPPER_FOR_netif_rx_ni
FUNCTION_WRAPPER(netif_rx_ni, (struct sk_buff *skb), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("netif_rx_ni is invoked.\n");
    PRE_WRAPPER_FUNC(skb);
    int ret = netif_rx_ni(skb);
    POST_WRAPPER_FUNC(skb);
    kern_printk("netif_rx_ni returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_early_reserve_e820
#define APP_WRAPPER_FOR_early_reserve_e820
#endif
 
#ifndef APP_WRAPPER_FOR_early_reserve_e820
#define APP_WRAPPER_FOR_early_reserve_e820
FUNCTION_WRAPPER(early_reserve_e820, (u64 sizet, u64 align), {
    kern_printk("early_reserve_e820 is invoked.\n");
    PRE_WRAPPER_FUNC(sizet, align);
    u64 ret = early_reserve_e820(sizet, align);
    POST_WRAPPER_FUNC(sizet, align);
    kern_printk("early_reserve_e820 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___blk_put_request
#define APP_WRAPPER_FOR___blk_put_request
#endif
 
#ifndef APP_WRAPPER_FOR___blk_put_request
#define APP_WRAPPER_FOR___blk_put_request
FUNCTION_WRAPPER_VOID(__blk_put_request, (struct request_queue *_arg1, struct request *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("__blk_put_request is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    __blk_put_request(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("__blk_put_request returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_dst_release
#define APP_WRAPPER_FOR_dst_release
#endif
 
#ifndef APP_WRAPPER_FOR_dst_release
#define APP_WRAPPER_FOR_dst_release
FUNCTION_WRAPPER_VOID(dst_release, (struct dst_entry *dst), {
    WRAP_RECURSIVE(dst);
    TRACES_IF_WATCHPOINT(dst);
    SCAN_HEAD_FUNC(struct dst_entry)(*(TO_UNWATCHED_ADDRESS(dst)));
    kern_printk("dst_release is invoked.\n");
    PRE_WRAPPER_FUNC(dst);
    dst_release(dst);
    POST_WRAPPER_FUNC(dst);
    kern_printk("dst_release returned.\n");
    TRACES_IF_WATCHPOINT(dst);
    SCAN_HEAD_FUNC(struct dst_entry)(*(TO_UNWATCHED_ADDRESS(dst)));
})
#endif


#ifndef KERN_ADDR_get_options
#define APP_WRAPPER_FOR_get_options
#endif
 
#ifndef APP_WRAPPER_FOR_get_options
#define APP_WRAPPER_FOR_get_options
FUNCTION_WRAPPER(get_options, (const char *str, int nints, int *ints), {
    kern_printk("get_options is invoked.\n");
    PRE_WRAPPER_FUNC(str, nints, ints);
    char *ret = get_options(str, nints, ints);
    POST_WRAPPER_FUNC(str, nints, ints);
    kern_printk("get_options returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_scsi_unlock_native_capacity
#define APP_WRAPPER_FOR_ata_scsi_unlock_native_capacity
#endif
 
#ifndef APP_WRAPPER_FOR_ata_scsi_unlock_native_capacity
#define APP_WRAPPER_FOR_ata_scsi_unlock_native_capacity
FUNCTION_WRAPPER_VOID(ata_scsi_unlock_native_capacity, (struct scsi_device *sdev), {
    kern_printk("ata_scsi_unlock_native_capacity is invoked.\n");
    PRE_WRAPPER_FUNC(sdev);
    ata_scsi_unlock_native_capacity(sdev);
    POST_WRAPPER_FUNC(sdev);
    kern_printk("ata_scsi_unlock_native_capacity returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_remove_dir
#define APP_WRAPPER_FOR_acpi_remove_dir
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_remove_dir
#define APP_WRAPPER_FOR_acpi_remove_dir
FUNCTION_WRAPPER_VOID(acpi_remove_dir, (struct acpi_device *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("acpi_remove_dir is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    acpi_remove_dir(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("acpi_remove_dir returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_initmem_init
#define APP_WRAPPER_FOR_initmem_init
#endif
 
#ifndef APP_WRAPPER_FOR_initmem_init
#define APP_WRAPPER_FOR_initmem_init
FUNCTION_WRAPPER_VOID(initmem_init, (), {
    kern_printk("initmem_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    initmem_init();
    POST_WRAPPER_FUNC();
    kern_printk("initmem_init returned.\n");
})
#endif


#ifndef KERN_ADDR_do_sys_times
#define APP_WRAPPER_FOR_do_sys_times
#endif
 
#ifndef APP_WRAPPER_FOR_do_sys_times
#define APP_WRAPPER_FOR_do_sys_times
FUNCTION_WRAPPER_VOID(do_sys_times, (struct tms *_arg1), {
    kern_printk("do_sys_times is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    do_sys_times(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("do_sys_times returned.\n");
})
#endif


#ifndef KERN_ADDR___clocksource_register_scale
#define APP_WRAPPER_FOR___clocksource_register_scale
#endif
 
#ifndef APP_WRAPPER_FOR___clocksource_register_scale
#define APP_WRAPPER_FOR___clocksource_register_scale
FUNCTION_WRAPPER(__clocksource_register_scale, (struct clocksource *cs, u32 scale, u32 freq), {
    WRAP_RECURSIVE(cs);
    TRACES_IF_WATCHPOINT(cs);
    SCAN_HEAD_FUNC(struct clocksource)(*(TO_UNWATCHED_ADDRESS(cs)));
    kern_printk("__clocksource_register_scale is invoked.\n");
    PRE_WRAPPER_FUNC(cs, scale, freq);
    int ret = __clocksource_register_scale(cs, scale, freq);
    POST_WRAPPER_FUNC(cs, scale, freq);
    kern_printk("__clocksource_register_scale returned.\n");
    TRACES_IF_WATCHPOINT(cs);
    SCAN_HEAD_FUNC(struct clocksource)(*(TO_UNWATCHED_ADDRESS(cs)));
    return ret;
})
#endif


#ifndef KERN_ADDR_set_memory_array_wc
#define APP_WRAPPER_FOR_set_memory_array_wc
#endif
 
#ifndef APP_WRAPPER_FOR_set_memory_array_wc
#define APP_WRAPPER_FOR_set_memory_array_wc
FUNCTION_WRAPPER(set_memory_array_wc, (unsigned long *addr, int addrinarray), {
    kern_printk("set_memory_array_wc is invoked.\n");
    PRE_WRAPPER_FUNC(addr, addrinarray);
    int ret = set_memory_array_wc(addr, addrinarray);
    POST_WRAPPER_FUNC(addr, addrinarray);
    kern_printk("set_memory_array_wc returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_set_memory_array_wb
#define APP_WRAPPER_FOR_set_memory_array_wb
#endif
 
#ifndef APP_WRAPPER_FOR_set_memory_array_wb
#define APP_WRAPPER_FOR_set_memory_array_wb
FUNCTION_WRAPPER(set_memory_array_wb, (unsigned long *addr, int addrinarray), {
    kern_printk("set_memory_array_wb is invoked.\n");
    PRE_WRAPPER_FUNC(addr, addrinarray);
    int ret = set_memory_array_wb(addr, addrinarray);
    POST_WRAPPER_FUNC(addr, addrinarray);
    kern_printk("set_memory_array_wb returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_flush_scheduled_work
#define APP_WRAPPER_FOR_flush_scheduled_work
#endif
 
#ifndef APP_WRAPPER_FOR_flush_scheduled_work
#define APP_WRAPPER_FOR_flush_scheduled_work
FUNCTION_WRAPPER_VOID(flush_scheduled_work, (), {
    kern_printk("flush_scheduled_work is invoked.\n");
    PRE_WRAPPER_FUNC();
    flush_scheduled_work();
    POST_WRAPPER_FUNC();
    kern_printk("flush_scheduled_work returned.\n");
})
#endif


#ifndef KERN_ADDR_inet_proto_csum_replace4
#define APP_WRAPPER_FOR_inet_proto_csum_replace4
#endif
 
#ifndef APP_WRAPPER_FOR_inet_proto_csum_replace4
#define APP_WRAPPER_FOR_inet_proto_csum_replace4
FUNCTION_WRAPPER_VOID(inet_proto_csum_replace4, (__sum16 *sum, struct sk_buff *skb, __be32 from, __be32 to, int pseudohdr), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("inet_proto_csum_replace4 is invoked.\n");
    PRE_WRAPPER_FUNC(sum, skb, from, to, pseudohdr);
    inet_proto_csum_replace4(sum, skb, from, to, pseudohdr);
    POST_WRAPPER_FUNC(sum, skb, from, to, pseudohdr);
    kern_printk("inet_proto_csum_replace4 returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_ata_sff_thaw
#define APP_WRAPPER_FOR_ata_sff_thaw
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_thaw
#define APP_WRAPPER_FOR_ata_sff_thaw
FUNCTION_WRAPPER_VOID(ata_sff_thaw, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_sff_thaw is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    ata_sff_thaw(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_sff_thaw returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_inode_sb_list_add
#define APP_WRAPPER_FOR_inode_sb_list_add
#endif
 
#ifndef APP_WRAPPER_FOR_inode_sb_list_add
#define APP_WRAPPER_FOR_inode_sb_list_add
FUNCTION_WRAPPER_VOID(inode_sb_list_add, (struct inode *inode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("inode_sb_list_add is invoked.\n");
    PRE_WRAPPER_FUNC(inode);
    inode_sb_list_add(inode);
    POST_WRAPPER_FUNC(inode);
    kern_printk("inode_sb_list_add returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_disk_flush_events
#define APP_WRAPPER_FOR_disk_flush_events
#endif
 
#ifndef APP_WRAPPER_FOR_disk_flush_events
#define APP_WRAPPER_FOR_disk_flush_events
FUNCTION_WRAPPER_VOID(disk_flush_events, (struct gendisk *disk, unsigned int mask), {
    WRAP_RECURSIVE(disk);
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    kern_printk("disk_flush_events is invoked.\n");
    PRE_WRAPPER_FUNC(disk, mask);
    disk_flush_events(disk, mask);
    POST_WRAPPER_FUNC(disk, mask);
    kern_printk("disk_flush_events returned.\n");
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
})
#endif


#ifndef KERN_ADDR_node_to_pxm
#define APP_WRAPPER_FOR_node_to_pxm
#endif
 
#ifndef APP_WRAPPER_FOR_node_to_pxm
#define APP_WRAPPER_FOR_node_to_pxm
FUNCTION_WRAPPER(node_to_pxm, (int _arg1), {
    kern_printk("node_to_pxm is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = node_to_pxm(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("node_to_pxm returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_srcu_notifier_chain_unregister
#define APP_WRAPPER_FOR_srcu_notifier_chain_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_srcu_notifier_chain_unregister
#define APP_WRAPPER_FOR_srcu_notifier_chain_unregister
FUNCTION_WRAPPER(srcu_notifier_chain_unregister, (struct srcu_notifier_head *nh, struct notifier_block *nb), {
    WRAP_RECURSIVE(nh);
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct srcu_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    WRAP_RECURSIVE(nb);
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    kern_printk("srcu_notifier_chain_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(nh, nb);
    int ret = srcu_notifier_chain_unregister(nh, nb);
    POST_WRAPPER_FUNC(nh, nb);
    kern_printk("srcu_notifier_chain_unregister returned.\n");
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct srcu_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_aer_available
#define APP_WRAPPER_FOR_pci_aer_available
#endif
 
#ifndef APP_WRAPPER_FOR_pci_aer_available
#define APP_WRAPPER_FOR_pci_aer_available
FUNCTION_WRAPPER(pci_aer_available, (), {
    kern_printk("pci_aer_available is invoked.\n");
    PRE_WRAPPER_FUNC();
    bool ret = pci_aer_available();
    POST_WRAPPER_FUNC();
    kern_printk("pci_aer_available returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_bus_sort_breadthfirst
#define APP_WRAPPER_FOR_bus_sort_breadthfirst
#endif
 
#ifndef APP_WRAPPER_FOR_bus_sort_breadthfirst
#define APP_WRAPPER_FOR_bus_sort_breadthfirst
FUNCTION_WRAPPER_VOID(bus_sort_breadthfirst, (struct bus_type *bus, int (*compare)(const struct device *, const struct device *)), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    WRAP_FUNCTION(compare);
    kern_printk("bus_sort_breadthfirst is invoked.\n");
    PRE_WRAPPER_FUNC(bus, compare);
    bus_sort_breadthfirst(bus, compare);
    POST_WRAPPER_FUNC(bus, compare);
    kern_printk("bus_sort_breadthfirst returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
})
#endif


#ifndef KERN_ADDR_strspn
#define APP_WRAPPER_FOR_strspn
#endif
 
#ifndef APP_WRAPPER_FOR_strspn
#define APP_WRAPPER_FOR_strspn
FUNCTION_WRAPPER(strspn, (const char *_arg1, const char *_arg2), {
    kern_printk("strspn is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    __kernel_size_t ret = strspn(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("strspn returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_heap_insert
#define APP_WRAPPER_FOR_heap_insert
#endif
 
#ifndef APP_WRAPPER_FOR_heap_insert
#define APP_WRAPPER_FOR_heap_insert
FUNCTION_WRAPPER(heap_insert, (struct ptr_heap *heap, void *p), {
    WRAP_RECURSIVE(heap);
    TRACES_IF_WATCHPOINT(heap);
    SCAN_HEAD_FUNC(struct ptr_heap)(*(TO_UNWATCHED_ADDRESS(heap)));
    kern_printk("heap_insert is invoked.\n");
    PRE_WRAPPER_FUNC(heap, p);
    void *ret = heap_insert(heap, p);
    POST_WRAPPER_FUNC(heap, p);
    kern_printk("heap_insert returned.\n");
    TRACES_IF_WATCHPOINT(heap);
    SCAN_HEAD_FUNC(struct ptr_heap)(*(TO_UNWATCHED_ADDRESS(heap)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pagefault_out_of_memory
#define APP_WRAPPER_FOR_pagefault_out_of_memory
#endif
 
#ifndef APP_WRAPPER_FOR_pagefault_out_of_memory
#define APP_WRAPPER_FOR_pagefault_out_of_memory
FUNCTION_WRAPPER_VOID(pagefault_out_of_memory, (), {
    kern_printk("pagefault_out_of_memory is invoked.\n");
    PRE_WRAPPER_FUNC();
    pagefault_out_of_memory();
    POST_WRAPPER_FUNC();
    kern_printk("pagefault_out_of_memory returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_dev_resource_interrupt
#define APP_WRAPPER_FOR_acpi_dev_resource_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_dev_resource_interrupt
#define APP_WRAPPER_FOR_acpi_dev_resource_interrupt
FUNCTION_WRAPPER(acpi_dev_resource_interrupt, (struct acpi_resource *ares, int index, struct resource *res), {
    kern_printk("acpi_dev_resource_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC(ares, index, res);
    bool ret = acpi_dev_resource_interrupt(ares, index, res);
    POST_WRAPPER_FUNC(ares, index, res);
    kern_printk("acpi_dev_resource_interrupt returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_free_datagram
#define APP_WRAPPER_FOR_skb_free_datagram
#endif
 
#ifndef APP_WRAPPER_FOR_skb_free_datagram
#define APP_WRAPPER_FOR_skb_free_datagram
FUNCTION_WRAPPER_VOID(skb_free_datagram, (struct sock *sk, struct sk_buff *skb), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_free_datagram is invoked.\n");
    PRE_WRAPPER_FUNC(sk, skb);
    skb_free_datagram(sk, skb);
    POST_WRAPPER_FUNC(sk, skb);
    kern_printk("skb_free_datagram returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_bdi_unregister
#define APP_WRAPPER_FOR_bdi_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_bdi_unregister
#define APP_WRAPPER_FOR_bdi_unregister
FUNCTION_WRAPPER_VOID(bdi_unregister, (struct backing_dev_info *bdi), {
    WRAP_RECURSIVE(bdi);
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
    kern_printk("bdi_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(bdi);
    bdi_unregister(bdi);
    POST_WRAPPER_FUNC(bdi);
    kern_printk("bdi_unregister returned.\n");
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
})
#endif


#ifndef KERN_ADDR___wake_up_sync
#define APP_WRAPPER_FOR___wake_up_sync
#endif
 
#ifndef APP_WRAPPER_FOR___wake_up_sync
#define APP_WRAPPER_FOR___wake_up_sync
FUNCTION_WRAPPER_VOID(__wake_up_sync, (wait_queue_head_t *q, unsigned int mode, int nr), {
    kern_printk("__wake_up_sync is invoked.\n");
    PRE_WRAPPER_FUNC(q, mode, nr);
    __wake_up_sync(q, mode, nr);
    POST_WRAPPER_FUNC(q, mode, nr);
    kern_printk("__wake_up_sync returned.\n");
})
#endif


#ifndef KERN_ADDR_do_no_restart_syscall
#define APP_WRAPPER_FOR_do_no_restart_syscall
#endif
 
#ifndef APP_WRAPPER_FOR_do_no_restart_syscall
#define APP_WRAPPER_FOR_do_no_restart_syscall
FUNCTION_WRAPPER(do_no_restart_syscall, (struct restart_block *parm), {
    WRAP_RECURSIVE(parm);
    TRACES_IF_WATCHPOINT(parm);
    SCAN_HEAD_FUNC(struct restart_block)(*(TO_UNWATCHED_ADDRESS(parm)));
    kern_printk("do_no_restart_syscall is invoked.\n");
    PRE_WRAPPER_FUNC(parm);
    long ret = do_no_restart_syscall(parm);
    POST_WRAPPER_FUNC(parm);
    kern_printk("do_no_restart_syscall returned.\n");
    TRACES_IF_WATCHPOINT(parm);
    SCAN_HEAD_FUNC(struct restart_block)(*(TO_UNWATCHED_ADDRESS(parm)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_update_request
#define APP_WRAPPER_FOR_blk_update_request
#endif
 
#ifndef APP_WRAPPER_FOR_blk_update_request
#define APP_WRAPPER_FOR_blk_update_request
FUNCTION_WRAPPER(blk_update_request, (struct request *rq, int error, unsigned int nr_bytes), {
    WRAP_RECURSIVE(rq);
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    kern_printk("blk_update_request is invoked.\n");
    PRE_WRAPPER_FUNC(rq, error, nr_bytes);
    bool ret = blk_update_request(rq, error, nr_bytes);
    POST_WRAPPER_FUNC(rq, error, nr_bytes);
    kern_printk("blk_update_request returned.\n");
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cdrom_get_last_written
#define APP_WRAPPER_FOR_cdrom_get_last_written
#endif
 
#ifndef APP_WRAPPER_FOR_cdrom_get_last_written
#define APP_WRAPPER_FOR_cdrom_get_last_written
FUNCTION_WRAPPER(cdrom_get_last_written, (struct cdrom_device_info *cdi, long *last_written), {
    WRAP_RECURSIVE(cdi);
    TRACES_IF_WATCHPOINT(cdi);
    SCAN_HEAD_FUNC(struct cdrom_device_info)(*(TO_UNWATCHED_ADDRESS(cdi)));
    kern_printk("cdrom_get_last_written is invoked.\n");
    PRE_WRAPPER_FUNC(cdi, last_written);
    int ret = cdrom_get_last_written(cdi, last_written);
    POST_WRAPPER_FUNC(cdi, last_written);
    kern_printk("cdrom_get_last_written returned.\n");
    TRACES_IF_WATCHPOINT(cdi);
    SCAN_HEAD_FUNC(struct cdrom_device_info)(*(TO_UNWATCHED_ADDRESS(cdi)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dequeue_signal
#define APP_WRAPPER_FOR_dequeue_signal
#endif
 
#ifndef APP_WRAPPER_FOR_dequeue_signal
#define APP_WRAPPER_FOR_dequeue_signal
FUNCTION_WRAPPER(dequeue_signal, (struct task_struct *tsk, sigset_t *mask, siginfo_t *info), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("dequeue_signal is invoked.\n");
    PRE_WRAPPER_FUNC(tsk, mask, info);
    int ret = dequeue_signal(tsk, mask, info);
    POST_WRAPPER_FUNC(tsk, mask, info);
    kern_printk("dequeue_signal returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ioread32be
#define APP_WRAPPER_FOR_ioread32be
#endif
 
#ifndef APP_WRAPPER_FOR_ioread32be
#define APP_WRAPPER_FOR_ioread32be
FUNCTION_WRAPPER(ioread32be, (void *_arg1), {
    kern_printk("ioread32be is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = ioread32be(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("ioread32be returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_mps_check
#define APP_WRAPPER_FOR_acpi_mps_check
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_mps_check
#define APP_WRAPPER_FOR_acpi_mps_check
FUNCTION_WRAPPER(acpi_mps_check, (), {
    kern_printk("acpi_mps_check is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = acpi_mps_check();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_mps_check returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_do_huge_pmd_wp_page
#define APP_WRAPPER_FOR_do_huge_pmd_wp_page
#endif
 
#ifndef APP_WRAPPER_FOR_do_huge_pmd_wp_page
#define APP_WRAPPER_FOR_do_huge_pmd_wp_page
FUNCTION_WRAPPER(do_huge_pmd_wp_page, (struct mm_struct *mm, struct vm_area_struct *vma, unsigned long address, pmd_t *pmd, pmd_t orig_pmd), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("do_huge_pmd_wp_page is invoked.\n");
    PRE_WRAPPER_FUNC(mm, vma, address, pmd, orig_pmd);
    int ret = do_huge_pmd_wp_page(mm, vma, address, pmd, orig_pmd);
    POST_WRAPPER_FUNC(mm, vma, address, pmd, orig_pmd);
    kern_printk("do_huge_pmd_wp_page returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_force_sigsegv
#define APP_WRAPPER_FOR_force_sigsegv
#endif
 
#ifndef APP_WRAPPER_FOR_force_sigsegv
#define APP_WRAPPER_FOR_force_sigsegv
FUNCTION_WRAPPER(force_sigsegv, (int _arg1, struct task_struct *_arg2), {
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("force_sigsegv is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = force_sigsegv(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("force_sigsegv returned.\n");
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mark_page_accessed
#define APP_WRAPPER_FOR_mark_page_accessed
#endif
 
#ifndef APP_WRAPPER_FOR_mark_page_accessed
#define APP_WRAPPER_FOR_mark_page_accessed
FUNCTION_WRAPPER_VOID(mark_page_accessed, (struct page *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("mark_page_accessed is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    mark_page_accessed(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("mark_page_accessed returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_rcu_bh_qs
#define APP_WRAPPER_FOR_rcu_bh_qs
#endif
 
#ifndef APP_WRAPPER_FOR_rcu_bh_qs
#define APP_WRAPPER_FOR_rcu_bh_qs
FUNCTION_WRAPPER_VOID(rcu_bh_qs, (int cpu), {
    kern_printk("rcu_bh_qs is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    rcu_bh_qs(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("rcu_bh_qs returned.\n");
})
#endif


#ifndef KERN_ADDR_swap_writepage
#define APP_WRAPPER_FOR_swap_writepage
#endif
 
#ifndef APP_WRAPPER_FOR_swap_writepage
#define APP_WRAPPER_FOR_swap_writepage
FUNCTION_WRAPPER(swap_writepage, (struct page *page, struct writeback_control *wbc), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("swap_writepage is invoked.\n");
    PRE_WRAPPER_FUNC(page, wbc);
    int ret = swap_writepage(page, wbc);
    POST_WRAPPER_FUNC(page, wbc);
    kern_printk("swap_writepage returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_table_complete
#define APP_WRAPPER_FOR_dm_table_complete
#endif
 
#ifndef APP_WRAPPER_FOR_dm_table_complete
#define APP_WRAPPER_FOR_dm_table_complete
FUNCTION_WRAPPER(dm_table_complete, (struct dm_table *t), {
    kern_printk("dm_table_complete is invoked.\n");
    PRE_WRAPPER_FUNC(t);
    int ret = dm_table_complete(t);
    POST_WRAPPER_FUNC(t);
    kern_printk("dm_table_complete returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_invalidate_mapping_pages
#define APP_WRAPPER_FOR_invalidate_mapping_pages
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_mapping_pages
#define APP_WRAPPER_FOR_invalidate_mapping_pages
FUNCTION_WRAPPER(invalidate_mapping_pages, (struct address_space *mapping, unsigned long start, unsigned long end), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("invalidate_mapping_pages is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, start, end);
    long ret = invalidate_mapping_pages(mapping, start, end);
    POST_WRAPPER_FUNC(mapping, start, end);
    kern_printk("invalidate_mapping_pages returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ddebug_add_module
#define APP_WRAPPER_FOR_ddebug_add_module
#endif
 
#ifndef APP_WRAPPER_FOR_ddebug_add_module
#define APP_WRAPPER_FOR_ddebug_add_module
FUNCTION_WRAPPER(ddebug_add_module, (struct _ddebug *tab, unsigned int n, const char *modname), {
    kern_printk("ddebug_add_module is invoked.\n");
    PRE_WRAPPER_FUNC(tab, n, modname);
    int ret = ddebug_add_module(tab, n, modname);
    POST_WRAPPER_FUNC(tab, n, modname);
    kern_printk("ddebug_add_module returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sff_queue_delayed_work
#define APP_WRAPPER_FOR_ata_sff_queue_delayed_work
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_queue_delayed_work
#define APP_WRAPPER_FOR_ata_sff_queue_delayed_work
FUNCTION_WRAPPER_VOID(ata_sff_queue_delayed_work, (struct delayed_work *dwork, unsigned long delay), {
    WRAP_RECURSIVE(dwork);
    TRACES_IF_WATCHPOINT(dwork);
    SCAN_HEAD_FUNC(struct delayed_work)(*(TO_UNWATCHED_ADDRESS(dwork)));
    kern_printk("ata_sff_queue_delayed_work is invoked.\n");
    PRE_WRAPPER_FUNC(dwork, delay);
    ata_sff_queue_delayed_work(dwork, delay);
    POST_WRAPPER_FUNC(dwork, delay);
    kern_printk("ata_sff_queue_delayed_work returned.\n");
    TRACES_IF_WATCHPOINT(dwork);
    SCAN_HEAD_FUNC(struct delayed_work)(*(TO_UNWATCHED_ADDRESS(dwork)));
})
#endif


#ifndef KERN_ADDR_acpi_early_init
#define APP_WRAPPER_FOR_acpi_early_init
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_early_init
#define APP_WRAPPER_FOR_acpi_early_init
FUNCTION_WRAPPER_VOID(acpi_early_init, (), {
    kern_printk("acpi_early_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_early_init();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_early_init returned.\n");
})
#endif


#ifndef KERN_ADDR_set_posix_acl
#define APP_WRAPPER_FOR_set_posix_acl
#endif
 
#ifndef APP_WRAPPER_FOR_set_posix_acl
#define APP_WRAPPER_FOR_set_posix_acl
FUNCTION_WRAPPER(set_posix_acl, (struct inode *_arg1, int _arg2, struct posix_acl *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("set_posix_acl is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = set_posix_acl(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("set_posix_acl returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_paravirt_start_context_switch
#define APP_WRAPPER_FOR_paravirt_start_context_switch
#endif
 
#ifndef APP_WRAPPER_FOR_paravirt_start_context_switch
#define APP_WRAPPER_FOR_paravirt_start_context_switch
FUNCTION_WRAPPER_VOID(paravirt_start_context_switch, (struct task_struct *prev), {
    WRAP_RECURSIVE(prev);
    TRACES_IF_WATCHPOINT(prev);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(prev)));
    kern_printk("paravirt_start_context_switch is invoked.\n");
    PRE_WRAPPER_FUNC(prev);
    paravirt_start_context_switch(prev);
    POST_WRAPPER_FUNC(prev);
    kern_printk("paravirt_start_context_switch returned.\n");
    TRACES_IF_WATCHPOINT(prev);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(prev)));
})
#endif


#ifndef KERN_ADDR_dev_mc_add
#define APP_WRAPPER_FOR_dev_mc_add
#endif
 
#ifndef APP_WRAPPER_FOR_dev_mc_add
#define APP_WRAPPER_FOR_dev_mc_add
FUNCTION_WRAPPER(dev_mc_add, (struct net_device *dev, unsigned const char *addr), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_mc_add is invoked.\n");
    PRE_WRAPPER_FUNC(dev, addr);
    int ret = dev_mc_add(dev, addr);
    POST_WRAPPER_FUNC(dev, addr);
    kern_printk("dev_mc_add returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_file_update_time
#define APP_WRAPPER_FOR_file_update_time
#endif
 
#ifndef APP_WRAPPER_FOR_file_update_time
#define APP_WRAPPER_FOR_file_update_time
FUNCTION_WRAPPER(file_update_time, (struct file *file), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("file_update_time is invoked.\n");
    PRE_WRAPPER_FUNC(file);
    int ret = file_update_time(file);
    POST_WRAPPER_FUNC(file);
    kern_printk("file_update_time returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dquot_get_dqblk
#define APP_WRAPPER_FOR_dquot_get_dqblk
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_get_dqblk
#define APP_WRAPPER_FOR_dquot_get_dqblk
FUNCTION_WRAPPER(dquot_get_dqblk, (struct super_block *sb, struct kqid id, struct fs_disk_quota *di), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("dquot_get_dqblk is invoked.\n");
    PRE_WRAPPER_FUNC(sb, id, di);
    int ret = dquot_get_dqblk(sb, id, di);
    POST_WRAPPER_FUNC(sb, id, di);
    kern_printk("dquot_get_dqblk returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_handle_edge_irq
#define APP_WRAPPER_FOR_handle_edge_irq
#endif
 
#ifndef APP_WRAPPER_FOR_handle_edge_irq
#define APP_WRAPPER_FOR_handle_edge_irq
FUNCTION_WRAPPER_VOID(handle_edge_irq, (unsigned int irq, struct irq_desc *desc), {
    WRAP_RECURSIVE(desc);
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct irq_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
    kern_printk("handle_edge_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq, desc);
    handle_edge_irq(irq, desc);
    POST_WRAPPER_FUNC(irq, desc);
    kern_printk("handle_edge_irq returned.\n");
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct irq_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
})
#endif


#ifndef KERN_ADDR__raw_spin_unlock_irqrestore
#define APP_WRAPPER_FOR__raw_spin_unlock_irqrestore
#endif
 
#ifndef APP_WRAPPER_FOR__raw_spin_unlock_irqrestore
#define APP_WRAPPER_FOR__raw_spin_unlock_irqrestore
FUNCTION_WRAPPER_VOID(_raw_spin_unlock_irqrestore, (raw_spinlock_t *lock, unsigned long flags), {
    kern_printk("_raw_spin_unlock_irqrestore is invoked.\n");
    PRE_WRAPPER_FUNC(lock, flags);
    _raw_spin_unlock_irqrestore(lock, flags);
    POST_WRAPPER_FUNC(lock, flags);
    kern_printk("_raw_spin_unlock_irqrestore returned.\n");
})
#endif


#ifndef KERN_ADDR___acpi_release_global_lock
#define APP_WRAPPER_FOR___acpi_release_global_lock
#endif
 
#ifndef APP_WRAPPER_FOR___acpi_release_global_lock
#define APP_WRAPPER_FOR___acpi_release_global_lock
FUNCTION_WRAPPER(__acpi_release_global_lock, (unsigned int *lock), {
    kern_printk("__acpi_release_global_lock is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    int ret = __acpi_release_global_lock(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("__acpi_release_global_lock returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_unload_parent_table
#define APP_WRAPPER_FOR_acpi_unload_parent_table
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_unload_parent_table
#define APP_WRAPPER_FOR_acpi_unload_parent_table
FUNCTION_WRAPPER(acpi_unload_parent_table, (acpi_handle object), {
    kern_printk("acpi_unload_parent_table is invoked.\n");
    PRE_WRAPPER_FUNC(object);
    acpi_status ret = acpi_unload_parent_table(object);
    POST_WRAPPER_FUNC(object);
    kern_printk("acpi_unload_parent_table returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___online_page_free
#define APP_WRAPPER_FOR___online_page_free
#endif
 
#ifndef APP_WRAPPER_FOR___online_page_free
#define APP_WRAPPER_FOR___online_page_free
FUNCTION_WRAPPER_VOID(__online_page_free, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("__online_page_free is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    __online_page_free(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("__online_page_free returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_dquot_quota_on
#define APP_WRAPPER_FOR_dquot_quota_on
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_quota_on
#define APP_WRAPPER_FOR_dquot_quota_on
FUNCTION_WRAPPER(dquot_quota_on, (struct super_block *sb, int type, int format_id, struct path *path), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    WRAP_RECURSIVE(path);
    TRACES_IF_WATCHPOINT(path);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(path)));
    kern_printk("dquot_quota_on is invoked.\n");
    PRE_WRAPPER_FUNC(sb, type, format_id, path);
    int ret = dquot_quota_on(sb, type, format_id, path);
    POST_WRAPPER_FUNC(sb, type, format_id, path);
    kern_printk("dquot_quota_on returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    TRACES_IF_WATCHPOINT(path);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(path)));
    return ret;
})
#endif


#ifndef KERN_ADDR_node_random
#define APP_WRAPPER_FOR_node_random
#endif
 
#ifndef APP_WRAPPER_FOR_node_random
#define APP_WRAPPER_FOR_node_random
FUNCTION_WRAPPER(node_random, (const nodemask_t *maskp), {
    kern_printk("node_random is invoked.\n");
    PRE_WRAPPER_FUNC(maskp);
    int ret = node_random(maskp);
    POST_WRAPPER_FUNC(maskp);
    kern_printk("node_random returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ctrl_alt_del
#define APP_WRAPPER_FOR_ctrl_alt_del
#endif
 
#ifndef APP_WRAPPER_FOR_ctrl_alt_del
#define APP_WRAPPER_FOR_ctrl_alt_del
FUNCTION_WRAPPER_VOID(ctrl_alt_del, (), {
    kern_printk("ctrl_alt_del is invoked.\n");
    PRE_WRAPPER_FUNC();
    ctrl_alt_del();
    POST_WRAPPER_FUNC();
    kern_printk("ctrl_alt_del returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_is_root_bridge
#define APP_WRAPPER_FOR_acpi_is_root_bridge
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_is_root_bridge
#define APP_WRAPPER_FOR_acpi_is_root_bridge
FUNCTION_WRAPPER(acpi_is_root_bridge, (acpi_handle _arg1), {
    kern_printk("acpi_is_root_bridge is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = acpi_is_root_bridge(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("acpi_is_root_bridge returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_mdiobus_free
#define APP_WRAPPER_FOR_mdiobus_free
#endif
 
#ifndef APP_WRAPPER_FOR_mdiobus_free
#define APP_WRAPPER_FOR_mdiobus_free
FUNCTION_WRAPPER_VOID(mdiobus_free, (struct mii_bus *bus), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct mii_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("mdiobus_free is invoked.\n");
    PRE_WRAPPER_FUNC(bus);
    mdiobus_free(bus);
    POST_WRAPPER_FUNC(bus);
    kern_printk("mdiobus_free returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct mii_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
})
#endif


#ifndef KERN_ADDR_proc_tty_register_driver
#define APP_WRAPPER_FOR_proc_tty_register_driver
#endif
 
#ifndef APP_WRAPPER_FOR_proc_tty_register_driver
#define APP_WRAPPER_FOR_proc_tty_register_driver
FUNCTION_WRAPPER_VOID(proc_tty_register_driver, (struct tty_driver *driver), {
    kern_printk("proc_tty_register_driver is invoked.\n");
    PRE_WRAPPER_FUNC(driver);
    proc_tty_register_driver(driver);
    POST_WRAPPER_FUNC(driver);
    kern_printk("proc_tty_register_driver returned.\n");
})
#endif


#ifndef KERN_ADDR_tc_classify
#define APP_WRAPPER_FOR_tc_classify
#endif
 
#ifndef APP_WRAPPER_FOR_tc_classify
#define APP_WRAPPER_FOR_tc_classify
FUNCTION_WRAPPER(tc_classify, (struct sk_buff *skb, const struct tcf_proto *tp, struct tcf_result *res), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_RECURSIVE(tp);
    TRACES_IF_WATCHPOINT(tp);
    SCAN_HEAD_FUNC(const struct tcf_proto)(*(TO_UNWATCHED_ADDRESS(tp)));
    kern_printk("tc_classify is invoked.\n");
    PRE_WRAPPER_FUNC(skb, tp, res);
    int ret = tc_classify(skb, tp, res);
    POST_WRAPPER_FUNC(skb, tp, res);
    kern_printk("tc_classify returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    TRACES_IF_WATCHPOINT(tp);
    SCAN_HEAD_FUNC(const struct tcf_proto)(*(TO_UNWATCHED_ADDRESS(tp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_timekeeping_valid_for_hres
#define APP_WRAPPER_FOR_timekeeping_valid_for_hres
#endif
 
#ifndef APP_WRAPPER_FOR_timekeeping_valid_for_hres
#define APP_WRAPPER_FOR_timekeeping_valid_for_hres
FUNCTION_WRAPPER(timekeeping_valid_for_hres, (), {
    kern_printk("timekeeping_valid_for_hres is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = timekeeping_valid_for_hres();
    POST_WRAPPER_FUNC();
    kern_printk("timekeeping_valid_for_hres returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_key_fsuid_changed
#define APP_WRAPPER_FOR_key_fsuid_changed
#endif
 
#ifndef APP_WRAPPER_FOR_key_fsuid_changed
#define APP_WRAPPER_FOR_key_fsuid_changed
FUNCTION_WRAPPER_VOID(key_fsuid_changed, (struct task_struct *tsk), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("key_fsuid_changed is invoked.\n");
    PRE_WRAPPER_FUNC(tsk);
    key_fsuid_changed(tsk);
    POST_WRAPPER_FUNC(tsk);
    kern_printk("key_fsuid_changed returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
})
#endif


#ifndef KERN_ADDR_blocking_notifier_chain_unregister
#define APP_WRAPPER_FOR_blocking_notifier_chain_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_blocking_notifier_chain_unregister
#define APP_WRAPPER_FOR_blocking_notifier_chain_unregister
FUNCTION_WRAPPER(blocking_notifier_chain_unregister, (struct blocking_notifier_head *nh, struct notifier_block *nb), {
    WRAP_RECURSIVE(nh);
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct blocking_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    WRAP_RECURSIVE(nb);
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    kern_printk("blocking_notifier_chain_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(nh, nb);
    int ret = blocking_notifier_chain_unregister(nh, nb);
    POST_WRAPPER_FUNC(nh, nb);
    kern_printk("blocking_notifier_chain_unregister returned.\n");
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct blocking_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_update_log_tail
#define APP_WRAPPER_FOR_jbd2_update_log_tail
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_update_log_tail
#define APP_WRAPPER_FOR_jbd2_update_log_tail
FUNCTION_WRAPPER_VOID(jbd2_update_log_tail, (journal_t *journal, tid_t tid, unsigned long block), {
    WRAP_RECURSIVE(journal);
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    kern_printk("jbd2_update_log_tail is invoked.\n");
    PRE_WRAPPER_FUNC(journal, tid, block);
    jbd2_update_log_tail(journal, tid, block);
    POST_WRAPPER_FUNC(journal, tid, block);
    kern_printk("jbd2_update_log_tail returned.\n");
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
})
#endif


#ifndef KERN_ADDR_dquot_enable
#define APP_WRAPPER_FOR_dquot_enable
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_enable
#define APP_WRAPPER_FOR_dquot_enable
FUNCTION_WRAPPER(dquot_enable, (struct inode *inode, int type, int format_id, unsigned int flags), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("dquot_enable is invoked.\n");
    PRE_WRAPPER_FUNC(inode, type, format_id, flags);
    int ret = dquot_enable(inode, type, format_id, flags);
    POST_WRAPPER_FUNC(inode, type, format_id, flags);
    kern_printk("dquot_enable returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_get_request
#define APP_WRAPPER_FOR_blk_get_request
#endif
 
#ifndef APP_WRAPPER_FOR_blk_get_request
#define APP_WRAPPER_FOR_blk_get_request
FUNCTION_WRAPPER(blk_get_request, (struct request_queue *_arg1, int _arg2, gfp_t _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_get_request is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    struct request *ret = blk_get_request(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("blk_get_request returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___offline_isolated_pages
#define APP_WRAPPER_FOR___offline_isolated_pages
#endif
 
#ifndef APP_WRAPPER_FOR___offline_isolated_pages
#define APP_WRAPPER_FOR___offline_isolated_pages
FUNCTION_WRAPPER_VOID(__offline_isolated_pages, (unsigned long _arg1, unsigned long _arg2), {
    kern_printk("__offline_isolated_pages is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    __offline_isolated_pages(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("__offline_isolated_pages returned.\n");
})
#endif


#ifndef KERN_ADDR_apply_alternatives
#define APP_WRAPPER_FOR_apply_alternatives
#endif
 
#ifndef APP_WRAPPER_FOR_apply_alternatives
#define APP_WRAPPER_FOR_apply_alternatives
FUNCTION_WRAPPER_VOID(apply_alternatives, (struct alt_instr *start, struct alt_instr *end), {
    kern_printk("apply_alternatives is invoked.\n");
    PRE_WRAPPER_FUNC(start, end);
    apply_alternatives(start, end);
    POST_WRAPPER_FUNC(start, end);
    kern_printk("apply_alternatives returned.\n");
})
#endif


#ifndef KERN_ADDR_profile_init
#define APP_WRAPPER_FOR_profile_init
#endif
 
#ifndef APP_WRAPPER_FOR_profile_init
#define APP_WRAPPER_FOR_profile_init
FUNCTION_WRAPPER(profile_init, (), {
    kern_printk("profile_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = profile_init();
    POST_WRAPPER_FUNC();
    kern_printk("profile_init returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_frag_evictor
#define APP_WRAPPER_FOR_inet_frag_evictor
#endif
 
#ifndef APP_WRAPPER_FOR_inet_frag_evictor
#define APP_WRAPPER_FOR_inet_frag_evictor
FUNCTION_WRAPPER(inet_frag_evictor, (struct netns_frags *nf, struct inet_frags *f, bool force), {
    WRAP_RECURSIVE(f);
    TRACES_IF_WATCHPOINT(f);
    SCAN_HEAD_FUNC(struct inet_frags)(*(TO_UNWATCHED_ADDRESS(f)));
    kern_printk("inet_frag_evictor is invoked.\n");
    PRE_WRAPPER_FUNC(nf, f, force);
    int ret = inet_frag_evictor(nf, f, force);
    POST_WRAPPER_FUNC(nf, f, force);
    kern_printk("inet_frag_evictor returned.\n");
    TRACES_IF_WATCHPOINT(f);
    SCAN_HEAD_FUNC(struct inet_frags)(*(TO_UNWATCHED_ADDRESS(f)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_host_alloc
#define APP_WRAPPER_FOR_ata_host_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_ata_host_alloc
#define APP_WRAPPER_FOR_ata_host_alloc
FUNCTION_WRAPPER(ata_host_alloc, (struct device *dev, int max_ports), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("ata_host_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(dev, max_ports);
    struct ata_host *ret = ata_host_alloc(dev, max_ports);
    POST_WRAPPER_FUNC(dev, max_ports);
    kern_printk("ata_host_alloc returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_srcu_barrier
#define APP_WRAPPER_FOR_srcu_barrier
#endif
 
#ifndef APP_WRAPPER_FOR_srcu_barrier
#define APP_WRAPPER_FOR_srcu_barrier
FUNCTION_WRAPPER_VOID(srcu_barrier, (struct srcu_struct *sp), {
    WRAP_RECURSIVE(sp);
    TRACES_IF_WATCHPOINT(sp);
    SCAN_HEAD_FUNC(struct srcu_struct)(*(TO_UNWATCHED_ADDRESS(sp)));
    kern_printk("srcu_barrier is invoked.\n");
    PRE_WRAPPER_FUNC(sp);
    srcu_barrier(sp);
    POST_WRAPPER_FUNC(sp);
    kern_printk("srcu_barrier returned.\n");
    TRACES_IF_WATCHPOINT(sp);
    SCAN_HEAD_FUNC(struct srcu_struct)(*(TO_UNWATCHED_ADDRESS(sp)));
})
#endif


#ifndef KERN_ADDR_schedule_preempt_disabled
#define APP_WRAPPER_FOR_schedule_preempt_disabled
#endif
 
#ifndef APP_WRAPPER_FOR_schedule_preempt_disabled
#define APP_WRAPPER_FOR_schedule_preempt_disabled
FUNCTION_WRAPPER_VOID(schedule_preempt_disabled, (), {
    kern_printk("schedule_preempt_disabled is invoked.\n");
    PRE_WRAPPER_FUNC();
    schedule_preempt_disabled();
    POST_WRAPPER_FUNC();
    kern_printk("schedule_preempt_disabled returned.\n");
})
#endif


#ifndef KERN_ADDR_dev_get_by_name
#define APP_WRAPPER_FOR_dev_get_by_name
#endif
 
#ifndef APP_WRAPPER_FOR_dev_get_by_name
#define APP_WRAPPER_FOR_dev_get_by_name
FUNCTION_WRAPPER(dev_get_by_name, (struct net *net, const char *name), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    kern_printk("dev_get_by_name is invoked.\n");
    PRE_WRAPPER_FUNC(net, name);
    struct net_device *ret = dev_get_by_name(net, name);
    POST_WRAPPER_FUNC(net, name);
    kern_printk("dev_get_by_name returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_copy_in_user
#define APP_WRAPPER_FOR_copy_in_user
#endif
 
#ifndef APP_WRAPPER_FOR_copy_in_user
#define APP_WRAPPER_FOR_copy_in_user
FUNCTION_WRAPPER(copy_in_user, (void *to, const void *from, unsigned int len), {
    kern_printk("copy_in_user is invoked.\n");
    PRE_WRAPPER_FUNC(to, from, len);
    long ret = copy_in_user(to, from, len);
    POST_WRAPPER_FUNC(to, from, len);
    kern_printk("copy_in_user returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_apply_paravirt
#define APP_WRAPPER_FOR_apply_paravirt
#endif
 
#ifndef APP_WRAPPER_FOR_apply_paravirt
#define APP_WRAPPER_FOR_apply_paravirt
FUNCTION_WRAPPER_VOID(apply_paravirt, (struct paravirt_patch_site *start, struct paravirt_patch_site *end), {
    kern_printk("apply_paravirt is invoked.\n");
    PRE_WRAPPER_FUNC(start, end);
    apply_paravirt(start, end);
    POST_WRAPPER_FUNC(start, end);
    kern_printk("apply_paravirt returned.\n");
})
#endif


#ifndef KERN_ADDR_qdisc_put_rtab
#define APP_WRAPPER_FOR_qdisc_put_rtab
#endif
 
#ifndef APP_WRAPPER_FOR_qdisc_put_rtab
#define APP_WRAPPER_FOR_qdisc_put_rtab
FUNCTION_WRAPPER_VOID(qdisc_put_rtab, (struct qdisc_rate_table *tab), {
    kern_printk("qdisc_put_rtab is invoked.\n");
    PRE_WRAPPER_FUNC(tab);
    qdisc_put_rtab(tab);
    POST_WRAPPER_FUNC(tab);
    kern_printk("qdisc_put_rtab returned.\n");
})
#endif


#ifndef KERN_ADDR_blk_queue_logical_block_size
#define APP_WRAPPER_FOR_blk_queue_logical_block_size
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_logical_block_size
#define APP_WRAPPER_FOR_blk_queue_logical_block_size
FUNCTION_WRAPPER_VOID(blk_queue_logical_block_size, (struct request_queue *_arg1, unsigned short _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_queue_logical_block_size is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    blk_queue_logical_block_size(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_queue_logical_block_size returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_wake_up_new_task
#define APP_WRAPPER_FOR_wake_up_new_task
#endif
 
#ifndef APP_WRAPPER_FOR_wake_up_new_task
#define APP_WRAPPER_FOR_wake_up_new_task
FUNCTION_WRAPPER_VOID(wake_up_new_task, (struct task_struct *tsk), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("wake_up_new_task is invoked.\n");
    PRE_WRAPPER_FUNC(tsk);
    wake_up_new_task(tsk);
    POST_WRAPPER_FUNC(tsk);
    kern_printk("wake_up_new_task returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
})
#endif


#ifndef KERN_ADDR_scan_unevictable_register_node
#define APP_WRAPPER_FOR_scan_unevictable_register_node
#endif
 
#ifndef APP_WRAPPER_FOR_scan_unevictable_register_node
#define APP_WRAPPER_FOR_scan_unevictable_register_node
FUNCTION_WRAPPER(scan_unevictable_register_node, (struct node *node), {
    WRAP_RECURSIVE(node);
    TRACES_IF_WATCHPOINT(node);
    SCAN_HEAD_FUNC(struct node)(*(TO_UNWATCHED_ADDRESS(node)));
    kern_printk("scan_unevictable_register_node is invoked.\n");
    PRE_WRAPPER_FUNC(node);
    int ret = scan_unevictable_register_node(node);
    POST_WRAPPER_FUNC(node);
    kern_printk("scan_unevictable_register_node returned.\n");
    TRACES_IF_WATCHPOINT(node);
    SCAN_HEAD_FUNC(struct node)(*(TO_UNWATCHED_ADDRESS(node)));
    return ret;
})
#endif


#ifndef KERN_ADDR_end_page_writeback
#define APP_WRAPPER_FOR_end_page_writeback
#endif
 
#ifndef APP_WRAPPER_FOR_end_page_writeback
#define APP_WRAPPER_FOR_end_page_writeback
FUNCTION_WRAPPER_VOID(end_page_writeback, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("end_page_writeback is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    end_page_writeback(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("end_page_writeback returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_acpi_extract_package
#define APP_WRAPPER_FOR_acpi_extract_package
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_extract_package
#define APP_WRAPPER_FOR_acpi_extract_package
FUNCTION_WRAPPER(acpi_extract_package, (union acpi_object *package, struct acpi_buffer *format, struct acpi_buffer *buffer), {
    kern_printk("acpi_extract_package is invoked.\n");
    PRE_WRAPPER_FUNC(package, format, buffer);
    acpi_status ret = acpi_extract_package(package, format, buffer);
    POST_WRAPPER_FUNC(package, format, buffer);
    kern_printk("acpi_extract_package returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_forget
#define APP_WRAPPER_FOR_jbd2_journal_forget
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_forget
#define APP_WRAPPER_FOR_jbd2_journal_forget
FUNCTION_WRAPPER(jbd2_journal_forget, (handle_t *_arg1, struct buffer_head *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(handle_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("jbd2_journal_forget is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = jbd2_journal_forget(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("jbd2_journal_forget returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(handle_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_nsown_capable
#define APP_WRAPPER_FOR_nsown_capable
#endif
 
#ifndef APP_WRAPPER_FOR_nsown_capable
#define APP_WRAPPER_FOR_nsown_capable
FUNCTION_WRAPPER(nsown_capable, (int cap), {
    kern_printk("nsown_capable is invoked.\n");
    PRE_WRAPPER_FUNC(cap);
    bool ret = nsown_capable(cap);
    POST_WRAPPER_FUNC(cap);
    kern_printk("nsown_capable returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_exception
#define APP_WRAPPER_FOR_acpi_exception
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_exception
#define APP_WRAPPER_FOR_acpi_exception
FUNCTION_WRAPPER_VOID(acpi_exception, (const char *module_name, u32 line_number, acpi_status status, const char *format, ...), {
    va_list args__;
    va_start(args__, format);
    // TODO: variadic arguments
    kern_printk("acpi_exception is invoked.\n");
    PRE_WRAPPER_FUNC(module_name, line_number, status, format);
    acpi_exception(module_name, line_number, status, format);
    POST_WRAPPER_FUNC(module_name, line_number, status, format);
    kern_printk("acpi_exception returned.\n");
    va_end(args__);
})
#endif


#ifndef KERN_ADDR_vfs_statfs
#define APP_WRAPPER_FOR_vfs_statfs
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_statfs
#define APP_WRAPPER_FOR_vfs_statfs
FUNCTION_WRAPPER(vfs_statfs, (struct path *_arg1, struct kstatfs *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("vfs_statfs is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = vfs_statfs(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("vfs_statfs returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cgroup_taskset_size
#define APP_WRAPPER_FOR_cgroup_taskset_size
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_taskset_size
#define APP_WRAPPER_FOR_cgroup_taskset_size
FUNCTION_WRAPPER(cgroup_taskset_size, (struct cgroup_taskset *tset), {
    kern_printk("cgroup_taskset_size is invoked.\n");
    PRE_WRAPPER_FUNC(tset);
    int ret = cgroup_taskset_size(tset);
    POST_WRAPPER_FUNC(tset);
    kern_printk("cgroup_taskset_size returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_device_store_bool
#define APP_WRAPPER_FOR_device_store_bool
#endif
 
#ifndef APP_WRAPPER_FOR_device_store_bool
#define APP_WRAPPER_FOR_device_store_bool
FUNCTION_WRAPPER(device_store_bool, (struct device *dev, struct device_attribute *attr, const char *buf, size_t count), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(attr);
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(struct device_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    kern_printk("device_store_bool is invoked.\n");
    PRE_WRAPPER_FUNC(dev, attr, buf, count);
    ssize_t ret = device_store_bool(dev, attr, buf, count);
    POST_WRAPPER_FUNC(dev, attr, buf, count);
    kern_printk("device_store_bool returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(struct device_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    return ret;
})
#endif


#ifndef KERN_ADDR___ata_ehi_push_desc
#define APP_WRAPPER_FOR___ata_ehi_push_desc
#endif
 
#ifndef APP_WRAPPER_FOR___ata_ehi_push_desc
#define APP_WRAPPER_FOR___ata_ehi_push_desc
FUNCTION_WRAPPER_VOID(__ata_ehi_push_desc, (struct ata_eh_info *ehi, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    WRAP_RECURSIVE(ehi);
    TRACES_IF_WATCHPOINT(ehi);
    SCAN_HEAD_FUNC(struct ata_eh_info)(*(TO_UNWATCHED_ADDRESS(ehi)));
    // TODO: variadic arguments
    kern_printk("__ata_ehi_push_desc is invoked.\n");
    PRE_WRAPPER_FUNC(ehi, fmt);
    __ata_ehi_push_desc(ehi, fmt);
    POST_WRAPPER_FUNC(ehi, fmt);
    kern_printk("__ata_ehi_push_desc returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(ehi);
    SCAN_HEAD_FUNC(struct ata_eh_info)(*(TO_UNWATCHED_ADDRESS(ehi)));
})
#endif


#ifndef KERN_ADDR_acpi_enter_sleep_state_s4bios
#define APP_WRAPPER_FOR_acpi_enter_sleep_state_s4bios
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_enter_sleep_state_s4bios
#define APP_WRAPPER_FOR_acpi_enter_sleep_state_s4bios
FUNCTION_WRAPPER(acpi_enter_sleep_state_s4bios, (), {
    kern_printk("acpi_enter_sleep_state_s4bios is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_status ret = acpi_enter_sleep_state_s4bios();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_enter_sleep_state_s4bios returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_csk_listen_start
#define APP_WRAPPER_FOR_inet_csk_listen_start
#endif
 
#ifndef APP_WRAPPER_FOR_inet_csk_listen_start
#define APP_WRAPPER_FOR_inet_csk_listen_start
FUNCTION_WRAPPER(inet_csk_listen_start, (struct sock *sk, const int nr_table_entries), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("inet_csk_listen_start is invoked.\n");
    PRE_WRAPPER_FUNC(sk, nr_table_entries);
    int ret = inet_csk_listen_start(sk, nr_table_entries);
    POST_WRAPPER_FUNC(sk, nr_table_entries);
    kern_printk("inet_csk_listen_start returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR___pci_enable_wake
#define APP_WRAPPER_FOR___pci_enable_wake
#endif
 
#ifndef APP_WRAPPER_FOR___pci_enable_wake
#define APP_WRAPPER_FOR___pci_enable_wake
FUNCTION_WRAPPER(__pci_enable_wake, (struct pci_dev *dev, pci_power_t state, bool runtime, bool enable), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("__pci_enable_wake is invoked.\n");
    PRE_WRAPPER_FUNC(dev, state, runtime, enable);
    int ret = __pci_enable_wake(dev, state, runtime, enable);
    POST_WRAPPER_FUNC(dev, state, runtime, enable);
    kern_printk("__pci_enable_wake returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_fixup_early_ioremap
#define APP_WRAPPER_FOR_fixup_early_ioremap
#endif
 
#ifndef APP_WRAPPER_FOR_fixup_early_ioremap
#define APP_WRAPPER_FOR_fixup_early_ioremap
FUNCTION_WRAPPER_VOID(fixup_early_ioremap, (), {
    kern_printk("fixup_early_ioremap is invoked.\n");
    PRE_WRAPPER_FUNC();
    fixup_early_ioremap();
    POST_WRAPPER_FUNC();
    kern_printk("fixup_early_ioremap returned.\n");
})
#endif


#ifndef KERN_ADDR_inet_rtx_syn_ack
#define APP_WRAPPER_FOR_inet_rtx_syn_ack
#endif
 
#ifndef APP_WRAPPER_FOR_inet_rtx_syn_ack
#define APP_WRAPPER_FOR_inet_rtx_syn_ack
FUNCTION_WRAPPER(inet_rtx_syn_ack, (struct sock *parent, struct request_sock *req), {
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(parent)));
    WRAP_RECURSIVE(req);
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct request_sock)(*(TO_UNWATCHED_ADDRESS(req)));
    kern_printk("inet_rtx_syn_ack is invoked.\n");
    PRE_WRAPPER_FUNC(parent, req);
    int ret = inet_rtx_syn_ack(parent, req);
    POST_WRAPPER_FUNC(parent, req);
    kern_printk("inet_rtx_syn_ack returned.\n");
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(parent)));
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct request_sock)(*(TO_UNWATCHED_ADDRESS(req)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pm_qos_add_notifier
#define APP_WRAPPER_FOR_pm_qos_add_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_pm_qos_add_notifier
#define APP_WRAPPER_FOR_pm_qos_add_notifier
FUNCTION_WRAPPER(pm_qos_add_notifier, (int pm_qos_class, struct notifier_block *notifier), {
    WRAP_RECURSIVE(notifier);
    TRACES_IF_WATCHPOINT(notifier);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(notifier)));
    kern_printk("pm_qos_add_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(pm_qos_class, notifier);
    int ret = pm_qos_add_notifier(pm_qos_class, notifier);
    POST_WRAPPER_FUNC(pm_qos_class, notifier);
    kern_printk("pm_qos_add_notifier returned.\n");
    TRACES_IF_WATCHPOINT(notifier);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(notifier)));
    return ret;
})
#endif


#ifndef KERN_ADDR__raw_write_unlock_irq
#define APP_WRAPPER_FOR__raw_write_unlock_irq
#endif
 
#ifndef APP_WRAPPER_FOR__raw_write_unlock_irq
#define APP_WRAPPER_FOR__raw_write_unlock_irq
FUNCTION_WRAPPER_VOID(_raw_write_unlock_irq, (rwlock_t *lock), {
    kern_printk("_raw_write_unlock_irq is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    _raw_write_unlock_irq(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("_raw_write_unlock_irq returned.\n");
})
#endif


#ifndef KERN_ADDR_release_firmware
#define APP_WRAPPER_FOR_release_firmware
#endif
 
#ifndef APP_WRAPPER_FOR_release_firmware
#define APP_WRAPPER_FOR_release_firmware
FUNCTION_WRAPPER_VOID(release_firmware, (const struct firmware *fw), {
    WRAP_RECURSIVE(fw);
    TRACES_IF_WATCHPOINT(fw);
    SCAN_HEAD_FUNC(const struct firmware)(*(TO_UNWATCHED_ADDRESS(fw)));
    kern_printk("release_firmware is invoked.\n");
    PRE_WRAPPER_FUNC(fw);
    release_firmware(fw);
    POST_WRAPPER_FUNC(fw);
    kern_printk("release_firmware returned.\n");
    TRACES_IF_WATCHPOINT(fw);
    SCAN_HEAD_FUNC(const struct firmware)(*(TO_UNWATCHED_ADDRESS(fw)));
})
#endif


#ifndef KERN_ADDR_pm_relax
#define APP_WRAPPER_FOR_pm_relax
#endif
 
#ifndef APP_WRAPPER_FOR_pm_relax
#define APP_WRAPPER_FOR_pm_relax
FUNCTION_WRAPPER_VOID(pm_relax, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pm_relax is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pm_relax(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pm_relax returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_tick_get_tick_sched
#define APP_WRAPPER_FOR_tick_get_tick_sched
#endif
 
#ifndef APP_WRAPPER_FOR_tick_get_tick_sched
#define APP_WRAPPER_FOR_tick_get_tick_sched
FUNCTION_WRAPPER(tick_get_tick_sched, (int cpu), {
    kern_printk("tick_get_tick_sched is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    struct tick_sched *ret = tick_get_tick_sched(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("tick_get_tick_sched returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_interruptible_sleep_on
#define APP_WRAPPER_FOR_interruptible_sleep_on
#endif
 
#ifndef APP_WRAPPER_FOR_interruptible_sleep_on
#define APP_WRAPPER_FOR_interruptible_sleep_on
FUNCTION_WRAPPER_VOID(interruptible_sleep_on, (wait_queue_head_t *q), {
    kern_printk("interruptible_sleep_on is invoked.\n");
    PRE_WRAPPER_FUNC(q);
    interruptible_sleep_on(q);
    POST_WRAPPER_FUNC(q);
    kern_printk("interruptible_sleep_on returned.\n");
})
#endif


#ifndef KERN_ADDR_bdi_init
#define APP_WRAPPER_FOR_bdi_init
#endif
 
#ifndef APP_WRAPPER_FOR_bdi_init
#define APP_WRAPPER_FOR_bdi_init
FUNCTION_WRAPPER(bdi_init, (struct backing_dev_info *bdi), {
    WRAP_RECURSIVE(bdi);
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
    kern_printk("bdi_init is invoked.\n");
    PRE_WRAPPER_FUNC(bdi);
    int ret = bdi_init(bdi);
    POST_WRAPPER_FUNC(bdi);
    kern_printk("bdi_init returned.\n");
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cap_bprm_secureexec
#define APP_WRAPPER_FOR_cap_bprm_secureexec
#endif
 
#ifndef APP_WRAPPER_FOR_cap_bprm_secureexec
#define APP_WRAPPER_FOR_cap_bprm_secureexec
FUNCTION_WRAPPER(cap_bprm_secureexec, (struct linux_binprm *bprm), {
    kern_printk("cap_bprm_secureexec is invoked.\n");
    PRE_WRAPPER_FUNC(bprm);
    int ret = cap_bprm_secureexec(bprm);
    POST_WRAPPER_FUNC(bprm);
    kern_printk("cap_bprm_secureexec returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_global_dirty_limits
#define APP_WRAPPER_FOR_global_dirty_limits
#endif
 
#ifndef APP_WRAPPER_FOR_global_dirty_limits
#define APP_WRAPPER_FOR_global_dirty_limits
FUNCTION_WRAPPER_VOID(global_dirty_limits, (unsigned long *pbackground, unsigned long *pdirty), {
    kern_printk("global_dirty_limits is invoked.\n");
    PRE_WRAPPER_FUNC(pbackground, pdirty);
    global_dirty_limits(pbackground, pdirty);
    POST_WRAPPER_FUNC(pbackground, pdirty);
    kern_printk("global_dirty_limits returned.\n");
})
#endif


#ifndef KERN_ADDR___blk_run_queue
#define APP_WRAPPER_FOR___blk_run_queue
#endif
 
#ifndef APP_WRAPPER_FOR___blk_run_queue
#define APP_WRAPPER_FOR___blk_run_queue
FUNCTION_WRAPPER_VOID(__blk_run_queue, (struct request_queue *q), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    kern_printk("__blk_run_queue is invoked.\n");
    PRE_WRAPPER_FUNC(q);
    __blk_run_queue(q);
    POST_WRAPPER_FUNC(q);
    kern_printk("__blk_run_queue returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
})
#endif


#ifndef KERN_ADDR_setup_vector_irq
#define APP_WRAPPER_FOR_setup_vector_irq
#endif
 
#ifndef APP_WRAPPER_FOR_setup_vector_irq
#define APP_WRAPPER_FOR_setup_vector_irq
FUNCTION_WRAPPER_VOID(setup_vector_irq, (int cpu), {
    kern_printk("setup_vector_irq is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    setup_vector_irq(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("setup_vector_irq returned.\n");
})
#endif


#ifndef KERN_ADDR_get_gate_vma
#define APP_WRAPPER_FOR_get_gate_vma
#endif
 
#ifndef APP_WRAPPER_FOR_get_gate_vma
#define APP_WRAPPER_FOR_get_gate_vma
FUNCTION_WRAPPER(get_gate_vma, (struct mm_struct *mm), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    kern_printk("get_gate_vma is invoked.\n");
    PRE_WRAPPER_FUNC(mm);
    struct vm_area_struct *ret = get_gate_vma(mm);
    POST_WRAPPER_FUNC(mm);
    kern_printk("get_gate_vma returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_key_init
#define APP_WRAPPER_FOR_key_init
#endif
 
#ifndef APP_WRAPPER_FOR_key_init
#define APP_WRAPPER_FOR_key_init
FUNCTION_WRAPPER_VOID(key_init, (), {
    kern_printk("key_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    key_init();
    POST_WRAPPER_FUNC();
    kern_printk("key_init returned.\n");
})
#endif


#ifndef KERN_ADDR_ioread32
#define APP_WRAPPER_FOR_ioread32
#endif
 
#ifndef APP_WRAPPER_FOR_ioread32
#define APP_WRAPPER_FOR_ioread32
FUNCTION_WRAPPER(ioread32, (void *_arg1), {
    kern_printk("ioread32 is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = ioread32(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("ioread32 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_linkwatch_run_queue
#define APP_WRAPPER_FOR_linkwatch_run_queue
#endif
 
#ifndef APP_WRAPPER_FOR_linkwatch_run_queue
#define APP_WRAPPER_FOR_linkwatch_run_queue
FUNCTION_WRAPPER_VOID(linkwatch_run_queue, (), {
    kern_printk("linkwatch_run_queue is invoked.\n");
    PRE_WRAPPER_FUNC();
    linkwatch_run_queue();
    POST_WRAPPER_FUNC();
    kern_printk("linkwatch_run_queue returned.\n");
})
#endif


#ifndef KERN_ADDR__raw_write_lock_irq
#define APP_WRAPPER_FOR__raw_write_lock_irq
#endif
 
#ifndef APP_WRAPPER_FOR__raw_write_lock_irq
#define APP_WRAPPER_FOR__raw_write_lock_irq
FUNCTION_WRAPPER_VOID(_raw_write_lock_irq, (rwlock_t *lock), {
    kern_printk("_raw_write_lock_irq is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    _raw_write_lock_irq(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("_raw_write_lock_irq returned.\n");
})
#endif


#ifndef KERN_ADDR_dm_table_get_md
#define APP_WRAPPER_FOR_dm_table_get_md
#endif
 
#ifndef APP_WRAPPER_FOR_dm_table_get_md
#define APP_WRAPPER_FOR_dm_table_get_md
FUNCTION_WRAPPER(dm_table_get_md, (struct dm_table *t), {
    kern_printk("dm_table_get_md is invoked.\n");
    PRE_WRAPPER_FUNC(t);
    struct mapped_device *ret = dm_table_get_md(t);
    POST_WRAPPER_FUNC(t);
    kern_printk("dm_table_get_md returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_may_umount_tree
#define APP_WRAPPER_FOR_may_umount_tree
#endif
 
#ifndef APP_WRAPPER_FOR_may_umount_tree
#define APP_WRAPPER_FOR_may_umount_tree
FUNCTION_WRAPPER(may_umount_tree, (struct vfsmount *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("may_umount_tree is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = may_umount_tree(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("may_umount_tree returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_rtnl_trylock
#define APP_WRAPPER_FOR_rtnl_trylock
#endif
 
#ifndef APP_WRAPPER_FOR_rtnl_trylock
#define APP_WRAPPER_FOR_rtnl_trylock
FUNCTION_WRAPPER(rtnl_trylock, (), {
    kern_printk("rtnl_trylock is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = rtnl_trylock();
    POST_WRAPPER_FUNC();
    kern_printk("rtnl_trylock returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_install_fixed_event_handler
#define APP_WRAPPER_FOR_acpi_install_fixed_event_handler
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_install_fixed_event_handler
#define APP_WRAPPER_FOR_acpi_install_fixed_event_handler
FUNCTION_WRAPPER(acpi_install_fixed_event_handler, (u32 acpi_event, acpi_event_handler handler, void *context), {
    WRAP_FUNCTION(handler);
    kern_printk("acpi_install_fixed_event_handler is invoked.\n");
    PRE_WRAPPER_FUNC(acpi_event, handler, context);
    acpi_status ret = acpi_install_fixed_event_handler(acpi_event, handler, context);
    POST_WRAPPER_FUNC(acpi_event, handler, context);
    kern_printk("acpi_install_fixed_event_handler returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_touch_softlockup_watchdog
#define APP_WRAPPER_FOR_touch_softlockup_watchdog
#endif
 
#ifndef APP_WRAPPER_FOR_touch_softlockup_watchdog
#define APP_WRAPPER_FOR_touch_softlockup_watchdog
FUNCTION_WRAPPER_VOID(touch_softlockup_watchdog, (), {
    kern_printk("touch_softlockup_watchdog is invoked.\n");
    PRE_WRAPPER_FUNC();
    touch_softlockup_watchdog();
    POST_WRAPPER_FUNC();
    kern_printk("touch_softlockup_watchdog returned.\n");
})
#endif


#ifndef KERN_ADDR_anon_vma_interval_tree_iter_next
#define APP_WRAPPER_FOR_anon_vma_interval_tree_iter_next
#endif
 
#ifndef APP_WRAPPER_FOR_anon_vma_interval_tree_iter_next
#define APP_WRAPPER_FOR_anon_vma_interval_tree_iter_next
FUNCTION_WRAPPER(anon_vma_interval_tree_iter_next, (struct anon_vma_chain *node, unsigned long start, unsigned long last), {
    kern_printk("anon_vma_interval_tree_iter_next is invoked.\n");
    PRE_WRAPPER_FUNC(node, start, last);
    struct anon_vma_chain *ret = anon_vma_interval_tree_iter_next(node, start, last);
    POST_WRAPPER_FUNC(node, start, last);
    kern_printk("anon_vma_interval_tree_iter_next returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_swiotlb_init
#define APP_WRAPPER_FOR_swiotlb_init
#endif
 
#ifndef APP_WRAPPER_FOR_swiotlb_init
#define APP_WRAPPER_FOR_swiotlb_init
FUNCTION_WRAPPER_VOID(swiotlb_init, (int verbose), {
    kern_printk("swiotlb_init is invoked.\n");
    PRE_WRAPPER_FUNC(verbose);
    swiotlb_init(verbose);
    POST_WRAPPER_FUNC(verbose);
    kern_printk("swiotlb_init returned.\n");
})
#endif


#ifndef KERN_ADDR_bd_set_size
#define APP_WRAPPER_FOR_bd_set_size
#endif
 
#ifndef APP_WRAPPER_FOR_bd_set_size
#define APP_WRAPPER_FOR_bd_set_size
FUNCTION_WRAPPER_VOID(bd_set_size, (struct block_device *_arg1, loff_t size), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bd_set_size is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, size);
    bd_set_size(_arg1, size);
    POST_WRAPPER_FUNC(_arg1, size);
    kern_printk("bd_set_size returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_blk_requeue_request
#define APP_WRAPPER_FOR_blk_requeue_request
#endif
 
#ifndef APP_WRAPPER_FOR_blk_requeue_request
#define APP_WRAPPER_FOR_blk_requeue_request
FUNCTION_WRAPPER_VOID(blk_requeue_request, (struct request_queue *_arg1, struct request *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("blk_requeue_request is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    blk_requeue_request(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_requeue_request returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_locks_alloc_lock
#define APP_WRAPPER_FOR_locks_alloc_lock
#endif
 
#ifndef APP_WRAPPER_FOR_locks_alloc_lock
#define APP_WRAPPER_FOR_locks_alloc_lock
FUNCTION_WRAPPER(locks_alloc_lock, (), {
    kern_printk("locks_alloc_lock is invoked.\n");
    PRE_WRAPPER_FUNC();
    struct file_lock *ret = locks_alloc_lock();
    POST_WRAPPER_FUNC();
    kern_printk("locks_alloc_lock returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_swiotlb_late_init_with_tbl
#define APP_WRAPPER_FOR_swiotlb_late_init_with_tbl
#endif
 
#ifndef APP_WRAPPER_FOR_swiotlb_late_init_with_tbl
#define APP_WRAPPER_FOR_swiotlb_late_init_with_tbl
FUNCTION_WRAPPER(swiotlb_late_init_with_tbl, (char *tlb, unsigned long nslabs), {
    kern_printk("swiotlb_late_init_with_tbl is invoked.\n");
    PRE_WRAPPER_FUNC(tlb, nslabs);
    int ret = swiotlb_late_init_with_tbl(tlb, nslabs);
    POST_WRAPPER_FUNC(tlb, nslabs);
    kern_printk("swiotlb_late_init_with_tbl returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dpm_resume
#define APP_WRAPPER_FOR_dpm_resume
#endif
 
#ifndef APP_WRAPPER_FOR_dpm_resume
#define APP_WRAPPER_FOR_dpm_resume
FUNCTION_WRAPPER_VOID(dpm_resume, (pm_message_t state), {
    kern_printk("dpm_resume is invoked.\n");
    PRE_WRAPPER_FUNC(state);
    dpm_resume(state);
    POST_WRAPPER_FUNC(state);
    kern_printk("dpm_resume returned.\n");
})
#endif


#ifndef KERN_ADDR_nf_unregister_hook
#define APP_WRAPPER_FOR_nf_unregister_hook
#endif
 
#ifndef APP_WRAPPER_FOR_nf_unregister_hook
#define APP_WRAPPER_FOR_nf_unregister_hook
FUNCTION_WRAPPER_VOID(nf_unregister_hook, (struct nf_hook_ops *reg), {
    WRAP_RECURSIVE(reg);
    TRACES_IF_WATCHPOINT(reg);
    SCAN_HEAD_FUNC(struct nf_hook_ops)(*(TO_UNWATCHED_ADDRESS(reg)));
    kern_printk("nf_unregister_hook is invoked.\n");
    PRE_WRAPPER_FUNC(reg);
    nf_unregister_hook(reg);
    POST_WRAPPER_FUNC(reg);
    kern_printk("nf_unregister_hook returned.\n");
    TRACES_IF_WATCHPOINT(reg);
    SCAN_HEAD_FUNC(struct nf_hook_ops)(*(TO_UNWATCHED_ADDRESS(reg)));
})
#endif


#ifndef KERN_ADDR_pci_find_capability
#define APP_WRAPPER_FOR_pci_find_capability
#endif
 
#ifndef APP_WRAPPER_FOR_pci_find_capability
#define APP_WRAPPER_FOR_pci_find_capability
FUNCTION_WRAPPER(pci_find_capability, (struct pci_dev *dev, int cap), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_find_capability is invoked.\n");
    PRE_WRAPPER_FUNC(dev, cap);
    int ret = pci_find_capability(dev, cap);
    POST_WRAPPER_FUNC(dev, cap);
    kern_printk("pci_find_capability returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sysfs_remove_file_from_group
#define APP_WRAPPER_FOR_sysfs_remove_file_from_group
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_remove_file_from_group
#define APP_WRAPPER_FOR_sysfs_remove_file_from_group
FUNCTION_WRAPPER_VOID(sysfs_remove_file_from_group, (struct kobject *kobj, const struct attribute *attr, const char *group), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    kern_printk("sysfs_remove_file_from_group is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, attr, group);
    sysfs_remove_file_from_group(kobj, attr, group);
    POST_WRAPPER_FUNC(kobj, attr, group);
    kern_printk("sysfs_remove_file_from_group returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
})
#endif


#ifndef KERN_ADDR_compat_sys_getdents
#define APP_WRAPPER_FOR_compat_sys_getdents
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_getdents
#define APP_WRAPPER_FOR_compat_sys_getdents
FUNCTION_WRAPPER(compat_sys_getdents, (unsigned int fd, struct compat_linux_dirent *dirent, unsigned int count), {
    kern_printk("compat_sys_getdents is invoked.\n");
    PRE_WRAPPER_FUNC(fd, dirent, count);
    long ret = compat_sys_getdents(fd, dirent, count);
    POST_WRAPPER_FUNC(fd, dirent, count);
    kern_printk("compat_sys_getdents returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_utimensat
#define APP_WRAPPER_FOR_compat_sys_utimensat
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_utimensat
#define APP_WRAPPER_FOR_compat_sys_utimensat
FUNCTION_WRAPPER(compat_sys_utimensat, (unsigned int dfd, const char *filename, struct compat_timespec *t, int flags), {
    kern_printk("compat_sys_utimensat is invoked.\n");
    PRE_WRAPPER_FUNC(dfd, filename, t, flags);
    long ret = compat_sys_utimensat(dfd, filename, t, flags);
    POST_WRAPPER_FUNC(dfd, filename, t, flags);
    kern_printk("compat_sys_utimensat returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_nonseekable_open
#define APP_WRAPPER_FOR_nonseekable_open
#endif
 
#ifndef APP_WRAPPER_FOR_nonseekable_open
#define APP_WRAPPER_FOR_nonseekable_open
FUNCTION_WRAPPER(nonseekable_open, (struct inode *inode, struct file *filp), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    WRAP_RECURSIVE(filp);
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    kern_printk("nonseekable_open is invoked.\n");
    PRE_WRAPPER_FUNC(inode, filp);
    int ret = nonseekable_open(inode, filp);
    POST_WRAPPER_FUNC(inode, filp);
    kern_printk("nonseekable_open returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_log_do_checkpoint
#define APP_WRAPPER_FOR_jbd2_log_do_checkpoint
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_log_do_checkpoint
#define APP_WRAPPER_FOR_jbd2_log_do_checkpoint
FUNCTION_WRAPPER(jbd2_log_do_checkpoint, (journal_t *journal), {
    WRAP_RECURSIVE(journal);
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    kern_printk("jbd2_log_do_checkpoint is invoked.\n");
    PRE_WRAPPER_FUNC(journal);
    int ret = jbd2_log_do_checkpoint(journal);
    POST_WRAPPER_FUNC(journal);
    kern_printk("jbd2_log_do_checkpoint returned.\n");
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mii_check_media
#define APP_WRAPPER_FOR_mii_check_media
#endif
 
#ifndef APP_WRAPPER_FOR_mii_check_media
#define APP_WRAPPER_FOR_mii_check_media
FUNCTION_WRAPPER(mii_check_media, (struct mii_if_info *mii, unsigned int ok_to_print, unsigned int init_media), {
    WRAP_RECURSIVE(mii);
    TRACES_IF_WATCHPOINT(mii);
    SCAN_HEAD_FUNC(struct mii_if_info)(*(TO_UNWATCHED_ADDRESS(mii)));
    kern_printk("mii_check_media is invoked.\n");
    PRE_WRAPPER_FUNC(mii, ok_to_print, init_media);
    int ret = mii_check_media(mii, ok_to_print, init_media);
    POST_WRAPPER_FUNC(mii, ok_to_print, init_media);
    kern_printk("mii_check_media returned.\n");
    TRACES_IF_WATCHPOINT(mii);
    SCAN_HEAD_FUNC(struct mii_if_info)(*(TO_UNWATCHED_ADDRESS(mii)));
    return ret;
})
#endif


#ifndef KERN_ADDR_oops_may_print
#define APP_WRAPPER_FOR_oops_may_print
#endif
 
#ifndef APP_WRAPPER_FOR_oops_may_print
#define APP_WRAPPER_FOR_oops_may_print
FUNCTION_WRAPPER(oops_may_print, (), {
    kern_printk("oops_may_print is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = oops_may_print();
    POST_WRAPPER_FUNC();
    kern_printk("oops_may_print returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_in_sched_functions
#define APP_WRAPPER_FOR_in_sched_functions
#endif
 
#ifndef APP_WRAPPER_FOR_in_sched_functions
#define APP_WRAPPER_FOR_in_sched_functions
FUNCTION_WRAPPER(in_sched_functions, (unsigned long addr), {
    kern_printk("in_sched_functions is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    int ret = in_sched_functions(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("in_sched_functions returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_qdisc_destroy
#define APP_WRAPPER_FOR_qdisc_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_qdisc_destroy
#define APP_WRAPPER_FOR_qdisc_destroy
FUNCTION_WRAPPER_VOID(qdisc_destroy, (struct Qdisc *qdisc), {
    WRAP_RECURSIVE(qdisc);
    TRACES_IF_WATCHPOINT(qdisc);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(qdisc)));
    kern_printk("qdisc_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(qdisc);
    qdisc_destroy(qdisc);
    POST_WRAPPER_FUNC(qdisc);
    kern_printk("qdisc_destroy returned.\n");
    TRACES_IF_WATCHPOINT(qdisc);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(qdisc)));
})
#endif


#ifndef KERN_ADDR_get_dump_page
#define APP_WRAPPER_FOR_get_dump_page
#endif
 
#ifndef APP_WRAPPER_FOR_get_dump_page
#define APP_WRAPPER_FOR_get_dump_page
FUNCTION_WRAPPER(get_dump_page, (unsigned long addr), {
    kern_printk("get_dump_page is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    struct page *ret = get_dump_page(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("get_dump_page returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_smp_store_cpu_info
#define APP_WRAPPER_FOR_smp_store_cpu_info
#endif
 
#ifndef APP_WRAPPER_FOR_smp_store_cpu_info
#define APP_WRAPPER_FOR_smp_store_cpu_info
FUNCTION_WRAPPER_VOID(smp_store_cpu_info, (int id), {
    kern_printk("smp_store_cpu_info is invoked.\n");
    PRE_WRAPPER_FUNC(id);
    smp_store_cpu_info(id);
    POST_WRAPPER_FUNC(id);
    kern_printk("smp_store_cpu_info returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_bus_read_config_dword
#define APP_WRAPPER_FOR_pci_bus_read_config_dword
#endif
 
#ifndef APP_WRAPPER_FOR_pci_bus_read_config_dword
#define APP_WRAPPER_FOR_pci_bus_read_config_dword
FUNCTION_WRAPPER(pci_bus_read_config_dword, (struct pci_bus *bus, unsigned int devfn, int where, u32 *val), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_bus_read_config_dword is invoked.\n");
    PRE_WRAPPER_FUNC(bus, devfn, where, val);
    int ret = pci_bus_read_config_dword(bus, devfn, where, val);
    POST_WRAPPER_FUNC(bus, devfn, where, val);
    kern_printk("pci_bus_read_config_dword returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_find_parent_resource
#define APP_WRAPPER_FOR_pci_find_parent_resource
#endif
 
#ifndef APP_WRAPPER_FOR_pci_find_parent_resource
#define APP_WRAPPER_FOR_pci_find_parent_resource
FUNCTION_WRAPPER(pci_find_parent_resource, (const struct pci_dev *dev, struct resource *res), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_find_parent_resource is invoked.\n");
    PRE_WRAPPER_FUNC(dev, res);
    struct resource *ret = pci_find_parent_resource(dev, res);
    POST_WRAPPER_FUNC(dev, res);
    kern_printk("pci_find_parent_resource returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_first_online_pgdat
#define APP_WRAPPER_FOR_first_online_pgdat
#endif
 
#ifndef APP_WRAPPER_FOR_first_online_pgdat
#define APP_WRAPPER_FOR_first_online_pgdat
FUNCTION_WRAPPER(first_online_pgdat, (), {
    kern_printk("first_online_pgdat is invoked.\n");
    PRE_WRAPPER_FUNC();
    struct pglist_data *ret = first_online_pgdat();
    POST_WRAPPER_FUNC();
    kern_printk("first_online_pgdat returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_neigh_sysctl_register
#define APP_WRAPPER_FOR_neigh_sysctl_register
#endif
 
#ifndef APP_WRAPPER_FOR_neigh_sysctl_register
#define APP_WRAPPER_FOR_neigh_sysctl_register
FUNCTION_WRAPPER(neigh_sysctl_register, (struct net_device *dev, struct neigh_parms *p, char *p_name, proc_handler *proc_handler), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct neigh_parms)(*(TO_UNWATCHED_ADDRESS(p)));
    WRAP_FUNCTION(proc_handler);
    kern_printk("neigh_sysctl_register is invoked.\n");
    PRE_WRAPPER_FUNC(dev, p, p_name, proc_handler);
    int ret = neigh_sysctl_register(dev, p, p_name, proc_handler);
    POST_WRAPPER_FUNC(dev, p, p_name, proc_handler);
    kern_printk("neigh_sysctl_register returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct neigh_parms)(*(TO_UNWATCHED_ADDRESS(p)));
    return ret;
})
#endif


#ifndef KERN_ADDR_alloc_pages_vma
#define APP_WRAPPER_FOR_alloc_pages_vma
#endif
 
#ifndef APP_WRAPPER_FOR_alloc_pages_vma
#define APP_WRAPPER_FOR_alloc_pages_vma
FUNCTION_WRAPPER(alloc_pages_vma, (gfp_t gfp_mask, int order, struct vm_area_struct *vma, unsigned long addr, int node), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("alloc_pages_vma is invoked.\n");
    PRE_WRAPPER_FUNC(gfp_mask, order, vma, addr, node);
    struct page *ret = alloc_pages_vma(gfp_mask, order, vma, addr, node);
    POST_WRAPPER_FUNC(gfp_mask, order, vma, addr, node);
    kern_printk("alloc_pages_vma returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_device_store_ulong
#define APP_WRAPPER_FOR_device_store_ulong
#endif
 
#ifndef APP_WRAPPER_FOR_device_store_ulong
#define APP_WRAPPER_FOR_device_store_ulong
FUNCTION_WRAPPER(device_store_ulong, (struct device *dev, struct device_attribute *attr, const char *buf, size_t count), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(attr);
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(struct device_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    kern_printk("device_store_ulong is invoked.\n");
    PRE_WRAPPER_FUNC(dev, attr, buf, count);
    ssize_t ret = device_store_ulong(dev, attr, buf, count);
    POST_WRAPPER_FUNC(dev, attr, buf, count);
    kern_printk("device_store_ulong returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(struct device_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    return ret;
})
#endif


#ifndef KERN_ADDR_local_bh_enable
#define APP_WRAPPER_FOR_local_bh_enable
#endif
 
#ifndef APP_WRAPPER_FOR_local_bh_enable
#define APP_WRAPPER_FOR_local_bh_enable
FUNCTION_WRAPPER_VOID(local_bh_enable, (), {
    kern_printk("local_bh_enable is invoked.\n");
    PRE_WRAPPER_FUNC();
    local_bh_enable();
    POST_WRAPPER_FUNC();
    kern_printk("local_bh_enable returned.\n");
})
#endif


#ifndef KERN_ADDR_blk_unregister_region
#define APP_WRAPPER_FOR_blk_unregister_region
#endif
 
#ifndef APP_WRAPPER_FOR_blk_unregister_region
#define APP_WRAPPER_FOR_blk_unregister_region
FUNCTION_WRAPPER_VOID(blk_unregister_region, (dev_t devt, unsigned long range), {
    kern_printk("blk_unregister_region is invoked.\n");
    PRE_WRAPPER_FUNC(devt, range);
    blk_unregister_region(devt, range);
    POST_WRAPPER_FUNC(devt, range);
    kern_printk("blk_unregister_region returned.\n");
})
#endif


#ifndef KERN_ADDR_input_handler_for_each_handle
#define APP_WRAPPER_FOR_input_handler_for_each_handle
#endif
 
#ifndef APP_WRAPPER_FOR_input_handler_for_each_handle
#define APP_WRAPPER_FOR_input_handler_for_each_handle
FUNCTION_WRAPPER(input_handler_for_each_handle, (struct input_handler *_arg1, void *data, int (*fn)(struct input_handle *, void *)), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct input_handler)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_FUNCTION(fn);
    kern_printk("input_handler_for_each_handle is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, data, fn);
    int ret = input_handler_for_each_handle(_arg1, data, fn);
    POST_WRAPPER_FUNC(_arg1, data, fn);
    kern_printk("input_handler_for_each_handle returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct input_handler)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_arch_get_unmapped_area_topdown
#define APP_WRAPPER_FOR_arch_get_unmapped_area_topdown
#endif
 
#ifndef APP_WRAPPER_FOR_arch_get_unmapped_area_topdown
#define APP_WRAPPER_FOR_arch_get_unmapped_area_topdown
FUNCTION_WRAPPER(arch_get_unmapped_area_topdown, (struct file *filp, unsigned long addr, unsigned long len, unsigned long pgoff, unsigned long flags), {
    WRAP_RECURSIVE(filp);
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    kern_printk("arch_get_unmapped_area_topdown is invoked.\n");
    PRE_WRAPPER_FUNC(filp, addr, len, pgoff, flags);
    long ret = arch_get_unmapped_area_topdown(filp, addr, len, pgoff, flags);
    POST_WRAPPER_FUNC(filp, addr, len, pgoff, flags);
    kern_printk("arch_get_unmapped_area_topdown returned.\n");
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_send_remote_softirq
#define APP_WRAPPER_FOR_send_remote_softirq
#endif
 
#ifndef APP_WRAPPER_FOR_send_remote_softirq
#define APP_WRAPPER_FOR_send_remote_softirq
FUNCTION_WRAPPER_VOID(send_remote_softirq, (struct call_single_data *cp, int cpu, int softirq), {
    WRAP_RECURSIVE(cp);
    TRACES_IF_WATCHPOINT(cp);
    SCAN_HEAD_FUNC(struct call_single_data)(*(TO_UNWATCHED_ADDRESS(cp)));
    kern_printk("send_remote_softirq is invoked.\n");
    PRE_WRAPPER_FUNC(cp, cpu, softirq);
    send_remote_softirq(cp, cpu, softirq);
    POST_WRAPPER_FUNC(cp, cpu, softirq);
    kern_printk("send_remote_softirq returned.\n");
    TRACES_IF_WATCHPOINT(cp);
    SCAN_HEAD_FUNC(struct call_single_data)(*(TO_UNWATCHED_ADDRESS(cp)));
})
#endif


#ifndef KERN_ADDR_vsscanf
#define APP_WRAPPER_FOR_vsscanf
#endif
 
#ifndef APP_WRAPPER_FOR_vsscanf
#define APP_WRAPPER_FOR_vsscanf
FUNCTION_WRAPPER(vsscanf, (const char *_arg1, const char *_arg2, va_list _arg3), {
    kern_printk("vsscanf is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = vsscanf(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("vsscanf returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_getdents64
#define APP_WRAPPER_FOR_compat_sys_getdents64
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_getdents64
#define APP_WRAPPER_FOR_compat_sys_getdents64
FUNCTION_WRAPPER(compat_sys_getdents64, (unsigned int fd, struct linux_dirent64 *dirent, unsigned int count), {
    kern_printk("compat_sys_getdents64 is invoked.\n");
    PRE_WRAPPER_FUNC(fd, dirent, count);
    long ret = compat_sys_getdents64(fd, dirent, count);
    POST_WRAPPER_FUNC(fd, dirent, count);
    kern_printk("compat_sys_getdents64 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_arch_show_interrupts
#define APP_WRAPPER_FOR_arch_show_interrupts
#endif
 
#ifndef APP_WRAPPER_FOR_arch_show_interrupts
#define APP_WRAPPER_FOR_arch_show_interrupts
FUNCTION_WRAPPER(arch_show_interrupts, (struct seq_file *p, int prec), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("arch_show_interrupts is invoked.\n");
    PRE_WRAPPER_FUNC(p, prec);
    int ret = arch_show_interrupts(p, prec);
    POST_WRAPPER_FUNC(p, prec);
    kern_printk("arch_show_interrupts returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(p)));
    return ret;
})
#endif


#ifndef KERN_ADDR_init_buffer
#define APP_WRAPPER_FOR_init_buffer
#endif
 
#ifndef APP_WRAPPER_FOR_init_buffer
#define APP_WRAPPER_FOR_init_buffer
FUNCTION_WRAPPER_VOID(init_buffer, (struct buffer_head *_arg1, bh_end_io_t *_arg2, void *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_FUNCTION(_arg2);
    kern_printk("init_buffer is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    init_buffer(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("init_buffer returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_blk_init_allocated_queue
#define APP_WRAPPER_FOR_blk_init_allocated_queue
#endif
 
#ifndef APP_WRAPPER_FOR_blk_init_allocated_queue
#define APP_WRAPPER_FOR_blk_init_allocated_queue
FUNCTION_WRAPPER(blk_init_allocated_queue, (struct request_queue *_arg1, request_fn_proc *_arg2, spinlock_t *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_FUNCTION(_arg2);
    kern_printk("blk_init_allocated_queue is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    struct request_queue *ret = blk_init_allocated_queue(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("blk_init_allocated_queue returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_kernel_setsockopt
#define APP_WRAPPER_FOR_kernel_setsockopt
#endif
 
#ifndef APP_WRAPPER_FOR_kernel_setsockopt
#define APP_WRAPPER_FOR_kernel_setsockopt
FUNCTION_WRAPPER(kernel_setsockopt, (struct socket *sock, int level, int optname, char *optval, unsigned int optlen), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    kern_printk("kernel_setsockopt is invoked.\n");
    PRE_WRAPPER_FUNC(sock, level, optname, optval, optlen);
    int ret = kernel_setsockopt(sock, level, optname, optval, optlen);
    POST_WRAPPER_FUNC(sock, level, optname, optval, optlen);
    kern_printk("kernel_setsockopt returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    return ret;
})
#endif


#ifndef KERN_ADDR_rb_next
#define APP_WRAPPER_FOR_rb_next
#endif
 
#ifndef APP_WRAPPER_FOR_rb_next
#define APP_WRAPPER_FOR_rb_next
FUNCTION_WRAPPER(rb_next, (const struct rb_node *_arg1), {
    kern_printk("rb_next is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct rb_node *ret = rb_next(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("rb_next returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_bmdma_setup
#define APP_WRAPPER_FOR_ata_bmdma_setup
#endif
 
#ifndef APP_WRAPPER_FOR_ata_bmdma_setup
#define APP_WRAPPER_FOR_ata_bmdma_setup
FUNCTION_WRAPPER_VOID(ata_bmdma_setup, (struct ata_queued_cmd *qc), {
    WRAP_RECURSIVE(qc);
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    kern_printk("ata_bmdma_setup is invoked.\n");
    PRE_WRAPPER_FUNC(qc);
    ata_bmdma_setup(qc);
    POST_WRAPPER_FUNC(qc);
    kern_printk("ata_bmdma_setup returned.\n");
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
})
#endif


#ifndef KERN_ADDR_sock_enable_timestamp
#define APP_WRAPPER_FOR_sock_enable_timestamp
#endif
 
#ifndef APP_WRAPPER_FOR_sock_enable_timestamp
#define APP_WRAPPER_FOR_sock_enable_timestamp
FUNCTION_WRAPPER_VOID(sock_enable_timestamp, (struct sock *sk, int flag), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sock_enable_timestamp is invoked.\n");
    PRE_WRAPPER_FUNC(sk, flag);
    sock_enable_timestamp(sk, flag);
    POST_WRAPPER_FUNC(sk, flag);
    kern_printk("sock_enable_timestamp returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR_acpi_bus_start
#define APP_WRAPPER_FOR_acpi_bus_start
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_bus_start
#define APP_WRAPPER_FOR_acpi_bus_start
FUNCTION_WRAPPER(acpi_bus_start, (struct acpi_device *device), {
    WRAP_RECURSIVE(device);
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(device)));
    kern_printk("acpi_bus_start is invoked.\n");
    PRE_WRAPPER_FUNC(device);
    int ret = acpi_bus_start(device);
    POST_WRAPPER_FUNC(device);
    kern_printk("acpi_bus_start returned.\n");
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(device)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sata_sff_hardreset
#define APP_WRAPPER_FOR_sata_sff_hardreset
#endif
 
#ifndef APP_WRAPPER_FOR_sata_sff_hardreset
#define APP_WRAPPER_FOR_sata_sff_hardreset
FUNCTION_WRAPPER(sata_sff_hardreset, (struct ata_link *link, unsigned int *class_, unsigned long deadline), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    kern_printk("sata_sff_hardreset is invoked.\n");
    PRE_WRAPPER_FUNC(link, class_, deadline);
    int ret = sata_sff_hardreset(link, class_, deadline);
    POST_WRAPPER_FUNC(link, class_, deadline);
    kern_printk("sata_sff_hardreset returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    return ret;
})
#endif


#ifndef KERN_ADDR_csum_ipv6_magic
#define APP_WRAPPER_FOR_csum_ipv6_magic
#endif
 
#ifndef APP_WRAPPER_FOR_csum_ipv6_magic
#define APP_WRAPPER_FOR_csum_ipv6_magic
FUNCTION_WRAPPER(csum_ipv6_magic, (const struct in6_addr *saddr, const struct in6_addr *daddr, __u32 len, unsigned short proto, __wsum sum), {
    kern_printk("csum_ipv6_magic is invoked.\n");
    PRE_WRAPPER_FUNC(saddr, daddr, len, proto, sum);
    __sum16 ret = csum_ipv6_magic(saddr, daddr, len, proto, sum);
    POST_WRAPPER_FUNC(saddr, daddr, len, proto, sum);
    kern_printk("csum_ipv6_magic returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_create_semaphore
#define APP_WRAPPER_FOR_acpi_os_create_semaphore
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_create_semaphore
#define APP_WRAPPER_FOR_acpi_os_create_semaphore
FUNCTION_WRAPPER(acpi_os_create_semaphore, (u32 max_units, u32 initial_units, void **out_handle), {
    kern_printk("acpi_os_create_semaphore is invoked.\n");
    PRE_WRAPPER_FUNC(max_units, initial_units, out_handle);
    acpi_status ret = acpi_os_create_semaphore(max_units, initial_units, out_handle);
    POST_WRAPPER_FUNC(max_units, initial_units, out_handle);
    kern_printk("acpi_os_create_semaphore returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_load_tables
#define APP_WRAPPER_FOR_acpi_load_tables
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_load_tables
#define APP_WRAPPER_FOR_acpi_load_tables
FUNCTION_WRAPPER(acpi_load_tables, (), {
    kern_printk("acpi_load_tables is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_status ret = acpi_load_tables();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_load_tables returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_exportfs_encode_fh
#define APP_WRAPPER_FOR_exportfs_encode_fh
#endif
 
#ifndef APP_WRAPPER_FOR_exportfs_encode_fh
#define APP_WRAPPER_FOR_exportfs_encode_fh
FUNCTION_WRAPPER(exportfs_encode_fh, (struct dentry *dentry, struct fid *fid, int *max_len, int connectable), {
    WRAP_RECURSIVE(dentry);
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    kern_printk("exportfs_encode_fh is invoked.\n");
    PRE_WRAPPER_FUNC(dentry, fid, max_len, connectable);
    int ret = exportfs_encode_fh(dentry, fid, max_len, connectable);
    POST_WRAPPER_FUNC(dentry, fid, max_len, connectable);
    kern_printk("exportfs_encode_fh returned.\n");
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bdevname
#define APP_WRAPPER_FOR_bdevname
#endif
 
#ifndef APP_WRAPPER_FOR_bdevname
#define APP_WRAPPER_FOR_bdevname
FUNCTION_WRAPPER(bdevname, (struct block_device *bdev, char *buffer), {
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    kern_printk("bdevname is invoked.\n");
    PRE_WRAPPER_FUNC(bdev, buffer);
    const char *ret = bdevname(bdev, buffer);
    POST_WRAPPER_FUNC(bdev, buffer);
    kern_printk("bdevname returned.\n");
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_smp_setup_processor_id
#define APP_WRAPPER_FOR_smp_setup_processor_id
#endif
 
#ifndef APP_WRAPPER_FOR_smp_setup_processor_id
#define APP_WRAPPER_FOR_smp_setup_processor_id
FUNCTION_WRAPPER_VOID(smp_setup_processor_id, (), {
    kern_printk("smp_setup_processor_id is invoked.\n");
    PRE_WRAPPER_FUNC();
    smp_setup_processor_id();
    POST_WRAPPER_FUNC();
    kern_printk("smp_setup_processor_id returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_resources_are_enforced
#define APP_WRAPPER_FOR_acpi_resources_are_enforced
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_resources_are_enforced
#define APP_WRAPPER_FOR_acpi_resources_are_enforced
FUNCTION_WRAPPER(acpi_resources_are_enforced, (), {
    kern_printk("acpi_resources_are_enforced is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = acpi_resources_are_enforced();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_resources_are_enforced returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_csum_partial_copy_from_user
#define APP_WRAPPER_FOR_csum_partial_copy_from_user
#endif
 
#ifndef APP_WRAPPER_FOR_csum_partial_copy_from_user
#define APP_WRAPPER_FOR_csum_partial_copy_from_user
FUNCTION_WRAPPER(csum_partial_copy_from_user, (const void *src, void *dst, int len, __wsum isum, int *errp), {
    kern_printk("csum_partial_copy_from_user is invoked.\n");
    PRE_WRAPPER_FUNC(src, dst, len, isum, errp);
    __wsum ret = csum_partial_copy_from_user(src, dst, len, isum, errp);
    POST_WRAPPER_FUNC(src, dst, len, isum, errp);
    kern_printk("csum_partial_copy_from_user returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_proto_register
#define APP_WRAPPER_FOR_proto_register
#endif
 
#ifndef APP_WRAPPER_FOR_proto_register
#define APP_WRAPPER_FOR_proto_register
FUNCTION_WRAPPER(proto_register, (struct proto *prot, int alloc_slab), {
    WRAP_RECURSIVE(prot);
    TRACES_IF_WATCHPOINT(prot);
    SCAN_HEAD_FUNC(struct proto)(*(TO_UNWATCHED_ADDRESS(prot)));
    kern_printk("proto_register is invoked.\n");
    PRE_WRAPPER_FUNC(prot, alloc_slab);
    int ret = proto_register(prot, alloc_slab);
    POST_WRAPPER_FUNC(prot, alloc_slab);
    kern_printk("proto_register returned.\n");
    TRACES_IF_WATCHPOINT(prot);
    SCAN_HEAD_FUNC(struct proto)(*(TO_UNWATCHED_ADDRESS(prot)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_dev_resource_memory
#define APP_WRAPPER_FOR_acpi_dev_resource_memory
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_dev_resource_memory
#define APP_WRAPPER_FOR_acpi_dev_resource_memory
FUNCTION_WRAPPER(acpi_dev_resource_memory, (struct acpi_resource *ares, struct resource *res), {
    kern_printk("acpi_dev_resource_memory is invoked.\n");
    PRE_WRAPPER_FUNC(ares, res);
    bool ret = acpi_dev_resource_memory(ares, res);
    POST_WRAPPER_FUNC(ares, res);
    kern_printk("acpi_dev_resource_memory returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___delete_from_swap_cache
#define APP_WRAPPER_FOR___delete_from_swap_cache
#endif
 
#ifndef APP_WRAPPER_FOR___delete_from_swap_cache
#define APP_WRAPPER_FOR___delete_from_swap_cache
FUNCTION_WRAPPER_VOID(__delete_from_swap_cache, (struct page *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__delete_from_swap_cache is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    __delete_from_swap_cache(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__delete_from_swap_cache returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_log_buf_kexec_setup
#define APP_WRAPPER_FOR_log_buf_kexec_setup
#endif
 
#ifndef APP_WRAPPER_FOR_log_buf_kexec_setup
#define APP_WRAPPER_FOR_log_buf_kexec_setup
FUNCTION_WRAPPER_VOID(log_buf_kexec_setup, (), {
    kern_printk("log_buf_kexec_setup is invoked.\n");
    PRE_WRAPPER_FUNC();
    log_buf_kexec_setup();
    POST_WRAPPER_FUNC();
    kern_printk("log_buf_kexec_setup returned.\n");
})
#endif


#ifndef KERN_ADDR_vector_used_by_percpu_irq
#define APP_WRAPPER_FOR_vector_used_by_percpu_irq
#endif
 
#ifndef APP_WRAPPER_FOR_vector_used_by_percpu_irq
#define APP_WRAPPER_FOR_vector_used_by_percpu_irq
FUNCTION_WRAPPER(vector_used_by_percpu_irq, (unsigned int vector), {
    kern_printk("vector_used_by_percpu_irq is invoked.\n");
    PRE_WRAPPER_FUNC(vector);
    int ret = vector_used_by_percpu_irq(vector);
    POST_WRAPPER_FUNC(vector);
    kern_printk("vector_used_by_percpu_irq returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_elv_rb_find
#define APP_WRAPPER_FOR_elv_rb_find
#endif
 
#ifndef APP_WRAPPER_FOR_elv_rb_find
#define APP_WRAPPER_FOR_elv_rb_find
FUNCTION_WRAPPER(elv_rb_find, (struct rb_root *_arg1, sector_t _arg2), {
    kern_printk("elv_rb_find is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct request *ret = elv_rb_find(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("elv_rb_find returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_release
#define APP_WRAPPER_FOR_sock_release
#endif
 
#ifndef APP_WRAPPER_FOR_sock_release
#define APP_WRAPPER_FOR_sock_release
FUNCTION_WRAPPER_VOID(sock_release, (struct socket *sock), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    kern_printk("sock_release is invoked.\n");
    PRE_WRAPPER_FUNC(sock);
    sock_release(sock);
    POST_WRAPPER_FUNC(sock);
    kern_printk("sock_release returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
})
#endif


#ifndef KERN_ADDR_ioctl_by_bdev
#define APP_WRAPPER_FOR_ioctl_by_bdev
#endif
 
#ifndef APP_WRAPPER_FOR_ioctl_by_bdev
#define APP_WRAPPER_FOR_ioctl_by_bdev
FUNCTION_WRAPPER(ioctl_by_bdev, (struct block_device *_arg1, unsigned int _arg2, unsigned long _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("ioctl_by_bdev is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = ioctl_by_bdev(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("ioctl_by_bdev returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_wakeup_flusher_threads
#define APP_WRAPPER_FOR_wakeup_flusher_threads
#endif
 
#ifndef APP_WRAPPER_FOR_wakeup_flusher_threads
#define APP_WRAPPER_FOR_wakeup_flusher_threads
FUNCTION_WRAPPER_VOID(wakeup_flusher_threads, (long nr_pages, enum wb_reason reason), {
    kern_printk("wakeup_flusher_threads is invoked.\n");
    PRE_WRAPPER_FUNC(nr_pages, reason);
    wakeup_flusher_threads(nr_pages, reason);
    POST_WRAPPER_FUNC(nr_pages, reason);
    kern_printk("wakeup_flusher_threads returned.\n");
})
#endif


#ifndef KERN_ADDR_memcmp
#define APP_WRAPPER_FOR_memcmp
#endif
 
#ifndef APP_WRAPPER_FOR_memcmp
#define APP_WRAPPER_FOR_memcmp
FUNCTION_WRAPPER(memcmp, (const void *_arg1, const void *_arg2, __kernel_size_t _arg3), {
    kern_printk("memcmp is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = memcmp(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("memcmp returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dquot_scan_active
#define APP_WRAPPER_FOR_dquot_scan_active
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_scan_active
#define APP_WRAPPER_FOR_dquot_scan_active
FUNCTION_WRAPPER(dquot_scan_active, (struct super_block *sb, int (*fn)(struct dquot *, unsigned long), unsigned long priv), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    WRAP_FUNCTION(fn);
    kern_printk("dquot_scan_active is invoked.\n");
    PRE_WRAPPER_FUNC(sb, fn, priv);
    int ret = dquot_scan_active(sb, fn, priv);
    POST_WRAPPER_FUNC(sb, fn, priv);
    kern_printk("dquot_scan_active returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_bus_can_wakeup
#define APP_WRAPPER_FOR_acpi_bus_can_wakeup
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_bus_can_wakeup
#define APP_WRAPPER_FOR_acpi_bus_can_wakeup
FUNCTION_WRAPPER(acpi_bus_can_wakeup, (acpi_handle handle), {
    kern_printk("acpi_bus_can_wakeup is invoked.\n");
    PRE_WRAPPER_FUNC(handle);
    bool ret = acpi_bus_can_wakeup(handle);
    POST_WRAPPER_FUNC(handle);
    kern_printk("acpi_bus_can_wakeup returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_do_sync_read
#define APP_WRAPPER_FOR_do_sync_read
#endif
 
#ifndef APP_WRAPPER_FOR_do_sync_read
#define APP_WRAPPER_FOR_do_sync_read
FUNCTION_WRAPPER(do_sync_read, (struct file *filp, char *buf, size_t len, loff_t *ppos), {
    WRAP_RECURSIVE(filp);
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    kern_printk("do_sync_read is invoked.\n");
    PRE_WRAPPER_FUNC(filp, buf, len, ppos);
    ssize_t ret = do_sync_read(filp, buf, len, ppos);
    POST_WRAPPER_FUNC(filp, buf, len, ppos);
    kern_printk("do_sync_read returned.\n");
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_copy_and_csum_dev
#define APP_WRAPPER_FOR_skb_copy_and_csum_dev
#endif
 
#ifndef APP_WRAPPER_FOR_skb_copy_and_csum_dev
#define APP_WRAPPER_FOR_skb_copy_and_csum_dev
FUNCTION_WRAPPER_VOID(skb_copy_and_csum_dev, (const struct sk_buff *skb, u8 *to), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(const struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_copy_and_csum_dev is invoked.\n");
    PRE_WRAPPER_FUNC(skb, to);
    skb_copy_and_csum_dev(skb, to);
    POST_WRAPPER_FUNC(skb, to);
    kern_printk("skb_copy_and_csum_dev returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(const struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_input_register_handle
#define APP_WRAPPER_FOR_input_register_handle
#endif
 
#ifndef APP_WRAPPER_FOR_input_register_handle
#define APP_WRAPPER_FOR_input_register_handle
FUNCTION_WRAPPER(input_register_handle, (struct input_handle *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct input_handle)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("input_register_handle is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = input_register_handle(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("input_register_handle returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct input_handle)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_swapfile_activate
#define APP_WRAPPER_FOR_generic_swapfile_activate
#endif
 
#ifndef APP_WRAPPER_FOR_generic_swapfile_activate
#define APP_WRAPPER_FOR_generic_swapfile_activate
FUNCTION_WRAPPER(generic_swapfile_activate, (struct swap_info_struct *_arg1, struct file *_arg2, sector_t *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct swap_info_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("generic_swapfile_activate is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = generic_swapfile_activate(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("generic_swapfile_activate returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct swap_info_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bus_unregister_notifier
#define APP_WRAPPER_FOR_bus_unregister_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_bus_unregister_notifier
#define APP_WRAPPER_FOR_bus_unregister_notifier
FUNCTION_WRAPPER(bus_unregister_notifier, (struct bus_type *bus, struct notifier_block *nb), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    WRAP_RECURSIVE(nb);
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    kern_printk("bus_unregister_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(bus, nb);
    int ret = bus_unregister_notifier(bus, nb);
    POST_WRAPPER_FUNC(bus, nb);
    kern_printk("bus_unregister_notifier returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_memparse
#define APP_WRAPPER_FOR_memparse
#endif
 
#ifndef APP_WRAPPER_FOR_memparse
#define APP_WRAPPER_FOR_memparse
FUNCTION_WRAPPER(memparse, (const char *ptr, char **retptr), {
    kern_printk("memparse is invoked.\n");
    PRE_WRAPPER_FUNC(ptr, retptr);
    long long ret = memparse(ptr, retptr);
    POST_WRAPPER_FUNC(ptr, retptr);
    kern_printk("memparse returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_devres_destroy
#define APP_WRAPPER_FOR_devres_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_devres_destroy
#define APP_WRAPPER_FOR_devres_destroy
FUNCTION_WRAPPER(devres_destroy, (struct device *dev, dr_release_t release, dr_match_t match, void *match_data), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_FUNCTION(release);
    WRAP_FUNCTION(match);
    kern_printk("devres_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(dev, release, match, match_data);
    int ret = devres_destroy(dev, release, match, match_data);
    POST_WRAPPER_FUNC(dev, release, match, match_data);
    kern_printk("devres_destroy returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vunmap
#define APP_WRAPPER_FOR_vunmap
#endif
 
#ifndef APP_WRAPPER_FOR_vunmap
#define APP_WRAPPER_FOR_vunmap
FUNCTION_WRAPPER_VOID(vunmap, (const void *addr), {
    kern_printk("vunmap is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    vunmap(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("vunmap returned.\n");
})
#endif


#ifndef KERN_ADDR_global_reclaimable_pages
#define APP_WRAPPER_FOR_global_reclaimable_pages
#endif
 
#ifndef APP_WRAPPER_FOR_global_reclaimable_pages
#define APP_WRAPPER_FOR_global_reclaimable_pages
FUNCTION_WRAPPER(global_reclaimable_pages, (), {
    kern_printk("global_reclaimable_pages is invoked.\n");
    PRE_WRAPPER_FUNC();
    long ret = global_reclaimable_pages();
    POST_WRAPPER_FUNC();
    kern_printk("global_reclaimable_pages returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_copy_page
#define APP_WRAPPER_FOR_copy_page
#endif
 
#ifndef APP_WRAPPER_FOR_copy_page
#define APP_WRAPPER_FOR_copy_page
FUNCTION_WRAPPER_VOID(copy_page, (void *to, void *from), {
    kern_printk("copy_page is invoked.\n");
    PRE_WRAPPER_FUNC(to, from);
    copy_page(to, from);
    POST_WRAPPER_FUNC(to, from);
    kern_printk("copy_page returned.\n");
})
#endif


#ifndef KERN_ADDR_apic_set_eoi_write
#define APP_WRAPPER_FOR_apic_set_eoi_write
#endif
 
#ifndef APP_WRAPPER_FOR_apic_set_eoi_write
#define APP_WRAPPER_FOR_apic_set_eoi_write
FUNCTION_WRAPPER_VOID(apic_set_eoi_write, (void (*eoi_write)(u32, u32)), {
    WRAP_FUNCTION(eoi_write);
    kern_printk("apic_set_eoi_write is invoked.\n");
    PRE_WRAPPER_FUNC(eoi_write);
    apic_set_eoi_write(eoi_write);
    POST_WRAPPER_FUNC(eoi_write);
    kern_printk("apic_set_eoi_write returned.\n");
})
#endif


#ifndef KERN_ADDR_pcie_capability_write_word
#define APP_WRAPPER_FOR_pcie_capability_write_word
#endif
 
#ifndef APP_WRAPPER_FOR_pcie_capability_write_word
#define APP_WRAPPER_FOR_pcie_capability_write_word
FUNCTION_WRAPPER(pcie_capability_write_word, (struct pci_dev *dev, int pos, u16 val), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pcie_capability_write_word is invoked.\n");
    PRE_WRAPPER_FUNC(dev, pos, val);
    int ret = pcie_capability_write_word(dev, pos, val);
    POST_WRAPPER_FUNC(dev, pos, val);
    kern_printk("pcie_capability_write_word returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_wait_for_completion_interruptible_timeout
#define APP_WRAPPER_FOR_wait_for_completion_interruptible_timeout
#endif
 
#ifndef APP_WRAPPER_FOR_wait_for_completion_interruptible_timeout
#define APP_WRAPPER_FOR_wait_for_completion_interruptible_timeout
FUNCTION_WRAPPER(wait_for_completion_interruptible_timeout, (struct completion *x, unsigned long timeout), {
    kern_printk("wait_for_completion_interruptible_timeout is invoked.\n");
    PRE_WRAPPER_FUNC(x, timeout);
    long ret = wait_for_completion_interruptible_timeout(x, timeout);
    POST_WRAPPER_FUNC(x, timeout);
    kern_printk("wait_for_completion_interruptible_timeout returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_group_send_sig_info
#define APP_WRAPPER_FOR_group_send_sig_info
#endif
 
#ifndef APP_WRAPPER_FOR_group_send_sig_info
#define APP_WRAPPER_FOR_group_send_sig_info
FUNCTION_WRAPPER(group_send_sig_info, (int sig, struct siginfo *info, struct task_struct *p), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("group_send_sig_info is invoked.\n");
    PRE_WRAPPER_FUNC(sig, info, p);
    int ret = group_send_sig_info(sig, info, p);
    POST_WRAPPER_FUNC(sig, info, p);
    kern_printk("group_send_sig_info returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    return ret;
})
#endif


#ifndef KERN_ADDR_uids_sysfs_init
#define APP_WRAPPER_FOR_uids_sysfs_init
#endif
 
#ifndef APP_WRAPPER_FOR_uids_sysfs_init
#define APP_WRAPPER_FOR_uids_sysfs_init
FUNCTION_WRAPPER(uids_sysfs_init, (), {
    kern_printk("uids_sysfs_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = uids_sysfs_init();
    POST_WRAPPER_FUNC();
    kern_printk("uids_sysfs_init returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_param_set_short
#define APP_WRAPPER_FOR_param_set_short
#endif
 
#ifndef APP_WRAPPER_FOR_param_set_short
#define APP_WRAPPER_FOR_param_set_short
FUNCTION_WRAPPER(param_set_short, (const char *val, const struct kernel_param *kp), {
    WRAP_RECURSIVE(kp);
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    kern_printk("param_set_short is invoked.\n");
    PRE_WRAPPER_FUNC(val, kp);
    int ret = param_set_short(val, kp);
    POST_WRAPPER_FUNC(val, kp);
    kern_printk("param_set_short returned.\n");
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_fasync_remove_entry
#define APP_WRAPPER_FOR_fasync_remove_entry
#endif
 
#ifndef APP_WRAPPER_FOR_fasync_remove_entry
#define APP_WRAPPER_FOR_fasync_remove_entry
FUNCTION_WRAPPER(fasync_remove_entry, (struct file *_arg1, struct fasync_struct **_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct fasync_struct *)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("fasync_remove_entry is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = fasync_remove_entry(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("fasync_remove_entry returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct fasync_struct *)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_get_option
#define APP_WRAPPER_FOR_get_option
#endif
 
#ifndef APP_WRAPPER_FOR_get_option
#define APP_WRAPPER_FOR_get_option
FUNCTION_WRAPPER(get_option, (char **str, int *pint), {
    kern_printk("get_option is invoked.\n");
    PRE_WRAPPER_FUNC(str, pint);
    int ret = get_option(str, pint);
    POST_WRAPPER_FUNC(str, pint);
    kern_printk("get_option returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_get_id
#define APP_WRAPPER_FOR_acpi_get_id
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_id
#define APP_WRAPPER_FOR_acpi_get_id
FUNCTION_WRAPPER(acpi_get_id, (acpi_handle object, acpi_owner_id *out_type), {
    kern_printk("acpi_get_id is invoked.\n");
    PRE_WRAPPER_FUNC(object, out_type);
    acpi_status ret = acpi_get_id(object, out_type);
    POST_WRAPPER_FUNC(object, out_type);
    kern_printk("acpi_get_id returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ns_to_timespec
#define APP_WRAPPER_FOR_ns_to_timespec
#endif
 
#ifndef APP_WRAPPER_FOR_ns_to_timespec
#define APP_WRAPPER_FOR_ns_to_timespec
FUNCTION_WRAPPER(ns_to_timespec, (const s64 nsec), {
    kern_printk("ns_to_timespec is invoked.\n");
    PRE_WRAPPER_FUNC(nsec);
    struct timespec ret = ns_to_timespec(nsec);
    POST_WRAPPER_FUNC(nsec);
    kern_printk("ns_to_timespec returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sysfs_schedule_callback
#define APP_WRAPPER_FOR_sysfs_schedule_callback
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_schedule_callback
#define APP_WRAPPER_FOR_sysfs_schedule_callback
FUNCTION_WRAPPER(sysfs_schedule_callback, (struct kobject *kobj, void (*func)(void *), void *data, struct module *owner), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    WRAP_FUNCTION(func);
    WRAP_RECURSIVE(owner);
    TRACES_IF_WATCHPOINT(owner);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(owner)));
    kern_printk("sysfs_schedule_callback is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, func, data, owner);
    int ret = sysfs_schedule_callback(kobj, func, data, owner);
    POST_WRAPPER_FUNC(kobj, func, data, owner);
    kern_printk("sysfs_schedule_callback returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    TRACES_IF_WATCHPOINT(owner);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(owner)));
    return ret;
})
#endif


#ifndef KERN_ADDR_elv_rb_former_request
#define APP_WRAPPER_FOR_elv_rb_former_request
#endif
 
#ifndef APP_WRAPPER_FOR_elv_rb_former_request
#define APP_WRAPPER_FOR_elv_rb_former_request
FUNCTION_WRAPPER(elv_rb_former_request, (struct request_queue *_arg1, struct request *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("elv_rb_former_request is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct request *ret = elv_rb_former_request(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("elv_rb_former_request returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_textsearch_unregister
#define APP_WRAPPER_FOR_textsearch_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_textsearch_unregister
#define APP_WRAPPER_FOR_textsearch_unregister
FUNCTION_WRAPPER(textsearch_unregister, (struct ts_ops *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ts_ops)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("textsearch_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = textsearch_unregister(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("textsearch_unregister returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ts_ops)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_segment
#define APP_WRAPPER_FOR_skb_segment
#endif
 
#ifndef APP_WRAPPER_FOR_skb_segment
#define APP_WRAPPER_FOR_skb_segment
FUNCTION_WRAPPER(skb_segment, (struct sk_buff *skb, netdev_features_t features), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_segment is invoked.\n");
    PRE_WRAPPER_FUNC(skb, features);
    struct sk_buff *ret = skb_segment(skb, features);
    POST_WRAPPER_FUNC(skb, features);
    kern_printk("skb_segment returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sparse_init
#define APP_WRAPPER_FOR_sparse_init
#endif
 
#ifndef APP_WRAPPER_FOR_sparse_init
#define APP_WRAPPER_FOR_sparse_init
FUNCTION_WRAPPER_VOID(sparse_init, (), {
    kern_printk("sparse_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    sparse_init();
    POST_WRAPPER_FUNC();
    kern_printk("sparse_init returned.\n");
})
#endif


#ifndef KERN_ADDR_elv_merge_requests
#define APP_WRAPPER_FOR_elv_merge_requests
#endif
 
#ifndef APP_WRAPPER_FOR_elv_merge_requests
#define APP_WRAPPER_FOR_elv_merge_requests
FUNCTION_WRAPPER_VOID(elv_merge_requests, (struct request_queue *_arg1, struct request *_arg2, struct request *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("elv_merge_requests is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    elv_merge_requests(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("elv_merge_requests returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg3)));
})
#endif


#ifndef KERN_ADDR_add_timer_on
#define APP_WRAPPER_FOR_add_timer_on
#endif
 
#ifndef APP_WRAPPER_FOR_add_timer_on
#define APP_WRAPPER_FOR_add_timer_on
FUNCTION_WRAPPER_VOID(add_timer_on, (struct timer_list *timer, int cpu), {
    WRAP_RECURSIVE(timer);
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(timer)));
    kern_printk("add_timer_on is invoked.\n");
    PRE_WRAPPER_FUNC(timer, cpu);
    add_timer_on(timer, cpu);
    POST_WRAPPER_FUNC(timer, cpu);
    kern_printk("add_timer_on returned.\n");
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(timer)));
})
#endif


#ifndef KERN_ADDR_neigh_lookup_nodev
#define APP_WRAPPER_FOR_neigh_lookup_nodev
#endif
 
#ifndef APP_WRAPPER_FOR_neigh_lookup_nodev
#define APP_WRAPPER_FOR_neigh_lookup_nodev
FUNCTION_WRAPPER(neigh_lookup_nodev, (struct neigh_table *tbl, struct net *net, const void *pkey), {
    WRAP_RECURSIVE(tbl);
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    kern_printk("neigh_lookup_nodev is invoked.\n");
    PRE_WRAPPER_FUNC(tbl, net, pkey);
    struct neighbour *ret = neigh_lookup_nodev(tbl, net, pkey);
    POST_WRAPPER_FUNC(tbl, net, pkey);
    kern_printk("neigh_lookup_nodev returned.\n");
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_register_sysctl_paths
#define APP_WRAPPER_FOR_register_sysctl_paths
#endif
 
#ifndef APP_WRAPPER_FOR_register_sysctl_paths
#define APP_WRAPPER_FOR_register_sysctl_paths
FUNCTION_WRAPPER(register_sysctl_paths, (const struct ctl_path *path, struct ctl_table *table), {
    WRAP_RECURSIVE(table);
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    kern_printk("register_sysctl_paths is invoked.\n");
    PRE_WRAPPER_FUNC(path, table);
    struct ctl_table_header *ret = register_sysctl_paths(path, table);
    POST_WRAPPER_FUNC(path, table);
    kern_printk("register_sysctl_paths returned.\n");
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_bh_waitq_head
#define APP_WRAPPER_FOR_bh_waitq_head
#endif
 
#ifndef APP_WRAPPER_FOR_bh_waitq_head
#define APP_WRAPPER_FOR_bh_waitq_head
FUNCTION_WRAPPER(bh_waitq_head, (struct buffer_head *bh), {
    WRAP_RECURSIVE(bh);
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    kern_printk("bh_waitq_head is invoked.\n");
    PRE_WRAPPER_FUNC(bh);
    wait_queue_head_t *ret = bh_waitq_head(bh);
    POST_WRAPPER_FUNC(bh);
    kern_printk("bh_waitq_head returned.\n");
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_pme_active
#define APP_WRAPPER_FOR_pci_pme_active
#endif
 
#ifndef APP_WRAPPER_FOR_pci_pme_active
#define APP_WRAPPER_FOR_pci_pme_active
FUNCTION_WRAPPER_VOID(pci_pme_active, (struct pci_dev *dev, bool enable), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_pme_active is invoked.\n");
    PRE_WRAPPER_FUNC(dev, enable);
    pci_pme_active(dev, enable);
    POST_WRAPPER_FUNC(dev, enable);
    kern_printk("pci_pme_active returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_prop_fraction_single
#define APP_WRAPPER_FOR_prop_fraction_single
#endif
 
#ifndef APP_WRAPPER_FOR_prop_fraction_single
#define APP_WRAPPER_FOR_prop_fraction_single
FUNCTION_WRAPPER_VOID(prop_fraction_single, (struct prop_descriptor *pd, struct prop_local_single *pl, long *numerator, long *denominator), {
    WRAP_RECURSIVE(pd);
    TRACES_IF_WATCHPOINT(pd);
    SCAN_HEAD_FUNC(struct prop_descriptor)(*(TO_UNWATCHED_ADDRESS(pd)));
    kern_printk("prop_fraction_single is invoked.\n");
    PRE_WRAPPER_FUNC(pd, pl, numerator, denominator);
    prop_fraction_single(pd, pl, numerator, denominator);
    POST_WRAPPER_FUNC(pd, pl, numerator, denominator);
    kern_printk("prop_fraction_single returned.\n");
    TRACES_IF_WATCHPOINT(pd);
    SCAN_HEAD_FUNC(struct prop_descriptor)(*(TO_UNWATCHED_ADDRESS(pd)));
})
#endif


#ifndef KERN_ADDR_tick_init
#define APP_WRAPPER_FOR_tick_init
#endif
 
#ifndef APP_WRAPPER_FOR_tick_init
#define APP_WRAPPER_FOR_tick_init
FUNCTION_WRAPPER_VOID(tick_init, (), {
    kern_printk("tick_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    tick_init();
    POST_WRAPPER_FUNC();
    kern_printk("tick_init returned.\n");
})
#endif


#ifndef KERN_ADDR___root_device_register
#define APP_WRAPPER_FOR___root_device_register
#endif
 
#ifndef APP_WRAPPER_FOR___root_device_register
#define APP_WRAPPER_FOR___root_device_register
FUNCTION_WRAPPER(__root_device_register, (const char *name, struct module *owner), {
    WRAP_RECURSIVE(owner);
    TRACES_IF_WATCHPOINT(owner);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(owner)));
    kern_printk("__root_device_register is invoked.\n");
    PRE_WRAPPER_FUNC(name, owner);
    struct device *ret = __root_device_register(name, owner);
    POST_WRAPPER_FUNC(name, owner);
    kern_printk("__root_device_register returned.\n");
    TRACES_IF_WATCHPOINT(owner);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(owner)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_grab_journal_head
#define APP_WRAPPER_FOR_jbd2_journal_grab_journal_head
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_grab_journal_head
#define APP_WRAPPER_FOR_jbd2_journal_grab_journal_head
FUNCTION_WRAPPER(jbd2_journal_grab_journal_head, (struct buffer_head *bh), {
    WRAP_RECURSIVE(bh);
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    kern_printk("jbd2_journal_grab_journal_head is invoked.\n");
    PRE_WRAPPER_FUNC(bh);
    struct journal_head *ret = jbd2_journal_grab_journal_head(bh);
    POST_WRAPPER_FUNC(bh);
    kern_printk("jbd2_journal_grab_journal_head returned.\n");
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_put_compat_itimerspec
#define APP_WRAPPER_FOR_put_compat_itimerspec
#endif
 
#ifndef APP_WRAPPER_FOR_put_compat_itimerspec
#define APP_WRAPPER_FOR_put_compat_itimerspec
FUNCTION_WRAPPER(put_compat_itimerspec, (struct compat_itimerspec *dst, const struct itimerspec *src), {
    kern_printk("put_compat_itimerspec is invoked.\n");
    PRE_WRAPPER_FUNC(dst, src);
    int ret = put_compat_itimerspec(dst, src);
    POST_WRAPPER_FUNC(dst, src);
    kern_printk("put_compat_itimerspec returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_suspend_lowlevel
#define APP_WRAPPER_FOR_acpi_suspend_lowlevel
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_suspend_lowlevel
#define APP_WRAPPER_FOR_acpi_suspend_lowlevel
FUNCTION_WRAPPER(acpi_suspend_lowlevel, (), {
    kern_printk("acpi_suspend_lowlevel is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = acpi_suspend_lowlevel();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_suspend_lowlevel returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_subsys_find_device_by_id
#define APP_WRAPPER_FOR_subsys_find_device_by_id
#endif
 
#ifndef APP_WRAPPER_FOR_subsys_find_device_by_id
#define APP_WRAPPER_FOR_subsys_find_device_by_id
FUNCTION_WRAPPER(subsys_find_device_by_id, (struct bus_type *bus, unsigned int id, struct device *hint), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    WRAP_RECURSIVE(hint);
    TRACES_IF_WATCHPOINT(hint);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hint)));
    kern_printk("subsys_find_device_by_id is invoked.\n");
    PRE_WRAPPER_FUNC(bus, id, hint);
    struct device *ret = subsys_find_device_by_id(bus, id, hint);
    POST_WRAPPER_FUNC(bus, id, hint);
    kern_printk("subsys_find_device_by_id returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    TRACES_IF_WATCHPOINT(hint);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hint)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_mdiobus_scan
#define APP_WRAPPER_FOR_mdiobus_scan
#endif
 
#ifndef APP_WRAPPER_FOR_mdiobus_scan
#define APP_WRAPPER_FOR_mdiobus_scan
FUNCTION_WRAPPER(mdiobus_scan, (struct mii_bus *bus, int addr), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct mii_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("mdiobus_scan is invoked.\n");
    PRE_WRAPPER_FUNC(bus, addr);
    struct phy_device *ret = mdiobus_scan(bus, addr);
    POST_WRAPPER_FUNC(bus, addr);
    kern_printk("mdiobus_scan returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct mii_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_sriov_set_totalvfs
#define APP_WRAPPER_FOR_pci_sriov_set_totalvfs
#endif
 
#ifndef APP_WRAPPER_FOR_pci_sriov_set_totalvfs
#define APP_WRAPPER_FOR_pci_sriov_set_totalvfs
FUNCTION_WRAPPER(pci_sriov_set_totalvfs, (struct pci_dev *dev, u16 numvfs), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_sriov_set_totalvfs is invoked.\n");
    PRE_WRAPPER_FUNC(dev, numvfs);
    int ret = pci_sriov_set_totalvfs(dev, numvfs);
    POST_WRAPPER_FUNC(dev, numvfs);
    kern_printk("pci_sriov_set_totalvfs returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ramfs_get_inode
#define APP_WRAPPER_FOR_ramfs_get_inode
#endif
 
#ifndef APP_WRAPPER_FOR_ramfs_get_inode
#define APP_WRAPPER_FOR_ramfs_get_inode
FUNCTION_WRAPPER(ramfs_get_inode, (struct super_block *sb, const struct inode *dir, umode_t mode, dev_t dev), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    WRAP_RECURSIVE(dir);
    TRACES_IF_WATCHPOINT(dir);
    SCAN_HEAD_FUNC(const struct inode)(*(TO_UNWATCHED_ADDRESS(dir)));
    kern_printk("ramfs_get_inode is invoked.\n");
    PRE_WRAPPER_FUNC(sb, dir, mode, dev);
    struct inode *ret = ramfs_get_inode(sb, dir, mode, dev);
    POST_WRAPPER_FUNC(sb, dir, mode, dev);
    kern_printk("ramfs_get_inode returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    TRACES_IF_WATCHPOINT(dir);
    SCAN_HEAD_FUNC(const struct inode)(*(TO_UNWATCHED_ADDRESS(dir)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_kern_mount
#define APP_WRAPPER_FOR_vfs_kern_mount
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_kern_mount
#define APP_WRAPPER_FOR_vfs_kern_mount
FUNCTION_WRAPPER(vfs_kern_mount, (struct file_system_type *type, int flags, const char *name, void *data), {
    WRAP_RECURSIVE(type);
    TRACES_IF_WATCHPOINT(type);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(type)));
    kern_printk("vfs_kern_mount is invoked.\n");
    PRE_WRAPPER_FUNC(type, flags, name, data);
    struct vfsmount *ret = vfs_kern_mount(type, flags, name, data);
    POST_WRAPPER_FUNC(type, flags, name, data);
    kern_printk("vfs_kern_mount returned.\n");
    TRACES_IF_WATCHPOINT(type);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(type)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pagecache_write_end
#define APP_WRAPPER_FOR_pagecache_write_end
#endif
 
#ifndef APP_WRAPPER_FOR_pagecache_write_end
#define APP_WRAPPER_FOR_pagecache_write_end
FUNCTION_WRAPPER(pagecache_write_end, (struct file *_arg1, struct address_space *mapping, loff_t pos, unsigned int len, unsigned int copied, struct page *page, void *fsdata), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("pagecache_write_end is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, mapping, pos, len, copied, page, fsdata);
    int ret = pagecache_write_end(_arg1, mapping, pos, len, copied, page, fsdata);
    POST_WRAPPER_FUNC(_arg1, mapping, pos, len, copied, page, fsdata);
    kern_printk("pagecache_write_end returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_start_request
#define APP_WRAPPER_FOR_blk_start_request
#endif
 
#ifndef APP_WRAPPER_FOR_blk_start_request
#define APP_WRAPPER_FOR_blk_start_request
FUNCTION_WRAPPER_VOID(blk_start_request, (struct request *rq), {
    WRAP_RECURSIVE(rq);
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    kern_printk("blk_start_request is invoked.\n");
    PRE_WRAPPER_FUNC(rq);
    blk_start_request(rq);
    POST_WRAPPER_FUNC(rq);
    kern_printk("blk_start_request returned.\n");
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
})
#endif


#ifndef KERN_ADDR_change_huge_pmd
#define APP_WRAPPER_FOR_change_huge_pmd
#endif
 
#ifndef APP_WRAPPER_FOR_change_huge_pmd
#define APP_WRAPPER_FOR_change_huge_pmd
FUNCTION_WRAPPER(change_huge_pmd, (struct vm_area_struct *vma, pmd_t *pmd, unsigned long addr, pgprot_t newprot, int prot_numa), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("change_huge_pmd is invoked.\n");
    PRE_WRAPPER_FUNC(vma, pmd, addr, newprot, prot_numa);
    int ret = change_huge_pmd(vma, pmd, addr, newprot, prot_numa);
    POST_WRAPPER_FUNC(vma, pmd, addr, newprot, prot_numa);
    kern_printk("change_huge_pmd returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_class_find_device
#define APP_WRAPPER_FOR_class_find_device
#endif
 
#ifndef APP_WRAPPER_FOR_class_find_device
#define APP_WRAPPER_FOR_class_find_device
FUNCTION_WRAPPER(class_find_device, (struct class_ *class_, struct device *start, void *data, int (*match)(struct device *, void *)), {
    WRAP_RECURSIVE(class_);
    TRACES_IF_WATCHPOINT(class_);
    SCAN_HEAD_FUNC(struct class_)(*(TO_UNWATCHED_ADDRESS(class_)));
    WRAP_RECURSIVE(start);
    TRACES_IF_WATCHPOINT(start);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(start)));
    WRAP_FUNCTION(match);
    kern_printk("class_find_device is invoked.\n");
    PRE_WRAPPER_FUNC(class_, start, data, match);
    struct device *ret = class_find_device(class_, start, data, match);
    POST_WRAPPER_FUNC(class_, start, data, match);
    kern_printk("class_find_device returned.\n");
    TRACES_IF_WATCHPOINT(class_);
    SCAN_HEAD_FUNC(struct class_)(*(TO_UNWATCHED_ADDRESS(class_)));
    TRACES_IF_WATCHPOINT(start);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(start)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_netdev_err
#define APP_WRAPPER_FOR_netdev_err
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_err
#define APP_WRAPPER_FOR_netdev_err
FUNCTION_WRAPPER(netdev_err, (const struct net_device *dev, const char *format, ...), {
    va_list args__;
    va_start(args__, format);
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    // TODO: variadic arguments
    kern_printk("netdev_err is invoked.\n");
    PRE_WRAPPER_FUNC(dev, format);
    int ret = netdev_err(dev, format);
    POST_WRAPPER_FUNC(dev, format);
    kern_printk("netdev_err returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_follow_phys
#define APP_WRAPPER_FOR_follow_phys
#endif
 
#ifndef APP_WRAPPER_FOR_follow_phys
#define APP_WRAPPER_FOR_follow_phys
FUNCTION_WRAPPER(follow_phys, (struct vm_area_struct *vma, unsigned long address, unsigned int flags, unsigned long *prot, resource_size_t *phys), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("follow_phys is invoked.\n");
    PRE_WRAPPER_FUNC(vma, address, flags, prot, phys);
    int ret = follow_phys(vma, address, flags, prot, phys);
    POST_WRAPPER_FUNC(vma, address, flags, prot, phys);
    kern_printk("follow_phys returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_bus_get_device
#define APP_WRAPPER_FOR_acpi_bus_get_device
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_bus_get_device
#define APP_WRAPPER_FOR_acpi_bus_get_device
FUNCTION_WRAPPER(acpi_bus_get_device, (acpi_handle handle, struct acpi_device **device), {
    WRAP_RECURSIVE(device);
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct acpi_device *)(*(TO_UNWATCHED_ADDRESS(device)));
    kern_printk("acpi_bus_get_device is invoked.\n");
    PRE_WRAPPER_FUNC(handle, device);
    int ret = acpi_bus_get_device(handle, device);
    POST_WRAPPER_FUNC(handle, device);
    kern_printk("acpi_bus_get_device returned.\n");
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct acpi_device *)(*(TO_UNWATCHED_ADDRESS(device)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_addr_flush
#define APP_WRAPPER_FOR_dev_addr_flush
#endif
 
#ifndef APP_WRAPPER_FOR_dev_addr_flush
#define APP_WRAPPER_FOR_dev_addr_flush
FUNCTION_WRAPPER_VOID(dev_addr_flush, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_addr_flush is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    dev_addr_flush(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_addr_flush returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_copy_user_huge_page
#define APP_WRAPPER_FOR_copy_user_huge_page
#endif
 
#ifndef APP_WRAPPER_FOR_copy_user_huge_page
#define APP_WRAPPER_FOR_copy_user_huge_page
FUNCTION_WRAPPER_VOID(copy_user_huge_page, (struct page *dst, struct page *src, unsigned long addr, struct vm_area_struct *vma, unsigned int pages_per_huge_page), {
    WRAP_RECURSIVE(dst);
    TRACES_IF_WATCHPOINT(dst);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(dst)));
    WRAP_RECURSIVE(src);
    TRACES_IF_WATCHPOINT(src);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(src)));
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("copy_user_huge_page is invoked.\n");
    PRE_WRAPPER_FUNC(dst, src, addr, vma, pages_per_huge_page);
    copy_user_huge_page(dst, src, addr, vma, pages_per_huge_page);
    POST_WRAPPER_FUNC(dst, src, addr, vma, pages_per_huge_page);
    kern_printk("copy_user_huge_page returned.\n");
    TRACES_IF_WATCHPOINT(dst);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(dst)));
    TRACES_IF_WATCHPOINT(src);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(src)));
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
})
#endif


#ifndef KERN_ADDR_pm_generic_freeze
#define APP_WRAPPER_FOR_pm_generic_freeze
#endif
 
#ifndef APP_WRAPPER_FOR_pm_generic_freeze
#define APP_WRAPPER_FOR_pm_generic_freeze
FUNCTION_WRAPPER(pm_generic_freeze, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pm_generic_freeze is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pm_generic_freeze(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pm_generic_freeze returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_send_sig
#define APP_WRAPPER_FOR_send_sig
#endif
 
#ifndef APP_WRAPPER_FOR_send_sig
#define APP_WRAPPER_FOR_send_sig
FUNCTION_WRAPPER(send_sig, (int _arg1, struct task_struct *_arg2, int _arg3), {
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("send_sig is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = send_sig(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("send_sig returned.\n");
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_freeze_bdev
#define APP_WRAPPER_FOR_freeze_bdev
#endif
 
#ifndef APP_WRAPPER_FOR_freeze_bdev
#define APP_WRAPPER_FOR_freeze_bdev
FUNCTION_WRAPPER(freeze_bdev, (struct block_device *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("freeze_bdev is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct super_block *ret = freeze_bdev(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("freeze_bdev returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sched_autogroup_fork
#define APP_WRAPPER_FOR_sched_autogroup_fork
#endif
 
#ifndef APP_WRAPPER_FOR_sched_autogroup_fork
#define APP_WRAPPER_FOR_sched_autogroup_fork
FUNCTION_WRAPPER_VOID(sched_autogroup_fork, (struct signal_struct *sig), {
    WRAP_RECURSIVE(sig);
    TRACES_IF_WATCHPOINT(sig);
    SCAN_HEAD_FUNC(struct signal_struct)(*(TO_UNWATCHED_ADDRESS(sig)));
    kern_printk("sched_autogroup_fork is invoked.\n");
    PRE_WRAPPER_FUNC(sig);
    sched_autogroup_fork(sig);
    POST_WRAPPER_FUNC(sig);
    kern_printk("sched_autogroup_fork returned.\n");
    TRACES_IF_WATCHPOINT(sig);
    SCAN_HEAD_FUNC(struct signal_struct)(*(TO_UNWATCHED_ADDRESS(sig)));
})
#endif


#ifndef KERN_ADDR_kstrtou16
#define APP_WRAPPER_FOR_kstrtou16
#endif
 
#ifndef APP_WRAPPER_FOR_kstrtou16
#define APP_WRAPPER_FOR_kstrtou16
FUNCTION_WRAPPER(kstrtou16, (const char *s, unsigned int base, u16 *res), {
    kern_printk("kstrtou16 is invoked.\n");
    PRE_WRAPPER_FUNC(s, base, res);
    int ret = kstrtou16(s, base, res);
    POST_WRAPPER_FUNC(s, base, res);
    kern_printk("kstrtou16 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_x86_platform_ipi
#define APP_WRAPPER_FOR_x86_platform_ipi
#endif
 
#ifndef APP_WRAPPER_FOR_x86_platform_ipi
#define APP_WRAPPER_FOR_x86_platform_ipi
FUNCTION_WRAPPER_VOID(x86_platform_ipi, (), {
    kern_printk("x86_platform_ipi is invoked.\n");
    PRE_WRAPPER_FUNC();
    x86_platform_ipi();
    POST_WRAPPER_FUNC();
    kern_printk("x86_platform_ipi returned.\n");
})
#endif


#ifndef KERN_ADDR_blk_queue_unprep_rq
#define APP_WRAPPER_FOR_blk_queue_unprep_rq
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_unprep_rq
#define APP_WRAPPER_FOR_blk_queue_unprep_rq
FUNCTION_WRAPPER_VOID(blk_queue_unprep_rq, (struct request_queue *_arg1, unprep_rq_fn *ufn), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_FUNCTION(ufn);
    kern_printk("blk_queue_unprep_rq is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, ufn);
    blk_queue_unprep_rq(_arg1, ufn);
    POST_WRAPPER_FUNC(_arg1, ufn);
    kern_printk("blk_queue_unprep_rq returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_pci_enable_rom
#define APP_WRAPPER_FOR_pci_enable_rom
#endif
 
#ifndef APP_WRAPPER_FOR_pci_enable_rom
#define APP_WRAPPER_FOR_pci_enable_rom
FUNCTION_WRAPPER(pci_enable_rom, (struct pci_dev *pdev), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("pci_enable_rom is invoked.\n");
    PRE_WRAPPER_FUNC(pdev);
    int ret = pci_enable_rom(pdev);
    POST_WRAPPER_FUNC(pdev);
    kern_printk("pci_enable_rom returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_native_smp_prepare_boot_cpu
#define APP_WRAPPER_FOR_native_smp_prepare_boot_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_native_smp_prepare_boot_cpu
#define APP_WRAPPER_FOR_native_smp_prepare_boot_cpu
FUNCTION_WRAPPER_VOID(native_smp_prepare_boot_cpu, (), {
    kern_printk("native_smp_prepare_boot_cpu is invoked.\n");
    PRE_WRAPPER_FUNC();
    native_smp_prepare_boot_cpu();
    POST_WRAPPER_FUNC();
    kern_printk("native_smp_prepare_boot_cpu returned.\n");
})
#endif


#ifndef KERN_ADDR_fifo_set_limit
#define APP_WRAPPER_FOR_fifo_set_limit
#endif
 
#ifndef APP_WRAPPER_FOR_fifo_set_limit
#define APP_WRAPPER_FOR_fifo_set_limit
FUNCTION_WRAPPER(fifo_set_limit, (struct Qdisc *q, unsigned int limit), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(q)));
    kern_printk("fifo_set_limit is invoked.\n");
    PRE_WRAPPER_FUNC(q, limit);
    int ret = fifo_set_limit(q, limit);
    POST_WRAPPER_FUNC(q, limit);
    kern_printk("fifo_set_limit returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(q)));
    return ret;
})
#endif


#ifndef KERN_ADDR_rcu_force_quiescent_state
#define APP_WRAPPER_FOR_rcu_force_quiescent_state
#endif
 
#ifndef APP_WRAPPER_FOR_rcu_force_quiescent_state
#define APP_WRAPPER_FOR_rcu_force_quiescent_state
FUNCTION_WRAPPER_VOID(rcu_force_quiescent_state, (), {
    kern_printk("rcu_force_quiescent_state is invoked.\n");
    PRE_WRAPPER_FUNC();
    rcu_force_quiescent_state();
    POST_WRAPPER_FUNC();
    kern_printk("rcu_force_quiescent_state returned.\n");
})
#endif


#ifndef KERN_ADDR_pcie_get_readrq
#define APP_WRAPPER_FOR_pcie_get_readrq
#endif
 
#ifndef APP_WRAPPER_FOR_pcie_get_readrq
#define APP_WRAPPER_FOR_pcie_get_readrq
FUNCTION_WRAPPER(pcie_get_readrq, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pcie_get_readrq is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pcie_get_readrq(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pcie_get_readrq returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_free_swap_and_cache
#define APP_WRAPPER_FOR_free_swap_and_cache
#endif
 
#ifndef APP_WRAPPER_FOR_free_swap_and_cache
#define APP_WRAPPER_FOR_free_swap_and_cache
FUNCTION_WRAPPER(free_swap_and_cache, (swp_entry_t _arg1), {
    kern_printk("free_swap_and_cache is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = free_swap_and_cache(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("free_swap_and_cache returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_seq_hlist_next
#define APP_WRAPPER_FOR_seq_hlist_next
#endif
 
#ifndef APP_WRAPPER_FOR_seq_hlist_next
#define APP_WRAPPER_FOR_seq_hlist_next
FUNCTION_WRAPPER(seq_hlist_next, (void *v, struct hlist_head *head, loff_t *ppos), {
    kern_printk("seq_hlist_next is invoked.\n");
    PRE_WRAPPER_FUNC(v, head, ppos);
    struct hlist_node *ret = seq_hlist_next(v, head, ppos);
    POST_WRAPPER_FUNC(v, head, ppos);
    kern_printk("seq_hlist_next returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_cgroup_unload_subsys
#define APP_WRAPPER_FOR_cgroup_unload_subsys
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_unload_subsys
#define APP_WRAPPER_FOR_cgroup_unload_subsys
FUNCTION_WRAPPER_VOID(cgroup_unload_subsys, (struct cgroup_subsys *ss), {
    WRAP_RECURSIVE(ss);
    TRACES_IF_WATCHPOINT(ss);
    SCAN_HEAD_FUNC(struct cgroup_subsys)(*(TO_UNWATCHED_ADDRESS(ss)));
    kern_printk("cgroup_unload_subsys is invoked.\n");
    PRE_WRAPPER_FUNC(ss);
    cgroup_unload_subsys(ss);
    POST_WRAPPER_FUNC(ss);
    kern_printk("cgroup_unload_subsys returned.\n");
    TRACES_IF_WATCHPOINT(ss);
    SCAN_HEAD_FUNC(struct cgroup_subsys)(*(TO_UNWATCHED_ADDRESS(ss)));
})
#endif


#ifndef KERN_ADDR_send_sig_info
#define APP_WRAPPER_FOR_send_sig_info
#endif
 
#ifndef APP_WRAPPER_FOR_send_sig_info
#define APP_WRAPPER_FOR_send_sig_info
FUNCTION_WRAPPER(send_sig_info, (int _arg1, struct siginfo *_arg2, struct task_struct *_arg3), {
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("send_sig_info is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = send_sig_info(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("send_sig_info returned.\n");
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mod_delayed_work
#define APP_WRAPPER_FOR_mod_delayed_work
#endif
 
#ifndef APP_WRAPPER_FOR_mod_delayed_work
#define APP_WRAPPER_FOR_mod_delayed_work
FUNCTION_WRAPPER(mod_delayed_work, (struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay), {
    WRAP_RECURSIVE(dwork);
    TRACES_IF_WATCHPOINT(dwork);
    SCAN_HEAD_FUNC(struct delayed_work)(*(TO_UNWATCHED_ADDRESS(dwork)));
    kern_printk("mod_delayed_work is invoked.\n");
    PRE_WRAPPER_FUNC(wq, dwork, delay);
    bool ret = mod_delayed_work(wq, dwork, delay);
    POST_WRAPPER_FUNC(wq, dwork, delay);
    kern_printk("mod_delayed_work returned.\n");
    TRACES_IF_WATCHPOINT(dwork);
    SCAN_HEAD_FUNC(struct delayed_work)(*(TO_UNWATCHED_ADDRESS(dwork)));
    return ret;
})
#endif


#ifndef KERN_ADDR_eth_header_parse
#define APP_WRAPPER_FOR_eth_header_parse
#endif
 
#ifndef APP_WRAPPER_FOR_eth_header_parse
#define APP_WRAPPER_FOR_eth_header_parse
FUNCTION_WRAPPER(eth_header_parse, (const struct sk_buff *skb, unsigned char *haddr), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(const struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("eth_header_parse is invoked.\n");
    PRE_WRAPPER_FUNC(skb, haddr);
    int ret = eth_header_parse(skb, haddr);
    POST_WRAPPER_FUNC(skb, haddr);
    kern_printk("eth_header_parse returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(const struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_cancel_lock
#define APP_WRAPPER_FOR_vfs_cancel_lock
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_cancel_lock
#define APP_WRAPPER_FOR_vfs_cancel_lock
FUNCTION_WRAPPER(vfs_cancel_lock, (struct file *filp, struct file_lock *fl), {
    WRAP_RECURSIVE(filp);
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    WRAP_RECURSIVE(fl);
    TRACES_IF_WATCHPOINT(fl);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(fl)));
    kern_printk("vfs_cancel_lock is invoked.\n");
    PRE_WRAPPER_FUNC(filp, fl);
    int ret = vfs_cancel_lock(filp, fl);
    POST_WRAPPER_FUNC(filp, fl);
    kern_printk("vfs_cancel_lock returned.\n");
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    TRACES_IF_WATCHPOINT(fl);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(fl)));
    return ret;
})
#endif


#ifndef KERN_ADDR_enable_irq
#define APP_WRAPPER_FOR_enable_irq
#endif
 
#ifndef APP_WRAPPER_FOR_enable_irq
#define APP_WRAPPER_FOR_enable_irq
FUNCTION_WRAPPER_VOID(enable_irq, (unsigned int irq), {
    kern_printk("enable_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq);
    enable_irq(irq);
    POST_WRAPPER_FUNC(irq);
    kern_printk("enable_irq returned.\n");
})
#endif


#ifndef KERN_ADDR_seq_hlist_start_head_rcu
#define APP_WRAPPER_FOR_seq_hlist_start_head_rcu
#endif
 
#ifndef APP_WRAPPER_FOR_seq_hlist_start_head_rcu
#define APP_WRAPPER_FOR_seq_hlist_start_head_rcu
FUNCTION_WRAPPER(seq_hlist_start_head_rcu, (struct hlist_head *head, loff_t pos), {
    kern_printk("seq_hlist_start_head_rcu is invoked.\n");
    PRE_WRAPPER_FUNC(head, pos);
    struct hlist_node *ret = seq_hlist_start_head_rcu(head, pos);
    POST_WRAPPER_FUNC(head, pos);
    kern_printk("seq_hlist_start_head_rcu returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_tick_nohz_idle_enter
#define APP_WRAPPER_FOR_tick_nohz_idle_enter
#endif
 
#ifndef APP_WRAPPER_FOR_tick_nohz_idle_enter
#define APP_WRAPPER_FOR_tick_nohz_idle_enter
FUNCTION_WRAPPER_VOID(tick_nohz_idle_enter, (), {
    kern_printk("tick_nohz_idle_enter is invoked.\n");
    PRE_WRAPPER_FUNC();
    tick_nohz_idle_enter();
    POST_WRAPPER_FUNC();
    kern_printk("tick_nohz_idle_enter returned.\n");
})
#endif


#ifndef KERN_ADDR_dev_set_drvdata
#define APP_WRAPPER_FOR_dev_set_drvdata
#endif
 
#ifndef APP_WRAPPER_FOR_dev_set_drvdata
#define APP_WRAPPER_FOR_dev_set_drvdata
FUNCTION_WRAPPER(dev_set_drvdata, (struct device *dev, void *data), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_set_drvdata is invoked.\n");
    PRE_WRAPPER_FUNC(dev, data);
    int ret = dev_set_drvdata(dev, data);
    POST_WRAPPER_FUNC(dev, data);
    kern_printk("dev_set_drvdata returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_filemap_fdatawait_range
#define APP_WRAPPER_FOR_filemap_fdatawait_range
#endif
 
#ifndef APP_WRAPPER_FOR_filemap_fdatawait_range
#define APP_WRAPPER_FOR_filemap_fdatawait_range
FUNCTION_WRAPPER(filemap_fdatawait_range, (struct address_space *_arg1, loff_t lstart, loff_t lend), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("filemap_fdatawait_range is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, lstart, lend);
    int ret = filemap_fdatawait_range(_arg1, lstart, lend);
    POST_WRAPPER_FUNC(_arg1, lstart, lend);
    kern_printk("filemap_fdatawait_range returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_make_bad_inode
#define APP_WRAPPER_FOR_make_bad_inode
#endif
 
#ifndef APP_WRAPPER_FOR_make_bad_inode
#define APP_WRAPPER_FOR_make_bad_inode
FUNCTION_WRAPPER_VOID(make_bad_inode, (struct inode *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("make_bad_inode is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    make_bad_inode(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("make_bad_inode returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_netlink_detachskb
#define APP_WRAPPER_FOR_netlink_detachskb
#endif
 
#ifndef APP_WRAPPER_FOR_netlink_detachskb
#define APP_WRAPPER_FOR_netlink_detachskb
FUNCTION_WRAPPER_VOID(netlink_detachskb, (struct sock *sk, struct sk_buff *skb), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("netlink_detachskb is invoked.\n");
    PRE_WRAPPER_FUNC(sk, skb);
    netlink_detachskb(sk, skb);
    POST_WRAPPER_FUNC(sk, skb);
    kern_printk("netlink_detachskb returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_register_qdisc
#define APP_WRAPPER_FOR_register_qdisc
#endif
 
#ifndef APP_WRAPPER_FOR_register_qdisc
#define APP_WRAPPER_FOR_register_qdisc
FUNCTION_WRAPPER(register_qdisc, (struct Qdisc_ops *qops), {
    WRAP_RECURSIVE(qops);
    TRACES_IF_WATCHPOINT(qops);
    SCAN_HEAD_FUNC(struct Qdisc_ops)(*(TO_UNWATCHED_ADDRESS(qops)));
    kern_printk("register_qdisc is invoked.\n");
    PRE_WRAPPER_FUNC(qops);
    int ret = register_qdisc(qops);
    POST_WRAPPER_FUNC(qops);
    kern_printk("register_qdisc returned.\n");
    TRACES_IF_WATCHPOINT(qops);
    SCAN_HEAD_FUNC(struct Qdisc_ops)(*(TO_UNWATCHED_ADDRESS(qops)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sysfs_delete_link
#define APP_WRAPPER_FOR_sysfs_delete_link
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_delete_link
#define APP_WRAPPER_FOR_sysfs_delete_link
FUNCTION_WRAPPER_VOID(sysfs_delete_link, (struct kobject *dir, struct kobject *targ, const char *name), {
    WRAP_RECURSIVE(dir);
    TRACES_IF_WATCHPOINT(dir);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(dir)));
    WRAP_RECURSIVE(targ);
    TRACES_IF_WATCHPOINT(targ);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(targ)));
    kern_printk("sysfs_delete_link is invoked.\n");
    PRE_WRAPPER_FUNC(dir, targ, name);
    sysfs_delete_link(dir, targ, name);
    POST_WRAPPER_FUNC(dir, targ, name);
    kern_printk("sysfs_delete_link returned.\n");
    TRACES_IF_WATCHPOINT(dir);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(dir)));
    TRACES_IF_WATCHPOINT(targ);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(targ)));
})
#endif


#ifndef KERN_ADDR_lookup_module_symbol_name
#define APP_WRAPPER_FOR_lookup_module_symbol_name
#endif
 
#ifndef APP_WRAPPER_FOR_lookup_module_symbol_name
#define APP_WRAPPER_FOR_lookup_module_symbol_name
FUNCTION_WRAPPER(lookup_module_symbol_name, (unsigned long addr, char *symname), {
    kern_printk("lookup_module_symbol_name is invoked.\n");
    PRE_WRAPPER_FUNC(addr, symname);
    int ret = lookup_module_symbol_name(addr, symname);
    POST_WRAPPER_FUNC(addr, symname);
    kern_printk("lookup_module_symbol_name returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_print_hex_dump_bytes
#define APP_WRAPPER_FOR_print_hex_dump_bytes
#endif
 
#ifndef APP_WRAPPER_FOR_print_hex_dump_bytes
#define APP_WRAPPER_FOR_print_hex_dump_bytes
FUNCTION_WRAPPER_VOID(print_hex_dump_bytes, (const char *prefix_str, int prefix_type, const void *buf, size_t len), {
    kern_printk("print_hex_dump_bytes is invoked.\n");
    PRE_WRAPPER_FUNC(prefix_str, prefix_type, buf, len);
    print_hex_dump_bytes(prefix_str, prefix_type, buf, len);
    POST_WRAPPER_FUNC(prefix_str, prefix_type, buf, len);
    kern_printk("print_hex_dump_bytes returned.\n");
})
#endif


#ifndef KERN_ADDR_gnet_stats_start_copy_compat
#define APP_WRAPPER_FOR_gnet_stats_start_copy_compat
#endif
 
#ifndef APP_WRAPPER_FOR_gnet_stats_start_copy_compat
#define APP_WRAPPER_FOR_gnet_stats_start_copy_compat
FUNCTION_WRAPPER(gnet_stats_start_copy_compat, (struct sk_buff *skb, int type, int tc_stats_type, int xstats_type, spinlock_t *lock, struct gnet_dump *d), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_RECURSIVE(d);
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct gnet_dump)(*(TO_UNWATCHED_ADDRESS(d)));
    kern_printk("gnet_stats_start_copy_compat is invoked.\n");
    PRE_WRAPPER_FUNC(skb, type, tc_stats_type, xstats_type, lock, d);
    int ret = gnet_stats_start_copy_compat(skb, type, tc_stats_type, xstats_type, lock, d);
    POST_WRAPPER_FUNC(skb, type, tc_stats_type, xstats_type, lock, d);
    kern_printk("gnet_stats_start_copy_compat returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct gnet_dump)(*(TO_UNWATCHED_ADDRESS(d)));
    return ret;
})
#endif


#ifndef KERN_ADDR_write_inode_now
#define APP_WRAPPER_FOR_write_inode_now
#endif
 
#ifndef APP_WRAPPER_FOR_write_inode_now
#define APP_WRAPPER_FOR_write_inode_now
FUNCTION_WRAPPER(write_inode_now, (struct inode *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("write_inode_now is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = write_inode_now(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("write_inode_now returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_stat
#define APP_WRAPPER_FOR_vfs_stat
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_stat
#define APP_WRAPPER_FOR_vfs_stat
FUNCTION_WRAPPER(vfs_stat, (const char *_arg1, struct kstat *_arg2), {
    kern_printk("vfs_stat is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = vfs_stat(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("vfs_stat returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_bio_put
#define APP_WRAPPER_FOR_bio_put
#endif
 
#ifndef APP_WRAPPER_FOR_bio_put
#define APP_WRAPPER_FOR_bio_put
FUNCTION_WRAPPER_VOID(bio_put, (struct bio *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bio_put is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    bio_put(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("bio_put returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_seq_put_decimal_ull
#define APP_WRAPPER_FOR_seq_put_decimal_ull
#endif
 
#ifndef APP_WRAPPER_FOR_seq_put_decimal_ull
#define APP_WRAPPER_FOR_seq_put_decimal_ull
FUNCTION_WRAPPER(seq_put_decimal_ull, (struct seq_file *m, char delimiter, unsigned long long num), {
    WRAP_RECURSIVE(m);
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
    kern_printk("seq_put_decimal_ull is invoked.\n");
    PRE_WRAPPER_FUNC(m, delimiter, num);
    int ret = seq_put_decimal_ull(m, delimiter, num);
    POST_WRAPPER_FUNC(m, delimiter, num);
    kern_printk("seq_put_decimal_ull returned.\n");
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ktime_get_ts
#define APP_WRAPPER_FOR_ktime_get_ts
#endif
 
#ifndef APP_WRAPPER_FOR_ktime_get_ts
#define APP_WRAPPER_FOR_ktime_get_ts
FUNCTION_WRAPPER_VOID(ktime_get_ts, (struct timespec *ts), {
    kern_printk("ktime_get_ts is invoked.\n");
    PRE_WRAPPER_FUNC(ts);
    ktime_get_ts(ts);
    POST_WRAPPER_FUNC(ts);
    kern_printk("ktime_get_ts returned.\n");
})
#endif


#ifndef KERN_ADDR_fasync_alloc
#define APP_WRAPPER_FOR_fasync_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_fasync_alloc
#define APP_WRAPPER_FOR_fasync_alloc
FUNCTION_WRAPPER(fasync_alloc, (), {
    kern_printk("fasync_alloc is invoked.\n");
    PRE_WRAPPER_FUNC();
    struct fasync_struct *ret = fasync_alloc();
    POST_WRAPPER_FUNC();
    kern_printk("fasync_alloc returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_integrity_merge_bio
#define APP_WRAPPER_FOR_blk_integrity_merge_bio
#endif
 
#ifndef APP_WRAPPER_FOR_blk_integrity_merge_bio
#define APP_WRAPPER_FOR_blk_integrity_merge_bio
FUNCTION_WRAPPER(blk_integrity_merge_bio, (struct request_queue *_arg1, struct request *_arg2, struct bio *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("blk_integrity_merge_bio is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = blk_integrity_merge_bio(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("blk_integrity_merge_bio returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kill_fasync
#define APP_WRAPPER_FOR_kill_fasync
#endif
 
#ifndef APP_WRAPPER_FOR_kill_fasync
#define APP_WRAPPER_FOR_kill_fasync
FUNCTION_WRAPPER_VOID(kill_fasync, (struct fasync_struct **_arg1, int _arg2, int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct fasync_struct *)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("kill_fasync is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kill_fasync(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("kill_fasync returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct fasync_struct *)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_netlink_register_notifier
#define APP_WRAPPER_FOR_netlink_register_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_netlink_register_notifier
#define APP_WRAPPER_FOR_netlink_register_notifier
FUNCTION_WRAPPER(netlink_register_notifier, (struct notifier_block *nb), {
    WRAP_RECURSIVE(nb);
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    kern_printk("netlink_register_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(nb);
    int ret = netlink_register_notifier(nb);
    POST_WRAPPER_FUNC(nb);
    kern_printk("netlink_register_notifier returned.\n");
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_mps_oem_check
#define APP_WRAPPER_FOR_generic_mps_oem_check
#endif
 
#ifndef APP_WRAPPER_FOR_generic_mps_oem_check
#define APP_WRAPPER_FOR_generic_mps_oem_check
FUNCTION_WRAPPER(generic_mps_oem_check, (struct mpc_table *_arg1, char *_arg2, char *_arg3), {
    kern_printk("generic_mps_oem_check is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = generic_mps_oem_check(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("generic_mps_oem_check returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_elevator_init
#define APP_WRAPPER_FOR_elevator_init
#endif
 
#ifndef APP_WRAPPER_FOR_elevator_init
#define APP_WRAPPER_FOR_elevator_init
FUNCTION_WRAPPER(elevator_init, (struct request_queue *_arg1, char *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("elevator_init is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = elevator_init(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("elevator_init returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_out_of_line_wait_on_bit
#define APP_WRAPPER_FOR_out_of_line_wait_on_bit
#endif
 
#ifndef APP_WRAPPER_FOR_out_of_line_wait_on_bit
#define APP_WRAPPER_FOR_out_of_line_wait_on_bit
FUNCTION_WRAPPER(out_of_line_wait_on_bit, (void *_arg1, int _arg2, int (*_arg3)(void *), unsigned int _arg4), {
    WRAP_FUNCTION(_arg3);
    kern_printk("out_of_line_wait_on_bit is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = out_of_line_wait_on_bit(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("out_of_line_wait_on_bit returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sata_async_notification
#define APP_WRAPPER_FOR_sata_async_notification
#endif
 
#ifndef APP_WRAPPER_FOR_sata_async_notification
#define APP_WRAPPER_FOR_sata_async_notification
FUNCTION_WRAPPER(sata_async_notification, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("sata_async_notification is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    int ret = sata_async_notification(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("sata_async_notification returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_put_journal_head
#define APP_WRAPPER_FOR_jbd2_journal_put_journal_head
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_put_journal_head
#define APP_WRAPPER_FOR_jbd2_journal_put_journal_head
FUNCTION_WRAPPER_VOID(jbd2_journal_put_journal_head, (struct journal_head *jh), {
    WRAP_RECURSIVE(jh);
    TRACES_IF_WATCHPOINT(jh);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(jh)));
    kern_printk("jbd2_journal_put_journal_head is invoked.\n");
    PRE_WRAPPER_FUNC(jh);
    jbd2_journal_put_journal_head(jh);
    POST_WRAPPER_FUNC(jh);
    kern_printk("jbd2_journal_put_journal_head returned.\n");
    TRACES_IF_WATCHPOINT(jh);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(jh)));
})
#endif


#ifndef KERN_ADDR_init_ISA_irqs
#define APP_WRAPPER_FOR_init_ISA_irqs
#endif
 
#ifndef APP_WRAPPER_FOR_init_ISA_irqs
#define APP_WRAPPER_FOR_init_ISA_irqs
FUNCTION_WRAPPER_VOID(init_ISA_irqs, (), {
    kern_printk("init_ISA_irqs is invoked.\n");
    PRE_WRAPPER_FUNC();
    init_ISA_irqs();
    POST_WRAPPER_FUNC();
    kern_printk("init_ISA_irqs returned.\n");
})
#endif


#ifndef KERN_ADDR_ptep_test_and_clear_young
#define APP_WRAPPER_FOR_ptep_test_and_clear_young
#endif
 
#ifndef APP_WRAPPER_FOR_ptep_test_and_clear_young
#define APP_WRAPPER_FOR_ptep_test_and_clear_young
FUNCTION_WRAPPER(ptep_test_and_clear_young, (struct vm_area_struct *vma, unsigned long addr, pte_t *ptep), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("ptep_test_and_clear_young is invoked.\n");
    PRE_WRAPPER_FUNC(vma, addr, ptep);
    int ret = ptep_test_and_clear_young(vma, addr, ptep);
    POST_WRAPPER_FUNC(vma, addr, ptep);
    kern_printk("ptep_test_and_clear_young returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR___d_lookup
#define APP_WRAPPER_FOR___d_lookup
#endif
 
#ifndef APP_WRAPPER_FOR___d_lookup
#define APP_WRAPPER_FOR___d_lookup
FUNCTION_WRAPPER(__d_lookup, (struct dentry *_arg1, struct qstr *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__d_lookup is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct dentry *ret = __d_lookup(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("__d_lookup returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_seq_list_start
#define APP_WRAPPER_FOR_seq_list_start
#endif
 
#ifndef APP_WRAPPER_FOR_seq_list_start
#define APP_WRAPPER_FOR_seq_list_start
FUNCTION_WRAPPER(seq_list_start, (struct list_head *head, loff_t pos), {
    kern_printk("seq_list_start is invoked.\n");
    PRE_WRAPPER_FUNC(head, pos);
    struct list_head *ret = seq_list_start(head, pos);
    POST_WRAPPER_FUNC(head, pos);
    kern_printk("seq_list_start returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_dst_set_noref
#define APP_WRAPPER_FOR_skb_dst_set_noref
#endif
 
#ifndef APP_WRAPPER_FOR_skb_dst_set_noref
#define APP_WRAPPER_FOR_skb_dst_set_noref
FUNCTION_WRAPPER_VOID(skb_dst_set_noref, (struct sk_buff *skb, struct dst_entry *dst), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_RECURSIVE(dst);
    TRACES_IF_WATCHPOINT(dst);
    SCAN_HEAD_FUNC(struct dst_entry)(*(TO_UNWATCHED_ADDRESS(dst)));
    kern_printk("skb_dst_set_noref is invoked.\n");
    PRE_WRAPPER_FUNC(skb, dst);
    skb_dst_set_noref(skb, dst);
    POST_WRAPPER_FUNC(skb, dst);
    kern_printk("skb_dst_set_noref returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    TRACES_IF_WATCHPOINT(dst);
    SCAN_HEAD_FUNC(struct dst_entry)(*(TO_UNWATCHED_ADDRESS(dst)));
})
#endif


#ifndef KERN_ADDR_machine_crash_shutdown
#define APP_WRAPPER_FOR_machine_crash_shutdown
#endif
 
#ifndef APP_WRAPPER_FOR_machine_crash_shutdown
#define APP_WRAPPER_FOR_machine_crash_shutdown
FUNCTION_WRAPPER_VOID(machine_crash_shutdown, (struct pt_regs *_arg1), {
    kern_printk("machine_crash_shutdown is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    machine_crash_shutdown(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("machine_crash_shutdown returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_bus_hot_remove_device
#define APP_WRAPPER_FOR_acpi_bus_hot_remove_device
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_bus_hot_remove_device
#define APP_WRAPPER_FOR_acpi_bus_hot_remove_device
FUNCTION_WRAPPER_VOID(acpi_bus_hot_remove_device, (void *context), {
    kern_printk("acpi_bus_hot_remove_device is invoked.\n");
    PRE_WRAPPER_FUNC(context);
    acpi_bus_hot_remove_device(context);
    POST_WRAPPER_FUNC(context);
    kern_printk("acpi_bus_hot_remove_device returned.\n");
})
#endif


#ifndef KERN_ADDR_vfs_caches_init
#define APP_WRAPPER_FOR_vfs_caches_init
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_caches_init
#define APP_WRAPPER_FOR_vfs_caches_init
FUNCTION_WRAPPER_VOID(vfs_caches_init, (unsigned long _arg1), {
    kern_printk("vfs_caches_init is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    vfs_caches_init(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("vfs_caches_init returned.\n");
})
#endif


#ifndef KERN_ADDR_mod_delayed_work_on
#define APP_WRAPPER_FOR_mod_delayed_work_on
#endif
 
#ifndef APP_WRAPPER_FOR_mod_delayed_work_on
#define APP_WRAPPER_FOR_mod_delayed_work_on
FUNCTION_WRAPPER(mod_delayed_work_on, (int cpu, struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay), {
    WRAP_RECURSIVE(dwork);
    TRACES_IF_WATCHPOINT(dwork);
    SCAN_HEAD_FUNC(struct delayed_work)(*(TO_UNWATCHED_ADDRESS(dwork)));
    kern_printk("mod_delayed_work_on is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, wq, dwork, delay);
    bool ret = mod_delayed_work_on(cpu, wq, dwork, delay);
    POST_WRAPPER_FUNC(cpu, wq, dwork, delay);
    kern_printk("mod_delayed_work_on returned.\n");
    TRACES_IF_WATCHPOINT(dwork);
    SCAN_HEAD_FUNC(struct delayed_work)(*(TO_UNWATCHED_ADDRESS(dwork)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sas_slave_configure
#define APP_WRAPPER_FOR_ata_sas_slave_configure
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sas_slave_configure
#define APP_WRAPPER_FOR_ata_sas_slave_configure
FUNCTION_WRAPPER(ata_sas_slave_configure, (struct scsi_device *_arg1, struct ata_port *_arg2), {
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("ata_sas_slave_configure is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = ata_sas_slave_configure(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("ata_sas_slave_configure returned.\n");
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_alloc_generic_chip
#define APP_WRAPPER_FOR_irq_alloc_generic_chip
#endif
 
#ifndef APP_WRAPPER_FOR_irq_alloc_generic_chip
#define APP_WRAPPER_FOR_irq_alloc_generic_chip
FUNCTION_WRAPPER(irq_alloc_generic_chip, (const char *name, int nr_ct, unsigned int irq_base, void *reg_base, irq_flow_handler_t handler), {
    WRAP_FUNCTION(handler);
    kern_printk("irq_alloc_generic_chip is invoked.\n");
    PRE_WRAPPER_FUNC(name, nr_ct, irq_base, reg_base, handler);
    struct irq_chip_generic *ret = irq_alloc_generic_chip(name, nr_ct, irq_base, reg_base, handler);
    POST_WRAPPER_FUNC(name, nr_ct, irq_base, reg_base, handler);
    kern_printk("irq_alloc_generic_chip returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_qdisc_watchdog_cancel
#define APP_WRAPPER_FOR_qdisc_watchdog_cancel
#endif
 
#ifndef APP_WRAPPER_FOR_qdisc_watchdog_cancel
#define APP_WRAPPER_FOR_qdisc_watchdog_cancel
FUNCTION_WRAPPER_VOID(qdisc_watchdog_cancel, (struct qdisc_watchdog *wd), {
    WRAP_RECURSIVE(wd);
    TRACES_IF_WATCHPOINT(wd);
    SCAN_HEAD_FUNC(struct qdisc_watchdog)(*(TO_UNWATCHED_ADDRESS(wd)));
    kern_printk("qdisc_watchdog_cancel is invoked.\n");
    PRE_WRAPPER_FUNC(wd);
    qdisc_watchdog_cancel(wd);
    POST_WRAPPER_FUNC(wd);
    kern_printk("qdisc_watchdog_cancel returned.\n");
    TRACES_IF_WATCHPOINT(wd);
    SCAN_HEAD_FUNC(struct qdisc_watchdog)(*(TO_UNWATCHED_ADDRESS(wd)));
})
#endif


#ifndef KERN_ADDR___put_net
#define APP_WRAPPER_FOR___put_net
#endif
 
#ifndef APP_WRAPPER_FOR___put_net
#define APP_WRAPPER_FOR___put_net
FUNCTION_WRAPPER_VOID(__put_net, (struct net *net), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    kern_printk("__put_net is invoked.\n");
    PRE_WRAPPER_FUNC(net);
    __put_net(net);
    POST_WRAPPER_FUNC(net);
    kern_printk("__put_net returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
})
#endif


#ifndef KERN_ADDR_build_skb
#define APP_WRAPPER_FOR_build_skb
#endif
 
#ifndef APP_WRAPPER_FOR_build_skb
#define APP_WRAPPER_FOR_build_skb
FUNCTION_WRAPPER(build_skb, (void *data, unsigned int frag_size), {
    kern_printk("build_skb is invoked.\n");
    PRE_WRAPPER_FUNC(data, frag_size);
    struct sk_buff *ret = build_skb(data, frag_size);
    POST_WRAPPER_FUNC(data, frag_size);
    kern_printk("build_skb returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pcpu_embed_first_chunk
#define APP_WRAPPER_FOR_pcpu_embed_first_chunk
#endif
 
#ifndef APP_WRAPPER_FOR_pcpu_embed_first_chunk
#define APP_WRAPPER_FOR_pcpu_embed_first_chunk
FUNCTION_WRAPPER(pcpu_embed_first_chunk, (size_t reserved_size, size_t dyn_size, size_t atom_size, pcpu_fc_cpu_distance_fn_t cpu_distance_fn, pcpu_fc_alloc_fn_t alloc_fn, pcpu_fc_free_fn_t free_fn), {
    WRAP_FUNCTION(alloc_fn);
    WRAP_FUNCTION(free_fn);
    kern_printk("pcpu_embed_first_chunk is invoked.\n");
    PRE_WRAPPER_FUNC(reserved_size, dyn_size, atom_size, cpu_distance_fn, alloc_fn, free_fn);
    int ret = pcpu_embed_first_chunk(reserved_size, dyn_size, atom_size, cpu_distance_fn, alloc_fn, free_fn);
    POST_WRAPPER_FUNC(reserved_size, dyn_size, atom_size, cpu_distance_fn, alloc_fn, free_fn);
    kern_printk("pcpu_embed_first_chunk returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_driver_for_each_device
#define APP_WRAPPER_FOR_driver_for_each_device
#endif
 
#ifndef APP_WRAPPER_FOR_driver_for_each_device
#define APP_WRAPPER_FOR_driver_for_each_device
FUNCTION_WRAPPER(driver_for_each_device, (struct device_driver *drv, struct device *start, void *data, int (*fn)(struct device *, void *)), {
    WRAP_RECURSIVE(drv);
    TRACES_IF_WATCHPOINT(drv);
    SCAN_HEAD_FUNC(struct device_driver)(*(TO_UNWATCHED_ADDRESS(drv)));
    WRAP_RECURSIVE(start);
    TRACES_IF_WATCHPOINT(start);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(start)));
    WRAP_FUNCTION(fn);
    kern_printk("driver_for_each_device is invoked.\n");
    PRE_WRAPPER_FUNC(drv, start, data, fn);
    int ret = driver_for_each_device(drv, start, data, fn);
    POST_WRAPPER_FUNC(drv, start, data, fn);
    kern_printk("driver_for_each_device returned.\n");
    TRACES_IF_WATCHPOINT(drv);
    SCAN_HEAD_FUNC(struct device_driver)(*(TO_UNWATCHED_ADDRESS(drv)));
    TRACES_IF_WATCHPOINT(start);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(start)));
    return ret;
})
#endif


#ifndef KERN_ADDR_slab_is_available
#define APP_WRAPPER_FOR_slab_is_available
#endif
 
#ifndef APP_WRAPPER_FOR_slab_is_available
#define APP_WRAPPER_FOR_slab_is_available
FUNCTION_WRAPPER(slab_is_available, (), {
    kern_printk("slab_is_available is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = slab_is_available();
    POST_WRAPPER_FUNC();
    kern_printk("slab_is_available returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_restore_online_page_callback
#define APP_WRAPPER_FOR_restore_online_page_callback
#endif
 
#ifndef APP_WRAPPER_FOR_restore_online_page_callback
#define APP_WRAPPER_FOR_restore_online_page_callback
FUNCTION_WRAPPER(restore_online_page_callback, (online_page_callback_t callback), {
    WRAP_FUNCTION(callback);
    kern_printk("restore_online_page_callback is invoked.\n");
    PRE_WRAPPER_FUNC(callback);
    int ret = restore_online_page_callback(callback);
    POST_WRAPPER_FUNC(callback);
    kern_printk("restore_online_page_callback returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_check_wakeup_irqs
#define APP_WRAPPER_FOR_check_wakeup_irqs
#endif
 
#ifndef APP_WRAPPER_FOR_check_wakeup_irqs
#define APP_WRAPPER_FOR_check_wakeup_irqs
FUNCTION_WRAPPER(check_wakeup_irqs, (), {
    kern_printk("check_wakeup_irqs is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = check_wakeup_irqs();
    POST_WRAPPER_FUNC();
    kern_printk("check_wakeup_irqs returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_vpd_truncate
#define APP_WRAPPER_FOR_pci_vpd_truncate
#endif
 
#ifndef APP_WRAPPER_FOR_pci_vpd_truncate
#define APP_WRAPPER_FOR_pci_vpd_truncate
FUNCTION_WRAPPER(pci_vpd_truncate, (struct pci_dev *dev, size_t size), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_vpd_truncate is invoked.\n");
    PRE_WRAPPER_FUNC(dev, size);
    int ret = pci_vpd_truncate(dev, size);
    POST_WRAPPER_FUNC(dev, size);
    kern_printk("pci_vpd_truncate returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_put_bitmap
#define APP_WRAPPER_FOR_compat_put_bitmap
#endif
 
#ifndef APP_WRAPPER_FOR_compat_put_bitmap
#define APP_WRAPPER_FOR_compat_put_bitmap
FUNCTION_WRAPPER(compat_put_bitmap, (compat_ulong_t *umask, unsigned long *mask, unsigned long bitmap_size), {
    kern_printk("compat_put_bitmap is invoked.\n");
    PRE_WRAPPER_FUNC(umask, mask, bitmap_size);
    long ret = compat_put_bitmap(umask, mask, bitmap_size);
    POST_WRAPPER_FUNC(umask, mask, bitmap_size);
    kern_printk("compat_put_bitmap returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_get_pageblock_flags_group
#define APP_WRAPPER_FOR_get_pageblock_flags_group
#endif
 
#ifndef APP_WRAPPER_FOR_get_pageblock_flags_group
#define APP_WRAPPER_FOR_get_pageblock_flags_group
FUNCTION_WRAPPER(get_pageblock_flags_group, (struct page *page, int start_bitidx, int end_bitidx), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("get_pageblock_flags_group is invoked.\n");
    PRE_WRAPPER_FUNC(page, start_bitidx, end_bitidx);
    long ret = get_pageblock_flags_group(page, start_bitidx, end_bitidx);
    POST_WRAPPER_FUNC(page, start_bitidx, end_bitidx);
    kern_printk("get_pageblock_flags_group returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_try_set_mwi
#define APP_WRAPPER_FOR_pci_try_set_mwi
#endif
 
#ifndef APP_WRAPPER_FOR_pci_try_set_mwi
#define APP_WRAPPER_FOR_pci_try_set_mwi
FUNCTION_WRAPPER(pci_try_set_mwi, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_try_set_mwi is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pci_try_set_mwi(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_try_set_mwi returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_pci_bmdma_clear_simplex
#define APP_WRAPPER_FOR_ata_pci_bmdma_clear_simplex
#endif
 
#ifndef APP_WRAPPER_FOR_ata_pci_bmdma_clear_simplex
#define APP_WRAPPER_FOR_ata_pci_bmdma_clear_simplex
FUNCTION_WRAPPER(ata_pci_bmdma_clear_simplex, (struct pci_dev *pdev), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("ata_pci_bmdma_clear_simplex is invoked.\n");
    PRE_WRAPPER_FUNC(pdev);
    int ret = ata_pci_bmdma_clear_simplex(pdev);
    POST_WRAPPER_FUNC(pdev);
    kern_printk("ata_pci_bmdma_clear_simplex returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_smp_apic_timer_interrupt
#define APP_WRAPPER_FOR_smp_apic_timer_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_smp_apic_timer_interrupt
#define APP_WRAPPER_FOR_smp_apic_timer_interrupt
FUNCTION_WRAPPER_VOID(smp_apic_timer_interrupt, (struct pt_regs *_arg1), {
    kern_printk("smp_apic_timer_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    smp_apic_timer_interrupt(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("smp_apic_timer_interrupt returned.\n");
})
#endif


#ifndef KERN_ADDR_del_gendisk
#define APP_WRAPPER_FOR_del_gendisk
#endif
 
#ifndef APP_WRAPPER_FOR_del_gendisk
#define APP_WRAPPER_FOR_del_gendisk
FUNCTION_WRAPPER_VOID(del_gendisk, (struct gendisk *gp), {
    WRAP_RECURSIVE(gp);
    TRACES_IF_WATCHPOINT(gp);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(gp)));
    kern_printk("del_gendisk is invoked.\n");
    PRE_WRAPPER_FUNC(gp);
    del_gendisk(gp);
    POST_WRAPPER_FUNC(gp);
    kern_printk("del_gendisk returned.\n");
    TRACES_IF_WATCHPOINT(gp);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(gp)));
})
#endif


#ifndef KERN_ADDR_disconnect_bsp_APIC
#define APP_WRAPPER_FOR_disconnect_bsp_APIC
#endif
 
#ifndef APP_WRAPPER_FOR_disconnect_bsp_APIC
#define APP_WRAPPER_FOR_disconnect_bsp_APIC
FUNCTION_WRAPPER_VOID(disconnect_bsp_APIC, (int virt_wire_setup), {
    kern_printk("disconnect_bsp_APIC is invoked.\n");
    PRE_WRAPPER_FUNC(virt_wire_setup);
    disconnect_bsp_APIC(virt_wire_setup);
    POST_WRAPPER_FUNC(virt_wire_setup);
    kern_printk("disconnect_bsp_APIC returned.\n");
})
#endif


#ifndef KERN_ADDR_res_counter_init
#define APP_WRAPPER_FOR_res_counter_init
#endif
 
#ifndef APP_WRAPPER_FOR_res_counter_init
#define APP_WRAPPER_FOR_res_counter_init
FUNCTION_WRAPPER_VOID(res_counter_init, (struct res_counter *counter, struct res_counter *parent), {
    kern_printk("res_counter_init is invoked.\n");
    PRE_WRAPPER_FUNC(counter, parent);
    res_counter_init(counter, parent);
    POST_WRAPPER_FUNC(counter, parent);
    kern_printk("res_counter_init returned.\n");
})
#endif


#ifndef KERN_ADDR_blk_queue_lld_busy
#define APP_WRAPPER_FOR_blk_queue_lld_busy
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_lld_busy
#define APP_WRAPPER_FOR_blk_queue_lld_busy
FUNCTION_WRAPPER_VOID(blk_queue_lld_busy, (struct request_queue *q, lld_busy_fn *fn), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    WRAP_FUNCTION(fn);
    kern_printk("blk_queue_lld_busy is invoked.\n");
    PRE_WRAPPER_FUNC(q, fn);
    blk_queue_lld_busy(q, fn);
    POST_WRAPPER_FUNC(q, fn);
    kern_printk("blk_queue_lld_busy returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
})
#endif


#ifndef KERN_ADDR_dev_pm_qos_remove_global_notifier
#define APP_WRAPPER_FOR_dev_pm_qos_remove_global_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_dev_pm_qos_remove_global_notifier
#define APP_WRAPPER_FOR_dev_pm_qos_remove_global_notifier
FUNCTION_WRAPPER(dev_pm_qos_remove_global_notifier, (struct notifier_block *notifier), {
    WRAP_RECURSIVE(notifier);
    TRACES_IF_WATCHPOINT(notifier);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(notifier)));
    kern_printk("dev_pm_qos_remove_global_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(notifier);
    int ret = dev_pm_qos_remove_global_notifier(notifier);
    POST_WRAPPER_FUNC(notifier);
    kern_printk("dev_pm_qos_remove_global_notifier returned.\n");
    TRACES_IF_WATCHPOINT(notifier);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(notifier)));
    return ret;
})
#endif


#ifndef KERN_ADDR_devtmpfs_mount
#define APP_WRAPPER_FOR_devtmpfs_mount
#endif
 
#ifndef APP_WRAPPER_FOR_devtmpfs_mount
#define APP_WRAPPER_FOR_devtmpfs_mount
FUNCTION_WRAPPER(devtmpfs_mount, (const char *mntdir), {
    kern_printk("devtmpfs_mount is invoked.\n");
    PRE_WRAPPER_FUNC(mntdir);
    int ret = devtmpfs_mount(mntdir);
    POST_WRAPPER_FUNC(mntdir);
    kern_printk("devtmpfs_mount returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_linkwatch_init_dev
#define APP_WRAPPER_FOR_linkwatch_init_dev
#endif
 
#ifndef APP_WRAPPER_FOR_linkwatch_init_dev
#define APP_WRAPPER_FOR_linkwatch_init_dev
FUNCTION_WRAPPER_VOID(linkwatch_init_dev, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("linkwatch_init_dev is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    linkwatch_init_dev(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("linkwatch_init_dev returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_pm_stay_awake
#define APP_WRAPPER_FOR_pm_stay_awake
#endif
 
#ifndef APP_WRAPPER_FOR_pm_stay_awake
#define APP_WRAPPER_FOR_pm_stay_awake
FUNCTION_WRAPPER_VOID(pm_stay_awake, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pm_stay_awake is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pm_stay_awake(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pm_stay_awake returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_ata_std_sched_eh
#define APP_WRAPPER_FOR_ata_std_sched_eh
#endif
 
#ifndef APP_WRAPPER_FOR_ata_std_sched_eh
#define APP_WRAPPER_FOR_ata_std_sched_eh
FUNCTION_WRAPPER_VOID(ata_std_sched_eh, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_std_sched_eh is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    ata_std_sched_eh(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_std_sched_eh returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_ata_host_alloc_pinfo
#define APP_WRAPPER_FOR_ata_host_alloc_pinfo
#endif
 
#ifndef APP_WRAPPER_FOR_ata_host_alloc_pinfo
#define APP_WRAPPER_FOR_ata_host_alloc_pinfo
FUNCTION_WRAPPER(ata_host_alloc_pinfo, (struct device *dev, const struct ata_port_info ** const ppi, int n_ports), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(ppi);
    TRACES_IF_WATCHPOINT(ppi);
  //  SCAN_HEAD_FUNC(const struct ata_port_info * const)(*(TO_UNWATCHED_ADDRESS(ppi)));
    kern_printk("ata_host_alloc_pinfo is invoked.\n");
    PRE_WRAPPER_FUNC(dev, ppi, n_ports);
    struct ata_host *ret = ata_host_alloc_pinfo(dev, ppi, n_ports);
    POST_WRAPPER_FUNC(dev, ppi, n_ports);
    kern_printk("ata_host_alloc_pinfo returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(ppi);
//    SCAN_HEAD_FUNC(const struct ata_port_info * const)(*(TO_UNWATCHED_ADDRESS(ppi)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_proc_ns_inode
#define APP_WRAPPER_FOR_proc_ns_inode
#endif
 
#ifndef APP_WRAPPER_FOR_proc_ns_inode
#define APP_WRAPPER_FOR_proc_ns_inode
FUNCTION_WRAPPER(proc_ns_inode, (struct inode *inode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("proc_ns_inode is invoked.\n");
    PRE_WRAPPER_FUNC(inode);
    bool ret = proc_ns_inode(inode);
    POST_WRAPPER_FUNC(inode);
    kern_printk("proc_ns_inode returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cap_settime
#define APP_WRAPPER_FOR_cap_settime
#endif
 
#ifndef APP_WRAPPER_FOR_cap_settime
#define APP_WRAPPER_FOR_cap_settime
FUNCTION_WRAPPER(cap_settime, (const struct timespec *ts, const struct timezone *tz), {
    kern_printk("cap_settime is invoked.\n");
    PRE_WRAPPER_FUNC(ts, tz);
    int ret = cap_settime(ts, tz);
    POST_WRAPPER_FUNC(ts, tz);
    kern_printk("cap_settime returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_thermal_interrupt
#define APP_WRAPPER_FOR_thermal_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_thermal_interrupt
#define APP_WRAPPER_FOR_thermal_interrupt
FUNCTION_WRAPPER_VOID(thermal_interrupt, (), {
    kern_printk("thermal_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC();
    thermal_interrupt();
    POST_WRAPPER_FUNC();
    kern_printk("thermal_interrupt returned.\n");
})
#endif


#ifndef KERN_ADDR_compat_sys_mq_open
#define APP_WRAPPER_FOR_compat_sys_mq_open
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_mq_open
#define APP_WRAPPER_FOR_compat_sys_mq_open
FUNCTION_WRAPPER(compat_sys_mq_open, (const char *u_name, int oflag, compat_mode_t mode, struct compat_mq_attr *u_attr), {
    kern_printk("compat_sys_mq_open is invoked.\n");
    PRE_WRAPPER_FUNC(u_name, oflag, mode, u_attr);
    long ret = compat_sys_mq_open(u_name, oflag, mode, u_attr);
    POST_WRAPPER_FUNC(u_name, oflag, mode, u_attr);
    kern_printk("compat_sys_mq_open returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sg_miter_start
#define APP_WRAPPER_FOR_sg_miter_start
#endif
 
#ifndef APP_WRAPPER_FOR_sg_miter_start
#define APP_WRAPPER_FOR_sg_miter_start
FUNCTION_WRAPPER_VOID(sg_miter_start, (struct sg_mapping_iter *miter, struct scatterlist *sgl, unsigned int nents, unsigned int flags), {
    WRAP_RECURSIVE(miter);
    TRACES_IF_WATCHPOINT(miter);
    SCAN_HEAD_FUNC(struct sg_mapping_iter)(*(TO_UNWATCHED_ADDRESS(miter)));
    kern_printk("sg_miter_start is invoked.\n");
    PRE_WRAPPER_FUNC(miter, sgl, nents, flags);
    sg_miter_start(miter, sgl, nents, flags);
    POST_WRAPPER_FUNC(miter, sgl, nents, flags);
    kern_printk("sg_miter_start returned.\n");
    TRACES_IF_WATCHPOINT(miter);
    SCAN_HEAD_FUNC(struct sg_mapping_iter)(*(TO_UNWATCHED_ADDRESS(miter)));
})
#endif


#ifndef KERN_ADDR_seq_hlist_start_rcu
#define APP_WRAPPER_FOR_seq_hlist_start_rcu
#endif
 
#ifndef APP_WRAPPER_FOR_seq_hlist_start_rcu
#define APP_WRAPPER_FOR_seq_hlist_start_rcu
FUNCTION_WRAPPER(seq_hlist_start_rcu, (struct hlist_head *head, loff_t pos), {
    kern_printk("seq_hlist_start_rcu is invoked.\n");
    PRE_WRAPPER_FUNC(head, pos);
    struct hlist_node *ret = seq_hlist_start_rcu(head, pos);
    POST_WRAPPER_FUNC(head, pos);
    kern_printk("seq_hlist_start_rcu returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_mark_buffer_dirty_inode
#define APP_WRAPPER_FOR_mark_buffer_dirty_inode
#endif
 
#ifndef APP_WRAPPER_FOR_mark_buffer_dirty_inode
#define APP_WRAPPER_FOR_mark_buffer_dirty_inode
FUNCTION_WRAPPER_VOID(mark_buffer_dirty_inode, (struct buffer_head *bh, struct inode *inode), {
    WRAP_RECURSIVE(bh);
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("mark_buffer_dirty_inode is invoked.\n");
    PRE_WRAPPER_FUNC(bh, inode);
    mark_buffer_dirty_inode(bh, inode);
    POST_WRAPPER_FUNC(bh, inode);
    kern_printk("mark_buffer_dirty_inode returned.\n");
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR___vmalloc_node_range
#define APP_WRAPPER_FOR___vmalloc_node_range
#endif
 
#ifndef APP_WRAPPER_FOR___vmalloc_node_range
#define APP_WRAPPER_FOR___vmalloc_node_range
FUNCTION_WRAPPER(__vmalloc_node_range, (unsigned long size, unsigned long align, unsigned long start, unsigned long end, gfp_t gfp_mask, pgprot_t prot, int node, const void *caller), {
    kern_printk("__vmalloc_node_range is invoked.\n");
    PRE_WRAPPER_FUNC(size, align, start, end, gfp_mask, prot, node, caller);
    void *ret = __vmalloc_node_range(size, align, start, end, gfp_mask, prot, node, caller);
    POST_WRAPPER_FUNC(size, align, start, end, gfp_mask, prot, node, caller);
    kern_printk("__vmalloc_node_range returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_rename
#define APP_WRAPPER_FOR_vfs_rename
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_rename
#define APP_WRAPPER_FOR_vfs_rename
FUNCTION_WRAPPER(vfs_rename, (struct inode *_arg1, struct dentry *_arg2, struct inode *_arg3, struct dentry *_arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    WRAP_RECURSIVE(_arg4);
    TRACES_IF_WATCHPOINT(_arg4);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg4)));
    kern_printk("vfs_rename is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = vfs_rename(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("vfs_rename returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    TRACES_IF_WATCHPOINT(_arg4);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg4)));
    return ret;
})
#endif


#ifndef KERN_ADDR_complete_and_exit
#define APP_WRAPPER_FOR_complete_and_exit
#endif
 
#ifndef APP_WRAPPER_FOR_complete_and_exit
#define APP_WRAPPER_FOR_complete_and_exit
FUNCTION_WRAPPER_VOID(complete_and_exit, (struct completion *_arg1, long _arg2), {
    kern_printk("complete_and_exit is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    complete_and_exit(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("complete_and_exit returned.\n");
})
#endif


#ifndef KERN_ADDR_cap_ptrace_traceme
#define APP_WRAPPER_FOR_cap_ptrace_traceme
#endif
 
#ifndef APP_WRAPPER_FOR_cap_ptrace_traceme
#define APP_WRAPPER_FOR_cap_ptrace_traceme
FUNCTION_WRAPPER(cap_ptrace_traceme, (struct task_struct *parent), {
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(parent)));
    kern_printk("cap_ptrace_traceme is invoked.\n");
    PRE_WRAPPER_FUNC(parent);
    int ret = cap_ptrace_traceme(parent);
    POST_WRAPPER_FUNC(parent);
    kern_printk("cap_ptrace_traceme returned.\n");
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(parent)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_remove_notify_handler
#define APP_WRAPPER_FOR_acpi_remove_notify_handler
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_remove_notify_handler
#define APP_WRAPPER_FOR_acpi_remove_notify_handler
FUNCTION_WRAPPER(acpi_remove_notify_handler, (acpi_handle device, u32 handler_type, acpi_notify_handler handler), {
    WRAP_FUNCTION(handler);
    kern_printk("acpi_remove_notify_handler is invoked.\n");
    PRE_WRAPPER_FUNC(device, handler_type, handler);
    acpi_status ret = acpi_remove_notify_handler(device, handler_type, handler);
    POST_WRAPPER_FUNC(device, handler_type, handler);
    kern_printk("acpi_remove_notify_handler returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_on_each_cpu
#define APP_WRAPPER_FOR_on_each_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_on_each_cpu
#define APP_WRAPPER_FOR_on_each_cpu
FUNCTION_WRAPPER(on_each_cpu, (smp_call_func_t func, void *info, int wait), {
    WRAP_FUNCTION(func);
    kern_printk("on_each_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(func, info, wait);
    int ret = on_each_cpu(func, info, wait);
    POST_WRAPPER_FUNC(func, info, wait);
    kern_printk("on_each_cpu returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_online_pages
#define APP_WRAPPER_FOR_online_pages
#endif
 
#ifndef APP_WRAPPER_FOR_online_pages
#define APP_WRAPPER_FOR_online_pages
FUNCTION_WRAPPER(online_pages, (unsigned long _arg1, unsigned long _arg2, int _arg3), {
    kern_printk("online_pages is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = online_pages(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("online_pages returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_socket_seq_show
#define APP_WRAPPER_FOR_socket_seq_show
#endif
 
#ifndef APP_WRAPPER_FOR_socket_seq_show
#define APP_WRAPPER_FOR_socket_seq_show
FUNCTION_WRAPPER_VOID(socket_seq_show, (struct seq_file *seq), {
    WRAP_RECURSIVE(seq);
    TRACES_IF_WATCHPOINT(seq);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(seq)));
    kern_printk("socket_seq_show is invoked.\n");
    PRE_WRAPPER_FUNC(seq);
    socket_seq_show(seq);
    POST_WRAPPER_FUNC(seq);
    kern_printk("socket_seq_show returned.\n");
    TRACES_IF_WATCHPOINT(seq);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(seq)));
})
#endif


#ifndef KERN_ADDR_find_mergeable_anon_vma
#define APP_WRAPPER_FOR_find_mergeable_anon_vma
#endif
 
#ifndef APP_WRAPPER_FOR_find_mergeable_anon_vma
#define APP_WRAPPER_FOR_find_mergeable_anon_vma
FUNCTION_WRAPPER(find_mergeable_anon_vma, (struct vm_area_struct *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("find_mergeable_anon_vma is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct anon_vma *ret = find_mergeable_anon_vma(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("find_mergeable_anon_vma returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_kobj_ns_type_register
#define APP_WRAPPER_FOR_kobj_ns_type_register
#endif
 
#ifndef APP_WRAPPER_FOR_kobj_ns_type_register
#define APP_WRAPPER_FOR_kobj_ns_type_register
FUNCTION_WRAPPER(kobj_ns_type_register, (const struct kobj_ns_type_operations *ops), {
    WRAP_RECURSIVE(ops);
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(const struct kobj_ns_type_operations)(*(TO_UNWATCHED_ADDRESS(ops)));
    kern_printk("kobj_ns_type_register is invoked.\n");
    PRE_WRAPPER_FUNC(ops);
    int ret = kobj_ns_type_register(ops);
    POST_WRAPPER_FUNC(ops);
    kern_printk("kobj_ns_type_register returned.\n");
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(const struct kobj_ns_type_operations)(*(TO_UNWATCHED_ADDRESS(ops)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_table_put
#define APP_WRAPPER_FOR_dm_table_put
#endif
 
#ifndef APP_WRAPPER_FOR_dm_table_put
#define APP_WRAPPER_FOR_dm_table_put
FUNCTION_WRAPPER_VOID(dm_table_put, (struct dm_table *t), {
    kern_printk("dm_table_put is invoked.\n");
    PRE_WRAPPER_FUNC(t);
    dm_table_put(t);
    POST_WRAPPER_FUNC(t);
    kern_printk("dm_table_put returned.\n");
})
#endif


#ifndef KERN_ADDR_add_swap_extent
#define APP_WRAPPER_FOR_add_swap_extent
#endif
 
#ifndef APP_WRAPPER_FOR_add_swap_extent
#define APP_WRAPPER_FOR_add_swap_extent
FUNCTION_WRAPPER(add_swap_extent, (struct swap_info_struct *sis, unsigned long start_page, unsigned long nr_pages, sector_t start_block), {
    WRAP_RECURSIVE(sis);
    TRACES_IF_WATCHPOINT(sis);
    SCAN_HEAD_FUNC(struct swap_info_struct)(*(TO_UNWATCHED_ADDRESS(sis)));
    kern_printk("add_swap_extent is invoked.\n");
    PRE_WRAPPER_FUNC(sis, start_page, nr_pages, start_block);
    int ret = add_swap_extent(sis, start_page, nr_pages, start_block);
    POST_WRAPPER_FUNC(sis, start_page, nr_pages, start_block);
    kern_printk("add_swap_extent returned.\n");
    TRACES_IF_WATCHPOINT(sis);
    SCAN_HEAD_FUNC(struct swap_info_struct)(*(TO_UNWATCHED_ADDRESS(sis)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kobject_init
#define APP_WRAPPER_FOR_kobject_init
#endif
 
#ifndef APP_WRAPPER_FOR_kobject_init
#define APP_WRAPPER_FOR_kobject_init
FUNCTION_WRAPPER_VOID(kobject_init, (struct kobject *kobj, struct kobj_type *ktype), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    WRAP_RECURSIVE(ktype);
    TRACES_IF_WATCHPOINT(ktype);
    SCAN_HEAD_FUNC(struct kobj_type)(*(TO_UNWATCHED_ADDRESS(ktype)));
    kern_printk("kobject_init is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, ktype);
    kobject_init(kobj, ktype);
    POST_WRAPPER_FUNC(kobj, ktype);
    kern_printk("kobject_init returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    TRACES_IF_WATCHPOINT(ktype);
    SCAN_HEAD_FUNC(struct kobj_type)(*(TO_UNWATCHED_ADDRESS(ktype)));
})
#endif


#ifndef KERN_ADDR_connect_bsp_APIC
#define APP_WRAPPER_FOR_connect_bsp_APIC
#endif
 
#ifndef APP_WRAPPER_FOR_connect_bsp_APIC
#define APP_WRAPPER_FOR_connect_bsp_APIC
FUNCTION_WRAPPER_VOID(connect_bsp_APIC, (), {
    kern_printk("connect_bsp_APIC is invoked.\n");
    PRE_WRAPPER_FUNC();
    connect_bsp_APIC();
    POST_WRAPPER_FUNC();
    kern_printk("connect_bsp_APIC returned.\n");
})
#endif


#ifndef KERN_ADDR_sync_filesystem
#define APP_WRAPPER_FOR_sync_filesystem
#endif
 
#ifndef APP_WRAPPER_FOR_sync_filesystem
#define APP_WRAPPER_FOR_sync_filesystem
FUNCTION_WRAPPER(sync_filesystem, (struct super_block *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("sync_filesystem is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = sync_filesystem(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("sync_filesystem returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kobject_get
#define APP_WRAPPER_FOR_kobject_get
#endif
 
#ifndef APP_WRAPPER_FOR_kobject_get
#define APP_WRAPPER_FOR_kobject_get
FUNCTION_WRAPPER(kobject_get, (struct kobject *kobj), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    kern_printk("kobject_get is invoked.\n");
    PRE_WRAPPER_FUNC(kobj);
    struct kobject *ret = kobject_get(kobj);
    POST_WRAPPER_FUNC(kobj);
    kern_printk("kobject_get returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_access_phys
#define APP_WRAPPER_FOR_generic_access_phys
#endif
 
#ifndef APP_WRAPPER_FOR_generic_access_phys
#define APP_WRAPPER_FOR_generic_access_phys
FUNCTION_WRAPPER(generic_access_phys, (struct vm_area_struct *vma, unsigned long addr, void *buf, int len, int write), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("generic_access_phys is invoked.\n");
    PRE_WRAPPER_FUNC(vma, addr, buf, len, write);
    int ret = generic_access_phys(vma, addr, buf, len, write);
    POST_WRAPPER_FUNC(vma, addr, buf, len, write);
    kern_printk("generic_access_phys returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kswapd_run
#define APP_WRAPPER_FOR_kswapd_run
#endif
 
#ifndef APP_WRAPPER_FOR_kswapd_run
#define APP_WRAPPER_FOR_kswapd_run
FUNCTION_WRAPPER(kswapd_run, (int nid), {
    kern_printk("kswapd_run is invoked.\n");
    PRE_WRAPPER_FUNC(nid);
    int ret = kswapd_run(nid);
    POST_WRAPPER_FUNC(nid);
    kern_printk("kswapd_run returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_vma_interval_tree_remove
#define APP_WRAPPER_FOR_vma_interval_tree_remove
#endif
 
#ifndef APP_WRAPPER_FOR_vma_interval_tree_remove
#define APP_WRAPPER_FOR_vma_interval_tree_remove
FUNCTION_WRAPPER_VOID(vma_interval_tree_remove, (struct vm_area_struct *node, struct rb_root *root), {
    WRAP_RECURSIVE(node);
    TRACES_IF_WATCHPOINT(node);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(node)));
    kern_printk("vma_interval_tree_remove is invoked.\n");
    PRE_WRAPPER_FUNC(node, root);
    vma_interval_tree_remove(node, root);
    POST_WRAPPER_FUNC(node, root);
    kern_printk("vma_interval_tree_remove returned.\n");
    TRACES_IF_WATCHPOINT(node);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(node)));
})
#endif


#ifndef KERN_ADDR_device_rename
#define APP_WRAPPER_FOR_device_rename
#endif
 
#ifndef APP_WRAPPER_FOR_device_rename
#define APP_WRAPPER_FOR_device_rename
FUNCTION_WRAPPER(device_rename, (struct device *dev, const char *new_name), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("device_rename is invoked.\n");
    PRE_WRAPPER_FUNC(dev, new_name);
    int ret = device_rename(dev, new_name);
    POST_WRAPPER_FUNC(dev, new_name);
    kern_printk("device_rename returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_filp_close
#define APP_WRAPPER_FOR_filp_close
#endif
 
#ifndef APP_WRAPPER_FOR_filp_close
#define APP_WRAPPER_FOR_filp_close
FUNCTION_WRAPPER(filp_close, (struct file *_arg1, fl_owner_t id), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("filp_close is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, id);
    int ret = filp_close(_arg1, id);
    POST_WRAPPER_FUNC(_arg1, id);
    kern_printk("filp_close returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_curr_task
#define APP_WRAPPER_FOR_curr_task
#endif
 
#ifndef APP_WRAPPER_FOR_curr_task
#define APP_WRAPPER_FOR_curr_task
FUNCTION_WRAPPER(curr_task, (int cpu), {
    kern_printk("curr_task is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    struct task_struct *ret = curr_task(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("curr_task returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_get_parent
#define APP_WRAPPER_FOR_acpi_get_parent
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_parent
#define APP_WRAPPER_FOR_acpi_get_parent
FUNCTION_WRAPPER(acpi_get_parent, (acpi_handle object, acpi_handle *out_handle), {
    kern_printk("acpi_get_parent is invoked.\n");
    PRE_WRAPPER_FUNC(object, out_handle);
    acpi_status ret = acpi_get_parent(object, out_handle);
    POST_WRAPPER_FUNC(object, out_handle);
    kern_printk("acpi_get_parent returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_writepages
#define APP_WRAPPER_FOR_generic_writepages
#endif
 
#ifndef APP_WRAPPER_FOR_generic_writepages
#define APP_WRAPPER_FOR_generic_writepages
FUNCTION_WRAPPER(generic_writepages, (struct address_space *mapping, struct writeback_control *wbc), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("generic_writepages is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, wbc);
    int ret = generic_writepages(mapping, wbc);
    POST_WRAPPER_FUNC(mapping, wbc);
    kern_printk("generic_writepages returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ht_destroy_irq
#define APP_WRAPPER_FOR_ht_destroy_irq
#endif
 
#ifndef APP_WRAPPER_FOR_ht_destroy_irq
#define APP_WRAPPER_FOR_ht_destroy_irq
FUNCTION_WRAPPER_VOID(ht_destroy_irq, (unsigned int irq), {
    kern_printk("ht_destroy_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq);
    ht_destroy_irq(irq);
    POST_WRAPPER_FUNC(irq);
    kern_printk("ht_destroy_irq returned.\n");
})
#endif


#ifndef KERN_ADDR_enable_IO_APIC
#define APP_WRAPPER_FOR_enable_IO_APIC
#endif
 
#ifndef APP_WRAPPER_FOR_enable_IO_APIC
#define APP_WRAPPER_FOR_enable_IO_APIC
FUNCTION_WRAPPER_VOID(enable_IO_APIC, (), {
    kern_printk("enable_IO_APIC is invoked.\n");
    PRE_WRAPPER_FUNC();
    enable_IO_APIC();
    POST_WRAPPER_FUNC();
    kern_printk("enable_IO_APIC returned.\n");
})
#endif


#ifndef KERN_ADDR_down
#define APP_WRAPPER_FOR_down
#endif
 
#ifndef APP_WRAPPER_FOR_down
#define APP_WRAPPER_FOR_down
FUNCTION_WRAPPER_VOID(down, (struct semaphore *sem), {
    kern_printk("down is invoked.\n");
    PRE_WRAPPER_FUNC(sem);
    down(sem);
    POST_WRAPPER_FUNC(sem);
    kern_printk("down returned.\n");
})
#endif


#ifndef KERN_ADDR_rcu_is_cpu_idle
#define APP_WRAPPER_FOR_rcu_is_cpu_idle
#endif
 
#ifndef APP_WRAPPER_FOR_rcu_is_cpu_idle
#define APP_WRAPPER_FOR_rcu_is_cpu_idle
FUNCTION_WRAPPER(rcu_is_cpu_idle, (), {
    kern_printk("rcu_is_cpu_idle is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = rcu_is_cpu_idle();
    POST_WRAPPER_FUNC();
    kern_printk("rcu_is_cpu_idle returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dma_async_device_unregister
#define APP_WRAPPER_FOR_dma_async_device_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_dma_async_device_unregister
#define APP_WRAPPER_FOR_dma_async_device_unregister
FUNCTION_WRAPPER_VOID(dma_async_device_unregister, (struct dma_device *device), {
    WRAP_RECURSIVE(device);
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct dma_device)(*(TO_UNWATCHED_ADDRESS(device)));
    kern_printk("dma_async_device_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(device);
    dma_async_device_unregister(device);
    POST_WRAPPER_FUNC(device);
    kern_printk("dma_async_device_unregister returned.\n");
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct dma_device)(*(TO_UNWATCHED_ADDRESS(device)));
})
#endif


#ifndef KERN_ADDR_skb_split
#define APP_WRAPPER_FOR_skb_split
#endif
 
#ifndef APP_WRAPPER_FOR_skb_split
#define APP_WRAPPER_FOR_skb_split
FUNCTION_WRAPPER_VOID(skb_split, (struct sk_buff *skb, struct sk_buff *skb1, const u32 len), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_RECURSIVE(skb1);
    TRACES_IF_WATCHPOINT(skb1);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb1)));
    kern_printk("skb_split is invoked.\n");
    PRE_WRAPPER_FUNC(skb, skb1, len);
    skb_split(skb, skb1, len);
    POST_WRAPPER_FUNC(skb, skb1, len);
    kern_printk("skb_split returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    TRACES_IF_WATCHPOINT(skb1);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb1)));
})
#endif


#ifndef KERN_ADDR_pcie_get_mps
#define APP_WRAPPER_FOR_pcie_get_mps
#endif
 
#ifndef APP_WRAPPER_FOR_pcie_get_mps
#define APP_WRAPPER_FOR_pcie_get_mps
FUNCTION_WRAPPER(pcie_get_mps, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pcie_get_mps is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pcie_get_mps(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pcie_get_mps returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_test_revoke
#define APP_WRAPPER_FOR_jbd2_journal_test_revoke
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_test_revoke
#define APP_WRAPPER_FOR_jbd2_journal_test_revoke
FUNCTION_WRAPPER(jbd2_journal_test_revoke, (journal_t *_arg1, unsigned long long _arg2, tid_t _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_test_revoke is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = jbd2_journal_test_revoke(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("jbd2_journal_test_revoke returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_dev_driver
#define APP_WRAPPER_FOR_pci_dev_driver
#endif
 
#ifndef APP_WRAPPER_FOR_pci_dev_driver
#define APP_WRAPPER_FOR_pci_dev_driver
FUNCTION_WRAPPER(pci_dev_driver, (const struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_dev_driver is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    struct pci_driver *ret = pci_dev_driver(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_dev_driver returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ndo_dflt_fdb_dump
#define APP_WRAPPER_FOR_ndo_dflt_fdb_dump
#endif
 
#ifndef APP_WRAPPER_FOR_ndo_dflt_fdb_dump
#define APP_WRAPPER_FOR_ndo_dflt_fdb_dump
FUNCTION_WRAPPER(ndo_dflt_fdb_dump, (struct sk_buff *skb, struct netlink_callback *cb, struct net_device *dev, int idx), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_RECURSIVE(cb);
    TRACES_IF_WATCHPOINT(cb);
    SCAN_HEAD_FUNC(struct netlink_callback)(*(TO_UNWATCHED_ADDRESS(cb)));
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("ndo_dflt_fdb_dump is invoked.\n");
    PRE_WRAPPER_FUNC(skb, cb, dev, idx);
    int ret = ndo_dflt_fdb_dump(skb, cb, dev, idx);
    POST_WRAPPER_FUNC(skb, cb, dev, idx);
    kern_printk("ndo_dflt_fdb_dump returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    TRACES_IF_WATCHPOINT(cb);
    SCAN_HEAD_FUNC(struct netlink_callback)(*(TO_UNWATCHED_ADDRESS(cb)));
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pcie_capability_read_dword
#define APP_WRAPPER_FOR_pcie_capability_read_dword
#endif
 
#ifndef APP_WRAPPER_FOR_pcie_capability_read_dword
#define APP_WRAPPER_FOR_pcie_capability_read_dword
FUNCTION_WRAPPER(pcie_capability_read_dword, (struct pci_dev *dev, int pos, u32 *val), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pcie_capability_read_dword is invoked.\n");
    PRE_WRAPPER_FUNC(dev, pos, val);
    int ret = pcie_capability_read_dword(dev, pos, val);
    POST_WRAPPER_FUNC(dev, pos, val);
    kern_printk("pcie_capability_read_dword returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR___skb_get_rxhash
#define APP_WRAPPER_FOR___skb_get_rxhash
#endif
 
#ifndef APP_WRAPPER_FOR___skb_get_rxhash
#define APP_WRAPPER_FOR___skb_get_rxhash
FUNCTION_WRAPPER_VOID(__skb_get_rxhash, (struct sk_buff *skb), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("__skb_get_rxhash is invoked.\n");
    PRE_WRAPPER_FUNC(skb);
    __skb_get_rxhash(skb);
    POST_WRAPPER_FUNC(skb);
    kern_printk("__skb_get_rxhash returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_compat_sys_mq_getsetattr
#define APP_WRAPPER_FOR_compat_sys_mq_getsetattr
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_mq_getsetattr
#define APP_WRAPPER_FOR_compat_sys_mq_getsetattr
FUNCTION_WRAPPER(compat_sys_mq_getsetattr, (mqd_t mqdes, const struct compat_mq_attr *u_mqstat, struct compat_mq_attr *u_omqstat), {
    kern_printk("compat_sys_mq_getsetattr is invoked.\n");
    PRE_WRAPPER_FUNC(mqdes, u_mqstat, u_omqstat);
    long ret = compat_sys_mq_getsetattr(mqdes, u_mqstat, u_omqstat);
    POST_WRAPPER_FUNC(mqdes, u_mqstat, u_omqstat);
    kern_printk("compat_sys_mq_getsetattr returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_mii_ethtool_gset
#define APP_WRAPPER_FOR_mii_ethtool_gset
#endif
 
#ifndef APP_WRAPPER_FOR_mii_ethtool_gset
#define APP_WRAPPER_FOR_mii_ethtool_gset
FUNCTION_WRAPPER(mii_ethtool_gset, (struct mii_if_info *mii, struct ethtool_cmd *ecmd), {
    WRAP_RECURSIVE(mii);
    TRACES_IF_WATCHPOINT(mii);
    SCAN_HEAD_FUNC(struct mii_if_info)(*(TO_UNWATCHED_ADDRESS(mii)));
    kern_printk("mii_ethtool_gset is invoked.\n");
    PRE_WRAPPER_FUNC(mii, ecmd);
    int ret = mii_ethtool_gset(mii, ecmd);
    POST_WRAPPER_FUNC(mii, ecmd);
    kern_printk("mii_ethtool_gset returned.\n");
    TRACES_IF_WATCHPOINT(mii);
    SCAN_HEAD_FUNC(struct mii_if_info)(*(TO_UNWATCHED_ADDRESS(mii)));
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_can_set_affinity
#define APP_WRAPPER_FOR_irq_can_set_affinity
#endif
 
#ifndef APP_WRAPPER_FOR_irq_can_set_affinity
#define APP_WRAPPER_FOR_irq_can_set_affinity
FUNCTION_WRAPPER(irq_can_set_affinity, (unsigned int irq), {
    kern_printk("irq_can_set_affinity is invoked.\n");
    PRE_WRAPPER_FUNC(irq);
    int ret = irq_can_set_affinity(irq);
    POST_WRAPPER_FUNC(irq);
    kern_printk("irq_can_set_affinity returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_bmap
#define APP_WRAPPER_FOR_jbd2_journal_bmap
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_bmap
#define APP_WRAPPER_FOR_jbd2_journal_bmap
FUNCTION_WRAPPER(jbd2_journal_bmap, (journal_t *_arg1, unsigned long _arg2, unsigned long long *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_bmap is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = jbd2_journal_bmap(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("jbd2_journal_bmap returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_d_splice_alias
#define APP_WRAPPER_FOR_d_splice_alias
#endif
 
#ifndef APP_WRAPPER_FOR_d_splice_alias
#define APP_WRAPPER_FOR_d_splice_alias
FUNCTION_WRAPPER(d_splice_alias, (struct inode *_arg1, struct dentry *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("d_splice_alias is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct dentry *ret = d_splice_alias(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("d_splice_alias returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_disable_wakeup_device_power
#define APP_WRAPPER_FOR_acpi_disable_wakeup_device_power
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_disable_wakeup_device_power
#define APP_WRAPPER_FOR_acpi_disable_wakeup_device_power
FUNCTION_WRAPPER(acpi_disable_wakeup_device_power, (struct acpi_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("acpi_disable_wakeup_device_power is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = acpi_disable_wakeup_device_power(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("acpi_disable_wakeup_device_power returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ntp_clear
#define APP_WRAPPER_FOR_ntp_clear
#endif
 
#ifndef APP_WRAPPER_FOR_ntp_clear
#define APP_WRAPPER_FOR_ntp_clear
FUNCTION_WRAPPER_VOID(ntp_clear, (), {
    kern_printk("ntp_clear is invoked.\n");
    PRE_WRAPPER_FUNC();
    ntp_clear();
    POST_WRAPPER_FUNC();
    kern_printk("ntp_clear returned.\n");
})
#endif


#ifndef KERN_ADDR__raw_spin_unlock_bh
#define APP_WRAPPER_FOR__raw_spin_unlock_bh
#endif
 
#ifndef APP_WRAPPER_FOR__raw_spin_unlock_bh
#define APP_WRAPPER_FOR__raw_spin_unlock_bh
FUNCTION_WRAPPER_VOID(_raw_spin_unlock_bh, (raw_spinlock_t *lock), {
    kern_printk("_raw_spin_unlock_bh is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    _raw_spin_unlock_bh(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("_raw_spin_unlock_bh returned.\n");
})
#endif


#ifndef KERN_ADDR_sysfs_update_group
#define APP_WRAPPER_FOR_sysfs_update_group
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_update_group
#define APP_WRAPPER_FOR_sysfs_update_group
FUNCTION_WRAPPER(sysfs_update_group, (struct kobject *kobj, const struct attribute_group *grp), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    WRAP_RECURSIVE(grp);
    TRACES_IF_WATCHPOINT(grp);
    SCAN_HEAD_FUNC(const struct attribute_group)(*(TO_UNWATCHED_ADDRESS(grp)));
    kern_printk("sysfs_update_group is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, grp);
    int ret = sysfs_update_group(kobj, grp);
    POST_WRAPPER_FUNC(kobj, grp);
    kern_printk("sysfs_update_group returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    TRACES_IF_WATCHPOINT(grp);
    SCAN_HEAD_FUNC(const struct attribute_group)(*(TO_UNWATCHED_ADDRESS(grp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_init_data
#define APP_WRAPPER_FOR_sock_init_data
#endif
 
#ifndef APP_WRAPPER_FOR_sock_init_data
#define APP_WRAPPER_FOR_sock_init_data
FUNCTION_WRAPPER_VOID(sock_init_data, (struct socket *sock, struct sock *sk), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sock_init_data is invoked.\n");
    PRE_WRAPPER_FUNC(sock, sk);
    sock_init_data(sock, sk);
    POST_WRAPPER_FUNC(sock, sk);
    kern_printk("sock_init_data returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR_unregister_netdevice_many
#define APP_WRAPPER_FOR_unregister_netdevice_many
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_netdevice_many
#define APP_WRAPPER_FOR_unregister_netdevice_many
FUNCTION_WRAPPER_VOID(unregister_netdevice_many, (struct list_head *head), {
    kern_printk("unregister_netdevice_many is invoked.\n");
    PRE_WRAPPER_FUNC(head);
    unregister_netdevice_many(head);
    POST_WRAPPER_FUNC(head);
    kern_printk("unregister_netdevice_many returned.\n");
})
#endif


#ifndef KERN_ADDR_hrtimer_start
#define APP_WRAPPER_FOR_hrtimer_start
#endif
 
#ifndef APP_WRAPPER_FOR_hrtimer_start
#define APP_WRAPPER_FOR_hrtimer_start
FUNCTION_WRAPPER(hrtimer_start, (struct hrtimer *timer, ktime_t tim, const enum hrtimer_mode mode), {
    WRAP_RECURSIVE(timer);
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct hrtimer)(*(TO_UNWATCHED_ADDRESS(timer)));
    kern_printk("hrtimer_start is invoked.\n");
    PRE_WRAPPER_FUNC(timer, tim, mode);
    int ret = hrtimer_start(timer, tim, mode);
    POST_WRAPPER_FUNC(timer, tim, mode);
    kern_printk("hrtimer_start returned.\n");
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct hrtimer)(*(TO_UNWATCHED_ADDRESS(timer)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dquot_resume
#define APP_WRAPPER_FOR_dquot_resume
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_resume
#define APP_WRAPPER_FOR_dquot_resume
FUNCTION_WRAPPER(dquot_resume, (struct super_block *sb, int type), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("dquot_resume is invoked.\n");
    PRE_WRAPPER_FUNC(sb, type);
    int ret = dquot_resume(sb, type);
    POST_WRAPPER_FUNC(sb, type);
    kern_printk("dquot_resume returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_netdev_alert
#define APP_WRAPPER_FOR_netdev_alert
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_alert
#define APP_WRAPPER_FOR_netdev_alert
FUNCTION_WRAPPER(netdev_alert, (const struct net_device *dev, const char *format, ...), {
    va_list args__;
    va_start(args__, format);
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    // TODO: variadic arguments
    kern_printk("netdev_alert is invoked.\n");
    PRE_WRAPPER_FUNC(dev, format);
    int ret = netdev_alert(dev, format);
    POST_WRAPPER_FUNC(dev, format);
    kern_printk("netdev_alert returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR___kmalloc_node_track_caller
#define APP_WRAPPER_FOR___kmalloc_node_track_caller
#endif
 
#ifndef APP_WRAPPER_FOR___kmalloc_node_track_caller
#define APP_WRAPPER_FOR___kmalloc_node_track_caller
FUNCTION_WRAPPER(__kmalloc_node_track_caller, (size_t _arg1, gfp_t _arg2, int _arg3, unsigned long _arg4), {
    kern_printk("__kmalloc_node_track_caller is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    void *ret = __kmalloc_node_track_caller(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("__kmalloc_node_track_caller returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_synchronize_srcu_expedited
#define APP_WRAPPER_FOR_synchronize_srcu_expedited
#endif
 
#ifndef APP_WRAPPER_FOR_synchronize_srcu_expedited
#define APP_WRAPPER_FOR_synchronize_srcu_expedited
FUNCTION_WRAPPER_VOID(synchronize_srcu_expedited, (struct srcu_struct *sp), {
    WRAP_RECURSIVE(sp);
    TRACES_IF_WATCHPOINT(sp);
    SCAN_HEAD_FUNC(struct srcu_struct)(*(TO_UNWATCHED_ADDRESS(sp)));
    kern_printk("synchronize_srcu_expedited is invoked.\n");
    PRE_WRAPPER_FUNC(sp);
    synchronize_srcu_expedited(sp);
    POST_WRAPPER_FUNC(sp);
    kern_printk("synchronize_srcu_expedited returned.\n");
    TRACES_IF_WATCHPOINT(sp);
    SCAN_HEAD_FUNC(struct srcu_struct)(*(TO_UNWATCHED_ADDRESS(sp)));
})
#endif


#ifndef KERN_ADDR_pcie_set_mps
#define APP_WRAPPER_FOR_pcie_set_mps
#endif
 
#ifndef APP_WRAPPER_FOR_pcie_set_mps
#define APP_WRAPPER_FOR_pcie_set_mps
FUNCTION_WRAPPER(pcie_set_mps, (struct pci_dev *dev, int mps), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pcie_set_mps is invoked.\n");
    PRE_WRAPPER_FUNC(dev, mps);
    int ret = pcie_set_mps(dev, mps);
    POST_WRAPPER_FUNC(dev, mps);
    kern_printk("pcie_set_mps returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_enable_wakeup_device_power
#define APP_WRAPPER_FOR_acpi_enable_wakeup_device_power
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_enable_wakeup_device_power
#define APP_WRAPPER_FOR_acpi_enable_wakeup_device_power
FUNCTION_WRAPPER(acpi_enable_wakeup_device_power, (struct acpi_device *dev, int state), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("acpi_enable_wakeup_device_power is invoked.\n");
    PRE_WRAPPER_FUNC(dev, state);
    int ret = acpi_enable_wakeup_device_power(dev, state);
    POST_WRAPPER_FUNC(dev, state);
    kern_printk("acpi_enable_wakeup_device_power returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_process_srcu
#define APP_WRAPPER_FOR_process_srcu
#endif
 
#ifndef APP_WRAPPER_FOR_process_srcu
#define APP_WRAPPER_FOR_process_srcu
FUNCTION_WRAPPER_VOID(process_srcu, (struct work_struct *work), {
    WRAP_RECURSIVE(work);
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
    kern_printk("process_srcu is invoked.\n");
    PRE_WRAPPER_FUNC(work);
    process_srcu(work);
    POST_WRAPPER_FUNC(work);
    kern_printk("process_srcu returned.\n");
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
})
#endif


#ifndef KERN_ADDR_pci_clear_master
#define APP_WRAPPER_FOR_pci_clear_master
#endif
 
#ifndef APP_WRAPPER_FOR_pci_clear_master
#define APP_WRAPPER_FOR_pci_clear_master
FUNCTION_WRAPPER_VOID(pci_clear_master, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_clear_master is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pci_clear_master(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_clear_master returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_phy_start
#define APP_WRAPPER_FOR_phy_start
#endif
 
#ifndef APP_WRAPPER_FOR_phy_start
#define APP_WRAPPER_FOR_phy_start
FUNCTION_WRAPPER_VOID(phy_start, (struct phy_device *phydev), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    kern_printk("phy_start is invoked.\n");
    PRE_WRAPPER_FUNC(phydev);
    phy_start(phydev);
    POST_WRAPPER_FUNC(phydev);
    kern_printk("phy_start returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
})
#endif


#ifndef KERN_ADDR_blk_queue_init_tags
#define APP_WRAPPER_FOR_blk_queue_init_tags
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_init_tags
#define APP_WRAPPER_FOR_blk_queue_init_tags
FUNCTION_WRAPPER(blk_queue_init_tags, (struct request_queue *_arg1, int _arg2, struct blk_queue_tag *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct blk_queue_tag)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("blk_queue_init_tags is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = blk_queue_init_tags(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("blk_queue_init_tags returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct blk_queue_tag)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bio_integrity_add_page
#define APP_WRAPPER_FOR_bio_integrity_add_page
#endif
 
#ifndef APP_WRAPPER_FOR_bio_integrity_add_page
#define APP_WRAPPER_FOR_bio_integrity_add_page
FUNCTION_WRAPPER(bio_integrity_add_page, (struct bio *_arg1, struct page *_arg2, unsigned int _arg3, unsigned int _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("bio_integrity_add_page is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = bio_integrity_add_page(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("bio_integrity_add_page returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_clock_t_to_jiffies
#define APP_WRAPPER_FOR_clock_t_to_jiffies
#endif
 
#ifndef APP_WRAPPER_FOR_clock_t_to_jiffies
#define APP_WRAPPER_FOR_clock_t_to_jiffies
FUNCTION_WRAPPER(clock_t_to_jiffies, (unsigned long x), {
    kern_printk("clock_t_to_jiffies is invoked.\n");
    PRE_WRAPPER_FUNC(x);
    long ret = clock_t_to_jiffies(x);
    POST_WRAPPER_FUNC(x);
    kern_printk("clock_t_to_jiffies returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_init_rootfs
#define APP_WRAPPER_FOR_init_rootfs
#endif
 
#ifndef APP_WRAPPER_FOR_init_rootfs
#define APP_WRAPPER_FOR_init_rootfs
FUNCTION_WRAPPER(init_rootfs, (), {
    kern_printk("init_rootfs is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = init_rootfs();
    POST_WRAPPER_FUNC();
    kern_printk("init_rootfs returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_platform_remove_one
#define APP_WRAPPER_FOR_ata_platform_remove_one
#endif
 
#ifndef APP_WRAPPER_FOR_ata_platform_remove_one
#define APP_WRAPPER_FOR_ata_platform_remove_one
FUNCTION_WRAPPER(ata_platform_remove_one, (struct platform_device *pdev), {
    kern_printk("ata_platform_remove_one is invoked.\n");
    PRE_WRAPPER_FUNC(pdev);
    int ret = ata_platform_remove_one(pdev);
    POST_WRAPPER_FUNC(pdev);
    kern_printk("ata_platform_remove_one returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_netif_receive_skb
#define APP_WRAPPER_FOR_netif_receive_skb
#endif
 
#ifndef APP_WRAPPER_FOR_netif_receive_skb
#define APP_WRAPPER_FOR_netif_receive_skb
FUNCTION_WRAPPER(netif_receive_skb, (struct sk_buff *skb), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("netif_receive_skb is invoked.\n");
    PRE_WRAPPER_FUNC(skb);
    int ret = netif_receive_skb(skb);
    POST_WRAPPER_FUNC(skb);
    kern_printk("netif_receive_skb returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_enable
#define APP_WRAPPER_FOR_acpi_enable
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_enable
#define APP_WRAPPER_FOR_acpi_enable
FUNCTION_WRAPPER(acpi_enable, (), {
    kern_printk("acpi_enable is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_status ret = acpi_enable();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_enable returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_abort
#define APP_WRAPPER_FOR_jbd2_journal_abort
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_abort
#define APP_WRAPPER_FOR_jbd2_journal_abort
FUNCTION_WRAPPER_VOID(jbd2_journal_abort, (journal_t *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_abort is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    jbd2_journal_abort(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("jbd2_journal_abort returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR___cond_resched_softirq
#define APP_WRAPPER_FOR___cond_resched_softirq
#endif
 
#ifndef APP_WRAPPER_FOR___cond_resched_softirq
#define APP_WRAPPER_FOR___cond_resched_softirq
FUNCTION_WRAPPER(__cond_resched_softirq, (), {
    kern_printk("__cond_resched_softirq is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = __cond_resched_softirq();
    POST_WRAPPER_FUNC();
    kern_printk("__cond_resched_softirq returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_devtmpfs_delete_node
#define APP_WRAPPER_FOR_devtmpfs_delete_node
#endif
 
#ifndef APP_WRAPPER_FOR_devtmpfs_delete_node
#define APP_WRAPPER_FOR_devtmpfs_delete_node
FUNCTION_WRAPPER(devtmpfs_delete_node, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("devtmpfs_delete_node is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = devtmpfs_delete_node(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("devtmpfs_delete_node returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_set_mdptr
#define APP_WRAPPER_FOR_dm_set_mdptr
#endif
 
#ifndef APP_WRAPPER_FOR_dm_set_mdptr
#define APP_WRAPPER_FOR_dm_set_mdptr
FUNCTION_WRAPPER_VOID(dm_set_mdptr, (struct mapped_device *md, void *ptr), {
    kern_printk("dm_set_mdptr is invoked.\n");
    PRE_WRAPPER_FUNC(md, ptr);
    dm_set_mdptr(md, ptr);
    POST_WRAPPER_FUNC(md, ptr);
    kern_printk("dm_set_mdptr returned.\n");
})
#endif


#ifndef KERN_ADDR_phy_scan_fixups
#define APP_WRAPPER_FOR_phy_scan_fixups
#endif
 
#ifndef APP_WRAPPER_FOR_phy_scan_fixups
#define APP_WRAPPER_FOR_phy_scan_fixups
FUNCTION_WRAPPER(phy_scan_fixups, (struct phy_device *phydev), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    kern_printk("phy_scan_fixups is invoked.\n");
    PRE_WRAPPER_FUNC(phydev);
    int ret = phy_scan_fixups(phydev);
    POST_WRAPPER_FUNC(phydev);
    kern_printk("phy_scan_fixups returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_invalidate_inode_buffers
#define APP_WRAPPER_FOR_invalidate_inode_buffers
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_inode_buffers
#define APP_WRAPPER_FOR_invalidate_inode_buffers
FUNCTION_WRAPPER_VOID(invalidate_inode_buffers, (struct inode *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("invalidate_inode_buffers is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    invalidate_inode_buffers(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("invalidate_inode_buffers returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_posix_lock_file_wait
#define APP_WRAPPER_FOR_posix_lock_file_wait
#endif
 
#ifndef APP_WRAPPER_FOR_posix_lock_file_wait
#define APP_WRAPPER_FOR_posix_lock_file_wait
FUNCTION_WRAPPER(posix_lock_file_wait, (struct file *_arg1, struct file_lock *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("posix_lock_file_wait is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = posix_lock_file_wait(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("posix_lock_file_wait returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_key_fsgid_changed
#define APP_WRAPPER_FOR_key_fsgid_changed
#endif
 
#ifndef APP_WRAPPER_FOR_key_fsgid_changed
#define APP_WRAPPER_FOR_key_fsgid_changed
FUNCTION_WRAPPER_VOID(key_fsgid_changed, (struct task_struct *tsk), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("key_fsgid_changed is invoked.\n");
    PRE_WRAPPER_FUNC(tsk);
    key_fsgid_changed(tsk);
    POST_WRAPPER_FUNC(tsk);
    kern_printk("key_fsgid_changed returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
})
#endif


#ifndef KERN_ADDR___neigh_for_each_release
#define APP_WRAPPER_FOR___neigh_for_each_release
#endif
 
#ifndef APP_WRAPPER_FOR___neigh_for_each_release
#define APP_WRAPPER_FOR___neigh_for_each_release
FUNCTION_WRAPPER_VOID(__neigh_for_each_release, (struct neigh_table *tbl, int (*cb)(struct neighbour *)), {
    WRAP_RECURSIVE(tbl);
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    WRAP_FUNCTION(cb);
    kern_printk("__neigh_for_each_release is invoked.\n");
    PRE_WRAPPER_FUNC(tbl, cb);
    __neigh_for_each_release(tbl, cb);
    POST_WRAPPER_FUNC(tbl, cb);
    kern_printk("__neigh_for_each_release returned.\n");
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
})
#endif


#ifndef KERN_ADDR_native_send_call_func_single_ipi
#define APP_WRAPPER_FOR_native_send_call_func_single_ipi
#endif
 
#ifndef APP_WRAPPER_FOR_native_send_call_func_single_ipi
#define APP_WRAPPER_FOR_native_send_call_func_single_ipi
FUNCTION_WRAPPER_VOID(native_send_call_func_single_ipi, (int cpu), {
    kern_printk("native_send_call_func_single_ipi is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    native_send_call_func_single_ipi(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("native_send_call_func_single_ipi returned.\n");
})
#endif


#ifndef KERN_ADDR___acpi_device_sleep_wake
#define APP_WRAPPER_FOR___acpi_device_sleep_wake
#endif
 
#ifndef APP_WRAPPER_FOR___acpi_device_sleep_wake
#define APP_WRAPPER_FOR___acpi_device_sleep_wake
FUNCTION_WRAPPER(__acpi_device_sleep_wake, (struct acpi_device *_arg1, u32 _arg2, bool _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__acpi_device_sleep_wake is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = __acpi_device_sleep_wake(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("__acpi_device_sleep_wake returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sata_scr_read
#define APP_WRAPPER_FOR_sata_scr_read
#endif
 
#ifndef APP_WRAPPER_FOR_sata_scr_read
#define APP_WRAPPER_FOR_sata_scr_read
FUNCTION_WRAPPER(sata_scr_read, (struct ata_link *link, int reg, u32 *val), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    kern_printk("sata_scr_read is invoked.\n");
    PRE_WRAPPER_FUNC(link, reg, val);
    int ret = sata_scr_read(link, reg, val);
    POST_WRAPPER_FUNC(link, reg, val);
    kern_printk("sata_scr_read returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    return ret;
})
#endif


#ifndef KERN_ADDR_add_swap_count_continuation
#define APP_WRAPPER_FOR_add_swap_count_continuation
#endif
 
#ifndef APP_WRAPPER_FOR_add_swap_count_continuation
#define APP_WRAPPER_FOR_add_swap_count_continuation
FUNCTION_WRAPPER(add_swap_count_continuation, (swp_entry_t _arg1, gfp_t _arg2), {
    kern_printk("add_swap_count_continuation is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = add_swap_count_continuation(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("add_swap_count_continuation returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_queue_merge_bvec
#define APP_WRAPPER_FOR_blk_queue_merge_bvec
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_merge_bvec
#define APP_WRAPPER_FOR_blk_queue_merge_bvec
FUNCTION_WRAPPER_VOID(blk_queue_merge_bvec, (struct request_queue *_arg1, merge_bvec_fn *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_FUNCTION(_arg2);
    kern_printk("blk_queue_merge_bvec is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    blk_queue_merge_bvec(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_queue_merge_bvec returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_writeback_inodes_sb
#define APP_WRAPPER_FOR_writeback_inodes_sb
#endif
 
#ifndef APP_WRAPPER_FOR_writeback_inodes_sb
#define APP_WRAPPER_FOR_writeback_inodes_sb
FUNCTION_WRAPPER_VOID(writeback_inodes_sb, (struct super_block *_arg1, enum wb_reason reason), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("writeback_inodes_sb is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, reason);
    writeback_inodes_sb(_arg1, reason);
    POST_WRAPPER_FUNC(_arg1, reason);
    kern_printk("writeback_inodes_sb returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_memory_present
#define APP_WRAPPER_FOR_memory_present
#endif
 
#ifndef APP_WRAPPER_FOR_memory_present
#define APP_WRAPPER_FOR_memory_present
FUNCTION_WRAPPER_VOID(memory_present, (int nid, unsigned long start, unsigned long end), {
    kern_printk("memory_present is invoked.\n");
    PRE_WRAPPER_FUNC(nid, start, end);
    memory_present(nid, start, end);
    POST_WRAPPER_FUNC(nid, start, end);
    kern_printk("memory_present returned.\n");
})
#endif


#ifndef KERN_ADDR_init_cpu_to_node
#define APP_WRAPPER_FOR_init_cpu_to_node
#endif
 
#ifndef APP_WRAPPER_FOR_init_cpu_to_node
#define APP_WRAPPER_FOR_init_cpu_to_node
FUNCTION_WRAPPER_VOID(init_cpu_to_node, (), {
    kern_printk("init_cpu_to_node is invoked.\n");
    PRE_WRAPPER_FUNC();
    init_cpu_to_node();
    POST_WRAPPER_FUNC();
    kern_printk("init_cpu_to_node returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_unload_table_id
#define APP_WRAPPER_FOR_acpi_unload_table_id
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_unload_table_id
#define APP_WRAPPER_FOR_acpi_unload_table_id
FUNCTION_WRAPPER(acpi_unload_table_id, (acpi_owner_id id), {
    kern_printk("acpi_unload_table_id is invoked.\n");
    PRE_WRAPPER_FUNC(id);
    acpi_status ret = acpi_unload_table_id(id);
    POST_WRAPPER_FUNC(id);
    kern_printk("acpi_unload_table_id returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_strnlen
#define APP_WRAPPER_FOR_strnlen
#endif
 
#ifndef APP_WRAPPER_FOR_strnlen
#define APP_WRAPPER_FOR_strnlen
FUNCTION_WRAPPER(strnlen, (const char *_arg1, __kernel_size_t _arg2), {
    kern_printk("strnlen is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    __kernel_size_t ret = strnlen(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("strnlen returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_machine_power_off
#define APP_WRAPPER_FOR_machine_power_off
#endif
 
#ifndef APP_WRAPPER_FOR_machine_power_off
#define APP_WRAPPER_FOR_machine_power_off
FUNCTION_WRAPPER_VOID(machine_power_off, (), {
    kern_printk("machine_power_off is invoked.\n");
    PRE_WRAPPER_FUNC();
    machine_power_off();
    POST_WRAPPER_FUNC();
    kern_printk("machine_power_off returned.\n");
})
#endif


#ifndef KERN_ADDR___page_symlink
#define APP_WRAPPER_FOR___page_symlink
#endif
 
#ifndef APP_WRAPPER_FOR___page_symlink
#define APP_WRAPPER_FOR___page_symlink
FUNCTION_WRAPPER(__page_symlink, (struct inode *inode, const char *symname, int len, int nofs), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("__page_symlink is invoked.\n");
    PRE_WRAPPER_FUNC(inode, symname, len, nofs);
    int ret = __page_symlink(inode, symname, len, nofs);
    POST_WRAPPER_FUNC(inode, symname, len, nofs);
    kern_printk("__page_symlink returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    return ret;
})
#endif


#ifndef KERN_ADDR_nla_memcmp
#define APP_WRAPPER_FOR_nla_memcmp
#endif
 
#ifndef APP_WRAPPER_FOR_nla_memcmp
#define APP_WRAPPER_FOR_nla_memcmp
FUNCTION_WRAPPER(nla_memcmp, (const struct nlattr *nla, const void *data, size_t size), {
    kern_printk("nla_memcmp is invoked.\n");
    PRE_WRAPPER_FUNC(nla, data, size);
    int ret = nla_memcmp(nla, data, size);
    POST_WRAPPER_FUNC(nla, data, size);
    kern_printk("nla_memcmp returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_wake_from_d3
#define APP_WRAPPER_FOR_pci_wake_from_d3
#endif
 
#ifndef APP_WRAPPER_FOR_pci_wake_from_d3
#define APP_WRAPPER_FOR_pci_wake_from_d3
FUNCTION_WRAPPER(pci_wake_from_d3, (struct pci_dev *dev, bool enable), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_wake_from_d3 is invoked.\n");
    PRE_WRAPPER_FUNC(dev, enable);
    int ret = pci_wake_from_d3(dev, enable);
    POST_WRAPPER_FUNC(dev, enable);
    kern_printk("pci_wake_from_d3 returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_buffer_frozen_trigger
#define APP_WRAPPER_FOR_jbd2_buffer_frozen_trigger
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_buffer_frozen_trigger
#define APP_WRAPPER_FOR_jbd2_buffer_frozen_trigger
FUNCTION_WRAPPER_VOID(jbd2_buffer_frozen_trigger, (struct journal_head *jh, void *mapped_data, struct jbd2_buffer_trigger_type *triggers), {
    WRAP_RECURSIVE(jh);
    TRACES_IF_WATCHPOINT(jh);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(jh)));
    WRAP_RECURSIVE(triggers);
    TRACES_IF_WATCHPOINT(triggers);
    SCAN_HEAD_FUNC(struct jbd2_buffer_trigger_type)(*(TO_UNWATCHED_ADDRESS(triggers)));
    kern_printk("jbd2_buffer_frozen_trigger is invoked.\n");
    PRE_WRAPPER_FUNC(jh, mapped_data, triggers);
    jbd2_buffer_frozen_trigger(jh, mapped_data, triggers);
    POST_WRAPPER_FUNC(jh, mapped_data, triggers);
    kern_printk("jbd2_buffer_frozen_trigger returned.\n");
    TRACES_IF_WATCHPOINT(jh);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(jh)));
    TRACES_IF_WATCHPOINT(triggers);
    SCAN_HEAD_FUNC(struct jbd2_buffer_trigger_type)(*(TO_UNWATCHED_ADDRESS(triggers)));
})
#endif


#ifndef KERN_ADDR_arch_task_cache_init
#define APP_WRAPPER_FOR_arch_task_cache_init
#endif
 
#ifndef APP_WRAPPER_FOR_arch_task_cache_init
#define APP_WRAPPER_FOR_arch_task_cache_init
FUNCTION_WRAPPER_VOID(arch_task_cache_init, (), {
    kern_printk("arch_task_cache_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    arch_task_cache_init();
    POST_WRAPPER_FUNC();
    kern_printk("arch_task_cache_init returned.\n");
})
#endif


#ifndef KERN_ADDR_nf_unregister_hooks
#define APP_WRAPPER_FOR_nf_unregister_hooks
#endif
 
#ifndef APP_WRAPPER_FOR_nf_unregister_hooks
#define APP_WRAPPER_FOR_nf_unregister_hooks
FUNCTION_WRAPPER_VOID(nf_unregister_hooks, (struct nf_hook_ops *reg, unsigned int n), {
    WRAP_RECURSIVE(reg);
    TRACES_IF_WATCHPOINT(reg);
    SCAN_HEAD_FUNC(struct nf_hook_ops)(*(TO_UNWATCHED_ADDRESS(reg)));
    kern_printk("nf_unregister_hooks is invoked.\n");
    PRE_WRAPPER_FUNC(reg, n);
    nf_unregister_hooks(reg, n);
    POST_WRAPPER_FUNC(reg, n);
    kern_printk("nf_unregister_hooks returned.\n");
    TRACES_IF_WATCHPOINT(reg);
    SCAN_HEAD_FUNC(struct nf_hook_ops)(*(TO_UNWATCHED_ADDRESS(reg)));
})
#endif


#ifndef KERN_ADDR_delete_partition
#define APP_WRAPPER_FOR_delete_partition
#endif
 
#ifndef APP_WRAPPER_FOR_delete_partition
#define APP_WRAPPER_FOR_delete_partition
FUNCTION_WRAPPER_VOID(delete_partition, (struct gendisk *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("delete_partition is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    delete_partition(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("delete_partition returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_sk_stop_timer
#define APP_WRAPPER_FOR_sk_stop_timer
#endif
 
#ifndef APP_WRAPPER_FOR_sk_stop_timer
#define APP_WRAPPER_FOR_sk_stop_timer
FUNCTION_WRAPPER_VOID(sk_stop_timer, (struct sock *sk, struct timer_list *timer), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(timer);
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(timer)));
    kern_printk("sk_stop_timer is invoked.\n");
    PRE_WRAPPER_FUNC(sk, timer);
    sk_stop_timer(sk, timer);
    POST_WRAPPER_FUNC(sk, timer);
    kern_printk("sk_stop_timer returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(timer)));
})
#endif


#ifndef KERN_ADDR_irq_move_cleanup_interrupt
#define APP_WRAPPER_FOR_irq_move_cleanup_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_irq_move_cleanup_interrupt
#define APP_WRAPPER_FOR_irq_move_cleanup_interrupt
FUNCTION_WRAPPER_VOID(irq_move_cleanup_interrupt, (), {
    kern_printk("irq_move_cleanup_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC();
    irq_move_cleanup_interrupt();
    POST_WRAPPER_FUNC();
    kern_printk("irq_move_cleanup_interrupt returned.\n");
})
#endif


#ifndef KERN_ADDR_set_pte_vaddr
#define APP_WRAPPER_FOR_set_pte_vaddr
#endif
 
#ifndef APP_WRAPPER_FOR_set_pte_vaddr
#define APP_WRAPPER_FOR_set_pte_vaddr
FUNCTION_WRAPPER_VOID(set_pte_vaddr, (unsigned long vaddr, pte_t pte), {
    kern_printk("set_pte_vaddr is invoked.\n");
    PRE_WRAPPER_FUNC(vaddr, pte);
    set_pte_vaddr(vaddr, pte);
    POST_WRAPPER_FUNC(vaddr, pte);
    kern_printk("set_pte_vaddr returned.\n");
})
#endif


#ifndef KERN_ADDR_idr_init
#define APP_WRAPPER_FOR_idr_init
#endif
 
#ifndef APP_WRAPPER_FOR_idr_init
#define APP_WRAPPER_FOR_idr_init
FUNCTION_WRAPPER_VOID(idr_init, (struct idr *idp), {
    WRAP_RECURSIVE(idp);
    TRACES_IF_WATCHPOINT(idp);
    SCAN_HEAD_FUNC(struct idr)(*(TO_UNWATCHED_ADDRESS(idp)));
    kern_printk("idr_init is invoked.\n");
    PRE_WRAPPER_FUNC(idp);
    idr_init(idp);
    POST_WRAPPER_FUNC(idp);
    kern_printk("idr_init returned.\n");
    TRACES_IF_WATCHPOINT(idp);
    SCAN_HEAD_FUNC(struct idr)(*(TO_UNWATCHED_ADDRESS(idp)));
})
#endif


#ifndef KERN_ADDR_keyring_alloc
#define APP_WRAPPER_FOR_keyring_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_keyring_alloc
#define APP_WRAPPER_FOR_keyring_alloc
FUNCTION_WRAPPER(keyring_alloc, (const char *description, kuid_t uid, kgid_t gid, const struct cred *cred, key_perm_t perm, unsigned long flags, struct key *dest), {
    WRAP_RECURSIVE(cred);
    TRACES_IF_WATCHPOINT(cred);
    SCAN_HEAD_FUNC(const struct cred)(*(TO_UNWATCHED_ADDRESS(cred)));
    kern_printk("keyring_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(description, uid, gid, cred, perm, flags, dest);
    struct key *ret = keyring_alloc(description, uid, gid, cred, perm, flags, dest);
    POST_WRAPPER_FUNC(description, uid, gid, cred, perm, flags, dest);
    kern_printk("keyring_alloc returned.\n");
    TRACES_IF_WATCHPOINT(cred);
    SCAN_HEAD_FUNC(const struct cred)(*(TO_UNWATCHED_ADDRESS(cred)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_disable_local_APIC
#define APP_WRAPPER_FOR_disable_local_APIC
#endif
 
#ifndef APP_WRAPPER_FOR_disable_local_APIC
#define APP_WRAPPER_FOR_disable_local_APIC
FUNCTION_WRAPPER_VOID(disable_local_APIC, (), {
    kern_printk("disable_local_APIC is invoked.\n");
    PRE_WRAPPER_FUNC();
    disable_local_APIC();
    POST_WRAPPER_FUNC();
    kern_printk("disable_local_APIC returned.\n");
})
#endif


#ifndef KERN_ADDR_pcibios_scan_specific_bus
#define APP_WRAPPER_FOR_pcibios_scan_specific_bus
#endif
 
#ifndef APP_WRAPPER_FOR_pcibios_scan_specific_bus
#define APP_WRAPPER_FOR_pcibios_scan_specific_bus
FUNCTION_WRAPPER_VOID(pcibios_scan_specific_bus, (int busn), {
    kern_printk("pcibios_scan_specific_bus is invoked.\n");
    PRE_WRAPPER_FUNC(busn);
    pcibios_scan_specific_bus(busn);
    POST_WRAPPER_FUNC(busn);
    kern_printk("pcibios_scan_specific_bus returned.\n");
})
#endif


#ifndef KERN_ADDR_rt_mutex_getprio
#define APP_WRAPPER_FOR_rt_mutex_getprio
#endif
 
#ifndef APP_WRAPPER_FOR_rt_mutex_getprio
#define APP_WRAPPER_FOR_rt_mutex_getprio
FUNCTION_WRAPPER(rt_mutex_getprio, (struct task_struct *p), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("rt_mutex_getprio is invoked.\n");
    PRE_WRAPPER_FUNC(p);
    int ret = rt_mutex_getprio(p);
    POST_WRAPPER_FUNC(p);
    kern_printk("rt_mutex_getprio returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_setxattr
#define APP_WRAPPER_FOR_vfs_setxattr
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_setxattr
#define APP_WRAPPER_FOR_vfs_setxattr
FUNCTION_WRAPPER(vfs_setxattr, (struct dentry *_arg1, const char *_arg2, const void *_arg3, size_t _arg4, int _arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("vfs_setxattr is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = vfs_setxattr(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("vfs_setxattr returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_d_find_any_alias
#define APP_WRAPPER_FOR_d_find_any_alias
#endif
 
#ifndef APP_WRAPPER_FOR_d_find_any_alias
#define APP_WRAPPER_FOR_d_find_any_alias
FUNCTION_WRAPPER(d_find_any_alias, (struct inode *inode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("d_find_any_alias is invoked.\n");
    PRE_WRAPPER_FUNC(inode);
    struct dentry *ret = d_find_any_alias(inode);
    POST_WRAPPER_FUNC(inode);
    kern_printk("d_find_any_alias returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_try_to_free_swap
#define APP_WRAPPER_FOR_try_to_free_swap
#endif
 
#ifndef APP_WRAPPER_FOR_try_to_free_swap
#define APP_WRAPPER_FOR_try_to_free_swap
FUNCTION_WRAPPER(try_to_free_swap, (struct page *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("try_to_free_swap is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = try_to_free_swap(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("try_to_free_swap returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_device_store_int
#define APP_WRAPPER_FOR_device_store_int
#endif
 
#ifndef APP_WRAPPER_FOR_device_store_int
#define APP_WRAPPER_FOR_device_store_int
FUNCTION_WRAPPER(device_store_int, (struct device *dev, struct device_attribute *attr, const char *buf, size_t count), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(attr);
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(struct device_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    kern_printk("device_store_int is invoked.\n");
    PRE_WRAPPER_FUNC(dev, attr, buf, count);
    ssize_t ret = device_store_int(dev, attr, buf, count);
    POST_WRAPPER_FUNC(dev, attr, buf, count);
    kern_printk("device_store_int returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(struct device_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_request_regions
#define APP_WRAPPER_FOR_pci_request_regions
#endif
 
#ifndef APP_WRAPPER_FOR_pci_request_regions
#define APP_WRAPPER_FOR_pci_request_regions
FUNCTION_WRAPPER(pci_request_regions, (struct pci_dev *_arg1, const char *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("pci_request_regions is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = pci_request_regions(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("pci_request_regions returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dentry_update_name_case
#define APP_WRAPPER_FOR_dentry_update_name_case
#endif
 
#ifndef APP_WRAPPER_FOR_dentry_update_name_case
#define APP_WRAPPER_FOR_dentry_update_name_case
FUNCTION_WRAPPER_VOID(dentry_update_name_case, (struct dentry *_arg1, struct qstr *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("dentry_update_name_case is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    dentry_update_name_case(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("dentry_update_name_case returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_pci_scan_bus
#define APP_WRAPPER_FOR_pci_scan_bus
#endif
 
#ifndef APP_WRAPPER_FOR_pci_scan_bus
#define APP_WRAPPER_FOR_pci_scan_bus
FUNCTION_WRAPPER(pci_scan_bus, (int bus, struct pci_ops *ops, void *sysdata), {
    WRAP_RECURSIVE(ops);
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct pci_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    kern_printk("pci_scan_bus is invoked.\n");
    PRE_WRAPPER_FUNC(bus, ops, sysdata);
    struct pci_bus *ret = pci_scan_bus(bus, ops, sysdata);
    POST_WRAPPER_FUNC(bus, ops, sysdata);
    kern_printk("pci_scan_bus returned.\n");
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct pci_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_check_address_range
#define APP_WRAPPER_FOR_acpi_check_address_range
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_check_address_range
#define APP_WRAPPER_FOR_acpi_check_address_range
FUNCTION_WRAPPER(acpi_check_address_range, (acpi_adr_space_type space_id, acpi_physical_address address, acpi_size length, u8 warn), {
    kern_printk("acpi_check_address_range is invoked.\n");
    PRE_WRAPPER_FUNC(space_id, address, length, warn);
    u32 ret = acpi_check_address_range(space_id, address, length, warn);
    POST_WRAPPER_FUNC(space_id, address, length, warn);
    kern_printk("acpi_check_address_range returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___dma_request_channel
#define APP_WRAPPER_FOR___dma_request_channel
#endif
 
#ifndef APP_WRAPPER_FOR___dma_request_channel
#define APP_WRAPPER_FOR___dma_request_channel
FUNCTION_WRAPPER(__dma_request_channel, (dma_cap_mask_t *mask, dma_filter_fn fn, void *fn_param), {
    WRAP_FUNCTION(fn);
    kern_printk("__dma_request_channel is invoked.\n");
    PRE_WRAPPER_FUNC(mask, fn, fn_param);
    struct dma_chan *ret = __dma_request_channel(mask, fn, fn_param);
    POST_WRAPPER_FUNC(mask, fn, fn_param);
    kern_printk("__dma_request_channel returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_free_netdev
#define APP_WRAPPER_FOR_free_netdev
#endif
 
#ifndef APP_WRAPPER_FOR_free_netdev
#define APP_WRAPPER_FOR_free_netdev
FUNCTION_WRAPPER_VOID(free_netdev, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("free_netdev is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    free_netdev(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("free_netdev returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR___module_text_address
#define APP_WRAPPER_FOR___module_text_address
#endif
 
#ifndef APP_WRAPPER_FOR___module_text_address
#define APP_WRAPPER_FOR___module_text_address
FUNCTION_WRAPPER(__module_text_address, (unsigned long addr), {
    kern_printk("__module_text_address is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    struct module *ret = __module_text_address(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("__module_text_address returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_request_resource_conflict
#define APP_WRAPPER_FOR_request_resource_conflict
#endif
 
#ifndef APP_WRAPPER_FOR_request_resource_conflict
#define APP_WRAPPER_FOR_request_resource_conflict
FUNCTION_WRAPPER(request_resource_conflict, (struct resource *root, struct resource *new_), {
    kern_printk("request_resource_conflict is invoked.\n");
    PRE_WRAPPER_FUNC(root, new_);
    struct resource *ret = request_resource_conflict(root, new_);
    POST_WRAPPER_FUNC(root, new_);
    kern_printk("request_resource_conflict returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_elv_former_request
#define APP_WRAPPER_FOR_elv_former_request
#endif
 
#ifndef APP_WRAPPER_FOR_elv_former_request
#define APP_WRAPPER_FOR_elv_former_request
FUNCTION_WRAPPER(elv_former_request, (struct request_queue *_arg1, struct request *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("elv_former_request is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct request *ret = elv_former_request(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("elv_former_request returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_schedule_work
#define APP_WRAPPER_FOR_schedule_work
#endif
 
#ifndef APP_WRAPPER_FOR_schedule_work
#define APP_WRAPPER_FOR_schedule_work
FUNCTION_WRAPPER(schedule_work, (struct work_struct *work), {
    WRAP_RECURSIVE(work);
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
    kern_printk("schedule_work is invoked.\n");
    PRE_WRAPPER_FUNC(work);
    bool ret = schedule_work(work);
    POST_WRAPPER_FUNC(work);
    kern_printk("schedule_work returned.\n");
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kstrtol_from_user
#define APP_WRAPPER_FOR_kstrtol_from_user
#endif
 
#ifndef APP_WRAPPER_FOR_kstrtol_from_user
#define APP_WRAPPER_FOR_kstrtol_from_user
FUNCTION_WRAPPER(kstrtol_from_user, (const char *s, size_t count, unsigned int base, long *res), {
    kern_printk("kstrtol_from_user is invoked.\n");
    PRE_WRAPPER_FUNC(s, count, base, res);
    int ret = kstrtol_from_user(s, count, base, res);
    POST_WRAPPER_FUNC(s, count, base, res);
    kern_printk("kstrtol_from_user returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_d_move
#define APP_WRAPPER_FOR_d_move
#endif
 
#ifndef APP_WRAPPER_FOR_d_move
#define APP_WRAPPER_FOR_d_move
FUNCTION_WRAPPER_VOID(d_move, (struct dentry *_arg1, struct dentry *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("d_move is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    d_move(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("d_move returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_kernel_accept
#define APP_WRAPPER_FOR_kernel_accept
#endif
 
#ifndef APP_WRAPPER_FOR_kernel_accept
#define APP_WRAPPER_FOR_kernel_accept
FUNCTION_WRAPPER(kernel_accept, (struct socket *sock, struct socket **newsock, int flags), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    WRAP_RECURSIVE(newsock);
    TRACES_IF_WATCHPOINT(newsock);
    SCAN_HEAD_FUNC(struct socket *)(*(TO_UNWATCHED_ADDRESS(newsock)));
    kern_printk("kernel_accept is invoked.\n");
    PRE_WRAPPER_FUNC(sock, newsock, flags);
    int ret = kernel_accept(sock, newsock, flags);
    POST_WRAPPER_FUNC(sock, newsock, flags);
    kern_printk("kernel_accept returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    TRACES_IF_WATCHPOINT(newsock);
    SCAN_HEAD_FUNC(struct socket *)(*(TO_UNWATCHED_ADDRESS(newsock)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_initialize
#define APP_WRAPPER_FOR_acpi_os_initialize
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_initialize
#define APP_WRAPPER_FOR_acpi_os_initialize
FUNCTION_WRAPPER(acpi_os_initialize, (), {
    kern_printk("acpi_os_initialize is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_status ret = acpi_os_initialize();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_os_initialize returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_io_getevents
#define APP_WRAPPER_FOR_compat_sys_io_getevents
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_io_getevents
#define APP_WRAPPER_FOR_compat_sys_io_getevents
FUNCTION_WRAPPER(compat_sys_io_getevents, (aio_context_t ctx_id, unsigned long min_nr, unsigned long nr, struct io_event *events, struct compat_timespec *timeout), {
    kern_printk("compat_sys_io_getevents is invoked.\n");
    PRE_WRAPPER_FUNC(ctx_id, min_nr, nr, events, timeout);
    long ret = compat_sys_io_getevents(ctx_id, min_nr, nr, events, timeout);
    POST_WRAPPER_FUNC(ctx_id, min_nr, nr, events, timeout);
    kern_printk("compat_sys_io_getevents returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_register_acpi_bus_type
#define APP_WRAPPER_FOR_register_acpi_bus_type
#endif
 
#ifndef APP_WRAPPER_FOR_register_acpi_bus_type
#define APP_WRAPPER_FOR_register_acpi_bus_type
FUNCTION_WRAPPER(register_acpi_bus_type, (struct acpi_bus_type *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct acpi_bus_type)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("register_acpi_bus_type is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = register_acpi_bus_type(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("register_acpi_bus_type returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct acpi_bus_type)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_iowrite8
#define APP_WRAPPER_FOR_iowrite8
#endif
 
#ifndef APP_WRAPPER_FOR_iowrite8
#define APP_WRAPPER_FOR_iowrite8
FUNCTION_WRAPPER_VOID(iowrite8, (u8 _arg1, void *_arg2), {
    kern_printk("iowrite8 is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    iowrite8(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("iowrite8 returned.\n");
})
#endif


#ifndef KERN_ADDR_irq_enter
#define APP_WRAPPER_FOR_irq_enter
#endif
 
#ifndef APP_WRAPPER_FOR_irq_enter
#define APP_WRAPPER_FOR_irq_enter
FUNCTION_WRAPPER_VOID(irq_enter, (), {
    kern_printk("irq_enter is invoked.\n");
    PRE_WRAPPER_FUNC();
    irq_enter();
    POST_WRAPPER_FUNC();
    kern_printk("irq_enter returned.\n");
})
#endif


#ifndef KERN_ADDR_page_cache_sync_readahead
#define APP_WRAPPER_FOR_page_cache_sync_readahead
#endif
 
#ifndef APP_WRAPPER_FOR_page_cache_sync_readahead
#define APP_WRAPPER_FOR_page_cache_sync_readahead
FUNCTION_WRAPPER_VOID(page_cache_sync_readahead, (struct address_space *mapping, struct file_ra_state *ra, struct file *filp, unsigned long offset, unsigned long size), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    WRAP_RECURSIVE(filp);
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    kern_printk("page_cache_sync_readahead is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, ra, filp, offset, size);
    page_cache_sync_readahead(mapping, ra, filp, offset, size);
    POST_WRAPPER_FUNC(mapping, ra, filp, offset, size);
    kern_printk("page_cache_sync_readahead returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
})
#endif


#ifndef KERN_ADDR_blk_queue_bounce_limit
#define APP_WRAPPER_FOR_blk_queue_bounce_limit
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_bounce_limit
#define APP_WRAPPER_FOR_blk_queue_bounce_limit
FUNCTION_WRAPPER_VOID(blk_queue_bounce_limit, (struct request_queue *_arg1, u64 _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_queue_bounce_limit is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    blk_queue_bounce_limit(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_queue_bounce_limit returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_strnicmp
#define APP_WRAPPER_FOR_strnicmp
#endif
 
#ifndef APP_WRAPPER_FOR_strnicmp
#define APP_WRAPPER_FOR_strnicmp
FUNCTION_WRAPPER(strnicmp, (const char *_arg1, const char *_arg2, __kernel_size_t _arg3), {
    kern_printk("strnicmp is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = strnicmp(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("strnicmp returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_no_ioctl
#define APP_WRAPPER_FOR_sock_no_ioctl
#endif
 
#ifndef APP_WRAPPER_FOR_sock_no_ioctl
#define APP_WRAPPER_FOR_sock_no_ioctl
FUNCTION_WRAPPER(sock_no_ioctl, (struct socket *_arg1, unsigned int _arg2, unsigned long _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("sock_no_ioctl is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = sock_no_ioctl(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("sock_no_ioctl returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_requeue_unmapped_request
#define APP_WRAPPER_FOR_dm_requeue_unmapped_request
#endif
 
#ifndef APP_WRAPPER_FOR_dm_requeue_unmapped_request
#define APP_WRAPPER_FOR_dm_requeue_unmapped_request
FUNCTION_WRAPPER_VOID(dm_requeue_unmapped_request, (struct request *rq), {
    WRAP_RECURSIVE(rq);
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    kern_printk("dm_requeue_unmapped_request is invoked.\n");
    PRE_WRAPPER_FUNC(rq);
    dm_requeue_unmapped_request(rq);
    POST_WRAPPER_FUNC(rq);
    kern_printk("dm_requeue_unmapped_request returned.\n");
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
})
#endif


#ifndef KERN_ADDR_native_teardown_msi_irq
#define APP_WRAPPER_FOR_native_teardown_msi_irq
#endif
 
#ifndef APP_WRAPPER_FOR_native_teardown_msi_irq
#define APP_WRAPPER_FOR_native_teardown_msi_irq
FUNCTION_WRAPPER_VOID(native_teardown_msi_irq, (unsigned int irq), {
    kern_printk("native_teardown_msi_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq);
    native_teardown_msi_irq(irq);
    POST_WRAPPER_FUNC(irq);
    kern_printk("native_teardown_msi_irq returned.\n");
})
#endif


#ifndef KERN_ADDR_show_regs_common
#define APP_WRAPPER_FOR_show_regs_common
#endif
 
#ifndef APP_WRAPPER_FOR_show_regs_common
#define APP_WRAPPER_FOR_show_regs_common
FUNCTION_WRAPPER_VOID(show_regs_common, (), {
    kern_printk("show_regs_common is invoked.\n");
    PRE_WRAPPER_FUNC();
    show_regs_common();
    POST_WRAPPER_FUNC();
    kern_printk("show_regs_common returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_get_node
#define APP_WRAPPER_FOR_acpi_get_node
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_node
#define APP_WRAPPER_FOR_acpi_get_node
FUNCTION_WRAPPER(acpi_get_node, (acpi_handle *handle), {
    kern_printk("acpi_get_node is invoked.\n");
    PRE_WRAPPER_FUNC(handle);
    int ret = acpi_get_node(handle);
    POST_WRAPPER_FUNC(handle);
    kern_printk("acpi_get_node returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___bitmap_full
#define APP_WRAPPER_FOR___bitmap_full
#endif
 
#ifndef APP_WRAPPER_FOR___bitmap_full
#define APP_WRAPPER_FOR___bitmap_full
FUNCTION_WRAPPER(__bitmap_full, (unsigned const long *bitmap, int bits), {
    kern_printk("__bitmap_full is invoked.\n");
    PRE_WRAPPER_FUNC(bitmap, bits);
    int ret = __bitmap_full(bitmap, bits);
    POST_WRAPPER_FUNC(bitmap, bits);
    kern_printk("__bitmap_full returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_filemap_write_and_wait_range
#define APP_WRAPPER_FOR_filemap_write_and_wait_range
#endif
 
#ifndef APP_WRAPPER_FOR_filemap_write_and_wait_range
#define APP_WRAPPER_FOR_filemap_write_and_wait_range
FUNCTION_WRAPPER(filemap_write_and_wait_range, (struct address_space *mapping, loff_t lstart, loff_t lend), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("filemap_write_and_wait_range is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, lstart, lend);
    int ret = filemap_write_and_wait_range(mapping, lstart, lend);
    POST_WRAPPER_FUNC(mapping, lstart, lend);
    kern_printk("filemap_write_and_wait_range returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_getrusage
#define APP_WRAPPER_FOR_compat_sys_getrusage
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_getrusage
#define APP_WRAPPER_FOR_compat_sys_getrusage
FUNCTION_WRAPPER(compat_sys_getrusage, (int who, struct compat_rusage *ru), {
    kern_printk("compat_sys_getrusage is invoked.\n");
    PRE_WRAPPER_FUNC(who, ru);
    long ret = compat_sys_getrusage(who, ru);
    POST_WRAPPER_FUNC(who, ru);
    kern_printk("compat_sys_getrusage returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_update_all_gpes
#define APP_WRAPPER_FOR_acpi_update_all_gpes
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_update_all_gpes
#define APP_WRAPPER_FOR_acpi_update_all_gpes
FUNCTION_WRAPPER(acpi_update_all_gpes, (), {
    kern_printk("acpi_update_all_gpes is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_status ret = acpi_update_all_gpes();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_update_all_gpes returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_kern_path_locked
#define APP_WRAPPER_FOR_kern_path_locked
#endif
 
#ifndef APP_WRAPPER_FOR_kern_path_locked
#define APP_WRAPPER_FOR_kern_path_locked
FUNCTION_WRAPPER(kern_path_locked, (const char *_arg1, struct path *_arg2), {
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("kern_path_locked is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct dentry *ret = kern_path_locked(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("kern_path_locked returned.\n");
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_do_fallocate
#define APP_WRAPPER_FOR_do_fallocate
#endif
 
#ifndef APP_WRAPPER_FOR_do_fallocate
#define APP_WRAPPER_FOR_do_fallocate
FUNCTION_WRAPPER(do_fallocate, (struct file *file, int mode, loff_t offset, loff_t len), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("do_fallocate is invoked.\n");
    PRE_WRAPPER_FUNC(file, mode, offset, len);
    int ret = do_fallocate(file, mode, offset, len);
    POST_WRAPPER_FUNC(file, mode, offset, len);
    kern_printk("do_fallocate returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_crypto_ahash_digest
#define APP_WRAPPER_FOR_crypto_ahash_digest
#endif
 
#ifndef APP_WRAPPER_FOR_crypto_ahash_digest
#define APP_WRAPPER_FOR_crypto_ahash_digest
FUNCTION_WRAPPER(crypto_ahash_digest, (struct ahash_request *req), {
    WRAP_RECURSIVE(req);
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct ahash_request)(*(TO_UNWATCHED_ADDRESS(req)));
    kern_printk("crypto_ahash_digest is invoked.\n");
    PRE_WRAPPER_FUNC(req);
    int ret = crypto_ahash_digest(req);
    POST_WRAPPER_FUNC(req);
    kern_printk("crypto_ahash_digest returned.\n");
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct ahash_request)(*(TO_UNWATCHED_ADDRESS(req)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pm_generic_thaw
#define APP_WRAPPER_FOR_pm_generic_thaw
#endif
 
#ifndef APP_WRAPPER_FOR_pm_generic_thaw
#define APP_WRAPPER_FOR_pm_generic_thaw
FUNCTION_WRAPPER(pm_generic_thaw, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pm_generic_thaw is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pm_generic_thaw(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pm_generic_thaw returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_hp_create_module_link
#define APP_WRAPPER_FOR_pci_hp_create_module_link
#endif
 
#ifndef APP_WRAPPER_FOR_pci_hp_create_module_link
#define APP_WRAPPER_FOR_pci_hp_create_module_link
FUNCTION_WRAPPER_VOID(pci_hp_create_module_link, (struct pci_slot *pci_slot), {
    WRAP_RECURSIVE(pci_slot);
    TRACES_IF_WATCHPOINT(pci_slot);
    SCAN_HEAD_FUNC(struct pci_slot)(*(TO_UNWATCHED_ADDRESS(pci_slot)));
    kern_printk("pci_hp_create_module_link is invoked.\n");
    PRE_WRAPPER_FUNC(pci_slot);
    pci_hp_create_module_link(pci_slot);
    POST_WRAPPER_FUNC(pci_slot);
    kern_printk("pci_hp_create_module_link returned.\n");
    TRACES_IF_WATCHPOINT(pci_slot);
    SCAN_HEAD_FUNC(struct pci_slot)(*(TO_UNWATCHED_ADDRESS(pci_slot)));
})
#endif


#ifndef KERN_ADDR_f_setown
#define APP_WRAPPER_FOR_f_setown
#endif
 
#ifndef APP_WRAPPER_FOR_f_setown
#define APP_WRAPPER_FOR_f_setown
FUNCTION_WRAPPER(f_setown, (struct file *filp, unsigned long arg, int force), {
    WRAP_RECURSIVE(filp);
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    kern_printk("f_setown is invoked.\n");
    PRE_WRAPPER_FUNC(filp, arg, force);
    int ret = f_setown(filp, arg, force);
    POST_WRAPPER_FUNC(filp, arg, force);
    kern_printk("f_setown returned.\n");
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_pm_put_subsys_data
#define APP_WRAPPER_FOR_dev_pm_put_subsys_data
#endif
 
#ifndef APP_WRAPPER_FOR_dev_pm_put_subsys_data
#define APP_WRAPPER_FOR_dev_pm_put_subsys_data
FUNCTION_WRAPPER(dev_pm_put_subsys_data, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_pm_put_subsys_data is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = dev_pm_put_subsys_data(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_pm_put_subsys_data returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_strcasecmp
#define APP_WRAPPER_FOR_strcasecmp
#endif
 
#ifndef APP_WRAPPER_FOR_strcasecmp
#define APP_WRAPPER_FOR_strcasecmp
FUNCTION_WRAPPER(strcasecmp, (const char *s1, const char *s2), {
    kern_printk("strcasecmp is invoked.\n");
    PRE_WRAPPER_FUNC(s1, s2);
    int ret = strcasecmp(s1, s2);
    POST_WRAPPER_FUNC(s1, s2);
    kern_printk("strcasecmp returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_msrs_alloc
#define APP_WRAPPER_FOR_msrs_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_msrs_alloc
#define APP_WRAPPER_FOR_msrs_alloc
FUNCTION_WRAPPER(msrs_alloc, (), {
    kern_printk("msrs_alloc is invoked.\n");
    PRE_WRAPPER_FUNC();
    struct msr *ret = msrs_alloc();
    POST_WRAPPER_FUNC();
    kern_printk("msrs_alloc returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_get_unmapped_area
#define APP_WRAPPER_FOR_get_unmapped_area
#endif
 
#ifndef APP_WRAPPER_FOR_get_unmapped_area
#define APP_WRAPPER_FOR_get_unmapped_area
FUNCTION_WRAPPER(get_unmapped_area, (struct file *_arg1, unsigned long _arg2, unsigned long _arg3, unsigned long _arg4, unsigned long _arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("get_unmapped_area is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    long ret = get_unmapped_area(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("get_unmapped_area returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_subsys_interface_unregister
#define APP_WRAPPER_FOR_subsys_interface_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_subsys_interface_unregister
#define APP_WRAPPER_FOR_subsys_interface_unregister
FUNCTION_WRAPPER_VOID(subsys_interface_unregister, (struct subsys_interface *sif), {
    WRAP_RECURSIVE(sif);
    TRACES_IF_WATCHPOINT(sif);
    SCAN_HEAD_FUNC(struct subsys_interface)(*(TO_UNWATCHED_ADDRESS(sif)));
    kern_printk("subsys_interface_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(sif);
    subsys_interface_unregister(sif);
    POST_WRAPPER_FUNC(sif);
    kern_printk("subsys_interface_unregister returned.\n");
    TRACES_IF_WATCHPOINT(sif);
    SCAN_HEAD_FUNC(struct subsys_interface)(*(TO_UNWATCHED_ADDRESS(sif)));
})
#endif


#ifndef KERN_ADDR_acpi_install_global_event_handler
#define APP_WRAPPER_FOR_acpi_install_global_event_handler
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_install_global_event_handler
#define APP_WRAPPER_FOR_acpi_install_global_event_handler
FUNCTION_WRAPPER(acpi_install_global_event_handler, (acpi_gbl_event_handler handler, void *context), {
    WRAP_FUNCTION(handler);
    kern_printk("acpi_install_global_event_handler is invoked.\n");
    PRE_WRAPPER_FUNC(handler, context);
    acpi_status ret = acpi_install_global_event_handler(handler, context);
    POST_WRAPPER_FUNC(handler, context);
    kern_printk("acpi_install_global_event_handler returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___bitmap_andnot
#define APP_WRAPPER_FOR___bitmap_andnot
#endif
 
#ifndef APP_WRAPPER_FOR___bitmap_andnot
#define APP_WRAPPER_FOR___bitmap_andnot
FUNCTION_WRAPPER(__bitmap_andnot, (unsigned long *dst, unsigned const long *bitmap1, unsigned const long *bitmap2, int bits), {
    kern_printk("__bitmap_andnot is invoked.\n");
    PRE_WRAPPER_FUNC(dst, bitmap1, bitmap2, bits);
    int ret = __bitmap_andnot(dst, bitmap1, bitmap2, bits);
    POST_WRAPPER_FUNC(dst, bitmap1, bitmap2, bits);
    kern_printk("__bitmap_andnot returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_default_banner
#define APP_WRAPPER_FOR_default_banner
#endif
 
#ifndef APP_WRAPPER_FOR_default_banner
#define APP_WRAPPER_FOR_default_banner
FUNCTION_WRAPPER_VOID(default_banner, (), {
    kern_printk("default_banner is invoked.\n");
    PRE_WRAPPER_FUNC();
    default_banner();
    POST_WRAPPER_FUNC();
    kern_printk("default_banner returned.\n");
})
#endif


#ifndef KERN_ADDR_ata_sas_scsi_ioctl
#define APP_WRAPPER_FOR_ata_sas_scsi_ioctl
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sas_scsi_ioctl
#define APP_WRAPPER_FOR_ata_sas_scsi_ioctl
FUNCTION_WRAPPER(ata_sas_scsi_ioctl, (struct ata_port *ap, struct scsi_device *dev, int cmd, void *arg), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_sas_scsi_ioctl is invoked.\n");
    PRE_WRAPPER_FUNC(ap, dev, cmd, arg);
    int ret = ata_sas_scsi_ioctl(ap, dev, cmd, arg);
    POST_WRAPPER_FUNC(ap, dev, cmd, arg);
    kern_printk("ata_sas_scsi_ioctl returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_limits_io_opt
#define APP_WRAPPER_FOR_blk_limits_io_opt
#endif
 
#ifndef APP_WRAPPER_FOR_blk_limits_io_opt
#define APP_WRAPPER_FOR_blk_limits_io_opt
FUNCTION_WRAPPER_VOID(blk_limits_io_opt, (struct queue_limits *limits, unsigned int opt), {
    kern_printk("blk_limits_io_opt is invoked.\n");
    PRE_WRAPPER_FUNC(limits, opt);
    blk_limits_io_opt(limits, opt);
    POST_WRAPPER_FUNC(limits, opt);
    kern_printk("blk_limits_io_opt returned.\n");
})
#endif


#ifndef KERN_ADDR___virt_addr_valid
#define APP_WRAPPER_FOR___virt_addr_valid
#endif
 
#ifndef APP_WRAPPER_FOR___virt_addr_valid
#define APP_WRAPPER_FOR___virt_addr_valid
FUNCTION_WRAPPER(__virt_addr_valid, (unsigned long kaddr), {
    kern_printk("__virt_addr_valid is invoked.\n");
    PRE_WRAPPER_FUNC(kaddr);
    bool ret = __virt_addr_valid(kaddr);
    POST_WRAPPER_FUNC(kaddr);
    kern_printk("__virt_addr_valid returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_bitmap_copy_le
#define APP_WRAPPER_FOR_bitmap_copy_le
#endif
 
#ifndef APP_WRAPPER_FOR_bitmap_copy_le
#define APP_WRAPPER_FOR_bitmap_copy_le
FUNCTION_WRAPPER_VOID(bitmap_copy_le, (void *dst, unsigned const long *src, int nbits), {
    kern_printk("bitmap_copy_le is invoked.\n");
    PRE_WRAPPER_FUNC(dst, src, nbits);
    bitmap_copy_le(dst, src, nbits);
    POST_WRAPPER_FUNC(dst, src, nbits);
    kern_printk("bitmap_copy_le returned.\n");
})
#endif


#ifndef KERN_ADDR_recalc_sigpending
#define APP_WRAPPER_FOR_recalc_sigpending
#endif
 
#ifndef APP_WRAPPER_FOR_recalc_sigpending
#define APP_WRAPPER_FOR_recalc_sigpending
FUNCTION_WRAPPER_VOID(recalc_sigpending, (), {
    kern_printk("recalc_sigpending is invoked.\n");
    PRE_WRAPPER_FUNC();
    recalc_sigpending();
    POST_WRAPPER_FUNC();
    kern_printk("recalc_sigpending returned.\n");
})
#endif


#ifndef KERN_ADDR_key_update
#define APP_WRAPPER_FOR_key_update
#endif
 
#ifndef APP_WRAPPER_FOR_key_update
#define APP_WRAPPER_FOR_key_update
FUNCTION_WRAPPER(key_update, (key_ref_t key, const void *payload, size_t plen), {
    kern_printk("key_update is invoked.\n");
    PRE_WRAPPER_FUNC(key, payload, plen);
    int ret = key_update(key, payload, plen);
    POST_WRAPPER_FUNC(key, payload, plen);
    kern_printk("key_update returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_remap_pfn_range
#define APP_WRAPPER_FOR_remap_pfn_range
#endif
 
#ifndef APP_WRAPPER_FOR_remap_pfn_range
#define APP_WRAPPER_FOR_remap_pfn_range
FUNCTION_WRAPPER(remap_pfn_range, (struct vm_area_struct *_arg1, unsigned long addr, unsigned long pfn, unsigned long size, pgprot_t _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("remap_pfn_range is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, addr, pfn, size, _arg2);
    int ret = remap_pfn_range(_arg1, addr, pfn, size, _arg2);
    POST_WRAPPER_FUNC(_arg1, addr, pfn, size, _arg2);
    kern_printk("remap_pfn_range returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_set_dma_seg_boundary
#define APP_WRAPPER_FOR_pci_set_dma_seg_boundary
#endif
 
#ifndef APP_WRAPPER_FOR_pci_set_dma_seg_boundary
#define APP_WRAPPER_FOR_pci_set_dma_seg_boundary
FUNCTION_WRAPPER(pci_set_dma_seg_boundary, (struct pci_dev *dev, unsigned long mask), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_set_dma_seg_boundary is invoked.\n");
    PRE_WRAPPER_FUNC(dev, mask);
    int ret = pci_set_dma_seg_boundary(dev, mask);
    POST_WRAPPER_FUNC(dev, mask);
    kern_printk("pci_set_dma_seg_boundary returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pvclock_read_wallclock
#define APP_WRAPPER_FOR_pvclock_read_wallclock
#endif
 
#ifndef APP_WRAPPER_FOR_pvclock_read_wallclock
#define APP_WRAPPER_FOR_pvclock_read_wallclock
FUNCTION_WRAPPER_VOID(pvclock_read_wallclock, (struct pvclock_wall_clock *wall, struct pvclock_vcpu_time_info *vcpu, struct timespec *ts), {
    kern_printk("pvclock_read_wallclock is invoked.\n");
    PRE_WRAPPER_FUNC(wall, vcpu, ts);
    pvclock_read_wallclock(wall, vcpu, ts);
    POST_WRAPPER_FUNC(wall, vcpu, ts);
    kern_printk("pvclock_read_wallclock returned.\n");
})
#endif


#ifndef KERN_ADDR_securityfs_create_dir
#define APP_WRAPPER_FOR_securityfs_create_dir
#endif
 
#ifndef APP_WRAPPER_FOR_securityfs_create_dir
#define APP_WRAPPER_FOR_securityfs_create_dir
FUNCTION_WRAPPER(securityfs_create_dir, (const char *name, struct dentry *parent), {
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(parent)));
    kern_printk("securityfs_create_dir is invoked.\n");
    PRE_WRAPPER_FUNC(name, parent);
    struct dentry *ret = securityfs_create_dir(name, parent);
    POST_WRAPPER_FUNC(name, parent);
    kern_printk("securityfs_create_dir returned.\n");
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(parent)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_e820_reserve_resources
#define APP_WRAPPER_FOR_e820_reserve_resources
#endif
 
#ifndef APP_WRAPPER_FOR_e820_reserve_resources
#define APP_WRAPPER_FOR_e820_reserve_resources
FUNCTION_WRAPPER_VOID(e820_reserve_resources, (), {
    kern_printk("e820_reserve_resources is invoked.\n");
    PRE_WRAPPER_FUNC();
    e820_reserve_resources();
    POST_WRAPPER_FUNC();
    kern_printk("e820_reserve_resources returned.\n");
})
#endif


#ifndef KERN_ADDR_phy_stop_machine
#define APP_WRAPPER_FOR_phy_stop_machine
#endif
 
#ifndef APP_WRAPPER_FOR_phy_stop_machine
#define APP_WRAPPER_FOR_phy_stop_machine
FUNCTION_WRAPPER_VOID(phy_stop_machine, (struct phy_device *phydev), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    kern_printk("phy_stop_machine is invoked.\n");
    PRE_WRAPPER_FUNC(phydev);
    phy_stop_machine(phydev);
    POST_WRAPPER_FUNC(phydev);
    kern_printk("phy_stop_machine returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
})
#endif


#ifndef KERN_ADDR_qdisc_warn_nonwc
#define APP_WRAPPER_FOR_qdisc_warn_nonwc
#endif
 
#ifndef APP_WRAPPER_FOR_qdisc_warn_nonwc
#define APP_WRAPPER_FOR_qdisc_warn_nonwc
FUNCTION_WRAPPER_VOID(qdisc_warn_nonwc, (char *txt, struct Qdisc *qdisc), {
    WRAP_RECURSIVE(qdisc);
    TRACES_IF_WATCHPOINT(qdisc);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(qdisc)));
    kern_printk("qdisc_warn_nonwc is invoked.\n");
    PRE_WRAPPER_FUNC(txt, qdisc);
    qdisc_warn_nonwc(txt, qdisc);
    POST_WRAPPER_FUNC(txt, qdisc);
    kern_printk("qdisc_warn_nonwc returned.\n");
    TRACES_IF_WATCHPOINT(qdisc);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(qdisc)));
})
#endif


#ifndef KERN_ADDR___napi_complete
#define APP_WRAPPER_FOR___napi_complete
#endif
 
#ifndef APP_WRAPPER_FOR___napi_complete
#define APP_WRAPPER_FOR___napi_complete
FUNCTION_WRAPPER_VOID(__napi_complete, (struct napi_struct *n), {
    WRAP_RECURSIVE(n);
    TRACES_IF_WATCHPOINT(n);
    SCAN_HEAD_FUNC(struct napi_struct)(*(TO_UNWATCHED_ADDRESS(n)));
    kern_printk("__napi_complete is invoked.\n");
    PRE_WRAPPER_FUNC(n);
    __napi_complete(n);
    POST_WRAPPER_FUNC(n);
    kern_printk("__napi_complete returned.\n");
    TRACES_IF_WATCHPOINT(n);
    SCAN_HEAD_FUNC(struct napi_struct)(*(TO_UNWATCHED_ADDRESS(n)));
})
#endif


#ifndef KERN_ADDR_dev_init_scheduler
#define APP_WRAPPER_FOR_dev_init_scheduler
#endif
 
#ifndef APP_WRAPPER_FOR_dev_init_scheduler
#define APP_WRAPPER_FOR_dev_init_scheduler
FUNCTION_WRAPPER_VOID(dev_init_scheduler, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_init_scheduler is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    dev_init_scheduler(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_init_scheduler returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_kernel_halt
#define APP_WRAPPER_FOR_kernel_halt
#endif
 
#ifndef APP_WRAPPER_FOR_kernel_halt
#define APP_WRAPPER_FOR_kernel_halt
FUNCTION_WRAPPER_VOID(kernel_halt, (), {
    kern_printk("kernel_halt is invoked.\n");
    PRE_WRAPPER_FUNC();
    kernel_halt();
    POST_WRAPPER_FUNC();
    kern_printk("kernel_halt returned.\n");
})
#endif


#ifndef KERN_ADDR_generic_read_dir
#define APP_WRAPPER_FOR_generic_read_dir
#endif
 
#ifndef APP_WRAPPER_FOR_generic_read_dir
#define APP_WRAPPER_FOR_generic_read_dir
FUNCTION_WRAPPER(generic_read_dir, (struct file *_arg1, char *_arg2, size_t _arg3, loff_t *_arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("generic_read_dir is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    ssize_t ret = generic_read_dir(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("generic_read_dir returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_exit_thread
#define APP_WRAPPER_FOR_exit_thread
#endif
 
#ifndef APP_WRAPPER_FOR_exit_thread
#define APP_WRAPPER_FOR_exit_thread
FUNCTION_WRAPPER_VOID(exit_thread, (), {
    kern_printk("exit_thread is invoked.\n");
    PRE_WRAPPER_FUNC();
    exit_thread();
    POST_WRAPPER_FUNC();
    kern_printk("exit_thread returned.\n");
})
#endif


#ifndef KERN_ADDR_neigh_lookup
#define APP_WRAPPER_FOR_neigh_lookup
#endif
 
#ifndef APP_WRAPPER_FOR_neigh_lookup
#define APP_WRAPPER_FOR_neigh_lookup
FUNCTION_WRAPPER(neigh_lookup, (struct neigh_table *tbl, const void *pkey, struct net_device *dev), {
    WRAP_RECURSIVE(tbl);
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("neigh_lookup is invoked.\n");
    PRE_WRAPPER_FUNC(tbl, pkey, dev);
    struct neighbour *ret = neigh_lookup(tbl, pkey, dev);
    POST_WRAPPER_FUNC(tbl, pkey, dev);
    kern_printk("neigh_lookup returned.\n");
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_copy
#define APP_WRAPPER_FOR_skb_copy
#endif
 
#ifndef APP_WRAPPER_FOR_skb_copy
#define APP_WRAPPER_FOR_skb_copy
FUNCTION_WRAPPER(skb_copy, (const struct sk_buff *skb, gfp_t priority), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(const struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_copy is invoked.\n");
    PRE_WRAPPER_FUNC(skb, priority);
    struct sk_buff *ret = skb_copy(skb, priority);
    POST_WRAPPER_FUNC(skb, priority);
    kern_printk("skb_copy returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(const struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_simple_pin_fs
#define APP_WRAPPER_FOR_simple_pin_fs
#endif
 
#ifndef APP_WRAPPER_FOR_simple_pin_fs
#define APP_WRAPPER_FOR_simple_pin_fs
FUNCTION_WRAPPER(simple_pin_fs, (struct file_system_type *_arg1, struct vfsmount **mount, int *count), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(mount);
    TRACES_IF_WATCHPOINT(mount);
    SCAN_HEAD_FUNC(struct vfsmount *)(*(TO_UNWATCHED_ADDRESS(mount)));
    kern_printk("simple_pin_fs is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, mount, count);
    int ret = simple_pin_fs(_arg1, mount, count);
    POST_WRAPPER_FUNC(_arg1, mount, count);
    kern_printk("simple_pin_fs returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(mount);
    SCAN_HEAD_FUNC(struct vfsmount *)(*(TO_UNWATCHED_ADDRESS(mount)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sk_chk_filter
#define APP_WRAPPER_FOR_sk_chk_filter
#endif
 
#ifndef APP_WRAPPER_FOR_sk_chk_filter
#define APP_WRAPPER_FOR_sk_chk_filter
FUNCTION_WRAPPER(sk_chk_filter, (struct sock_filter *filter, unsigned int flen), {
    kern_printk("sk_chk_filter is invoked.\n");
    PRE_WRAPPER_FUNC(filter, flen);
    int ret = sk_chk_filter(filter, flen);
    POST_WRAPPER_FUNC(filter, flen);
    kern_printk("sk_chk_filter returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___generic_file_aio_write
#define APP_WRAPPER_FOR___generic_file_aio_write
#endif
 
#ifndef APP_WRAPPER_FOR___generic_file_aio_write
#define APP_WRAPPER_FOR___generic_file_aio_write
FUNCTION_WRAPPER(__generic_file_aio_write, (struct kiocb *_arg1, const struct iovec *_arg2, unsigned long _arg3, loff_t *_arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__generic_file_aio_write is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    ssize_t ret = __generic_file_aio_write(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("__generic_file_aio_write returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_device_remove_file
#define APP_WRAPPER_FOR_device_remove_file
#endif
 
#ifndef APP_WRAPPER_FOR_device_remove_file
#define APP_WRAPPER_FOR_device_remove_file
FUNCTION_WRAPPER_VOID(device_remove_file, (struct device *dev, const struct device_attribute *attr), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(attr);
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(const struct device_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    kern_printk("device_remove_file is invoked.\n");
    PRE_WRAPPER_FUNC(dev, attr);
    device_remove_file(dev, attr);
    POST_WRAPPER_FUNC(dev, attr);
    kern_printk("device_remove_file returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(const struct device_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
})
#endif


#ifndef KERN_ADDR_sysfs_create_bin_file
#define APP_WRAPPER_FOR_sysfs_create_bin_file
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_create_bin_file
#define APP_WRAPPER_FOR_sysfs_create_bin_file
FUNCTION_WRAPPER(sysfs_create_bin_file, (struct kobject *kobj, const struct bin_attribute *attr), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    WRAP_RECURSIVE(attr);
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(const struct bin_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    kern_printk("sysfs_create_bin_file is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, attr);
    int ret = sysfs_create_bin_file(kobj, attr);
    POST_WRAPPER_FUNC(kobj, attr);
    kern_printk("sysfs_create_bin_file returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(const struct bin_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    return ret;
})
#endif


#ifndef KERN_ADDR_elv_unregister
#define APP_WRAPPER_FOR_elv_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_elv_unregister
#define APP_WRAPPER_FOR_elv_unregister
FUNCTION_WRAPPER_VOID(elv_unregister, (struct elevator_type *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct elevator_type)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("elv_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    elv_unregister(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("elv_unregister returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct elevator_type)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_abort_exclusive_wait
#define APP_WRAPPER_FOR_abort_exclusive_wait
#endif
 
#ifndef APP_WRAPPER_FOR_abort_exclusive_wait
#define APP_WRAPPER_FOR_abort_exclusive_wait
FUNCTION_WRAPPER_VOID(abort_exclusive_wait, (wait_queue_head_t *q, wait_queue_t *wait, unsigned int mode, void *key), {
    WRAP_RECURSIVE(wait);
    TRACES_IF_WATCHPOINT(wait);
    SCAN_HEAD_FUNC(wait_queue_t)(*(TO_UNWATCHED_ADDRESS(wait)));
    kern_printk("abort_exclusive_wait is invoked.\n");
    PRE_WRAPPER_FUNC(q, wait, mode, key);
    abort_exclusive_wait(q, wait, mode, key);
    POST_WRAPPER_FUNC(q, wait, mode, key);
    kern_printk("abort_exclusive_wait returned.\n");
    TRACES_IF_WATCHPOINT(wait);
    SCAN_HEAD_FUNC(wait_queue_t)(*(TO_UNWATCHED_ADDRESS(wait)));
})
#endif


#ifndef KERN_ADDR_dev_open
#define APP_WRAPPER_FOR_dev_open
#endif
 
#ifndef APP_WRAPPER_FOR_dev_open
#define APP_WRAPPER_FOR_dev_open
FUNCTION_WRAPPER(dev_open, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_open is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = dev_open(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_open returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_iov_iter_fault_in_readable
#define APP_WRAPPER_FOR_iov_iter_fault_in_readable
#endif
 
#ifndef APP_WRAPPER_FOR_iov_iter_fault_in_readable
#define APP_WRAPPER_FOR_iov_iter_fault_in_readable
FUNCTION_WRAPPER(iov_iter_fault_in_readable, (struct iov_iter *i, size_t bytes), {
    kern_printk("iov_iter_fault_in_readable is invoked.\n");
    PRE_WRAPPER_FUNC(i, bytes);
    int ret = iov_iter_fault_in_readable(i, bytes);
    POST_WRAPPER_FUNC(i, bytes);
    kern_printk("iov_iter_fault_in_readable returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___iget
#define APP_WRAPPER_FOR___iget
#endif
 
#ifndef APP_WRAPPER_FOR___iget
#define APP_WRAPPER_FOR___iget
FUNCTION_WRAPPER_VOID(__iget, (struct inode *inode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("__iget is invoked.\n");
    PRE_WRAPPER_FUNC(inode);
    __iget(inode);
    POST_WRAPPER_FUNC(inode);
    kern_printk("__iget returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_set_mp_bus_to_node
#define APP_WRAPPER_FOR_set_mp_bus_to_node
#endif
 
#ifndef APP_WRAPPER_FOR_set_mp_bus_to_node
#define APP_WRAPPER_FOR_set_mp_bus_to_node
FUNCTION_WRAPPER_VOID(set_mp_bus_to_node, (int busnum, int node), {
    kern_printk("set_mp_bus_to_node is invoked.\n");
    PRE_WRAPPER_FUNC(busnum, node);
    set_mp_bus_to_node(busnum, node);
    POST_WRAPPER_FUNC(busnum, node);
    kern_printk("set_mp_bus_to_node returned.\n");
})
#endif


#ifndef KERN_ADDR___mnt_is_readonly
#define APP_WRAPPER_FOR___mnt_is_readonly
#endif
 
#ifndef APP_WRAPPER_FOR___mnt_is_readonly
#define APP_WRAPPER_FOR___mnt_is_readonly
FUNCTION_WRAPPER(__mnt_is_readonly, (struct vfsmount *mnt), {
    WRAP_RECURSIVE(mnt);
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
    kern_printk("__mnt_is_readonly is invoked.\n");
    PRE_WRAPPER_FUNC(mnt);
    int ret = __mnt_is_readonly(mnt);
    POST_WRAPPER_FUNC(mnt);
    kern_printk("__mnt_is_readonly returned.\n");
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
    return ret;
})
#endif


#ifndef KERN_ADDR___probe_kernel_read
#define APP_WRAPPER_FOR___probe_kernel_read
#endif
 
#ifndef APP_WRAPPER_FOR___probe_kernel_read
#define APP_WRAPPER_FOR___probe_kernel_read
FUNCTION_WRAPPER(__probe_kernel_read, (void *dst, const void *src, size_t size), {
    kern_printk("__probe_kernel_read is invoked.\n");
    PRE_WRAPPER_FUNC(dst, src, size);
    long ret = __probe_kernel_read(dst, src, size);
    POST_WRAPPER_FUNC(dst, src, size);
    kern_printk("__probe_kernel_read returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_target_system_state
#define APP_WRAPPER_FOR_acpi_target_system_state
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_target_system_state
#define APP_WRAPPER_FOR_acpi_target_system_state
FUNCTION_WRAPPER(acpi_target_system_state, (), {
    kern_printk("acpi_target_system_state is invoked.\n");
    PRE_WRAPPER_FUNC();
    u32 ret = acpi_target_system_state();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_target_system_state returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_rmdir
#define APP_WRAPPER_FOR_vfs_rmdir
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_rmdir
#define APP_WRAPPER_FOR_vfs_rmdir
FUNCTION_WRAPPER(vfs_rmdir, (struct inode *_arg1, struct dentry *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("vfs_rmdir is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = vfs_rmdir(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("vfs_rmdir returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR__cond_resched
#define APP_WRAPPER_FOR__cond_resched
#endif
 
#ifndef APP_WRAPPER_FOR__cond_resched
#define APP_WRAPPER_FOR__cond_resched
FUNCTION_WRAPPER(_cond_resched, (), {
    kern_printk("_cond_resched is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = _cond_resched();
    POST_WRAPPER_FUNC();
    kern_printk("_cond_resched returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_init_amd_e400_c1e_mask
#define APP_WRAPPER_FOR_init_amd_e400_c1e_mask
#endif
 
#ifndef APP_WRAPPER_FOR_init_amd_e400_c1e_mask
#define APP_WRAPPER_FOR_init_amd_e400_c1e_mask
FUNCTION_WRAPPER_VOID(init_amd_e400_c1e_mask, (), {
    kern_printk("init_amd_e400_c1e_mask is invoked.\n");
    PRE_WRAPPER_FUNC();
    init_amd_e400_c1e_mask();
    POST_WRAPPER_FUNC();
    kern_printk("init_amd_e400_c1e_mask returned.\n");
})
#endif


#ifndef KERN_ADDR_tick_init_highres
#define APP_WRAPPER_FOR_tick_init_highres
#endif
 
#ifndef APP_WRAPPER_FOR_tick_init_highres
#define APP_WRAPPER_FOR_tick_init_highres
FUNCTION_WRAPPER(tick_init_highres, (), {
    kern_printk("tick_init_highres is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = tick_init_highres();
    POST_WRAPPER_FUNC();
    kern_printk("tick_init_highres returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_get_table_header
#define APP_WRAPPER_FOR_acpi_get_table_header
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_table_header
#define APP_WRAPPER_FOR_acpi_get_table_header
FUNCTION_WRAPPER(acpi_get_table_header, (acpi_string signature, u32 instance, struct acpi_table_header *out_table_header), {
    kern_printk("acpi_get_table_header is invoked.\n");
    PRE_WRAPPER_FUNC(signature, instance, out_table_header);
    acpi_status ret = acpi_get_table_header(signature, instance, out_table_header);
    POST_WRAPPER_FUNC(signature, instance, out_table_header);
    kern_printk("acpi_get_table_header returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_may_umount
#define APP_WRAPPER_FOR_may_umount
#endif
 
#ifndef APP_WRAPPER_FOR_may_umount
#define APP_WRAPPER_FOR_may_umount
FUNCTION_WRAPPER(may_umount, (struct vfsmount *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("may_umount is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = may_umount(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("may_umount returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_sync_queue
#define APP_WRAPPER_FOR_blk_sync_queue
#endif
 
#ifndef APP_WRAPPER_FOR_blk_sync_queue
#define APP_WRAPPER_FOR_blk_sync_queue
FUNCTION_WRAPPER_VOID(blk_sync_queue, (struct request_queue *q), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    kern_printk("blk_sync_queue is invoked.\n");
    PRE_WRAPPER_FUNC(q);
    blk_sync_queue(q);
    POST_WRAPPER_FUNC(q);
    kern_printk("blk_sync_queue returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
})
#endif


#ifndef KERN_ADDR_do_select
#define APP_WRAPPER_FOR_do_select
#endif
 
#ifndef APP_WRAPPER_FOR_do_select
#define APP_WRAPPER_FOR_do_select
FUNCTION_WRAPPER(do_select, (int n, fd_set_bits *fds, struct timespec *end_time), {
    kern_printk("do_select is invoked.\n");
    PRE_WRAPPER_FUNC(n, fds, end_time);
    int ret = do_select(n, fds, end_time);
    POST_WRAPPER_FUNC(n, fds, end_time);
    kern_printk("do_select returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_soft_offline_page
#define APP_WRAPPER_FOR_soft_offline_page
#endif
 
#ifndef APP_WRAPPER_FOR_soft_offline_page
#define APP_WRAPPER_FOR_soft_offline_page
FUNCTION_WRAPPER(soft_offline_page, (struct page *page, int flags), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("soft_offline_page is invoked.\n");
    PRE_WRAPPER_FUNC(page, flags);
    int ret = soft_offline_page(page, flags);
    POST_WRAPPER_FUNC(page, flags);
    kern_printk("soft_offline_page returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_dmi_osi_linux
#define APP_WRAPPER_FOR_acpi_dmi_osi_linux
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_dmi_osi_linux
#define APP_WRAPPER_FOR_acpi_dmi_osi_linux
FUNCTION_WRAPPER_VOID(acpi_dmi_osi_linux, (int enable, const struct dmi_system_id *d), {
    WRAP_RECURSIVE(d);
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(const struct dmi_system_id)(*(TO_UNWATCHED_ADDRESS(d)));
    kern_printk("acpi_dmi_osi_linux is invoked.\n");
    PRE_WRAPPER_FUNC(enable, d);
    acpi_dmi_osi_linux(enable, d);
    POST_WRAPPER_FUNC(enable, d);
    kern_printk("acpi_dmi_osi_linux returned.\n");
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(const struct dmi_system_id)(*(TO_UNWATCHED_ADDRESS(d)));
})
#endif


#ifndef KERN_ADDR_neigh_update
#define APP_WRAPPER_FOR_neigh_update
#endif
 
#ifndef APP_WRAPPER_FOR_neigh_update
#define APP_WRAPPER_FOR_neigh_update
FUNCTION_WRAPPER(neigh_update, (struct neighbour *neigh, const u8 *lladdr, u8 new_, u32 flags), {
    WRAP_RECURSIVE(neigh);
    TRACES_IF_WATCHPOINT(neigh);
    SCAN_HEAD_FUNC(struct neighbour)(*(TO_UNWATCHED_ADDRESS(neigh)));
    kern_printk("neigh_update is invoked.\n");
    PRE_WRAPPER_FUNC(neigh, lladdr, new_, flags);
    int ret = neigh_update(neigh, lladdr, new_, flags);
    POST_WRAPPER_FUNC(neigh, lladdr, new_, flags);
    kern_printk("neigh_update returned.\n");
    TRACES_IF_WATCHPOINT(neigh);
    SCAN_HEAD_FUNC(struct neighbour)(*(TO_UNWATCHED_ADDRESS(neigh)));
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_copy_bits
#define APP_WRAPPER_FOR_skb_copy_bits
#endif
 
#ifndef APP_WRAPPER_FOR_skb_copy_bits
#define APP_WRAPPER_FOR_skb_copy_bits
FUNCTION_WRAPPER(skb_copy_bits, (const struct sk_buff *skb, int offset, void *to, int len), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(const struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_copy_bits is invoked.\n");
    PRE_WRAPPER_FUNC(skb, offset, to, len);
    int ret = skb_copy_bits(skb, offset, to, len);
    POST_WRAPPER_FUNC(skb, offset, to, len);
    kern_printk("skb_copy_bits returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(const struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_sched_setaffinity
#define APP_WRAPPER_FOR_compat_sys_sched_setaffinity
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_sched_setaffinity
#define APP_WRAPPER_FOR_compat_sys_sched_setaffinity
FUNCTION_WRAPPER(compat_sys_sched_setaffinity, (compat_pid_t pid, unsigned int len, compat_ulong_t *user_mask_ptr), {
    kern_printk("compat_sys_sched_setaffinity is invoked.\n");
    PRE_WRAPPER_FUNC(pid, len, user_mask_ptr);
    long ret = compat_sys_sched_setaffinity(pid, len, user_mask_ptr);
    POST_WRAPPER_FUNC(pid, len, user_mask_ptr);
    kern_printk("compat_sys_sched_setaffinity returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___devm_release_region
#define APP_WRAPPER_FOR___devm_release_region
#endif
 
#ifndef APP_WRAPPER_FOR___devm_release_region
#define APP_WRAPPER_FOR___devm_release_region
FUNCTION_WRAPPER_VOID(__devm_release_region, (struct device *dev, struct resource *parent, resource_size_t start, resource_size_t n), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("__devm_release_region is invoked.\n");
    PRE_WRAPPER_FUNC(dev, parent, start, n);
    __devm_release_region(dev, parent, start, n);
    POST_WRAPPER_FUNC(dev, parent, start, n);
    kern_printk("__devm_release_region returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_task_clear_jobctl_pending
#define APP_WRAPPER_FOR_task_clear_jobctl_pending
#endif
 
#ifndef APP_WRAPPER_FOR_task_clear_jobctl_pending
#define APP_WRAPPER_FOR_task_clear_jobctl_pending
FUNCTION_WRAPPER_VOID(task_clear_jobctl_pending, (struct task_struct *task, unsigned int mask), {
    WRAP_RECURSIVE(task);
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    kern_printk("task_clear_jobctl_pending is invoked.\n");
    PRE_WRAPPER_FUNC(task, mask);
    task_clear_jobctl_pending(task, mask);
    POST_WRAPPER_FUNC(task, mask);
    kern_printk("task_clear_jobctl_pending returned.\n");
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
})
#endif


#ifndef KERN_ADDR_unregister_acpi_bus_notifier
#define APP_WRAPPER_FOR_unregister_acpi_bus_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_acpi_bus_notifier
#define APP_WRAPPER_FOR_unregister_acpi_bus_notifier
FUNCTION_WRAPPER_VOID(unregister_acpi_bus_notifier, (struct notifier_block *nb), {
    WRAP_RECURSIVE(nb);
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    kern_printk("unregister_acpi_bus_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(nb);
    unregister_acpi_bus_notifier(nb);
    POST_WRAPPER_FUNC(nb);
    kern_printk("unregister_acpi_bus_notifier returned.\n");
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
})
#endif


#ifndef KERN_ADDR_inet_csk_init_xmit_timers
#define APP_WRAPPER_FOR_inet_csk_init_xmit_timers
#endif
 
#ifndef APP_WRAPPER_FOR_inet_csk_init_xmit_timers
#define APP_WRAPPER_FOR_inet_csk_init_xmit_timers
FUNCTION_WRAPPER_VOID(inet_csk_init_xmit_timers, (struct sock *sk, void (*retransmit_handler)(unsigned long), void (*delack_handler)(unsigned long), void (*keepalive_handler)(unsigned long)), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_FUNCTION(retransmit_handler);
    WRAP_FUNCTION(delack_handler);
    WRAP_FUNCTION(keepalive_handler);
    kern_printk("inet_csk_init_xmit_timers is invoked.\n");
    PRE_WRAPPER_FUNC(sk, retransmit_handler, delack_handler, keepalive_handler);
    inet_csk_init_xmit_timers(sk, retransmit_handler, delack_handler, keepalive_handler);
    POST_WRAPPER_FUNC(sk, retransmit_handler, delack_handler, keepalive_handler);
    kern_printk("inet_csk_init_xmit_timers returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR_compat_sys_msgctl
#define APP_WRAPPER_FOR_compat_sys_msgctl
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_msgctl
#define APP_WRAPPER_FOR_compat_sys_msgctl
FUNCTION_WRAPPER(compat_sys_msgctl, (int first, int second, void *uptr), {
    kern_printk("compat_sys_msgctl is invoked.\n");
    PRE_WRAPPER_FUNC(first, second, uptr);
    long ret = compat_sys_msgctl(first, second, uptr);
    POST_WRAPPER_FUNC(first, second, uptr);
    kern_printk("compat_sys_msgctl returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_process_vm_writev
#define APP_WRAPPER_FOR_compat_sys_process_vm_writev
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_process_vm_writev
#define APP_WRAPPER_FOR_compat_sys_process_vm_writev
FUNCTION_WRAPPER(compat_sys_process_vm_writev, (compat_pid_t pid, const struct compat_iovec *lvec, unsigned long liovcnt, const struct compat_iovec *rvec, unsigned long riovcnt, unsigned long flags), {
    kern_printk("compat_sys_process_vm_writev is invoked.\n");
    PRE_WRAPPER_FUNC(pid, lvec, liovcnt, rvec, riovcnt, flags);
    ssize_t ret = compat_sys_process_vm_writev(pid, lvec, liovcnt, rvec, riovcnt, flags);
    POST_WRAPPER_FUNC(pid, lvec, liovcnt, rvec, riovcnt, flags);
    kern_printk("compat_sys_process_vm_writev returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sg_nents
#define APP_WRAPPER_FOR_sg_nents
#endif
 
#ifndef APP_WRAPPER_FOR_sg_nents
#define APP_WRAPPER_FOR_sg_nents
FUNCTION_WRAPPER(sg_nents, (struct scatterlist *sg), {
    kern_printk("sg_nents is invoked.\n");
    PRE_WRAPPER_FUNC(sg);
    int ret = sg_nents(sg);
    POST_WRAPPER_FUNC(sg);
    kern_printk("sg_nents returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_hard_start_xmit
#define APP_WRAPPER_FOR_dev_hard_start_xmit
#endif
 
#ifndef APP_WRAPPER_FOR_dev_hard_start_xmit
#define APP_WRAPPER_FOR_dev_hard_start_xmit
FUNCTION_WRAPPER(dev_hard_start_xmit, (struct sk_buff *skb, struct net_device *dev, struct netdev_queue *txq), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(txq);
    TRACES_IF_WATCHPOINT(txq);
    SCAN_HEAD_FUNC(struct netdev_queue)(*(TO_UNWATCHED_ADDRESS(txq)));
    kern_printk("dev_hard_start_xmit is invoked.\n");
    PRE_WRAPPER_FUNC(skb, dev, txq);
    int ret = dev_hard_start_xmit(skb, dev, txq);
    POST_WRAPPER_FUNC(skb, dev, txq);
    kern_printk("dev_hard_start_xmit returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(txq);
    SCAN_HEAD_FUNC(struct netdev_queue)(*(TO_UNWATCHED_ADDRESS(txq)));
    return ret;
})
#endif


#ifndef KERN_ADDR__raw_read_unlock_irq
#define APP_WRAPPER_FOR__raw_read_unlock_irq
#endif
 
#ifndef APP_WRAPPER_FOR__raw_read_unlock_irq
#define APP_WRAPPER_FOR__raw_read_unlock_irq
FUNCTION_WRAPPER_VOID(_raw_read_unlock_irq, (rwlock_t *lock), {
    kern_printk("_raw_read_unlock_irq is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    _raw_read_unlock_irq(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("_raw_read_unlock_irq returned.\n");
})
#endif


#ifndef KERN_ADDR_bio_integrity_set_tag
#define APP_WRAPPER_FOR_bio_integrity_set_tag
#endif
 
#ifndef APP_WRAPPER_FOR_bio_integrity_set_tag
#define APP_WRAPPER_FOR_bio_integrity_set_tag
FUNCTION_WRAPPER(bio_integrity_set_tag, (struct bio *_arg1, void *_arg2, unsigned int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bio_integrity_set_tag is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = bio_integrity_set_tag(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("bio_integrity_set_tag returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jiffies_to_clock_t
#define APP_WRAPPER_FOR_jiffies_to_clock_t
#endif
 
#ifndef APP_WRAPPER_FOR_jiffies_to_clock_t
#define APP_WRAPPER_FOR_jiffies_to_clock_t
FUNCTION_WRAPPER(jiffies_to_clock_t, (unsigned long x), {
    kern_printk("jiffies_to_clock_t is invoked.\n");
    PRE_WRAPPER_FUNC(x);
    clock_t ret = jiffies_to_clock_t(x);
    POST_WRAPPER_FUNC(x);
    kern_printk("jiffies_to_clock_t returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_ratelimit
#define APP_WRAPPER_FOR_ata_ratelimit
#endif
 
#ifndef APP_WRAPPER_FOR_ata_ratelimit
#define APP_WRAPPER_FOR_ata_ratelimit
FUNCTION_WRAPPER(ata_ratelimit, (), {
    kern_printk("ata_ratelimit is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = ata_ratelimit();
    POST_WRAPPER_FUNC();
    kern_printk("ata_ratelimit returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pm_qos_update_flags
#define APP_WRAPPER_FOR_pm_qos_update_flags
#endif
 
#ifndef APP_WRAPPER_FOR_pm_qos_update_flags
#define APP_WRAPPER_FOR_pm_qos_update_flags
FUNCTION_WRAPPER(pm_qos_update_flags, (struct pm_qos_flags *pqf, struct pm_qos_flags_request *req, enum pm_qos_req_action action, s32 val), {
    kern_printk("pm_qos_update_flags is invoked.\n");
    PRE_WRAPPER_FUNC(pqf, req, action, val);
    bool ret = pm_qos_update_flags(pqf, req, action, val);
    POST_WRAPPER_FUNC(pqf, req, action, val);
    kern_printk("pm_qos_update_flags returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_module_get_kallsym
#define APP_WRAPPER_FOR_module_get_kallsym
#endif
 
#ifndef APP_WRAPPER_FOR_module_get_kallsym
#define APP_WRAPPER_FOR_module_get_kallsym
FUNCTION_WRAPPER(module_get_kallsym, (unsigned int symnum, unsigned long *value, char *type, char *name, char *module_name, int *exported), {
    kern_printk("module_get_kallsym is invoked.\n");
    PRE_WRAPPER_FUNC(symnum, value, type, name, module_name, exported);
    int ret = module_get_kallsym(symnum, value, type, name, module_name, exported);
    POST_WRAPPER_FUNC(symnum, value, type, name, module_name, exported);
    kern_printk("module_get_kallsym returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_get_posix_acl
#define APP_WRAPPER_FOR_get_posix_acl
#endif
 
#ifndef APP_WRAPPER_FOR_get_posix_acl
#define APP_WRAPPER_FOR_get_posix_acl
FUNCTION_WRAPPER(get_posix_acl, (struct inode *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("get_posix_acl is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct posix_acl *ret = get_posix_acl(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("get_posix_acl returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_set_pgdat_percpu_threshold
#define APP_WRAPPER_FOR_set_pgdat_percpu_threshold
#endif
 
#ifndef APP_WRAPPER_FOR_set_pgdat_percpu_threshold
#define APP_WRAPPER_FOR_set_pgdat_percpu_threshold
FUNCTION_WRAPPER_VOID(set_pgdat_percpu_threshold, (pg_data_t *pgdat, int (*calculate_pressure)(struct zone *)), {
    WRAP_RECURSIVE(pgdat);
    TRACES_IF_WATCHPOINT(pgdat);
    SCAN_HEAD_FUNC(pg_data_t)(*(TO_UNWATCHED_ADDRESS(pgdat)));
    WRAP_FUNCTION(calculate_pressure);
    kern_printk("set_pgdat_percpu_threshold is invoked.\n");
    PRE_WRAPPER_FUNC(pgdat, calculate_pressure);
    set_pgdat_percpu_threshold(pgdat, calculate_pressure);
    POST_WRAPPER_FUNC(pgdat, calculate_pressure);
    kern_printk("set_pgdat_percpu_threshold returned.\n");
    TRACES_IF_WATCHPOINT(pgdat);
    SCAN_HEAD_FUNC(pg_data_t)(*(TO_UNWATCHED_ADDRESS(pgdat)));
})
#endif


#ifndef KERN_ADDR_access_remote_vm
#define APP_WRAPPER_FOR_access_remote_vm
#endif
 
#ifndef APP_WRAPPER_FOR_access_remote_vm
#define APP_WRAPPER_FOR_access_remote_vm
FUNCTION_WRAPPER(access_remote_vm, (struct mm_struct *mm, unsigned long addr, void *buf, int len, int write), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    kern_printk("access_remote_vm is invoked.\n");
    PRE_WRAPPER_FUNC(mm, addr, buf, len, write);
    int ret = access_remote_vm(mm, addr, buf, len, write);
    POST_WRAPPER_FUNC(mm, addr, buf, len, write);
    kern_printk("access_remote_vm returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    return ret;
})
#endif


#ifndef KERN_ADDR_search_exception_tables
#define APP_WRAPPER_FOR_search_exception_tables
#endif
 
#ifndef APP_WRAPPER_FOR_search_exception_tables
#define APP_WRAPPER_FOR_search_exception_tables
FUNCTION_WRAPPER(search_exception_tables, (unsigned long add), {
    kern_printk("search_exception_tables is invoked.\n");
    PRE_WRAPPER_FUNC(add);
    const struct exception_table_entry *ret = search_exception_tables(add);
    POST_WRAPPER_FUNC(add);
    kern_printk("search_exception_tables returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_bpf_jit_free
#define APP_WRAPPER_FOR_bpf_jit_free
#endif
 
#ifndef APP_WRAPPER_FOR_bpf_jit_free
#define APP_WRAPPER_FOR_bpf_jit_free
FUNCTION_WRAPPER_VOID(bpf_jit_free, (struct sk_filter *fp), {
    WRAP_RECURSIVE(fp);
    TRACES_IF_WATCHPOINT(fp);
    SCAN_HEAD_FUNC(struct sk_filter)(*(TO_UNWATCHED_ADDRESS(fp)));
    kern_printk("bpf_jit_free is invoked.\n");
    PRE_WRAPPER_FUNC(fp);
    bpf_jit_free(fp);
    POST_WRAPPER_FUNC(fp);
    kern_printk("bpf_jit_free returned.\n");
    TRACES_IF_WATCHPOINT(fp);
    SCAN_HEAD_FUNC(struct sk_filter)(*(TO_UNWATCHED_ADDRESS(fp)));
})
#endif


#ifndef KERN_ADDR_rdmsr_safe_regs_on_cpu
#define APP_WRAPPER_FOR_rdmsr_safe_regs_on_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_rdmsr_safe_regs_on_cpu
#define APP_WRAPPER_FOR_rdmsr_safe_regs_on_cpu
FUNCTION_WRAPPER(rdmsr_safe_regs_on_cpu, (unsigned int cpu, u32 regs[8]), {
    kern_printk("rdmsr_safe_regs_on_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, regs);
    int ret = rdmsr_safe_regs_on_cpu(cpu, regs);
    POST_WRAPPER_FUNC(cpu, regs);
    kern_printk("rdmsr_safe_regs_on_cpu returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_x86_init_noop
#define APP_WRAPPER_FOR_x86_init_noop
#endif
 
#ifndef APP_WRAPPER_FOR_x86_init_noop
#define APP_WRAPPER_FOR_x86_init_noop
FUNCTION_WRAPPER_VOID(x86_init_noop, (), {
    kern_printk("x86_init_noop is invoked.\n");
    PRE_WRAPPER_FUNC();
    x86_init_noop();
    POST_WRAPPER_FUNC();
    kern_printk("x86_init_noop returned.\n");
})
#endif


#ifndef KERN_ADDR_vma_interval_tree_insert
#define APP_WRAPPER_FOR_vma_interval_tree_insert
#endif
 
#ifndef APP_WRAPPER_FOR_vma_interval_tree_insert
#define APP_WRAPPER_FOR_vma_interval_tree_insert
FUNCTION_WRAPPER_VOID(vma_interval_tree_insert, (struct vm_area_struct *node, struct rb_root *root), {
    WRAP_RECURSIVE(node);
    TRACES_IF_WATCHPOINT(node);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(node)));
    kern_printk("vma_interval_tree_insert is invoked.\n");
    PRE_WRAPPER_FUNC(node, root);
    vma_interval_tree_insert(node, root);
    POST_WRAPPER_FUNC(node, root);
    kern_printk("vma_interval_tree_insert returned.\n");
    TRACES_IF_WATCHPOINT(node);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(node)));
})
#endif


#ifndef KERN_ADDR_dquot_quota_on_mount
#define APP_WRAPPER_FOR_dquot_quota_on_mount
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_quota_on_mount
#define APP_WRAPPER_FOR_dquot_quota_on_mount
FUNCTION_WRAPPER(dquot_quota_on_mount, (struct super_block *sb, char *qf_name, int format_id, int type), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("dquot_quota_on_mount is invoked.\n");
    PRE_WRAPPER_FUNC(sb, qf_name, format_id, type);
    int ret = dquot_quota_on_mount(sb, qf_name, format_id, type);
    POST_WRAPPER_FUNC(sb, qf_name, format_id, type);
    kern_printk("dquot_quota_on_mount returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_init_queue_node
#define APP_WRAPPER_FOR_blk_init_queue_node
#endif
 
#ifndef APP_WRAPPER_FOR_blk_init_queue_node
#define APP_WRAPPER_FOR_blk_init_queue_node
FUNCTION_WRAPPER(blk_init_queue_node, (request_fn_proc *rfn, spinlock_t *lock, int node_id), {
    WRAP_FUNCTION(rfn);
    kern_printk("blk_init_queue_node is invoked.\n");
    PRE_WRAPPER_FUNC(rfn, lock, node_id);
    struct request_queue *ret = blk_init_queue_node(rfn, lock, node_id);
    POST_WRAPPER_FUNC(rfn, lock, node_id);
    kern_printk("blk_init_queue_node returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_cgroup_iter_start
#define APP_WRAPPER_FOR_cgroup_iter_start
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_iter_start
#define APP_WRAPPER_FOR_cgroup_iter_start
FUNCTION_WRAPPER_VOID(cgroup_iter_start, (struct cgroup *cgrp, struct cgroup_iter *it), {
    WRAP_RECURSIVE(cgrp);
    TRACES_IF_WATCHPOINT(cgrp);
    SCAN_HEAD_FUNC(struct cgroup)(*(TO_UNWATCHED_ADDRESS(cgrp)));
    kern_printk("cgroup_iter_start is invoked.\n");
    PRE_WRAPPER_FUNC(cgrp, it);
    cgroup_iter_start(cgrp, it);
    POST_WRAPPER_FUNC(cgrp, it);
    kern_printk("cgroup_iter_start returned.\n");
    TRACES_IF_WATCHPOINT(cgrp);
    SCAN_HEAD_FUNC(struct cgroup)(*(TO_UNWATCHED_ADDRESS(cgrp)));
})
#endif


#ifndef KERN_ADDR___sys_sendmmsg
#define APP_WRAPPER_FOR___sys_sendmmsg
#endif
 
#ifndef APP_WRAPPER_FOR___sys_sendmmsg
#define APP_WRAPPER_FOR___sys_sendmmsg
FUNCTION_WRAPPER(__sys_sendmmsg, (int fd, struct mmsghdr *mmsg, unsigned int vlen, unsigned int flags), {
    kern_printk("__sys_sendmmsg is invoked.\n");
    PRE_WRAPPER_FUNC(fd, mmsg, vlen, flags);
    int ret = __sys_sendmmsg(fd, mmsg, vlen, flags);
    POST_WRAPPER_FUNC(fd, mmsg, vlen, flags);
    kern_printk("__sys_sendmmsg returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_move_irq
#define APP_WRAPPER_FOR_irq_move_irq
#endif
 
#ifndef APP_WRAPPER_FOR_irq_move_irq
#define APP_WRAPPER_FOR_irq_move_irq
FUNCTION_WRAPPER_VOID(irq_move_irq, (struct irq_data *data), {
    WRAP_RECURSIVE(data);
    TRACES_IF_WATCHPOINT(data);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(data)));
    kern_printk("irq_move_irq is invoked.\n");
    PRE_WRAPPER_FUNC(data);
    irq_move_irq(data);
    POST_WRAPPER_FUNC(data);
    kern_printk("irq_move_irq returned.\n");
    TRACES_IF_WATCHPOINT(data);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(data)));
})
#endif


#ifndef KERN_ADDR_pci_disable_ido
#define APP_WRAPPER_FOR_pci_disable_ido
#endif
 
#ifndef APP_WRAPPER_FOR_pci_disable_ido
#define APP_WRAPPER_FOR_pci_disable_ido
FUNCTION_WRAPPER_VOID(pci_disable_ido, (struct pci_dev *dev, unsigned long type), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_disable_ido is invoked.\n");
    PRE_WRAPPER_FUNC(dev, type);
    pci_disable_ido(dev, type);
    POST_WRAPPER_FUNC(dev, type);
    kern_printk("pci_disable_ido returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR__paravirt_ident_64
#define APP_WRAPPER_FOR__paravirt_ident_64
#endif
 
#ifndef APP_WRAPPER_FOR__paravirt_ident_64
#define APP_WRAPPER_FOR__paravirt_ident_64
FUNCTION_WRAPPER(_paravirt_ident_64, (u64 _arg1), {
    kern_printk("_paravirt_ident_64 is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    u64 ret = _paravirt_ident_64(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("_paravirt_ident_64 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_cgroup_iter_next
#define APP_WRAPPER_FOR_cgroup_iter_next
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_iter_next
#define APP_WRAPPER_FOR_cgroup_iter_next
FUNCTION_WRAPPER(cgroup_iter_next, (struct cgroup *cgrp, struct cgroup_iter *it), {
    WRAP_RECURSIVE(cgrp);
    TRACES_IF_WATCHPOINT(cgrp);
    SCAN_HEAD_FUNC(struct cgroup)(*(TO_UNWATCHED_ADDRESS(cgrp)));
    kern_printk("cgroup_iter_next is invoked.\n");
    PRE_WRAPPER_FUNC(cgrp, it);
    struct task_struct *ret = cgroup_iter_next(cgrp, it);
    POST_WRAPPER_FUNC(cgrp, it);
    kern_printk("cgroup_iter_next returned.\n");
    TRACES_IF_WATCHPOINT(cgrp);
    SCAN_HEAD_FUNC(struct cgroup)(*(TO_UNWATCHED_ADDRESS(cgrp)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_bitmap_clear
#define APP_WRAPPER_FOR_bitmap_clear
#endif
 
#ifndef APP_WRAPPER_FOR_bitmap_clear
#define APP_WRAPPER_FOR_bitmap_clear
FUNCTION_WRAPPER_VOID(bitmap_clear, (unsigned long *map, int start, int nr), {
    kern_printk("bitmap_clear is invoked.\n");
    PRE_WRAPPER_FUNC(map, start, nr);
    bitmap_clear(map, start, nr);
    POST_WRAPPER_FUNC(map, start, nr);
    kern_printk("bitmap_clear returned.\n");
})
#endif


#ifndef KERN_ADDR_dev_err
#define APP_WRAPPER_FOR_dev_err
#endif
 
#ifndef APP_WRAPPER_FOR_dev_err
#define APP_WRAPPER_FOR_dev_err
FUNCTION_WRAPPER(dev_err, (const struct device *dev, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    // TODO: variadic arguments
    kern_printk("dev_err is invoked.\n");
    PRE_WRAPPER_FUNC(dev, fmt);
    int ret = dev_err(dev, fmt);
    POST_WRAPPER_FUNC(dev, fmt);
    kern_printk("dev_err returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_inode_dio_done
#define APP_WRAPPER_FOR_inode_dio_done
#endif
 
#ifndef APP_WRAPPER_FOR_inode_dio_done
#define APP_WRAPPER_FOR_inode_dio_done
FUNCTION_WRAPPER_VOID(inode_dio_done, (struct inode *inode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("inode_dio_done is invoked.\n");
    PRE_WRAPPER_FUNC(inode);
    inode_dio_done(inode);
    POST_WRAPPER_FUNC(inode);
    kern_printk("inode_dio_done returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_proc_dointvec
#define APP_WRAPPER_FOR_proc_dointvec
#endif
 
#ifndef APP_WRAPPER_FOR_proc_dointvec
#define APP_WRAPPER_FOR_proc_dointvec
FUNCTION_WRAPPER(proc_dointvec, (struct ctl_table *_arg1, int _arg2, void *_arg3, size_t *_arg4, loff_t *_arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("proc_dointvec is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = proc_dointvec(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("proc_dointvec returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_free_tags
#define APP_WRAPPER_FOR_blk_free_tags
#endif
 
#ifndef APP_WRAPPER_FOR_blk_free_tags
#define APP_WRAPPER_FOR_blk_free_tags
FUNCTION_WRAPPER_VOID(blk_free_tags, (struct blk_queue_tag *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct blk_queue_tag)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_free_tags is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    blk_free_tags(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("blk_free_tags returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct blk_queue_tag)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR___set_page_dirty_buffers
#define APP_WRAPPER_FOR___set_page_dirty_buffers
#endif
 
#ifndef APP_WRAPPER_FOR___set_page_dirty_buffers
#define APP_WRAPPER_FOR___set_page_dirty_buffers
FUNCTION_WRAPPER(__set_page_dirty_buffers, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("__set_page_dirty_buffers is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    int ret = __set_page_dirty_buffers(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("__set_page_dirty_buffers returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR___round_jiffies_relative
#define APP_WRAPPER_FOR___round_jiffies_relative
#endif
 
#ifndef APP_WRAPPER_FOR___round_jiffies_relative
#define APP_WRAPPER_FOR___round_jiffies_relative
FUNCTION_WRAPPER(__round_jiffies_relative, (unsigned long j, int cpu), {
    kern_printk("__round_jiffies_relative is invoked.\n");
    PRE_WRAPPER_FUNC(j, cpu);
    long ret = __round_jiffies_relative(j, cpu);
    POST_WRAPPER_FUNC(j, cpu);
    kern_printk("__round_jiffies_relative returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_hrtimer_try_to_cancel
#define APP_WRAPPER_FOR_hrtimer_try_to_cancel
#endif
 
#ifndef APP_WRAPPER_FOR_hrtimer_try_to_cancel
#define APP_WRAPPER_FOR_hrtimer_try_to_cancel
FUNCTION_WRAPPER(hrtimer_try_to_cancel, (struct hrtimer *timer), {
    WRAP_RECURSIVE(timer);
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct hrtimer)(*(TO_UNWATCHED_ADDRESS(timer)));
    kern_printk("hrtimer_try_to_cancel is invoked.\n");
    PRE_WRAPPER_FUNC(timer);
    int ret = hrtimer_try_to_cancel(timer);
    POST_WRAPPER_FUNC(timer);
    kern_printk("hrtimer_try_to_cancel returned.\n");
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct hrtimer)(*(TO_UNWATCHED_ADDRESS(timer)));
    return ret;
})
#endif


#ifndef KERN_ADDR_get_swap_page_of_type
#define APP_WRAPPER_FOR_get_swap_page_of_type
#endif
 
#ifndef APP_WRAPPER_FOR_get_swap_page_of_type
#define APP_WRAPPER_FOR_get_swap_page_of_type
FUNCTION_WRAPPER(get_swap_page_of_type, (int _arg1), {
    kern_printk("get_swap_page_of_type is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    swp_entry_t ret = get_swap_page_of_type(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("get_swap_page_of_type returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_error_interrupt
#define APP_WRAPPER_FOR_error_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_error_interrupt
#define APP_WRAPPER_FOR_error_interrupt
FUNCTION_WRAPPER_VOID(error_interrupt, (), {
    kern_printk("error_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC();
    error_interrupt();
    POST_WRAPPER_FUNC();
    kern_printk("error_interrupt returned.\n");
})
#endif


#ifndef KERN_ADDR_dentry_path_raw
#define APP_WRAPPER_FOR_dentry_path_raw
#endif
 
#ifndef APP_WRAPPER_FOR_dentry_path_raw
#define APP_WRAPPER_FOR_dentry_path_raw
FUNCTION_WRAPPER(dentry_path_raw, (struct dentry *_arg1, char *_arg2, int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("dentry_path_raw is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    char *ret = dentry_path_raw(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("dentry_path_raw returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___alloc_reserved_percpu
#define APP_WRAPPER_FOR___alloc_reserved_percpu
#endif
 
#ifndef APP_WRAPPER_FOR___alloc_reserved_percpu
#define APP_WRAPPER_FOR___alloc_reserved_percpu
FUNCTION_WRAPPER(__alloc_reserved_percpu, (size_t size, size_t align), {
    kern_printk("__alloc_reserved_percpu is invoked.\n");
    PRE_WRAPPER_FUNC(size, align);
    void *ret = __alloc_reserved_percpu(size, align);
    POST_WRAPPER_FUNC(size, align);
    kern_printk("__alloc_reserved_percpu returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_iommu_alloc
#define APP_WRAPPER_FOR_pci_iommu_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_pci_iommu_alloc
#define APP_WRAPPER_FOR_pci_iommu_alloc
FUNCTION_WRAPPER_VOID(pci_iommu_alloc, (), {
    kern_printk("pci_iommu_alloc is invoked.\n");
    PRE_WRAPPER_FUNC();
    pci_iommu_alloc();
    POST_WRAPPER_FUNC();
    kern_printk("pci_iommu_alloc returned.\n");
})
#endif


#ifndef KERN_ADDR_dma_pool_destroy
#define APP_WRAPPER_FOR_dma_pool_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_dma_pool_destroy
#define APP_WRAPPER_FOR_dma_pool_destroy
FUNCTION_WRAPPER_VOID(dma_pool_destroy, (struct dma_pool *pool), {
    kern_printk("dma_pool_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(pool);
    dma_pool_destroy(pool);
    POST_WRAPPER_FUNC(pool);
    kern_printk("dma_pool_destroy returned.\n");
})
#endif


#ifndef KERN_ADDR_netif_carrier_on
#define APP_WRAPPER_FOR_netif_carrier_on
#endif
 
#ifndef APP_WRAPPER_FOR_netif_carrier_on
#define APP_WRAPPER_FOR_netif_carrier_on
FUNCTION_WRAPPER_VOID(netif_carrier_on, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("netif_carrier_on is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    netif_carrier_on(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("netif_carrier_on returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_pci_rescan_bus
#define APP_WRAPPER_FOR_pci_rescan_bus
#endif
 
#ifndef APP_WRAPPER_FOR_pci_rescan_bus
#define APP_WRAPPER_FOR_pci_rescan_bus
FUNCTION_WRAPPER(pci_rescan_bus, (struct pci_bus *bus), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_rescan_bus is invoked.\n");
    PRE_WRAPPER_FUNC(bus);
    int ret = pci_rescan_bus(bus);
    POST_WRAPPER_FUNC(bus);
    kern_printk("pci_rescan_bus returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_set_robust_list
#define APP_WRAPPER_FOR_compat_sys_set_robust_list
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_set_robust_list
#define APP_WRAPPER_FOR_compat_sys_set_robust_list
FUNCTION_WRAPPER(compat_sys_set_robust_list, (struct compat_robust_list_head *head, compat_size_t len), {
    kern_printk("compat_sys_set_robust_list is invoked.\n");
    PRE_WRAPPER_FUNC(head, len);
    long ret = compat_sys_set_robust_list(head, len);
    POST_WRAPPER_FUNC(head, len);
    kern_printk("compat_sys_set_robust_list returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_get_flags
#define APP_WRAPPER_FOR_dev_get_flags
#endif
 
#ifndef APP_WRAPPER_FOR_dev_get_flags
#define APP_WRAPPER_FOR_dev_get_flags
FUNCTION_WRAPPER(dev_get_flags, (const struct net_device *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("dev_get_flags is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = dev_get_flags(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("dev_get_flags returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sff_data_xfer_noirq
#define APP_WRAPPER_FOR_ata_sff_data_xfer_noirq
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_data_xfer_noirq
#define APP_WRAPPER_FOR_ata_sff_data_xfer_noirq
FUNCTION_WRAPPER(ata_sff_data_xfer_noirq, (struct ata_device *dev, unsigned char *buf, unsigned int buflen, int rw), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct ata_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("ata_sff_data_xfer_noirq is invoked.\n");
    PRE_WRAPPER_FUNC(dev, buf, buflen, rw);
    int ret = ata_sff_data_xfer_noirq(dev, buf, buflen, rw);
    POST_WRAPPER_FUNC(dev, buf, buflen, rw);
    kern_printk("ata_sff_data_xfer_noirq returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct ata_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_gnet_stats_start_copy
#define APP_WRAPPER_FOR_gnet_stats_start_copy
#endif
 
#ifndef APP_WRAPPER_FOR_gnet_stats_start_copy
#define APP_WRAPPER_FOR_gnet_stats_start_copy
FUNCTION_WRAPPER(gnet_stats_start_copy, (struct sk_buff *skb, int type, spinlock_t *lock, struct gnet_dump *d), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_RECURSIVE(d);
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct gnet_dump)(*(TO_UNWATCHED_ADDRESS(d)));
    kern_printk("gnet_stats_start_copy is invoked.\n");
    PRE_WRAPPER_FUNC(skb, type, lock, d);
    int ret = gnet_stats_start_copy(skb, type, lock, d);
    POST_WRAPPER_FUNC(skb, type, lock, d);
    kern_printk("gnet_stats_start_copy returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct gnet_dump)(*(TO_UNWATCHED_ADDRESS(d)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_writev
#define APP_WRAPPER_FOR_compat_sys_writev
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_writev
#define APP_WRAPPER_FOR_compat_sys_writev
FUNCTION_WRAPPER(compat_sys_writev, (unsigned long fd, const struct compat_iovec *vec, unsigned long vlen), {
    kern_printk("compat_sys_writev is invoked.\n");
    PRE_WRAPPER_FUNC(fd, vec, vlen);
    ssize_t ret = compat_sys_writev(fd, vec, vlen);
    POST_WRAPPER_FUNC(fd, vec, vlen);
    kern_printk("compat_sys_writev returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sched_autogroup_create_attach
#define APP_WRAPPER_FOR_sched_autogroup_create_attach
#endif
 
#ifndef APP_WRAPPER_FOR_sched_autogroup_create_attach
#define APP_WRAPPER_FOR_sched_autogroup_create_attach
FUNCTION_WRAPPER_VOID(sched_autogroup_create_attach, (struct task_struct *p), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("sched_autogroup_create_attach is invoked.\n");
    PRE_WRAPPER_FUNC(p);
    sched_autogroup_create_attach(p);
    POST_WRAPPER_FUNC(p);
    kern_printk("sched_autogroup_create_attach returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
})
#endif


#ifndef KERN_ADDR_dev_warn
#define APP_WRAPPER_FOR_dev_warn
#endif
 
#ifndef APP_WRAPPER_FOR_dev_warn
#define APP_WRAPPER_FOR_dev_warn
FUNCTION_WRAPPER(dev_warn, (const struct device *dev, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    // TODO: variadic arguments
    kern_printk("dev_warn is invoked.\n");
    PRE_WRAPPER_FUNC(dev, fmt);
    int ret = dev_warn(dev, fmt);
    POST_WRAPPER_FUNC(dev, fmt);
    kern_printk("dev_warn returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_class_dev_iter_init
#define APP_WRAPPER_FOR_class_dev_iter_init
#endif
 
#ifndef APP_WRAPPER_FOR_class_dev_iter_init
#define APP_WRAPPER_FOR_class_dev_iter_init
FUNCTION_WRAPPER_VOID(class_dev_iter_init, (struct class_dev_iter *iter, struct class_ *class_, struct device *start, const struct device_type *type), {
    WRAP_RECURSIVE(iter);
    TRACES_IF_WATCHPOINT(iter);
    SCAN_HEAD_FUNC(struct class_dev_iter)(*(TO_UNWATCHED_ADDRESS(iter)));
    WRAP_RECURSIVE(class_);
    TRACES_IF_WATCHPOINT(class_);
    SCAN_HEAD_FUNC(struct class_)(*(TO_UNWATCHED_ADDRESS(class_)));
    WRAP_RECURSIVE(start);
    TRACES_IF_WATCHPOINT(start);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(start)));
    WRAP_RECURSIVE(type);
    TRACES_IF_WATCHPOINT(type);
    SCAN_HEAD_FUNC(const struct device_type)(*(TO_UNWATCHED_ADDRESS(type)));
    kern_printk("class_dev_iter_init is invoked.\n");
    PRE_WRAPPER_FUNC(iter, class_, start, type);
    class_dev_iter_init(iter, class_, start, type);
    POST_WRAPPER_FUNC(iter, class_, start, type);
    kern_printk("class_dev_iter_init returned.\n");
    TRACES_IF_WATCHPOINT(iter);
    SCAN_HEAD_FUNC(struct class_dev_iter)(*(TO_UNWATCHED_ADDRESS(iter)));
    TRACES_IF_WATCHPOINT(class_);
    SCAN_HEAD_FUNC(struct class_)(*(TO_UNWATCHED_ADDRESS(class_)));
    TRACES_IF_WATCHPOINT(start);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(start)));
    TRACES_IF_WATCHPOINT(type);
    SCAN_HEAD_FUNC(const struct device_type)(*(TO_UNWATCHED_ADDRESS(type)));
})
#endif


#ifndef KERN_ADDR_blk_finish_plug
#define APP_WRAPPER_FOR_blk_finish_plug
#endif
 
#ifndef APP_WRAPPER_FOR_blk_finish_plug
#define APP_WRAPPER_FOR_blk_finish_plug
FUNCTION_WRAPPER_VOID(blk_finish_plug, (struct blk_plug *_arg1), {
    kern_printk("blk_finish_plug is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    blk_finish_plug(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("blk_finish_plug returned.\n");
})
#endif


#ifndef KERN_ADDR_yield
#define APP_WRAPPER_FOR_yield
#endif
 
#ifndef APP_WRAPPER_FOR_yield
#define APP_WRAPPER_FOR_yield
FUNCTION_WRAPPER_VOID(yield, (), {
    kern_printk("yield is invoked.\n");
    PRE_WRAPPER_FUNC();
    yield();
    POST_WRAPPER_FUNC();
    kern_printk("yield returned.\n");
})
#endif


#ifndef KERN_ADDR_kthread_should_stop
#define APP_WRAPPER_FOR_kthread_should_stop
#endif
 
#ifndef APP_WRAPPER_FOR_kthread_should_stop
#define APP_WRAPPER_FOR_kthread_should_stop
FUNCTION_WRAPPER(kthread_should_stop, (), {
    kern_printk("kthread_should_stop is invoked.\n");
    PRE_WRAPPER_FUNC();
    bool ret = kthread_should_stop();
    POST_WRAPPER_FUNC();
    kern_printk("kthread_should_stop returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_resource_to_address64
#define APP_WRAPPER_FOR_acpi_resource_to_address64
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_resource_to_address64
#define APP_WRAPPER_FOR_acpi_resource_to_address64
FUNCTION_WRAPPER(acpi_resource_to_address64, (struct acpi_resource *resource, struct acpi_resource_address64 *out), {
    kern_printk("acpi_resource_to_address64 is invoked.\n");
    PRE_WRAPPER_FUNC(resource, out);
    acpi_status ret = acpi_resource_to_address64(resource, out);
    POST_WRAPPER_FUNC(resource, out);
    kern_printk("acpi_resource_to_address64 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_rescan_partitions
#define APP_WRAPPER_FOR_rescan_partitions
#endif
 
#ifndef APP_WRAPPER_FOR_rescan_partitions
#define APP_WRAPPER_FOR_rescan_partitions
FUNCTION_WRAPPER(rescan_partitions, (struct gendisk *disk, struct block_device *bdev), {
    WRAP_RECURSIVE(disk);
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    kern_printk("rescan_partitions is invoked.\n");
    PRE_WRAPPER_FUNC(disk, bdev);
    int ret = rescan_partitions(disk, bdev);
    POST_WRAPPER_FUNC(disk, bdev);
    kern_printk("rescan_partitions returned.\n");
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_devres_add
#define APP_WRAPPER_FOR_devres_add
#endif
 
#ifndef APP_WRAPPER_FOR_devres_add
#define APP_WRAPPER_FOR_devres_add
FUNCTION_WRAPPER_VOID(devres_add, (struct device *dev, void *res), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("devres_add is invoked.\n");
    PRE_WRAPPER_FUNC(dev, res);
    devres_add(dev, res);
    POST_WRAPPER_FUNC(dev, res);
    kern_printk("devres_add returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR___hw_addr_del_multiple
#define APP_WRAPPER_FOR___hw_addr_del_multiple
#endif
 
#ifndef APP_WRAPPER_FOR___hw_addr_del_multiple
#define APP_WRAPPER_FOR___hw_addr_del_multiple
FUNCTION_WRAPPER_VOID(__hw_addr_del_multiple, (struct netdev_hw_addr_list *to_list, struct netdev_hw_addr_list *from_list, int addr_len, unsigned char addr_type), {
    kern_printk("__hw_addr_del_multiple is invoked.\n");
    PRE_WRAPPER_FUNC(to_list, from_list, addr_len, addr_type);
    __hw_addr_del_multiple(to_list, from_list, addr_len, addr_type);
    POST_WRAPPER_FUNC(to_list, from_list, addr_len, addr_type);
    kern_printk("__hw_addr_del_multiple returned.\n");
})
#endif


#ifndef KERN_ADDR_do_huge_pmd_numa_page
#define APP_WRAPPER_FOR_do_huge_pmd_numa_page
#endif
 
#ifndef APP_WRAPPER_FOR_do_huge_pmd_numa_page
#define APP_WRAPPER_FOR_do_huge_pmd_numa_page
FUNCTION_WRAPPER(do_huge_pmd_numa_page, (struct mm_struct *mm, struct vm_area_struct *vma, unsigned long addr, pmd_t pmd, pmd_t *pmdp), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("do_huge_pmd_numa_page is invoked.\n");
    PRE_WRAPPER_FUNC(mm, vma, addr, pmd, pmdp);
    int ret = do_huge_pmd_numa_page(mm, vma, addr, pmd, pmdp);
    POST_WRAPPER_FUNC(mm, vma, addr, pmd, pmdp);
    kern_printk("do_huge_pmd_numa_page returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_simple_transaction_read
#define APP_WRAPPER_FOR_simple_transaction_read
#endif
 
#ifndef APP_WRAPPER_FOR_simple_transaction_read
#define APP_WRAPPER_FOR_simple_transaction_read
FUNCTION_WRAPPER(simple_transaction_read, (struct file *file, char *buf, size_t size, loff_t *pos), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("simple_transaction_read is invoked.\n");
    PRE_WRAPPER_FUNC(file, buf, size, pos);
    ssize_t ret = simple_transaction_read(file, buf, size, pos);
    POST_WRAPPER_FUNC(file, buf, size, pos);
    kern_printk("simple_transaction_read returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pnp_disable_dev
#define APP_WRAPPER_FOR_pnp_disable_dev
#endif
 
#ifndef APP_WRAPPER_FOR_pnp_disable_dev
#define APP_WRAPPER_FOR_pnp_disable_dev
FUNCTION_WRAPPER(pnp_disable_dev, (struct pnp_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pnp_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pnp_disable_dev is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pnp_disable_dev(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pnp_disable_dev returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pnp_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_get_table_by_index
#define APP_WRAPPER_FOR_acpi_get_table_by_index
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_table_by_index
#define APP_WRAPPER_FOR_acpi_get_table_by_index
FUNCTION_WRAPPER(acpi_get_table_by_index, (u32 table_index, struct acpi_table_header **out_table), {
    kern_printk("acpi_get_table_by_index is invoked.\n");
    PRE_WRAPPER_FUNC(table_index, out_table);
    acpi_status ret = acpi_get_table_by_index(table_index, out_table);
    POST_WRAPPER_FUNC(table_index, out_table);
    kern_printk("acpi_get_table_by_index returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_pci_device_do_suspend
#define APP_WRAPPER_FOR_ata_pci_device_do_suspend
#endif
 
#ifndef APP_WRAPPER_FOR_ata_pci_device_do_suspend
#define APP_WRAPPER_FOR_ata_pci_device_do_suspend
FUNCTION_WRAPPER_VOID(ata_pci_device_do_suspend, (struct pci_dev *pdev, pm_message_t mesg), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("ata_pci_device_do_suspend is invoked.\n");
    PRE_WRAPPER_FUNC(pdev, mesg);
    ata_pci_device_do_suspend(pdev, mesg);
    POST_WRAPPER_FUNC(pdev, mesg);
    kern_printk("ata_pci_device_do_suspend returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
})
#endif


#ifndef KERN_ADDR_lookup_one_len
#define APP_WRAPPER_FOR_lookup_one_len
#endif
 
#ifndef APP_WRAPPER_FOR_lookup_one_len
#define APP_WRAPPER_FOR_lookup_one_len
FUNCTION_WRAPPER(lookup_one_len, (const char *_arg1, struct dentry *_arg2, int _arg3), {
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("lookup_one_len is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    struct dentry *ret = lookup_one_len(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("lookup_one_len returned.\n");
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_twsk_unhash
#define APP_WRAPPER_FOR_inet_twsk_unhash
#endif
 
#ifndef APP_WRAPPER_FOR_inet_twsk_unhash
#define APP_WRAPPER_FOR_inet_twsk_unhash
FUNCTION_WRAPPER(inet_twsk_unhash, (struct inet_timewait_sock *tw), {
    WRAP_RECURSIVE(tw);
    TRACES_IF_WATCHPOINT(tw);
    SCAN_HEAD_FUNC(struct inet_timewait_sock)(*(TO_UNWATCHED_ADDRESS(tw)));
    kern_printk("inet_twsk_unhash is invoked.\n");
    PRE_WRAPPER_FUNC(tw);
    int ret = inet_twsk_unhash(tw);
    POST_WRAPPER_FUNC(tw);
    kern_printk("inet_twsk_unhash returned.\n");
    TRACES_IF_WATCHPOINT(tw);
    SCAN_HEAD_FUNC(struct inet_timewait_sock)(*(TO_UNWATCHED_ADDRESS(tw)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_set_geometry
#define APP_WRAPPER_FOR_dm_set_geometry
#endif
 
#ifndef APP_WRAPPER_FOR_dm_set_geometry
#define APP_WRAPPER_FOR_dm_set_geometry
FUNCTION_WRAPPER(dm_set_geometry, (struct mapped_device *md, struct hd_geometry *geo), {
    kern_printk("dm_set_geometry is invoked.\n");
    PRE_WRAPPER_FUNC(md, geo);
    int ret = dm_set_geometry(md, geo);
    POST_WRAPPER_FUNC(md, geo);
    kern_printk("dm_set_geometry returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_schedule_timeout_interruptible
#define APP_WRAPPER_FOR_schedule_timeout_interruptible
#endif
 
#ifndef APP_WRAPPER_FOR_schedule_timeout_interruptible
#define APP_WRAPPER_FOR_schedule_timeout_interruptible
FUNCTION_WRAPPER(schedule_timeout_interruptible, (signed long timeout), {
    kern_printk("schedule_timeout_interruptible is invoked.\n");
    PRE_WRAPPER_FUNC(timeout);
    long ret = schedule_timeout_interruptible(timeout);
    POST_WRAPPER_FUNC(timeout);
    kern_printk("schedule_timeout_interruptible returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_register_module_notifier
#define APP_WRAPPER_FOR_register_module_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_register_module_notifier
#define APP_WRAPPER_FOR_register_module_notifier
FUNCTION_WRAPPER(register_module_notifier, (struct notifier_block *nb), {
    WRAP_RECURSIVE(nb);
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    kern_printk("register_module_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(nb);
    int ret = register_module_notifier(nb);
    POST_WRAPPER_FUNC(nb);
    kern_printk("register_module_notifier returned.\n");
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sff_port_intr
#define APP_WRAPPER_FOR_ata_sff_port_intr
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_port_intr
#define APP_WRAPPER_FOR_ata_sff_port_intr
FUNCTION_WRAPPER(ata_sff_port_intr, (struct ata_port *ap, struct ata_queued_cmd *qc), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    WRAP_RECURSIVE(qc);
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    kern_printk("ata_sff_port_intr is invoked.\n");
    PRE_WRAPPER_FUNC(ap, qc);
    int ret = ata_sff_port_intr(ap, qc);
    POST_WRAPPER_FUNC(ap, qc);
    kern_printk("ata_sff_port_intr returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    return ret;
})
#endif


#ifndef KERN_ADDR_proc_net_fops_create
#define APP_WRAPPER_FOR_proc_net_fops_create
#endif
 
#ifndef APP_WRAPPER_FOR_proc_net_fops_create
#define APP_WRAPPER_FOR_proc_net_fops_create
FUNCTION_WRAPPER(proc_net_fops_create, (struct net *net, const char *name, umode_t mode, const struct file_operations *fops), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    WRAP_RECURSIVE(fops);
    TRACES_IF_WATCHPOINT(fops);
    SCAN_HEAD_FUNC(const struct file_operations)(*(TO_UNWATCHED_ADDRESS(fops)));
    kern_printk("proc_net_fops_create is invoked.\n");
    PRE_WRAPPER_FUNC(net, name, mode, fops);
    struct proc_dir_entry *ret = proc_net_fops_create(net, name, mode, fops);
    POST_WRAPPER_FUNC(net, name, mode, fops);
    kern_printk("proc_net_fops_create returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    TRACES_IF_WATCHPOINT(fops);
    SCAN_HEAD_FUNC(const struct file_operations)(*(TO_UNWATCHED_ADDRESS(fops)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_set_rx_mode
#define APP_WRAPPER_FOR_dev_set_rx_mode
#endif
 
#ifndef APP_WRAPPER_FOR_dev_set_rx_mode
#define APP_WRAPPER_FOR_dev_set_rx_mode
FUNCTION_WRAPPER_VOID(dev_set_rx_mode, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_set_rx_mode is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    dev_set_rx_mode(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_set_rx_mode returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_rand_initialize_disk
#define APP_WRAPPER_FOR_rand_initialize_disk
#endif
 
#ifndef APP_WRAPPER_FOR_rand_initialize_disk
#define APP_WRAPPER_FOR_rand_initialize_disk
FUNCTION_WRAPPER_VOID(rand_initialize_disk, (struct gendisk *disk), {
    WRAP_RECURSIVE(disk);
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    kern_printk("rand_initialize_disk is invoked.\n");
    PRE_WRAPPER_FUNC(disk);
    rand_initialize_disk(disk);
    POST_WRAPPER_FUNC(disk);
    kern_printk("rand_initialize_disk returned.\n");
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
})
#endif


#ifndef KERN_ADDR_from_kqid_munged
#define APP_WRAPPER_FOR_from_kqid_munged
#endif
 
#ifndef APP_WRAPPER_FOR_from_kqid_munged
#define APP_WRAPPER_FOR_from_kqid_munged
FUNCTION_WRAPPER(from_kqid_munged, (struct user_namespace *to, struct kqid qid), {
    kern_printk("from_kqid_munged is invoked.\n");
    PRE_WRAPPER_FUNC(to, qid);
    qid_t ret = from_kqid_munged(to, qid);
    POST_WRAPPER_FUNC(to, qid);
    kern_printk("from_kqid_munged returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___irq_set_affinity_locked
#define APP_WRAPPER_FOR___irq_set_affinity_locked
#endif
 
#ifndef APP_WRAPPER_FOR___irq_set_affinity_locked
#define APP_WRAPPER_FOR___irq_set_affinity_locked
FUNCTION_WRAPPER(__irq_set_affinity_locked, (struct irq_data *data, const struct cpumask *cpumask), {
    WRAP_RECURSIVE(data);
    TRACES_IF_WATCHPOINT(data);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(data)));
    kern_printk("__irq_set_affinity_locked is invoked.\n");
    PRE_WRAPPER_FUNC(data, cpumask);
    int ret = __irq_set_affinity_locked(data, cpumask);
    POST_WRAPPER_FUNC(data, cpumask);
    kern_printk("__irq_set_affinity_locked returned.\n");
    TRACES_IF_WATCHPOINT(data);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(data)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_irq_penalty_init
#define APP_WRAPPER_FOR_acpi_irq_penalty_init
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_irq_penalty_init
#define APP_WRAPPER_FOR_acpi_irq_penalty_init
FUNCTION_WRAPPER(acpi_irq_penalty_init, (), {
    kern_printk("acpi_irq_penalty_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = acpi_irq_penalty_init();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_irq_penalty_init returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___unregister_chrdev
#define APP_WRAPPER_FOR___unregister_chrdev
#endif
 
#ifndef APP_WRAPPER_FOR___unregister_chrdev
#define APP_WRAPPER_FOR___unregister_chrdev
FUNCTION_WRAPPER_VOID(__unregister_chrdev, (unsigned int major, unsigned int baseminor, unsigned int count, const char *name), {
    kern_printk("__unregister_chrdev is invoked.\n");
    PRE_WRAPPER_FUNC(major, baseminor, count, name);
    __unregister_chrdev(major, baseminor, count, name);
    POST_WRAPPER_FUNC(major, baseminor, count, name);
    kern_printk("__unregister_chrdev returned.\n");
})
#endif


#ifndef KERN_ADDR_split_page
#define APP_WRAPPER_FOR_split_page
#endif
 
#ifndef APP_WRAPPER_FOR_split_page
#define APP_WRAPPER_FOR_split_page
FUNCTION_WRAPPER_VOID(split_page, (struct page *page, unsigned int order), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("split_page is invoked.\n");
    PRE_WRAPPER_FUNC(page, order);
    split_page(page, order);
    POST_WRAPPER_FUNC(page, order);
    kern_printk("split_page returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_call_function_init
#define APP_WRAPPER_FOR_call_function_init
#endif
 
#ifndef APP_WRAPPER_FOR_call_function_init
#define APP_WRAPPER_FOR_call_function_init
FUNCTION_WRAPPER_VOID(call_function_init, (), {
    kern_printk("call_function_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    call_function_init();
    POST_WRAPPER_FUNC();
    kern_printk("call_function_init returned.\n");
})
#endif


#ifndef KERN_ADDR_ra_submit
#define APP_WRAPPER_FOR_ra_submit
#endif
 
#ifndef APP_WRAPPER_FOR_ra_submit
#define APP_WRAPPER_FOR_ra_submit
FUNCTION_WRAPPER(ra_submit, (struct file_ra_state *ra, struct address_space *mapping, struct file *filp), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    WRAP_RECURSIVE(filp);
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    kern_printk("ra_submit is invoked.\n");
    PRE_WRAPPER_FUNC(ra, mapping, filp);
    long ret = ra_submit(ra, mapping, filp);
    POST_WRAPPER_FUNC(ra, mapping, filp);
    kern_printk("ra_submit returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_mbind
#define APP_WRAPPER_FOR_compat_sys_mbind
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_mbind
#define APP_WRAPPER_FOR_compat_sys_mbind
FUNCTION_WRAPPER(compat_sys_mbind, (compat_ulong_t start, compat_ulong_t len, compat_ulong_t mode, compat_ulong_t *nmask, compat_ulong_t maxnode, compat_ulong_t flags), {
    kern_printk("compat_sys_mbind is invoked.\n");
    PRE_WRAPPER_FUNC(start, len, mode, nmask, maxnode, flags);
    long ret = compat_sys_mbind(start, len, mode, nmask, maxnode, flags);
    POST_WRAPPER_FUNC(start, len, mode, nmask, maxnode, flags);
    kern_printk("compat_sys_mbind returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_enable_event
#define APP_WRAPPER_FOR_acpi_enable_event
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_enable_event
#define APP_WRAPPER_FOR_acpi_enable_event
FUNCTION_WRAPPER(acpi_enable_event, (u32 event, u32 flags), {
    kern_printk("acpi_enable_event is invoked.\n");
    PRE_WRAPPER_FUNC(event, flags);
    acpi_status ret = acpi_enable_event(event, flags);
    POST_WRAPPER_FUNC(event, flags);
    kern_printk("acpi_enable_event returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_install_initialization_handler
#define APP_WRAPPER_FOR_acpi_install_initialization_handler
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_install_initialization_handler
#define APP_WRAPPER_FOR_acpi_install_initialization_handler
FUNCTION_WRAPPER(acpi_install_initialization_handler, (acpi_init_handler handler, u32 function), {
    WRAP_FUNCTION(handler);
    kern_printk("acpi_install_initialization_handler is invoked.\n");
    PRE_WRAPPER_FUNC(handler, function);
    acpi_status ret = acpi_install_initialization_handler(handler, function);
    POST_WRAPPER_FUNC(handler, function);
    kern_printk("acpi_install_initialization_handler returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_sysinfo
#define APP_WRAPPER_FOR_compat_sys_sysinfo
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_sysinfo
#define APP_WRAPPER_FOR_compat_sys_sysinfo
FUNCTION_WRAPPER(compat_sys_sysinfo, (struct compat_sysinfo *info), {
    kern_printk("compat_sys_sysinfo is invoked.\n");
    PRE_WRAPPER_FUNC(info);
    long ret = compat_sys_sysinfo(info);
    POST_WRAPPER_FUNC(info);
    kern_printk("compat_sys_sysinfo returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_io_apic_setup_irq_pin_once
#define APP_WRAPPER_FOR_io_apic_setup_irq_pin_once
#endif
 
#ifndef APP_WRAPPER_FOR_io_apic_setup_irq_pin_once
#define APP_WRAPPER_FOR_io_apic_setup_irq_pin_once
FUNCTION_WRAPPER(io_apic_setup_irq_pin_once, (unsigned int irq, int node, struct io_apic_irq_attr *attr), {
    kern_printk("io_apic_setup_irq_pin_once is invoked.\n");
    PRE_WRAPPER_FUNC(irq, node, attr);
    int ret = io_apic_setup_irq_pin_once(irq, node, attr);
    POST_WRAPPER_FUNC(irq, node, attr);
    kern_printk("io_apic_setup_irq_pin_once returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_rcu_note_context_switch
#define APP_WRAPPER_FOR_rcu_note_context_switch
#endif
 
#ifndef APP_WRAPPER_FOR_rcu_note_context_switch
#define APP_WRAPPER_FOR_rcu_note_context_switch
FUNCTION_WRAPPER_VOID(rcu_note_context_switch, (int cpu), {
    kern_printk("rcu_note_context_switch is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    rcu_note_context_switch(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("rcu_note_context_switch returned.\n");
})
#endif


#ifndef KERN_ADDR_jbd2_journal_load
#define APP_WRAPPER_FOR_jbd2_journal_load
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_load
#define APP_WRAPPER_FOR_jbd2_journal_load
FUNCTION_WRAPPER(jbd2_journal_load, (journal_t *journal), {
    WRAP_RECURSIVE(journal);
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    kern_printk("jbd2_journal_load is invoked.\n");
    PRE_WRAPPER_FUNC(journal);
    int ret = jbd2_journal_load(journal);
    POST_WRAPPER_FUNC(journal);
    kern_printk("jbd2_journal_load returned.\n");
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    return ret;
})
#endif


#ifndef KERN_ADDR___lock_page_killable
#define APP_WRAPPER_FOR___lock_page_killable
#endif
 
#ifndef APP_WRAPPER_FOR___lock_page_killable
#define APP_WRAPPER_FOR___lock_page_killable
FUNCTION_WRAPPER(__lock_page_killable, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("__lock_page_killable is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    int ret = __lock_page_killable(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("__lock_page_killable returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kset_init
#define APP_WRAPPER_FOR_kset_init
#endif
 
#ifndef APP_WRAPPER_FOR_kset_init
#define APP_WRAPPER_FOR_kset_init
FUNCTION_WRAPPER_VOID(kset_init, (struct kset *kset), {
    WRAP_RECURSIVE(kset);
    TRACES_IF_WATCHPOINT(kset);
    SCAN_HEAD_FUNC(struct kset)(*(TO_UNWATCHED_ADDRESS(kset)));
    kern_printk("kset_init is invoked.\n");
    PRE_WRAPPER_FUNC(kset);
    kset_init(kset);
    POST_WRAPPER_FUNC(kset);
    kern_printk("kset_init returned.\n");
    TRACES_IF_WATCHPOINT(kset);
    SCAN_HEAD_FUNC(struct kset)(*(TO_UNWATCHED_ADDRESS(kset)));
})
#endif


#ifndef KERN_ADDR_drain_workqueue
#define APP_WRAPPER_FOR_drain_workqueue
#endif
 
#ifndef APP_WRAPPER_FOR_drain_workqueue
#define APP_WRAPPER_FOR_drain_workqueue
FUNCTION_WRAPPER_VOID(drain_workqueue, (struct workqueue_struct *wq), {
    kern_printk("drain_workqueue is invoked.\n");
    PRE_WRAPPER_FUNC(wq);
    drain_workqueue(wq);
    POST_WRAPPER_FUNC(wq);
    kern_printk("drain_workqueue returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_update_resource
#define APP_WRAPPER_FOR_pci_update_resource
#endif
 
#ifndef APP_WRAPPER_FOR_pci_update_resource
#define APP_WRAPPER_FOR_pci_update_resource
FUNCTION_WRAPPER_VOID(pci_update_resource, (struct pci_dev *dev, int resno), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_update_resource is invoked.\n");
    PRE_WRAPPER_FUNC(dev, resno);
    pci_update_resource(dev, resno);
    POST_WRAPPER_FUNC(dev, resno);
    kern_printk("pci_update_resource returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_capable
#define APP_WRAPPER_FOR_capable
#endif
 
#ifndef APP_WRAPPER_FOR_capable
#define APP_WRAPPER_FOR_capable
FUNCTION_WRAPPER(capable, (int cap), {
    kern_printk("capable is invoked.\n");
    PRE_WRAPPER_FUNC(cap);
    bool ret = capable(cap);
    POST_WRAPPER_FUNC(cap);
    kern_printk("capable returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blkdev_ioctl
#define APP_WRAPPER_FOR_blkdev_ioctl
#endif
 
#ifndef APP_WRAPPER_FOR_blkdev_ioctl
#define APP_WRAPPER_FOR_blkdev_ioctl
FUNCTION_WRAPPER(blkdev_ioctl, (struct block_device *_arg1, fmode_t _arg2, unsigned int _arg3, unsigned long _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blkdev_ioctl is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = blkdev_ioctl(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("blkdev_ioctl returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR___init_waitqueue_head
#define APP_WRAPPER_FOR___init_waitqueue_head
#endif
 
#ifndef APP_WRAPPER_FOR___init_waitqueue_head
#define APP_WRAPPER_FOR___init_waitqueue_head
FUNCTION_WRAPPER_VOID(__init_waitqueue_head, (wait_queue_head_t *q, const char *name, struct lock_class_key *_arg1), {
    kern_printk("__init_waitqueue_head is invoked.\n");
    PRE_WRAPPER_FUNC(q, name, _arg1);
    __init_waitqueue_head(q, name, _arg1);
    POST_WRAPPER_FUNC(q, name, _arg1);
    kern_printk("__init_waitqueue_head returned.\n");
})
#endif


#ifndef KERN_ADDR_d_set_d_op
#define APP_WRAPPER_FOR_d_set_d_op
#endif
 
#ifndef APP_WRAPPER_FOR_d_set_d_op
#define APP_WRAPPER_FOR_d_set_d_op
FUNCTION_WRAPPER_VOID(d_set_d_op, (struct dentry *dentry, const struct dentry_operations *op), {
    WRAP_RECURSIVE(dentry);
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    WRAP_RECURSIVE(op);
    TRACES_IF_WATCHPOINT(op);
    SCAN_HEAD_FUNC(const struct dentry_operations)(*(TO_UNWATCHED_ADDRESS(op)));
    kern_printk("d_set_d_op is invoked.\n");
    PRE_WRAPPER_FUNC(dentry, op);
    d_set_d_op(dentry, op);
    POST_WRAPPER_FUNC(dentry, op);
    kern_printk("d_set_d_op returned.\n");
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    TRACES_IF_WATCHPOINT(op);
    SCAN_HEAD_FUNC(const struct dentry_operations)(*(TO_UNWATCHED_ADDRESS(op)));
})
#endif


#ifndef KERN_ADDR_native_pagetable_reserve
#define APP_WRAPPER_FOR_native_pagetable_reserve
#endif
 
#ifndef APP_WRAPPER_FOR_native_pagetable_reserve
#define APP_WRAPPER_FOR_native_pagetable_reserve
FUNCTION_WRAPPER_VOID(native_pagetable_reserve, (u64 start, u64 end), {
    kern_printk("native_pagetable_reserve is invoked.\n");
    PRE_WRAPPER_FUNC(start, end);
    native_pagetable_reserve(start, end);
    POST_WRAPPER_FUNC(start, end);
    kern_printk("native_pagetable_reserve returned.\n");
})
#endif


#ifndef KERN_ADDR___class_register
#define APP_WRAPPER_FOR___class_register
#endif
 
#ifndef APP_WRAPPER_FOR___class_register
#define APP_WRAPPER_FOR___class_register
FUNCTION_WRAPPER(__class_register, (struct class_ *class_, struct lock_class_key *key), {
    WRAP_RECURSIVE(class_);
    TRACES_IF_WATCHPOINT(class_);
    SCAN_HEAD_FUNC(struct class_)(*(TO_UNWATCHED_ADDRESS(class_)));
    kern_printk("__class_register is invoked.\n");
    PRE_WRAPPER_FUNC(class_, key);
    int ret = __class_register(class_, key);
    POST_WRAPPER_FUNC(class_, key);
    kern_printk("__class_register returned.\n");
    TRACES_IF_WATCHPOINT(class_);
    SCAN_HEAD_FUNC(struct class_)(*(TO_UNWATCHED_ADDRESS(class_)));
    return ret;
})
#endif


#ifndef KERN_ADDR_netlink_rcv_skb
#define APP_WRAPPER_FOR_netlink_rcv_skb
#endif
 
#ifndef APP_WRAPPER_FOR_netlink_rcv_skb
#define APP_WRAPPER_FOR_netlink_rcv_skb
FUNCTION_WRAPPER(netlink_rcv_skb, (struct sk_buff *skb, int (*cb)(struct sk_buff *, struct nlmsghdr *)), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_FUNCTION(cb);
    kern_printk("netlink_rcv_skb is invoked.\n");
    PRE_WRAPPER_FUNC(skb, cb);
    int ret = netlink_rcv_skb(skb, cb);
    POST_WRAPPER_FUNC(skb, cb);
    kern_printk("netlink_rcv_skb returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_inode_claim_rsv_space
#define APP_WRAPPER_FOR_inode_claim_rsv_space
#endif
 
#ifndef APP_WRAPPER_FOR_inode_claim_rsv_space
#define APP_WRAPPER_FOR_inode_claim_rsv_space
FUNCTION_WRAPPER_VOID(inode_claim_rsv_space, (struct inode *inode, qsize_t number), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("inode_claim_rsv_space is invoked.\n");
    PRE_WRAPPER_FUNC(inode, number);
    inode_claim_rsv_space(inode, number);
    POST_WRAPPER_FUNC(inode, number);
    kern_printk("inode_claim_rsv_space returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_class_destroy
#define APP_WRAPPER_FOR_class_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_class_destroy
#define APP_WRAPPER_FOR_class_destroy
FUNCTION_WRAPPER_VOID(class_destroy, (struct class_ *cls), {
    WRAP_RECURSIVE(cls);
    TRACES_IF_WATCHPOINT(cls);
    SCAN_HEAD_FUNC(struct class_)(*(TO_UNWATCHED_ADDRESS(cls)));
    kern_printk("class_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(cls);
    class_destroy(cls);
    POST_WRAPPER_FUNC(cls);
    kern_printk("class_destroy returned.\n");
    TRACES_IF_WATCHPOINT(cls);
    SCAN_HEAD_FUNC(struct class_)(*(TO_UNWATCHED_ADDRESS(cls)));
})
#endif


#ifndef KERN_ADDR___blkdev_driver_ioctl
#define APP_WRAPPER_FOR___blkdev_driver_ioctl
#endif
 
#ifndef APP_WRAPPER_FOR___blkdev_driver_ioctl
#define APP_WRAPPER_FOR___blkdev_driver_ioctl
FUNCTION_WRAPPER(__blkdev_driver_ioctl, (struct block_device *_arg1, fmode_t _arg2, unsigned int _arg3, unsigned long _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__blkdev_driver_ioctl is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = __blkdev_driver_ioctl(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("__blkdev_driver_ioctl returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_netif_set_real_num_tx_queues
#define APP_WRAPPER_FOR_netif_set_real_num_tx_queues
#endif
 
#ifndef APP_WRAPPER_FOR_netif_set_real_num_tx_queues
#define APP_WRAPPER_FOR_netif_set_real_num_tx_queues
FUNCTION_WRAPPER(netif_set_real_num_tx_queues, (struct net_device *dev, unsigned int txq), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("netif_set_real_num_tx_queues is invoked.\n");
    PRE_WRAPPER_FUNC(dev, txq);
    int ret = netif_set_real_num_tx_queues(dev, txq);
    POST_WRAPPER_FUNC(dev, txq);
    kern_printk("netif_set_real_num_tx_queues returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_smp_prepare_boot_cpu
#define APP_WRAPPER_FOR_smp_prepare_boot_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_smp_prepare_boot_cpu
#define APP_WRAPPER_FOR_smp_prepare_boot_cpu
FUNCTION_WRAPPER_VOID(smp_prepare_boot_cpu, (), {
    kern_printk("smp_prepare_boot_cpu is invoked.\n");
    PRE_WRAPPER_FUNC();
    smp_prepare_boot_cpu();
    POST_WRAPPER_FUNC();
    kern_printk("smp_prepare_boot_cpu returned.\n");
})
#endif


#ifndef KERN_ADDR_probe_kernel_write
#define APP_WRAPPER_FOR_probe_kernel_write
#endif
 
#ifndef APP_WRAPPER_FOR_probe_kernel_write
#define APP_WRAPPER_FOR_probe_kernel_write
FUNCTION_WRAPPER(probe_kernel_write, (void *dst, const void *src, size_t size), {
    kern_printk("probe_kernel_write is invoked.\n");
    PRE_WRAPPER_FUNC(dst, src, size);
    long ret = probe_kernel_write(dst, src, size);
    POST_WRAPPER_FUNC(dst, src, size);
    kern_printk("probe_kernel_write returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_native_apic_icr_read
#define APP_WRAPPER_FOR_native_apic_icr_read
#endif
 
#ifndef APP_WRAPPER_FOR_native_apic_icr_read
#define APP_WRAPPER_FOR_native_apic_icr_read
FUNCTION_WRAPPER(native_apic_icr_read, (), {
    kern_printk("native_apic_icr_read is invoked.\n");
    PRE_WRAPPER_FUNC();
    u64 ret = native_apic_icr_read();
    POST_WRAPPER_FUNC();
    kern_printk("native_apic_icr_read returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_put_pid
#define APP_WRAPPER_FOR_put_pid
#endif
 
#ifndef APP_WRAPPER_FOR_put_pid
#define APP_WRAPPER_FOR_put_pid
FUNCTION_WRAPPER_VOID(put_pid, (struct pid *pid), {
    WRAP_RECURSIVE(pid);
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
    kern_printk("put_pid is invoked.\n");
    PRE_WRAPPER_FUNC(pid);
    put_pid(pid);
    POST_WRAPPER_FUNC(pid);
    kern_printk("put_pid returned.\n");
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
})
#endif


#ifndef KERN_ADDR_force_page_cache_readahead
#define APP_WRAPPER_FOR_force_page_cache_readahead
#endif
 
#ifndef APP_WRAPPER_FOR_force_page_cache_readahead
#define APP_WRAPPER_FOR_force_page_cache_readahead
FUNCTION_WRAPPER(force_page_cache_readahead, (struct address_space *mapping, struct file *filp, unsigned long offset, unsigned long nr_to_read), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    WRAP_RECURSIVE(filp);
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    kern_printk("force_page_cache_readahead is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, filp, offset, nr_to_read);
    int ret = force_page_cache_readahead(mapping, filp, offset, nr_to_read);
    POST_WRAPPER_FUNC(mapping, filp, offset, nr_to_read);
    kern_printk("force_page_cache_readahead returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_devtmpfs_create_node
#define APP_WRAPPER_FOR_devtmpfs_create_node
#endif
 
#ifndef APP_WRAPPER_FOR_devtmpfs_create_node
#define APP_WRAPPER_FOR_devtmpfs_create_node
FUNCTION_WRAPPER(devtmpfs_create_node, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("devtmpfs_create_node is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = devtmpfs_create_node(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("devtmpfs_create_node returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_acquire_mutex
#define APP_WRAPPER_FOR_acpi_acquire_mutex
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_acquire_mutex
#define APP_WRAPPER_FOR_acpi_acquire_mutex
FUNCTION_WRAPPER(acpi_acquire_mutex, (acpi_handle handle, acpi_string pathname, u16 timeout), {
    kern_printk("acpi_acquire_mutex is invoked.\n");
    PRE_WRAPPER_FUNC(handle, pathname, timeout);
    acpi_status ret = acpi_acquire_mutex(handle, pathname, timeout);
    POST_WRAPPER_FUNC(handle, pathname, timeout);
    kern_printk("acpi_acquire_mutex returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___rtnl_link_unregister
#define APP_WRAPPER_FOR___rtnl_link_unregister
#endif
 
#ifndef APP_WRAPPER_FOR___rtnl_link_unregister
#define APP_WRAPPER_FOR___rtnl_link_unregister
FUNCTION_WRAPPER_VOID(__rtnl_link_unregister, (struct rtnl_link_ops *ops), {
    WRAP_RECURSIVE(ops);
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct rtnl_link_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    kern_printk("__rtnl_link_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(ops);
    __rtnl_link_unregister(ops);
    POST_WRAPPER_FUNC(ops);
    kern_printk("__rtnl_link_unregister returned.\n");
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct rtnl_link_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
})
#endif


#ifndef KERN_ADDR_rcutorture_record_progress
#define APP_WRAPPER_FOR_rcutorture_record_progress
#endif
 
#ifndef APP_WRAPPER_FOR_rcutorture_record_progress
#define APP_WRAPPER_FOR_rcutorture_record_progress
FUNCTION_WRAPPER_VOID(rcutorture_record_progress, (unsigned long vernum), {
    kern_printk("rcutorture_record_progress is invoked.\n");
    PRE_WRAPPER_FUNC(vernum);
    rcutorture_record_progress(vernum);
    POST_WRAPPER_FUNC(vernum);
    kern_printk("rcutorture_record_progress returned.\n");
})
#endif


#ifndef KERN_ADDR_hrtimer_get_remaining
#define APP_WRAPPER_FOR_hrtimer_get_remaining
#endif
 
#ifndef APP_WRAPPER_FOR_hrtimer_get_remaining
#define APP_WRAPPER_FOR_hrtimer_get_remaining
FUNCTION_WRAPPER(hrtimer_get_remaining, (const struct hrtimer *timer), {
    WRAP_RECURSIVE(timer);
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(const struct hrtimer)(*(TO_UNWATCHED_ADDRESS(timer)));
    kern_printk("hrtimer_get_remaining is invoked.\n");
    PRE_WRAPPER_FUNC(timer);
    ktime_t ret = hrtimer_get_remaining(timer);
    POST_WRAPPER_FUNC(timer);
    kern_printk("hrtimer_get_remaining returned.\n");
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(const struct hrtimer)(*(TO_UNWATCHED_ADDRESS(timer)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_set_device_limits
#define APP_WRAPPER_FOR_dm_set_device_limits
#endif
 
#ifndef APP_WRAPPER_FOR_dm_set_device_limits
#define APP_WRAPPER_FOR_dm_set_device_limits
FUNCTION_WRAPPER(dm_set_device_limits, (struct dm_target *ti, struct dm_dev *dev, sector_t start, sector_t len, void *data), {
    WRAP_RECURSIVE(ti);
    TRACES_IF_WATCHPOINT(ti);
    SCAN_HEAD_FUNC(struct dm_target)(*(TO_UNWATCHED_ADDRESS(ti)));
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct dm_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dm_set_device_limits is invoked.\n");
    PRE_WRAPPER_FUNC(ti, dev, start, len, data);
    int ret = dm_set_device_limits(ti, dev, start, len, data);
    POST_WRAPPER_FUNC(ti, dev, start, len, data);
    kern_printk("dm_set_device_limits returned.\n");
    TRACES_IF_WATCHPOINT(ti);
    SCAN_HEAD_FUNC(struct dm_target)(*(TO_UNWATCHED_ADDRESS(ti)));
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct dm_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_interruptible_sleep_on_timeout
#define APP_WRAPPER_FOR_interruptible_sleep_on_timeout
#endif
 
#ifndef APP_WRAPPER_FOR_interruptible_sleep_on_timeout
#define APP_WRAPPER_FOR_interruptible_sleep_on_timeout
FUNCTION_WRAPPER(interruptible_sleep_on_timeout, (wait_queue_head_t *q, signed long timeout), {
    kern_printk("interruptible_sleep_on_timeout is invoked.\n");
    PRE_WRAPPER_FUNC(q, timeout);
    long ret = interruptible_sleep_on_timeout(q, timeout);
    POST_WRAPPER_FUNC(q, timeout);
    kern_printk("interruptible_sleep_on_timeout returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_show_state_filter
#define APP_WRAPPER_FOR_show_state_filter
#endif
 
#ifndef APP_WRAPPER_FOR_show_state_filter
#define APP_WRAPPER_FOR_show_state_filter
FUNCTION_WRAPPER_VOID(show_state_filter, (unsigned long state_filter), {
    kern_printk("show_state_filter is invoked.\n");
    PRE_WRAPPER_FUNC(state_filter);
    show_state_filter(state_filter);
    POST_WRAPPER_FUNC(state_filter);
    kern_printk("show_state_filter returned.\n");
})
#endif


#ifndef KERN_ADDR_sysfs_remove_files
#define APP_WRAPPER_FOR_sysfs_remove_files
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_remove_files
#define APP_WRAPPER_FOR_sysfs_remove_files
FUNCTION_WRAPPER_VOID(sysfs_remove_files, (struct kobject *kobj, const struct attribute **attr), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    kern_printk("sysfs_remove_files is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, attr);
    sysfs_remove_files(kobj, attr);
    POST_WRAPPER_FUNC(kobj, attr);
    kern_printk("sysfs_remove_files returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
})
#endif


#ifndef KERN_ADDR_profile_handoff_task
#define APP_WRAPPER_FOR_profile_handoff_task
#endif
 
#ifndef APP_WRAPPER_FOR_profile_handoff_task
#define APP_WRAPPER_FOR_profile_handoff_task
FUNCTION_WRAPPER(profile_handoff_task, (struct task_struct *task), {
    WRAP_RECURSIVE(task);
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    kern_printk("profile_handoff_task is invoked.\n");
    PRE_WRAPPER_FUNC(task);
    int ret = profile_handoff_task(task);
    POST_WRAPPER_FUNC(task);
    kern_printk("profile_handoff_task returned.\n");
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    return ret;
})
#endif


#ifndef KERN_ADDR_disk_part_iter_init
#define APP_WRAPPER_FOR_disk_part_iter_init
#endif
 
#ifndef APP_WRAPPER_FOR_disk_part_iter_init
#define APP_WRAPPER_FOR_disk_part_iter_init
FUNCTION_WRAPPER_VOID(disk_part_iter_init, (struct disk_part_iter *piter, struct gendisk *disk, unsigned int flags), {
    WRAP_RECURSIVE(piter);
    TRACES_IF_WATCHPOINT(piter);
    SCAN_HEAD_FUNC(struct disk_part_iter)(*(TO_UNWATCHED_ADDRESS(piter)));
    WRAP_RECURSIVE(disk);
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    kern_printk("disk_part_iter_init is invoked.\n");
    PRE_WRAPPER_FUNC(piter, disk, flags);
    disk_part_iter_init(piter, disk, flags);
    POST_WRAPPER_FUNC(piter, disk, flags);
    kern_printk("disk_part_iter_init returned.\n");
    TRACES_IF_WATCHPOINT(piter);
    SCAN_HEAD_FUNC(struct disk_part_iter)(*(TO_UNWATCHED_ADDRESS(piter)));
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
})
#endif


#ifndef KERN_ADDR_blk_complete_request
#define APP_WRAPPER_FOR_blk_complete_request
#endif
 
#ifndef APP_WRAPPER_FOR_blk_complete_request
#define APP_WRAPPER_FOR_blk_complete_request
FUNCTION_WRAPPER_VOID(blk_complete_request, (struct request *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_complete_request is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    blk_complete_request(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("blk_complete_request returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_dev_kfree_skb_any
#define APP_WRAPPER_FOR_dev_kfree_skb_any
#endif
 
#ifndef APP_WRAPPER_FOR_dev_kfree_skb_any
#define APP_WRAPPER_FOR_dev_kfree_skb_any
FUNCTION_WRAPPER_VOID(dev_kfree_skb_any, (struct sk_buff *skb), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("dev_kfree_skb_any is invoked.\n");
    PRE_WRAPPER_FUNC(skb);
    dev_kfree_skb_any(skb);
    POST_WRAPPER_FUNC(skb);
    kern_printk("dev_kfree_skb_any returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR__local_bh_enable
#define APP_WRAPPER_FOR__local_bh_enable
#endif
 
#ifndef APP_WRAPPER_FOR__local_bh_enable
#define APP_WRAPPER_FOR__local_bh_enable
FUNCTION_WRAPPER_VOID(_local_bh_enable, (), {
    kern_printk("_local_bh_enable is invoked.\n");
    PRE_WRAPPER_FUNC();
    _local_bh_enable();
    POST_WRAPPER_FUNC();
    kern_printk("_local_bh_enable returned.\n");
})
#endif


#ifndef KERN_ADDR_inode_set_bytes
#define APP_WRAPPER_FOR_inode_set_bytes
#endif
 
#ifndef APP_WRAPPER_FOR_inode_set_bytes
#define APP_WRAPPER_FOR_inode_set_bytes
FUNCTION_WRAPPER_VOID(inode_set_bytes, (struct inode *inode, loff_t bytes), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("inode_set_bytes is invoked.\n");
    PRE_WRAPPER_FUNC(inode, bytes);
    inode_set_bytes(inode, bytes);
    POST_WRAPPER_FUNC(inode, bytes);
    kern_printk("inode_set_bytes returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_textsearch_find_continuous
#define APP_WRAPPER_FOR_textsearch_find_continuous
#endif
 
#ifndef APP_WRAPPER_FOR_textsearch_find_continuous
#define APP_WRAPPER_FOR_textsearch_find_continuous
FUNCTION_WRAPPER(textsearch_find_continuous, (struct ts_config *_arg1, struct ts_state *_arg2, const void *_arg3, unsigned int _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ts_config)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("textsearch_find_continuous is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = textsearch_find_continuous(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("textsearch_find_continuous returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ts_config)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR___seq_open_private
#define APP_WRAPPER_FOR___seq_open_private
#endif
 
#ifndef APP_WRAPPER_FOR___seq_open_private
#define APP_WRAPPER_FOR___seq_open_private
FUNCTION_WRAPPER(__seq_open_private, (struct file *_arg1, const struct seq_operations *_arg2, int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(const struct seq_operations)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("__seq_open_private is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    void *ret = __seq_open_private(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("__seq_open_private returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(const struct seq_operations)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_hardpps
#define APP_WRAPPER_FOR_hardpps
#endif
 
#ifndef APP_WRAPPER_FOR_hardpps
#define APP_WRAPPER_FOR_hardpps
FUNCTION_WRAPPER_VOID(hardpps, (const struct timespec *_arg1, const struct timespec *_arg2), {
    kern_printk("hardpps is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    hardpps(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("hardpps returned.\n");
})
#endif


#ifndef KERN_ADDR_seq_open_net
#define APP_WRAPPER_FOR_seq_open_net
#endif
 
#ifndef APP_WRAPPER_FOR_seq_open_net
#define APP_WRAPPER_FOR_seq_open_net
FUNCTION_WRAPPER(seq_open_net, (struct inode *_arg1, struct file *_arg2, const struct seq_operations *_arg3, int _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(const struct seq_operations)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("seq_open_net is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = seq_open_net(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("seq_open_net returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(const struct seq_operations)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_wait_register
#define APP_WRAPPER_FOR_ata_wait_register
#endif
 
#ifndef APP_WRAPPER_FOR_ata_wait_register
#define APP_WRAPPER_FOR_ata_wait_register
FUNCTION_WRAPPER(ata_wait_register, (struct ata_port *ap, void *reg, u32 mask, u32 val, unsigned long interval, unsigned long timeout), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_wait_register is invoked.\n");
    PRE_WRAPPER_FUNC(ap, reg, mask, val, interval, timeout);
    u32 ret = ata_wait_register(ap, reg, mask, val, interval, timeout);
    POST_WRAPPER_FUNC(ap, reg, mask, val, interval, timeout);
    kern_printk("ata_wait_register returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_statfs
#define APP_WRAPPER_FOR_compat_sys_statfs
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_statfs
#define APP_WRAPPER_FOR_compat_sys_statfs
FUNCTION_WRAPPER(compat_sys_statfs, (const char *pathname, struct compat_statfs *buf), {
    kern_printk("compat_sys_statfs is invoked.\n");
    PRE_WRAPPER_FUNC(pathname, buf);
    long ret = compat_sys_statfs(pathname, buf);
    POST_WRAPPER_FUNC(pathname, buf);
    kern_printk("compat_sys_statfs returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_fcntl_getlease
#define APP_WRAPPER_FOR_fcntl_getlease
#endif
 
#ifndef APP_WRAPPER_FOR_fcntl_getlease
#define APP_WRAPPER_FOR_fcntl_getlease
FUNCTION_WRAPPER(fcntl_getlease, (struct file *filp), {
    WRAP_RECURSIVE(filp);
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    kern_printk("fcntl_getlease is invoked.\n");
    PRE_WRAPPER_FUNC(filp);
    int ret = fcntl_getlease(filp);
    POST_WRAPPER_FUNC(filp);
    kern_printk("fcntl_getlease returned.\n");
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_simple_read_from_buffer
#define APP_WRAPPER_FOR_simple_read_from_buffer
#endif
 
#ifndef APP_WRAPPER_FOR_simple_read_from_buffer
#define APP_WRAPPER_FOR_simple_read_from_buffer
FUNCTION_WRAPPER(simple_read_from_buffer, (void *to, size_t count, loff_t *ppos, const void *from, size_t available), {
    kern_printk("simple_read_from_buffer is invoked.\n");
    PRE_WRAPPER_FUNC(to, count, ppos, from, available);
    ssize_t ret = simple_read_from_buffer(to, count, ppos, from, available);
    POST_WRAPPER_FUNC(to, count, ppos, from, available);
    kern_printk("simple_read_from_buffer returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_simple_unlink
#define APP_WRAPPER_FOR_simple_unlink
#endif
 
#ifndef APP_WRAPPER_FOR_simple_unlink
#define APP_WRAPPER_FOR_simple_unlink
FUNCTION_WRAPPER(simple_unlink, (struct inode *_arg1, struct dentry *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("simple_unlink is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = simple_unlink(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("simple_unlink returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_build_all_zonelists
#define APP_WRAPPER_FOR_build_all_zonelists
#endif
 
#ifndef APP_WRAPPER_FOR_build_all_zonelists
#define APP_WRAPPER_FOR_build_all_zonelists
FUNCTION_WRAPPER_VOID(build_all_zonelists, (pg_data_t *pgdat, struct zone *zone), {
    WRAP_RECURSIVE(pgdat);
    TRACES_IF_WATCHPOINT(pgdat);
    SCAN_HEAD_FUNC(pg_data_t)(*(TO_UNWATCHED_ADDRESS(pgdat)));
    WRAP_RECURSIVE(zone);
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    kern_printk("build_all_zonelists is invoked.\n");
    PRE_WRAPPER_FUNC(pgdat, zone);
    build_all_zonelists(pgdat, zone);
    POST_WRAPPER_FUNC(pgdat, zone);
    kern_printk("build_all_zonelists returned.\n");
    TRACES_IF_WATCHPOINT(pgdat);
    SCAN_HEAD_FUNC(pg_data_t)(*(TO_UNWATCHED_ADDRESS(pgdat)));
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
})
#endif


#ifndef KERN_ADDR_init_bsp_APIC
#define APP_WRAPPER_FOR_init_bsp_APIC
#endif
 
#ifndef APP_WRAPPER_FOR_init_bsp_APIC
#define APP_WRAPPER_FOR_init_bsp_APIC
FUNCTION_WRAPPER_VOID(init_bsp_APIC, (), {
    kern_printk("init_bsp_APIC is invoked.\n");
    PRE_WRAPPER_FUNC();
    init_bsp_APIC();
    POST_WRAPPER_FUNC();
    kern_printk("init_bsp_APIC returned.\n");
})
#endif


#ifndef KERN_ADDR_icmpv6_err_convert
#define APP_WRAPPER_FOR_icmpv6_err_convert
#endif
 
#ifndef APP_WRAPPER_FOR_icmpv6_err_convert
#define APP_WRAPPER_FOR_icmpv6_err_convert
FUNCTION_WRAPPER(icmpv6_err_convert, (u8 type, u8 code, int *err), {
    kern_printk("icmpv6_err_convert is invoked.\n");
    PRE_WRAPPER_FUNC(type, code, err);
    int ret = icmpv6_err_convert(type, code, err);
    POST_WRAPPER_FUNC(type, code, err);
    kern_printk("icmpv6_err_convert returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_kstrtoint
#define APP_WRAPPER_FOR_kstrtoint
#endif
 
#ifndef APP_WRAPPER_FOR_kstrtoint
#define APP_WRAPPER_FOR_kstrtoint
FUNCTION_WRAPPER(kstrtoint, (const char *s, unsigned int base, int *res), {
    kern_printk("kstrtoint is invoked.\n");
    PRE_WRAPPER_FUNC(s, base, res);
    int ret = kstrtoint(s, base, res);
    POST_WRAPPER_FUNC(s, base, res);
    kern_printk("kstrtoint returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_follow_trans_huge_pmd
#define APP_WRAPPER_FOR_follow_trans_huge_pmd
#endif
 
#ifndef APP_WRAPPER_FOR_follow_trans_huge_pmd
#define APP_WRAPPER_FOR_follow_trans_huge_pmd
FUNCTION_WRAPPER(follow_trans_huge_pmd, (struct vm_area_struct *vma, unsigned long addr, pmd_t *pmd, unsigned int flags), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("follow_trans_huge_pmd is invoked.\n");
    PRE_WRAPPER_FUNC(vma, addr, pmd, flags);
    struct page *ret = follow_trans_huge_pmd(vma, addr, pmd, flags);
    POST_WRAPPER_FUNC(vma, addr, pmd, flags);
    kern_printk("follow_trans_huge_pmd returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_csk_accept
#define APP_WRAPPER_FOR_inet_csk_accept
#endif
 
#ifndef APP_WRAPPER_FOR_inet_csk_accept
#define APP_WRAPPER_FOR_inet_csk_accept
FUNCTION_WRAPPER(inet_csk_accept, (struct sock *sk, int flags, int *err), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("inet_csk_accept is invoked.\n");
    PRE_WRAPPER_FUNC(sk, flags, err);
    struct sock *ret = inet_csk_accept(sk, flags, err);
    POST_WRAPPER_FUNC(sk, flags, err);
    kern_printk("inet_csk_accept returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_free_area_init_nodes
#define APP_WRAPPER_FOR_free_area_init_nodes
#endif
 
#ifndef APP_WRAPPER_FOR_free_area_init_nodes
#define APP_WRAPPER_FOR_free_area_init_nodes
FUNCTION_WRAPPER_VOID(free_area_init_nodes, (unsigned long *max_zone_pfn), {
    kern_printk("free_area_init_nodes is invoked.\n");
    PRE_WRAPPER_FUNC(max_zone_pfn);
    free_area_init_nodes(max_zone_pfn);
    POST_WRAPPER_FUNC(max_zone_pfn);
    kern_printk("free_area_init_nodes returned.\n");
})
#endif


#ifndef KERN_ADDR_rwsem_down_write_failed
#define APP_WRAPPER_FOR_rwsem_down_write_failed
#endif
 
#ifndef APP_WRAPPER_FOR_rwsem_down_write_failed
#define APP_WRAPPER_FOR_rwsem_down_write_failed
FUNCTION_WRAPPER(rwsem_down_write_failed, (struct rw_semaphore *sem), {
    kern_printk("rwsem_down_write_failed is invoked.\n");
    PRE_WRAPPER_FUNC(sem);
    struct rw_semaphore *ret = rwsem_down_write_failed(sem);
    POST_WRAPPER_FUNC(sem);
    kern_printk("rwsem_down_write_failed returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_key_put
#define APP_WRAPPER_FOR_key_put
#endif
 
#ifndef APP_WRAPPER_FOR_key_put
#define APP_WRAPPER_FOR_key_put
FUNCTION_WRAPPER_VOID(key_put, (struct key *key), {
    kern_printk("key_put is invoked.\n");
    PRE_WRAPPER_FUNC(key);
    key_put(key);
    POST_WRAPPER_FUNC(key);
    kern_printk("key_put returned.\n");
})
#endif


#ifndef KERN_ADDR_free_sched_domains
#define APP_WRAPPER_FOR_free_sched_domains
#endif
 
#ifndef APP_WRAPPER_FOR_free_sched_domains
#define APP_WRAPPER_FOR_free_sched_domains
FUNCTION_WRAPPER_VOID(free_sched_domains, (cpumask_var_t doms[], unsigned int ndoms), {
    kern_printk("free_sched_domains is invoked.\n");
    PRE_WRAPPER_FUNC(doms, ndoms);
    free_sched_domains(doms, ndoms);
    POST_WRAPPER_FUNC(doms, ndoms);
    kern_printk("free_sched_domains returned.\n");
})
#endif


#ifndef KERN_ADDR_compat_sys_getitimer
#define APP_WRAPPER_FOR_compat_sys_getitimer
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_getitimer
#define APP_WRAPPER_FOR_compat_sys_getitimer
FUNCTION_WRAPPER(compat_sys_getitimer, (int which, struct compat_itimerval *it), {
    kern_printk("compat_sys_getitimer is invoked.\n");
    PRE_WRAPPER_FUNC(which, it);
    long ret = compat_sys_getitimer(which, it);
    POST_WRAPPER_FUNC(which, it);
    kern_printk("compat_sys_getitimer returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_bus_add_resource
#define APP_WRAPPER_FOR_pci_bus_add_resource
#endif
 
#ifndef APP_WRAPPER_FOR_pci_bus_add_resource
#define APP_WRAPPER_FOR_pci_bus_add_resource
FUNCTION_WRAPPER_VOID(pci_bus_add_resource, (struct pci_bus *bus, struct resource *res, unsigned int flags), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_bus_add_resource is invoked.\n");
    PRE_WRAPPER_FUNC(bus, res, flags);
    pci_bus_add_resource(bus, res, flags);
    POST_WRAPPER_FUNC(bus, res, flags);
    kern_printk("pci_bus_add_resource returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
})
#endif


#ifndef KERN_ADDR_mnt_drop_write_file
#define APP_WRAPPER_FOR_mnt_drop_write_file
#endif
 
#ifndef APP_WRAPPER_FOR_mnt_drop_write_file
#define APP_WRAPPER_FOR_mnt_drop_write_file
FUNCTION_WRAPPER_VOID(mnt_drop_write_file, (struct file *file), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("mnt_drop_write_file is invoked.\n");
    PRE_WRAPPER_FUNC(file);
    mnt_drop_write_file(file);
    POST_WRAPPER_FUNC(file);
    kern_printk("mnt_drop_write_file returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
})
#endif


#ifndef KERN_ADDR_pgd_page_get_mm
#define APP_WRAPPER_FOR_pgd_page_get_mm
#endif
 
#ifndef APP_WRAPPER_FOR_pgd_page_get_mm
#define APP_WRAPPER_FOR_pgd_page_get_mm
FUNCTION_WRAPPER(pgd_page_get_mm, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("pgd_page_get_mm is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    struct mm_struct *ret = pgd_page_get_mm(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("pgd_page_get_mm returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sysfs_init
#define APP_WRAPPER_FOR_sysfs_init
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_init
#define APP_WRAPPER_FOR_sysfs_init
FUNCTION_WRAPPER(sysfs_init, (), {
    kern_printk("sysfs_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = sysfs_init();
    POST_WRAPPER_FUNC();
    kern_printk("sysfs_init returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_read_dev_sector
#define APP_WRAPPER_FOR_read_dev_sector
#endif
 
#ifndef APP_WRAPPER_FOR_read_dev_sector
#define APP_WRAPPER_FOR_read_dev_sector
FUNCTION_WRAPPER(read_dev_sector, (struct block_device *_arg1, sector_t _arg2, Sector *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(Sector)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("read_dev_sector is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    unsigned char *ret = read_dev_sector(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("read_dev_sector returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(Sector)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_is_module_address
#define APP_WRAPPER_FOR_is_module_address
#endif
 
#ifndef APP_WRAPPER_FOR_is_module_address
#define APP_WRAPPER_FOR_is_module_address
FUNCTION_WRAPPER(is_module_address, (unsigned long addr), {
    kern_printk("is_module_address is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    bool ret = is_module_address(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("is_module_address returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_run_queue_async
#define APP_WRAPPER_FOR_blk_run_queue_async
#endif
 
#ifndef APP_WRAPPER_FOR_blk_run_queue_async
#define APP_WRAPPER_FOR_blk_run_queue_async
FUNCTION_WRAPPER_VOID(blk_run_queue_async, (struct request_queue *q), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    kern_printk("blk_run_queue_async is invoked.\n");
    PRE_WRAPPER_FUNC(q);
    blk_run_queue_async(q);
    POST_WRAPPER_FUNC(q);
    kern_printk("blk_run_queue_async returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
})
#endif


#ifndef KERN_ADDR_rt_mutex_timed_lock
#define APP_WRAPPER_FOR_rt_mutex_timed_lock
#endif
 
#ifndef APP_WRAPPER_FOR_rt_mutex_timed_lock
#define APP_WRAPPER_FOR_rt_mutex_timed_lock
FUNCTION_WRAPPER(rt_mutex_timed_lock, (struct rt_mutex *lock, struct hrtimer_sleeper *timeout, int detect_deadlock), {
    WRAP_RECURSIVE(lock);
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct rt_mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
    WRAP_RECURSIVE(timeout);
    TRACES_IF_WATCHPOINT(timeout);
    SCAN_HEAD_FUNC(struct hrtimer_sleeper)(*(TO_UNWATCHED_ADDRESS(timeout)));
    kern_printk("rt_mutex_timed_lock is invoked.\n");
    PRE_WRAPPER_FUNC(lock, timeout, detect_deadlock);
    int ret = rt_mutex_timed_lock(lock, timeout, detect_deadlock);
    POST_WRAPPER_FUNC(lock, timeout, detect_deadlock);
    kern_printk("rt_mutex_timed_lock returned.\n");
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct rt_mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
    TRACES_IF_WATCHPOINT(timeout);
    SCAN_HEAD_FUNC(struct hrtimer_sleeper)(*(TO_UNWATCHED_ADDRESS(timeout)));
    return ret;
})
#endif


#ifndef KERN_ADDR_wrmsr_safe_on_cpu
#define APP_WRAPPER_FOR_wrmsr_safe_on_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_wrmsr_safe_on_cpu
#define APP_WRAPPER_FOR_wrmsr_safe_on_cpu
FUNCTION_WRAPPER(wrmsr_safe_on_cpu, (unsigned int cpu, u32 msr_no, u32 l, u32 h), {
    kern_printk("wrmsr_safe_on_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, msr_no, l, h);
    int ret = wrmsr_safe_on_cpu(cpu, msr_no, l, h);
    POST_WRAPPER_FUNC(cpu, msr_no, l, h);
    kern_printk("wrmsr_safe_on_cpu returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_unregister_timer_hook
#define APP_WRAPPER_FOR_unregister_timer_hook
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_timer_hook
#define APP_WRAPPER_FOR_unregister_timer_hook
FUNCTION_WRAPPER_VOID(unregister_timer_hook, (int (*hook)(struct pt_regs *)), {
    WRAP_FUNCTION(hook);
    kern_printk("unregister_timer_hook is invoked.\n");
    PRE_WRAPPER_FUNC(hook);
    unregister_timer_hook(hook);
    POST_WRAPPER_FUNC(hook);
    kern_printk("unregister_timer_hook returned.\n");
})
#endif


#ifndef KERN_ADDR___inquire_remote_apic
#define APP_WRAPPER_FOR___inquire_remote_apic
#endif
 
#ifndef APP_WRAPPER_FOR___inquire_remote_apic
#define APP_WRAPPER_FOR___inquire_remote_apic
FUNCTION_WRAPPER_VOID(__inquire_remote_apic, (int apicid), {
    kern_printk("__inquire_remote_apic is invoked.\n");
    PRE_WRAPPER_FUNC(apicid);
    __inquire_remote_apic(apicid);
    POST_WRAPPER_FUNC(apicid);
    kern_printk("__inquire_remote_apic returned.\n");
})
#endif


#ifndef KERN_ADDR_vmalloc
#define APP_WRAPPER_FOR_vmalloc
#endif
 
#ifndef APP_WRAPPER_FOR_vmalloc
#define APP_WRAPPER_FOR_vmalloc
FUNCTION_WRAPPER(vmalloc, (unsigned long size), {
    kern_printk("vmalloc is invoked.\n");
    PRE_WRAPPER_FUNC(size);
    void *ret = vmalloc(size);
    POST_WRAPPER_FUNC(size);
    kern_printk("vmalloc returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_smp_call_function_interrupt
#define APP_WRAPPER_FOR_generic_smp_call_function_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_generic_smp_call_function_interrupt
#define APP_WRAPPER_FOR_generic_smp_call_function_interrupt
FUNCTION_WRAPPER_VOID(generic_smp_call_function_interrupt, (), {
    kern_printk("generic_smp_call_function_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC();
    generic_smp_call_function_interrupt();
    POST_WRAPPER_FUNC();
    kern_printk("generic_smp_call_function_interrupt returned.\n");
})
#endif


#ifndef KERN_ADDR___first_cpu
#define APP_WRAPPER_FOR___first_cpu
#endif
 
#ifndef APP_WRAPPER_FOR___first_cpu
#define APP_WRAPPER_FOR___first_cpu
FUNCTION_WRAPPER(__first_cpu, (const cpumask_t *srcp), {
    kern_printk("__first_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(srcp);
    int ret = __first_cpu(srcp);
    POST_WRAPPER_FUNC(srcp);
    kern_printk("__first_cpu returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_devres_open_group
#define APP_WRAPPER_FOR_devres_open_group
#endif
 
#ifndef APP_WRAPPER_FOR_devres_open_group
#define APP_WRAPPER_FOR_devres_open_group
FUNCTION_WRAPPER(devres_open_group, (struct device *dev, void *id, gfp_t gfp), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("devres_open_group is invoked.\n");
    PRE_WRAPPER_FUNC(dev, id, gfp);
    void *ret = devres_open_group(dev, id, gfp);
    POST_WRAPPER_FUNC(dev, id, gfp);
    kern_printk("devres_open_group returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_nr_iowait_cpu
#define APP_WRAPPER_FOR_nr_iowait_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_nr_iowait_cpu
#define APP_WRAPPER_FOR_nr_iowait_cpu
FUNCTION_WRAPPER(nr_iowait_cpu, (int cpu), {
    kern_printk("nr_iowait_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    long ret = nr_iowait_cpu(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("nr_iowait_cpu returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_device_for_each_child
#define APP_WRAPPER_FOR_device_for_each_child
#endif
 
#ifndef APP_WRAPPER_FOR_device_for_each_child
#define APP_WRAPPER_FOR_device_for_each_child
FUNCTION_WRAPPER(device_for_each_child, (struct device *dev, void *data, int (*fn)(struct device *, void *)), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_FUNCTION(fn);
    kern_printk("device_for_each_child is invoked.\n");
    PRE_WRAPPER_FUNC(dev, data, fn);
    int ret = device_for_each_child(dev, data, fn);
    POST_WRAPPER_FUNC(dev, data, fn);
    kern_printk("device_for_each_child returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kstrtos16
#define APP_WRAPPER_FOR_kstrtos16
#endif
 
#ifndef APP_WRAPPER_FOR_kstrtos16
#define APP_WRAPPER_FOR_kstrtos16
FUNCTION_WRAPPER(kstrtos16, (const char *s, unsigned int base, s16 *res), {
    kern_printk("kstrtos16 is invoked.\n");
    PRE_WRAPPER_FUNC(s, base, res);
    int ret = kstrtos16(s, base, res);
    POST_WRAPPER_FUNC(s, base, res);
    kern_printk("kstrtos16 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_old_select
#define APP_WRAPPER_FOR_compat_sys_old_select
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_old_select
#define APP_WRAPPER_FOR_compat_sys_old_select
FUNCTION_WRAPPER(compat_sys_old_select, (struct compat_sel_arg_struct *arg), {
    kern_printk("compat_sys_old_select is invoked.\n");
    PRE_WRAPPER_FUNC(arg);
    long ret = compat_sys_old_select(arg);
    POST_WRAPPER_FUNC(arg);
    kern_printk("compat_sys_old_select returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_msi_shutdown
#define APP_WRAPPER_FOR_pci_msi_shutdown
#endif
 
#ifndef APP_WRAPPER_FOR_pci_msi_shutdown
#define APP_WRAPPER_FOR_pci_msi_shutdown
FUNCTION_WRAPPER_VOID(pci_msi_shutdown, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_msi_shutdown is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pci_msi_shutdown(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_msi_shutdown returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_icmpv6_send
#define APP_WRAPPER_FOR_icmpv6_send
#endif
 
#ifndef APP_WRAPPER_FOR_icmpv6_send
#define APP_WRAPPER_FOR_icmpv6_send
FUNCTION_WRAPPER_VOID(icmpv6_send, (struct sk_buff *skb, u8 type, u8 code, __u32 info), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("icmpv6_send is invoked.\n");
    PRE_WRAPPER_FUNC(skb, type, code, info);
    icmpv6_send(skb, type, code, info);
    POST_WRAPPER_FUNC(skb, type, code, info);
    kern_printk("icmpv6_send returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_e820_add_region
#define APP_WRAPPER_FOR_e820_add_region
#endif
 
#ifndef APP_WRAPPER_FOR_e820_add_region
#define APP_WRAPPER_FOR_e820_add_region
FUNCTION_WRAPPER_VOID(e820_add_region, (u64 start, u64 size, int type), {
    kern_printk("e820_add_region is invoked.\n");
    PRE_WRAPPER_FUNC(start, size, type);
    e820_add_region(start, size, type);
    POST_WRAPPER_FUNC(start, size, type);
    kern_printk("e820_add_region returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_legacy_init
#define APP_WRAPPER_FOR_pci_legacy_init
#endif
 
#ifndef APP_WRAPPER_FOR_pci_legacy_init
#define APP_WRAPPER_FOR_pci_legacy_init
FUNCTION_WRAPPER(pci_legacy_init, (), {
    kern_printk("pci_legacy_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = pci_legacy_init();
    POST_WRAPPER_FUNC();
    kern_printk("pci_legacy_init returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ec_transaction
#define APP_WRAPPER_FOR_ec_transaction
#endif
 
#ifndef APP_WRAPPER_FOR_ec_transaction
#define APP_WRAPPER_FOR_ec_transaction
FUNCTION_WRAPPER(ec_transaction, (u8 command, const u8 *wdata, unsigned int wdata_len, u8 *rdata, unsigned int rdata_len), {
    kern_printk("ec_transaction is invoked.\n");
    PRE_WRAPPER_FUNC(command, wdata, wdata_len, rdata, rdata_len);
    int ret = ec_transaction(command, wdata, wdata_len, rdata, rdata_len);
    POST_WRAPPER_FUNC(command, wdata, wdata_len, rdata, rdata_len);
    kern_printk("ec_transaction returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_unregister_pernet_subsys
#define APP_WRAPPER_FOR_unregister_pernet_subsys
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_pernet_subsys
#define APP_WRAPPER_FOR_unregister_pernet_subsys
FUNCTION_WRAPPER_VOID(unregister_pernet_subsys, (struct pernet_operations *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pernet_operations)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("unregister_pernet_subsys is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    unregister_pernet_subsys(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("unregister_pernet_subsys returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pernet_operations)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR___symbol_get_gpl
#define APP_WRAPPER_FOR___symbol_get_gpl
#endif
 
#ifndef APP_WRAPPER_FOR___symbol_get_gpl
#define APP_WRAPPER_FOR___symbol_get_gpl
FUNCTION_WRAPPER(__symbol_get_gpl, (const char *symbol), {
    kern_printk("__symbol_get_gpl is invoked.\n");
    PRE_WRAPPER_FUNC(symbol);
    void *ret = __symbol_get_gpl(symbol);
    POST_WRAPPER_FUNC(symbol);
    kern_printk("__symbol_get_gpl returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___dec_zone_page_state
#define APP_WRAPPER_FOR___dec_zone_page_state
#endif
 
#ifndef APP_WRAPPER_FOR___dec_zone_page_state
#define APP_WRAPPER_FOR___dec_zone_page_state
FUNCTION_WRAPPER_VOID(__dec_zone_page_state, (struct page *_arg1, enum zone_stat_item _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__dec_zone_page_state is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    __dec_zone_page_state(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("__dec_zone_page_state returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_round_jiffies
#define APP_WRAPPER_FOR_round_jiffies
#endif
 
#ifndef APP_WRAPPER_FOR_round_jiffies
#define APP_WRAPPER_FOR_round_jiffies
FUNCTION_WRAPPER(round_jiffies, (unsigned long j), {
    kern_printk("round_jiffies is invoked.\n");
    PRE_WRAPPER_FUNC(j);
    long ret = round_jiffies(j);
    POST_WRAPPER_FUNC(j);
    kern_printk("round_jiffies returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_insert_resource_expand_to_fit
#define APP_WRAPPER_FOR_insert_resource_expand_to_fit
#endif
 
#ifndef APP_WRAPPER_FOR_insert_resource_expand_to_fit
#define APP_WRAPPER_FOR_insert_resource_expand_to_fit
FUNCTION_WRAPPER_VOID(insert_resource_expand_to_fit, (struct resource *root, struct resource *new_), {
    kern_printk("insert_resource_expand_to_fit is invoked.\n");
    PRE_WRAPPER_FUNC(root, new_);
    insert_resource_expand_to_fit(root, new_);
    POST_WRAPPER_FUNC(root, new_);
    kern_printk("insert_resource_expand_to_fit returned.\n");
})
#endif


#ifndef KERN_ADDR_clockevents_resume
#define APP_WRAPPER_FOR_clockevents_resume
#endif
 
#ifndef APP_WRAPPER_FOR_clockevents_resume
#define APP_WRAPPER_FOR_clockevents_resume
FUNCTION_WRAPPER_VOID(clockevents_resume, (), {
    kern_printk("clockevents_resume is invoked.\n");
    PRE_WRAPPER_FUNC();
    clockevents_resume();
    POST_WRAPPER_FUNC();
    kern_printk("clockevents_resume returned.\n");
})
#endif


#ifndef KERN_ADDR_input_close_device
#define APP_WRAPPER_FOR_input_close_device
#endif
 
#ifndef APP_WRAPPER_FOR_input_close_device
#define APP_WRAPPER_FOR_input_close_device
FUNCTION_WRAPPER_VOID(input_close_device, (struct input_handle *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct input_handle)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("input_close_device is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    input_close_device(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("input_close_device returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct input_handle)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_acpi_evaluate_hotplug_ost
#define APP_WRAPPER_FOR_acpi_evaluate_hotplug_ost
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_evaluate_hotplug_ost
#define APP_WRAPPER_FOR_acpi_evaluate_hotplug_ost
FUNCTION_WRAPPER(acpi_evaluate_hotplug_ost, (acpi_handle handle, u32 source_event, u32 status_code, struct acpi_buffer *status_buf), {
    kern_printk("acpi_evaluate_hotplug_ost is invoked.\n");
    PRE_WRAPPER_FUNC(handle, source_event, status_code, status_buf);
    acpi_status ret = acpi_evaluate_hotplug_ost(handle, source_event, status_code, status_buf);
    POST_WRAPPER_FUNC(handle, source_event, status_code, status_buf);
    kern_printk("acpi_evaluate_hotplug_ost returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_phy_register_fixup_for_uid
#define APP_WRAPPER_FOR_phy_register_fixup_for_uid
#endif
 
#ifndef APP_WRAPPER_FOR_phy_register_fixup_for_uid
#define APP_WRAPPER_FOR_phy_register_fixup_for_uid
FUNCTION_WRAPPER(phy_register_fixup_for_uid, (u32 phy_uid, u32 phy_uid_mask, int (*run)(struct phy_device *)), {
    WRAP_FUNCTION(run);
    kern_printk("phy_register_fixup_for_uid is invoked.\n");
    PRE_WRAPPER_FUNC(phy_uid, phy_uid_mask, run);
    int ret = phy_register_fixup_for_uid(phy_uid, phy_uid_mask, run);
    POST_WRAPPER_FUNC(phy_uid, phy_uid_mask, run);
    kern_printk("phy_register_fixup_for_uid returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_old_suspend_ordering
#define APP_WRAPPER_FOR_acpi_old_suspend_ordering
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_old_suspend_ordering
#define APP_WRAPPER_FOR_acpi_old_suspend_ordering
FUNCTION_WRAPPER_VOID(acpi_old_suspend_ordering, (), {
    kern_printk("acpi_old_suspend_ordering is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_old_suspend_ordering();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_old_suspend_ordering returned.\n");
})
#endif


#ifndef KERN_ADDR_trap_init
#define APP_WRAPPER_FOR_trap_init
#endif
 
#ifndef APP_WRAPPER_FOR_trap_init
#define APP_WRAPPER_FOR_trap_init
FUNCTION_WRAPPER_VOID(trap_init, (), {
    kern_printk("trap_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    trap_init();
    POST_WRAPPER_FUNC();
    kern_printk("trap_init returned.\n");
})
#endif


#ifndef KERN_ADDR_ata_acpi_gtm
#define APP_WRAPPER_FOR_ata_acpi_gtm
#endif
 
#ifndef APP_WRAPPER_FOR_ata_acpi_gtm
#define APP_WRAPPER_FOR_ata_acpi_gtm
FUNCTION_WRAPPER(ata_acpi_gtm, (struct ata_port *ap, struct ata_acpi_gtm *stm), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_acpi_gtm is invoked.\n");
    PRE_WRAPPER_FUNC(ap, stm);
    int ret = ata_acpi_gtm(ap, stm);
    POST_WRAPPER_FUNC(ap, stm);
    kern_printk("ata_acpi_gtm returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR_param_get_long
#define APP_WRAPPER_FOR_param_get_long
#endif
 
#ifndef APP_WRAPPER_FOR_param_get_long
#define APP_WRAPPER_FOR_param_get_long
FUNCTION_WRAPPER(param_get_long, (char *buffer, const struct kernel_param *kp), {
    WRAP_RECURSIVE(kp);
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    kern_printk("param_get_long is invoked.\n");
    PRE_WRAPPER_FUNC(buffer, kp);
    int ret = param_get_long(buffer, kp);
    POST_WRAPPER_FUNC(buffer, kp);
    kern_printk("param_get_long returned.\n");
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_strim
#define APP_WRAPPER_FOR_strim
#endif
 
#ifndef APP_WRAPPER_FOR_strim
#define APP_WRAPPER_FOR_strim
FUNCTION_WRAPPER(strim, (char *_arg1), {
    kern_printk("strim is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    char *ret = strim(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("strim returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_init_memory_mapping
#define APP_WRAPPER_FOR_init_memory_mapping
#endif
 
#ifndef APP_WRAPPER_FOR_init_memory_mapping
#define APP_WRAPPER_FOR_init_memory_mapping
FUNCTION_WRAPPER(init_memory_mapping, (unsigned long start, unsigned long end), {
    kern_printk("init_memory_mapping is invoked.\n");
    PRE_WRAPPER_FUNC(start, end);
    long ret = init_memory_mapping(start, end);
    POST_WRAPPER_FUNC(start, end);
    kern_printk("init_memory_mapping returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dput
#define APP_WRAPPER_FOR_dput
#endif
 
#ifndef APP_WRAPPER_FOR_dput
#define APP_WRAPPER_FOR_dput
FUNCTION_WRAPPER_VOID(dput, (struct dentry *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("dput is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    dput(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("dput returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_dquot_commit_info
#define APP_WRAPPER_FOR_dquot_commit_info
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_commit_info
#define APP_WRAPPER_FOR_dquot_commit_info
FUNCTION_WRAPPER(dquot_commit_info, (struct super_block *sb, int type), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("dquot_commit_info is invoked.\n");
    PRE_WRAPPER_FUNC(sb, type);
    int ret = dquot_commit_info(sb, type);
    POST_WRAPPER_FUNC(sb, type);
    kern_printk("dquot_commit_info returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_atomic_notifier_chain_unregister
#define APP_WRAPPER_FOR_atomic_notifier_chain_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_atomic_notifier_chain_unregister
#define APP_WRAPPER_FOR_atomic_notifier_chain_unregister
FUNCTION_WRAPPER(atomic_notifier_chain_unregister, (struct atomic_notifier_head *nh, struct notifier_block *nb), {
    WRAP_RECURSIVE(nh);
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct atomic_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    WRAP_RECURSIVE(nb);
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    kern_printk("atomic_notifier_chain_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(nh, nb);
    int ret = atomic_notifier_chain_unregister(nh, nb);
    POST_WRAPPER_FUNC(nh, nb);
    kern_printk("atomic_notifier_chain_unregister returned.\n");
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct atomic_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_csk_compat_setsockopt
#define APP_WRAPPER_FOR_inet_csk_compat_setsockopt
#endif
 
#ifndef APP_WRAPPER_FOR_inet_csk_compat_setsockopt
#define APP_WRAPPER_FOR_inet_csk_compat_setsockopt
FUNCTION_WRAPPER(inet_csk_compat_setsockopt, (struct sock *sk, int level, int optname, char *optval, unsigned int optlen), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("inet_csk_compat_setsockopt is invoked.\n");
    PRE_WRAPPER_FUNC(sk, level, optname, optval, optlen);
    int ret = inet_csk_compat_setsockopt(sk, level, optname, optval, optlen);
    POST_WRAPPER_FUNC(sk, level, optname, optval, optlen);
    kern_printk("inet_csk_compat_setsockopt returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kernel_getpeername
#define APP_WRAPPER_FOR_kernel_getpeername
#endif
 
#ifndef APP_WRAPPER_FOR_kernel_getpeername
#define APP_WRAPPER_FOR_kernel_getpeername
FUNCTION_WRAPPER(kernel_getpeername, (struct socket *sock, struct sockaddr *addr, int *addrlen), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    kern_printk("kernel_getpeername is invoked.\n");
    PRE_WRAPPER_FUNC(sock, addr, addrlen);
    int ret = kernel_getpeername(sock, addr, addrlen);
    POST_WRAPPER_FUNC(sock, addr, addrlen);
    kern_printk("kernel_getpeername returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    return ret;
})
#endif


#ifndef KERN_ADDR___fprop_inc_percpu
#define APP_WRAPPER_FOR___fprop_inc_percpu
#endif
 
#ifndef APP_WRAPPER_FOR___fprop_inc_percpu
#define APP_WRAPPER_FOR___fprop_inc_percpu
FUNCTION_WRAPPER_VOID(__fprop_inc_percpu, (struct fprop_global *p, struct fprop_local_percpu *pl), {
    kern_printk("__fprop_inc_percpu is invoked.\n");
    PRE_WRAPPER_FUNC(p, pl);
    __fprop_inc_percpu(p, pl);
    POST_WRAPPER_FUNC(p, pl);
    kern_printk("__fprop_inc_percpu returned.\n");
})
#endif


#ifndef KERN_ADDR_param_get_byte
#define APP_WRAPPER_FOR_param_get_byte
#endif
 
#ifndef APP_WRAPPER_FOR_param_get_byte
#define APP_WRAPPER_FOR_param_get_byte
FUNCTION_WRAPPER(param_get_byte, (char *buffer, const struct kernel_param *kp), {
    WRAP_RECURSIVE(kp);
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    kern_printk("param_get_byte is invoked.\n");
    PRE_WRAPPER_FUNC(buffer, kp);
    int ret = param_get_byte(buffer, kp);
    POST_WRAPPER_FUNC(buffer, kp);
    kern_printk("param_get_byte returned.\n");
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_end_request
#define APP_WRAPPER_FOR_blk_end_request
#endif
 
#ifndef APP_WRAPPER_FOR_blk_end_request
#define APP_WRAPPER_FOR_blk_end_request
FUNCTION_WRAPPER(blk_end_request, (struct request *rq, int error, unsigned int nr_bytes), {
    WRAP_RECURSIVE(rq);
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    kern_printk("blk_end_request is invoked.\n");
    PRE_WRAPPER_FUNC(rq, error, nr_bytes);
    bool ret = blk_end_request(rq, error, nr_bytes);
    POST_WRAPPER_FUNC(rq, error, nr_bytes);
    kern_printk("blk_end_request returned.\n");
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    return ret;
})
#endif


#ifndef KERN_ADDR_radix_tree_tagged
#define APP_WRAPPER_FOR_radix_tree_tagged
#endif
 
#ifndef APP_WRAPPER_FOR_radix_tree_tagged
#define APP_WRAPPER_FOR_radix_tree_tagged
FUNCTION_WRAPPER(radix_tree_tagged, (struct radix_tree_root *root, unsigned int tag), {
    kern_printk("radix_tree_tagged is invoked.\n");
    PRE_WRAPPER_FUNC(root, tag);
    int ret = radix_tree_tagged(root, tag);
    POST_WRAPPER_FUNC(root, tag);
    kern_printk("radix_tree_tagged returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___invalidate_device
#define APP_WRAPPER_FOR___invalidate_device
#endif
 
#ifndef APP_WRAPPER_FOR___invalidate_device
#define APP_WRAPPER_FOR___invalidate_device
FUNCTION_WRAPPER(__invalidate_device, (struct block_device *_arg1, bool _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__invalidate_device is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = __invalidate_device(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("__invalidate_device returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_subsys_prepare
#define APP_WRAPPER_FOR_acpi_subsys_prepare
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_subsys_prepare
#define APP_WRAPPER_FOR_acpi_subsys_prepare
FUNCTION_WRAPPER(acpi_subsys_prepare, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("acpi_subsys_prepare is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = acpi_subsys_prepare(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("acpi_subsys_prepare returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cap_task_setioprio
#define APP_WRAPPER_FOR_cap_task_setioprio
#endif
 
#ifndef APP_WRAPPER_FOR_cap_task_setioprio
#define APP_WRAPPER_FOR_cap_task_setioprio
FUNCTION_WRAPPER(cap_task_setioprio, (struct task_struct *p, int ioprio), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("cap_task_setioprio is invoked.\n");
    PRE_WRAPPER_FUNC(p, ioprio);
    int ret = cap_task_setioprio(p, ioprio);
    POST_WRAPPER_FUNC(p, ioprio);
    kern_printk("cap_task_setioprio returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    return ret;
})
#endif


#ifndef KERN_ADDR_prctl_set_seccomp
#define APP_WRAPPER_FOR_prctl_set_seccomp
#endif
 
#ifndef APP_WRAPPER_FOR_prctl_set_seccomp
#define APP_WRAPPER_FOR_prctl_set_seccomp
FUNCTION_WRAPPER(prctl_set_seccomp, (unsigned long _arg1, char *_arg2), {
    kern_printk("prctl_set_seccomp is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    long ret = prctl_set_seccomp(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("prctl_set_seccomp returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_touch_softlockup_watchdog_sync
#define APP_WRAPPER_FOR_touch_softlockup_watchdog_sync
#endif
 
#ifndef APP_WRAPPER_FOR_touch_softlockup_watchdog_sync
#define APP_WRAPPER_FOR_touch_softlockup_watchdog_sync
FUNCTION_WRAPPER_VOID(touch_softlockup_watchdog_sync, (), {
    kern_printk("touch_softlockup_watchdog_sync is invoked.\n");
    PRE_WRAPPER_FUNC();
    touch_softlockup_watchdog_sync();
    POST_WRAPPER_FUNC();
    kern_printk("touch_softlockup_watchdog_sync returned.\n");
})
#endif


#ifndef KERN_ADDR___destroy_inode
#define APP_WRAPPER_FOR___destroy_inode
#endif
 
#ifndef APP_WRAPPER_FOR___destroy_inode
#define APP_WRAPPER_FOR___destroy_inode
FUNCTION_WRAPPER_VOID(__destroy_inode, (struct inode *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__destroy_inode is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    __destroy_inode(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__destroy_inode returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_blk_lld_busy
#define APP_WRAPPER_FOR_blk_lld_busy
#endif
 
#ifndef APP_WRAPPER_FOR_blk_lld_busy
#define APP_WRAPPER_FOR_blk_lld_busy
FUNCTION_WRAPPER(blk_lld_busy, (struct request_queue *q), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    kern_printk("blk_lld_busy is invoked.\n");
    PRE_WRAPPER_FUNC(q);
    int ret = blk_lld_busy(q);
    POST_WRAPPER_FUNC(q);
    kern_printk("blk_lld_busy returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    return ret;
})
#endif


#ifndef KERN_ADDR_execute_in_process_context
#define APP_WRAPPER_FOR_execute_in_process_context
#endif
 
#ifndef APP_WRAPPER_FOR_execute_in_process_context
#define APP_WRAPPER_FOR_execute_in_process_context
FUNCTION_WRAPPER(execute_in_process_context, (work_func_t fn, struct execute_work *_arg1), {
    WRAP_FUNCTION(fn);
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct execute_work)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("execute_in_process_context is invoked.\n");
    PRE_WRAPPER_FUNC(fn, _arg1);
    int ret = execute_in_process_context(fn, _arg1);
    POST_WRAPPER_FUNC(fn, _arg1);
    kern_printk("execute_in_process_context returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct execute_work)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR___tasklet_hi_schedule_first
#define APP_WRAPPER_FOR___tasklet_hi_schedule_first
#endif
 
#ifndef APP_WRAPPER_FOR___tasklet_hi_schedule_first
#define APP_WRAPPER_FOR___tasklet_hi_schedule_first
FUNCTION_WRAPPER_VOID(__tasklet_hi_schedule_first, (struct tasklet_struct *t), {
    WRAP_RECURSIVE(t);
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct tasklet_struct)(*(TO_UNWATCHED_ADDRESS(t)));
    kern_printk("__tasklet_hi_schedule_first is invoked.\n");
    PRE_WRAPPER_FUNC(t);
    __tasklet_hi_schedule_first(t);
    POST_WRAPPER_FUNC(t);
    kern_printk("__tasklet_hi_schedule_first returned.\n");
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct tasklet_struct)(*(TO_UNWATCHED_ADDRESS(t)));
})
#endif


#ifndef KERN_ADDR_devres_alloc
#define APP_WRAPPER_FOR_devres_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_devres_alloc
#define APP_WRAPPER_FOR_devres_alloc
FUNCTION_WRAPPER(devres_alloc, (dr_release_t release, size_t size, gfp_t gfp), {
    WRAP_FUNCTION(release);
    kern_printk("devres_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(release, size, gfp);
    void *ret = devres_alloc(release, size, gfp);
    POST_WRAPPER_FUNC(release, size, gfp);
    kern_printk("devres_alloc returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_crypto_alloc_ahash
#define APP_WRAPPER_FOR_crypto_alloc_ahash
#endif
 
#ifndef APP_WRAPPER_FOR_crypto_alloc_ahash
#define APP_WRAPPER_FOR_crypto_alloc_ahash
FUNCTION_WRAPPER(crypto_alloc_ahash, (const char *alg_name, u32 type, u32 mask), {
    kern_printk("crypto_alloc_ahash is invoked.\n");
    PRE_WRAPPER_FUNC(alg_name, type, mask);
    struct crypto_ahash *ret = crypto_alloc_ahash(alg_name, type, mask);
    POST_WRAPPER_FUNC(alg_name, type, mask);
    kern_printk("crypto_alloc_ahash returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dpm_resume_end
#define APP_WRAPPER_FOR_dpm_resume_end
#endif
 
#ifndef APP_WRAPPER_FOR_dpm_resume_end
#define APP_WRAPPER_FOR_dpm_resume_end
FUNCTION_WRAPPER_VOID(dpm_resume_end, (pm_message_t state), {
    kern_printk("dpm_resume_end is invoked.\n");
    PRE_WRAPPER_FUNC(state);
    dpm_resume_end(state);
    POST_WRAPPER_FUNC(state);
    kern_printk("dpm_resume_end returned.\n");
})
#endif


#ifndef KERN_ADDR_check_move_unevictable_pages
#define APP_WRAPPER_FOR_check_move_unevictable_pages
#endif
 
#ifndef APP_WRAPPER_FOR_check_move_unevictable_pages
#define APP_WRAPPER_FOR_check_move_unevictable_pages
FUNCTION_WRAPPER_VOID(check_move_unevictable_pages, (struct page **_arg1, int nr_pages), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("check_move_unevictable_pages is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, nr_pages);
    check_move_unevictable_pages(_arg1, nr_pages);
    POST_WRAPPER_FUNC(_arg1, nr_pages);
    kern_printk("check_move_unevictable_pages returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_compat_sys_clock_gettime
#define APP_WRAPPER_FOR_compat_sys_clock_gettime
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_clock_gettime
#define APP_WRAPPER_FOR_compat_sys_clock_gettime
FUNCTION_WRAPPER(compat_sys_clock_gettime, (clockid_t which_clock, struct compat_timespec *tp), {
    kern_printk("compat_sys_clock_gettime is invoked.\n");
    PRE_WRAPPER_FUNC(which_clock, tp);
    long ret = compat_sys_clock_gettime(which_clock, tp);
    POST_WRAPPER_FUNC(which_clock, tp);
    kern_printk("compat_sys_clock_gettime returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_cgroup_lock
#define APP_WRAPPER_FOR_cgroup_lock
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_lock
#define APP_WRAPPER_FOR_cgroup_lock
FUNCTION_WRAPPER_VOID(cgroup_lock, (), {
    kern_printk("cgroup_lock is invoked.\n");
    PRE_WRAPPER_FUNC();
    cgroup_lock();
    POST_WRAPPER_FUNC();
    kern_printk("cgroup_lock returned.\n");
})
#endif


#ifndef KERN_ADDR_scsi_get_host_dev
#define APP_WRAPPER_FOR_scsi_get_host_dev
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_get_host_dev
#define APP_WRAPPER_FOR_scsi_get_host_dev
FUNCTION_WRAPPER(scsi_get_host_dev, (struct Scsi_Host *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("scsi_get_host_dev is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct scsi_device *ret = scsi_get_host_dev(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("scsi_get_host_dev returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_bdi_writeout_inc
#define APP_WRAPPER_FOR_bdi_writeout_inc
#endif
 
#ifndef APP_WRAPPER_FOR_bdi_writeout_inc
#define APP_WRAPPER_FOR_bdi_writeout_inc
FUNCTION_WRAPPER_VOID(bdi_writeout_inc, (struct backing_dev_info *bdi), {
    WRAP_RECURSIVE(bdi);
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
    kern_printk("bdi_writeout_inc is invoked.\n");
    PRE_WRAPPER_FUNC(bdi);
    bdi_writeout_inc(bdi);
    POST_WRAPPER_FUNC(bdi);
    kern_printk("bdi_writeout_inc returned.\n");
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
})
#endif


#ifndef KERN_ADDR___blocking_notifier_call_chain
#define APP_WRAPPER_FOR___blocking_notifier_call_chain
#endif
 
#ifndef APP_WRAPPER_FOR___blocking_notifier_call_chain
#define APP_WRAPPER_FOR___blocking_notifier_call_chain
FUNCTION_WRAPPER(__blocking_notifier_call_chain, (struct blocking_notifier_head *nh, unsigned long val, void *v, int nr_to_call, int *nr_calls), {
    WRAP_RECURSIVE(nh);
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct blocking_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    kern_printk("__blocking_notifier_call_chain is invoked.\n");
    PRE_WRAPPER_FUNC(nh, val, v, nr_to_call, nr_calls);
    int ret = __blocking_notifier_call_chain(nh, val, v, nr_to_call, nr_calls);
    POST_WRAPPER_FUNC(nh, val, v, nr_to_call, nr_calls);
    kern_printk("__blocking_notifier_call_chain returned.\n");
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct blocking_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    return ret;
})
#endif


#ifndef KERN_ADDR_deactivate_page
#define APP_WRAPPER_FOR_deactivate_page
#endif
 
#ifndef APP_WRAPPER_FOR_deactivate_page
#define APP_WRAPPER_FOR_deactivate_page
FUNCTION_WRAPPER_VOID(deactivate_page, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("deactivate_page is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    deactivate_page(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("deactivate_page returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_tick_get_device
#define APP_WRAPPER_FOR_tick_get_device
#endif
 
#ifndef APP_WRAPPER_FOR_tick_get_device
#define APP_WRAPPER_FOR_tick_get_device
FUNCTION_WRAPPER(tick_get_device, (int cpu), {
    kern_printk("tick_get_device is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    struct tick_device *ret = tick_get_device(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("tick_get_device returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_pm_qos_flags
#define APP_WRAPPER_FOR_dev_pm_qos_flags
#endif
 
#ifndef APP_WRAPPER_FOR_dev_pm_qos_flags
#define APP_WRAPPER_FOR_dev_pm_qos_flags
FUNCTION_WRAPPER(dev_pm_qos_flags, (struct device *dev, s32 mask), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_pm_qos_flags is invoked.\n");
    PRE_WRAPPER_FUNC(dev, mask);
    enum pm_qos_flags_status ret = dev_pm_qos_flags(dev, mask);
    POST_WRAPPER_FUNC(dev, mask);
    kern_printk("dev_pm_qos_flags returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_finish_no_open
#define APP_WRAPPER_FOR_finish_no_open
#endif
 
#ifndef APP_WRAPPER_FOR_finish_no_open
#define APP_WRAPPER_FOR_finish_no_open
FUNCTION_WRAPPER(finish_no_open, (struct file *file, struct dentry *dentry), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    WRAP_RECURSIVE(dentry);
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    kern_printk("finish_no_open is invoked.\n");
    PRE_WRAPPER_FUNC(file, dentry);
    int ret = finish_no_open(file, dentry);
    POST_WRAPPER_FUNC(file, dentry);
    kern_printk("finish_no_open returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sb_min_blocksize
#define APP_WRAPPER_FOR_sb_min_blocksize
#endif
 
#ifndef APP_WRAPPER_FOR_sb_min_blocksize
#define APP_WRAPPER_FOR_sb_min_blocksize
FUNCTION_WRAPPER(sb_min_blocksize, (struct super_block *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("sb_min_blocksize is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = sb_min_blocksize(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("sb_min_blocksize returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_unregister_one_node
#define APP_WRAPPER_FOR_unregister_one_node
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_one_node
#define APP_WRAPPER_FOR_unregister_one_node
FUNCTION_WRAPPER_VOID(unregister_one_node, (int nid), {
    kern_printk("unregister_one_node is invoked.\n");
    PRE_WRAPPER_FUNC(nid);
    unregister_one_node(nid);
    POST_WRAPPER_FUNC(nid);
    kern_printk("unregister_one_node returned.\n");
})
#endif


#ifndef KERN_ADDR_kasprintf
#define APP_WRAPPER_FOR_kasprintf
#endif
 
#ifndef APP_WRAPPER_FOR_kasprintf
#define APP_WRAPPER_FOR_kasprintf
FUNCTION_WRAPPER(kasprintf, (gfp_t gfp, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    // TODO: variadic arguments
    kern_printk("kasprintf is invoked.\n");
    PRE_WRAPPER_FUNC(gfp, fmt);
    char *ret = kasprintf(gfp, fmt);
    POST_WRAPPER_FUNC(gfp, fmt);
    kern_printk("kasprintf returned.\n");
    va_end(args__);
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_port_abort
#define APP_WRAPPER_FOR_ata_port_abort
#endif
 
#ifndef APP_WRAPPER_FOR_ata_port_abort
#define APP_WRAPPER_FOR_ata_port_abort
FUNCTION_WRAPPER(ata_port_abort, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_port_abort is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    int ret = ata_port_abort(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_port_abort returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pm_qos_remove_notifier
#define APP_WRAPPER_FOR_pm_qos_remove_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_pm_qos_remove_notifier
#define APP_WRAPPER_FOR_pm_qos_remove_notifier
FUNCTION_WRAPPER(pm_qos_remove_notifier, (int pm_qos_class, struct notifier_block *notifier), {
    WRAP_RECURSIVE(notifier);
    TRACES_IF_WATCHPOINT(notifier);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(notifier)));
    kern_printk("pm_qos_remove_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(pm_qos_class, notifier);
    int ret = pm_qos_remove_notifier(pm_qos_class, notifier);
    POST_WRAPPER_FUNC(pm_qos_class, notifier);
    kern_printk("pm_qos_remove_notifier returned.\n");
    TRACES_IF_WATCHPOINT(notifier);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(notifier)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_scsi_slave_destroy
#define APP_WRAPPER_FOR_ata_scsi_slave_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_ata_scsi_slave_destroy
#define APP_WRAPPER_FOR_ata_scsi_slave_destroy
FUNCTION_WRAPPER_VOID(ata_scsi_slave_destroy, (struct scsi_device *sdev), {
    kern_printk("ata_scsi_slave_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(sdev);
    ata_scsi_slave_destroy(sdev);
    POST_WRAPPER_FUNC(sdev);
    kern_printk("ata_scsi_slave_destroy returned.\n");
})
#endif


#ifndef KERN_ADDR_activate_page
#define APP_WRAPPER_FOR_activate_page
#endif
 
#ifndef APP_WRAPPER_FOR_activate_page
#define APP_WRAPPER_FOR_activate_page
FUNCTION_WRAPPER_VOID(activate_page, (struct page *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("activate_page is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    activate_page(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("activate_page returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR___cleancache_invalidate_inode
#define APP_WRAPPER_FOR___cleancache_invalidate_inode
#endif
 
#ifndef APP_WRAPPER_FOR___cleancache_invalidate_inode
#define APP_WRAPPER_FOR___cleancache_invalidate_inode
FUNCTION_WRAPPER_VOID(__cleancache_invalidate_inode, (struct address_space *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__cleancache_invalidate_inode is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    __cleancache_invalidate_inode(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__cleancache_invalidate_inode returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_block_all_signals
#define APP_WRAPPER_FOR_block_all_signals
#endif
 
#ifndef APP_WRAPPER_FOR_block_all_signals
#define APP_WRAPPER_FOR_block_all_signals
FUNCTION_WRAPPER_VOID(block_all_signals, (int (*notifier)(void *), void *priv, sigset_t *mask), {
    WRAP_FUNCTION(notifier);
    kern_printk("block_all_signals is invoked.\n");
    PRE_WRAPPER_FUNC(notifier, priv, mask);
    block_all_signals(notifier, priv, mask);
    POST_WRAPPER_FUNC(notifier, priv, mask);
    kern_printk("block_all_signals returned.\n");
})
#endif


#ifndef KERN_ADDR_alternatives_text_reserved
#define APP_WRAPPER_FOR_alternatives_text_reserved
#endif
 
#ifndef APP_WRAPPER_FOR_alternatives_text_reserved
#define APP_WRAPPER_FOR_alternatives_text_reserved
FUNCTION_WRAPPER(alternatives_text_reserved, (void *start, void *end), {
    kern_printk("alternatives_text_reserved is invoked.\n");
    PRE_WRAPPER_FUNC(start, end);
    int ret = alternatives_text_reserved(start, end);
    POST_WRAPPER_FUNC(start, end);
    kern_printk("alternatives_text_reserved returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_bio_clone_bioset
#define APP_WRAPPER_FOR_bio_clone_bioset
#endif
 
#ifndef APP_WRAPPER_FOR_bio_clone_bioset
#define APP_WRAPPER_FOR_bio_clone_bioset
FUNCTION_WRAPPER(bio_clone_bioset, (struct bio *_arg1, gfp_t _arg2, struct bio_set *bs), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(bs);
    TRACES_IF_WATCHPOINT(bs);
    SCAN_HEAD_FUNC(struct bio_set)(*(TO_UNWATCHED_ADDRESS(bs)));
    kern_printk("bio_clone_bioset is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, bs);
    struct bio *ret = bio_clone_bioset(_arg1, _arg2, bs);
    POST_WRAPPER_FUNC(_arg1, _arg2, bs);
    kern_printk("bio_clone_bioset returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(bs);
    SCAN_HEAD_FUNC(struct bio_set)(*(TO_UNWATCHED_ADDRESS(bs)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_vmemmap_populate_basepages
#define APP_WRAPPER_FOR_vmemmap_populate_basepages
#endif
 
#ifndef APP_WRAPPER_FOR_vmemmap_populate_basepages
#define APP_WRAPPER_FOR_vmemmap_populate_basepages
FUNCTION_WRAPPER(vmemmap_populate_basepages, (struct page *start_page, unsigned long pages, int node), {
    WRAP_RECURSIVE(start_page);
    TRACES_IF_WATCHPOINT(start_page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(start_page)));
    kern_printk("vmemmap_populate_basepages is invoked.\n");
    PRE_WRAPPER_FUNC(start_page, pages, node);
    int ret = vmemmap_populate_basepages(start_page, pages, node);
    POST_WRAPPER_FUNC(start_page, pages, node);
    kern_printk("vmemmap_populate_basepages returned.\n");
    TRACES_IF_WATCHPOINT(start_page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(start_page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_warning
#define APP_WRAPPER_FOR_acpi_warning
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_warning
#define APP_WRAPPER_FOR_acpi_warning
FUNCTION_WRAPPER_VOID(acpi_warning, (const char *module_name, u32 line_number, const char *format, ...), {
    va_list args__;
    va_start(args__, format);
    // TODO: variadic arguments
    kern_printk("acpi_warning is invoked.\n");
    PRE_WRAPPER_FUNC(module_name, line_number, format);
    acpi_warning(module_name, line_number, format);
    POST_WRAPPER_FUNC(module_name, line_number, format);
    kern_printk("acpi_warning returned.\n");
    va_end(args__);
})
#endif


#ifndef KERN_ADDR_mark_buffer_async_write
#define APP_WRAPPER_FOR_mark_buffer_async_write
#endif
 
#ifndef APP_WRAPPER_FOR_mark_buffer_async_write
#define APP_WRAPPER_FOR_mark_buffer_async_write
FUNCTION_WRAPPER_VOID(mark_buffer_async_write, (struct buffer_head *bh), {
    WRAP_RECURSIVE(bh);
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    kern_printk("mark_buffer_async_write is invoked.\n");
    PRE_WRAPPER_FUNC(bh);
    mark_buffer_async_write(bh);
    POST_WRAPPER_FUNC(bh);
    kern_printk("mark_buffer_async_write returned.\n");
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
})
#endif


#ifndef KERN_ADDR_dentry_unhash
#define APP_WRAPPER_FOR_dentry_unhash
#endif
 
#ifndef APP_WRAPPER_FOR_dentry_unhash
#define APP_WRAPPER_FOR_dentry_unhash
FUNCTION_WRAPPER_VOID(dentry_unhash, (struct dentry *dentry), {
    WRAP_RECURSIVE(dentry);
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    kern_printk("dentry_unhash is invoked.\n");
    PRE_WRAPPER_FUNC(dentry);
    dentry_unhash(dentry);
    POST_WRAPPER_FUNC(dentry);
    kern_printk("dentry_unhash returned.\n");
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
})
#endif


#ifndef KERN_ADDR_ihold
#define APP_WRAPPER_FOR_ihold
#endif
 
#ifndef APP_WRAPPER_FOR_ihold
#define APP_WRAPPER_FOR_ihold
FUNCTION_WRAPPER_VOID(ihold, (struct inode *inode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("ihold is invoked.\n");
    PRE_WRAPPER_FUNC(inode);
    ihold(inode);
    POST_WRAPPER_FUNC(inode);
    kern_printk("ihold returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_disable_irq
#define APP_WRAPPER_FOR_disable_irq
#endif
 
#ifndef APP_WRAPPER_FOR_disable_irq
#define APP_WRAPPER_FOR_disable_irq
FUNCTION_WRAPPER_VOID(disable_irq, (unsigned int irq), {
    kern_printk("disable_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq);
    disable_irq(irq);
    POST_WRAPPER_FUNC(irq);
    kern_printk("disable_irq returned.\n");
})
#endif


#ifndef KERN_ADDR_wmi_get_event_data
#define APP_WRAPPER_FOR_wmi_get_event_data
#endif
 
#ifndef APP_WRAPPER_FOR_wmi_get_event_data
#define APP_WRAPPER_FOR_wmi_get_event_data
FUNCTION_WRAPPER(wmi_get_event_data, (u32 event, struct acpi_buffer *out), {
    kern_printk("wmi_get_event_data is invoked.\n");
    PRE_WRAPPER_FUNC(event, out);
    acpi_status ret = wmi_get_event_data(event, out);
    POST_WRAPPER_FUNC(event, out);
    kern_printk("wmi_get_event_data returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_rcu_needs_cpu
#define APP_WRAPPER_FOR_rcu_needs_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_rcu_needs_cpu
#define APP_WRAPPER_FOR_rcu_needs_cpu
FUNCTION_WRAPPER(rcu_needs_cpu, (int cpu, unsigned long *delta_jiffies), {
    kern_printk("rcu_needs_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, delta_jiffies);
    int ret = rcu_needs_cpu(cpu, delta_jiffies);
    POST_WRAPPER_FUNC(cpu, delta_jiffies);
    kern_printk("rcu_needs_cpu returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_unlock_new_inode
#define APP_WRAPPER_FOR_unlock_new_inode
#endif
 
#ifndef APP_WRAPPER_FOR_unlock_new_inode
#define APP_WRAPPER_FOR_unlock_new_inode
FUNCTION_WRAPPER_VOID(unlock_new_inode, (struct inode *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("unlock_new_inode is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    unlock_new_inode(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("unlock_new_inode returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_sock_create
#define APP_WRAPPER_FOR_sock_create
#endif
 
#ifndef APP_WRAPPER_FOR_sock_create
#define APP_WRAPPER_FOR_sock_create
FUNCTION_WRAPPER(sock_create, (int family, int type, int proto, struct socket **res), {
    WRAP_RECURSIVE(res);
    TRACES_IF_WATCHPOINT(res);
    SCAN_HEAD_FUNC(struct socket *)(*(TO_UNWATCHED_ADDRESS(res)));
    kern_printk("sock_create is invoked.\n");
    PRE_WRAPPER_FUNC(family, type, proto, res);
    int ret = sock_create(family, type, proto, res);
    POST_WRAPPER_FUNC(family, type, proto, res);
    kern_printk("sock_create returned.\n");
    TRACES_IF_WATCHPOINT(res);
    SCAN_HEAD_FUNC(struct socket *)(*(TO_UNWATCHED_ADDRESS(res)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pvclock_tsc_khz
#define APP_WRAPPER_FOR_pvclock_tsc_khz
#endif
 
#ifndef APP_WRAPPER_FOR_pvclock_tsc_khz
#define APP_WRAPPER_FOR_pvclock_tsc_khz
FUNCTION_WRAPPER(pvclock_tsc_khz, (struct pvclock_vcpu_time_info *src), {
    kern_printk("pvclock_tsc_khz is invoked.\n");
    PRE_WRAPPER_FUNC(src);
    long ret = pvclock_tsc_khz(src);
    POST_WRAPPER_FUNC(src);
    kern_printk("pvclock_tsc_khz returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_get_stats
#define APP_WRAPPER_FOR_dev_get_stats
#endif
 
#ifndef APP_WRAPPER_FOR_dev_get_stats
#define APP_WRAPPER_FOR_dev_get_stats
FUNCTION_WRAPPER(dev_get_stats, (struct net_device *dev, struct rtnl_link_stats64 *storage), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_get_stats is invoked.\n");
    PRE_WRAPPER_FUNC(dev, storage);
    struct rtnl_link_stats64 *ret = dev_get_stats(dev, storage);
    POST_WRAPPER_FUNC(dev, storage);
    kern_printk("dev_get_stats returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_shmctl
#define APP_WRAPPER_FOR_compat_sys_shmctl
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_shmctl
#define APP_WRAPPER_FOR_compat_sys_shmctl
FUNCTION_WRAPPER(compat_sys_shmctl, (int first, int second, void *uptr), {
    kern_printk("compat_sys_shmctl is invoked.\n");
    PRE_WRAPPER_FUNC(first, second, uptr);
    long ret = compat_sys_shmctl(first, second, uptr);
    POST_WRAPPER_FUNC(first, second, uptr);
    kern_printk("compat_sys_shmctl returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_recvfrom
#define APP_WRAPPER_FOR_compat_sys_recvfrom
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_recvfrom
#define APP_WRAPPER_FOR_compat_sys_recvfrom
FUNCTION_WRAPPER(compat_sys_recvfrom, (int fd, void *buf, size_t len, unsigned int flags, struct sockaddr *addr, int *addrlen), {
    kern_printk("compat_sys_recvfrom is invoked.\n");
    PRE_WRAPPER_FUNC(fd, buf, len, flags, addr, addrlen);
    long ret = compat_sys_recvfrom(fd, buf, len, flags, addr, addrlen);
    POST_WRAPPER_FUNC(fd, buf, len, flags, addr, addrlen);
    kern_printk("compat_sys_recvfrom returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_class_dev_iter_next
#define APP_WRAPPER_FOR_class_dev_iter_next
#endif
 
#ifndef APP_WRAPPER_FOR_class_dev_iter_next
#define APP_WRAPPER_FOR_class_dev_iter_next
FUNCTION_WRAPPER(class_dev_iter_next, (struct class_dev_iter *iter), {
    WRAP_RECURSIVE(iter);
    TRACES_IF_WATCHPOINT(iter);
    SCAN_HEAD_FUNC(struct class_dev_iter)(*(TO_UNWATCHED_ADDRESS(iter)));
    kern_printk("class_dev_iter_next is invoked.\n");
    PRE_WRAPPER_FUNC(iter);
    struct device *ret = class_dev_iter_next(iter);
    POST_WRAPPER_FUNC(iter);
    kern_printk("class_dev_iter_next returned.\n");
    TRACES_IF_WATCHPOINT(iter);
    SCAN_HEAD_FUNC(struct class_dev_iter)(*(TO_UNWATCHED_ADDRESS(iter)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_bio_integrity_enabled
#define APP_WRAPPER_FOR_bio_integrity_enabled
#endif
 
#ifndef APP_WRAPPER_FOR_bio_integrity_enabled
#define APP_WRAPPER_FOR_bio_integrity_enabled
FUNCTION_WRAPPER(bio_integrity_enabled, (struct bio *bio), {
    WRAP_RECURSIVE(bio);
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
    kern_printk("bio_integrity_enabled is invoked.\n");
    PRE_WRAPPER_FUNC(bio);
    int ret = bio_integrity_enabled(bio);
    POST_WRAPPER_FUNC(bio);
    kern_printk("bio_integrity_enabled returned.\n");
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
    return ret;
})
#endif


#ifndef KERN_ADDR_unregister_quota_format
#define APP_WRAPPER_FOR_unregister_quota_format
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_quota_format
#define APP_WRAPPER_FOR_unregister_quota_format
FUNCTION_WRAPPER_VOID(unregister_quota_format, (struct quota_format_type *fmt), {
    WRAP_RECURSIVE(fmt);
    TRACES_IF_WATCHPOINT(fmt);
    SCAN_HEAD_FUNC(struct quota_format_type)(*(TO_UNWATCHED_ADDRESS(fmt)));
    kern_printk("unregister_quota_format is invoked.\n");
    PRE_WRAPPER_FUNC(fmt);
    unregister_quota_format(fmt);
    POST_WRAPPER_FUNC(fmt);
    kern_printk("unregister_quota_format returned.\n");
    TRACES_IF_WATCHPOINT(fmt);
    SCAN_HEAD_FUNC(struct quota_format_type)(*(TO_UNWATCHED_ADDRESS(fmt)));
})
#endif


#ifndef KERN_ADDR_sock_no_mmap
#define APP_WRAPPER_FOR_sock_no_mmap
#endif
 
#ifndef APP_WRAPPER_FOR_sock_no_mmap
#define APP_WRAPPER_FOR_sock_no_mmap
FUNCTION_WRAPPER(sock_no_mmap, (struct file *file, struct socket *sock, struct vm_area_struct *vma), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("sock_no_mmap is invoked.\n");
    PRE_WRAPPER_FUNC(file, sock, vma);
    int ret = sock_no_mmap(file, sock, vma);
    POST_WRAPPER_FUNC(file, sock, vma);
    kern_printk("sock_no_mmap returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_block_is_partially_uptodate
#define APP_WRAPPER_FOR_block_is_partially_uptodate
#endif
 
#ifndef APP_WRAPPER_FOR_block_is_partially_uptodate
#define APP_WRAPPER_FOR_block_is_partially_uptodate
FUNCTION_WRAPPER(block_is_partially_uptodate, (struct page *page, read_descriptor_t *desc, unsigned long from), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("block_is_partially_uptodate is invoked.\n");
    PRE_WRAPPER_FUNC(page, desc, from);
    int ret = block_is_partially_uptodate(page, desc, from);
    POST_WRAPPER_FUNC(page, desc, from);
    kern_printk("block_is_partially_uptodate returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dql_completed
#define APP_WRAPPER_FOR_dql_completed
#endif
 
#ifndef APP_WRAPPER_FOR_dql_completed
#define APP_WRAPPER_FOR_dql_completed
FUNCTION_WRAPPER_VOID(dql_completed, (struct dql *dql, unsigned int count), {
    kern_printk("dql_completed is invoked.\n");
    PRE_WRAPPER_FUNC(dql, count);
    dql_completed(dql, count);
    POST_WRAPPER_FUNC(dql, count);
    kern_printk("dql_completed returned.\n");
})
#endif


#ifndef KERN_ADDR_set_blocksize
#define APP_WRAPPER_FOR_set_blocksize
#endif
 
#ifndef APP_WRAPPER_FOR_set_blocksize
#define APP_WRAPPER_FOR_set_blocksize
FUNCTION_WRAPPER(set_blocksize, (struct block_device *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("set_blocksize is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = set_blocksize(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("set_blocksize returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_ethtool
#define APP_WRAPPER_FOR_dev_ethtool
#endif
 
#ifndef APP_WRAPPER_FOR_dev_ethtool
#define APP_WRAPPER_FOR_dev_ethtool
FUNCTION_WRAPPER(dev_ethtool, (struct net *net, struct ifreq *_arg1), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    kern_printk("dev_ethtool is invoked.\n");
    PRE_WRAPPER_FUNC(net, _arg1);
    int ret = dev_ethtool(net, _arg1);
    POST_WRAPPER_FUNC(net, _arg1);
    kern_printk("dev_ethtool returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bio_pair_release
#define APP_WRAPPER_FOR_bio_pair_release
#endif
 
#ifndef APP_WRAPPER_FOR_bio_pair_release
#define APP_WRAPPER_FOR_bio_pair_release
FUNCTION_WRAPPER_VOID(bio_pair_release, (struct bio_pair *dbio), {
    WRAP_RECURSIVE(dbio);
    TRACES_IF_WATCHPOINT(dbio);
    SCAN_HEAD_FUNC(struct bio_pair)(*(TO_UNWATCHED_ADDRESS(dbio)));
    kern_printk("bio_pair_release is invoked.\n");
    PRE_WRAPPER_FUNC(dbio);
    bio_pair_release(dbio);
    POST_WRAPPER_FUNC(dbio);
    kern_printk("bio_pair_release returned.\n");
    TRACES_IF_WATCHPOINT(dbio);
    SCAN_HEAD_FUNC(struct bio_pair)(*(TO_UNWATCHED_ADDRESS(dbio)));
})
#endif


#ifndef KERN_ADDR_pci_bus_update_busn_res_end
#define APP_WRAPPER_FOR_pci_bus_update_busn_res_end
#endif
 
#ifndef APP_WRAPPER_FOR_pci_bus_update_busn_res_end
#define APP_WRAPPER_FOR_pci_bus_update_busn_res_end
FUNCTION_WRAPPER(pci_bus_update_busn_res_end, (struct pci_bus *b, int busmax), {
    WRAP_RECURSIVE(b);
    TRACES_IF_WATCHPOINT(b);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(b)));
    kern_printk("pci_bus_update_busn_res_end is invoked.\n");
    PRE_WRAPPER_FUNC(b, busmax);
    int ret = pci_bus_update_busn_res_end(b, busmax);
    POST_WRAPPER_FUNC(b, busmax);
    kern_printk("pci_bus_update_busn_res_end returned.\n");
    TRACES_IF_WATCHPOINT(b);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(b)));
    return ret;
})
#endif


#ifndef KERN_ADDR_is_dock_device
#define APP_WRAPPER_FOR_is_dock_device
#endif
 
#ifndef APP_WRAPPER_FOR_is_dock_device
#define APP_WRAPPER_FOR_is_dock_device
FUNCTION_WRAPPER(is_dock_device, (acpi_handle handle), {
    kern_printk("is_dock_device is invoked.\n");
    PRE_WRAPPER_FUNC(handle);
    int ret = is_dock_device(handle);
    POST_WRAPPER_FUNC(handle);
    kern_printk("is_dock_device returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_krealloc
#define APP_WRAPPER_FOR_krealloc
#endif
 
#ifndef APP_WRAPPER_FOR_krealloc
#define APP_WRAPPER_FOR_krealloc
FUNCTION_WRAPPER(krealloc, (const void *_arg1, size_t _arg2, gfp_t _arg3), {
    kern_printk("krealloc is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    void *ret = krealloc(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("krealloc returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_file_llseek_size
#define APP_WRAPPER_FOR_generic_file_llseek_size
#endif
 
#ifndef APP_WRAPPER_FOR_generic_file_llseek_size
#define APP_WRAPPER_FOR_generic_file_llseek_size
FUNCTION_WRAPPER(generic_file_llseek_size, (struct file *file, loff_t offset, int whence, loff_t maxsize, loff_t eof), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("generic_file_llseek_size is invoked.\n");
    PRE_WRAPPER_FUNC(file, offset, whence, maxsize, eof);
    loff_t ret = generic_file_llseek_size(file, offset, whence, maxsize, eof);
    POST_WRAPPER_FUNC(file, offset, whence, maxsize, eof);
    kern_printk("generic_file_llseek_size returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mnt_want_write_file
#define APP_WRAPPER_FOR_mnt_want_write_file
#endif
 
#ifndef APP_WRAPPER_FOR_mnt_want_write_file
#define APP_WRAPPER_FOR_mnt_want_write_file
FUNCTION_WRAPPER(mnt_want_write_file, (struct file *file), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("mnt_want_write_file is invoked.\n");
    PRE_WRAPPER_FUNC(file);
    int ret = mnt_want_write_file(file);
    POST_WRAPPER_FUNC(file);
    kern_printk("mnt_want_write_file returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_setup_profiling_timer
#define APP_WRAPPER_FOR_setup_profiling_timer
#endif
 
#ifndef APP_WRAPPER_FOR_setup_profiling_timer
#define APP_WRAPPER_FOR_setup_profiling_timer
FUNCTION_WRAPPER(setup_profiling_timer, (unsigned int _arg1), {
    kern_printk("setup_profiling_timer is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = setup_profiling_timer(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("setup_profiling_timer returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_setup_APIC_eilvt
#define APP_WRAPPER_FOR_setup_APIC_eilvt
#endif
 
#ifndef APP_WRAPPER_FOR_setup_APIC_eilvt
#define APP_WRAPPER_FOR_setup_APIC_eilvt
FUNCTION_WRAPPER(setup_APIC_eilvt, (u8 lvt_off, u8 vector, u8 msg_type, u8 mask), {
    kern_printk("setup_APIC_eilvt is invoked.\n");
    PRE_WRAPPER_FUNC(lvt_off, vector, msg_type, mask);
    int ret = setup_APIC_eilvt(lvt_off, vector, msg_type, mask);
    POST_WRAPPER_FUNC(lvt_off, vector, msg_type, mask);
    kern_printk("setup_APIC_eilvt returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___delete_partition
#define APP_WRAPPER_FOR___delete_partition
#endif
 
#ifndef APP_WRAPPER_FOR___delete_partition
#define APP_WRAPPER_FOR___delete_partition
FUNCTION_WRAPPER_VOID(__delete_partition, (struct hd_struct *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct hd_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__delete_partition is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    __delete_partition(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__delete_partition returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct hd_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_wb_do_writeback
#define APP_WRAPPER_FOR_wb_do_writeback
#endif
 
#ifndef APP_WRAPPER_FOR_wb_do_writeback
#define APP_WRAPPER_FOR_wb_do_writeback
FUNCTION_WRAPPER(wb_do_writeback, (struct bdi_writeback *wb, int force_wait), {
    WRAP_RECURSIVE(wb);
    TRACES_IF_WATCHPOINT(wb);
    SCAN_HEAD_FUNC(struct bdi_writeback)(*(TO_UNWATCHED_ADDRESS(wb)));
    kern_printk("wb_do_writeback is invoked.\n");
    PRE_WRAPPER_FUNC(wb, force_wait);
    long ret = wb_do_writeback(wb, force_wait);
    POST_WRAPPER_FUNC(wb, force_wait);
    kern_printk("wb_do_writeback returned.\n");
    TRACES_IF_WATCHPOINT(wb);
    SCAN_HEAD_FUNC(struct bdi_writeback)(*(TO_UNWATCHED_ADDRESS(wb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_frags_init
#define APP_WRAPPER_FOR_inet_frags_init
#endif
 
#ifndef APP_WRAPPER_FOR_inet_frags_init
#define APP_WRAPPER_FOR_inet_frags_init
FUNCTION_WRAPPER_VOID(inet_frags_init, (struct inet_frags *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inet_frags)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("inet_frags_init is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    inet_frags_init(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("inet_frags_init returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inet_frags)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_get_monotonic_boottime
#define APP_WRAPPER_FOR_get_monotonic_boottime
#endif
 
#ifndef APP_WRAPPER_FOR_get_monotonic_boottime
#define APP_WRAPPER_FOR_get_monotonic_boottime
FUNCTION_WRAPPER_VOID(get_monotonic_boottime, (struct timespec *ts), {
    kern_printk("get_monotonic_boottime is invoked.\n");
    PRE_WRAPPER_FUNC(ts);
    get_monotonic_boottime(ts);
    POST_WRAPPER_FUNC(ts);
    kern_printk("get_monotonic_boottime returned.\n");
})
#endif


#ifndef KERN_ADDR_dcache_dir_close
#define APP_WRAPPER_FOR_dcache_dir_close
#endif
 
#ifndef APP_WRAPPER_FOR_dcache_dir_close
#define APP_WRAPPER_FOR_dcache_dir_close
FUNCTION_WRAPPER(dcache_dir_close, (struct inode *_arg1, struct file *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("dcache_dir_close is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = dcache_dir_close(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("dcache_dir_close returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cpumask_any_but
#define APP_WRAPPER_FOR_cpumask_any_but
#endif
 
#ifndef APP_WRAPPER_FOR_cpumask_any_but
#define APP_WRAPPER_FOR_cpumask_any_but
FUNCTION_WRAPPER(cpumask_any_but, (const struct cpumask *mask, unsigned int cpu), {
    kern_printk("cpumask_any_but is invoked.\n");
    PRE_WRAPPER_FUNC(mask, cpu);
    int ret = cpumask_any_but(mask, cpu);
    POST_WRAPPER_FUNC(mask, cpu);
    kern_printk("cpumask_any_but returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_set_cacheline_size
#define APP_WRAPPER_FOR_pci_set_cacheline_size
#endif
 
#ifndef APP_WRAPPER_FOR_pci_set_cacheline_size
#define APP_WRAPPER_FOR_pci_set_cacheline_size
FUNCTION_WRAPPER(pci_set_cacheline_size, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_set_cacheline_size is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pci_set_cacheline_size(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_set_cacheline_size returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cap_netlink_send
#define APP_WRAPPER_FOR_cap_netlink_send
#endif
 
#ifndef APP_WRAPPER_FOR_cap_netlink_send
#define APP_WRAPPER_FOR_cap_netlink_send
FUNCTION_WRAPPER(cap_netlink_send, (struct sock *sk, struct sk_buff *skb), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("cap_netlink_send is invoked.\n");
    PRE_WRAPPER_FUNC(sk, skb);
    int ret = cap_netlink_send(sk, skb);
    POST_WRAPPER_FUNC(sk, skb);
    kern_printk("cap_netlink_send returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR___irq_alloc_descs
#define APP_WRAPPER_FOR___irq_alloc_descs
#endif
 
#ifndef APP_WRAPPER_FOR___irq_alloc_descs
#define APP_WRAPPER_FOR___irq_alloc_descs
FUNCTION_WRAPPER(__irq_alloc_descs, (int irq, unsigned int from, unsigned int cnt, int node, struct module *owner), {
    WRAP_RECURSIVE(owner);
    TRACES_IF_WATCHPOINT(owner);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(owner)));
    kern_printk("__irq_alloc_descs is invoked.\n");
    PRE_WRAPPER_FUNC(irq, from, cnt, node, owner);
    int ret = __irq_alloc_descs(irq, from, cnt, node, owner);
    POST_WRAPPER_FUNC(irq, from, cnt, node, owner);
    kern_printk("__irq_alloc_descs returned.\n");
    TRACES_IF_WATCHPOINT(owner);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(owner)));
    return ret;
})
#endif


#ifndef KERN_ADDR_strcspn
#define APP_WRAPPER_FOR_strcspn
#endif
 
#ifndef APP_WRAPPER_FOR_strcspn
#define APP_WRAPPER_FOR_strcspn
FUNCTION_WRAPPER(strcspn, (const char *_arg1, const char *_arg2), {
    kern_printk("strcspn is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    __kernel_size_t ret = strcspn(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("strcspn returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_phy_stop
#define APP_WRAPPER_FOR_phy_stop
#endif
 
#ifndef APP_WRAPPER_FOR_phy_stop
#define APP_WRAPPER_FOR_phy_stop
FUNCTION_WRAPPER_VOID(phy_stop, (struct phy_device *phydev), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    kern_printk("phy_stop is invoked.\n");
    PRE_WRAPPER_FUNC(phydev);
    phy_stop(phydev);
    POST_WRAPPER_FUNC(phydev);
    kern_printk("phy_stop returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
})
#endif


#ifndef KERN_ADDR_add_page_to_unevictable_list
#define APP_WRAPPER_FOR_add_page_to_unevictable_list
#endif
 
#ifndef APP_WRAPPER_FOR_add_page_to_unevictable_list
#define APP_WRAPPER_FOR_add_page_to_unevictable_list
FUNCTION_WRAPPER_VOID(add_page_to_unevictable_list, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("add_page_to_unevictable_list is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    add_page_to_unevictable_list(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("add_page_to_unevictable_list returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_acpi_pci_unregister_driver
#define APP_WRAPPER_FOR_acpi_pci_unregister_driver
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_pci_unregister_driver
#define APP_WRAPPER_FOR_acpi_pci_unregister_driver
FUNCTION_WRAPPER_VOID(acpi_pci_unregister_driver, (struct acpi_pci_driver *driver), {
    WRAP_RECURSIVE(driver);
    TRACES_IF_WATCHPOINT(driver);
    SCAN_HEAD_FUNC(struct acpi_pci_driver)(*(TO_UNWATCHED_ADDRESS(driver)));
    kern_printk("acpi_pci_unregister_driver is invoked.\n");
    PRE_WRAPPER_FUNC(driver);
    acpi_pci_unregister_driver(driver);
    POST_WRAPPER_FUNC(driver);
    kern_printk("acpi_pci_unregister_driver returned.\n");
    TRACES_IF_WATCHPOINT(driver);
    SCAN_HEAD_FUNC(struct acpi_pci_driver)(*(TO_UNWATCHED_ADDRESS(driver)));
})
#endif


#ifndef KERN_ADDR_bio_copy_user_iov
#define APP_WRAPPER_FOR_bio_copy_user_iov
#endif
 
#ifndef APP_WRAPPER_FOR_bio_copy_user_iov
#define APP_WRAPPER_FOR_bio_copy_user_iov
FUNCTION_WRAPPER(bio_copy_user_iov, (struct request_queue *_arg1, struct rq_map_data *_arg2, struct sg_iovec *_arg3, int _arg4, int _arg5, gfp_t _arg6), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct rq_map_data)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("bio_copy_user_iov is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
    struct bio *ret = bio_copy_user_iov(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
    kern_printk("bio_copy_user_iov returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct rq_map_data)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_write_checks
#define APP_WRAPPER_FOR_generic_write_checks
#endif
 
#ifndef APP_WRAPPER_FOR_generic_write_checks
#define APP_WRAPPER_FOR_generic_write_checks
FUNCTION_WRAPPER(generic_write_checks, (struct file *file, loff_t *pos, size_t *count, int isblk), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("generic_write_checks is invoked.\n");
    PRE_WRAPPER_FUNC(file, pos, count, isblk);
    int ret = generic_write_checks(file, pos, count, isblk);
    POST_WRAPPER_FUNC(file, pos, count, isblk);
    kern_printk("generic_write_checks returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_lock_may_write
#define APP_WRAPPER_FOR_lock_may_write
#endif
 
#ifndef APP_WRAPPER_FOR_lock_may_write
#define APP_WRAPPER_FOR_lock_may_write
FUNCTION_WRAPPER(lock_may_write, (struct inode *_arg1, loff_t start, unsigned long count), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("lock_may_write is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, start, count);
    int ret = lock_may_write(_arg1, start, count);
    POST_WRAPPER_FUNC(_arg1, start, count);
    kern_printk("lock_may_write returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_flush_kthread_worker
#define APP_WRAPPER_FOR_flush_kthread_worker
#endif
 
#ifndef APP_WRAPPER_FOR_flush_kthread_worker
#define APP_WRAPPER_FOR_flush_kthread_worker
FUNCTION_WRAPPER_VOID(flush_kthread_worker, (struct kthread_worker *worker), {
    WRAP_RECURSIVE(worker);
    TRACES_IF_WATCHPOINT(worker);
    SCAN_HEAD_FUNC(struct kthread_worker)(*(TO_UNWATCHED_ADDRESS(worker)));
    kern_printk("flush_kthread_worker is invoked.\n");
    PRE_WRAPPER_FUNC(worker);
    flush_kthread_worker(worker);
    POST_WRAPPER_FUNC(worker);
    kern_printk("flush_kthread_worker returned.\n");
    TRACES_IF_WATCHPOINT(worker);
    SCAN_HEAD_FUNC(struct kthread_worker)(*(TO_UNWATCHED_ADDRESS(worker)));
})
#endif


#ifndef KERN_ADDR___journal_free_buffer
#define APP_WRAPPER_FOR___journal_free_buffer
#endif
 
#ifndef APP_WRAPPER_FOR___journal_free_buffer
#define APP_WRAPPER_FOR___journal_free_buffer
FUNCTION_WRAPPER_VOID(__journal_free_buffer, (struct journal_head *bh), {
    WRAP_RECURSIVE(bh);
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    kern_printk("__journal_free_buffer is invoked.\n");
    PRE_WRAPPER_FUNC(bh);
    __journal_free_buffer(bh);
    POST_WRAPPER_FUNC(bh);
    kern_printk("__journal_free_buffer returned.\n");
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(bh)));
})
#endif


#ifndef KERN_ADDR_sysfs_remove_file
#define APP_WRAPPER_FOR_sysfs_remove_file
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_remove_file
#define APP_WRAPPER_FOR_sysfs_remove_file
FUNCTION_WRAPPER_VOID(sysfs_remove_file, (struct kobject *kobj, const struct attribute *attr), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    kern_printk("sysfs_remove_file is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, attr);
    sysfs_remove_file(kobj, attr);
    POST_WRAPPER_FUNC(kobj, attr);
    kern_printk("sysfs_remove_file returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
})
#endif


#ifndef KERN_ADDR_rw_verify_area
#define APP_WRAPPER_FOR_rw_verify_area
#endif
 
#ifndef APP_WRAPPER_FOR_rw_verify_area
#define APP_WRAPPER_FOR_rw_verify_area
FUNCTION_WRAPPER(rw_verify_area, (int _arg1, struct file *_arg2, loff_t *_arg3, size_t _arg4), {
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("rw_verify_area is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = rw_verify_area(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("rw_verify_area returned.\n");
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_smp_call_function_many
#define APP_WRAPPER_FOR_smp_call_function_many
#endif
 
#ifndef APP_WRAPPER_FOR_smp_call_function_many
#define APP_WRAPPER_FOR_smp_call_function_many
FUNCTION_WRAPPER_VOID(smp_call_function_many, (const struct cpumask *mask, smp_call_func_t func, void *info, bool wait), {
    WRAP_FUNCTION(func);
    kern_printk("smp_call_function_many is invoked.\n");
    PRE_WRAPPER_FUNC(mask, func, info, wait);
    smp_call_function_many(mask, func, info, wait);
    POST_WRAPPER_FUNC(mask, func, info, wait);
    kern_printk("smp_call_function_many returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_bus_receive_event
#define APP_WRAPPER_FOR_acpi_bus_receive_event
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_bus_receive_event
#define APP_WRAPPER_FOR_acpi_bus_receive_event
FUNCTION_WRAPPER(acpi_bus_receive_event, (struct acpi_bus_event *event), {
    kern_printk("acpi_bus_receive_event is invoked.\n");
    PRE_WRAPPER_FUNC(event);
    int ret = acpi_bus_receive_event(event);
    POST_WRAPPER_FUNC(event);
    kern_printk("acpi_bus_receive_event returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_scsi_change_queue_depth
#define APP_WRAPPER_FOR_ata_scsi_change_queue_depth
#endif
 
#ifndef APP_WRAPPER_FOR_ata_scsi_change_queue_depth
#define APP_WRAPPER_FOR_ata_scsi_change_queue_depth
FUNCTION_WRAPPER(ata_scsi_change_queue_depth, (struct scsi_device *sdev, int queue_depth, int reason), {
    kern_printk("ata_scsi_change_queue_depth is invoked.\n");
    PRE_WRAPPER_FUNC(sdev, queue_depth, reason);
    int ret = ata_scsi_change_queue_depth(sdev, queue_depth, reason);
    POST_WRAPPER_FUNC(sdev, queue_depth, reason);
    kern_printk("ata_scsi_change_queue_depth returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_removexattr
#define APP_WRAPPER_FOR_generic_removexattr
#endif
 
#ifndef APP_WRAPPER_FOR_generic_removexattr
#define APP_WRAPPER_FOR_generic_removexattr
FUNCTION_WRAPPER(generic_removexattr, (struct dentry *dentry, const char *name), {
    WRAP_RECURSIVE(dentry);
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    kern_printk("generic_removexattr is invoked.\n");
    PRE_WRAPPER_FUNC(dentry, name);
    int ret = generic_removexattr(dentry, name);
    POST_WRAPPER_FUNC(dentry, name);
    kern_printk("generic_removexattr returned.\n");
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    return ret;
})
#endif


#ifndef KERN_ADDR_zone_pcp_update
#define APP_WRAPPER_FOR_zone_pcp_update
#endif
 
#ifndef APP_WRAPPER_FOR_zone_pcp_update
#define APP_WRAPPER_FOR_zone_pcp_update
FUNCTION_WRAPPER_VOID(zone_pcp_update, (struct zone *zone), {
    WRAP_RECURSIVE(zone);
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    kern_printk("zone_pcp_update is invoked.\n");
    PRE_WRAPPER_FUNC(zone);
    zone_pcp_update(zone);
    POST_WRAPPER_FUNC(zone);
    kern_printk("zone_pcp_update returned.\n");
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
})
#endif


#ifndef KERN_ADDR_sock_recvmsg
#define APP_WRAPPER_FOR_sock_recvmsg
#endif
 
#ifndef APP_WRAPPER_FOR_sock_recvmsg
#define APP_WRAPPER_FOR_sock_recvmsg
FUNCTION_WRAPPER(sock_recvmsg, (struct socket *sock, struct msghdr *msg, size_t size, int flags), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    kern_printk("sock_recvmsg is invoked.\n");
    PRE_WRAPPER_FUNC(sock, msg, size, flags);
    int ret = sock_recvmsg(sock, msg, size, flags);
    POST_WRAPPER_FUNC(sock, msg, size, flags);
    kern_printk("sock_recvmsg returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    return ret;
})
#endif


#ifndef KERN_ADDR_identify_secondary_cpu
#define APP_WRAPPER_FOR_identify_secondary_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_identify_secondary_cpu
#define APP_WRAPPER_FOR_identify_secondary_cpu
FUNCTION_WRAPPER_VOID(identify_secondary_cpu, (struct cpuinfo_x86 *_arg1), {
    kern_printk("identify_secondary_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    identify_secondary_cpu(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("identify_secondary_cpu returned.\n");
})
#endif


#ifndef KERN_ADDR_cgroup_is_removed
#define APP_WRAPPER_FOR_cgroup_is_removed
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_is_removed
#define APP_WRAPPER_FOR_cgroup_is_removed
FUNCTION_WRAPPER(cgroup_is_removed, (const struct cgroup *cgrp), {
    WRAP_RECURSIVE(cgrp);
    TRACES_IF_WATCHPOINT(cgrp);
    SCAN_HEAD_FUNC(const struct cgroup)(*(TO_UNWATCHED_ADDRESS(cgrp)));
    kern_printk("cgroup_is_removed is invoked.\n");
    PRE_WRAPPER_FUNC(cgrp);
    int ret = cgroup_is_removed(cgrp);
    POST_WRAPPER_FUNC(cgrp);
    kern_printk("cgroup_is_removed returned.\n");
    TRACES_IF_WATCHPOINT(cgrp);
    SCAN_HEAD_FUNC(const struct cgroup)(*(TO_UNWATCHED_ADDRESS(cgrp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_device_pm_lock
#define APP_WRAPPER_FOR_device_pm_lock
#endif
 
#ifndef APP_WRAPPER_FOR_device_pm_lock
#define APP_WRAPPER_FOR_device_pm_lock
FUNCTION_WRAPPER_VOID(device_pm_lock, (), {
    kern_printk("device_pm_lock is invoked.\n");
    PRE_WRAPPER_FUNC();
    device_pm_lock();
    POST_WRAPPER_FUNC();
    kern_printk("device_pm_lock returned.\n");
})
#endif


#ifndef KERN_ADDR_ata_eh_freeze_port
#define APP_WRAPPER_FOR_ata_eh_freeze_port
#endif
 
#ifndef APP_WRAPPER_FOR_ata_eh_freeze_port
#define APP_WRAPPER_FOR_ata_eh_freeze_port
FUNCTION_WRAPPER_VOID(ata_eh_freeze_port, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_eh_freeze_port is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    ata_eh_freeze_port(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_eh_freeze_port returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_acpi_finish_gpe
#define APP_WRAPPER_FOR_acpi_finish_gpe
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_finish_gpe
#define APP_WRAPPER_FOR_acpi_finish_gpe
FUNCTION_WRAPPER(acpi_finish_gpe, (acpi_handle gpe_device, u32 gpe_number), {
    kern_printk("acpi_finish_gpe is invoked.\n");
    PRE_WRAPPER_FUNC(gpe_device, gpe_number);
    acpi_status ret = acpi_finish_gpe(gpe_device, gpe_number);
    POST_WRAPPER_FUNC(gpe_device, gpe_number);
    kern_printk("acpi_finish_gpe returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_set_revoke
#define APP_WRAPPER_FOR_jbd2_journal_set_revoke
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_set_revoke
#define APP_WRAPPER_FOR_jbd2_journal_set_revoke
FUNCTION_WRAPPER(jbd2_journal_set_revoke, (journal_t *_arg1, unsigned long long _arg2, tid_t _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_set_revoke is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = jbd2_journal_set_revoke(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("jbd2_journal_set_revoke returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sk_reset_txq
#define APP_WRAPPER_FOR_sk_reset_txq
#endif
 
#ifndef APP_WRAPPER_FOR_sk_reset_txq
#define APP_WRAPPER_FOR_sk_reset_txq
FUNCTION_WRAPPER_VOID(sk_reset_txq, (struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sk_reset_txq is invoked.\n");
    PRE_WRAPPER_FUNC(sk);
    sk_reset_txq(sk);
    POST_WRAPPER_FUNC(sk);
    kern_printk("sk_reset_txq returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR___get_free_pages
#define APP_WRAPPER_FOR___get_free_pages
#endif
 
#ifndef APP_WRAPPER_FOR___get_free_pages
#define APP_WRAPPER_FOR___get_free_pages
FUNCTION_WRAPPER(__get_free_pages, (gfp_t gfp_mask, unsigned int order), {
    kern_printk("__get_free_pages is invoked.\n");
    PRE_WRAPPER_FUNC(gfp_mask, order);
    long ret = __get_free_pages(gfp_mask, order);
    POST_WRAPPER_FUNC(gfp_mask, order);
    kern_printk("__get_free_pages returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_netdev_rx_handler_unregister
#define APP_WRAPPER_FOR_netdev_rx_handler_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_rx_handler_unregister
#define APP_WRAPPER_FOR_netdev_rx_handler_unregister
FUNCTION_WRAPPER_VOID(netdev_rx_handler_unregister, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("netdev_rx_handler_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    netdev_rx_handler_unregister(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("netdev_rx_handler_unregister returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_writeback_inodes_wb
#define APP_WRAPPER_FOR_writeback_inodes_wb
#endif
 
#ifndef APP_WRAPPER_FOR_writeback_inodes_wb
#define APP_WRAPPER_FOR_writeback_inodes_wb
FUNCTION_WRAPPER(writeback_inodes_wb, (struct bdi_writeback *wb, long nr_pages, enum wb_reason reason), {
    WRAP_RECURSIVE(wb);
    TRACES_IF_WATCHPOINT(wb);
    SCAN_HEAD_FUNC(struct bdi_writeback)(*(TO_UNWATCHED_ADDRESS(wb)));
    kern_printk("writeback_inodes_wb is invoked.\n");
    PRE_WRAPPER_FUNC(wb, nr_pages, reason);
    long ret = writeback_inodes_wb(wb, nr_pages, reason);
    POST_WRAPPER_FUNC(wb, nr_pages, reason);
    kern_printk("writeback_inodes_wb returned.\n");
    TRACES_IF_WATCHPOINT(wb);
    SCAN_HEAD_FUNC(struct bdi_writeback)(*(TO_UNWATCHED_ADDRESS(wb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_scsi_add_host_with_dma
#define APP_WRAPPER_FOR_scsi_add_host_with_dma
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_add_host_with_dma
#define APP_WRAPPER_FOR_scsi_add_host_with_dma
FUNCTION_WRAPPER(scsi_add_host_with_dma, (struct Scsi_Host *_arg1, struct device *_arg2, struct device *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("scsi_add_host_with_dma is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = scsi_add_host_with_dma(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("scsi_add_host_with_dma returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_locks_mandatory_area
#define APP_WRAPPER_FOR_locks_mandatory_area
#endif
 
#ifndef APP_WRAPPER_FOR_locks_mandatory_area
#define APP_WRAPPER_FOR_locks_mandatory_area
FUNCTION_WRAPPER(locks_mandatory_area, (int _arg1, struct inode *_arg2, struct file *_arg3, loff_t _arg4, size_t _arg5), {
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("locks_mandatory_area is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = locks_mandatory_area(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("locks_mandatory_area returned.\n");
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_phy_init_hw
#define APP_WRAPPER_FOR_phy_init_hw
#endif
 
#ifndef APP_WRAPPER_FOR_phy_init_hw
#define APP_WRAPPER_FOR_phy_init_hw
FUNCTION_WRAPPER(phy_init_hw, (struct phy_device *phydev), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    kern_printk("phy_init_hw is invoked.\n");
    PRE_WRAPPER_FUNC(phydev);
    int ret = phy_init_hw(phydev);
    POST_WRAPPER_FUNC(phydev);
    kern_printk("phy_init_hw returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_netlink_table_ungrab
#define APP_WRAPPER_FOR_netlink_table_ungrab
#endif
 
#ifndef APP_WRAPPER_FOR_netlink_table_ungrab
#define APP_WRAPPER_FOR_netlink_table_ungrab
FUNCTION_WRAPPER_VOID(netlink_table_ungrab, (), {
    kern_printk("netlink_table_ungrab is invoked.\n");
    PRE_WRAPPER_FUNC();
    netlink_table_ungrab();
    POST_WRAPPER_FUNC();
    kern_printk("netlink_table_ungrab returned.\n");
})
#endif


#ifndef KERN_ADDR_cdrom_get_media_event
#define APP_WRAPPER_FOR_cdrom_get_media_event
#endif
 
#ifndef APP_WRAPPER_FOR_cdrom_get_media_event
#define APP_WRAPPER_FOR_cdrom_get_media_event
FUNCTION_WRAPPER(cdrom_get_media_event, (struct cdrom_device_info *cdi, struct media_event_desc *med), {
    WRAP_RECURSIVE(cdi);
    TRACES_IF_WATCHPOINT(cdi);
    SCAN_HEAD_FUNC(struct cdrom_device_info)(*(TO_UNWATCHED_ADDRESS(cdi)));
    kern_printk("cdrom_get_media_event is invoked.\n");
    PRE_WRAPPER_FUNC(cdi, med);
    int ret = cdrom_get_media_event(cdi, med);
    POST_WRAPPER_FUNC(cdi, med);
    kern_printk("cdrom_get_media_event returned.\n");
    TRACES_IF_WATCHPOINT(cdi);
    SCAN_HEAD_FUNC(struct cdrom_device_info)(*(TO_UNWATCHED_ADDRESS(cdi)));
    return ret;
})
#endif


#ifndef KERN_ADDR_msecs_to_jiffies
#define APP_WRAPPER_FOR_msecs_to_jiffies
#endif
 
#ifndef APP_WRAPPER_FOR_msecs_to_jiffies
#define APP_WRAPPER_FOR_msecs_to_jiffies
FUNCTION_WRAPPER(msecs_to_jiffies, (unsigned const int m), {
    kern_printk("msecs_to_jiffies is invoked.\n");
    PRE_WRAPPER_FUNC(m);
    long ret = msecs_to_jiffies(m);
    POST_WRAPPER_FUNC(m);
    kern_printk("msecs_to_jiffies returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_res_counter_charge_nofail
#define APP_WRAPPER_FOR_res_counter_charge_nofail
#endif
 
#ifndef APP_WRAPPER_FOR_res_counter_charge_nofail
#define APP_WRAPPER_FOR_res_counter_charge_nofail
FUNCTION_WRAPPER(res_counter_charge_nofail, (struct res_counter *counter, unsigned long val, struct res_counter **limit_fail_at), {
    kern_printk("res_counter_charge_nofail is invoked.\n");
    PRE_WRAPPER_FUNC(counter, val, limit_fail_at);
    int ret = res_counter_charge_nofail(counter, val, limit_fail_at);
    POST_WRAPPER_FUNC(counter, val, limit_fail_at);
    kern_printk("res_counter_charge_nofail returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_cpu_offline
#define APP_WRAPPER_FOR_irq_cpu_offline
#endif
 
#ifndef APP_WRAPPER_FOR_irq_cpu_offline
#define APP_WRAPPER_FOR_irq_cpu_offline
FUNCTION_WRAPPER_VOID(irq_cpu_offline, (), {
    kern_printk("irq_cpu_offline is invoked.\n");
    PRE_WRAPPER_FUNC();
    irq_cpu_offline();
    POST_WRAPPER_FUNC();
    kern_printk("irq_cpu_offline returned.\n");
})
#endif


#ifndef KERN_ADDR_skb_copy_datagram_from_iovec
#define APP_WRAPPER_FOR_skb_copy_datagram_from_iovec
#endif
 
#ifndef APP_WRAPPER_FOR_skb_copy_datagram_from_iovec
#define APP_WRAPPER_FOR_skb_copy_datagram_from_iovec
FUNCTION_WRAPPER(skb_copy_datagram_from_iovec, (struct sk_buff *skb, int offset, const struct iovec *from, int from_offset, int len), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_copy_datagram_from_iovec is invoked.\n");
    PRE_WRAPPER_FUNC(skb, offset, from, from_offset, len);
    int ret = skb_copy_datagram_from_iovec(skb, offset, from, from_offset, len);
    POST_WRAPPER_FUNC(skb, offset, from, from_offset, len);
    kern_printk("skb_copy_datagram_from_iovec returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_strlen
#define APP_WRAPPER_FOR_strlen
#endif
 
#ifndef APP_WRAPPER_FOR_strlen
#define APP_WRAPPER_FOR_strlen
FUNCTION_WRAPPER(strlen, (const char *_arg1), {
    kern_printk("strlen is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    __kernel_size_t ret = strlen(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("strlen returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_percpu_up_read
#define APP_WRAPPER_FOR_percpu_up_read
#endif
 
#ifndef APP_WRAPPER_FOR_percpu_up_read
#define APP_WRAPPER_FOR_percpu_up_read
FUNCTION_WRAPPER_VOID(percpu_up_read, (struct percpu_rw_semaphore *_arg1), {
    kern_printk("percpu_up_read is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    percpu_up_read(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("percpu_up_read returned.\n");
})
#endif


#ifndef KERN_ADDR_fprop_local_init_percpu
#define APP_WRAPPER_FOR_fprop_local_init_percpu
#endif
 
#ifndef APP_WRAPPER_FOR_fprop_local_init_percpu
#define APP_WRAPPER_FOR_fprop_local_init_percpu
FUNCTION_WRAPPER(fprop_local_init_percpu, (struct fprop_local_percpu *pl), {
    kern_printk("fprop_local_init_percpu is invoked.\n");
    PRE_WRAPPER_FUNC(pl);
    int ret = fprop_local_init_percpu(pl);
    POST_WRAPPER_FUNC(pl);
    kern_printk("fprop_local_init_percpu returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_arch_dup_task_struct
#define APP_WRAPPER_FOR_arch_dup_task_struct
#endif
 
#ifndef APP_WRAPPER_FOR_arch_dup_task_struct
#define APP_WRAPPER_FOR_arch_dup_task_struct
FUNCTION_WRAPPER(arch_dup_task_struct, (struct task_struct *dst, struct task_struct *src), {
    WRAP_RECURSIVE(dst);
    TRACES_IF_WATCHPOINT(dst);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(dst)));
    WRAP_RECURSIVE(src);
    TRACES_IF_WATCHPOINT(src);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(src)));
    kern_printk("arch_dup_task_struct is invoked.\n");
    PRE_WRAPPER_FUNC(dst, src);
    int ret = arch_dup_task_struct(dst, src);
    POST_WRAPPER_FUNC(dst, src);
    kern_printk("arch_dup_task_struct returned.\n");
    TRACES_IF_WATCHPOINT(dst);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(dst)));
    TRACES_IF_WATCHPOINT(src);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(src)));
    return ret;
})
#endif


#ifndef KERN_ADDR_inode_sub_bytes
#define APP_WRAPPER_FOR_inode_sub_bytes
#endif
 
#ifndef APP_WRAPPER_FOR_inode_sub_bytes
#define APP_WRAPPER_FOR_inode_sub_bytes
FUNCTION_WRAPPER_VOID(inode_sub_bytes, (struct inode *inode, loff_t bytes), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("inode_sub_bytes is invoked.\n");
    PRE_WRAPPER_FUNC(inode, bytes);
    inode_sub_bytes(inode, bytes);
    POST_WRAPPER_FUNC(inode, bytes);
    kern_printk("inode_sub_bytes returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_acpi_load_table
#define APP_WRAPPER_FOR_acpi_load_table
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_load_table
#define APP_WRAPPER_FOR_acpi_load_table
FUNCTION_WRAPPER(acpi_load_table, (struct acpi_table_header *table), {
    kern_printk("acpi_load_table is invoked.\n");
    PRE_WRAPPER_FUNC(table);
    acpi_status ret = acpi_load_table(table);
    POST_WRAPPER_FUNC(table);
    kern_printk("acpi_load_table returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_get_net_ns_by_pid
#define APP_WRAPPER_FOR_get_net_ns_by_pid
#endif
 
#ifndef APP_WRAPPER_FOR_get_net_ns_by_pid
#define APP_WRAPPER_FOR_get_net_ns_by_pid
FUNCTION_WRAPPER(get_net_ns_by_pid, (pid_t pid), {
    kern_printk("get_net_ns_by_pid is invoked.\n");
    PRE_WRAPPER_FUNC(pid);
    struct net *ret = get_net_ns_by_pid(pid);
    POST_WRAPPER_FUNC(pid);
    kern_printk("get_net_ns_by_pid returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_scan_single_device
#define APP_WRAPPER_FOR_pci_scan_single_device
#endif
 
#ifndef APP_WRAPPER_FOR_pci_scan_single_device
#define APP_WRAPPER_FOR_pci_scan_single_device
FUNCTION_WRAPPER(pci_scan_single_device, (struct pci_bus *bus, int devfn), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_scan_single_device is invoked.\n");
    PRE_WRAPPER_FUNC(bus, devfn);
    struct pci_dev *ret = pci_scan_single_device(bus, devfn);
    POST_WRAPPER_FUNC(bus, devfn);
    kern_printk("pci_scan_single_device returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_klist_add_after
#define APP_WRAPPER_FOR_klist_add_after
#endif
 
#ifndef APP_WRAPPER_FOR_klist_add_after
#define APP_WRAPPER_FOR_klist_add_after
FUNCTION_WRAPPER_VOID(klist_add_after, (struct klist_node *n, struct klist_node *pos), {
    kern_printk("klist_add_after is invoked.\n");
    PRE_WRAPPER_FUNC(n, pos);
    klist_add_after(n, pos);
    POST_WRAPPER_FUNC(n, pos);
    kern_printk("klist_add_after returned.\n");
})
#endif


#ifndef KERN_ADDR_try_to_free_mem_cgroup_pages
#define APP_WRAPPER_FOR_try_to_free_mem_cgroup_pages
#endif
 
#ifndef APP_WRAPPER_FOR_try_to_free_mem_cgroup_pages
#define APP_WRAPPER_FOR_try_to_free_mem_cgroup_pages
FUNCTION_WRAPPER(try_to_free_mem_cgroup_pages, (struct mem_cgroup *mem, gfp_t gfp_mask, bool noswap), {
    kern_printk("try_to_free_mem_cgroup_pages is invoked.\n");
    PRE_WRAPPER_FUNC(mem, gfp_mask, noswap);
    long ret = try_to_free_mem_cgroup_pages(mem, gfp_mask, noswap);
    POST_WRAPPER_FUNC(mem, gfp_mask, noswap);
    kern_printk("try_to_free_mem_cgroup_pages returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_elv_bio_merged
#define APP_WRAPPER_FOR_elv_bio_merged
#endif
 
#ifndef APP_WRAPPER_FOR_elv_bio_merged
#define APP_WRAPPER_FOR_elv_bio_merged
FUNCTION_WRAPPER_VOID(elv_bio_merged, (struct request_queue *q, struct request *_arg1, struct bio *_arg2), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("elv_bio_merged is invoked.\n");
    PRE_WRAPPER_FUNC(q, _arg1, _arg2);
    elv_bio_merged(q, _arg1, _arg2);
    POST_WRAPPER_FUNC(q, _arg1, _arg2);
    kern_printk("elv_bio_merged returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_numa_cpu_node
#define APP_WRAPPER_FOR_numa_cpu_node
#endif
 
#ifndef APP_WRAPPER_FOR_numa_cpu_node
#define APP_WRAPPER_FOR_numa_cpu_node
FUNCTION_WRAPPER(numa_cpu_node, (int cpu), {
    kern_printk("numa_cpu_node is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    int ret = numa_cpu_node(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("numa_cpu_node returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_mmap_page_range
#define APP_WRAPPER_FOR_pci_mmap_page_range
#endif
 
#ifndef APP_WRAPPER_FOR_pci_mmap_page_range
#define APP_WRAPPER_FOR_pci_mmap_page_range
FUNCTION_WRAPPER(pci_mmap_page_range, (struct pci_dev *dev, struct vm_area_struct *vma, enum pci_mmap_state mmap_state, int write_combine), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("pci_mmap_page_range is invoked.\n");
    PRE_WRAPPER_FUNC(dev, vma, mmap_state, write_combine);
    int ret = pci_mmap_page_range(dev, vma, mmap_state, write_combine);
    POST_WRAPPER_FUNC(dev, vma, mmap_state, write_combine);
    kern_printk("pci_mmap_page_range returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_iget_locked
#define APP_WRAPPER_FOR_iget_locked
#endif
 
#ifndef APP_WRAPPER_FOR_iget_locked
#define APP_WRAPPER_FOR_iget_locked
FUNCTION_WRAPPER(iget_locked, (struct super_block *_arg1, unsigned long _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("iget_locked is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct inode *ret = iget_locked(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("iget_locked returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_thaw_super
#define APP_WRAPPER_FOR_thaw_super
#endif
 
#ifndef APP_WRAPPER_FOR_thaw_super
#define APP_WRAPPER_FOR_thaw_super
FUNCTION_WRAPPER(thaw_super, (struct super_block *super), {
    WRAP_RECURSIVE(super);
    TRACES_IF_WATCHPOINT(super);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(super)));
    kern_printk("thaw_super is invoked.\n");
    PRE_WRAPPER_FUNC(super);
    int ret = thaw_super(super);
    POST_WRAPPER_FUNC(super);
    kern_printk("thaw_super returned.\n");
    TRACES_IF_WATCHPOINT(super);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(super)));
    return ret;
})
#endif


#ifndef KERN_ADDR_memory_failure
#define APP_WRAPPER_FOR_memory_failure
#endif
 
#ifndef APP_WRAPPER_FOR_memory_failure
#define APP_WRAPPER_FOR_memory_failure
FUNCTION_WRAPPER(memory_failure, (unsigned long pfn, int trapno, int flags), {
    kern_printk("memory_failure is invoked.\n");
    PRE_WRAPPER_FUNC(pfn, trapno, flags);
    int ret = memory_failure(pfn, trapno, flags);
    POST_WRAPPER_FUNC(pfn, trapno, flags);
    kern_printk("memory_failure returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_do_softirq
#define APP_WRAPPER_FOR_do_softirq
#endif
 
#ifndef APP_WRAPPER_FOR_do_softirq
#define APP_WRAPPER_FOR_do_softirq
FUNCTION_WRAPPER_VOID(do_softirq, (), {
    kern_printk("do_softirq is invoked.\n");
    PRE_WRAPPER_FUNC();
    do_softirq();
    POST_WRAPPER_FUNC();
    kern_printk("do_softirq returned.\n");
})
#endif


#ifndef KERN_ADDR_dec_zone_page_state
#define APP_WRAPPER_FOR_dec_zone_page_state
#endif
 
#ifndef APP_WRAPPER_FOR_dec_zone_page_state
#define APP_WRAPPER_FOR_dec_zone_page_state
FUNCTION_WRAPPER_VOID(dec_zone_page_state, (struct page *_arg1, enum zone_stat_item _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("dec_zone_page_state is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    dec_zone_page_state(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("dec_zone_page_state returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_mmap_init
#define APP_WRAPPER_FOR_mmap_init
#endif
 
#ifndef APP_WRAPPER_FOR_mmap_init
#define APP_WRAPPER_FOR_mmap_init
FUNCTION_WRAPPER_VOID(mmap_init, (), {
    kern_printk("mmap_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    mmap_init();
    POST_WRAPPER_FUNC();
    kern_printk("mmap_init returned.\n");
})
#endif


#ifndef KERN_ADDR_sock_queue_rcv_skb
#define APP_WRAPPER_FOR_sock_queue_rcv_skb
#endif
 
#ifndef APP_WRAPPER_FOR_sock_queue_rcv_skb
#define APP_WRAPPER_FOR_sock_queue_rcv_skb
FUNCTION_WRAPPER(sock_queue_rcv_skb, (struct sock *sk, struct sk_buff *skb), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("sock_queue_rcv_skb is invoked.\n");
    PRE_WRAPPER_FUNC(sk, skb);
    int ret = sock_queue_rcv_skb(sk, skb);
    POST_WRAPPER_FUNC(sk, skb);
    kern_printk("sock_queue_rcv_skb returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_clear_revoke
#define APP_WRAPPER_FOR_jbd2_journal_clear_revoke
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_clear_revoke
#define APP_WRAPPER_FOR_jbd2_journal_clear_revoke
FUNCTION_WRAPPER_VOID(jbd2_journal_clear_revoke, (journal_t *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_clear_revoke is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    jbd2_journal_clear_revoke(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("jbd2_journal_clear_revoke returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_gnet_stats_copy_queue
#define APP_WRAPPER_FOR_gnet_stats_copy_queue
#endif
 
#ifndef APP_WRAPPER_FOR_gnet_stats_copy_queue
#define APP_WRAPPER_FOR_gnet_stats_copy_queue
FUNCTION_WRAPPER(gnet_stats_copy_queue, (struct gnet_dump *d, struct gnet_stats_queue *q), {
    WRAP_RECURSIVE(d);
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct gnet_dump)(*(TO_UNWATCHED_ADDRESS(d)));
    kern_printk("gnet_stats_copy_queue is invoked.\n");
    PRE_WRAPPER_FUNC(d, q);
    int ret = gnet_stats_copy_queue(d, q);
    POST_WRAPPER_FUNC(d, q);
    kern_printk("gnet_stats_copy_queue returned.\n");
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct gnet_dump)(*(TO_UNWATCHED_ADDRESS(d)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pnp_possible_config
#define APP_WRAPPER_FOR_pnp_possible_config
#endif
 
#ifndef APP_WRAPPER_FOR_pnp_possible_config
#define APP_WRAPPER_FOR_pnp_possible_config
FUNCTION_WRAPPER(pnp_possible_config, (struct pnp_dev *dev, int type, resource_size_t base, resource_size_t size), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pnp_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pnp_possible_config is invoked.\n");
    PRE_WRAPPER_FUNC(dev, type, base, size);
    int ret = pnp_possible_config(dev, type, base, size);
    POST_WRAPPER_FUNC(dev, type, base, size);
    kern_printk("pnp_possible_config returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pnp_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_alloc_sched_domains
#define APP_WRAPPER_FOR_alloc_sched_domains
#endif
 
#ifndef APP_WRAPPER_FOR_alloc_sched_domains
#define APP_WRAPPER_FOR_alloc_sched_domains
FUNCTION_WRAPPER(alloc_sched_domains, (unsigned int ndoms), {
    kern_printk("alloc_sched_domains is invoked.\n");
    PRE_WRAPPER_FUNC(ndoms);
    cpumask_var_t *ret = alloc_sched_domains(ndoms);
    POST_WRAPPER_FUNC(ndoms);
    kern_printk("alloc_sched_domains returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___get_user_pages
#define APP_WRAPPER_FOR___get_user_pages
#endif
 
#ifndef APP_WRAPPER_FOR___get_user_pages
#define APP_WRAPPER_FOR___get_user_pages
FUNCTION_WRAPPER(__get_user_pages, (struct task_struct *tsk, struct mm_struct *mm, unsigned long start, int len, unsigned int foll_flags, struct page **pages, struct vm_area_struct **vmas, int *nonblocking), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    WRAP_RECURSIVE(pages);
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    WRAP_RECURSIVE(vmas);
    TRACES_IF_WATCHPOINT(vmas);
    SCAN_HEAD_FUNC(struct vm_area_struct *)(*(TO_UNWATCHED_ADDRESS(vmas)));
    kern_printk("__get_user_pages is invoked.\n");
    PRE_WRAPPER_FUNC(tsk, mm, start, len, foll_flags, pages, vmas, nonblocking);
    int ret = __get_user_pages(tsk, mm, start, len, foll_flags, pages, vmas, nonblocking);
    POST_WRAPPER_FUNC(tsk, mm, start, len, foll_flags, pages, vmas, nonblocking);
    kern_printk("__get_user_pages returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    TRACES_IF_WATCHPOINT(vmas);
    SCAN_HEAD_FUNC(struct vm_area_struct *)(*(TO_UNWATCHED_ADDRESS(vmas)));
    return ret;
})
#endif


#ifndef KERN_ADDR_swapin_readahead
#define APP_WRAPPER_FOR_swapin_readahead
#endif
 
#ifndef APP_WRAPPER_FOR_swapin_readahead
#define APP_WRAPPER_FOR_swapin_readahead
FUNCTION_WRAPPER(swapin_readahead, (swp_entry_t _arg1, gfp_t _arg2, struct vm_area_struct *vma, unsigned long addr), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("swapin_readahead is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, vma, addr);
    struct page *ret = swapin_readahead(_arg1, _arg2, vma, addr);
    POST_WRAPPER_FUNC(_arg1, _arg2, vma, addr);
    kern_printk("swapin_readahead returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ktime_get_monotonic_offset
#define APP_WRAPPER_FOR_ktime_get_monotonic_offset
#endif
 
#ifndef APP_WRAPPER_FOR_ktime_get_monotonic_offset
#define APP_WRAPPER_FOR_ktime_get_monotonic_offset
FUNCTION_WRAPPER(ktime_get_monotonic_offset, (), {
    kern_printk("ktime_get_monotonic_offset is invoked.\n");
    PRE_WRAPPER_FUNC();
    ktime_t ret = ktime_get_monotonic_offset();
    POST_WRAPPER_FUNC();
    kern_printk("ktime_get_monotonic_offset returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_phy_print_status
#define APP_WRAPPER_FOR_phy_print_status
#endif
 
#ifndef APP_WRAPPER_FOR_phy_print_status
#define APP_WRAPPER_FOR_phy_print_status
FUNCTION_WRAPPER_VOID(phy_print_status, (struct phy_device *phydev), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    kern_printk("phy_print_status is invoked.\n");
    PRE_WRAPPER_FUNC(phydev);
    phy_print_status(phydev);
    POST_WRAPPER_FUNC(phydev);
    kern_printk("phy_print_status returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
})
#endif


#ifndef KERN_ADDR_cap_vm_enough_memory
#define APP_WRAPPER_FOR_cap_vm_enough_memory
#endif
 
#ifndef APP_WRAPPER_FOR_cap_vm_enough_memory
#define APP_WRAPPER_FOR_cap_vm_enough_memory
FUNCTION_WRAPPER(cap_vm_enough_memory, (struct mm_struct *mm, long pages), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    kern_printk("cap_vm_enough_memory is invoked.\n");
    PRE_WRAPPER_FUNC(mm, pages);
    int ret = cap_vm_enough_memory(mm, pages);
    POST_WRAPPER_FUNC(mm, pages);
    kern_printk("cap_vm_enough_memory returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_setup_gpe_for_wake
#define APP_WRAPPER_FOR_acpi_setup_gpe_for_wake
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_setup_gpe_for_wake
#define APP_WRAPPER_FOR_acpi_setup_gpe_for_wake
FUNCTION_WRAPPER(acpi_setup_gpe_for_wake, (acpi_handle parent_device, acpi_handle gpe_device, u32 gpe_number), {
    kern_printk("acpi_setup_gpe_for_wake is invoked.\n");
    PRE_WRAPPER_FUNC(parent_device, gpe_device, gpe_number);
    acpi_status ret = acpi_setup_gpe_for_wake(parent_device, gpe_device, gpe_number);
    POST_WRAPPER_FUNC(parent_device, gpe_device, gpe_number);
    kern_printk("acpi_setup_gpe_for_wake returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_prepare_kernel_cred
#define APP_WRAPPER_FOR_prepare_kernel_cred
#endif
 
#ifndef APP_WRAPPER_FOR_prepare_kernel_cred
#define APP_WRAPPER_FOR_prepare_kernel_cred
FUNCTION_WRAPPER(prepare_kernel_cred, (struct task_struct *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("prepare_kernel_cred is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct cred *ret = prepare_kernel_cred(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("prepare_kernel_cred returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_nanosleep
#define APP_WRAPPER_FOR_compat_sys_nanosleep
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_nanosleep
#define APP_WRAPPER_FOR_compat_sys_nanosleep
FUNCTION_WRAPPER(compat_sys_nanosleep, (struct compat_timespec *rqtp, struct compat_timespec *rmtp), {
    kern_printk("compat_sys_nanosleep is invoked.\n");
    PRE_WRAPPER_FUNC(rqtp, rmtp);
    long ret = compat_sys_nanosleep(rqtp, rmtp);
    POST_WRAPPER_FUNC(rqtp, rmtp);
    kern_printk("compat_sys_nanosleep returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_llist_add_batch
#define APP_WRAPPER_FOR_llist_add_batch
#endif
 
#ifndef APP_WRAPPER_FOR_llist_add_batch
#define APP_WRAPPER_FOR_llist_add_batch
FUNCTION_WRAPPER(llist_add_batch, (struct llist_node *new_first, struct llist_node *new_last, struct llist_head *head), {
    kern_printk("llist_add_batch is invoked.\n");
    PRE_WRAPPER_FUNC(new_first, new_last, head);
    bool ret = llist_add_batch(new_first, new_last, head);
    POST_WRAPPER_FUNC(new_first, new_last, head);
    kern_printk("llist_add_batch returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___get_vm_area_caller
#define APP_WRAPPER_FOR___get_vm_area_caller
#endif
 
#ifndef APP_WRAPPER_FOR___get_vm_area_caller
#define APP_WRAPPER_FOR___get_vm_area_caller
FUNCTION_WRAPPER(__get_vm_area_caller, (unsigned long size, unsigned long flags, unsigned long start, unsigned long end, const void *caller), {
    kern_printk("__get_vm_area_caller is invoked.\n");
    PRE_WRAPPER_FUNC(size, flags, start, end, caller);
    struct vm_struct *ret = __get_vm_area_caller(size, flags, start, end, caller);
    POST_WRAPPER_FUNC(size, flags, start, end, caller);
    kern_printk("__get_vm_area_caller returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_profile_pc
#define APP_WRAPPER_FOR_profile_pc
#endif
 
#ifndef APP_WRAPPER_FOR_profile_pc
#define APP_WRAPPER_FOR_profile_pc
FUNCTION_WRAPPER(profile_pc, (struct pt_regs *regs), {
    kern_printk("profile_pc is invoked.\n");
    PRE_WRAPPER_FUNC(regs);
    long ret = profile_pc(regs);
    POST_WRAPPER_FUNC(regs);
    kern_printk("profile_pc returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_free_resource_list
#define APP_WRAPPER_FOR_pci_free_resource_list
#endif
 
#ifndef APP_WRAPPER_FOR_pci_free_resource_list
#define APP_WRAPPER_FOR_pci_free_resource_list
FUNCTION_WRAPPER_VOID(pci_free_resource_list, (struct list_head *resources), {
    kern_printk("pci_free_resource_list is invoked.\n");
    PRE_WRAPPER_FUNC(resources);
    pci_free_resource_list(resources);
    POST_WRAPPER_FUNC(resources);
    kern_printk("pci_free_resource_list returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_os_read_port
#define APP_WRAPPER_FOR_acpi_os_read_port
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_read_port
#define APP_WRAPPER_FOR_acpi_os_read_port
FUNCTION_WRAPPER(acpi_os_read_port, (acpi_io_address address, u32 *value, u32 width), {
    kern_printk("acpi_os_read_port is invoked.\n");
    PRE_WRAPPER_FUNC(address, value, width);
    acpi_status ret = acpi_os_read_port(address, value, width);
    POST_WRAPPER_FUNC(address, value, width);
    kern_printk("acpi_os_read_port returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_kstrtoull
#define APP_WRAPPER_FOR_kstrtoull
#endif
 
#ifndef APP_WRAPPER_FOR_kstrtoull
#define APP_WRAPPER_FOR_kstrtoull
FUNCTION_WRAPPER(kstrtoull, (const char *s, unsigned int base, unsigned long long *res), {
    kern_printk("kstrtoull is invoked.\n");
    PRE_WRAPPER_FUNC(s, base, res);
    int ret = kstrtoull(s, base, res);
    POST_WRAPPER_FUNC(s, base, res);
    kern_printk("kstrtoull returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_crypto_ahash_final
#define APP_WRAPPER_FOR_crypto_ahash_final
#endif
 
#ifndef APP_WRAPPER_FOR_crypto_ahash_final
#define APP_WRAPPER_FOR_crypto_ahash_final
FUNCTION_WRAPPER(crypto_ahash_final, (struct ahash_request *req), {
    WRAP_RECURSIVE(req);
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct ahash_request)(*(TO_UNWATCHED_ADDRESS(req)));
    kern_printk("crypto_ahash_final is invoked.\n");
    PRE_WRAPPER_FUNC(req);
    int ret = crypto_ahash_final(req);
    POST_WRAPPER_FUNC(req);
    kern_printk("crypto_ahash_final returned.\n");
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct ahash_request)(*(TO_UNWATCHED_ADDRESS(req)));
    return ret;
})
#endif


#ifndef KERN_ADDR_percpu_pagelist_fraction_sysctl_handler
#define APP_WRAPPER_FOR_percpu_pagelist_fraction_sysctl_handler
#endif
 
#ifndef APP_WRAPPER_FOR_percpu_pagelist_fraction_sysctl_handler
#define APP_WRAPPER_FOR_percpu_pagelist_fraction_sysctl_handler
FUNCTION_WRAPPER(percpu_pagelist_fraction_sysctl_handler, (struct ctl_table *_arg1, int _arg2, void *_arg3, size_t *_arg4, loff_t *_arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("percpu_pagelist_fraction_sysctl_handler is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = percpu_pagelist_fraction_sysctl_handler(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("percpu_pagelist_fraction_sysctl_handler returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_check_signature
#define APP_WRAPPER_FOR_check_signature
#endif
 
#ifndef APP_WRAPPER_FOR_check_signature
#define APP_WRAPPER_FOR_check_signature
FUNCTION_WRAPPER(check_signature, (volatile const void *io_addr, unsigned const char *signature, int length), {
    kern_printk("check_signature is invoked.\n");
    PRE_WRAPPER_FUNC(io_addr, signature, length);
    int ret = check_signature(io_addr, signature, length);
    POST_WRAPPER_FUNC(io_addr, signature, length);
    kern_printk("check_signature returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_set_current_blocked
#define APP_WRAPPER_FOR_set_current_blocked
#endif
 
#ifndef APP_WRAPPER_FOR_set_current_blocked
#define APP_WRAPPER_FOR_set_current_blocked
FUNCTION_WRAPPER_VOID(set_current_blocked, (sigset_t *_arg1), {
    kern_printk("set_current_blocked is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    set_current_blocked(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("set_current_blocked returned.\n");
})
#endif


#ifndef KERN_ADDR_paravirt_patch_ident_64
#define APP_WRAPPER_FOR_paravirt_patch_ident_64
#endif
 
#ifndef APP_WRAPPER_FOR_paravirt_patch_ident_64
#define APP_WRAPPER_FOR_paravirt_patch_ident_64
FUNCTION_WRAPPER(paravirt_patch_ident_64, (void *insnbuf, unsigned int len), {
    kern_printk("paravirt_patch_ident_64 is invoked.\n");
    PRE_WRAPPER_FUNC(insnbuf, len);
    int ret = paravirt_patch_ident_64(insnbuf, len);
    POST_WRAPPER_FUNC(insnbuf, len);
    kern_printk("paravirt_patch_ident_64 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_clear_page
#define APP_WRAPPER_FOR_clear_page
#endif
 
#ifndef APP_WRAPPER_FOR_clear_page
#define APP_WRAPPER_FOR_clear_page
FUNCTION_WRAPPER_VOID(clear_page, (void *page), {
    kern_printk("clear_page is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    clear_page(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("clear_page returned.\n");
})
#endif


#ifndef KERN_ADDR_device_create_vargs
#define APP_WRAPPER_FOR_device_create_vargs
#endif
 
#ifndef APP_WRAPPER_FOR_device_create_vargs
#define APP_WRAPPER_FOR_device_create_vargs
FUNCTION_WRAPPER(device_create_vargs, (struct class_ *cls, struct device *parent, dev_t devt, void *drvdata, const char *fmt, va_list vargs), {
    WRAP_RECURSIVE(cls);
    TRACES_IF_WATCHPOINT(cls);
    SCAN_HEAD_FUNC(struct class_)(*(TO_UNWATCHED_ADDRESS(cls)));
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(parent)));
    kern_printk("device_create_vargs is invoked.\n");
    PRE_WRAPPER_FUNC(cls, parent, devt, drvdata, fmt, vargs);
    struct device *ret = device_create_vargs(cls, parent, devt, drvdata, fmt, vargs);
    POST_WRAPPER_FUNC(cls, parent, devt, drvdata, fmt, vargs);
    kern_printk("device_create_vargs returned.\n");
    TRACES_IF_WATCHPOINT(cls);
    SCAN_HEAD_FUNC(struct class_)(*(TO_UNWATCHED_ADDRESS(cls)));
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(parent)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_cleanup_journal_tail
#define APP_WRAPPER_FOR_jbd2_cleanup_journal_tail
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_cleanup_journal_tail
#define APP_WRAPPER_FOR_jbd2_cleanup_journal_tail
FUNCTION_WRAPPER(jbd2_cleanup_journal_tail, (journal_t *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_cleanup_journal_tail is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = jbd2_cleanup_journal_tail(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("jbd2_cleanup_journal_tail returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_machine_shutdown
#define APP_WRAPPER_FOR_machine_shutdown
#endif
 
#ifndef APP_WRAPPER_FOR_machine_shutdown
#define APP_WRAPPER_FOR_machine_shutdown
FUNCTION_WRAPPER_VOID(machine_shutdown, (), {
    kern_printk("machine_shutdown is invoked.\n");
    PRE_WRAPPER_FUNC();
    machine_shutdown();
    POST_WRAPPER_FUNC();
    kern_printk("machine_shutdown returned.\n");
})
#endif


#ifndef KERN_ADDR_compat_sys_keyctl
#define APP_WRAPPER_FOR_compat_sys_keyctl
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_keyctl
#define APP_WRAPPER_FOR_compat_sys_keyctl
FUNCTION_WRAPPER(compat_sys_keyctl, (u32 option, u32 arg2, u32 arg3, u32 arg4, u32 arg5), {
    kern_printk("compat_sys_keyctl is invoked.\n");
    PRE_WRAPPER_FUNC(option, arg2, arg3, arg4, arg5);
    long ret = compat_sys_keyctl(option, arg2, arg3, arg4, arg5);
    POST_WRAPPER_FUNC(option, arg2, arg3, arg4, arg5);
    kern_printk("compat_sys_keyctl returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_qdisc_get_rtab
#define APP_WRAPPER_FOR_qdisc_get_rtab
#endif
 
#ifndef APP_WRAPPER_FOR_qdisc_get_rtab
#define APP_WRAPPER_FOR_qdisc_get_rtab
FUNCTION_WRAPPER(qdisc_get_rtab, (struct tc_ratespec *r, struct nlattr *tab), {
    kern_printk("qdisc_get_rtab is invoked.\n");
    PRE_WRAPPER_FUNC(r, tab);
    struct qdisc_rate_table *ret = qdisc_get_rtab(r, tab);
    POST_WRAPPER_FUNC(r, tab);
    kern_printk("qdisc_get_rtab returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_mnt_pin
#define APP_WRAPPER_FOR_mnt_pin
#endif
 
#ifndef APP_WRAPPER_FOR_mnt_pin
#define APP_WRAPPER_FOR_mnt_pin
FUNCTION_WRAPPER_VOID(mnt_pin, (struct vfsmount *mnt), {
    WRAP_RECURSIVE(mnt);
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
    kern_printk("mnt_pin is invoked.\n");
    PRE_WRAPPER_FUNC(mnt);
    mnt_pin(mnt);
    POST_WRAPPER_FUNC(mnt);
    kern_printk("mnt_pin returned.\n");
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
})
#endif


#ifndef KERN_ADDR_page_cache_async_readahead
#define APP_WRAPPER_FOR_page_cache_async_readahead
#endif
 
#ifndef APP_WRAPPER_FOR_page_cache_async_readahead
#define APP_WRAPPER_FOR_page_cache_async_readahead
FUNCTION_WRAPPER_VOID(page_cache_async_readahead, (struct address_space *mapping, struct file_ra_state *ra, struct file *filp, struct page *pg, unsigned long offset, unsigned long size), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    WRAP_RECURSIVE(filp);
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    WRAP_RECURSIVE(pg);
    TRACES_IF_WATCHPOINT(pg);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(pg)));
    kern_printk("page_cache_async_readahead is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, ra, filp, pg, offset, size);
    page_cache_async_readahead(mapping, ra, filp, pg, offset, size);
    POST_WRAPPER_FUNC(mapping, ra, filp, pg, offset, size);
    kern_printk("page_cache_async_readahead returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    TRACES_IF_WATCHPOINT(pg);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(pg)));
})
#endif


#ifndef KERN_ADDR_pm_generic_prepare
#define APP_WRAPPER_FOR_pm_generic_prepare
#endif
 
#ifndef APP_WRAPPER_FOR_pm_generic_prepare
#define APP_WRAPPER_FOR_pm_generic_prepare
FUNCTION_WRAPPER(pm_generic_prepare, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pm_generic_prepare is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pm_generic_prepare(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pm_generic_prepare returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_x86_pci_root_bus_resources
#define APP_WRAPPER_FOR_x86_pci_root_bus_resources
#endif
 
#ifndef APP_WRAPPER_FOR_x86_pci_root_bus_resources
#define APP_WRAPPER_FOR_x86_pci_root_bus_resources
FUNCTION_WRAPPER_VOID(x86_pci_root_bus_resources, (int bus, struct list_head *resources), {
    kern_printk("x86_pci_root_bus_resources is invoked.\n");
    PRE_WRAPPER_FUNC(bus, resources);
    x86_pci_root_bus_resources(bus, resources);
    POST_WRAPPER_FUNC(bus, resources);
    kern_printk("x86_pci_root_bus_resources returned.\n");
})
#endif


#ifndef KERN_ADDR_install_thread_keyring_to_cred
#define APP_WRAPPER_FOR_install_thread_keyring_to_cred
#endif
 
#ifndef APP_WRAPPER_FOR_install_thread_keyring_to_cred
#define APP_WRAPPER_FOR_install_thread_keyring_to_cred
FUNCTION_WRAPPER(install_thread_keyring_to_cred, (struct cred *cred), {
    WRAP_RECURSIVE(cred);
    TRACES_IF_WATCHPOINT(cred);
    SCAN_HEAD_FUNC(struct cred)(*(TO_UNWATCHED_ADDRESS(cred)));
    kern_printk("install_thread_keyring_to_cred is invoked.\n");
    PRE_WRAPPER_FUNC(cred);
    int ret = install_thread_keyring_to_cred(cred);
    POST_WRAPPER_FUNC(cred);
    kern_printk("install_thread_keyring_to_cred returned.\n");
    TRACES_IF_WATCHPOINT(cred);
    SCAN_HEAD_FUNC(struct cred)(*(TO_UNWATCHED_ADDRESS(cred)));
    return ret;
})
#endif


#ifndef KERN_ADDR_fork_idle
#define APP_WRAPPER_FOR_fork_idle
#endif
 
#ifndef APP_WRAPPER_FOR_fork_idle
#define APP_WRAPPER_FOR_fork_idle
FUNCTION_WRAPPER(fork_idle, (int _arg1), {
    kern_printk("fork_idle is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct task_struct *ret = fork_idle(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("fork_idle returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_acpi_scan_root
#define APP_WRAPPER_FOR_pci_acpi_scan_root
#endif
 
#ifndef APP_WRAPPER_FOR_pci_acpi_scan_root
#define APP_WRAPPER_FOR_pci_acpi_scan_root
FUNCTION_WRAPPER(pci_acpi_scan_root, (struct acpi_pci_root *root), {
    WRAP_RECURSIVE(root);
    TRACES_IF_WATCHPOINT(root);
    SCAN_HEAD_FUNC(struct acpi_pci_root)(*(TO_UNWATCHED_ADDRESS(root)));
    kern_printk("pci_acpi_scan_root is invoked.\n");
    PRE_WRAPPER_FUNC(root);
    struct pci_bus *ret = pci_acpi_scan_root(root);
    POST_WRAPPER_FUNC(root);
    kern_printk("pci_acpi_scan_root returned.\n");
    TRACES_IF_WATCHPOINT(root);
    SCAN_HEAD_FUNC(struct acpi_pci_root)(*(TO_UNWATCHED_ADDRESS(root)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_iowrite16_rep
#define APP_WRAPPER_FOR_iowrite16_rep
#endif
 
#ifndef APP_WRAPPER_FOR_iowrite16_rep
#define APP_WRAPPER_FOR_iowrite16_rep
FUNCTION_WRAPPER_VOID(iowrite16_rep, (void *port, const void *buf, unsigned long count), {
    kern_printk("iowrite16_rep is invoked.\n");
    PRE_WRAPPER_FUNC(port, buf, count);
    iowrite16_rep(port, buf, count);
    POST_WRAPPER_FUNC(port, buf, count);
    kern_printk("iowrite16_rep returned.\n");
})
#endif


#ifndef KERN_ADDR_pgtable_trans_huge_withdraw
#define APP_WRAPPER_FOR_pgtable_trans_huge_withdraw
#endif
 
#ifndef APP_WRAPPER_FOR_pgtable_trans_huge_withdraw
#define APP_WRAPPER_FOR_pgtable_trans_huge_withdraw
FUNCTION_WRAPPER(pgtable_trans_huge_withdraw, (struct mm_struct *mm), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    kern_printk("pgtable_trans_huge_withdraw is invoked.\n");
    PRE_WRAPPER_FUNC(mm);
    pgtable_t ret = pgtable_trans_huge_withdraw(mm);
    POST_WRAPPER_FUNC(mm);
    kern_printk("pgtable_trans_huge_withdraw returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_elv_unregister_queue
#define APP_WRAPPER_FOR_elv_unregister_queue
#endif
 
#ifndef APP_WRAPPER_FOR_elv_unregister_queue
#define APP_WRAPPER_FOR_elv_unregister_queue
FUNCTION_WRAPPER_VOID(elv_unregister_queue, (struct request_queue *q), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    kern_printk("elv_unregister_queue is invoked.\n");
    PRE_WRAPPER_FUNC(q);
    elv_unregister_queue(q);
    POST_WRAPPER_FUNC(q);
    kern_printk("elv_unregister_queue returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
})
#endif


#ifndef KERN_ADDR_device_set_wakeup_enable
#define APP_WRAPPER_FOR_device_set_wakeup_enable
#endif
 
#ifndef APP_WRAPPER_FOR_device_set_wakeup_enable
#define APP_WRAPPER_FOR_device_set_wakeup_enable
FUNCTION_WRAPPER(device_set_wakeup_enable, (struct device *dev, bool enable), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("device_set_wakeup_enable is invoked.\n");
    PRE_WRAPPER_FUNC(dev, enable);
    int ret = device_set_wakeup_enable(dev, enable);
    POST_WRAPPER_FUNC(dev, enable);
    kern_printk("device_set_wakeup_enable returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_make_request
#define APP_WRAPPER_FOR_blk_make_request
#endif
 
#ifndef APP_WRAPPER_FOR_blk_make_request
#define APP_WRAPPER_FOR_blk_make_request
FUNCTION_WRAPPER(blk_make_request, (struct request_queue *_arg1, struct bio *_arg2, gfp_t _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("blk_make_request is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    struct request *ret = blk_make_request(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("blk_make_request returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_mmap_min_addr_handler
#define APP_WRAPPER_FOR_mmap_min_addr_handler
#endif
 
#ifndef APP_WRAPPER_FOR_mmap_min_addr_handler
#define APP_WRAPPER_FOR_mmap_min_addr_handler
FUNCTION_WRAPPER(mmap_min_addr_handler, (struct ctl_table *table, int write, void *buffer, size_t *lenp, loff_t *ppos), {
    WRAP_RECURSIVE(table);
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    kern_printk("mmap_min_addr_handler is invoked.\n");
    PRE_WRAPPER_FUNC(table, write, buffer, lenp, ppos);
    int ret = mmap_min_addr_handler(table, write, buffer, lenp, ppos);
    POST_WRAPPER_FUNC(table, write, buffer, lenp, ppos);
    kern_printk("mmap_min_addr_handler returned.\n");
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_log_wait_commit
#define APP_WRAPPER_FOR_jbd2_log_wait_commit
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_log_wait_commit
#define APP_WRAPPER_FOR_jbd2_log_wait_commit
FUNCTION_WRAPPER(jbd2_log_wait_commit, (journal_t *journal, tid_t tid), {
    WRAP_RECURSIVE(journal);
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    kern_printk("jbd2_log_wait_commit is invoked.\n");
    PRE_WRAPPER_FUNC(journal, tid);
    int ret = jbd2_log_wait_commit(journal, tid);
    POST_WRAPPER_FUNC(journal, tid);
    kern_printk("jbd2_log_wait_commit returned.\n");
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    return ret;
})
#endif


#ifndef KERN_ADDR_register_netdev
#define APP_WRAPPER_FOR_register_netdev
#endif
 
#ifndef APP_WRAPPER_FOR_register_netdev
#define APP_WRAPPER_FOR_register_netdev
FUNCTION_WRAPPER(register_netdev, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("register_netdev is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = register_netdev(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("register_netdev returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_inode_init_owner
#define APP_WRAPPER_FOR_inode_init_owner
#endif
 
#ifndef APP_WRAPPER_FOR_inode_init_owner
#define APP_WRAPPER_FOR_inode_init_owner
FUNCTION_WRAPPER_VOID(inode_init_owner, (struct inode *inode, const struct inode *dir, umode_t mode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    WRAP_RECURSIVE(dir);
    TRACES_IF_WATCHPOINT(dir);
    SCAN_HEAD_FUNC(const struct inode)(*(TO_UNWATCHED_ADDRESS(dir)));
    kern_printk("inode_init_owner is invoked.\n");
    PRE_WRAPPER_FUNC(inode, dir, mode);
    inode_init_owner(inode, dir, mode);
    POST_WRAPPER_FUNC(inode, dir, mode);
    kern_printk("inode_init_owner returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    TRACES_IF_WATCHPOINT(dir);
    SCAN_HEAD_FUNC(const struct inode)(*(TO_UNWATCHED_ADDRESS(dir)));
})
#endif


#ifndef KERN_ADDR_blk_bio_map_sg
#define APP_WRAPPER_FOR_blk_bio_map_sg
#endif
 
#ifndef APP_WRAPPER_FOR_blk_bio_map_sg
#define APP_WRAPPER_FOR_blk_bio_map_sg
FUNCTION_WRAPPER(blk_bio_map_sg, (struct request_queue *q, struct bio *bio, struct scatterlist *sglist), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    WRAP_RECURSIVE(bio);
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
    kern_printk("blk_bio_map_sg is invoked.\n");
    PRE_WRAPPER_FUNC(q, bio, sglist);
    int ret = blk_bio_map_sg(q, bio, sglist);
    POST_WRAPPER_FUNC(q, bio, sglist);
    kern_printk("blk_bio_map_sg returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_listxattr
#define APP_WRAPPER_FOR_generic_listxattr
#endif
 
#ifndef APP_WRAPPER_FOR_generic_listxattr
#define APP_WRAPPER_FOR_generic_listxattr
FUNCTION_WRAPPER(generic_listxattr, (struct dentry *dentry, char *buffer, size_t buffer_size), {
    WRAP_RECURSIVE(dentry);
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    kern_printk("generic_listxattr is invoked.\n");
    PRE_WRAPPER_FUNC(dentry, buffer, buffer_size);
    ssize_t ret = generic_listxattr(dentry, buffer, buffer_size);
    POST_WRAPPER_FUNC(dentry, buffer, buffer_size);
    kern_printk("generic_listxattr returned.\n");
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    return ret;
})
#endif


#ifndef KERN_ADDR_free_pages
#define APP_WRAPPER_FOR_free_pages
#endif
 
#ifndef APP_WRAPPER_FOR_free_pages
#define APP_WRAPPER_FOR_free_pages
FUNCTION_WRAPPER_VOID(free_pages, (unsigned long addr, unsigned int order), {
    kern_printk("free_pages is invoked.\n");
    PRE_WRAPPER_FUNC(addr, order);
    free_pages(addr, order);
    POST_WRAPPER_FUNC(addr, order);
    kern_printk("free_pages returned.\n");
})
#endif


#ifndef KERN_ADDR_memchr_inv
#define APP_WRAPPER_FOR_memchr_inv
#endif
 
#ifndef APP_WRAPPER_FOR_memchr_inv
#define APP_WRAPPER_FOR_memchr_inv
FUNCTION_WRAPPER(memchr_inv, (const void *s, int c, size_t n), {
    kern_printk("memchr_inv is invoked.\n");
    PRE_WRAPPER_FUNC(s, c, n);
    void *ret = memchr_inv(s, c, n);
    POST_WRAPPER_FUNC(s, c, n);
    kern_printk("memchr_inv returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_proc_alloc_inum
#define APP_WRAPPER_FOR_proc_alloc_inum
#endif
 
#ifndef APP_WRAPPER_FOR_proc_alloc_inum
#define APP_WRAPPER_FOR_proc_alloc_inum
FUNCTION_WRAPPER(proc_alloc_inum, (unsigned int *pino), {
    kern_printk("proc_alloc_inum is invoked.\n");
    PRE_WRAPPER_FUNC(pino);
    int ret = proc_alloc_inum(pino);
    POST_WRAPPER_FUNC(pino);
    kern_printk("proc_alloc_inum returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_kernel_connect
#define APP_WRAPPER_FOR_kernel_connect
#endif
 
#ifndef APP_WRAPPER_FOR_kernel_connect
#define APP_WRAPPER_FOR_kernel_connect
FUNCTION_WRAPPER(kernel_connect, (struct socket *sock, struct sockaddr *addr, int addrlen, int flags), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    kern_printk("kernel_connect is invoked.\n");
    PRE_WRAPPER_FUNC(sock, addr, addrlen, flags);
    int ret = kernel_connect(sock, addr, addrlen, flags);
    POST_WRAPPER_FUNC(sock, addr, addrlen, flags);
    kern_printk("kernel_connect returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    return ret;
})
#endif


#ifndef KERN_ADDR_netdev_set_master
#define APP_WRAPPER_FOR_netdev_set_master
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_set_master
#define APP_WRAPPER_FOR_netdev_set_master
FUNCTION_WRAPPER(netdev_set_master, (struct net_device *dev, struct net_device *master), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(master);
    TRACES_IF_WATCHPOINT(master);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(master)));
    kern_printk("netdev_set_master is invoked.\n");
    PRE_WRAPPER_FUNC(dev, master);
    int ret = netdev_set_master(dev, master);
    POST_WRAPPER_FUNC(dev, master);
    kern_printk("netdev_set_master returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(master);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(master)));
    return ret;
})
#endif


#ifndef KERN_ADDR_heap_free
#define APP_WRAPPER_FOR_heap_free
#endif
 
#ifndef APP_WRAPPER_FOR_heap_free
#define APP_WRAPPER_FOR_heap_free
FUNCTION_WRAPPER_VOID(heap_free, (struct ptr_heap *heap), {
    WRAP_RECURSIVE(heap);
    TRACES_IF_WATCHPOINT(heap);
    SCAN_HEAD_FUNC(struct ptr_heap)(*(TO_UNWATCHED_ADDRESS(heap)));
    kern_printk("heap_free is invoked.\n");
    PRE_WRAPPER_FUNC(heap);
    heap_free(heap);
    POST_WRAPPER_FUNC(heap);
    kern_printk("heap_free returned.\n");
    TRACES_IF_WATCHPOINT(heap);
    SCAN_HEAD_FUNC(struct ptr_heap)(*(TO_UNWATCHED_ADDRESS(heap)));
})
#endif


#ifndef KERN_ADDR_dma_unpin_iovec_pages
#define APP_WRAPPER_FOR_dma_unpin_iovec_pages
#endif
 
#ifndef APP_WRAPPER_FOR_dma_unpin_iovec_pages
#define APP_WRAPPER_FOR_dma_unpin_iovec_pages
FUNCTION_WRAPPER_VOID(dma_unpin_iovec_pages, (struct dma_pinned_list *pinned_list), {
    kern_printk("dma_unpin_iovec_pages is invoked.\n");
    PRE_WRAPPER_FUNC(pinned_list);
    dma_unpin_iovec_pages(pinned_list);
    POST_WRAPPER_FUNC(pinned_list);
    kern_printk("dma_unpin_iovec_pages returned.\n");
})
#endif


#ifndef KERN_ADDR_sync_inode
#define APP_WRAPPER_FOR_sync_inode
#endif
 
#ifndef APP_WRAPPER_FOR_sync_inode
#define APP_WRAPPER_FOR_sync_inode
FUNCTION_WRAPPER(sync_inode, (struct inode *inode, struct writeback_control *wbc), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("sync_inode is invoked.\n");
    PRE_WRAPPER_FUNC(inode, wbc);
    int ret = sync_inode(inode, wbc);
    POST_WRAPPER_FUNC(inode, wbc);
    kern_printk("sync_inode returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sff_data_xfer
#define APP_WRAPPER_FOR_ata_sff_data_xfer
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_data_xfer
#define APP_WRAPPER_FOR_ata_sff_data_xfer
FUNCTION_WRAPPER(ata_sff_data_xfer, (struct ata_device *dev, unsigned char *buf, unsigned int buflen, int rw), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct ata_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("ata_sff_data_xfer is invoked.\n");
    PRE_WRAPPER_FUNC(dev, buf, buflen, rw);
    int ret = ata_sff_data_xfer(dev, buf, buflen, rw);
    POST_WRAPPER_FUNC(dev, buf, buflen, rw);
    kern_printk("ata_sff_data_xfer returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct ata_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kern_unmount
#define APP_WRAPPER_FOR_kern_unmount
#endif
 
#ifndef APP_WRAPPER_FOR_kern_unmount
#define APP_WRAPPER_FOR_kern_unmount
FUNCTION_WRAPPER_VOID(kern_unmount, (struct vfsmount *mnt), {
    WRAP_RECURSIVE(mnt);
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
    kern_printk("kern_unmount is invoked.\n");
    PRE_WRAPPER_FUNC(mnt);
    kern_unmount(mnt);
    POST_WRAPPER_FUNC(mnt);
    kern_printk("kern_unmount returned.\n");
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
})
#endif


#ifndef KERN_ADDR_driver_create_file
#define APP_WRAPPER_FOR_driver_create_file
#endif
 
#ifndef APP_WRAPPER_FOR_driver_create_file
#define APP_WRAPPER_FOR_driver_create_file
FUNCTION_WRAPPER(driver_create_file, (struct device_driver *driver, const struct driver_attribute *attr), {
    WRAP_RECURSIVE(driver);
    TRACES_IF_WATCHPOINT(driver);
    SCAN_HEAD_FUNC(struct device_driver)(*(TO_UNWATCHED_ADDRESS(driver)));
    WRAP_RECURSIVE(attr);
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(const struct driver_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    kern_printk("driver_create_file is invoked.\n");
    PRE_WRAPPER_FUNC(driver, attr);
    int ret = driver_create_file(driver, attr);
    POST_WRAPPER_FUNC(driver, attr);
    kern_printk("driver_create_file returned.\n");
    TRACES_IF_WATCHPOINT(driver);
    SCAN_HEAD_FUNC(struct device_driver)(*(TO_UNWATCHED_ADDRESS(driver)));
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(const struct driver_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    return ret;
})
#endif


#ifndef KERN_ADDR_init_timer_key
#define APP_WRAPPER_FOR_init_timer_key
#endif
 
#ifndef APP_WRAPPER_FOR_init_timer_key
#define APP_WRAPPER_FOR_init_timer_key
FUNCTION_WRAPPER_VOID(init_timer_key, (struct timer_list *timer, unsigned int flags, const char *name, struct lock_class_key *key), {
    WRAP_RECURSIVE(timer);
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(timer)));
    kern_printk("init_timer_key is invoked.\n");
    PRE_WRAPPER_FUNC(timer, flags, name, key);
    init_timer_key(timer, flags, name, key);
    POST_WRAPPER_FUNC(timer, flags, name, key);
    kern_printk("init_timer_key returned.\n");
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(timer)));
})
#endif


#ifndef KERN_ADDR_vlan_untag
#define APP_WRAPPER_FOR_vlan_untag
#endif
 
#ifndef APP_WRAPPER_FOR_vlan_untag
#define APP_WRAPPER_FOR_vlan_untag
FUNCTION_WRAPPER(vlan_untag, (struct sk_buff *skb), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("vlan_untag is invoked.\n");
    PRE_WRAPPER_FUNC(skb);
    struct sk_buff *ret = vlan_untag(skb);
    POST_WRAPPER_FUNC(skb);
    kern_printk("vlan_untag returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_name_to_dev_t
#define APP_WRAPPER_FOR_name_to_dev_t
#endif
 
#ifndef APP_WRAPPER_FOR_name_to_dev_t
#define APP_WRAPPER_FOR_name_to_dev_t
FUNCTION_WRAPPER(name_to_dev_t, (char *name), {
    kern_printk("name_to_dev_t is invoked.\n");
    PRE_WRAPPER_FUNC(name);
    dev_t ret = name_to_dev_t(name);
    POST_WRAPPER_FUNC(name);
    kern_printk("name_to_dev_t returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_inc_zone_page_state
#define APP_WRAPPER_FOR_inc_zone_page_state
#endif
 
#ifndef APP_WRAPPER_FOR_inc_zone_page_state
#define APP_WRAPPER_FOR_inc_zone_page_state
FUNCTION_WRAPPER_VOID(inc_zone_page_state, (struct page *_arg1, enum zone_stat_item _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("inc_zone_page_state is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    inc_zone_page_state(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("inc_zone_page_state returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_pm_qos_update_request
#define APP_WRAPPER_FOR_pm_qos_update_request
#endif
 
#ifndef APP_WRAPPER_FOR_pm_qos_update_request
#define APP_WRAPPER_FOR_pm_qos_update_request
FUNCTION_WRAPPER_VOID(pm_qos_update_request, (struct pm_qos_request *req, s32 new_value), {
    WRAP_RECURSIVE(req);
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct pm_qos_request)(*(TO_UNWATCHED_ADDRESS(req)));
    kern_printk("pm_qos_update_request is invoked.\n");
    PRE_WRAPPER_FUNC(req, new_value);
    pm_qos_update_request(req, new_value);
    POST_WRAPPER_FUNC(req, new_value);
    kern_printk("pm_qos_update_request returned.\n");
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct pm_qos_request)(*(TO_UNWATCHED_ADDRESS(req)));
})
#endif


#ifndef KERN_ADDR_jbd2_journal_recover
#define APP_WRAPPER_FOR_jbd2_journal_recover
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_recover
#define APP_WRAPPER_FOR_jbd2_journal_recover
FUNCTION_WRAPPER(jbd2_journal_recover, (journal_t *journal), {
    WRAP_RECURSIVE(journal);
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    kern_printk("jbd2_journal_recover is invoked.\n");
    PRE_WRAPPER_FUNC(journal);
    int ret = jbd2_journal_recover(journal);
    POST_WRAPPER_FUNC(journal);
    kern_printk("jbd2_journal_recover returned.\n");
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    return ret;
})
#endif


#ifndef KERN_ADDR_set_page_dirty_lock
#define APP_WRAPPER_FOR_set_page_dirty_lock
#endif
 
#ifndef APP_WRAPPER_FOR_set_page_dirty_lock
#define APP_WRAPPER_FOR_set_page_dirty_lock
FUNCTION_WRAPPER(set_page_dirty_lock, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("set_page_dirty_lock is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    int ret = set_page_dirty_lock(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("set_page_dirty_lock returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_lru_add_page_tail
#define APP_WRAPPER_FOR_lru_add_page_tail
#endif
 
#ifndef APP_WRAPPER_FOR_lru_add_page_tail
#define APP_WRAPPER_FOR_lru_add_page_tail
FUNCTION_WRAPPER_VOID(lru_add_page_tail, (struct page *page, struct page *page_tail, struct lruvec *lruvec), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    WRAP_RECURSIVE(page_tail);
    TRACES_IF_WATCHPOINT(page_tail);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page_tail)));
    kern_printk("lru_add_page_tail is invoked.\n");
    PRE_WRAPPER_FUNC(page, page_tail, lruvec);
    lru_add_page_tail(page, page_tail, lruvec);
    POST_WRAPPER_FUNC(page, page_tail, lruvec);
    kern_printk("lru_add_page_tail returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    TRACES_IF_WATCHPOINT(page_tail);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page_tail)));
})
#endif


#ifndef KERN_ADDR_posix_acl_alloc
#define APP_WRAPPER_FOR_posix_acl_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_posix_acl_alloc
#define APP_WRAPPER_FOR_posix_acl_alloc
FUNCTION_WRAPPER(posix_acl_alloc, (int _arg1, gfp_t _arg2), {
    kern_printk("posix_acl_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct posix_acl *ret = posix_acl_alloc(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("posix_acl_alloc returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR__raw_spin_unlock_irq
#define APP_WRAPPER_FOR__raw_spin_unlock_irq
#endif
 
#ifndef APP_WRAPPER_FOR__raw_spin_unlock_irq
#define APP_WRAPPER_FOR__raw_spin_unlock_irq
FUNCTION_WRAPPER_VOID(_raw_spin_unlock_irq, (raw_spinlock_t *lock), {
    kern_printk("_raw_spin_unlock_irq is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    _raw_spin_unlock_irq(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("_raw_spin_unlock_irq returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_get_device
#define APP_WRAPPER_FOR_pci_get_device
#endif
 
#ifndef APP_WRAPPER_FOR_pci_get_device
#define APP_WRAPPER_FOR_pci_get_device
FUNCTION_WRAPPER(pci_get_device, (unsigned int vendor, unsigned int device, struct pci_dev *from), {
    WRAP_RECURSIVE(from);
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(from)));
    kern_printk("pci_get_device is invoked.\n");
    PRE_WRAPPER_FUNC(vendor, device, from);
    struct pci_dev *ret = pci_get_device(vendor, device, from);
    POST_WRAPPER_FUNC(vendor, device, from);
    kern_printk("pci_get_device returned.\n");
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(from)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_create_empty_buffers
#define APP_WRAPPER_FOR_create_empty_buffers
#endif
 
#ifndef APP_WRAPPER_FOR_create_empty_buffers
#define APP_WRAPPER_FOR_create_empty_buffers
FUNCTION_WRAPPER_VOID(create_empty_buffers, (struct page *_arg1, unsigned long _arg2, unsigned long b_state), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("create_empty_buffers is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, b_state);
    create_empty_buffers(_arg1, _arg2, b_state);
    POST_WRAPPER_FUNC(_arg1, _arg2, b_state);
    kern_printk("create_empty_buffers returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_dev_remove_pack
#define APP_WRAPPER_FOR_dev_remove_pack
#endif
 
#ifndef APP_WRAPPER_FOR_dev_remove_pack
#define APP_WRAPPER_FOR_dev_remove_pack
FUNCTION_WRAPPER_VOID(dev_remove_pack, (struct packet_type *pt), {
    WRAP_RECURSIVE(pt);
    TRACES_IF_WATCHPOINT(pt);
    SCAN_HEAD_FUNC(struct packet_type)(*(TO_UNWATCHED_ADDRESS(pt)));
    kern_printk("dev_remove_pack is invoked.\n");
    PRE_WRAPPER_FUNC(pt);
    dev_remove_pack(pt);
    POST_WRAPPER_FUNC(pt);
    kern_printk("dev_remove_pack returned.\n");
    TRACES_IF_WATCHPOINT(pt);
    SCAN_HEAD_FUNC(struct packet_type)(*(TO_UNWATCHED_ADDRESS(pt)));
})
#endif


#ifndef KERN_ADDR_oops_enter
#define APP_WRAPPER_FOR_oops_enter
#endif
 
#ifndef APP_WRAPPER_FOR_oops_enter
#define APP_WRAPPER_FOR_oops_enter
FUNCTION_WRAPPER_VOID(oops_enter, (), {
    kern_printk("oops_enter is invoked.\n");
    PRE_WRAPPER_FUNC();
    oops_enter();
    POST_WRAPPER_FUNC();
    kern_printk("oops_enter returned.\n");
})
#endif


#ifndef KERN_ADDR_root_device_unregister
#define APP_WRAPPER_FOR_root_device_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_root_device_unregister
#define APP_WRAPPER_FOR_root_device_unregister
FUNCTION_WRAPPER_VOID(root_device_unregister, (struct device *root), {
    WRAP_RECURSIVE(root);
    TRACES_IF_WATCHPOINT(root);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(root)));
    kern_printk("root_device_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(root);
    root_device_unregister(root);
    POST_WRAPPER_FUNC(root);
    kern_printk("root_device_unregister returned.\n");
    TRACES_IF_WATCHPOINT(root);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(root)));
})
#endif


#ifndef KERN_ADDR_class_compat_remove_link
#define APP_WRAPPER_FOR_class_compat_remove_link
#endif
 
#ifndef APP_WRAPPER_FOR_class_compat_remove_link
#define APP_WRAPPER_FOR_class_compat_remove_link
FUNCTION_WRAPPER_VOID(class_compat_remove_link, (struct class_compat *cls, struct device *dev, struct device *device_link), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(device_link);
    TRACES_IF_WATCHPOINT(device_link);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(device_link)));
    kern_printk("class_compat_remove_link is invoked.\n");
    PRE_WRAPPER_FUNC(cls, dev, device_link);
    class_compat_remove_link(cls, dev, device_link);
    POST_WRAPPER_FUNC(cls, dev, device_link);
    kern_printk("class_compat_remove_link returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(device_link);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(device_link)));
})
#endif


#ifndef KERN_ADDR_allow_signal
#define APP_WRAPPER_FOR_allow_signal
#endif
 
#ifndef APP_WRAPPER_FOR_allow_signal
#define APP_WRAPPER_FOR_allow_signal
FUNCTION_WRAPPER(allow_signal, (int _arg1), {
    kern_printk("allow_signal is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = allow_signal(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("allow_signal returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_get_event_resources
#define APP_WRAPPER_FOR_acpi_get_event_resources
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_event_resources
#define APP_WRAPPER_FOR_acpi_get_event_resources
FUNCTION_WRAPPER(acpi_get_event_resources, (acpi_handle device_handle, struct acpi_buffer *ret_buffer), {
    kern_printk("acpi_get_event_resources is invoked.\n");
    PRE_WRAPPER_FUNC(device_handle, ret_buffer);
    acpi_status ret = acpi_get_event_resources(device_handle, ret_buffer);
    POST_WRAPPER_FUNC(device_handle, ret_buffer);
    kern_printk("acpi_get_event_resources returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_iov_iter_advance
#define APP_WRAPPER_FOR_iov_iter_advance
#endif
 
#ifndef APP_WRAPPER_FOR_iov_iter_advance
#define APP_WRAPPER_FOR_iov_iter_advance
FUNCTION_WRAPPER_VOID(iov_iter_advance, (struct iov_iter *i, size_t bytes), {
    kern_printk("iov_iter_advance is invoked.\n");
    PRE_WRAPPER_FUNC(i, bytes);
    iov_iter_advance(i, bytes);
    POST_WRAPPER_FUNC(i, bytes);
    kern_printk("iov_iter_advance returned.\n");
})
#endif


#ifndef KERN_ADDR_dynamic_irq_cleanup
#define APP_WRAPPER_FOR_dynamic_irq_cleanup
#endif
 
#ifndef APP_WRAPPER_FOR_dynamic_irq_cleanup
#define APP_WRAPPER_FOR_dynamic_irq_cleanup
FUNCTION_WRAPPER_VOID(dynamic_irq_cleanup, (unsigned int irq), {
    kern_printk("dynamic_irq_cleanup is invoked.\n");
    PRE_WRAPPER_FUNC(irq);
    dynamic_irq_cleanup(irq);
    POST_WRAPPER_FUNC(irq);
    kern_printk("dynamic_irq_cleanup returned.\n");
})
#endif


#ifndef KERN_ADDR_ref_module
#define APP_WRAPPER_FOR_ref_module
#endif
 
#ifndef APP_WRAPPER_FOR_ref_module
#define APP_WRAPPER_FOR_ref_module
FUNCTION_WRAPPER(ref_module, (struct module *a, struct module *b), {
    WRAP_RECURSIVE(a);
    TRACES_IF_WATCHPOINT(a);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(a)));
    WRAP_RECURSIVE(b);
    TRACES_IF_WATCHPOINT(b);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(b)));
    kern_printk("ref_module is invoked.\n");
    PRE_WRAPPER_FUNC(a, b);
    int ret = ref_module(a, b);
    POST_WRAPPER_FUNC(a, b);
    kern_printk("ref_module returned.\n");
    TRACES_IF_WATCHPOINT(a);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(a)));
    TRACES_IF_WATCHPOINT(b);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(b)));
    return ret;
})
#endif


#ifndef KERN_ADDR_klist_remove
#define APP_WRAPPER_FOR_klist_remove
#endif
 
#ifndef APP_WRAPPER_FOR_klist_remove
#define APP_WRAPPER_FOR_klist_remove
FUNCTION_WRAPPER_VOID(klist_remove, (struct klist_node *n), {
    kern_printk("klist_remove is invoked.\n");
    PRE_WRAPPER_FUNC(n);
    klist_remove(n);
    POST_WRAPPER_FUNC(n);
    kern_printk("klist_remove returned.\n");
})
#endif


#ifndef KERN_ADDR_reqsk_queue_destroy
#define APP_WRAPPER_FOR_reqsk_queue_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_reqsk_queue_destroy
#define APP_WRAPPER_FOR_reqsk_queue_destroy
FUNCTION_WRAPPER_VOID(reqsk_queue_destroy, (struct request_sock_queue *queue), {
    WRAP_RECURSIVE(queue);
    TRACES_IF_WATCHPOINT(queue);
    SCAN_HEAD_FUNC(struct request_sock_queue)(*(TO_UNWATCHED_ADDRESS(queue)));
    kern_printk("reqsk_queue_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(queue);
    reqsk_queue_destroy(queue);
    POST_WRAPPER_FUNC(queue);
    kern_printk("reqsk_queue_destroy returned.\n");
    TRACES_IF_WATCHPOINT(queue);
    SCAN_HEAD_FUNC(struct request_sock_queue)(*(TO_UNWATCHED_ADDRESS(queue)));
})
#endif


#ifndef KERN_ADDR_ata_pci_device_do_resume
#define APP_WRAPPER_FOR_ata_pci_device_do_resume
#endif
 
#ifndef APP_WRAPPER_FOR_ata_pci_device_do_resume
#define APP_WRAPPER_FOR_ata_pci_device_do_resume
FUNCTION_WRAPPER(ata_pci_device_do_resume, (struct pci_dev *pdev), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("ata_pci_device_do_resume is invoked.\n");
    PRE_WRAPPER_FUNC(pdev);
    int ret = ata_pci_device_do_resume(pdev);
    POST_WRAPPER_FUNC(pdev);
    kern_printk("ata_pci_device_do_resume returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sk_stream_wait_memory
#define APP_WRAPPER_FOR_sk_stream_wait_memory
#endif
 
#ifndef APP_WRAPPER_FOR_sk_stream_wait_memory
#define APP_WRAPPER_FOR_sk_stream_wait_memory
FUNCTION_WRAPPER(sk_stream_wait_memory, (struct sock *sk, long *timeo_p), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sk_stream_wait_memory is invoked.\n");
    PRE_WRAPPER_FUNC(sk, timeo_p);
    int ret = sk_stream_wait_memory(sk, timeo_p);
    POST_WRAPPER_FUNC(sk, timeo_p);
    kern_printk("sk_stream_wait_memory returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kstrtou16_from_user
#define APP_WRAPPER_FOR_kstrtou16_from_user
#endif
 
#ifndef APP_WRAPPER_FOR_kstrtou16_from_user
#define APP_WRAPPER_FOR_kstrtou16_from_user
FUNCTION_WRAPPER(kstrtou16_from_user, (const char *s, size_t count, unsigned int base, u16 *res), {
    kern_printk("kstrtou16_from_user is invoked.\n");
    PRE_WRAPPER_FUNC(s, count, base, res);
    int ret = kstrtou16_from_user(s, count, base, res);
    POST_WRAPPER_FUNC(s, count, base, res);
    kern_printk("kstrtou16_from_user returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_bdev_stack_limits
#define APP_WRAPPER_FOR_bdev_stack_limits
#endif
 
#ifndef APP_WRAPPER_FOR_bdev_stack_limits
#define APP_WRAPPER_FOR_bdev_stack_limits
FUNCTION_WRAPPER(bdev_stack_limits, (struct queue_limits *t, struct block_device *bdev, sector_t offset), {
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    kern_printk("bdev_stack_limits is invoked.\n");
    PRE_WRAPPER_FUNC(t, bdev, offset);
    int ret = bdev_stack_limits(t, bdev, offset);
    POST_WRAPPER_FUNC(t, bdev, offset);
    kern_printk("bdev_stack_limits returned.\n");
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_netdev_boot_setup_check
#define APP_WRAPPER_FOR_netdev_boot_setup_check
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_boot_setup_check
#define APP_WRAPPER_FOR_netdev_boot_setup_check
FUNCTION_WRAPPER(netdev_boot_setup_check, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("netdev_boot_setup_check is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = netdev_boot_setup_check(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("netdev_boot_setup_check returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_device_name
#define APP_WRAPPER_FOR_dm_device_name
#endif
 
#ifndef APP_WRAPPER_FOR_dm_device_name
#define APP_WRAPPER_FOR_dm_device_name
FUNCTION_WRAPPER(dm_device_name, (struct mapped_device *md), {
    kern_printk("dm_device_name is invoked.\n");
    PRE_WRAPPER_FUNC(md);
    const char *ret = dm_device_name(md);
    POST_WRAPPER_FUNC(md);
    kern_printk("dm_device_name returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sanitize_e820_map
#define APP_WRAPPER_FOR_sanitize_e820_map
#endif
 
#ifndef APP_WRAPPER_FOR_sanitize_e820_map
#define APP_WRAPPER_FOR_sanitize_e820_map
FUNCTION_WRAPPER(sanitize_e820_map, (struct e820entry *biosmap, int max_nr_map, u32 *pnr_map), {
    kern_printk("sanitize_e820_map is invoked.\n");
    PRE_WRAPPER_FUNC(biosmap, max_nr_map, pnr_map);
    int ret = sanitize_e820_map(biosmap, max_nr_map, pnr_map);
    POST_WRAPPER_FUNC(biosmap, max_nr_map, pnr_map);
    kern_printk("sanitize_e820_map returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_trans_start
#define APP_WRAPPER_FOR_dev_trans_start
#endif
 
#ifndef APP_WRAPPER_FOR_dev_trans_start
#define APP_WRAPPER_FOR_dev_trans_start
FUNCTION_WRAPPER(dev_trans_start, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_trans_start is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    long ret = dev_trans_start(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_trans_start returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_request_selected_regions
#define APP_WRAPPER_FOR_pci_request_selected_regions
#endif
 
#ifndef APP_WRAPPER_FOR_pci_request_selected_regions
#define APP_WRAPPER_FOR_pci_request_selected_regions
FUNCTION_WRAPPER(pci_request_selected_regions, (struct pci_dev *_arg1, int _arg2, const char *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("pci_request_selected_regions is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = pci_request_selected_regions(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("pci_request_selected_regions returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR___sb_end_write
#define APP_WRAPPER_FOR___sb_end_write
#endif
 
#ifndef APP_WRAPPER_FOR___sb_end_write
#define APP_WRAPPER_FOR___sb_end_write
FUNCTION_WRAPPER_VOID(__sb_end_write, (struct super_block *sb, int level), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("__sb_end_write is invoked.\n");
    PRE_WRAPPER_FUNC(sb, level);
    __sb_end_write(sb, level);
    POST_WRAPPER_FUNC(sb, level);
    kern_printk("__sb_end_write returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
})
#endif


#ifndef KERN_ADDR_is_module_percpu_address
#define APP_WRAPPER_FOR_is_module_percpu_address
#endif
 
#ifndef APP_WRAPPER_FOR_is_module_percpu_address
#define APP_WRAPPER_FOR_is_module_percpu_address
FUNCTION_WRAPPER(is_module_percpu_address, (unsigned long addr), {
    kern_printk("is_module_percpu_address is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    bool ret = is_module_percpu_address(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("is_module_percpu_address returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_orderly_poweroff
#define APP_WRAPPER_FOR_orderly_poweroff
#endif
 
#ifndef APP_WRAPPER_FOR_orderly_poweroff
#define APP_WRAPPER_FOR_orderly_poweroff
FUNCTION_WRAPPER(orderly_poweroff, (bool force), {
    kern_printk("orderly_poweroff is invoked.\n");
    PRE_WRAPPER_FUNC(force);
    int ret = orderly_poweroff(force);
    POST_WRAPPER_FUNC(force);
    kern_printk("orderly_poweroff returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_strsep
#define APP_WRAPPER_FOR_strsep
#endif
 
#ifndef APP_WRAPPER_FOR_strsep
#define APP_WRAPPER_FOR_strsep
FUNCTION_WRAPPER(strsep, (char **_arg1, const char *_arg2), {
    kern_printk("strsep is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    char *ret = strsep(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("strsep returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_removexattr
#define APP_WRAPPER_FOR_vfs_removexattr
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_removexattr
#define APP_WRAPPER_FOR_vfs_removexattr
FUNCTION_WRAPPER(vfs_removexattr, (struct dentry *_arg1, const char *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("vfs_removexattr is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = vfs_removexattr(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("vfs_removexattr returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_get_drvdata
#define APP_WRAPPER_FOR_dev_get_drvdata
#endif
 
#ifndef APP_WRAPPER_FOR_dev_get_drvdata
#define APP_WRAPPER_FOR_dev_get_drvdata
FUNCTION_WRAPPER(dev_get_drvdata, (const struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_get_drvdata is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    void *ret = dev_get_drvdata(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_get_drvdata returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___bitmap_and
#define APP_WRAPPER_FOR___bitmap_and
#endif
 
#ifndef APP_WRAPPER_FOR___bitmap_and
#define APP_WRAPPER_FOR___bitmap_and
FUNCTION_WRAPPER(__bitmap_and, (unsigned long *dst, unsigned const long *bitmap1, unsigned const long *bitmap2, int bits), {
    kern_printk("__bitmap_and is invoked.\n");
    PRE_WRAPPER_FUNC(dst, bitmap1, bitmap2, bits);
    int ret = __bitmap_and(dst, bitmap1, bitmap2, bits);
    POST_WRAPPER_FUNC(dst, bitmap1, bitmap2, bits);
    kern_printk("__bitmap_and returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_arch_get_unmapped_area
#define APP_WRAPPER_FOR_arch_get_unmapped_area
#endif
 
#ifndef APP_WRAPPER_FOR_arch_get_unmapped_area
#define APP_WRAPPER_FOR_arch_get_unmapped_area
FUNCTION_WRAPPER(arch_get_unmapped_area, (struct file *_arg1, unsigned long _arg2, unsigned long _arg3, unsigned long _arg4, unsigned long _arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("arch_get_unmapped_area is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    long ret = arch_get_unmapped_area(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("arch_get_unmapped_area returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_swiotlb_unmap_sg_attrs
#define APP_WRAPPER_FOR_swiotlb_unmap_sg_attrs
#endif
 
#ifndef APP_WRAPPER_FOR_swiotlb_unmap_sg_attrs
#define APP_WRAPPER_FOR_swiotlb_unmap_sg_attrs
FUNCTION_WRAPPER_VOID(swiotlb_unmap_sg_attrs, (struct device *hwdev, struct scatterlist *sgl, int nelems, enum dma_data_direction dir, struct dma_attrs *attrs), {
    WRAP_RECURSIVE(hwdev);
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
    kern_printk("swiotlb_unmap_sg_attrs is invoked.\n");
    PRE_WRAPPER_FUNC(hwdev, sgl, nelems, dir, attrs);
    swiotlb_unmap_sg_attrs(hwdev, sgl, nelems, dir, attrs);
    POST_WRAPPER_FUNC(hwdev, sgl, nelems, dir, attrs);
    kern_printk("swiotlb_unmap_sg_attrs returned.\n");
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
})
#endif


#ifndef KERN_ADDR_key_create_or_update
#define APP_WRAPPER_FOR_key_create_or_update
#endif
 
#ifndef APP_WRAPPER_FOR_key_create_or_update
#define APP_WRAPPER_FOR_key_create_or_update
FUNCTION_WRAPPER(key_create_or_update, (key_ref_t keyring, const char *type, const char *description, const void *payload, size_t plen, key_perm_t perm, unsigned long flags), {
    kern_printk("key_create_or_update is invoked.\n");
    PRE_WRAPPER_FUNC(keyring, type, description, payload, plen, perm, flags);
    key_ref_t ret = key_create_or_update(keyring, type, description, payload, plen, perm, flags);
    POST_WRAPPER_FUNC(keyring, type, description, payload, plen, perm, flags);
    kern_printk("key_create_or_update returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_unregister_reboot_notifier
#define APP_WRAPPER_FOR_unregister_reboot_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_reboot_notifier
#define APP_WRAPPER_FOR_unregister_reboot_notifier
FUNCTION_WRAPPER(unregister_reboot_notifier, (struct notifier_block *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("unregister_reboot_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = unregister_reboot_notifier(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("unregister_reboot_notifier returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_phy_start_interrupts
#define APP_WRAPPER_FOR_phy_start_interrupts
#endif
 
#ifndef APP_WRAPPER_FOR_phy_start_interrupts
#define APP_WRAPPER_FOR_phy_start_interrupts
FUNCTION_WRAPPER(phy_start_interrupts, (struct phy_device *phydev), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    kern_printk("phy_start_interrupts is invoked.\n");
    PRE_WRAPPER_FUNC(phydev);
    int ret = phy_start_interrupts(phydev);
    POST_WRAPPER_FUNC(phydev);
    kern_printk("phy_start_interrupts returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_sched_rr_get_interval
#define APP_WRAPPER_FOR_compat_sys_sched_rr_get_interval
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_sched_rr_get_interval
#define APP_WRAPPER_FOR_compat_sys_sched_rr_get_interval
FUNCTION_WRAPPER(compat_sys_sched_rr_get_interval, (compat_pid_t pid, struct compat_timespec *interval), {
    kern_printk("compat_sys_sched_rr_get_interval is invoked.\n");
    PRE_WRAPPER_FUNC(pid, interval);
    long ret = compat_sys_sched_rr_get_interval(pid, interval);
    POST_WRAPPER_FUNC(pid, interval);
    kern_printk("compat_sys_sched_rr_get_interval returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_get_undo_access
#define APP_WRAPPER_FOR_jbd2_journal_get_undo_access
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_get_undo_access
#define APP_WRAPPER_FOR_jbd2_journal_get_undo_access
FUNCTION_WRAPPER(jbd2_journal_get_undo_access, (handle_t *_arg1, struct buffer_head *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(handle_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("jbd2_journal_get_undo_access is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = jbd2_journal_get_undo_access(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("jbd2_journal_get_undo_access returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(handle_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_set_tsc_mode
#define APP_WRAPPER_FOR_set_tsc_mode
#endif
 
#ifndef APP_WRAPPER_FOR_set_tsc_mode
#define APP_WRAPPER_FOR_set_tsc_mode
FUNCTION_WRAPPER(set_tsc_mode, (unsigned int val), {
    kern_printk("set_tsc_mode is invoked.\n");
    PRE_WRAPPER_FUNC(val);
    int ret = set_tsc_mode(val);
    POST_WRAPPER_FUNC(val);
    kern_printk("set_tsc_mode returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_loopback_xmit
#define APP_WRAPPER_FOR_dev_loopback_xmit
#endif
 
#ifndef APP_WRAPPER_FOR_dev_loopback_xmit
#define APP_WRAPPER_FOR_dev_loopback_xmit
FUNCTION_WRAPPER(dev_loopback_xmit, (struct sk_buff *newskb), {
    WRAP_RECURSIVE(newskb);
    TRACES_IF_WATCHPOINT(newskb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(newskb)));
    kern_printk("dev_loopback_xmit is invoked.\n");
    PRE_WRAPPER_FUNC(newskb);
    int ret = dev_loopback_xmit(newskb);
    POST_WRAPPER_FUNC(newskb);
    kern_printk("dev_loopback_xmit returned.\n");
    TRACES_IF_WATCHPOINT(newskb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(newskb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_alloc_send_skb
#define APP_WRAPPER_FOR_sock_alloc_send_skb
#endif
 
#ifndef APP_WRAPPER_FOR_sock_alloc_send_skb
#define APP_WRAPPER_FOR_sock_alloc_send_skb
FUNCTION_WRAPPER(sock_alloc_send_skb, (struct sock *sk, unsigned long size, int noblock, int *errcode), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sock_alloc_send_skb is invoked.\n");
    PRE_WRAPPER_FUNC(sk, size, noblock, errcode);
    struct sk_buff *ret = sock_alloc_send_skb(sk, size, noblock, errcode);
    POST_WRAPPER_FUNC(sk, size, noblock, errcode);
    kern_printk("sock_alloc_send_skb returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_bmdma_qc_issue
#define APP_WRAPPER_FOR_ata_bmdma_qc_issue
#endif
 
#ifndef APP_WRAPPER_FOR_ata_bmdma_qc_issue
#define APP_WRAPPER_FOR_ata_bmdma_qc_issue
FUNCTION_WRAPPER(ata_bmdma_qc_issue, (struct ata_queued_cmd *qc), {
    WRAP_RECURSIVE(qc);
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    kern_printk("ata_bmdma_qc_issue is invoked.\n");
    PRE_WRAPPER_FUNC(qc);
    int ret = ata_bmdma_qc_issue(qc);
    POST_WRAPPER_FUNC(qc);
    kern_printk("ata_bmdma_qc_issue returned.\n");
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_get_by_index
#define APP_WRAPPER_FOR_dev_get_by_index
#endif
 
#ifndef APP_WRAPPER_FOR_dev_get_by_index
#define APP_WRAPPER_FOR_dev_get_by_index
FUNCTION_WRAPPER(dev_get_by_index, (struct net *net, int ifindex), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    kern_printk("dev_get_by_index is invoked.\n");
    PRE_WRAPPER_FUNC(net, ifindex);
    struct net_device *ret = dev_get_by_index(net, ifindex);
    POST_WRAPPER_FUNC(net, ifindex);
    kern_printk("dev_get_by_index returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___put_user_bad
#define APP_WRAPPER_FOR___put_user_bad
#endif
 
#ifndef APP_WRAPPER_FOR___put_user_bad
#define APP_WRAPPER_FOR___put_user_bad
FUNCTION_WRAPPER_VOID(__put_user_bad, (), {
    kern_printk("__put_user_bad is invoked.\n");
    PRE_WRAPPER_FUNC();
    __put_user_bad();
    POST_WRAPPER_FUNC();
    kern_printk("__put_user_bad returned.\n");
})
#endif


#ifndef KERN_ADDR_compat_sys_mq_timedsend
#define APP_WRAPPER_FOR_compat_sys_mq_timedsend
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_mq_timedsend
#define APP_WRAPPER_FOR_compat_sys_mq_timedsend
FUNCTION_WRAPPER(compat_sys_mq_timedsend, (mqd_t mqdes, const char *u_msg_ptr, size_t msg_len, unsigned int msg_prio, const struct compat_timespec *u_abs_timeout), {
    kern_printk("compat_sys_mq_timedsend is invoked.\n");
    PRE_WRAPPER_FUNC(mqdes, u_msg_ptr, msg_len, msg_prio, u_abs_timeout);
    long ret = compat_sys_mq_timedsend(mqdes, u_msg_ptr, msg_len, msg_prio, u_abs_timeout);
    POST_WRAPPER_FUNC(mqdes, u_msg_ptr, msg_len, msg_prio, u_abs_timeout);
    kern_printk("compat_sys_mq_timedsend returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_disallow_signal
#define APP_WRAPPER_FOR_disallow_signal
#endif
 
#ifndef APP_WRAPPER_FOR_disallow_signal
#define APP_WRAPPER_FOR_disallow_signal
FUNCTION_WRAPPER(disallow_signal, (int _arg1), {
    kern_printk("disallow_signal is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = disallow_signal(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("disallow_signal returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_device_set_wakeup_capable
#define APP_WRAPPER_FOR_device_set_wakeup_capable
#endif
 
#ifndef APP_WRAPPER_FOR_device_set_wakeup_capable
#define APP_WRAPPER_FOR_device_set_wakeup_capable
FUNCTION_WRAPPER_VOID(device_set_wakeup_capable, (struct device *dev, bool capable), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("device_set_wakeup_capable is invoked.\n");
    PRE_WRAPPER_FUNC(dev, capable);
    device_set_wakeup_capable(dev, capable);
    POST_WRAPPER_FUNC(dev, capable);
    kern_printk("device_set_wakeup_capable returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_pcibios_retrieve_fw_addr
#define APP_WRAPPER_FOR_pcibios_retrieve_fw_addr
#endif
 
#ifndef APP_WRAPPER_FOR_pcibios_retrieve_fw_addr
#define APP_WRAPPER_FOR_pcibios_retrieve_fw_addr
FUNCTION_WRAPPER(pcibios_retrieve_fw_addr, (struct pci_dev *dev, int idx), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pcibios_retrieve_fw_addr is invoked.\n");
    PRE_WRAPPER_FUNC(dev, idx);
    resource_size_t ret = pcibios_retrieve_fw_addr(dev, idx);
    POST_WRAPPER_FUNC(dev, idx);
    kern_printk("pcibios_retrieve_fw_addr returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_text_poke
#define APP_WRAPPER_FOR_text_poke
#endif
 
#ifndef APP_WRAPPER_FOR_text_poke
#define APP_WRAPPER_FOR_text_poke
FUNCTION_WRAPPER(text_poke, (void *addr, const void *opcode, size_t len), {
    kern_printk("text_poke is invoked.\n");
    PRE_WRAPPER_FUNC(addr, opcode, len);
    void *ret = text_poke(addr, opcode, len);
    POST_WRAPPER_FUNC(addr, opcode, len);
    kern_printk("text_poke returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_shift
#define APP_WRAPPER_FOR_skb_shift
#endif
 
#ifndef APP_WRAPPER_FOR_skb_shift
#define APP_WRAPPER_FOR_skb_shift
FUNCTION_WRAPPER(skb_shift, (struct sk_buff *tgt, struct sk_buff *skb, int shiftlen), {
    WRAP_RECURSIVE(tgt);
    TRACES_IF_WATCHPOINT(tgt);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(tgt)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_shift is invoked.\n");
    PRE_WRAPPER_FUNC(tgt, skb, shiftlen);
    int ret = skb_shift(tgt, skb, shiftlen);
    POST_WRAPPER_FUNC(tgt, skb, shiftlen);
    kern_printk("skb_shift returned.\n");
    TRACES_IF_WATCHPOINT(tgt);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(tgt)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR___xadd_wrong_size
#define APP_WRAPPER_FOR___xadd_wrong_size
#endif
 
#ifndef APP_WRAPPER_FOR___xadd_wrong_size
#define APP_WRAPPER_FOR___xadd_wrong_size
FUNCTION_WRAPPER_VOID(__xadd_wrong_size, (), {
    kern_printk("__xadd_wrong_size is invoked.\n");
    PRE_WRAPPER_FUNC();
    __xadd_wrong_size();
    POST_WRAPPER_FUNC();
    kern_printk("__xadd_wrong_size returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_video_backlight_support
#define APP_WRAPPER_FOR_acpi_video_backlight_support
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_video_backlight_support
#define APP_WRAPPER_FOR_acpi_video_backlight_support
FUNCTION_WRAPPER(acpi_video_backlight_support, (), {
    kern_printk("acpi_video_backlight_support is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = acpi_video_backlight_support();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_video_backlight_support returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blkdev_issue_discard
#define APP_WRAPPER_FOR_blkdev_issue_discard
#endif
 
#ifndef APP_WRAPPER_FOR_blkdev_issue_discard
#define APP_WRAPPER_FOR_blkdev_issue_discard
FUNCTION_WRAPPER(blkdev_issue_discard, (struct block_device *bdev, sector_t sector, sector_t nr_sects, gfp_t gfp_mask, unsigned long flags), {
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    kern_printk("blkdev_issue_discard is invoked.\n");
    PRE_WRAPPER_FUNC(bdev, sector, nr_sects, gfp_mask, flags);
    int ret = blkdev_issue_discard(bdev, sector, nr_sects, gfp_mask, flags);
    POST_WRAPPER_FUNC(bdev, sector, nr_sects, gfp_mask, flags);
    kern_printk("blkdev_issue_discard returned.\n");
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_newstat
#define APP_WRAPPER_FOR_compat_sys_newstat
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_newstat
#define APP_WRAPPER_FOR_compat_sys_newstat
FUNCTION_WRAPPER(compat_sys_newstat, (const char *filename, struct compat_stat *statbuf), {
    kern_printk("compat_sys_newstat is invoked.\n");
    PRE_WRAPPER_FUNC(filename, statbuf);
    long ret = compat_sys_newstat(filename, statbuf);
    POST_WRAPPER_FUNC(filename, statbuf);
    kern_printk("compat_sys_newstat returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_table_parse
#define APP_WRAPPER_FOR_acpi_table_parse
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_table_parse
#define APP_WRAPPER_FOR_acpi_table_parse
FUNCTION_WRAPPER(acpi_table_parse, (char *id, acpi_table_handler handler), {
    WRAP_FUNCTION(handler);
    kern_printk("acpi_table_parse is invoked.\n");
    PRE_WRAPPER_FUNC(id, handler);
    int ret = acpi_table_parse(id, handler);
    POST_WRAPPER_FUNC(id, handler);
    kern_printk("acpi_table_parse returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_subsys_dev_iter_next
#define APP_WRAPPER_FOR_subsys_dev_iter_next
#endif
 
#ifndef APP_WRAPPER_FOR_subsys_dev_iter_next
#define APP_WRAPPER_FOR_subsys_dev_iter_next
FUNCTION_WRAPPER(subsys_dev_iter_next, (struct subsys_dev_iter *iter), {
    WRAP_RECURSIVE(iter);
    TRACES_IF_WATCHPOINT(iter);
    SCAN_HEAD_FUNC(struct subsys_dev_iter)(*(TO_UNWATCHED_ADDRESS(iter)));
    kern_printk("subsys_dev_iter_next is invoked.\n");
    PRE_WRAPPER_FUNC(iter);
    struct device *ret = subsys_dev_iter_next(iter);
    POST_WRAPPER_FUNC(iter);
    kern_printk("subsys_dev_iter_next returned.\n");
    TRACES_IF_WATCHPOINT(iter);
    SCAN_HEAD_FUNC(struct subsys_dev_iter)(*(TO_UNWATCHED_ADDRESS(iter)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_e820_search_gap
#define APP_WRAPPER_FOR_e820_search_gap
#endif
 
#ifndef APP_WRAPPER_FOR_e820_search_gap
#define APP_WRAPPER_FOR_e820_search_gap
FUNCTION_WRAPPER(e820_search_gap, (unsigned long *gapstart, unsigned long *gapsize, unsigned long start_addr, unsigned long long end_addr), {
    kern_printk("e820_search_gap is invoked.\n");
    PRE_WRAPPER_FUNC(gapstart, gapsize, start_addr, end_addr);
    int ret = e820_search_gap(gapstart, gapsize, start_addr, end_addr);
    POST_WRAPPER_FUNC(gapstart, gapsize, start_addr, end_addr);
    kern_printk("e820_search_gap returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_fprop_local_destroy_single
#define APP_WRAPPER_FOR_fprop_local_destroy_single
#endif
 
#ifndef APP_WRAPPER_FOR_fprop_local_destroy_single
#define APP_WRAPPER_FOR_fprop_local_destroy_single
FUNCTION_WRAPPER_VOID(fprop_local_destroy_single, (struct fprop_local_single *pl), {
    kern_printk("fprop_local_destroy_single is invoked.\n");
    PRE_WRAPPER_FUNC(pl);
    fprop_local_destroy_single(pl);
    POST_WRAPPER_FUNC(pl);
    kern_printk("fprop_local_destroy_single returned.\n");
})
#endif


#ifndef KERN_ADDR_dquot_set_dqblk
#define APP_WRAPPER_FOR_dquot_set_dqblk
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_set_dqblk
#define APP_WRAPPER_FOR_dquot_set_dqblk
FUNCTION_WRAPPER(dquot_set_dqblk, (struct super_block *sb, struct kqid id, struct fs_disk_quota *di), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("dquot_set_dqblk is invoked.\n");
    PRE_WRAPPER_FUNC(sb, id, di);
    int ret = dquot_set_dqblk(sb, id, di);
    POST_WRAPPER_FUNC(sb, id, di);
    kern_printk("dquot_set_dqblk returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sysfs_format_mac
#define APP_WRAPPER_FOR_sysfs_format_mac
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_format_mac
#define APP_WRAPPER_FOR_sysfs_format_mac
FUNCTION_WRAPPER(sysfs_format_mac, (char *buf, unsigned const char *addr, int len), {
    kern_printk("sysfs_format_mac is invoked.\n");
    PRE_WRAPPER_FUNC(buf, addr, len);
    ssize_t ret = sysfs_format_mac(buf, addr, len);
    POST_WRAPPER_FUNC(buf, addr, len);
    kern_printk("sysfs_format_mac returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_add_rx_frag
#define APP_WRAPPER_FOR_skb_add_rx_frag
#endif
 
#ifndef APP_WRAPPER_FOR_skb_add_rx_frag
#define APP_WRAPPER_FOR_skb_add_rx_frag
FUNCTION_WRAPPER_VOID(skb_add_rx_frag, (struct sk_buff *skb, int i, struct page *page, int off, int size, unsigned int truesize), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("skb_add_rx_frag is invoked.\n");
    PRE_WRAPPER_FUNC(skb, i, page, off, size, truesize);
    skb_add_rx_frag(skb, i, page, off, size, truesize);
    POST_WRAPPER_FUNC(skb, i, page, off, size, truesize);
    kern_printk("skb_add_rx_frag returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_truncate_inode_pages
#define APP_WRAPPER_FOR_truncate_inode_pages
#endif
 
#ifndef APP_WRAPPER_FOR_truncate_inode_pages
#define APP_WRAPPER_FOR_truncate_inode_pages
FUNCTION_WRAPPER_VOID(truncate_inode_pages, (struct address_space *_arg1, loff_t _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("truncate_inode_pages is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    truncate_inode_pages(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("truncate_inode_pages returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_register_pernet_subsys
#define APP_WRAPPER_FOR_register_pernet_subsys
#endif
 
#ifndef APP_WRAPPER_FOR_register_pernet_subsys
#define APP_WRAPPER_FOR_register_pernet_subsys
FUNCTION_WRAPPER(register_pernet_subsys, (struct pernet_operations *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pernet_operations)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("register_pernet_subsys is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = register_pernet_subsys(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("register_pernet_subsys returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pernet_operations)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_page_readlink
#define APP_WRAPPER_FOR_page_readlink
#endif
 
#ifndef APP_WRAPPER_FOR_page_readlink
#define APP_WRAPPER_FOR_page_readlink
FUNCTION_WRAPPER(page_readlink, (struct dentry *_arg1, char *_arg2, int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("page_readlink is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = page_readlink(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("page_readlink returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_unshare_nsproxy_namespaces
#define APP_WRAPPER_FOR_unshare_nsproxy_namespaces
#endif
 
#ifndef APP_WRAPPER_FOR_unshare_nsproxy_namespaces
#define APP_WRAPPER_FOR_unshare_nsproxy_namespaces
FUNCTION_WRAPPER(unshare_nsproxy_namespaces, (unsigned long _arg1, struct nsproxy **_arg2, struct cred *_arg3, struct fs_struct *_arg4), {
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct nsproxy *)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct cred)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("unshare_nsproxy_namespaces is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = unshare_nsproxy_namespaces(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("unshare_nsproxy_namespaces returned.\n");
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct nsproxy *)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct cred)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sas_port_destroy
#define APP_WRAPPER_FOR_ata_sas_port_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sas_port_destroy
#define APP_WRAPPER_FOR_ata_sas_port_destroy
FUNCTION_WRAPPER_VOID(ata_sas_port_destroy, (struct ata_port *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("ata_sas_port_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    ata_sas_port_destroy(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("ata_sas_port_destroy returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_pcpu_free_alloc_info
#define APP_WRAPPER_FOR_pcpu_free_alloc_info
#endif
 
#ifndef APP_WRAPPER_FOR_pcpu_free_alloc_info
#define APP_WRAPPER_FOR_pcpu_free_alloc_info
FUNCTION_WRAPPER_VOID(pcpu_free_alloc_info, (struct pcpu_alloc_info *ai), {
    kern_printk("pcpu_free_alloc_info is invoked.\n");
    PRE_WRAPPER_FUNC(ai);
    pcpu_free_alloc_info(ai);
    POST_WRAPPER_FUNC(ai);
    kern_printk("pcpu_free_alloc_info returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_release_regions
#define APP_WRAPPER_FOR_pci_release_regions
#endif
 
#ifndef APP_WRAPPER_FOR_pci_release_regions
#define APP_WRAPPER_FOR_pci_release_regions
FUNCTION_WRAPPER_VOID(pci_release_regions, (struct pci_dev *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("pci_release_regions is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    pci_release_regions(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("pci_release_regions returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_jbd2_clear_buffer_revoked_flags
#define APP_WRAPPER_FOR_jbd2_clear_buffer_revoked_flags
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_clear_buffer_revoked_flags
#define APP_WRAPPER_FOR_jbd2_clear_buffer_revoked_flags
FUNCTION_WRAPPER_VOID(jbd2_clear_buffer_revoked_flags, (journal_t *journal), {
    WRAP_RECURSIVE(journal);
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    kern_printk("jbd2_clear_buffer_revoked_flags is invoked.\n");
    PRE_WRAPPER_FUNC(journal);
    jbd2_clear_buffer_revoked_flags(journal);
    POST_WRAPPER_FUNC(journal);
    kern_printk("jbd2_clear_buffer_revoked_flags returned.\n");
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
})
#endif


#ifndef KERN_ADDR_setup_cpu_local_masks
#define APP_WRAPPER_FOR_setup_cpu_local_masks
#endif
 
#ifndef APP_WRAPPER_FOR_setup_cpu_local_masks
#define APP_WRAPPER_FOR_setup_cpu_local_masks
FUNCTION_WRAPPER_VOID(setup_cpu_local_masks, (), {
    kern_printk("setup_cpu_local_masks is invoked.\n");
    PRE_WRAPPER_FUNC();
    setup_cpu_local_masks();
    POST_WRAPPER_FUNC();
    kern_printk("setup_cpu_local_masks returned.\n");
})
#endif


#ifndef KERN_ADDR_blk_limits_io_min
#define APP_WRAPPER_FOR_blk_limits_io_min
#endif
 
#ifndef APP_WRAPPER_FOR_blk_limits_io_min
#define APP_WRAPPER_FOR_blk_limits_io_min
FUNCTION_WRAPPER_VOID(blk_limits_io_min, (struct queue_limits *limits, unsigned int min), {
    kern_printk("blk_limits_io_min is invoked.\n");
    PRE_WRAPPER_FUNC(limits, min);
    blk_limits_io_min(limits, min);
    POST_WRAPPER_FUNC(limits, min);
    kern_printk("blk_limits_io_min returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_leave_sleep_state
#define APP_WRAPPER_FOR_acpi_leave_sleep_state
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_leave_sleep_state
#define APP_WRAPPER_FOR_acpi_leave_sleep_state
FUNCTION_WRAPPER(acpi_leave_sleep_state, (u8 sleep_state), {
    kern_printk("acpi_leave_sleep_state is invoked.\n");
    PRE_WRAPPER_FUNC(sleep_state);
    acpi_status ret = acpi_leave_sleep_state(sleep_state);
    POST_WRAPPER_FUNC(sleep_state);
    kern_printk("acpi_leave_sleep_state returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_get_compat_timeval
#define APP_WRAPPER_FOR_get_compat_timeval
#endif
 
#ifndef APP_WRAPPER_FOR_get_compat_timeval
#define APP_WRAPPER_FOR_get_compat_timeval
FUNCTION_WRAPPER(get_compat_timeval, (struct timeval *_arg1, const struct compat_timeval *_arg2), {
    kern_printk("get_compat_timeval is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = get_compat_timeval(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("get_compat_timeval returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_suspend_device_irqs
#define APP_WRAPPER_FOR_suspend_device_irqs
#endif
 
#ifndef APP_WRAPPER_FOR_suspend_device_irqs
#define APP_WRAPPER_FOR_suspend_device_irqs
FUNCTION_WRAPPER_VOID(suspend_device_irqs, (), {
    kern_printk("suspend_device_irqs is invoked.\n");
    PRE_WRAPPER_FUNC();
    suspend_device_irqs();
    POST_WRAPPER_FUNC();
    kern_printk("suspend_device_irqs returned.\n");
})
#endif


#ifndef KERN_ADDR_invalidate_partitions
#define APP_WRAPPER_FOR_invalidate_partitions
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_partitions
#define APP_WRAPPER_FOR_invalidate_partitions
FUNCTION_WRAPPER(invalidate_partitions, (struct gendisk *disk, struct block_device *bdev), {
    WRAP_RECURSIVE(disk);
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    kern_printk("invalidate_partitions is invoked.\n");
    PRE_WRAPPER_FUNC(disk, bdev);
    int ret = invalidate_partitions(disk, bdev);
    POST_WRAPPER_FUNC(disk, bdev);
    kern_printk("invalidate_partitions returned.\n");
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_scsi_queuecmd
#define APP_WRAPPER_FOR_ata_scsi_queuecmd
#endif
 
#ifndef APP_WRAPPER_FOR_ata_scsi_queuecmd
#define APP_WRAPPER_FOR_ata_scsi_queuecmd
FUNCTION_WRAPPER(ata_scsi_queuecmd, (struct Scsi_Host *h, struct scsi_cmnd *cmd), {
    WRAP_RECURSIVE(h);
    TRACES_IF_WATCHPOINT(h);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(h)));
    kern_printk("ata_scsi_queuecmd is invoked.\n");
    PRE_WRAPPER_FUNC(h, cmd);
    int ret = ata_scsi_queuecmd(h, cmd);
    POST_WRAPPER_FUNC(h, cmd);
    kern_printk("ata_scsi_queuecmd returned.\n");
    TRACES_IF_WATCHPOINT(h);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(h)));
    return ret;
})
#endif


#ifndef KERN_ADDR_wmi_set_block
#define APP_WRAPPER_FOR_wmi_set_block
#endif
 
#ifndef APP_WRAPPER_FOR_wmi_set_block
#define APP_WRAPPER_FOR_wmi_set_block
FUNCTION_WRAPPER(wmi_set_block, (const char *guid, u8 instance, const struct acpi_buffer *in), {
    kern_printk("wmi_set_block is invoked.\n");
    PRE_WRAPPER_FUNC(guid, instance, in);
    acpi_status ret = wmi_set_block(guid, instance, in);
    POST_WRAPPER_FUNC(guid, instance, in);
    kern_printk("wmi_set_block returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_simple_statfs
#define APP_WRAPPER_FOR_simple_statfs
#endif
 
#ifndef APP_WRAPPER_FOR_simple_statfs
#define APP_WRAPPER_FOR_simple_statfs
FUNCTION_WRAPPER(simple_statfs, (struct dentry *_arg1, struct kstatfs *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("simple_statfs is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = simple_statfs(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("simple_statfs returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_schedule_hrtimeout_range
#define APP_WRAPPER_FOR_schedule_hrtimeout_range
#endif
 
#ifndef APP_WRAPPER_FOR_schedule_hrtimeout_range
#define APP_WRAPPER_FOR_schedule_hrtimeout_range
FUNCTION_WRAPPER(schedule_hrtimeout_range, (ktime_t *expires, unsigned long delta, const enum hrtimer_mode mode), {
    kern_printk("schedule_hrtimeout_range is invoked.\n");
    PRE_WRAPPER_FUNC(expires, delta, mode);
    int ret = schedule_hrtimeout_range(expires, delta, mode);
    POST_WRAPPER_FUNC(expires, delta, mode);
    kern_printk("schedule_hrtimeout_range returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___put_user_1
#define APP_WRAPPER_FOR___put_user_1
#endif
 
#ifndef APP_WRAPPER_FOR___put_user_1
#define APP_WRAPPER_FOR___put_user_1
FUNCTION_WRAPPER_VOID(__put_user_1, (), {
    kern_printk("__put_user_1 is invoked.\n");
    PRE_WRAPPER_FUNC();
    __put_user_1();
    POST_WRAPPER_FUNC();
    kern_printk("__put_user_1 returned.\n");
})
#endif


#ifndef KERN_ADDR___put_user_2
#define APP_WRAPPER_FOR___put_user_2
#endif
 
#ifndef APP_WRAPPER_FOR___put_user_2
#define APP_WRAPPER_FOR___put_user_2
FUNCTION_WRAPPER_VOID(__put_user_2, (), {
    kern_printk("__put_user_2 is invoked.\n");
    PRE_WRAPPER_FUNC();
    __put_user_2();
    POST_WRAPPER_FUNC();
    kern_printk("__put_user_2 returned.\n");
})
#endif


#ifndef KERN_ADDR_print_vma_addr
#define APP_WRAPPER_FOR_print_vma_addr
#endif
 
#ifndef APP_WRAPPER_FOR_print_vma_addr
#define APP_WRAPPER_FOR_print_vma_addr
FUNCTION_WRAPPER_VOID(print_vma_addr, (char *prefix, unsigned long rip), {
    kern_printk("print_vma_addr is invoked.\n");
    PRE_WRAPPER_FUNC(prefix, rip);
    print_vma_addr(prefix, rip);
    POST_WRAPPER_FUNC(prefix, rip);
    kern_printk("print_vma_addr returned.\n");
})
#endif


#ifndef KERN_ADDR_dma_sync_wait
#define APP_WRAPPER_FOR_dma_sync_wait
#endif
 
#ifndef APP_WRAPPER_FOR_dma_sync_wait
#define APP_WRAPPER_FOR_dma_sync_wait
FUNCTION_WRAPPER(dma_sync_wait, (struct dma_chan *chan, dma_cookie_t cookie), {
    WRAP_RECURSIVE(chan);
    TRACES_IF_WATCHPOINT(chan);
    SCAN_HEAD_FUNC(struct dma_chan)(*(TO_UNWATCHED_ADDRESS(chan)));
    kern_printk("dma_sync_wait is invoked.\n");
    PRE_WRAPPER_FUNC(chan, cookie);
    enum dma_status ret = dma_sync_wait(chan, cookie);
    POST_WRAPPER_FUNC(chan, cookie);
    kern_printk("dma_sync_wait returned.\n");
    TRACES_IF_WATCHPOINT(chan);
    SCAN_HEAD_FUNC(struct dma_chan)(*(TO_UNWATCHED_ADDRESS(chan)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_vread
#define APP_WRAPPER_FOR_vread
#endif
 
#ifndef APP_WRAPPER_FOR_vread
#define APP_WRAPPER_FOR_vread
FUNCTION_WRAPPER(vread, (char *buf, char *addr, unsigned long count), {
    kern_printk("vread is invoked.\n");
    PRE_WRAPPER_FUNC(buf, addr, count);
    long ret = vread(buf, addr, count);
    POST_WRAPPER_FUNC(buf, addr, count);
    kern_printk("vread returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_alternatives_smp_module_del
#define APP_WRAPPER_FOR_alternatives_smp_module_del
#endif
 
#ifndef APP_WRAPPER_FOR_alternatives_smp_module_del
#define APP_WRAPPER_FOR_alternatives_smp_module_del
FUNCTION_WRAPPER_VOID(alternatives_smp_module_del, (struct module *mod), {
    WRAP_RECURSIVE(mod);
    TRACES_IF_WATCHPOINT(mod);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(mod)));
    kern_printk("alternatives_smp_module_del is invoked.\n");
    PRE_WRAPPER_FUNC(mod);
    alternatives_smp_module_del(mod);
    POST_WRAPPER_FUNC(mod);
    kern_printk("alternatives_smp_module_del returned.\n");
    TRACES_IF_WATCHPOINT(mod);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(mod)));
})
#endif


#ifndef KERN_ADDR_acpi_write_bit_register
#define APP_WRAPPER_FOR_acpi_write_bit_register
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_write_bit_register
#define APP_WRAPPER_FOR_acpi_write_bit_register
FUNCTION_WRAPPER(acpi_write_bit_register, (u32 register_id, u32 value), {
    kern_printk("acpi_write_bit_register is invoked.\n");
    PRE_WRAPPER_FUNC(register_id, value);
    acpi_status ret = acpi_write_bit_register(register_id, value);
    POST_WRAPPER_FUNC(register_id, value);
    kern_printk("acpi_write_bit_register returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___srcu_notifier_call_chain
#define APP_WRAPPER_FOR___srcu_notifier_call_chain
#endif
 
#ifndef APP_WRAPPER_FOR___srcu_notifier_call_chain
#define APP_WRAPPER_FOR___srcu_notifier_call_chain
FUNCTION_WRAPPER(__srcu_notifier_call_chain, (struct srcu_notifier_head *nh, unsigned long val, void *v, int nr_to_call, int *nr_calls), {
    WRAP_RECURSIVE(nh);
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct srcu_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    kern_printk("__srcu_notifier_call_chain is invoked.\n");
    PRE_WRAPPER_FUNC(nh, val, v, nr_to_call, nr_calls);
    int ret = __srcu_notifier_call_chain(nh, val, v, nr_to_call, nr_calls);
    POST_WRAPPER_FUNC(nh, val, v, nr_to_call, nr_calls);
    kern_printk("__srcu_notifier_call_chain returned.\n");
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct srcu_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    return ret;
})
#endif


#ifndef KERN_ADDR_find_get_pages
#define APP_WRAPPER_FOR_find_get_pages
#endif
 
#ifndef APP_WRAPPER_FOR_find_get_pages
#define APP_WRAPPER_FOR_find_get_pages
FUNCTION_WRAPPER(find_get_pages, (struct address_space *mapping, unsigned long start, unsigned int nr_pages, struct page **pages), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    WRAP_RECURSIVE(pages);
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    kern_printk("find_get_pages is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, start, nr_pages, pages);
    int ret = find_get_pages(mapping, start, nr_pages, pages);
    POST_WRAPPER_FUNC(mapping, start, nr_pages, pages);
    kern_printk("find_get_pages returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_dev_next
#define APP_WRAPPER_FOR_ata_dev_next
#endif
 
#ifndef APP_WRAPPER_FOR_ata_dev_next
#define APP_WRAPPER_FOR_ata_dev_next
FUNCTION_WRAPPER(ata_dev_next, (struct ata_device *dev, struct ata_link *link, enum ata_dev_iter_mode mode), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct ata_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    kern_printk("ata_dev_next is invoked.\n");
    PRE_WRAPPER_FUNC(dev, link, mode);
    struct ata_device *ret = ata_dev_next(dev, link, mode);
    POST_WRAPPER_FUNC(dev, link, mode);
    kern_printk("ata_dev_next returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct ata_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_up_read
#define APP_WRAPPER_FOR_up_read
#endif
 
#ifndef APP_WRAPPER_FOR_up_read
#define APP_WRAPPER_FOR_up_read
FUNCTION_WRAPPER_VOID(up_read, (struct rw_semaphore *sem), {
    kern_printk("up_read is invoked.\n");
    PRE_WRAPPER_FUNC(sem);
    up_read(sem);
    POST_WRAPPER_FUNC(sem);
    kern_printk("up_read returned.\n");
})
#endif


#ifndef KERN_ADDR_vfs_write
#define APP_WRAPPER_FOR_vfs_write
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_write
#define APP_WRAPPER_FOR_vfs_write
FUNCTION_WRAPPER(vfs_write, (struct file *_arg1, const char *_arg2, size_t _arg3, loff_t *_arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("vfs_write is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    ssize_t ret = vfs_write(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("vfs_write returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_disable_event
#define APP_WRAPPER_FOR_acpi_disable_event
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_disable_event
#define APP_WRAPPER_FOR_acpi_disable_event
FUNCTION_WRAPPER(acpi_disable_event, (u32 event, u32 flags), {
    kern_printk("acpi_disable_event is invoked.\n");
    PRE_WRAPPER_FUNC(event, flags);
    acpi_status ret = acpi_disable_event(event, flags);
    POST_WRAPPER_FUNC(event, flags);
    kern_printk("acpi_disable_event returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_setsockopt
#define APP_WRAPPER_FOR_sock_setsockopt
#endif
 
#ifndef APP_WRAPPER_FOR_sock_setsockopt
#define APP_WRAPPER_FOR_sock_setsockopt
FUNCTION_WRAPPER(sock_setsockopt, (struct socket *sock, int level, int op, char *optval, unsigned int optlen), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    kern_printk("sock_setsockopt is invoked.\n");
    PRE_WRAPPER_FUNC(sock, level, op, optval, optlen);
    int ret = sock_setsockopt(sock, level, op, optval, optlen);
    POST_WRAPPER_FUNC(sock, level, op, optval, optlen);
    kern_printk("sock_setsockopt returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sg_last
#define APP_WRAPPER_FOR_sg_last
#endif
 
#ifndef APP_WRAPPER_FOR_sg_last
#define APP_WRAPPER_FOR_sg_last
FUNCTION_WRAPPER(sg_last, (struct scatterlist *s, unsigned int _arg1), {
    kern_printk("sg_last is invoked.\n");
    PRE_WRAPPER_FUNC(s, _arg1);
    struct scatterlist *ret = sg_last(s, _arg1);
    POST_WRAPPER_FUNC(s, _arg1);
    kern_printk("sg_last returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_submit_bh
#define APP_WRAPPER_FOR_submit_bh
#endif
 
#ifndef APP_WRAPPER_FOR_submit_bh
#define APP_WRAPPER_FOR_submit_bh
FUNCTION_WRAPPER(submit_bh, (int _arg1, struct buffer_head *_arg2), {
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("submit_bh is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = submit_bh(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("submit_bh returned.\n");
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_netdev_boot_setup
#define APP_WRAPPER_FOR_netdev_boot_setup
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_boot_setup
#define APP_WRAPPER_FOR_netdev_boot_setup
FUNCTION_WRAPPER(netdev_boot_setup, (char *str), {
    kern_printk("netdev_boot_setup is invoked.\n");
    PRE_WRAPPER_FUNC(str);
    int ret = netdev_boot_setup(str);
    POST_WRAPPER_FUNC(str);
    kern_printk("netdev_boot_setup returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_schedule_delayed_work
#define APP_WRAPPER_FOR_schedule_delayed_work
#endif
 
#ifndef APP_WRAPPER_FOR_schedule_delayed_work
#define APP_WRAPPER_FOR_schedule_delayed_work
FUNCTION_WRAPPER(schedule_delayed_work, (struct delayed_work *work, unsigned long delay), {
    WRAP_RECURSIVE(work);
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct delayed_work)(*(TO_UNWATCHED_ADDRESS(work)));
    kern_printk("schedule_delayed_work is invoked.\n");
    PRE_WRAPPER_FUNC(work, delay);
    bool ret = schedule_delayed_work(work, delay);
    POST_WRAPPER_FUNC(work, delay);
    kern_printk("schedule_delayed_work returned.\n");
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct delayed_work)(*(TO_UNWATCHED_ADDRESS(work)));
    return ret;
})
#endif


#ifndef KERN_ADDR_percpu_counter_destroy
#define APP_WRAPPER_FOR_percpu_counter_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_percpu_counter_destroy
#define APP_WRAPPER_FOR_percpu_counter_destroy
FUNCTION_WRAPPER_VOID(percpu_counter_destroy, (struct percpu_counter *fbc), {
    kern_printk("percpu_counter_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(fbc);
    percpu_counter_destroy(fbc);
    POST_WRAPPER_FUNC(fbc);
    kern_printk("percpu_counter_destroy returned.\n");
})
#endif


#ifndef KERN_ADDR_local_bh_disable
#define APP_WRAPPER_FOR_local_bh_disable
#endif
 
#ifndef APP_WRAPPER_FOR_local_bh_disable
#define APP_WRAPPER_FOR_local_bh_disable
FUNCTION_WRAPPER_VOID(local_bh_disable, (), {
    kern_printk("local_bh_disable is invoked.\n");
    PRE_WRAPPER_FUNC();
    local_bh_disable();
    POST_WRAPPER_FUNC();
    kern_printk("local_bh_disable returned.\n");
})
#endif


#ifndef KERN_ADDR_dma_common_get_sgtable
#define APP_WRAPPER_FOR_dma_common_get_sgtable
#endif
 
#ifndef APP_WRAPPER_FOR_dma_common_get_sgtable
#define APP_WRAPPER_FOR_dma_common_get_sgtable
FUNCTION_WRAPPER(dma_common_get_sgtable, (struct device *dev, struct sg_table *sgt, void *cpu_addr, dma_addr_t dma_addr, size_t size), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dma_common_get_sgtable is invoked.\n");
    PRE_WRAPPER_FUNC(dev, sgt, cpu_addr, dma_addr, size);
    int ret = dma_common_get_sgtable(dev, sgt, cpu_addr, dma_addr, size);
    POST_WRAPPER_FUNC(dev, sgt, cpu_addr, dma_addr, size);
    kern_printk("dma_common_get_sgtable returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dma_chan_cleanup
#define APP_WRAPPER_FOR_dma_chan_cleanup
#endif
 
#ifndef APP_WRAPPER_FOR_dma_chan_cleanup
#define APP_WRAPPER_FOR_dma_chan_cleanup
FUNCTION_WRAPPER_VOID(dma_chan_cleanup, (struct kref *kref), {
    kern_printk("dma_chan_cleanup is invoked.\n");
    PRE_WRAPPER_FUNC(kref);
    dma_chan_cleanup(kref);
    POST_WRAPPER_FUNC(kref);
    kern_printk("dma_chan_cleanup returned.\n");
})
#endif


#ifndef KERN_ADDR_kstrtou8
#define APP_WRAPPER_FOR_kstrtou8
#endif
 
#ifndef APP_WRAPPER_FOR_kstrtou8
#define APP_WRAPPER_FOR_kstrtou8
FUNCTION_WRAPPER(kstrtou8, (const char *s, unsigned int base, u8 *res), {
    kern_printk("kstrtou8 is invoked.\n");
    PRE_WRAPPER_FUNC(s, base, res);
    int ret = kstrtou8(s, base, res);
    POST_WRAPPER_FUNC(s, base, res);
    kern_printk("kstrtou8 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___alloc_workqueue_key
#define APP_WRAPPER_FOR___alloc_workqueue_key
#endif
 
#ifndef APP_WRAPPER_FOR___alloc_workqueue_key
#define APP_WRAPPER_FOR___alloc_workqueue_key
FUNCTION_WRAPPER(__alloc_workqueue_key, (const char *fmt, unsigned int flags, int max_active, struct lock_class_key *key, const char *lock_name, ...), {
    va_list args__;
    va_start(args__, lock_name);
    // TODO: variadic arguments
    kern_printk("__alloc_workqueue_key is invoked.\n");
    PRE_WRAPPER_FUNC(fmt, flags, max_active, key, lock_name);
    struct workqueue_struct *ret = __alloc_workqueue_key(fmt, flags, max_active, key, lock_name);
    POST_WRAPPER_FUNC(fmt, flags, max_active, key, lock_name);
    kern_printk("__alloc_workqueue_key returned.\n");
    va_end(args__);
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_sigaltstack
#define APP_WRAPPER_FOR_compat_sys_sigaltstack
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_sigaltstack
#define APP_WRAPPER_FOR_compat_sys_sigaltstack
FUNCTION_WRAPPER(compat_sys_sigaltstack, (const compat_stack_t *uss_ptr, compat_stack_t *uoss_ptr), {
    kern_printk("compat_sys_sigaltstack is invoked.\n");
    PRE_WRAPPER_FUNC(uss_ptr, uoss_ptr);
    long ret = compat_sys_sigaltstack(uss_ptr, uoss_ptr);
    POST_WRAPPER_FUNC(uss_ptr, uoss_ptr);
    kern_printk("compat_sys_sigaltstack returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_page_swapcount
#define APP_WRAPPER_FOR_page_swapcount
#endif
 
#ifndef APP_WRAPPER_FOR_page_swapcount
#define APP_WRAPPER_FOR_page_swapcount
FUNCTION_WRAPPER(page_swapcount, (struct page *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("page_swapcount is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = page_swapcount(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("page_swapcount returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_get_child
#define APP_WRAPPER_FOR_acpi_get_child
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_child
#define APP_WRAPPER_FOR_acpi_get_child
FUNCTION_WRAPPER(acpi_get_child, (acpi_handle _arg1, u64 _arg2), {
    kern_printk("acpi_get_child is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    acpi_handle ret = acpi_get_child(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("acpi_get_child returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_early_reserve_e820_mpc_new
#define APP_WRAPPER_FOR_early_reserve_e820_mpc_new
#endif
 
#ifndef APP_WRAPPER_FOR_early_reserve_e820_mpc_new
#define APP_WRAPPER_FOR_early_reserve_e820_mpc_new
FUNCTION_WRAPPER_VOID(early_reserve_e820_mpc_new, (), {
    kern_printk("early_reserve_e820_mpc_new is invoked.\n");
    PRE_WRAPPER_FUNC();
    early_reserve_e820_mpc_new();
    POST_WRAPPER_FUNC();
    kern_printk("early_reserve_e820_mpc_new returned.\n");
})
#endif


#ifndef KERN_ADDR_follow_page
#define APP_WRAPPER_FOR_follow_page
#endif
 
#ifndef APP_WRAPPER_FOR_follow_page
#define APP_WRAPPER_FOR_follow_page
FUNCTION_WRAPPER(follow_page, (struct vm_area_struct *_arg1, unsigned long address, unsigned int foll_flags), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("follow_page is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, address, foll_flags);
    struct page *ret = follow_page(_arg1, address, foll_flags);
    POST_WRAPPER_FUNC(_arg1, address, foll_flags);
    kern_printk("follow_page returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_init_cpu_possible
#define APP_WRAPPER_FOR_init_cpu_possible
#endif
 
#ifndef APP_WRAPPER_FOR_init_cpu_possible
#define APP_WRAPPER_FOR_init_cpu_possible
FUNCTION_WRAPPER_VOID(init_cpu_possible, (const struct cpumask *src), {
    kern_printk("init_cpu_possible is invoked.\n");
    PRE_WRAPPER_FUNC(src);
    init_cpu_possible(src);
    POST_WRAPPER_FUNC(src);
    kern_printk("init_cpu_possible returned.\n");
})
#endif


#ifndef KERN_ADDR_queue_kthread_work
#define APP_WRAPPER_FOR_queue_kthread_work
#endif
 
#ifndef APP_WRAPPER_FOR_queue_kthread_work
#define APP_WRAPPER_FOR_queue_kthread_work
FUNCTION_WRAPPER(queue_kthread_work, (struct kthread_worker *worker, struct kthread_work *work), {
    WRAP_RECURSIVE(worker);
    TRACES_IF_WATCHPOINT(worker);
    SCAN_HEAD_FUNC(struct kthread_worker)(*(TO_UNWATCHED_ADDRESS(worker)));
    WRAP_RECURSIVE(work);
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct kthread_work)(*(TO_UNWATCHED_ADDRESS(work)));
    kern_printk("queue_kthread_work is invoked.\n");
    PRE_WRAPPER_FUNC(worker, work);
    bool ret = queue_kthread_work(worker, work);
    POST_WRAPPER_FUNC(worker, work);
    kern_printk("queue_kthread_work returned.\n");
    TRACES_IF_WATCHPOINT(worker);
    SCAN_HEAD_FUNC(struct kthread_worker)(*(TO_UNWATCHED_ADDRESS(worker)));
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct kthread_work)(*(TO_UNWATCHED_ADDRESS(work)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_seq_stop
#define APP_WRAPPER_FOR_dev_seq_stop
#endif
 
#ifndef APP_WRAPPER_FOR_dev_seq_stop
#define APP_WRAPPER_FOR_dev_seq_stop
FUNCTION_WRAPPER_VOID(dev_seq_stop, (struct seq_file *seq, void *v), {
    WRAP_RECURSIVE(seq);
    TRACES_IF_WATCHPOINT(seq);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(seq)));
    kern_printk("dev_seq_stop is invoked.\n");
    PRE_WRAPPER_FUNC(seq, v);
    dev_seq_stop(seq, v);
    POST_WRAPPER_FUNC(seq, v);
    kern_printk("dev_seq_stop returned.\n");
    TRACES_IF_WATCHPOINT(seq);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(seq)));
})
#endif


#ifndef KERN_ADDR_set_pcie_hotplug_bridge
#define APP_WRAPPER_FOR_set_pcie_hotplug_bridge
#endif
 
#ifndef APP_WRAPPER_FOR_set_pcie_hotplug_bridge
#define APP_WRAPPER_FOR_set_pcie_hotplug_bridge
FUNCTION_WRAPPER_VOID(set_pcie_hotplug_bridge, (struct pci_dev *pdev), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("set_pcie_hotplug_bridge is invoked.\n");
    PRE_WRAPPER_FUNC(pdev);
    set_pcie_hotplug_bridge(pdev);
    POST_WRAPPER_FUNC(pdev);
    kern_printk("set_pcie_hotplug_bridge returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
})
#endif


#ifndef KERN_ADDR_disk_unblock_events
#define APP_WRAPPER_FOR_disk_unblock_events
#endif
 
#ifndef APP_WRAPPER_FOR_disk_unblock_events
#define APP_WRAPPER_FOR_disk_unblock_events
FUNCTION_WRAPPER_VOID(disk_unblock_events, (struct gendisk *disk), {
    WRAP_RECURSIVE(disk);
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    kern_printk("disk_unblock_events is invoked.\n");
    PRE_WRAPPER_FUNC(disk);
    disk_unblock_events(disk);
    POST_WRAPPER_FUNC(disk);
    kern_printk("disk_unblock_events returned.\n");
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
})
#endif


#ifndef KERN_ADDR_per_cpu_ptr_to_phys
#define APP_WRAPPER_FOR_per_cpu_ptr_to_phys
#endif
 
#ifndef APP_WRAPPER_FOR_per_cpu_ptr_to_phys
#define APP_WRAPPER_FOR_per_cpu_ptr_to_phys
FUNCTION_WRAPPER(per_cpu_ptr_to_phys, (void *addr), {
    kern_printk("per_cpu_ptr_to_phys is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    phys_addr_t ret = per_cpu_ptr_to_phys(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("per_cpu_ptr_to_phys returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_skip_free_areas_node
#define APP_WRAPPER_FOR_skip_free_areas_node
#endif
 
#ifndef APP_WRAPPER_FOR_skip_free_areas_node
#define APP_WRAPPER_FOR_skip_free_areas_node
FUNCTION_WRAPPER(skip_free_areas_node, (unsigned int flags, int nid), {
    kern_printk("skip_free_areas_node is invoked.\n");
    PRE_WRAPPER_FUNC(flags, nid);
    bool ret = skip_free_areas_node(flags, nid);
    POST_WRAPPER_FUNC(flags, nid);
    kern_printk("skip_free_areas_node returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_rt_mutex_trylock
#define APP_WRAPPER_FOR_rt_mutex_trylock
#endif
 
#ifndef APP_WRAPPER_FOR_rt_mutex_trylock
#define APP_WRAPPER_FOR_rt_mutex_trylock
FUNCTION_WRAPPER(rt_mutex_trylock, (struct rt_mutex *lock), {
    WRAP_RECURSIVE(lock);
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct rt_mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
    kern_printk("rt_mutex_trylock is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    int ret = rt_mutex_trylock(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("rt_mutex_trylock returned.\n");
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct rt_mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
    return ret;
})
#endif


#ifndef KERN_ADDR_find_task_by_vpid
#define APP_WRAPPER_FOR_find_task_by_vpid
#endif
 
#ifndef APP_WRAPPER_FOR_find_task_by_vpid
#define APP_WRAPPER_FOR_find_task_by_vpid
FUNCTION_WRAPPER(find_task_by_vpid, (pid_t nr), {
    kern_printk("find_task_by_vpid is invoked.\n");
    PRE_WRAPPER_FUNC(nr);
    struct task_struct *ret = find_task_by_vpid(nr);
    POST_WRAPPER_FUNC(nr);
    kern_printk("find_task_by_vpid returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_kfree
#define APP_WRAPPER_FOR_kfree
#endif
 
#ifndef APP_WRAPPER_FOR_kfree
#define APP_WRAPPER_FOR_kfree
FUNCTION_WRAPPER_VOID(kfree, (const void *_arg1), {
    kern_printk("kfree is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    kfree(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("kfree returned.\n");
})
#endif


#ifndef KERN_ADDR_mutex_spin_on_owner
#define APP_WRAPPER_FOR_mutex_spin_on_owner
#endif
 
#ifndef APP_WRAPPER_FOR_mutex_spin_on_owner
#define APP_WRAPPER_FOR_mutex_spin_on_owner
FUNCTION_WRAPPER(mutex_spin_on_owner, (struct mutex *lock, struct task_struct *owner), {
    WRAP_RECURSIVE(lock);
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
    WRAP_RECURSIVE(owner);
    TRACES_IF_WATCHPOINT(owner);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(owner)));
    kern_printk("mutex_spin_on_owner is invoked.\n");
    PRE_WRAPPER_FUNC(lock, owner);
    int ret = mutex_spin_on_owner(lock, owner);
    POST_WRAPPER_FUNC(lock, owner);
    kern_printk("mutex_spin_on_owner returned.\n");
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
    TRACES_IF_WATCHPOINT(owner);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(owner)));
    return ret;
})
#endif


#ifndef KERN_ADDR_default_scale_smt_power
#define APP_WRAPPER_FOR_default_scale_smt_power
#endif
 
#ifndef APP_WRAPPER_FOR_default_scale_smt_power
#define APP_WRAPPER_FOR_default_scale_smt_power
FUNCTION_WRAPPER(default_scale_smt_power, (struct sched_domain *sd, int cpu), {
    kern_printk("default_scale_smt_power is invoked.\n");
    PRE_WRAPPER_FUNC(sd, cpu);
    long ret = default_scale_smt_power(sd, cpu);
    POST_WRAPPER_FUNC(sd, cpu);
    kern_printk("default_scale_smt_power returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sas_port_alloc
#define APP_WRAPPER_FOR_ata_sas_port_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sas_port_alloc
#define APP_WRAPPER_FOR_ata_sas_port_alloc
FUNCTION_WRAPPER(ata_sas_port_alloc, (struct ata_host *_arg1, struct ata_port_info *_arg2, struct Scsi_Host *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ata_host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct ata_port_info)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("ata_sas_port_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    struct ata_port *ret = ata_sas_port_alloc(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("ata_sas_port_alloc returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ata_host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct ata_port_info)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pcie_set_readrq
#define APP_WRAPPER_FOR_pcie_set_readrq
#endif
 
#ifndef APP_WRAPPER_FOR_pcie_set_readrq
#define APP_WRAPPER_FOR_pcie_set_readrq
FUNCTION_WRAPPER(pcie_set_readrq, (struct pci_dev *dev, int rq), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pcie_set_readrq is invoked.\n");
    PRE_WRAPPER_FUNC(dev, rq);
    int ret = pcie_set_readrq(dev, rq);
    POST_WRAPPER_FUNC(dev, rq);
    kern_printk("pcie_set_readrq returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_init_timer_stats
#define APP_WRAPPER_FOR_init_timer_stats
#endif
 
#ifndef APP_WRAPPER_FOR_init_timer_stats
#define APP_WRAPPER_FOR_init_timer_stats
FUNCTION_WRAPPER_VOID(init_timer_stats, (), {
    kern_printk("init_timer_stats is invoked.\n");
    PRE_WRAPPER_FUNC();
    init_timer_stats();
    POST_WRAPPER_FUNC();
    kern_printk("init_timer_stats returned.\n");
})
#endif


#ifndef KERN_ADDR_vfs_fstat
#define APP_WRAPPER_FOR_vfs_fstat
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_fstat
#define APP_WRAPPER_FOR_vfs_fstat
FUNCTION_WRAPPER(vfs_fstat, (unsigned int _arg1, struct kstat *_arg2), {
    kern_printk("vfs_fstat is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = vfs_fstat(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("vfs_fstat returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___rtnl_af_unregister
#define APP_WRAPPER_FOR___rtnl_af_unregister
#endif
 
#ifndef APP_WRAPPER_FOR___rtnl_af_unregister
#define APP_WRAPPER_FOR___rtnl_af_unregister
FUNCTION_WRAPPER_VOID(__rtnl_af_unregister, (struct rtnl_af_ops *ops), {
    WRAP_RECURSIVE(ops);
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct rtnl_af_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    kern_printk("__rtnl_af_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(ops);
    __rtnl_af_unregister(ops);
    POST_WRAPPER_FUNC(ops);
    kern_printk("__rtnl_af_unregister returned.\n");
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct rtnl_af_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
})
#endif


#ifndef KERN_ADDR_numa_add_cpu
#define APP_WRAPPER_FOR_numa_add_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_numa_add_cpu
#define APP_WRAPPER_FOR_numa_add_cpu
FUNCTION_WRAPPER_VOID(numa_add_cpu, (int cpu), {
    kern_printk("numa_add_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    numa_add_cpu(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("numa_add_cpu returned.\n");
})
#endif


#ifndef KERN_ADDR_register_blkdev
#define APP_WRAPPER_FOR_register_blkdev
#endif
 
#ifndef APP_WRAPPER_FOR_register_blkdev
#define APP_WRAPPER_FOR_register_blkdev
FUNCTION_WRAPPER(register_blkdev, (unsigned int _arg1, const char *_arg2), {
    kern_printk("register_blkdev is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = register_blkdev(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("register_blkdev returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_follow_pfn
#define APP_WRAPPER_FOR_follow_pfn
#endif
 
#ifndef APP_WRAPPER_FOR_follow_pfn
#define APP_WRAPPER_FOR_follow_pfn
FUNCTION_WRAPPER(follow_pfn, (struct vm_area_struct *vma, unsigned long address, unsigned long *pfn), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("follow_pfn is invoked.\n");
    PRE_WRAPPER_FUNC(vma, address, pfn);
    int ret = follow_pfn(vma, address, pfn);
    POST_WRAPPER_FUNC(vma, address, pfn);
    kern_printk("follow_pfn returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pmd_clear_bad
#define APP_WRAPPER_FOR_pmd_clear_bad
#endif
 
#ifndef APP_WRAPPER_FOR_pmd_clear_bad
#define APP_WRAPPER_FOR_pmd_clear_bad
FUNCTION_WRAPPER_VOID(pmd_clear_bad, (pmd_t *_arg1), {
    kern_printk("pmd_clear_bad is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    pmd_clear_bad(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("pmd_clear_bad returned.\n");
})
#endif


#ifndef KERN_ADDR_skb_copy_datagram_iovec
#define APP_WRAPPER_FOR_skb_copy_datagram_iovec
#endif
 
#ifndef APP_WRAPPER_FOR_skb_copy_datagram_iovec
#define APP_WRAPPER_FOR_skb_copy_datagram_iovec
FUNCTION_WRAPPER(skb_copy_datagram_iovec, (const struct sk_buff *from, int offset, struct iovec *to, int size), {
    WRAP_RECURSIVE(from);
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(const struct sk_buff)(*(TO_UNWATCHED_ADDRESS(from)));
    kern_printk("skb_copy_datagram_iovec is invoked.\n");
    PRE_WRAPPER_FUNC(from, offset, to, size);
    int ret = skb_copy_datagram_iovec(from, offset, to, size);
    POST_WRAPPER_FUNC(from, offset, to, size);
    kern_printk("skb_copy_datagram_iovec returned.\n");
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(const struct sk_buff)(*(TO_UNWATCHED_ADDRESS(from)));
    return ret;
})
#endif


#ifndef KERN_ADDR_genphy_restart_aneg
#define APP_WRAPPER_FOR_genphy_restart_aneg
#endif
 
#ifndef APP_WRAPPER_FOR_genphy_restart_aneg
#define APP_WRAPPER_FOR_genphy_restart_aneg
FUNCTION_WRAPPER(genphy_restart_aneg, (struct phy_device *phydev), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    kern_printk("genphy_restart_aneg is invoked.\n");
    PRE_WRAPPER_FUNC(phydev);
    int ret = genphy_restart_aneg(phydev);
    POST_WRAPPER_FUNC(phydev);
    kern_printk("genphy_restart_aneg returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_do_mount
#define APP_WRAPPER_FOR_do_mount
#endif
 
#ifndef APP_WRAPPER_FOR_do_mount
#define APP_WRAPPER_FOR_do_mount
FUNCTION_WRAPPER(do_mount, (const char *_arg1, const char *_arg2, const char *_arg3, unsigned long _arg4, void *_arg5), {
    kern_printk("do_mount is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    long ret = do_mount(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("do_mount returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_simple_getattr
#define APP_WRAPPER_FOR_simple_getattr
#endif
 
#ifndef APP_WRAPPER_FOR_simple_getattr
#define APP_WRAPPER_FOR_simple_getattr
FUNCTION_WRAPPER(simple_getattr, (struct vfsmount *_arg1, struct dentry *_arg2, struct kstat *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("simple_getattr is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = simple_getattr(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("simple_getattr returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR___bread
#define APP_WRAPPER_FOR___bread
#endif
 
#ifndef APP_WRAPPER_FOR___bread
#define APP_WRAPPER_FOR___bread
FUNCTION_WRAPPER(__bread, (struct block_device *_arg1, sector_t block, unsigned int size), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__bread is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, block, size);
    struct buffer_head *ret = __bread(_arg1, block, size);
    POST_WRAPPER_FUNC(_arg1, block, size);
    kern_printk("__bread returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_close
#define APP_WRAPPER_FOR_dev_close
#endif
 
#ifndef APP_WRAPPER_FOR_dev_close
#define APP_WRAPPER_FOR_dev_close
FUNCTION_WRAPPER(dev_close, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_close is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = dev_close(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_close returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_queue_err_skb
#define APP_WRAPPER_FOR_sock_queue_err_skb
#endif
 
#ifndef APP_WRAPPER_FOR_sock_queue_err_skb
#define APP_WRAPPER_FOR_sock_queue_err_skb
FUNCTION_WRAPPER(sock_queue_err_skb, (struct sock *sk, struct sk_buff *skb), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("sock_queue_err_skb is invoked.\n");
    PRE_WRAPPER_FUNC(sk, skb);
    int ret = sock_queue_err_skb(sk, skb);
    POST_WRAPPER_FUNC(sk, skb);
    kern_printk("sock_queue_err_skb returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dma_set_mask
#define APP_WRAPPER_FOR_dma_set_mask
#endif
 
#ifndef APP_WRAPPER_FOR_dma_set_mask
#define APP_WRAPPER_FOR_dma_set_mask
FUNCTION_WRAPPER(dma_set_mask, (struct device *dev, u64 mask), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dma_set_mask is invoked.\n");
    PRE_WRAPPER_FUNC(dev, mask);
    int ret = dma_set_mask(dev, mask);
    POST_WRAPPER_FUNC(dev, mask);
    kern_printk("dma_set_mask returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_release_pages
#define APP_WRAPPER_FOR_release_pages
#endif
 
#ifndef APP_WRAPPER_FOR_release_pages
#define APP_WRAPPER_FOR_release_pages
FUNCTION_WRAPPER_VOID(release_pages, (struct page **pages, int nr, int cold), {
    WRAP_RECURSIVE(pages);
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    kern_printk("release_pages is invoked.\n");
    PRE_WRAPPER_FUNC(pages, nr, cold);
    release_pages(pages, nr, cold);
    POST_WRAPPER_FUNC(pages, nr, cold);
    kern_printk("release_pages returned.\n");
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
})
#endif


#ifndef KERN_ADDR_fcntl_setlk
#define APP_WRAPPER_FOR_fcntl_setlk
#endif
 
#ifndef APP_WRAPPER_FOR_fcntl_setlk
#define APP_WRAPPER_FOR_fcntl_setlk
FUNCTION_WRAPPER(fcntl_setlk, (unsigned int _arg1, struct file *_arg2, unsigned int _arg3, struct flock *_arg4), {
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("fcntl_setlk is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = fcntl_setlk(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("fcntl_setlk returned.\n");
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sched_group_set_rt_period
#define APP_WRAPPER_FOR_sched_group_set_rt_period
#endif
 
#ifndef APP_WRAPPER_FOR_sched_group_set_rt_period
#define APP_WRAPPER_FOR_sched_group_set_rt_period
FUNCTION_WRAPPER(sched_group_set_rt_period, (struct task_group *tg, long rt_period_us), {
    kern_printk("sched_group_set_rt_period is invoked.\n");
    PRE_WRAPPER_FUNC(tg, rt_period_us);
    int ret = sched_group_set_rt_period(tg, rt_period_us);
    POST_WRAPPER_FUNC(tg, rt_period_us);
    kern_printk("sched_group_set_rt_period returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_tasklet_kill_immediate
#define APP_WRAPPER_FOR_tasklet_kill_immediate
#endif
 
#ifndef APP_WRAPPER_FOR_tasklet_kill_immediate
#define APP_WRAPPER_FOR_tasklet_kill_immediate
FUNCTION_WRAPPER_VOID(tasklet_kill_immediate, (struct tasklet_struct *t, unsigned int cpu), {
    WRAP_RECURSIVE(t);
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct tasklet_struct)(*(TO_UNWATCHED_ADDRESS(t)));
    kern_printk("tasklet_kill_immediate is invoked.\n");
    PRE_WRAPPER_FUNC(t, cpu);
    tasklet_kill_immediate(t, cpu);
    POST_WRAPPER_FUNC(t, cpu);
    kern_printk("tasklet_kill_immediate returned.\n");
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct tasklet_struct)(*(TO_UNWATCHED_ADDRESS(t)));
})
#endif


#ifndef KERN_ADDR_schedule_hrtimeout_range_clock
#define APP_WRAPPER_FOR_schedule_hrtimeout_range_clock
#endif
 
#ifndef APP_WRAPPER_FOR_schedule_hrtimeout_range_clock
#define APP_WRAPPER_FOR_schedule_hrtimeout_range_clock
FUNCTION_WRAPPER(schedule_hrtimeout_range_clock, (ktime_t *expires, unsigned long delta, const enum hrtimer_mode mode, int clock), {
    kern_printk("schedule_hrtimeout_range_clock is invoked.\n");
    PRE_WRAPPER_FUNC(expires, delta, mode, clock);
    int ret = schedule_hrtimeout_range_clock(expires, delta, mode, clock);
    POST_WRAPPER_FUNC(expires, delta, mode, clock);
    kern_printk("schedule_hrtimeout_range_clock returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_hrtimer_start_range_ns
#define APP_WRAPPER_FOR_hrtimer_start_range_ns
#endif
 
#ifndef APP_WRAPPER_FOR_hrtimer_start_range_ns
#define APP_WRAPPER_FOR_hrtimer_start_range_ns
FUNCTION_WRAPPER(hrtimer_start_range_ns, (struct hrtimer *timer, ktime_t tim, unsigned long range_ns, const enum hrtimer_mode mode), {
    WRAP_RECURSIVE(timer);
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct hrtimer)(*(TO_UNWATCHED_ADDRESS(timer)));
    kern_printk("hrtimer_start_range_ns is invoked.\n");
    PRE_WRAPPER_FUNC(timer, tim, range_ns, mode);
    int ret = hrtimer_start_range_ns(timer, tim, range_ns, mode);
    POST_WRAPPER_FUNC(timer, tim, range_ns, mode);
    kern_printk("hrtimer_start_range_ns returned.\n");
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct hrtimer)(*(TO_UNWATCHED_ADDRESS(timer)));
    return ret;
})
#endif


#ifndef KERN_ADDR_xattr_getsecurity
#define APP_WRAPPER_FOR_xattr_getsecurity
#endif
 
#ifndef APP_WRAPPER_FOR_xattr_getsecurity
#define APP_WRAPPER_FOR_xattr_getsecurity
FUNCTION_WRAPPER(xattr_getsecurity, (struct inode *_arg1, const char *_arg2, void *_arg3, size_t _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("xattr_getsecurity is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    ssize_t ret = xattr_getsecurity(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("xattr_getsecurity returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_setup_memory_map
#define APP_WRAPPER_FOR_setup_memory_map
#endif
 
#ifndef APP_WRAPPER_FOR_setup_memory_map
#define APP_WRAPPER_FOR_setup_memory_map
FUNCTION_WRAPPER_VOID(setup_memory_map, (), {
    kern_printk("setup_memory_map is invoked.\n");
    PRE_WRAPPER_FUNC();
    setup_memory_map();
    POST_WRAPPER_FUNC();
    kern_printk("setup_memory_map returned.\n");
})
#endif


#ifndef KERN_ADDR_input_ff_upload
#define APP_WRAPPER_FOR_input_ff_upload
#endif
 
#ifndef APP_WRAPPER_FOR_input_ff_upload
#define APP_WRAPPER_FOR_input_ff_upload
FUNCTION_WRAPPER(input_ff_upload, (struct input_dev *dev, struct ff_effect *effect, struct file *file), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("input_ff_upload is invoked.\n");
    PRE_WRAPPER_FUNC(dev, effect, file);
    int ret = input_ff_upload(dev, effect, file);
    POST_WRAPPER_FUNC(dev, effect, file);
    kern_printk("input_ff_upload returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_in_group_p
#define APP_WRAPPER_FOR_in_group_p
#endif
 
#ifndef APP_WRAPPER_FOR_in_group_p
#define APP_WRAPPER_FOR_in_group_p
FUNCTION_WRAPPER(in_group_p, (kgid_t _arg1), {
    kern_printk("in_group_p is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = in_group_p(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("in_group_p returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_save_state
#define APP_WRAPPER_FOR_pci_save_state
#endif
 
#ifndef APP_WRAPPER_FOR_pci_save_state
#define APP_WRAPPER_FOR_pci_save_state
FUNCTION_WRAPPER(pci_save_state, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_save_state is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pci_save_state(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_save_state returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR___vmalloc
#define APP_WRAPPER_FOR___vmalloc
#endif
 
#ifndef APP_WRAPPER_FOR___vmalloc
#define APP_WRAPPER_FOR___vmalloc
FUNCTION_WRAPPER(__vmalloc, (unsigned long size, gfp_t gfp_mask, pgprot_t prot), {
    kern_printk("__vmalloc is invoked.\n");
    PRE_WRAPPER_FUNC(size, gfp_mask, prot);
    void *ret = __vmalloc(size, gfp_mask, prot);
    POST_WRAPPER_FUNC(size, gfp_mask, prot);
    kern_printk("__vmalloc returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pm_generic_suspend_noirq
#define APP_WRAPPER_FOR_pm_generic_suspend_noirq
#endif
 
#ifndef APP_WRAPPER_FOR_pm_generic_suspend_noirq
#define APP_WRAPPER_FOR_pm_generic_suspend_noirq
FUNCTION_WRAPPER(pm_generic_suspend_noirq, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pm_generic_suspend_noirq is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pm_generic_suspend_noirq(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pm_generic_suspend_noirq returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_prepare_sleep
#define APP_WRAPPER_FOR_acpi_os_prepare_sleep
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_prepare_sleep
#define APP_WRAPPER_FOR_acpi_os_prepare_sleep
FUNCTION_WRAPPER(acpi_os_prepare_sleep, (u8 sleep_state, u32 pm1a_control, u32 pm1b_control), {
    kern_printk("acpi_os_prepare_sleep is invoked.\n");
    PRE_WRAPPER_FUNC(sleep_state, pm1a_control, pm1b_control);
    acpi_status ret = acpi_os_prepare_sleep(sleep_state, pm1a_control, pm1b_control);
    POST_WRAPPER_FUNC(sleep_state, pm1a_control, pm1b_control);
    kern_printk("acpi_os_prepare_sleep returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_scsi_queue_work
#define APP_WRAPPER_FOR_scsi_queue_work
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_queue_work
#define APP_WRAPPER_FOR_scsi_queue_work
FUNCTION_WRAPPER(scsi_queue_work, (struct Scsi_Host *_arg1, struct work_struct *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("scsi_queue_work is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = scsi_queue_work(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("scsi_queue_work returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_prot_inuse_add
#define APP_WRAPPER_FOR_sock_prot_inuse_add
#endif
 
#ifndef APP_WRAPPER_FOR_sock_prot_inuse_add
#define APP_WRAPPER_FOR_sock_prot_inuse_add
FUNCTION_WRAPPER_VOID(sock_prot_inuse_add, (struct net *net, struct proto *prot, int inc), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    WRAP_RECURSIVE(prot);
    TRACES_IF_WATCHPOINT(prot);
    SCAN_HEAD_FUNC(struct proto)(*(TO_UNWATCHED_ADDRESS(prot)));
    kern_printk("sock_prot_inuse_add is invoked.\n");
    PRE_WRAPPER_FUNC(net, prot, inc);
    sock_prot_inuse_add(net, prot, inc);
    POST_WRAPPER_FUNC(net, prot, inc);
    kern_printk("sock_prot_inuse_add returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    TRACES_IF_WATCHPOINT(prot);
    SCAN_HEAD_FUNC(struct proto)(*(TO_UNWATCHED_ADDRESS(prot)));
})
#endif


#ifndef KERN_ADDR_move_page_tables
#define APP_WRAPPER_FOR_move_page_tables
#endif
 
#ifndef APP_WRAPPER_FOR_move_page_tables
#define APP_WRAPPER_FOR_move_page_tables
FUNCTION_WRAPPER(move_page_tables, (struct vm_area_struct *vma, unsigned long old_addr, struct vm_area_struct *new_vma, unsigned long new_addr, unsigned long len, bool need_rmap_locks), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    WRAP_RECURSIVE(new_vma);
    TRACES_IF_WATCHPOINT(new_vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(new_vma)));
    kern_printk("move_page_tables is invoked.\n");
    PRE_WRAPPER_FUNC(vma, old_addr, new_vma, new_addr, len, need_rmap_locks);
    long ret = move_page_tables(vma, old_addr, new_vma, new_addr, len, need_rmap_locks);
    POST_WRAPPER_FUNC(vma, old_addr, new_vma, new_addr, len, need_rmap_locks);
    kern_printk("move_page_tables returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    TRACES_IF_WATCHPOINT(new_vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(new_vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kmemdup
#define APP_WRAPPER_FOR_kmemdup
#endif
 
#ifndef APP_WRAPPER_FOR_kmemdup
#define APP_WRAPPER_FOR_kmemdup
FUNCTION_WRAPPER(kmemdup, (const void *src, size_t len, gfp_t gfp), {
    kern_printk("kmemdup is invoked.\n");
    PRE_WRAPPER_FUNC(src, len, gfp);
    void *ret = kmemdup(src, len, gfp);
    POST_WRAPPER_FUNC(src, len, gfp);
    kern_printk("kmemdup returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_eth_rebuild_header
#define APP_WRAPPER_FOR_eth_rebuild_header
#endif
 
#ifndef APP_WRAPPER_FOR_eth_rebuild_header
#define APP_WRAPPER_FOR_eth_rebuild_header
FUNCTION_WRAPPER(eth_rebuild_header, (struct sk_buff *skb), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("eth_rebuild_header is invoked.\n");
    PRE_WRAPPER_FUNC(skb);
    int ret = eth_rebuild_header(skb);
    POST_WRAPPER_FUNC(skb);
    kern_printk("eth_rebuild_header returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cred_alloc_blank
#define APP_WRAPPER_FOR_cred_alloc_blank
#endif
 
#ifndef APP_WRAPPER_FOR_cred_alloc_blank
#define APP_WRAPPER_FOR_cred_alloc_blank
FUNCTION_WRAPPER(cred_alloc_blank, (), {
    kern_printk("cred_alloc_blank is invoked.\n");
    PRE_WRAPPER_FUNC();
    struct cred *ret = cred_alloc_blank();
    POST_WRAPPER_FUNC();
    kern_printk("cred_alloc_blank returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_set_promiscuity
#define APP_WRAPPER_FOR_dev_set_promiscuity
#endif
 
#ifndef APP_WRAPPER_FOR_dev_set_promiscuity
#define APP_WRAPPER_FOR_dev_set_promiscuity
FUNCTION_WRAPPER(dev_set_promiscuity, (struct net_device *dev, int inc), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_set_promiscuity is invoked.\n");
    PRE_WRAPPER_FUNC(dev, inc);
    int ret = dev_set_promiscuity(dev, inc);
    POST_WRAPPER_FUNC(dev, inc);
    kern_printk("dev_set_promiscuity returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_register_target
#define APP_WRAPPER_FOR_dm_register_target
#endif
 
#ifndef APP_WRAPPER_FOR_dm_register_target
#define APP_WRAPPER_FOR_dm_register_target
FUNCTION_WRAPPER(dm_register_target, (struct target_type *t), {
    WRAP_RECURSIVE(t);
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct target_type)(*(TO_UNWATCHED_ADDRESS(t)));
    kern_printk("dm_register_target is invoked.\n");
    PRE_WRAPPER_FUNC(t);
    int ret = dm_register_target(t);
    POST_WRAPPER_FUNC(t);
    kern_printk("dm_register_target returned.\n");
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct target_type)(*(TO_UNWATCHED_ADDRESS(t)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sleep_on_timeout
#define APP_WRAPPER_FOR_sleep_on_timeout
#endif
 
#ifndef APP_WRAPPER_FOR_sleep_on_timeout
#define APP_WRAPPER_FOR_sleep_on_timeout
FUNCTION_WRAPPER(sleep_on_timeout, (wait_queue_head_t *q, signed long timeout), {
    kern_printk("sleep_on_timeout is invoked.\n");
    PRE_WRAPPER_FUNC(q, timeout);
    long ret = sleep_on_timeout(q, timeout);
    POST_WRAPPER_FUNC(q, timeout);
    kern_printk("sleep_on_timeout returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_bus_power_manageable
#define APP_WRAPPER_FOR_acpi_bus_power_manageable
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_bus_power_manageable
#define APP_WRAPPER_FOR_acpi_bus_power_manageable
FUNCTION_WRAPPER(acpi_bus_power_manageable, (acpi_handle handle), {
    kern_printk("acpi_bus_power_manageable is invoked.\n");
    PRE_WRAPPER_FUNC(handle);
    bool ret = acpi_bus_power_manageable(handle);
    POST_WRAPPER_FUNC(handle);
    kern_printk("acpi_bus_power_manageable returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_vm_mmap
#define APP_WRAPPER_FOR_vm_mmap
#endif
 
#ifndef APP_WRAPPER_FOR_vm_mmap
#define APP_WRAPPER_FOR_vm_mmap
FUNCTION_WRAPPER(vm_mmap, (struct file *_arg1, unsigned long _arg2, unsigned long _arg3, unsigned long _arg4, unsigned long _arg5, unsigned long _arg6), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("vm_mmap is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
    long ret = vm_mmap(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
    kern_printk("vm_mmap returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_create_kern
#define APP_WRAPPER_FOR_sock_create_kern
#endif
 
#ifndef APP_WRAPPER_FOR_sock_create_kern
#define APP_WRAPPER_FOR_sock_create_kern
FUNCTION_WRAPPER(sock_create_kern, (int family, int type, int proto, struct socket **res), {
    WRAP_RECURSIVE(res);
    TRACES_IF_WATCHPOINT(res);
    SCAN_HEAD_FUNC(struct socket *)(*(TO_UNWATCHED_ADDRESS(res)));
    kern_printk("sock_create_kern is invoked.\n");
    PRE_WRAPPER_FUNC(family, type, proto, res);
    int ret = sock_create_kern(family, type, proto, res);
    POST_WRAPPER_FUNC(family, type, proto, res);
    kern_printk("sock_create_kern returned.\n");
    TRACES_IF_WATCHPOINT(res);
    SCAN_HEAD_FUNC(struct socket *)(*(TO_UNWATCHED_ADDRESS(res)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pcibios_set_irq_routing
#define APP_WRAPPER_FOR_pcibios_set_irq_routing
#endif
 
#ifndef APP_WRAPPER_FOR_pcibios_set_irq_routing
#define APP_WRAPPER_FOR_pcibios_set_irq_routing
FUNCTION_WRAPPER(pcibios_set_irq_routing, (struct pci_dev *dev, int pin, int irq), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pcibios_set_irq_routing is invoked.\n");
    PRE_WRAPPER_FUNC(dev, pin, irq);
    int ret = pcibios_set_irq_routing(dev, pin, irq);
    POST_WRAPPER_FUNC(dev, pin, irq);
    kern_printk("pcibios_set_irq_routing returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_clean_sort_range
#define APP_WRAPPER_FOR_clean_sort_range
#endif
 
#ifndef APP_WRAPPER_FOR_clean_sort_range
#define APP_WRAPPER_FOR_clean_sort_range
FUNCTION_WRAPPER(clean_sort_range, (struct range *range, int az), {
    kern_printk("clean_sort_range is invoked.\n");
    PRE_WRAPPER_FUNC(range, az);
    int ret = clean_sort_range(range, az);
    POST_WRAPPER_FUNC(range, az);
    kern_printk("clean_sort_range returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_settimeofday
#define APP_WRAPPER_FOR_compat_sys_settimeofday
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_settimeofday
#define APP_WRAPPER_FOR_compat_sys_settimeofday
FUNCTION_WRAPPER(compat_sys_settimeofday, (struct compat_timeval *tv, struct timezone *tz), {
    kern_printk("compat_sys_settimeofday is invoked.\n");
    PRE_WRAPPER_FUNC(tv, tz);
    long ret = compat_sys_settimeofday(tv, tz);
    POST_WRAPPER_FUNC(tv, tz);
    kern_printk("compat_sys_settimeofday returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_device_shutdown
#define APP_WRAPPER_FOR_device_shutdown
#endif
 
#ifndef APP_WRAPPER_FOR_device_shutdown
#define APP_WRAPPER_FOR_device_shutdown
FUNCTION_WRAPPER_VOID(device_shutdown, (), {
    kern_printk("device_shutdown is invoked.\n");
    PRE_WRAPPER_FUNC();
    device_shutdown();
    POST_WRAPPER_FUNC();
    kern_printk("device_shutdown returned.\n");
})
#endif


#ifndef KERN_ADDR_regs_query_register_offset
#define APP_WRAPPER_FOR_regs_query_register_offset
#endif
 
#ifndef APP_WRAPPER_FOR_regs_query_register_offset
#define APP_WRAPPER_FOR_regs_query_register_offset
FUNCTION_WRAPPER(regs_query_register_offset, (const char *name), {
    kern_printk("regs_query_register_offset is invoked.\n");
    PRE_WRAPPER_FUNC(name);
    int ret = regs_query_register_offset(name);
    POST_WRAPPER_FUNC(name);
    kern_printk("regs_query_register_offset returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_get_vfs_caps_from_disk
#define APP_WRAPPER_FOR_get_vfs_caps_from_disk
#endif
 
#ifndef APP_WRAPPER_FOR_get_vfs_caps_from_disk
#define APP_WRAPPER_FOR_get_vfs_caps_from_disk
FUNCTION_WRAPPER(get_vfs_caps_from_disk, (const struct dentry *dentry, struct cpu_vfs_cap_data *cpu_caps), {
    WRAP_RECURSIVE(dentry);
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(const struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    kern_printk("get_vfs_caps_from_disk is invoked.\n");
    PRE_WRAPPER_FUNC(dentry, cpu_caps);
    int ret = get_vfs_caps_from_disk(dentry, cpu_caps);
    POST_WRAPPER_FUNC(dentry, cpu_caps);
    kern_printk("get_vfs_caps_from_disk returned.\n");
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(const struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bus_get_kset
#define APP_WRAPPER_FOR_bus_get_kset
#endif
 
#ifndef APP_WRAPPER_FOR_bus_get_kset
#define APP_WRAPPER_FOR_bus_get_kset
FUNCTION_WRAPPER(bus_get_kset, (struct bus_type *bus), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("bus_get_kset is invoked.\n");
    PRE_WRAPPER_FUNC(bus);
    struct kset *ret = bus_get_kset(bus);
    POST_WRAPPER_FUNC(bus);
    kern_printk("bus_get_kset returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_init_dummy_netdev
#define APP_WRAPPER_FOR_init_dummy_netdev
#endif
 
#ifndef APP_WRAPPER_FOR_init_dummy_netdev
#define APP_WRAPPER_FOR_init_dummy_netdev
FUNCTION_WRAPPER(init_dummy_netdev, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("init_dummy_netdev is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = init_dummy_netdev(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("init_dummy_netdev returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mempool_alloc_slab
#define APP_WRAPPER_FOR_mempool_alloc_slab
#endif
 
#ifndef APP_WRAPPER_FOR_mempool_alloc_slab
#define APP_WRAPPER_FOR_mempool_alloc_slab
FUNCTION_WRAPPER(mempool_alloc_slab, (gfp_t gfp_mask, void *pool_data), {
    kern_printk("mempool_alloc_slab is invoked.\n");
    PRE_WRAPPER_FUNC(gfp_mask, pool_data);
    void *ret = mempool_alloc_slab(gfp_mask, pool_data);
    POST_WRAPPER_FUNC(gfp_mask, pool_data);
    kern_printk("mempool_alloc_slab returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_nr_free_pagecache_pages
#define APP_WRAPPER_FOR_nr_free_pagecache_pages
#endif
 
#ifndef APP_WRAPPER_FOR_nr_free_pagecache_pages
#define APP_WRAPPER_FOR_nr_free_pagecache_pages
FUNCTION_WRAPPER(nr_free_pagecache_pages, (), {
    kern_printk("nr_free_pagecache_pages is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = nr_free_pagecache_pages();
    POST_WRAPPER_FUNC();
    kern_printk("nr_free_pagecache_pages returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_rdmsr_safe_regs
#define APP_WRAPPER_FOR_rdmsr_safe_regs
#endif
 
#ifndef APP_WRAPPER_FOR_rdmsr_safe_regs
#define APP_WRAPPER_FOR_rdmsr_safe_regs
FUNCTION_WRAPPER(rdmsr_safe_regs, (u32 regs[8]), {
    kern_printk("rdmsr_safe_regs is invoked.\n");
    PRE_WRAPPER_FUNC(regs);
    int ret = rdmsr_safe_regs(regs);
    POST_WRAPPER_FUNC(regs);
    kern_printk("rdmsr_safe_regs returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___reqsk_queue_destroy
#define APP_WRAPPER_FOR___reqsk_queue_destroy
#endif
 
#ifndef APP_WRAPPER_FOR___reqsk_queue_destroy
#define APP_WRAPPER_FOR___reqsk_queue_destroy
FUNCTION_WRAPPER_VOID(__reqsk_queue_destroy, (struct request_sock_queue *queue), {
    WRAP_RECURSIVE(queue);
    TRACES_IF_WATCHPOINT(queue);
    SCAN_HEAD_FUNC(struct request_sock_queue)(*(TO_UNWATCHED_ADDRESS(queue)));
    kern_printk("__reqsk_queue_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(queue);
    __reqsk_queue_destroy(queue);
    POST_WRAPPER_FUNC(queue);
    kern_printk("__reqsk_queue_destroy returned.\n");
    TRACES_IF_WATCHPOINT(queue);
    SCAN_HEAD_FUNC(struct request_sock_queue)(*(TO_UNWATCHED_ADDRESS(queue)));
})
#endif


#ifndef KERN_ADDR_native_smp_prepare_cpus
#define APP_WRAPPER_FOR_native_smp_prepare_cpus
#endif
 
#ifndef APP_WRAPPER_FOR_native_smp_prepare_cpus
#define APP_WRAPPER_FOR_native_smp_prepare_cpus
FUNCTION_WRAPPER_VOID(native_smp_prepare_cpus, (unsigned int max_cpus), {
    kern_printk("native_smp_prepare_cpus is invoked.\n");
    PRE_WRAPPER_FUNC(max_cpus);
    native_smp_prepare_cpus(max_cpus);
    POST_WRAPPER_FUNC(max_cpus);
    kern_printk("native_smp_prepare_cpus returned.\n");
})
#endif


#ifndef KERN_ADDR_ec_read
#define APP_WRAPPER_FOR_ec_read
#endif
 
#ifndef APP_WRAPPER_FOR_ec_read
#define APP_WRAPPER_FOR_ec_read
FUNCTION_WRAPPER(ec_read, (u8 addr, u8 *val), {
    kern_printk("ec_read is invoked.\n");
    PRE_WRAPPER_FUNC(addr, val);
    int ret = ec_read(addr, val);
    POST_WRAPPER_FUNC(addr, val);
    kern_printk("ec_read returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ida_get_new
#define APP_WRAPPER_FOR_ida_get_new
#endif
 
#ifndef APP_WRAPPER_FOR_ida_get_new
#define APP_WRAPPER_FOR_ida_get_new
FUNCTION_WRAPPER(ida_get_new, (struct ida *ida, int *p_id), {
    WRAP_RECURSIVE(ida);
    TRACES_IF_WATCHPOINT(ida);
    SCAN_HEAD_FUNC(struct ida)(*(TO_UNWATCHED_ADDRESS(ida)));
    kern_printk("ida_get_new is invoked.\n");
    PRE_WRAPPER_FUNC(ida, p_id);
    int ret = ida_get_new(ida, p_id);
    POST_WRAPPER_FUNC(ida, p_id);
    kern_printk("ida_get_new returned.\n");
    TRACES_IF_WATCHPOINT(ida);
    SCAN_HEAD_FUNC(struct ida)(*(TO_UNWATCHED_ADDRESS(ida)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_llseek
#define APP_WRAPPER_FOR_vfs_llseek
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_llseek
#define APP_WRAPPER_FOR_vfs_llseek
FUNCTION_WRAPPER(vfs_llseek, (struct file *file, loff_t offset, int whence), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("vfs_llseek is invoked.\n");
    PRE_WRAPPER_FUNC(file, offset, whence);
    loff_t ret = vfs_llseek(file, offset, whence);
    POST_WRAPPER_FUNC(file, offset, whence);
    kern_printk("vfs_llseek returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_std_postreset
#define APP_WRAPPER_FOR_ata_std_postreset
#endif
 
#ifndef APP_WRAPPER_FOR_ata_std_postreset
#define APP_WRAPPER_FOR_ata_std_postreset
FUNCTION_WRAPPER_VOID(ata_std_postreset, (struct ata_link *link, unsigned int *classes), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    kern_printk("ata_std_postreset is invoked.\n");
    PRE_WRAPPER_FUNC(link, classes);
    ata_std_postreset(link, classes);
    POST_WRAPPER_FUNC(link, classes);
    kern_printk("ata_std_postreset returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
})
#endif


#ifndef KERN_ADDR_io_apic_set_pci_routing
#define APP_WRAPPER_FOR_io_apic_set_pci_routing
#endif
 
#ifndef APP_WRAPPER_FOR_io_apic_set_pci_routing
#define APP_WRAPPER_FOR_io_apic_set_pci_routing
FUNCTION_WRAPPER(io_apic_set_pci_routing, (struct device *dev, int irq, struct io_apic_irq_attr *irq_attr), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("io_apic_set_pci_routing is invoked.\n");
    PRE_WRAPPER_FUNC(dev, irq, irq_attr);
    int ret = io_apic_set_pci_routing(dev, irq, irq_attr);
    POST_WRAPPER_FUNC(dev, irq, irq_attr);
    kern_printk("io_apic_set_pci_routing returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR___bad_unaligned_access_size
#define APP_WRAPPER_FOR___bad_unaligned_access_size
#endif
 
#ifndef APP_WRAPPER_FOR___bad_unaligned_access_size
#define APP_WRAPPER_FOR___bad_unaligned_access_size
FUNCTION_WRAPPER_VOID(__bad_unaligned_access_size, (), {
    kern_printk("__bad_unaligned_access_size is invoked.\n");
    PRE_WRAPPER_FUNC();
    __bad_unaligned_access_size();
    POST_WRAPPER_FUNC();
    kern_printk("__bad_unaligned_access_size returned.\n");
})
#endif


#ifndef KERN_ADDR_simple_attr_read
#define APP_WRAPPER_FOR_simple_attr_read
#endif
 
#ifndef APP_WRAPPER_FOR_simple_attr_read
#define APP_WRAPPER_FOR_simple_attr_read
FUNCTION_WRAPPER(simple_attr_read, (struct file *file, char *buf, size_t len, loff_t *ppos), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("simple_attr_read is invoked.\n");
    PRE_WRAPPER_FUNC(file, buf, len, ppos);
    ssize_t ret = simple_attr_read(file, buf, len, ppos);
    POST_WRAPPER_FUNC(file, buf, len, ppos);
    kern_printk("simple_attr_read returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cdrom_open
#define APP_WRAPPER_FOR_cdrom_open
#endif
 
#ifndef APP_WRAPPER_FOR_cdrom_open
#define APP_WRAPPER_FOR_cdrom_open
FUNCTION_WRAPPER(cdrom_open, (struct cdrom_device_info *cdi, struct block_device *bdev, fmode_t mode), {
    WRAP_RECURSIVE(cdi);
    TRACES_IF_WATCHPOINT(cdi);
    SCAN_HEAD_FUNC(struct cdrom_device_info)(*(TO_UNWATCHED_ADDRESS(cdi)));
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    kern_printk("cdrom_open is invoked.\n");
    PRE_WRAPPER_FUNC(cdi, bdev, mode);
    int ret = cdrom_open(cdi, bdev, mode);
    POST_WRAPPER_FUNC(cdi, bdev, mode);
    kern_printk("cdrom_open returned.\n");
    TRACES_IF_WATCHPOINT(cdi);
    SCAN_HEAD_FUNC(struct cdrom_device_info)(*(TO_UNWATCHED_ADDRESS(cdi)));
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_part_inflight_show
#define APP_WRAPPER_FOR_part_inflight_show
#endif
 
#ifndef APP_WRAPPER_FOR_part_inflight_show
#define APP_WRAPPER_FOR_part_inflight_show
FUNCTION_WRAPPER(part_inflight_show, (struct device *dev, struct device_attribute *attr, char *buf), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(attr);
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(struct device_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    kern_printk("part_inflight_show is invoked.\n");
    PRE_WRAPPER_FUNC(dev, attr, buf);
    ssize_t ret = part_inflight_show(dev, attr, buf);
    POST_WRAPPER_FUNC(dev, attr, buf);
    kern_printk("part_inflight_show returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(struct device_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    return ret;
})
#endif


#ifndef KERN_ADDR_netdev_set_bond_master
#define APP_WRAPPER_FOR_netdev_set_bond_master
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_set_bond_master
#define APP_WRAPPER_FOR_netdev_set_bond_master
FUNCTION_WRAPPER(netdev_set_bond_master, (struct net_device *dev, struct net_device *master), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(master);
    TRACES_IF_WATCHPOINT(master);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(master)));
    kern_printk("netdev_set_bond_master is invoked.\n");
    PRE_WRAPPER_FUNC(dev, master);
    int ret = netdev_set_bond_master(dev, master);
    POST_WRAPPER_FUNC(dev, master);
    kern_printk("netdev_set_bond_master returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(master);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(master)));
    return ret;
})
#endif


#ifndef KERN_ADDR_iov_iter_single_seg_count
#define APP_WRAPPER_FOR_iov_iter_single_seg_count
#endif
 
#ifndef APP_WRAPPER_FOR_iov_iter_single_seg_count
#define APP_WRAPPER_FOR_iov_iter_single_seg_count
FUNCTION_WRAPPER(iov_iter_single_seg_count, (struct iov_iter *i), {
    kern_printk("iov_iter_single_seg_count is invoked.\n");
    PRE_WRAPPER_FUNC(i);
    size_t ret = iov_iter_single_seg_count(i);
    POST_WRAPPER_FUNC(i);
    kern_printk("iov_iter_single_seg_count returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_common_getsockopt
#define APP_WRAPPER_FOR_sock_common_getsockopt
#endif
 
#ifndef APP_WRAPPER_FOR_sock_common_getsockopt
#define APP_WRAPPER_FOR_sock_common_getsockopt
FUNCTION_WRAPPER(sock_common_getsockopt, (struct socket *sock, int level, int optname, char *optval, int *optlen), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    kern_printk("sock_common_getsockopt is invoked.\n");
    PRE_WRAPPER_FUNC(sock, level, optname, optval, optlen);
    int ret = sock_common_getsockopt(sock, level, optname, optval, optlen);
    POST_WRAPPER_FUNC(sock, level, optname, optval, optlen);
    kern_printk("sock_common_getsockopt returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dump_stack
#define APP_WRAPPER_FOR_dump_stack
#endif
 
#ifndef APP_WRAPPER_FOR_dump_stack
#define APP_WRAPPER_FOR_dump_stack
FUNCTION_WRAPPER_VOID(dump_stack, (), {
    kern_printk("dump_stack is invoked.\n");
    PRE_WRAPPER_FUNC();
    dump_stack();
    POST_WRAPPER_FUNC();
    kern_printk("dump_stack returned.\n");
})
#endif


#ifndef KERN_ADDR___this_fixmap_does_not_exist
#define APP_WRAPPER_FOR___this_fixmap_does_not_exist
#endif
 
#ifndef APP_WRAPPER_FOR___this_fixmap_does_not_exist
#define APP_WRAPPER_FOR___this_fixmap_does_not_exist
FUNCTION_WRAPPER_VOID(__this_fixmap_does_not_exist, (), {
    kern_printk("__this_fixmap_does_not_exist is invoked.\n");
    PRE_WRAPPER_FUNC();
    __this_fixmap_does_not_exist();
    POST_WRAPPER_FUNC();
    kern_printk("__this_fixmap_does_not_exist returned.\n");
})
#endif


#ifndef KERN_ADDR_blk_queue_rq_timeout
#define APP_WRAPPER_FOR_blk_queue_rq_timeout
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_rq_timeout
#define APP_WRAPPER_FOR_blk_queue_rq_timeout
FUNCTION_WRAPPER_VOID(blk_queue_rq_timeout, (struct request_queue *_arg1, unsigned int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_queue_rq_timeout is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    blk_queue_rq_timeout(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_queue_rq_timeout returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_inet_frags_fini
#define APP_WRAPPER_FOR_inet_frags_fini
#endif
 
#ifndef APP_WRAPPER_FOR_inet_frags_fini
#define APP_WRAPPER_FOR_inet_frags_fini
FUNCTION_WRAPPER_VOID(inet_frags_fini, (struct inet_frags *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inet_frags)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("inet_frags_fini is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    inet_frags_fini(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("inet_frags_fini returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inet_frags)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_blk_init_tags
#define APP_WRAPPER_FOR_blk_init_tags
#endif
 
#ifndef APP_WRAPPER_FOR_blk_init_tags
#define APP_WRAPPER_FOR_blk_init_tags
FUNCTION_WRAPPER(blk_init_tags, (int _arg1), {
    kern_printk("blk_init_tags is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct blk_queue_tag *ret = blk_init_tags(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("blk_init_tags returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_ioctl
#define APP_WRAPPER_FOR_dev_ioctl
#endif
 
#ifndef APP_WRAPPER_FOR_dev_ioctl
#define APP_WRAPPER_FOR_dev_ioctl
FUNCTION_WRAPPER(dev_ioctl, (struct net *net, unsigned int cmd, void *_arg1), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    kern_printk("dev_ioctl is invoked.\n");
    PRE_WRAPPER_FUNC(net, cmd, _arg1);
    int ret = dev_ioctl(net, cmd, _arg1);
    POST_WRAPPER_FUNC(net, cmd, _arg1);
    kern_printk("dev_ioctl returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    return ret;
})
#endif


#ifndef KERN_ADDR_proc_net_mkdir
#define APP_WRAPPER_FOR_proc_net_mkdir
#endif
 
#ifndef APP_WRAPPER_FOR_proc_net_mkdir
#define APP_WRAPPER_FOR_proc_net_mkdir
FUNCTION_WRAPPER(proc_net_mkdir, (struct net *net, const char *name, struct proc_dir_entry *parent), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct proc_dir_entry)(*(TO_UNWATCHED_ADDRESS(parent)));
    kern_printk("proc_net_mkdir is invoked.\n");
    PRE_WRAPPER_FUNC(net, name, parent);
    struct proc_dir_entry *ret = proc_net_mkdir(net, name, parent);
    POST_WRAPPER_FUNC(net, name, parent);
    kern_printk("proc_net_mkdir returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct proc_dir_entry)(*(TO_UNWATCHED_ADDRESS(parent)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_table_override
#define APP_WRAPPER_FOR_acpi_os_table_override
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_table_override
#define APP_WRAPPER_FOR_acpi_os_table_override
FUNCTION_WRAPPER(acpi_os_table_override, (struct acpi_table_header *existing_table, struct acpi_table_header **new_table), {
    kern_printk("acpi_os_table_override is invoked.\n");
    PRE_WRAPPER_FUNC(existing_table, new_table);
    acpi_status ret = acpi_os_table_override(existing_table, new_table);
    POST_WRAPPER_FUNC(existing_table, new_table);
    kern_printk("acpi_os_table_override returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_bitmap_fold
#define APP_WRAPPER_FOR_bitmap_fold
#endif
 
#ifndef APP_WRAPPER_FOR_bitmap_fold
#define APP_WRAPPER_FOR_bitmap_fold
FUNCTION_WRAPPER_VOID(bitmap_fold, (unsigned long *dst, unsigned const long *orig, int sz, int bits), {
    kern_printk("bitmap_fold is invoked.\n");
    PRE_WRAPPER_FUNC(dst, orig, sz, bits);
    bitmap_fold(dst, orig, sz, bits);
    POST_WRAPPER_FUNC(dst, orig, sz, bits);
    kern_printk("bitmap_fold returned.\n");
})
#endif


#ifndef KERN_ADDR_del_timer_sync
#define APP_WRAPPER_FOR_del_timer_sync
#endif
 
#ifndef APP_WRAPPER_FOR_del_timer_sync
#define APP_WRAPPER_FOR_del_timer_sync
FUNCTION_WRAPPER(del_timer_sync, (struct timer_list *timer), {
    WRAP_RECURSIVE(timer);
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(timer)));
    kern_printk("del_timer_sync is invoked.\n");
    PRE_WRAPPER_FUNC(timer);
    int ret = del_timer_sync(timer);
    POST_WRAPPER_FUNC(timer);
    kern_printk("del_timer_sync returned.\n");
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(timer)));
    return ret;
})
#endif


#ifndef KERN_ADDR___dec_zone_state
#define APP_WRAPPER_FOR___dec_zone_state
#endif
 
#ifndef APP_WRAPPER_FOR___dec_zone_state
#define APP_WRAPPER_FOR___dec_zone_state
FUNCTION_WRAPPER_VOID(__dec_zone_state, (struct zone *_arg1, enum zone_stat_item _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__dec_zone_state is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    __dec_zone_state(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("__dec_zone_state returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_device_show_bool
#define APP_WRAPPER_FOR_device_show_bool
#endif
 
#ifndef APP_WRAPPER_FOR_device_show_bool
#define APP_WRAPPER_FOR_device_show_bool
FUNCTION_WRAPPER(device_show_bool, (struct device *dev, struct device_attribute *attr, char *buf), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(attr);
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(struct device_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    kern_printk("device_show_bool is invoked.\n");
    PRE_WRAPPER_FUNC(dev, attr, buf);
    ssize_t ret = device_show_bool(dev, attr, buf);
    POST_WRAPPER_FUNC(dev, attr, buf);
    kern_printk("device_show_bool returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(struct device_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    return ret;
})
#endif


#ifndef KERN_ADDR_no_pci_devices
#define APP_WRAPPER_FOR_no_pci_devices
#endif
 
#ifndef APP_WRAPPER_FOR_no_pci_devices
#define APP_WRAPPER_FOR_no_pci_devices
FUNCTION_WRAPPER(no_pci_devices, (), {
    kern_printk("no_pci_devices is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = no_pci_devices();
    POST_WRAPPER_FUNC();
    kern_printk("no_pci_devices returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_radix_tree_lookup
#define APP_WRAPPER_FOR_radix_tree_lookup
#endif
 
#ifndef APP_WRAPPER_FOR_radix_tree_lookup
#define APP_WRAPPER_FOR_radix_tree_lookup
FUNCTION_WRAPPER(radix_tree_lookup, (struct radix_tree_root *_arg1, unsigned long _arg2), {
    kern_printk("radix_tree_lookup is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    void *ret = radix_tree_lookup(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("radix_tree_lookup returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_scsi_flush_work
#define APP_WRAPPER_FOR_scsi_flush_work
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_flush_work
#define APP_WRAPPER_FOR_scsi_flush_work
FUNCTION_WRAPPER_VOID(scsi_flush_work, (struct Scsi_Host *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("scsi_flush_work is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    scsi_flush_work(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("scsi_flush_work returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_ata_bmdma_error_handler
#define APP_WRAPPER_FOR_ata_bmdma_error_handler
#endif
 
#ifndef APP_WRAPPER_FOR_ata_bmdma_error_handler
#define APP_WRAPPER_FOR_ata_bmdma_error_handler
FUNCTION_WRAPPER_VOID(ata_bmdma_error_handler, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_bmdma_error_handler is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    ata_bmdma_error_handler(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_bmdma_error_handler returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_generic_readlink
#define APP_WRAPPER_FOR_generic_readlink
#endif
 
#ifndef APP_WRAPPER_FOR_generic_readlink
#define APP_WRAPPER_FOR_generic_readlink
FUNCTION_WRAPPER(generic_readlink, (struct dentry *_arg1, char *_arg2, int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("generic_readlink is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = generic_readlink(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("generic_readlink returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_prune_icache_sb
#define APP_WRAPPER_FOR_prune_icache_sb
#endif
 
#ifndef APP_WRAPPER_FOR_prune_icache_sb
#define APP_WRAPPER_FOR_prune_icache_sb
FUNCTION_WRAPPER_VOID(prune_icache_sb, (struct super_block *sb, int nr_to_scan), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("prune_icache_sb is invoked.\n");
    PRE_WRAPPER_FUNC(sb, nr_to_scan);
    prune_icache_sb(sb, nr_to_scan);
    POST_WRAPPER_FUNC(sb, nr_to_scan);
    kern_printk("prune_icache_sb returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
})
#endif


#ifndef KERN_ADDR___send_remote_softirq
#define APP_WRAPPER_FOR___send_remote_softirq
#endif
 
#ifndef APP_WRAPPER_FOR___send_remote_softirq
#define APP_WRAPPER_FOR___send_remote_softirq
FUNCTION_WRAPPER_VOID(__send_remote_softirq, (struct call_single_data *cp, int cpu, int this_cpu, int softirq), {
    WRAP_RECURSIVE(cp);
    TRACES_IF_WATCHPOINT(cp);
    SCAN_HEAD_FUNC(struct call_single_data)(*(TO_UNWATCHED_ADDRESS(cp)));
    kern_printk("__send_remote_softirq is invoked.\n");
    PRE_WRAPPER_FUNC(cp, cpu, this_cpu, softirq);
    __send_remote_softirq(cp, cpu, this_cpu, softirq);
    POST_WRAPPER_FUNC(cp, cpu, this_cpu, softirq);
    kern_printk("__send_remote_softirq returned.\n");
    TRACES_IF_WATCHPOINT(cp);
    SCAN_HEAD_FUNC(struct call_single_data)(*(TO_UNWATCHED_ADDRESS(cp)));
})
#endif


#ifndef KERN_ADDR_vmalloc_node
#define APP_WRAPPER_FOR_vmalloc_node
#endif
 
#ifndef APP_WRAPPER_FOR_vmalloc_node
#define APP_WRAPPER_FOR_vmalloc_node
FUNCTION_WRAPPER(vmalloc_node, (unsigned long size, int node), {
    kern_printk("vmalloc_node is invoked.\n");
    PRE_WRAPPER_FUNC(size, node);
    void *ret = vmalloc_node(size, node);
    POST_WRAPPER_FUNC(size, node);
    kern_printk("vmalloc_node returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_invalidate_inode_pages2
#define APP_WRAPPER_FOR_invalidate_inode_pages2
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_inode_pages2
#define APP_WRAPPER_FOR_invalidate_inode_pages2
FUNCTION_WRAPPER(invalidate_inode_pages2, (struct address_space *mapping), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("invalidate_inode_pages2 is invoked.\n");
    PRE_WRAPPER_FUNC(mapping);
    int ret = invalidate_inode_pages2(mapping);
    POST_WRAPPER_FUNC(mapping);
    kern_printk("invalidate_inode_pages2 returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    return ret;
})
#endif


#ifndef KERN_ADDR_setup_irq
#define APP_WRAPPER_FOR_setup_irq
#endif
 
#ifndef APP_WRAPPER_FOR_setup_irq
#define APP_WRAPPER_FOR_setup_irq
FUNCTION_WRAPPER(setup_irq, (unsigned int irq, struct irqaction *new_), {
    WRAP_RECURSIVE(new_);
    TRACES_IF_WATCHPOINT(new_);
    SCAN_HEAD_FUNC(struct irqaction)(*(TO_UNWATCHED_ADDRESS(new_)));
    kern_printk("setup_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq, new_);
    int ret = setup_irq(irq, new_);
    POST_WRAPPER_FUNC(irq, new_);
    kern_printk("setup_irq returned.\n");
    TRACES_IF_WATCHPOINT(new_);
    SCAN_HEAD_FUNC(struct irqaction)(*(TO_UNWATCHED_ADDRESS(new_)));
    return ret;
})
#endif


#ifndef KERN_ADDR_core_kernel_data
#define APP_WRAPPER_FOR_core_kernel_data
#endif
 
#ifndef APP_WRAPPER_FOR_core_kernel_data
#define APP_WRAPPER_FOR_core_kernel_data
FUNCTION_WRAPPER(core_kernel_data, (unsigned long addr), {
    kern_printk("core_kernel_data is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    int ret = core_kernel_data(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("core_kernel_data returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_parse_e820_ext
#define APP_WRAPPER_FOR_parse_e820_ext
#endif
 
#ifndef APP_WRAPPER_FOR_parse_e820_ext
#define APP_WRAPPER_FOR_parse_e820_ext
FUNCTION_WRAPPER_VOID(parse_e820_ext, (struct setup_data *data), {
    kern_printk("parse_e820_ext is invoked.\n");
    PRE_WRAPPER_FUNC(data);
    parse_e820_ext(data);
    POST_WRAPPER_FUNC(data);
    kern_printk("parse_e820_ext returned.\n");
})
#endif


#ifndef KERN_ADDR_memory_failure_queue
#define APP_WRAPPER_FOR_memory_failure_queue
#endif
 
#ifndef APP_WRAPPER_FOR_memory_failure_queue
#define APP_WRAPPER_FOR_memory_failure_queue
FUNCTION_WRAPPER_VOID(memory_failure_queue, (unsigned long pfn, int trapno, int flags), {
    kern_printk("memory_failure_queue is invoked.\n");
    PRE_WRAPPER_FUNC(pfn, trapno, flags);
    memory_failure_queue(pfn, trapno, flags);
    POST_WRAPPER_FUNC(pfn, trapno, flags);
    kern_printk("memory_failure_queue returned.\n");
})
#endif


#ifndef KERN_ADDR_snprintf
#define APP_WRAPPER_FOR_snprintf
#endif
 
#ifndef APP_WRAPPER_FOR_snprintf
#define APP_WRAPPER_FOR_snprintf
FUNCTION_WRAPPER(snprintf, (char *buf, size_t size, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    // TODO: variadic arguments
    kern_printk("snprintf is invoked.\n");
    PRE_WRAPPER_FUNC(buf, size, fmt);
    int ret = snprintf(buf, size, fmt);
    POST_WRAPPER_FUNC(buf, size, fmt);
    kern_printk("snprintf returned.\n");
    va_end(args__);
    return ret;
})
#endif


#ifndef KERN_ADDR_pcim_iounmap
#define APP_WRAPPER_FOR_pcim_iounmap
#endif
 
#ifndef APP_WRAPPER_FOR_pcim_iounmap
#define APP_WRAPPER_FOR_pcim_iounmap
FUNCTION_WRAPPER_VOID(pcim_iounmap, (struct pci_dev *pdev, void *addr), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("pcim_iounmap is invoked.\n");
    PRE_WRAPPER_FUNC(pdev, addr);
    pcim_iounmap(pdev, addr);
    POST_WRAPPER_FUNC(pdev, addr);
    kern_printk("pcim_iounmap returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
})
#endif


#ifndef KERN_ADDR_rtnl_put_cacheinfo
#define APP_WRAPPER_FOR_rtnl_put_cacheinfo
#endif
 
#ifndef APP_WRAPPER_FOR_rtnl_put_cacheinfo
#define APP_WRAPPER_FOR_rtnl_put_cacheinfo
FUNCTION_WRAPPER(rtnl_put_cacheinfo, (struct sk_buff *skb, struct dst_entry *dst, u32 id, long expires, u32 error), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_RECURSIVE(dst);
    TRACES_IF_WATCHPOINT(dst);
    SCAN_HEAD_FUNC(struct dst_entry)(*(TO_UNWATCHED_ADDRESS(dst)));
    kern_printk("rtnl_put_cacheinfo is invoked.\n");
    PRE_WRAPPER_FUNC(skb, dst, id, expires, error);
    int ret = rtnl_put_cacheinfo(skb, dst, id, expires, error);
    POST_WRAPPER_FUNC(skb, dst, id, expires, error);
    kern_printk("rtnl_put_cacheinfo returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    TRACES_IF_WATCHPOINT(dst);
    SCAN_HEAD_FUNC(struct dst_entry)(*(TO_UNWATCHED_ADDRESS(dst)));
    return ret;
})
#endif


#ifndef KERN_ADDR_default_machine_specific_memory_setup
#define APP_WRAPPER_FOR_default_machine_specific_memory_setup
#endif
 
#ifndef APP_WRAPPER_FOR_default_machine_specific_memory_setup
#define APP_WRAPPER_FOR_default_machine_specific_memory_setup
FUNCTION_WRAPPER(default_machine_specific_memory_setup, (), {
    kern_printk("default_machine_specific_memory_setup is invoked.\n");
    PRE_WRAPPER_FUNC();
    char *ret = default_machine_specific_memory_setup();
    POST_WRAPPER_FUNC();
    kern_printk("default_machine_specific_memory_setup returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_queue_physical_block_size
#define APP_WRAPPER_FOR_blk_queue_physical_block_size
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_physical_block_size
#define APP_WRAPPER_FOR_blk_queue_physical_block_size
FUNCTION_WRAPPER_VOID(blk_queue_physical_block_size, (struct request_queue *_arg1, unsigned int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_queue_physical_block_size is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    blk_queue_physical_block_size(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_queue_physical_block_size returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_simple_transaction_release
#define APP_WRAPPER_FOR_simple_transaction_release
#endif
 
#ifndef APP_WRAPPER_FOR_simple_transaction_release
#define APP_WRAPPER_FOR_simple_transaction_release
FUNCTION_WRAPPER(simple_transaction_release, (struct inode *inode, struct file *file), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("simple_transaction_release is invoked.\n");
    PRE_WRAPPER_FUNC(inode, file);
    int ret = simple_transaction_release(inode, file);
    POST_WRAPPER_FUNC(inode, file);
    kern_printk("simple_transaction_release returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_notice
#define APP_WRAPPER_FOR_dev_notice
#endif
 
#ifndef APP_WRAPPER_FOR_dev_notice
#define APP_WRAPPER_FOR_dev_notice
FUNCTION_WRAPPER(dev_notice, (const struct device *dev, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    // TODO: variadic arguments
    kern_printk("dev_notice is invoked.\n");
    PRE_WRAPPER_FUNC(dev, fmt);
    int ret = dev_notice(dev, fmt);
    POST_WRAPPER_FUNC(dev, fmt);
    kern_printk("dev_notice returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_write_revoke_records
#define APP_WRAPPER_FOR_jbd2_journal_write_revoke_records
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_write_revoke_records
#define APP_WRAPPER_FOR_jbd2_journal_write_revoke_records
FUNCTION_WRAPPER_VOID(jbd2_journal_write_revoke_records, (journal_t *_arg1, transaction_t *_arg2, int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(transaction_t)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("jbd2_journal_write_revoke_records is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    jbd2_journal_write_revoke_records(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("jbd2_journal_write_revoke_records returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(transaction_t)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_____ilog2_NaN
#define APP_WRAPPER_FOR_____ilog2_NaN
#endif
 
#ifndef APP_WRAPPER_FOR_____ilog2_NaN
#define APP_WRAPPER_FOR_____ilog2_NaN
FUNCTION_WRAPPER(____ilog2_NaN, (), {
    kern_printk("____ilog2_NaN is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = ____ilog2_NaN();
    POST_WRAPPER_FUNC();
    kern_printk("____ilog2_NaN returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_host_resume
#define APP_WRAPPER_FOR_ata_host_resume
#endif
 
#ifndef APP_WRAPPER_FOR_ata_host_resume
#define APP_WRAPPER_FOR_ata_host_resume
FUNCTION_WRAPPER_VOID(ata_host_resume, (struct ata_host *host), {
    WRAP_RECURSIVE(host);
    TRACES_IF_WATCHPOINT(host);
    SCAN_HEAD_FUNC(struct ata_host)(*(TO_UNWATCHED_ADDRESS(host)));
    kern_printk("ata_host_resume is invoked.\n");
    PRE_WRAPPER_FUNC(host);
    ata_host_resume(host);
    POST_WRAPPER_FUNC(host);
    kern_printk("ata_host_resume returned.\n");
    TRACES_IF_WATCHPOINT(host);
    SCAN_HEAD_FUNC(struct ata_host)(*(TO_UNWATCHED_ADDRESS(host)));
})
#endif


#ifndef KERN_ADDR___mark_inode_dirty
#define APP_WRAPPER_FOR___mark_inode_dirty
#endif
 
#ifndef APP_WRAPPER_FOR___mark_inode_dirty
#define APP_WRAPPER_FOR___mark_inode_dirty
FUNCTION_WRAPPER_VOID(__mark_inode_dirty, (struct inode *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__mark_inode_dirty is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    __mark_inode_dirty(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("__mark_inode_dirty returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_cap_mmap_addr
#define APP_WRAPPER_FOR_cap_mmap_addr
#endif
 
#ifndef APP_WRAPPER_FOR_cap_mmap_addr
#define APP_WRAPPER_FOR_cap_mmap_addr
FUNCTION_WRAPPER(cap_mmap_addr, (unsigned long addr), {
    kern_printk("cap_mmap_addr is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    int ret = cap_mmap_addr(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("cap_mmap_addr returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_queue_segment_boundary
#define APP_WRAPPER_FOR_blk_queue_segment_boundary
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_segment_boundary
#define APP_WRAPPER_FOR_blk_queue_segment_boundary
FUNCTION_WRAPPER_VOID(blk_queue_segment_boundary, (struct request_queue *_arg1, unsigned long _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_queue_segment_boundary is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    blk_queue_segment_boundary(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_queue_segment_boundary returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_ht_create_irq
#define APP_WRAPPER_FOR_ht_create_irq
#endif
 
#ifndef APP_WRAPPER_FOR_ht_create_irq
#define APP_WRAPPER_FOR_ht_create_irq
FUNCTION_WRAPPER(ht_create_irq, (struct pci_dev *dev, int idx), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("ht_create_irq is invoked.\n");
    PRE_WRAPPER_FUNC(dev, idx);
    int ret = ht_create_irq(dev, idx);
    POST_WRAPPER_FUNC(dev, idx);
    kern_printk("ht_create_irq returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_pci_bmdma_init_one
#define APP_WRAPPER_FOR_ata_pci_bmdma_init_one
#endif
 
#ifndef APP_WRAPPER_FOR_ata_pci_bmdma_init_one
#define APP_WRAPPER_FOR_ata_pci_bmdma_init_one
FUNCTION_WRAPPER(ata_pci_bmdma_init_one, (struct pci_dev *pdev, const struct ata_port_info ** const ppi, struct scsi_host_template *sht, void *host_priv, int hflags), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    WRAP_RECURSIVE(ppi);
    TRACES_IF_WATCHPOINT(ppi);
  //  SCAN_HEAD_FUNC(const struct ata_port_info * const)(*(TO_UNWATCHED_ADDRESS(ppi)));
    WRAP_RECURSIVE(sht);
    TRACES_IF_WATCHPOINT(sht);
    SCAN_HEAD_FUNC(struct scsi_host_template)(*(TO_UNWATCHED_ADDRESS(sht)));
    kern_printk("ata_pci_bmdma_init_one is invoked.\n");
    PRE_WRAPPER_FUNC(pdev, ppi, sht, host_priv, hflags);
    int ret = ata_pci_bmdma_init_one(pdev, ppi, sht, host_priv, hflags);
    POST_WRAPPER_FUNC(pdev, ppi, sht, host_priv, hflags);
    kern_printk("ata_pci_bmdma_init_one returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    TRACES_IF_WATCHPOINT(ppi);
//    SCAN_HEAD_FUNC(const struct ata_port_info * const)(*(TO_UNWATCHED_ADDRESS(ppi)));
    TRACES_IF_WATCHPOINT(sht);
    SCAN_HEAD_FUNC(struct scsi_host_template)(*(TO_UNWATCHED_ADDRESS(sht)));
    return ret;
})
#endif


#ifndef KERN_ADDR_print_tainted
#define APP_WRAPPER_FOR_print_tainted
#endif
 
#ifndef APP_WRAPPER_FOR_print_tainted
#define APP_WRAPPER_FOR_print_tainted
FUNCTION_WRAPPER(print_tainted, (), {
    kern_printk("print_tainted is invoked.\n");
    PRE_WRAPPER_FUNC();
    const char *ret = print_tainted();
    POST_WRAPPER_FUNC();
    kern_printk("print_tainted returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_get_sleep_type_data
#define APP_WRAPPER_FOR_acpi_get_sleep_type_data
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_sleep_type_data
#define APP_WRAPPER_FOR_acpi_get_sleep_type_data
FUNCTION_WRAPPER(acpi_get_sleep_type_data, (u8 sleep_state, u8 *slp_typ_a, u8 *slp_typ_b), {
    kern_printk("acpi_get_sleep_type_data is invoked.\n");
    PRE_WRAPPER_FUNC(sleep_state, slp_typ_a, slp_typ_b);
    acpi_status ret = acpi_get_sleep_type_data(sleep_state, slp_typ_a, slp_typ_b);
    POST_WRAPPER_FUNC(sleep_state, slp_typ_a, slp_typ_b);
    kern_printk("acpi_get_sleep_type_data returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_put_pages_list
#define APP_WRAPPER_FOR_put_pages_list
#endif
 
#ifndef APP_WRAPPER_FOR_put_pages_list
#define APP_WRAPPER_FOR_put_pages_list
FUNCTION_WRAPPER_VOID(put_pages_list, (struct list_head *pages), {
    kern_printk("put_pages_list is invoked.\n");
    PRE_WRAPPER_FUNC(pages);
    put_pages_list(pages);
    POST_WRAPPER_FUNC(pages);
    kern_printk("put_pages_list returned.\n");
})
#endif


#ifndef KERN_ADDR_vm_stat_account
#define APP_WRAPPER_FOR_vm_stat_account
#endif
 
#ifndef APP_WRAPPER_FOR_vm_stat_account
#define APP_WRAPPER_FOR_vm_stat_account
FUNCTION_WRAPPER_VOID(vm_stat_account, (struct mm_struct *_arg1, unsigned long _arg2, struct file *_arg3, long _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("vm_stat_account is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    vm_stat_account(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("vm_stat_account returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg3)));
})
#endif


#ifndef KERN_ADDR_make_pages_present
#define APP_WRAPPER_FOR_make_pages_present
#endif
 
#ifndef APP_WRAPPER_FOR_make_pages_present
#define APP_WRAPPER_FOR_make_pages_present
FUNCTION_WRAPPER(make_pages_present, (unsigned long addr, unsigned long end), {
    kern_printk("make_pages_present is invoked.\n");
    PRE_WRAPPER_FUNC(addr, end);
    int ret = make_pages_present(addr, end);
    POST_WRAPPER_FUNC(addr, end);
    kern_printk("make_pages_present returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_rtnl_unlock
#define APP_WRAPPER_FOR_rtnl_unlock
#endif
 
#ifndef APP_WRAPPER_FOR_rtnl_unlock
#define APP_WRAPPER_FOR_rtnl_unlock
FUNCTION_WRAPPER_VOID(rtnl_unlock, (), {
    kern_printk("rtnl_unlock is invoked.\n");
    PRE_WRAPPER_FUNC();
    rtnl_unlock();
    POST_WRAPPER_FUNC();
    kern_printk("rtnl_unlock returned.\n");
})
#endif


#ifndef KERN_ADDR_smp_init
#define APP_WRAPPER_FOR_smp_init
#endif
 
#ifndef APP_WRAPPER_FOR_smp_init
#define APP_WRAPPER_FOR_smp_init
FUNCTION_WRAPPER_VOID(smp_init, (), {
    kern_printk("smp_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    smp_init();
    POST_WRAPPER_FUNC();
    kern_printk("smp_init returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_enter_sleep_state
#define APP_WRAPPER_FOR_acpi_enter_sleep_state
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_enter_sleep_state
#define APP_WRAPPER_FOR_acpi_enter_sleep_state
FUNCTION_WRAPPER(acpi_enter_sleep_state, (u8 sleep_state), {
    kern_printk("acpi_enter_sleep_state is invoked.\n");
    PRE_WRAPPER_FUNC(sleep_state);
    acpi_status ret = acpi_enter_sleep_state(sleep_state);
    POST_WRAPPER_FUNC(sleep_state);
    kern_printk("acpi_enter_sleep_state returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_emergency_thaw_all
#define APP_WRAPPER_FOR_emergency_thaw_all
#endif
 
#ifndef APP_WRAPPER_FOR_emergency_thaw_all
#define APP_WRAPPER_FOR_emergency_thaw_all
FUNCTION_WRAPPER_VOID(emergency_thaw_all, (), {
    kern_printk("emergency_thaw_all is invoked.\n");
    PRE_WRAPPER_FUNC();
    emergency_thaw_all();
    POST_WRAPPER_FUNC();
    kern_printk("emergency_thaw_all returned.\n");
})
#endif


#ifndef KERN_ADDR_page_check_address_pmd
#define APP_WRAPPER_FOR_page_check_address_pmd
#endif
 
#ifndef APP_WRAPPER_FOR_page_check_address_pmd
#define APP_WRAPPER_FOR_page_check_address_pmd
FUNCTION_WRAPPER(page_check_address_pmd, (struct page *page, struct mm_struct *mm, unsigned long address, enum page_check_address_pmd_flag flag), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    kern_printk("page_check_address_pmd is invoked.\n");
    PRE_WRAPPER_FUNC(page, mm, address, flag);
    pmd_t *ret = page_check_address_pmd(page, mm, address, flag);
    POST_WRAPPER_FUNC(page, mm, address, flag);
    kern_printk("page_check_address_pmd returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_proc_dointvec_ms_jiffies
#define APP_WRAPPER_FOR_proc_dointvec_ms_jiffies
#endif
 
#ifndef APP_WRAPPER_FOR_proc_dointvec_ms_jiffies
#define APP_WRAPPER_FOR_proc_dointvec_ms_jiffies
FUNCTION_WRAPPER(proc_dointvec_ms_jiffies, (struct ctl_table *_arg1, int _arg2, void *_arg3, size_t *_arg4, loff_t *_arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("proc_dointvec_ms_jiffies is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = proc_dointvec_ms_jiffies(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("proc_dointvec_ms_jiffies returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_bmdma_start
#define APP_WRAPPER_FOR_ata_bmdma_start
#endif
 
#ifndef APP_WRAPPER_FOR_ata_bmdma_start
#define APP_WRAPPER_FOR_ata_bmdma_start
FUNCTION_WRAPPER_VOID(ata_bmdma_start, (struct ata_queued_cmd *qc), {
    WRAP_RECURSIVE(qc);
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    kern_printk("ata_bmdma_start is invoked.\n");
    PRE_WRAPPER_FUNC(qc);
    ata_bmdma_start(qc);
    POST_WRAPPER_FUNC(qc);
    kern_printk("ata_bmdma_start returned.\n");
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
})
#endif


#ifndef KERN_ADDR_acpi_video_get_capabilities
#define APP_WRAPPER_FOR_acpi_video_get_capabilities
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_video_get_capabilities
#define APP_WRAPPER_FOR_acpi_video_get_capabilities
FUNCTION_WRAPPER(acpi_video_get_capabilities, (acpi_handle graphics_dev_handle), {
    kern_printk("acpi_video_get_capabilities is invoked.\n");
    PRE_WRAPPER_FUNC(graphics_dev_handle);
    long ret = acpi_video_get_capabilities(graphics_dev_handle);
    POST_WRAPPER_FUNC(graphics_dev_handle);
    kern_printk("acpi_video_get_capabilities returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_put_timeval
#define APP_WRAPPER_FOR_compat_put_timeval
#endif
 
#ifndef APP_WRAPPER_FOR_compat_put_timeval
#define APP_WRAPPER_FOR_compat_put_timeval
FUNCTION_WRAPPER(compat_put_timeval, (const struct timeval *_arg1, void *_arg2), {
    kern_printk("compat_put_timeval is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = compat_put_timeval(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("compat_put_timeval returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_alternative_instructions
#define APP_WRAPPER_FOR_alternative_instructions
#endif
 
#ifndef APP_WRAPPER_FOR_alternative_instructions
#define APP_WRAPPER_FOR_alternative_instructions
FUNCTION_WRAPPER_VOID(alternative_instructions, (), {
    kern_printk("alternative_instructions is invoked.\n");
    PRE_WRAPPER_FUNC();
    alternative_instructions();
    POST_WRAPPER_FUNC();
    kern_printk("alternative_instructions returned.\n");
})
#endif


#ifndef KERN_ADDR_touch_atime
#define APP_WRAPPER_FOR_touch_atime
#endif
 
#ifndef APP_WRAPPER_FOR_touch_atime
#define APP_WRAPPER_FOR_touch_atime
FUNCTION_WRAPPER_VOID(touch_atime, (struct path *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("touch_atime is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    touch_atime(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("touch_atime returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_register_netdevice
#define APP_WRAPPER_FOR_register_netdevice
#endif
 
#ifndef APP_WRAPPER_FOR_register_netdevice
#define APP_WRAPPER_FOR_register_netdevice
FUNCTION_WRAPPER(register_netdevice, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("register_netdevice is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = register_netdevice(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("register_netdevice returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_set_task_cpu
#define APP_WRAPPER_FOR_set_task_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_set_task_cpu
#define APP_WRAPPER_FOR_set_task_cpu
FUNCTION_WRAPPER_VOID(set_task_cpu, (struct task_struct *p, unsigned int cpu), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("set_task_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(p, cpu);
    set_task_cpu(p, cpu);
    POST_WRAPPER_FUNC(p, cpu);
    kern_printk("set_task_cpu returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
})
#endif


#ifndef KERN_ADDR_skb_timestamping_init
#define APP_WRAPPER_FOR_skb_timestamping_init
#endif
 
#ifndef APP_WRAPPER_FOR_skb_timestamping_init
#define APP_WRAPPER_FOR_skb_timestamping_init
FUNCTION_WRAPPER_VOID(skb_timestamping_init, (), {
    kern_printk("skb_timestamping_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    skb_timestamping_init();
    POST_WRAPPER_FUNC();
    kern_printk("skb_timestamping_init returned.\n");
})
#endif


#ifndef KERN_ADDR_strlen_user
#define APP_WRAPPER_FOR_strlen_user
#endif
 
#ifndef APP_WRAPPER_FOR_strlen_user
#define APP_WRAPPER_FOR_strlen_user
FUNCTION_WRAPPER(strlen_user, (const char *str), {
    kern_printk("strlen_user is invoked.\n");
    PRE_WRAPPER_FUNC(str);
    long ret = strlen_user(str);
    POST_WRAPPER_FUNC(str);
    kern_printk("strlen_user returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_free_memcg_kmem_pages
#define APP_WRAPPER_FOR_free_memcg_kmem_pages
#endif
 
#ifndef APP_WRAPPER_FOR_free_memcg_kmem_pages
#define APP_WRAPPER_FOR_free_memcg_kmem_pages
FUNCTION_WRAPPER_VOID(free_memcg_kmem_pages, (unsigned long addr, unsigned int order), {
    kern_printk("free_memcg_kmem_pages is invoked.\n");
    PRE_WRAPPER_FUNC(addr, order);
    free_memcg_kmem_pages(addr, order);
    POST_WRAPPER_FUNC(addr, order);
    kern_printk("free_memcg_kmem_pages returned.\n");
})
#endif


#ifndef KERN_ADDR_node_map_pfn_alignment
#define APP_WRAPPER_FOR_node_map_pfn_alignment
#endif
 
#ifndef APP_WRAPPER_FOR_node_map_pfn_alignment
#define APP_WRAPPER_FOR_node_map_pfn_alignment
FUNCTION_WRAPPER(node_map_pfn_alignment, (), {
    kern_printk("node_map_pfn_alignment is invoked.\n");
    PRE_WRAPPER_FUNC();
    long ret = node_map_pfn_alignment();
    POST_WRAPPER_FUNC();
    kern_printk("node_map_pfn_alignment returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_find_ht_capability
#define APP_WRAPPER_FOR_pci_find_ht_capability
#endif
 
#ifndef APP_WRAPPER_FOR_pci_find_ht_capability
#define APP_WRAPPER_FOR_pci_find_ht_capability
FUNCTION_WRAPPER(pci_find_ht_capability, (struct pci_dev *dev, int ht_cap), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_find_ht_capability is invoked.\n");
    PRE_WRAPPER_FUNC(dev, ht_cap);
    int ret = pci_find_ht_capability(dev, ht_cap);
    POST_WRAPPER_FUNC(dev, ht_cap);
    kern_printk("pci_find_ht_capability returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_work_cpu
#define APP_WRAPPER_FOR_work_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_work_cpu
#define APP_WRAPPER_FOR_work_cpu
FUNCTION_WRAPPER(work_cpu, (struct work_struct *work), {
    WRAP_RECURSIVE(work);
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
    kern_printk("work_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(work);
    int ret = work_cpu(work);
    POST_WRAPPER_FUNC(work);
    kern_printk("work_cpu returned.\n");
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_reset_function
#define APP_WRAPPER_FOR_pci_reset_function
#endif
 
#ifndef APP_WRAPPER_FOR_pci_reset_function
#define APP_WRAPPER_FOR_pci_reset_function
FUNCTION_WRAPPER(pci_reset_function, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_reset_function is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pci_reset_function(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_reset_function returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_prune_dcache_sb
#define APP_WRAPPER_FOR_prune_dcache_sb
#endif
 
#ifndef APP_WRAPPER_FOR_prune_dcache_sb
#define APP_WRAPPER_FOR_prune_dcache_sb
FUNCTION_WRAPPER_VOID(prune_dcache_sb, (struct super_block *sb, int nr_to_scan), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("prune_dcache_sb is invoked.\n");
    PRE_WRAPPER_FUNC(sb, nr_to_scan);
    prune_dcache_sb(sb, nr_to_scan);
    POST_WRAPPER_FUNC(sb, nr_to_scan);
    kern_printk("prune_dcache_sb returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
})
#endif


#ifndef KERN_ADDR_pci_fixup_device
#define APP_WRAPPER_FOR_pci_fixup_device
#endif
 
#ifndef APP_WRAPPER_FOR_pci_fixup_device
#define APP_WRAPPER_FOR_pci_fixup_device
FUNCTION_WRAPPER_VOID(pci_fixup_device, (enum pci_fixup_pass pass, struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_fixup_device is invoked.\n");
    PRE_WRAPPER_FUNC(pass, dev);
    pci_fixup_device(pass, dev);
    POST_WRAPPER_FUNC(pass, dev);
    kern_printk("pci_fixup_device returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_dmam_alloc_noncoherent
#define APP_WRAPPER_FOR_dmam_alloc_noncoherent
#endif
 
#ifndef APP_WRAPPER_FOR_dmam_alloc_noncoherent
#define APP_WRAPPER_FOR_dmam_alloc_noncoherent
FUNCTION_WRAPPER(dmam_alloc_noncoherent, (struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dmam_alloc_noncoherent is invoked.\n");
    PRE_WRAPPER_FUNC(dev, size, dma_handle, gfp);
    void *ret = dmam_alloc_noncoherent(dev, size, dma_handle, gfp);
    POST_WRAPPER_FUNC(dev, size, dma_handle, gfp);
    kern_printk("dmam_alloc_noncoherent returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_free_page_and_swap_cache
#define APP_WRAPPER_FOR_free_page_and_swap_cache
#endif
 
#ifndef APP_WRAPPER_FOR_free_page_and_swap_cache
#define APP_WRAPPER_FOR_free_page_and_swap_cache
FUNCTION_WRAPPER_VOID(free_page_and_swap_cache, (struct page *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("free_page_and_swap_cache is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    free_page_and_swap_cache(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("free_page_and_swap_cache returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_alloc_pci_dev
#define APP_WRAPPER_FOR_alloc_pci_dev
#endif
 
#ifndef APP_WRAPPER_FOR_alloc_pci_dev
#define APP_WRAPPER_FOR_alloc_pci_dev
FUNCTION_WRAPPER(alloc_pci_dev, (), {
    kern_printk("alloc_pci_dev is invoked.\n");
    PRE_WRAPPER_FUNC();
    struct pci_dev *ret = alloc_pci_dev();
    POST_WRAPPER_FUNC();
    kern_printk("alloc_pci_dev returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_setup_per_cpu_areas
#define APP_WRAPPER_FOR_setup_per_cpu_areas
#endif
 
#ifndef APP_WRAPPER_FOR_setup_per_cpu_areas
#define APP_WRAPPER_FOR_setup_per_cpu_areas
FUNCTION_WRAPPER_VOID(setup_per_cpu_areas, (), {
    kern_printk("setup_per_cpu_areas is invoked.\n");
    PRE_WRAPPER_FUNC();
    setup_per_cpu_areas();
    POST_WRAPPER_FUNC();
    kern_printk("setup_per_cpu_areas returned.\n");
})
#endif


#ifndef KERN_ADDR___percpu_counter_init
#define APP_WRAPPER_FOR___percpu_counter_init
#endif
 
#ifndef APP_WRAPPER_FOR___percpu_counter_init
#define APP_WRAPPER_FOR___percpu_counter_init
FUNCTION_WRAPPER(__percpu_counter_init, (struct percpu_counter *fbc, s64 amount, struct lock_class_key *key), {
    kern_printk("__percpu_counter_init is invoked.\n");
    PRE_WRAPPER_FUNC(fbc, amount, key);
    int ret = __percpu_counter_init(fbc, amount, key);
    POST_WRAPPER_FUNC(fbc, amount, key);
    kern_printk("__percpu_counter_init returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_mmap_region
#define APP_WRAPPER_FOR_mmap_region
#endif
 
#ifndef APP_WRAPPER_FOR_mmap_region
#define APP_WRAPPER_FOR_mmap_region
FUNCTION_WRAPPER(mmap_region, (struct file *file, unsigned long addr, unsigned long len, unsigned long flags, vm_flags_t vm_flags, unsigned long pgoff), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("mmap_region is invoked.\n");
    PRE_WRAPPER_FUNC(file, addr, len, flags, vm_flags, pgoff);
    long ret = mmap_region(file, addr, len, flags, vm_flags, pgoff);
    POST_WRAPPER_FUNC(file, addr, len, flags, vm_flags, pgoff);
    kern_printk("mmap_region returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_verify_mem_not_deleted
#define APP_WRAPPER_FOR_verify_mem_not_deleted
#endif
 
#ifndef APP_WRAPPER_FOR_verify_mem_not_deleted
#define APP_WRAPPER_FOR_verify_mem_not_deleted
FUNCTION_WRAPPER(verify_mem_not_deleted, (const void *x), {
    kern_printk("verify_mem_not_deleted is invoked.\n");
    PRE_WRAPPER_FUNC(x);
    bool ret = verify_mem_not_deleted(x);
    POST_WRAPPER_FUNC(x);
    kern_printk("verify_mem_not_deleted returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_strnchr
#define APP_WRAPPER_FOR_strnchr
#endif
 
#ifndef APP_WRAPPER_FOR_strnchr
#define APP_WRAPPER_FOR_strnchr
FUNCTION_WRAPPER(strnchr, (const char *_arg1, size_t _arg2, int _arg3), {
    kern_printk("strnchr is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    char *ret = strnchr(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("strnchr returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sff_queue_pio_task
#define APP_WRAPPER_FOR_ata_sff_queue_pio_task
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_queue_pio_task
#define APP_WRAPPER_FOR_ata_sff_queue_pio_task
FUNCTION_WRAPPER_VOID(ata_sff_queue_pio_task, (struct ata_link *link, unsigned long delay), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    kern_printk("ata_sff_queue_pio_task is invoked.\n");
    PRE_WRAPPER_FUNC(link, delay);
    ata_sff_queue_pio_task(link, delay);
    POST_WRAPPER_FUNC(link, delay);
    kern_printk("ata_sff_queue_pio_task returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
})
#endif


#ifndef KERN_ADDR_acpi_get_pxm
#define APP_WRAPPER_FOR_acpi_get_pxm
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_pxm
#define APP_WRAPPER_FOR_acpi_get_pxm
FUNCTION_WRAPPER(acpi_get_pxm, (acpi_handle handle), {
    kern_printk("acpi_get_pxm is invoked.\n");
    PRE_WRAPPER_FUNC(handle);
    int ret = acpi_get_pxm(handle);
    POST_WRAPPER_FUNC(handle);
    kern_printk("acpi_get_pxm returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_write_cache_pages
#define APP_WRAPPER_FOR_write_cache_pages
#endif
 
#ifndef APP_WRAPPER_FOR_write_cache_pages
#define APP_WRAPPER_FOR_write_cache_pages
FUNCTION_WRAPPER(write_cache_pages, (struct address_space *mapping, struct writeback_control *wbc, writepage_t writepage, void *data), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    WRAP_FUNCTION(writepage);
    kern_printk("write_cache_pages is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, wbc, writepage, data);
    int ret = write_cache_pages(mapping, wbc, writepage, data);
    POST_WRAPPER_FUNC(mapping, wbc, writepage, data);
    kern_printk("write_cache_pages returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sk_dst_check
#define APP_WRAPPER_FOR_sk_dst_check
#endif
 
#ifndef APP_WRAPPER_FOR_sk_dst_check
#define APP_WRAPPER_FOR_sk_dst_check
FUNCTION_WRAPPER(sk_dst_check, (struct sock *sk, u32 cookie), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sk_dst_check is invoked.\n");
    PRE_WRAPPER_FUNC(sk, cookie);
    struct dst_entry *ret = sk_dst_check(sk, cookie);
    POST_WRAPPER_FUNC(sk, cookie);
    kern_printk("sk_dst_check returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_underlying_device_busy
#define APP_WRAPPER_FOR_dm_underlying_device_busy
#endif
 
#ifndef APP_WRAPPER_FOR_dm_underlying_device_busy
#define APP_WRAPPER_FOR_dm_underlying_device_busy
FUNCTION_WRAPPER(dm_underlying_device_busy, (struct request_queue *q), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    kern_printk("dm_underlying_device_busy is invoked.\n");
    PRE_WRAPPER_FUNC(q);
    int ret = dm_underlying_device_busy(q);
    POST_WRAPPER_FUNC(q);
    kern_printk("dm_underlying_device_busy returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mdio_bus_init
#define APP_WRAPPER_FOR_mdio_bus_init
#endif
 
#ifndef APP_WRAPPER_FOR_mdio_bus_init
#define APP_WRAPPER_FOR_mdio_bus_init
FUNCTION_WRAPPER(mdio_bus_init, (), {
    kern_printk("mdio_bus_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = mdio_bus_init();
    POST_WRAPPER_FUNC();
    kern_printk("mdio_bus_init returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dpm_complete
#define APP_WRAPPER_FOR_dpm_complete
#endif
 
#ifndef APP_WRAPPER_FOR_dpm_complete
#define APP_WRAPPER_FOR_dpm_complete
FUNCTION_WRAPPER_VOID(dpm_complete, (pm_message_t state), {
    kern_printk("dpm_complete is invoked.\n");
    PRE_WRAPPER_FUNC(state);
    dpm_complete(state);
    POST_WRAPPER_FUNC(state);
    kern_printk("dpm_complete returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_os_write_port
#define APP_WRAPPER_FOR_acpi_os_write_port
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_write_port
#define APP_WRAPPER_FOR_acpi_os_write_port
FUNCTION_WRAPPER(acpi_os_write_port, (acpi_io_address address, u32 value, u32 width), {
    kern_printk("acpi_os_write_port is invoked.\n");
    PRE_WRAPPER_FUNC(address, value, width);
    acpi_status ret = acpi_os_write_port(address, value, width);
    POST_WRAPPER_FUNC(address, value, width);
    kern_printk("acpi_os_write_port returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_timing_find_mode
#define APP_WRAPPER_FOR_ata_timing_find_mode
#endif
 
#ifndef APP_WRAPPER_FOR_ata_timing_find_mode
#define APP_WRAPPER_FOR_ata_timing_find_mode
FUNCTION_WRAPPER(ata_timing_find_mode, (u8 xfer_mode), {
    kern_printk("ata_timing_find_mode is invoked.\n");
    PRE_WRAPPER_FUNC(xfer_mode);
    const struct ata_timing *ret = ata_timing_find_mode(xfer_mode);
    POST_WRAPPER_FUNC(xfer_mode);
    kern_printk("ata_timing_find_mode returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sg_alloc_table_from_pages
#define APP_WRAPPER_FOR_sg_alloc_table_from_pages
#endif
 
#ifndef APP_WRAPPER_FOR_sg_alloc_table_from_pages
#define APP_WRAPPER_FOR_sg_alloc_table_from_pages
FUNCTION_WRAPPER(sg_alloc_table_from_pages, (struct sg_table *sgt, struct page **pages, unsigned int n_pages, unsigned long offset, unsigned long size, gfp_t gfp_mask), {
    WRAP_RECURSIVE(pages);
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    kern_printk("sg_alloc_table_from_pages is invoked.\n");
    PRE_WRAPPER_FUNC(sgt, pages, n_pages, offset, size, gfp_mask);
    int ret = sg_alloc_table_from_pages(sgt, pages, n_pages, offset, size, gfp_mask);
    POST_WRAPPER_FUNC(sgt, pages, n_pages, offset, size, gfp_mask);
    kern_printk("sg_alloc_table_from_pages returned.\n");
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    return ret;
})
#endif


#ifndef KERN_ADDR_copy_namespaces
#define APP_WRAPPER_FOR_copy_namespaces
#endif
 
#ifndef APP_WRAPPER_FOR_copy_namespaces
#define APP_WRAPPER_FOR_copy_namespaces
FUNCTION_WRAPPER(copy_namespaces, (unsigned long flags, struct task_struct *tsk), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("copy_namespaces is invoked.\n");
    PRE_WRAPPER_FUNC(flags, tsk);
    int ret = copy_namespaces(flags, tsk);
    POST_WRAPPER_FUNC(flags, tsk);
    kern_printk("copy_namespaces returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_gnet_stats_copy_app
#define APP_WRAPPER_FOR_gnet_stats_copy_app
#endif
 
#ifndef APP_WRAPPER_FOR_gnet_stats_copy_app
#define APP_WRAPPER_FOR_gnet_stats_copy_app
FUNCTION_WRAPPER(gnet_stats_copy_app, (struct gnet_dump *d, void *st, int len), {
    WRAP_RECURSIVE(d);
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct gnet_dump)(*(TO_UNWATCHED_ADDRESS(d)));
    kern_printk("gnet_stats_copy_app is invoked.\n");
    PRE_WRAPPER_FUNC(d, st, len);
    int ret = gnet_stats_copy_app(d, st, len);
    POST_WRAPPER_FUNC(d, st, len);
    kern_printk("gnet_stats_copy_app returned.\n");
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct gnet_dump)(*(TO_UNWATCHED_ADDRESS(d)));
    return ret;
})
#endif


#ifndef KERN_ADDR_wait_for_completion_interruptible
#define APP_WRAPPER_FOR_wait_for_completion_interruptible
#endif
 
#ifndef APP_WRAPPER_FOR_wait_for_completion_interruptible
#define APP_WRAPPER_FOR_wait_for_completion_interruptible
FUNCTION_WRAPPER(wait_for_completion_interruptible, (struct completion *x), {
    kern_printk("wait_for_completion_interruptible is invoked.\n");
    PRE_WRAPPER_FUNC(x);
    int ret = wait_for_completion_interruptible(x);
    POST_WRAPPER_FUNC(x);
    kern_printk("wait_for_completion_interruptible returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_delayed_work_timer_fn
#define APP_WRAPPER_FOR_delayed_work_timer_fn
#endif
 
#ifndef APP_WRAPPER_FOR_delayed_work_timer_fn
#define APP_WRAPPER_FOR_delayed_work_timer_fn
FUNCTION_WRAPPER_VOID(delayed_work_timer_fn, (unsigned long __data), {
    kern_printk("delayed_work_timer_fn is invoked.\n");
    PRE_WRAPPER_FUNC(__data);
    delayed_work_timer_fn(__data);
    POST_WRAPPER_FUNC(__data);
    kern_printk("delayed_work_timer_fn returned.\n");
})
#endif


#ifndef KERN_ADDR_smp_invalidate_interrupt
#define APP_WRAPPER_FOR_smp_invalidate_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_smp_invalidate_interrupt
#define APP_WRAPPER_FOR_smp_invalidate_interrupt
FUNCTION_WRAPPER_VOID(smp_invalidate_interrupt, (struct pt_regs *_arg1), {
    kern_printk("smp_invalidate_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    smp_invalidate_interrupt(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("smp_invalidate_interrupt returned.\n");
})
#endif


#ifndef KERN_ADDR___section_nr
#define APP_WRAPPER_FOR___section_nr
#endif
 
#ifndef APP_WRAPPER_FOR___section_nr
#define APP_WRAPPER_FOR___section_nr
FUNCTION_WRAPPER(__section_nr, (struct mem_section *ms), {
    kern_printk("__section_nr is invoked.\n");
    PRE_WRAPPER_FUNC(ms);
    int ret = __section_nr(ms);
    POST_WRAPPER_FUNC(ms);
    kern_printk("__section_nr returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_prop_local_destroy_percpu
#define APP_WRAPPER_FOR_prop_local_destroy_percpu
#endif
 
#ifndef APP_WRAPPER_FOR_prop_local_destroy_percpu
#define APP_WRAPPER_FOR_prop_local_destroy_percpu
FUNCTION_WRAPPER_VOID(prop_local_destroy_percpu, (struct prop_local_percpu *pl), {
    kern_printk("prop_local_destroy_percpu is invoked.\n");
    PRE_WRAPPER_FUNC(pl);
    prop_local_destroy_percpu(pl);
    POST_WRAPPER_FUNC(pl);
    kern_printk("prop_local_destroy_percpu returned.\n");
})
#endif


#ifndef KERN_ADDR_vmalloc_user
#define APP_WRAPPER_FOR_vmalloc_user
#endif
 
#ifndef APP_WRAPPER_FOR_vmalloc_user
#define APP_WRAPPER_FOR_vmalloc_user
FUNCTION_WRAPPER(vmalloc_user, (unsigned long size), {
    kern_printk("vmalloc_user is invoked.\n");
    PRE_WRAPPER_FUNC(size);
    void *ret = vmalloc_user(size);
    POST_WRAPPER_FUNC(size);
    kern_printk("vmalloc_user returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_port_printk
#define APP_WRAPPER_FOR_ata_port_printk
#endif
 
#ifndef APP_WRAPPER_FOR_ata_port_printk
#define APP_WRAPPER_FOR_ata_port_printk
FUNCTION_WRAPPER(ata_port_printk, (const struct ata_port *ap, const char *level, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(const struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    // TODO: variadic arguments
    kern_printk("ata_port_printk is invoked.\n");
    PRE_WRAPPER_FUNC(ap, level, fmt);
    int ret = ata_port_printk(ap, level, fmt);
    POST_WRAPPER_FUNC(ap, level, fmt);
    kern_printk("ata_port_printk returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(const struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR___vfs_setxattr_noperm
#define APP_WRAPPER_FOR___vfs_setxattr_noperm
#endif
 
#ifndef APP_WRAPPER_FOR___vfs_setxattr_noperm
#define APP_WRAPPER_FOR___vfs_setxattr_noperm
FUNCTION_WRAPPER(__vfs_setxattr_noperm, (struct dentry *_arg1, const char *_arg2, const void *_arg3, size_t _arg4, int _arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__vfs_setxattr_noperm is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = __vfs_setxattr_noperm(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("__vfs_setxattr_noperm returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_rtnl_create_link
#define APP_WRAPPER_FOR_rtnl_create_link
#endif
 
#ifndef APP_WRAPPER_FOR_rtnl_create_link
#define APP_WRAPPER_FOR_rtnl_create_link
FUNCTION_WRAPPER(rtnl_create_link, (struct net *net, char *ifname, const struct rtnl_link_ops *ops, struct nlattr * tb[]), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    WRAP_RECURSIVE(ops);
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(const struct rtnl_link_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    kern_printk("rtnl_create_link is invoked.\n");
    PRE_WRAPPER_FUNC(net, ifname, ops, tb);
    struct net_device *ret = rtnl_create_link(net, ifname, ops, tb);
    POST_WRAPPER_FUNC(net, ifname, ops, tb);
    kern_printk("rtnl_create_link returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(const struct rtnl_link_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_bdget
#define APP_WRAPPER_FOR_bdget
#endif
 
#ifndef APP_WRAPPER_FOR_bdget
#define APP_WRAPPER_FOR_bdget
FUNCTION_WRAPPER(bdget, (dev_t _arg1), {
    kern_printk("bdget is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct block_device *ret = bdget(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("bdget returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_early_pfn_to_nid
#define APP_WRAPPER_FOR_early_pfn_to_nid
#endif
 
#ifndef APP_WRAPPER_FOR_early_pfn_to_nid
#define APP_WRAPPER_FOR_early_pfn_to_nid
FUNCTION_WRAPPER(early_pfn_to_nid, (unsigned long pfn), {
    kern_printk("early_pfn_to_nid is invoked.\n");
    PRE_WRAPPER_FUNC(pfn);
    int ret = early_pfn_to_nid(pfn);
    POST_WRAPPER_FUNC(pfn);
    kern_printk("early_pfn_to_nid returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_swapcache_prepare
#define APP_WRAPPER_FOR_swapcache_prepare
#endif
 
#ifndef APP_WRAPPER_FOR_swapcache_prepare
#define APP_WRAPPER_FOR_swapcache_prepare
FUNCTION_WRAPPER(swapcache_prepare, (swp_entry_t _arg1), {
    kern_printk("swapcache_prepare is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = swapcache_prepare(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("swapcache_prepare returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_cpu_clock
#define APP_WRAPPER_FOR_cpu_clock
#endif
 
#ifndef APP_WRAPPER_FOR_cpu_clock
#define APP_WRAPPER_FOR_cpu_clock
FUNCTION_WRAPPER(cpu_clock, (int cpu), {
    kern_printk("cpu_clock is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    u64 ret = cpu_clock(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("cpu_clock returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_offline_memory_block
#define APP_WRAPPER_FOR_offline_memory_block
#endif
 
#ifndef APP_WRAPPER_FOR_offline_memory_block
#define APP_WRAPPER_FOR_offline_memory_block
FUNCTION_WRAPPER(offline_memory_block, (struct memory_block *mem), {
    kern_printk("offline_memory_block is invoked.\n");
    PRE_WRAPPER_FUNC(mem);
    int ret = offline_memory_block(mem);
    POST_WRAPPER_FUNC(mem);
    kern_printk("offline_memory_block returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_getboottime
#define APP_WRAPPER_FOR_getboottime
#endif
 
#ifndef APP_WRAPPER_FOR_getboottime
#define APP_WRAPPER_FOR_getboottime
FUNCTION_WRAPPER_VOID(getboottime, (struct timespec *ts), {
    kern_printk("getboottime is invoked.\n");
    PRE_WRAPPER_FUNC(ts);
    getboottime(ts);
    POST_WRAPPER_FUNC(ts);
    kern_printk("getboottime returned.\n");
})
#endif


#ifndef KERN_ADDR_blkdev_aio_write
#define APP_WRAPPER_FOR_blkdev_aio_write
#endif
 
#ifndef APP_WRAPPER_FOR_blkdev_aio_write
#define APP_WRAPPER_FOR_blkdev_aio_write
FUNCTION_WRAPPER(blkdev_aio_write, (struct kiocb *iocb, const struct iovec *iov, unsigned long nr_segs, loff_t pos), {
    WRAP_RECURSIVE(iocb);
    TRACES_IF_WATCHPOINT(iocb);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(iocb)));
    kern_printk("blkdev_aio_write is invoked.\n");
    PRE_WRAPPER_FUNC(iocb, iov, nr_segs, pos);
    ssize_t ret = blkdev_aio_write(iocb, iov, nr_segs, pos);
    POST_WRAPPER_FUNC(iocb, iov, nr_segs, pos);
    kern_printk("blkdev_aio_write returned.\n");
    TRACES_IF_WATCHPOINT(iocb);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(iocb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_pci_remove_one
#define APP_WRAPPER_FOR_ata_pci_remove_one
#endif
 
#ifndef APP_WRAPPER_FOR_ata_pci_remove_one
#define APP_WRAPPER_FOR_ata_pci_remove_one
FUNCTION_WRAPPER_VOID(ata_pci_remove_one, (struct pci_dev *pdev), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("ata_pci_remove_one is invoked.\n");
    PRE_WRAPPER_FUNC(pdev);
    ata_pci_remove_one(pdev);
    POST_WRAPPER_FUNC(pdev);
    kern_printk("ata_pci_remove_one returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
})
#endif


#ifndef KERN_ADDR_x86_acpi_numa_init
#define APP_WRAPPER_FOR_x86_acpi_numa_init
#endif
 
#ifndef APP_WRAPPER_FOR_x86_acpi_numa_init
#define APP_WRAPPER_FOR_x86_acpi_numa_init
FUNCTION_WRAPPER(x86_acpi_numa_init, (), {
    kern_printk("x86_acpi_numa_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = x86_acpi_numa_init();
    POST_WRAPPER_FUNC();
    kern_printk("x86_acpi_numa_init returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_set_chip_data
#define APP_WRAPPER_FOR_irq_set_chip_data
#endif
 
#ifndef APP_WRAPPER_FOR_irq_set_chip_data
#define APP_WRAPPER_FOR_irq_set_chip_data
FUNCTION_WRAPPER(irq_set_chip_data, (unsigned int irq, void *data), {
    kern_printk("irq_set_chip_data is invoked.\n");
    PRE_WRAPPER_FUNC(irq, data);
    int ret = irq_set_chip_data(irq, data);
    POST_WRAPPER_FUNC(irq, data);
    kern_printk("irq_set_chip_data returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_kthread_data
#define APP_WRAPPER_FOR_kthread_data
#endif
 
#ifndef APP_WRAPPER_FOR_kthread_data
#define APP_WRAPPER_FOR_kthread_data
FUNCTION_WRAPPER(kthread_data, (struct task_struct *k), {
    WRAP_RECURSIVE(k);
    TRACES_IF_WATCHPOINT(k);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(k)));
    kern_printk("kthread_data is invoked.\n");
    PRE_WRAPPER_FUNC(k);
    void *ret = kthread_data(k);
    POST_WRAPPER_FUNC(k);
    kern_printk("kthread_data returned.\n");
    TRACES_IF_WATCHPOINT(k);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(k)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_dequeue
#define APP_WRAPPER_FOR_skb_dequeue
#endif
 
#ifndef APP_WRAPPER_FOR_skb_dequeue
#define APP_WRAPPER_FOR_skb_dequeue
FUNCTION_WRAPPER(skb_dequeue, (struct sk_buff_head *list), {
    WRAP_RECURSIVE(list);
    TRACES_IF_WATCHPOINT(list);
    SCAN_HEAD_FUNC(struct sk_buff_head)(*(TO_UNWATCHED_ADDRESS(list)));
    kern_printk("skb_dequeue is invoked.\n");
    PRE_WRAPPER_FUNC(list);
    struct sk_buff *ret = skb_dequeue(list);
    POST_WRAPPER_FUNC(list);
    kern_printk("skb_dequeue returned.\n");
    TRACES_IF_WATCHPOINT(list);
    SCAN_HEAD_FUNC(struct sk_buff_head)(*(TO_UNWATCHED_ADDRESS(list)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_mangle_path
#define APP_WRAPPER_FOR_mangle_path
#endif
 
#ifndef APP_WRAPPER_FOR_mangle_path
#define APP_WRAPPER_FOR_mangle_path
FUNCTION_WRAPPER(mangle_path, (char *s, const char *p, const char *esc), {
    kern_printk("mangle_path is invoked.\n");
    PRE_WRAPPER_FUNC(s, p, esc);
    char *ret = mangle_path(s, p, esc);
    POST_WRAPPER_FUNC(s, p, esc);
    kern_printk("mangle_path returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_csk_update_pmtu
#define APP_WRAPPER_FOR_inet_csk_update_pmtu
#endif
 
#ifndef APP_WRAPPER_FOR_inet_csk_update_pmtu
#define APP_WRAPPER_FOR_inet_csk_update_pmtu
FUNCTION_WRAPPER(inet_csk_update_pmtu, (struct sock *sk, u32 mtu), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("inet_csk_update_pmtu is invoked.\n");
    PRE_WRAPPER_FUNC(sk, mtu);
    struct dst_entry *ret = inet_csk_update_pmtu(sk, mtu);
    POST_WRAPPER_FUNC(sk, mtu);
    kern_printk("inet_csk_update_pmtu returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_clock_adjtime
#define APP_WRAPPER_FOR_compat_sys_clock_adjtime
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_clock_adjtime
#define APP_WRAPPER_FOR_compat_sys_clock_adjtime
FUNCTION_WRAPPER(compat_sys_clock_adjtime, (clockid_t which_clock, struct compat_timex *tp), {
    kern_printk("compat_sys_clock_adjtime is invoked.\n");
    PRE_WRAPPER_FUNC(which_clock, tp);
    long ret = compat_sys_clock_adjtime(which_clock, tp);
    POST_WRAPPER_FUNC(which_clock, tp);
    kern_printk("compat_sys_clock_adjtime returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_get_cpu_iowait_time_us
#define APP_WRAPPER_FOR_get_cpu_iowait_time_us
#endif
 
#ifndef APP_WRAPPER_FOR_get_cpu_iowait_time_us
#define APP_WRAPPER_FOR_get_cpu_iowait_time_us
FUNCTION_WRAPPER(get_cpu_iowait_time_us, (int cpu, u64 *last_update_time), {
    kern_printk("get_cpu_iowait_time_us is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, last_update_time);
    u64 ret = get_cpu_iowait_time_us(cpu, last_update_time);
    POST_WRAPPER_FUNC(cpu, last_update_time);
    kern_printk("get_cpu_iowait_time_us returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_kfree_skb
#define APP_WRAPPER_FOR_kfree_skb
#endif
 
#ifndef APP_WRAPPER_FOR_kfree_skb
#define APP_WRAPPER_FOR_kfree_skb
FUNCTION_WRAPPER_VOID(kfree_skb, (struct sk_buff *skb), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("kfree_skb is invoked.\n");
    PRE_WRAPPER_FUNC(skb);
    kfree_skb(skb);
    POST_WRAPPER_FUNC(skb);
    kern_printk("kfree_skb returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_qtree_write_dquot
#define APP_WRAPPER_FOR_qtree_write_dquot
#endif
 
#ifndef APP_WRAPPER_FOR_qtree_write_dquot
#define APP_WRAPPER_FOR_qtree_write_dquot
FUNCTION_WRAPPER(qtree_write_dquot, (struct qtree_mem_dqinfo *info, struct dquot *dquot), {
    WRAP_RECURSIVE(info);
    TRACES_IF_WATCHPOINT(info);
    SCAN_HEAD_FUNC(struct qtree_mem_dqinfo)(*(TO_UNWATCHED_ADDRESS(info)));
    WRAP_RECURSIVE(dquot);
    TRACES_IF_WATCHPOINT(dquot);
    SCAN_HEAD_FUNC(struct dquot)(*(TO_UNWATCHED_ADDRESS(dquot)));
    kern_printk("qtree_write_dquot is invoked.\n");
    PRE_WRAPPER_FUNC(info, dquot);
    int ret = qtree_write_dquot(info, dquot);
    POST_WRAPPER_FUNC(info, dquot);
    kern_printk("qtree_write_dquot returned.\n");
    TRACES_IF_WATCHPOINT(info);
    SCAN_HEAD_FUNC(struct qtree_mem_dqinfo)(*(TO_UNWATCHED_ADDRESS(info)));
    TRACES_IF_WATCHPOINT(dquot);
    SCAN_HEAD_FUNC(struct dquot)(*(TO_UNWATCHED_ADDRESS(dquot)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kernel_sock_shutdown
#define APP_WRAPPER_FOR_kernel_sock_shutdown
#endif
 
#ifndef APP_WRAPPER_FOR_kernel_sock_shutdown
#define APP_WRAPPER_FOR_kernel_sock_shutdown
FUNCTION_WRAPPER(kernel_sock_shutdown, (struct socket *sock, enum sock_shutdown_cmd how), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    kern_printk("kernel_sock_shutdown is invoked.\n");
    PRE_WRAPPER_FUNC(sock, how);
    int ret = kernel_sock_shutdown(sock, how);
    POST_WRAPPER_FUNC(sock, how);
    kern_printk("kernel_sock_shutdown returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_execute_rq_nowait
#define APP_WRAPPER_FOR_blk_execute_rq_nowait
#endif
 
#ifndef APP_WRAPPER_FOR_blk_execute_rq_nowait
#define APP_WRAPPER_FOR_blk_execute_rq_nowait
FUNCTION_WRAPPER_VOID(blk_execute_rq_nowait, (struct request_queue *_arg1, struct gendisk *_arg2, struct request *_arg3, int _arg4, rq_end_io_fn *_arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    WRAP_FUNCTION(_arg5);
    kern_printk("blk_execute_rq_nowait is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    blk_execute_rq_nowait(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("blk_execute_rq_nowait returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg3)));
})
#endif


#ifndef KERN_ADDR_vmalloc_to_pfn
#define APP_WRAPPER_FOR_vmalloc_to_pfn
#endif
 
#ifndef APP_WRAPPER_FOR_vmalloc_to_pfn
#define APP_WRAPPER_FOR_vmalloc_to_pfn
FUNCTION_WRAPPER(vmalloc_to_pfn, (const void *addr), {
    kern_printk("vmalloc_to_pfn is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    long ret = vmalloc_to_pfn(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("vmalloc_to_pfn returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_copy_name_and_uuid
#define APP_WRAPPER_FOR_dm_copy_name_and_uuid
#endif
 
#ifndef APP_WRAPPER_FOR_dm_copy_name_and_uuid
#define APP_WRAPPER_FOR_dm_copy_name_and_uuid
FUNCTION_WRAPPER(dm_copy_name_and_uuid, (struct mapped_device *md, char *name, char *uuid), {
    kern_printk("dm_copy_name_and_uuid is invoked.\n");
    PRE_WRAPPER_FUNC(md, name, uuid);
    int ret = dm_copy_name_and_uuid(md, name, uuid);
    POST_WRAPPER_FUNC(md, name, uuid);
    kern_printk("dm_copy_name_and_uuid returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_unmap_memory
#define APP_WRAPPER_FOR_acpi_os_unmap_memory
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_unmap_memory
#define APP_WRAPPER_FOR_acpi_os_unmap_memory
FUNCTION_WRAPPER_VOID(acpi_os_unmap_memory, (void *logical_address, acpi_size size), {
    kern_printk("acpi_os_unmap_memory is invoked.\n");
    PRE_WRAPPER_FUNC(logical_address, size);
    acpi_os_unmap_memory(logical_address, size);
    POST_WRAPPER_FUNC(logical_address, size);
    kern_printk("acpi_os_unmap_memory returned.\n");
})
#endif


#ifndef KERN_ADDR_pm_qos_update_target
#define APP_WRAPPER_FOR_pm_qos_update_target
#endif
 
#ifndef APP_WRAPPER_FOR_pm_qos_update_target
#define APP_WRAPPER_FOR_pm_qos_update_target
FUNCTION_WRAPPER(pm_qos_update_target, (struct pm_qos_constraints *c, struct plist_node *node, enum pm_qos_req_action action, int value), {
    WRAP_RECURSIVE(c);
    TRACES_IF_WATCHPOINT(c);
    SCAN_HEAD_FUNC(struct pm_qos_constraints)(*(TO_UNWATCHED_ADDRESS(c)));
    kern_printk("pm_qos_update_target is invoked.\n");
    PRE_WRAPPER_FUNC(c, node, action, value);
    int ret = pm_qos_update_target(c, node, action, value);
    POST_WRAPPER_FUNC(c, node, action, value);
    kern_printk("pm_qos_update_target returned.\n");
    TRACES_IF_WATCHPOINT(c);
    SCAN_HEAD_FUNC(struct pm_qos_constraints)(*(TO_UNWATCHED_ADDRESS(c)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_mc_flush
#define APP_WRAPPER_FOR_dev_mc_flush
#endif
 
#ifndef APP_WRAPPER_FOR_dev_mc_flush
#define APP_WRAPPER_FOR_dev_mc_flush
FUNCTION_WRAPPER_VOID(dev_mc_flush, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_mc_flush is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    dev_mc_flush(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_mc_flush returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_setup_percpu_irq
#define APP_WRAPPER_FOR_setup_percpu_irq
#endif
 
#ifndef APP_WRAPPER_FOR_setup_percpu_irq
#define APP_WRAPPER_FOR_setup_percpu_irq
FUNCTION_WRAPPER(setup_percpu_irq, (unsigned int irq, struct irqaction *new_), {
    WRAP_RECURSIVE(new_);
    TRACES_IF_WATCHPOINT(new_);
    SCAN_HEAD_FUNC(struct irqaction)(*(TO_UNWATCHED_ADDRESS(new_)));
    kern_printk("setup_percpu_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq, new_);
    int ret = setup_percpu_irq(irq, new_);
    POST_WRAPPER_FUNC(irq, new_);
    kern_printk("setup_percpu_irq returned.\n");
    TRACES_IF_WATCHPOINT(new_);
    SCAN_HEAD_FUNC(struct irqaction)(*(TO_UNWATCHED_ADDRESS(new_)));
    return ret;
})
#endif


#ifndef KERN_ADDR_filemap_fdatawrite
#define APP_WRAPPER_FOR_filemap_fdatawrite
#endif
 
#ifndef APP_WRAPPER_FOR_filemap_fdatawrite
#define APP_WRAPPER_FOR_filemap_fdatawrite
FUNCTION_WRAPPER(filemap_fdatawrite, (struct address_space *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("filemap_fdatawrite is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = filemap_fdatawrite(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("filemap_fdatawrite returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_enable_resources
#define APP_WRAPPER_FOR_pci_enable_resources
#endif
 
#ifndef APP_WRAPPER_FOR_pci_enable_resources
#define APP_WRAPPER_FOR_pci_enable_resources
FUNCTION_WRAPPER(pci_enable_resources, (struct pci_dev *_arg1, int mask), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("pci_enable_resources is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, mask);
    int ret = pci_enable_resources(_arg1, mask);
    POST_WRAPPER_FUNC(_arg1, mask);
    kern_printk("pci_enable_resources returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_d_alloc_pseudo
#define APP_WRAPPER_FOR_d_alloc_pseudo
#endif
 
#ifndef APP_WRAPPER_FOR_d_alloc_pseudo
#define APP_WRAPPER_FOR_d_alloc_pseudo
FUNCTION_WRAPPER(d_alloc_pseudo, (struct super_block *_arg1, const struct qstr *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("d_alloc_pseudo is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct dentry *ret = d_alloc_pseudo(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("d_alloc_pseudo returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___blk_stop_queue
#define APP_WRAPPER_FOR___blk_stop_queue
#endif
 
#ifndef APP_WRAPPER_FOR___blk_stop_queue
#define APP_WRAPPER_FOR___blk_stop_queue
FUNCTION_WRAPPER_VOID(__blk_stop_queue, (struct request_queue *q), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    kern_printk("__blk_stop_queue is invoked.\n");
    PRE_WRAPPER_FUNC(q);
    __blk_stop_queue(q);
    POST_WRAPPER_FUNC(q);
    kern_printk("__blk_stop_queue returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
})
#endif


#ifndef KERN_ADDR_unlock_vector_lock
#define APP_WRAPPER_FOR_unlock_vector_lock
#endif
 
#ifndef APP_WRAPPER_FOR_unlock_vector_lock
#define APP_WRAPPER_FOR_unlock_vector_lock
FUNCTION_WRAPPER_VOID(unlock_vector_lock, (), {
    kern_printk("unlock_vector_lock is invoked.\n");
    PRE_WRAPPER_FUNC();
    unlock_vector_lock();
    POST_WRAPPER_FUNC();
    kern_printk("unlock_vector_lock returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_swiotlb_init
#define APP_WRAPPER_FOR_pci_swiotlb_init
#endif
 
#ifndef APP_WRAPPER_FOR_pci_swiotlb_init
#define APP_WRAPPER_FOR_pci_swiotlb_init
FUNCTION_WRAPPER_VOID(pci_swiotlb_init, (), {
    kern_printk("pci_swiotlb_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    pci_swiotlb_init();
    POST_WRAPPER_FUNC();
    kern_printk("pci_swiotlb_init returned.\n");
})
#endif


#ifndef KERN_ADDR_down_killable
#define APP_WRAPPER_FOR_down_killable
#endif
 
#ifndef APP_WRAPPER_FOR_down_killable
#define APP_WRAPPER_FOR_down_killable
FUNCTION_WRAPPER(down_killable, (struct semaphore *sem), {
    kern_printk("down_killable is invoked.\n");
    PRE_WRAPPER_FUNC(sem);
    int ret = down_killable(sem);
    POST_WRAPPER_FUNC(sem);
    kern_printk("down_killable returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_restore_ioapic_entries
#define APP_WRAPPER_FOR_restore_ioapic_entries
#endif
 
#ifndef APP_WRAPPER_FOR_restore_ioapic_entries
#define APP_WRAPPER_FOR_restore_ioapic_entries
FUNCTION_WRAPPER(restore_ioapic_entries, (), {
    kern_printk("restore_ioapic_entries is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = restore_ioapic_entries();
    POST_WRAPPER_FUNC();
    kern_printk("restore_ioapic_entries returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_eh_qc_retry
#define APP_WRAPPER_FOR_ata_eh_qc_retry
#endif
 
#ifndef APP_WRAPPER_FOR_ata_eh_qc_retry
#define APP_WRAPPER_FOR_ata_eh_qc_retry
FUNCTION_WRAPPER_VOID(ata_eh_qc_retry, (struct ata_queued_cmd *qc), {
    WRAP_RECURSIVE(qc);
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    kern_printk("ata_eh_qc_retry is invoked.\n");
    PRE_WRAPPER_FUNC(qc);
    ata_eh_qc_retry(qc);
    POST_WRAPPER_FUNC(qc);
    kern_printk("ata_eh_qc_retry returned.\n");
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
})
#endif


#ifndef KERN_ADDR_dev_addr_del
#define APP_WRAPPER_FOR_dev_addr_del
#endif
 
#ifndef APP_WRAPPER_FOR_dev_addr_del
#define APP_WRAPPER_FOR_dev_addr_del
FUNCTION_WRAPPER(dev_addr_del, (struct net_device *dev, unsigned const char *addr, unsigned char addr_type), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_addr_del is invoked.\n");
    PRE_WRAPPER_FUNC(dev, addr, addr_type);
    int ret = dev_addr_del(dev, addr, addr_type);
    POST_WRAPPER_FUNC(dev, addr, addr_type);
    kern_printk("dev_addr_del returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_d_hash_and_lookup
#define APP_WRAPPER_FOR_d_hash_and_lookup
#endif
 
#ifndef APP_WRAPPER_FOR_d_hash_and_lookup
#define APP_WRAPPER_FOR_d_hash_and_lookup
FUNCTION_WRAPPER(d_hash_and_lookup, (struct dentry *_arg1, struct qstr *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("d_hash_and_lookup is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct dentry *ret = d_hash_and_lookup(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("d_hash_and_lookup returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___nla_put_nohdr
#define APP_WRAPPER_FOR___nla_put_nohdr
#endif
 
#ifndef APP_WRAPPER_FOR___nla_put_nohdr
#define APP_WRAPPER_FOR___nla_put_nohdr
FUNCTION_WRAPPER_VOID(__nla_put_nohdr, (struct sk_buff *skb, int attrlen, const void *data), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("__nla_put_nohdr is invoked.\n");
    PRE_WRAPPER_FUNC(skb, attrlen, data);
    __nla_put_nohdr(skb, attrlen, data);
    POST_WRAPPER_FUNC(skb, attrlen, data);
    kern_printk("__nla_put_nohdr returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_compat_sys_setsockopt
#define APP_WRAPPER_FOR_compat_sys_setsockopt
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_setsockopt
#define APP_WRAPPER_FOR_compat_sys_setsockopt
FUNCTION_WRAPPER(compat_sys_setsockopt, (int fd, int level, int optname, char *optval, unsigned int optlen), {
    kern_printk("compat_sys_setsockopt is invoked.\n");
    PRE_WRAPPER_FUNC(fd, level, optname, optval, optlen);
    long ret = compat_sys_setsockopt(fd, level, optname, optval, optlen);
    POST_WRAPPER_FUNC(fd, level, optname, optval, optlen);
    kern_printk("compat_sys_setsockopt returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_wake_up_klogd
#define APP_WRAPPER_FOR_wake_up_klogd
#endif
 
#ifndef APP_WRAPPER_FOR_wake_up_klogd
#define APP_WRAPPER_FOR_wake_up_klogd
FUNCTION_WRAPPER_VOID(wake_up_klogd, (), {
    kern_printk("wake_up_klogd is invoked.\n");
    PRE_WRAPPER_FUNC();
    wake_up_klogd();
    POST_WRAPPER_FUNC();
    kern_printk("wake_up_klogd returned.\n");
})
#endif


#ifndef KERN_ADDR_tracepoint_iter_stop
#define APP_WRAPPER_FOR_tracepoint_iter_stop
#endif
 
#ifndef APP_WRAPPER_FOR_tracepoint_iter_stop
#define APP_WRAPPER_FOR_tracepoint_iter_stop
FUNCTION_WRAPPER_VOID(tracepoint_iter_stop, (struct tracepoint_iter *iter), {
    WRAP_RECURSIVE(iter);
    TRACES_IF_WATCHPOINT(iter);
    SCAN_HEAD_FUNC(struct tracepoint_iter)(*(TO_UNWATCHED_ADDRESS(iter)));
    kern_printk("tracepoint_iter_stop is invoked.\n");
    PRE_WRAPPER_FUNC(iter);
    tracepoint_iter_stop(iter);
    POST_WRAPPER_FUNC(iter);
    kern_printk("tracepoint_iter_stop returned.\n");
    TRACES_IF_WATCHPOINT(iter);
    SCAN_HEAD_FUNC(struct tracepoint_iter)(*(TO_UNWATCHED_ADDRESS(iter)));
})
#endif


#ifndef KERN_ADDR_del_timer
#define APP_WRAPPER_FOR_del_timer
#endif
 
#ifndef APP_WRAPPER_FOR_del_timer
#define APP_WRAPPER_FOR_del_timer
FUNCTION_WRAPPER(del_timer, (struct timer_list *timer), {
    WRAP_RECURSIVE(timer);
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(timer)));
    kern_printk("del_timer is invoked.\n");
    PRE_WRAPPER_FUNC(timer);
    int ret = del_timer(timer);
    POST_WRAPPER_FUNC(timer);
    kern_printk("del_timer returned.\n");
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(timer)));
    return ret;
})
#endif


#ifndef KERN_ADDR_inode_init_early
#define APP_WRAPPER_FOR_inode_init_early
#endif
 
#ifndef APP_WRAPPER_FOR_inode_init_early
#define APP_WRAPPER_FOR_inode_init_early
FUNCTION_WRAPPER_VOID(inode_init_early, (), {
    kern_printk("inode_init_early is invoked.\n");
    PRE_WRAPPER_FUNC();
    inode_init_early();
    POST_WRAPPER_FUNC();
    kern_printk("inode_init_early returned.\n");
})
#endif


#ifndef KERN_ADDR___check_region
#define APP_WRAPPER_FOR___check_region
#endif
 
#ifndef APP_WRAPPER_FOR___check_region
#define APP_WRAPPER_FOR___check_region
FUNCTION_WRAPPER(__check_region, (struct resource *_arg1, resource_size_t _arg2, resource_size_t _arg3), {
    kern_printk("__check_region is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = __check_region(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("__check_region returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sparse_decode_mem_map
#define APP_WRAPPER_FOR_sparse_decode_mem_map
#endif
 
#ifndef APP_WRAPPER_FOR_sparse_decode_mem_map
#define APP_WRAPPER_FOR_sparse_decode_mem_map
FUNCTION_WRAPPER(sparse_decode_mem_map, (unsigned long coded_mem_map, unsigned long pnum), {
    kern_printk("sparse_decode_mem_map is invoked.\n");
    PRE_WRAPPER_FUNC(coded_mem_map, pnum);
    struct page *ret = sparse_decode_mem_map(coded_mem_map, pnum);
    POST_WRAPPER_FUNC(coded_mem_map, pnum);
    kern_printk("sparse_decode_mem_map returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_bus_find_device
#define APP_WRAPPER_FOR_bus_find_device
#endif
 
#ifndef APP_WRAPPER_FOR_bus_find_device
#define APP_WRAPPER_FOR_bus_find_device
FUNCTION_WRAPPER(bus_find_device, (struct bus_type *bus, struct device *start, void *data, int (*match)(struct device *, void *)), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    WRAP_RECURSIVE(start);
    TRACES_IF_WATCHPOINT(start);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(start)));
    WRAP_FUNCTION(match);
    kern_printk("bus_find_device is invoked.\n");
    PRE_WRAPPER_FUNC(bus, start, data, match);
    struct device *ret = bus_find_device(bus, start, data, match);
    POST_WRAPPER_FUNC(bus, start, data, match);
    kern_printk("bus_find_device returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    TRACES_IF_WATCHPOINT(start);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(start)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_bmdma_port_start32
#define APP_WRAPPER_FOR_ata_bmdma_port_start32
#endif
 
#ifndef APP_WRAPPER_FOR_ata_bmdma_port_start32
#define APP_WRAPPER_FOR_ata_bmdma_port_start32
FUNCTION_WRAPPER(ata_bmdma_port_start32, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_bmdma_port_start32 is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    int ret = ata_bmdma_port_start32(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_bmdma_port_start32 returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_ioctl
#define APP_WRAPPER_FOR_compat_sys_ioctl
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_ioctl
#define APP_WRAPPER_FOR_compat_sys_ioctl
FUNCTION_WRAPPER(compat_sys_ioctl, (unsigned int fd, unsigned int cmd, unsigned long arg), {
    kern_printk("compat_sys_ioctl is invoked.\n");
    PRE_WRAPPER_FUNC(fd, cmd, arg);
    long ret = compat_sys_ioctl(fd, cmd, arg);
    POST_WRAPPER_FUNC(fd, cmd, arg);
    kern_printk("compat_sys_ioctl returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_times
#define APP_WRAPPER_FOR_compat_sys_times
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_times
#define APP_WRAPPER_FOR_compat_sys_times
FUNCTION_WRAPPER(compat_sys_times, (struct compat_tms *tbuf), {
    kern_printk("compat_sys_times is invoked.\n");
    PRE_WRAPPER_FUNC(tbuf);
    long ret = compat_sys_times(tbuf);
    POST_WRAPPER_FUNC(tbuf);
    kern_printk("compat_sys_times returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_swiotlb_sync_single_for_cpu
#define APP_WRAPPER_FOR_swiotlb_sync_single_for_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_swiotlb_sync_single_for_cpu
#define APP_WRAPPER_FOR_swiotlb_sync_single_for_cpu
FUNCTION_WRAPPER_VOID(swiotlb_sync_single_for_cpu, (struct device *hwdev, dma_addr_t dev_addr, size_t size, enum dma_data_direction dir), {
    WRAP_RECURSIVE(hwdev);
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
    kern_printk("swiotlb_sync_single_for_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(hwdev, dev_addr, size, dir);
    swiotlb_sync_single_for_cpu(hwdev, dev_addr, size, dir);
    POST_WRAPPER_FUNC(hwdev, dev_addr, size, dir);
    kern_printk("swiotlb_sync_single_for_cpu returned.\n");
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
})
#endif


#ifndef KERN_ADDR___wake_up_locked
#define APP_WRAPPER_FOR___wake_up_locked
#endif
 
#ifndef APP_WRAPPER_FOR___wake_up_locked
#define APP_WRAPPER_FOR___wake_up_locked
FUNCTION_WRAPPER_VOID(__wake_up_locked, (wait_queue_head_t *q, unsigned int mode, int nr), {
    kern_printk("__wake_up_locked is invoked.\n");
    PRE_WRAPPER_FUNC(q, mode, nr);
    __wake_up_locked(q, mode, nr);
    POST_WRAPPER_FUNC(q, mode, nr);
    kern_printk("__wake_up_locked returned.\n");
})
#endif


#ifndef KERN_ADDR_vlan_do_receive
#define APP_WRAPPER_FOR_vlan_do_receive
#endif
 
#ifndef APP_WRAPPER_FOR_vlan_do_receive
#define APP_WRAPPER_FOR_vlan_do_receive
FUNCTION_WRAPPER(vlan_do_receive, (struct sk_buff **skb), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff *)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("vlan_do_receive is invoked.\n");
    PRE_WRAPPER_FUNC(skb);
    bool ret = vlan_do_receive(skb);
    POST_WRAPPER_FUNC(skb);
    kern_printk("vlan_do_receive returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff *)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_posix_acl_chmod
#define APP_WRAPPER_FOR_posix_acl_chmod
#endif
 
#ifndef APP_WRAPPER_FOR_posix_acl_chmod
#define APP_WRAPPER_FOR_posix_acl_chmod
FUNCTION_WRAPPER(posix_acl_chmod, (struct posix_acl **_arg1, gfp_t _arg2, umode_t _arg3), {
    kern_printk("posix_acl_chmod is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = posix_acl_chmod(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("posix_acl_chmod returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_module_address_lookup
#define APP_WRAPPER_FOR_module_address_lookup
#endif
 
#ifndef APP_WRAPPER_FOR_module_address_lookup
#define APP_WRAPPER_FOR_module_address_lookup
FUNCTION_WRAPPER(module_address_lookup, (unsigned long addr, unsigned long *symbolsize, unsigned long *offset, char **modname, char *namebuf), {
    kern_printk("module_address_lookup is invoked.\n");
    PRE_WRAPPER_FUNC(addr, symbolsize, offset, modname, namebuf);
    const char *ret = module_address_lookup(addr, symbolsize, offset, modname, namebuf);
    POST_WRAPPER_FUNC(addr, symbolsize, offset, modname, namebuf);
    kern_printk("module_address_lookup returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_get_bitmap
#define APP_WRAPPER_FOR_compat_get_bitmap
#endif
 
#ifndef APP_WRAPPER_FOR_compat_get_bitmap
#define APP_WRAPPER_FOR_compat_get_bitmap
FUNCTION_WRAPPER(compat_get_bitmap, (unsigned long *mask, const compat_ulong_t *umask, unsigned long bitmap_size), {
    kern_printk("compat_get_bitmap is invoked.\n");
    PRE_WRAPPER_FUNC(mask, umask, bitmap_size);
    long ret = compat_get_bitmap(mask, umask, bitmap_size);
    POST_WRAPPER_FUNC(mask, umask, bitmap_size);
    kern_printk("compat_get_bitmap returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_posix_acl_create
#define APP_WRAPPER_FOR_posix_acl_create
#endif
 
#ifndef APP_WRAPPER_FOR_posix_acl_create
#define APP_WRAPPER_FOR_posix_acl_create
FUNCTION_WRAPPER(posix_acl_create, (struct posix_acl **_arg1, gfp_t _arg2, umode_t *_arg3), {
    kern_printk("posix_acl_create is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = posix_acl_create(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("posix_acl_create returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_scsi_verify_blk_ioctl
#define APP_WRAPPER_FOR_scsi_verify_blk_ioctl
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_verify_blk_ioctl
#define APP_WRAPPER_FOR_scsi_verify_blk_ioctl
FUNCTION_WRAPPER(scsi_verify_blk_ioctl, (struct block_device *_arg1, unsigned int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("scsi_verify_blk_ioctl is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = scsi_verify_blk_ioctl(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("scsi_verify_blk_ioctl returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_video_dmi_demote_vendor
#define APP_WRAPPER_FOR_acpi_video_dmi_demote_vendor
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_video_dmi_demote_vendor
#define APP_WRAPPER_FOR_acpi_video_dmi_demote_vendor
FUNCTION_WRAPPER_VOID(acpi_video_dmi_demote_vendor, (), {
    kern_printk("acpi_video_dmi_demote_vendor is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_video_dmi_demote_vendor();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_video_dmi_demote_vendor returned.\n");
})
#endif


#ifndef KERN_ADDR_pcim_pin_device
#define APP_WRAPPER_FOR_pcim_pin_device
#endif
 
#ifndef APP_WRAPPER_FOR_pcim_pin_device
#define APP_WRAPPER_FOR_pcim_pin_device
FUNCTION_WRAPPER_VOID(pcim_pin_device, (struct pci_dev *pdev), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("pcim_pin_device is invoked.\n");
    PRE_WRAPPER_FUNC(pdev);
    pcim_pin_device(pdev);
    POST_WRAPPER_FUNC(pdev);
    kern_printk("pcim_pin_device returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
})
#endif


#ifndef KERN_ADDR_handle_simple_irq
#define APP_WRAPPER_FOR_handle_simple_irq
#endif
 
#ifndef APP_WRAPPER_FOR_handle_simple_irq
#define APP_WRAPPER_FOR_handle_simple_irq
FUNCTION_WRAPPER_VOID(handle_simple_irq, (unsigned int irq, struct irq_desc *desc), {
    WRAP_RECURSIVE(desc);
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct irq_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
    kern_printk("handle_simple_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq, desc);
    handle_simple_irq(irq, desc);
    POST_WRAPPER_FUNC(irq, desc);
    kern_printk("handle_simple_irq returned.\n");
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct irq_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
})
#endif


#ifndef KERN_ADDR_mod_zone_page_state
#define APP_WRAPPER_FOR_mod_zone_page_state
#endif
 
#ifndef APP_WRAPPER_FOR_mod_zone_page_state
#define APP_WRAPPER_FOR_mod_zone_page_state
FUNCTION_WRAPPER_VOID(mod_zone_page_state, (struct zone *_arg1, enum zone_stat_item _arg2, int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("mod_zone_page_state is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    mod_zone_page_state(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("mod_zone_page_state returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_pvclock_init_vsyscall
#define APP_WRAPPER_FOR_pvclock_init_vsyscall
#endif
 
#ifndef APP_WRAPPER_FOR_pvclock_init_vsyscall
#define APP_WRAPPER_FOR_pvclock_init_vsyscall
FUNCTION_WRAPPER(pvclock_init_vsyscall, (struct pvclock_vsyscall_time_info *i, int size), {
    kern_printk("pvclock_init_vsyscall is invoked.\n");
    PRE_WRAPPER_FUNC(i, size);
    int ret = pvclock_init_vsyscall(i, size);
    POST_WRAPPER_FUNC(i, size);
    kern_printk("pvclock_init_vsyscall returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_iomem_map_sanity_check
#define APP_WRAPPER_FOR_iomem_map_sanity_check
#endif
 
#ifndef APP_WRAPPER_FOR_iomem_map_sanity_check
#define APP_WRAPPER_FOR_iomem_map_sanity_check
FUNCTION_WRAPPER(iomem_map_sanity_check, (resource_size_t addr, unsigned long size), {
    kern_printk("iomem_map_sanity_check is invoked.\n");
    PRE_WRAPPER_FUNC(addr, size);
    int ret = iomem_map_sanity_check(addr, size);
    POST_WRAPPER_FUNC(addr, size);
    kern_printk("iomem_map_sanity_check returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_pci_irq_enable
#define APP_WRAPPER_FOR_acpi_pci_irq_enable
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_pci_irq_enable
#define APP_WRAPPER_FOR_acpi_pci_irq_enable
FUNCTION_WRAPPER(acpi_pci_irq_enable, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("acpi_pci_irq_enable is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = acpi_pci_irq_enable(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("acpi_pci_irq_enable returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_wait_on_sync_kiocb
#define APP_WRAPPER_FOR_wait_on_sync_kiocb
#endif
 
#ifndef APP_WRAPPER_FOR_wait_on_sync_kiocb
#define APP_WRAPPER_FOR_wait_on_sync_kiocb
FUNCTION_WRAPPER(wait_on_sync_kiocb, (struct kiocb *iocb), {
    WRAP_RECURSIVE(iocb);
    TRACES_IF_WATCHPOINT(iocb);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(iocb)));
    kern_printk("wait_on_sync_kiocb is invoked.\n");
    PRE_WRAPPER_FUNC(iocb);
    ssize_t ret = wait_on_sync_kiocb(iocb);
    POST_WRAPPER_FUNC(iocb);
    kern_printk("wait_on_sync_kiocb returned.\n");
    TRACES_IF_WATCHPOINT(iocb);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(iocb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_readv
#define APP_WRAPPER_FOR_vfs_readv
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_readv
#define APP_WRAPPER_FOR_vfs_readv
FUNCTION_WRAPPER(vfs_readv, (struct file *_arg1, const struct iovec *_arg2, unsigned long _arg3, loff_t *_arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("vfs_readv is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    ssize_t ret = vfs_readv(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("vfs_readv returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_port_desc
#define APP_WRAPPER_FOR_ata_port_desc
#endif
 
#ifndef APP_WRAPPER_FOR_ata_port_desc
#define APP_WRAPPER_FOR_ata_port_desc
FUNCTION_WRAPPER_VOID(ata_port_desc, (struct ata_port *ap, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    // TODO: variadic arguments
    kern_printk("ata_port_desc is invoked.\n");
    PRE_WRAPPER_FUNC(ap, fmt);
    ata_port_desc(ap, fmt);
    POST_WRAPPER_FUNC(ap, fmt);
    kern_printk("ata_port_desc returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_sysfs_create_link_nowarn
#define APP_WRAPPER_FOR_sysfs_create_link_nowarn
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_create_link_nowarn
#define APP_WRAPPER_FOR_sysfs_create_link_nowarn
FUNCTION_WRAPPER(sysfs_create_link_nowarn, (struct kobject *kobj, struct kobject *target, const char *name), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    WRAP_RECURSIVE(target);
    TRACES_IF_WATCHPOINT(target);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(target)));
    kern_printk("sysfs_create_link_nowarn is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, target, name);
    int ret = sysfs_create_link_nowarn(kobj, target, name);
    POST_WRAPPER_FUNC(kobj, target, name);
    kern_printk("sysfs_create_link_nowarn returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    TRACES_IF_WATCHPOINT(target);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(target)));
    return ret;
})
#endif


#ifndef KERN_ADDR_argv_free
#define APP_WRAPPER_FOR_argv_free
#endif
 
#ifndef APP_WRAPPER_FOR_argv_free
#define APP_WRAPPER_FOR_argv_free
FUNCTION_WRAPPER_VOID(argv_free, (char **argv), {
    kern_printk("argv_free is invoked.\n");
    PRE_WRAPPER_FUNC(argv);
    argv_free(argv);
    POST_WRAPPER_FUNC(argv);
    kern_printk("argv_free returned.\n");
})
#endif


#ifndef KERN_ADDR_register_net_sysctl
#define APP_WRAPPER_FOR_register_net_sysctl
#endif
 
#ifndef APP_WRAPPER_FOR_register_net_sysctl
#define APP_WRAPPER_FOR_register_net_sysctl
FUNCTION_WRAPPER(register_net_sysctl, (struct net *net, const char *path, struct ctl_table *table), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    WRAP_RECURSIVE(table);
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    kern_printk("register_net_sysctl is invoked.\n");
    PRE_WRAPPER_FUNC(net, path, table);
    struct ctl_table_header *ret = register_net_sysctl(net, path, table);
    POST_WRAPPER_FUNC(net, path, table);
    kern_printk("register_net_sysctl returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_kmem_cache_alloc_node
#define APP_WRAPPER_FOR_kmem_cache_alloc_node
#endif
 
#ifndef APP_WRAPPER_FOR_kmem_cache_alloc_node
#define APP_WRAPPER_FOR_kmem_cache_alloc_node
FUNCTION_WRAPPER(kmem_cache_alloc_node, (struct kmem_cache *_arg1, gfp_t flags, int node), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kmem_cache)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("kmem_cache_alloc_node is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, flags, node);
    void *ret = kmem_cache_alloc_node(_arg1, flags, node);
    POST_WRAPPER_FUNC(_arg1, flags, node);
    kern_printk("kmem_cache_alloc_node returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kmem_cache)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_timing_compute
#define APP_WRAPPER_FOR_ata_timing_compute
#endif
 
#ifndef APP_WRAPPER_FOR_ata_timing_compute
#define APP_WRAPPER_FOR_ata_timing_compute
FUNCTION_WRAPPER(ata_timing_compute, (struct ata_device *_arg1, unsigned short _arg2, struct ata_timing *_arg3, int _arg4, int _arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ata_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("ata_timing_compute is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = ata_timing_compute(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("ata_timing_compute returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ata_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_poll_select_set_timeout
#define APP_WRAPPER_FOR_poll_select_set_timeout
#endif
 
#ifndef APP_WRAPPER_FOR_poll_select_set_timeout
#define APP_WRAPPER_FOR_poll_select_set_timeout
FUNCTION_WRAPPER(poll_select_set_timeout, (struct timespec *to, long sec, long nsec), {
    kern_printk("poll_select_set_timeout is invoked.\n");
    PRE_WRAPPER_FUNC(to, sec, nsec);
    int ret = poll_select_set_timeout(to, sec, nsec);
    POST_WRAPPER_FUNC(to, sec, nsec);
    kern_printk("poll_select_set_timeout returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_fprop_fraction_single
#define APP_WRAPPER_FOR_fprop_fraction_single
#endif
 
#ifndef APP_WRAPPER_FOR_fprop_fraction_single
#define APP_WRAPPER_FOR_fprop_fraction_single
FUNCTION_WRAPPER_VOID(fprop_fraction_single, (struct fprop_global *p, struct fprop_local_single *pl, unsigned long *numerator, unsigned long *denominator), {
    kern_printk("fprop_fraction_single is invoked.\n");
    PRE_WRAPPER_FUNC(p, pl, numerator, denominator);
    fprop_fraction_single(p, pl, numerator, denominator);
    POST_WRAPPER_FUNC(p, pl, numerator, denominator);
    kern_printk("fprop_fraction_single returned.\n");
})
#endif


#ifndef KERN_ADDR_dev_mc_add_excl
#define APP_WRAPPER_FOR_dev_mc_add_excl
#endif
 
#ifndef APP_WRAPPER_FOR_dev_mc_add_excl
#define APP_WRAPPER_FOR_dev_mc_add_excl
FUNCTION_WRAPPER(dev_mc_add_excl, (struct net_device *dev, unsigned const char *addr), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_mc_add_excl is invoked.\n");
    PRE_WRAPPER_FUNC(dev, addr);
    int ret = dev_mc_add_excl(dev, addr);
    POST_WRAPPER_FUNC(dev, addr);
    kern_printk("dev_mc_add_excl returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_disk
#define APP_WRAPPER_FOR_dm_disk
#endif
 
#ifndef APP_WRAPPER_FOR_dm_disk
#define APP_WRAPPER_FOR_dm_disk
FUNCTION_WRAPPER(dm_disk, (struct mapped_device *md), {
    kern_printk("dm_disk is invoked.\n");
    PRE_WRAPPER_FUNC(md);
    struct gendisk *ret = dm_disk(md);
    POST_WRAPPER_FUNC(md);
    kern_printk("dm_disk returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_get_anon_bdev
#define APP_WRAPPER_FOR_get_anon_bdev
#endif
 
#ifndef APP_WRAPPER_FOR_get_anon_bdev
#define APP_WRAPPER_FOR_get_anon_bdev
FUNCTION_WRAPPER(get_anon_bdev, (dev_t *_arg1), {
    kern_printk("get_anon_bdev is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = get_anon_bdev(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("get_anon_bdev returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_checksum
#define APP_WRAPPER_FOR_skb_checksum
#endif
 
#ifndef APP_WRAPPER_FOR_skb_checksum
#define APP_WRAPPER_FOR_skb_checksum
FUNCTION_WRAPPER(skb_checksum, (const struct sk_buff *skb, int offset, int len, __wsum csum), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(const struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_checksum is invoked.\n");
    PRE_WRAPPER_FUNC(skb, offset, len, csum);
    __wsum ret = skb_checksum(skb, offset, len, csum);
    POST_WRAPPER_FUNC(skb, offset, len, csum);
    kern_printk("skb_checksum returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(const struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sched_autogroup_exit
#define APP_WRAPPER_FOR_sched_autogroup_exit
#endif
 
#ifndef APP_WRAPPER_FOR_sched_autogroup_exit
#define APP_WRAPPER_FOR_sched_autogroup_exit
FUNCTION_WRAPPER_VOID(sched_autogroup_exit, (struct signal_struct *sig), {
    WRAP_RECURSIVE(sig);
    TRACES_IF_WATCHPOINT(sig);
    SCAN_HEAD_FUNC(struct signal_struct)(*(TO_UNWATCHED_ADDRESS(sig)));
    kern_printk("sched_autogroup_exit is invoked.\n");
    PRE_WRAPPER_FUNC(sig);
    sched_autogroup_exit(sig);
    POST_WRAPPER_FUNC(sig);
    kern_printk("sched_autogroup_exit returned.\n");
    TRACES_IF_WATCHPOINT(sig);
    SCAN_HEAD_FUNC(struct signal_struct)(*(TO_UNWATCHED_ADDRESS(sig)));
})
#endif


#ifndef KERN_ADDR_generic_file_llseek
#define APP_WRAPPER_FOR_generic_file_llseek
#endif
 
#ifndef APP_WRAPPER_FOR_generic_file_llseek
#define APP_WRAPPER_FOR_generic_file_llseek
FUNCTION_WRAPPER(generic_file_llseek, (struct file *file, loff_t offset, int whence), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("generic_file_llseek is invoked.\n");
    PRE_WRAPPER_FUNC(file, offset, whence);
    loff_t ret = generic_file_llseek(file, offset, whence);
    POST_WRAPPER_FUNC(file, offset, whence);
    kern_printk("generic_file_llseek returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_input_ff_event
#define APP_WRAPPER_FOR_input_ff_event
#endif
 
#ifndef APP_WRAPPER_FOR_input_ff_event
#define APP_WRAPPER_FOR_input_ff_event
FUNCTION_WRAPPER(input_ff_event, (struct input_dev *dev, unsigned int type, unsigned int code, int value), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("input_ff_event is invoked.\n");
    PRE_WRAPPER_FUNC(dev, type, code, value);
    int ret = input_ff_event(dev, type, code, value);
    POST_WRAPPER_FUNC(dev, type, code, value);
    kern_printk("input_ff_event returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dup_mm
#define APP_WRAPPER_FOR_dup_mm
#endif
 
#ifndef APP_WRAPPER_FOR_dup_mm
#define APP_WRAPPER_FOR_dup_mm
FUNCTION_WRAPPER(dup_mm, (struct task_struct *tsk), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("dup_mm is invoked.\n");
    PRE_WRAPPER_FUNC(tsk);
    struct mm_struct *ret = dup_mm(tsk);
    POST_WRAPPER_FUNC(tsk);
    kern_printk("dup_mm returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_lock_updates
#define APP_WRAPPER_FOR_jbd2_journal_lock_updates
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_lock_updates
#define APP_WRAPPER_FOR_jbd2_journal_lock_updates
FUNCTION_WRAPPER_VOID(jbd2_journal_lock_updates, (journal_t *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_lock_updates is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    jbd2_journal_lock_updates(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("jbd2_journal_lock_updates returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR___jbd2_journal_refile_buffer
#define APP_WRAPPER_FOR___jbd2_journal_refile_buffer
#endif
 
#ifndef APP_WRAPPER_FOR___jbd2_journal_refile_buffer
#define APP_WRAPPER_FOR___jbd2_journal_refile_buffer
FUNCTION_WRAPPER_VOID(__jbd2_journal_refile_buffer, (struct journal_head *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__jbd2_journal_refile_buffer is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    __jbd2_journal_refile_buffer(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__jbd2_journal_refile_buffer returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_lock_sock_nested
#define APP_WRAPPER_FOR_lock_sock_nested
#endif
 
#ifndef APP_WRAPPER_FOR_lock_sock_nested
#define APP_WRAPPER_FOR_lock_sock_nested
FUNCTION_WRAPPER_VOID(lock_sock_nested, (struct sock *sk, int subclass), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("lock_sock_nested is invoked.\n");
    PRE_WRAPPER_FUNC(sk, subclass);
    lock_sock_nested(sk, subclass);
    POST_WRAPPER_FUNC(sk, subclass);
    kern_printk("lock_sock_nested returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR___set_special_pids
#define APP_WRAPPER_FOR___set_special_pids
#endif
 
#ifndef APP_WRAPPER_FOR___set_special_pids
#define APP_WRAPPER_FOR___set_special_pids
FUNCTION_WRAPPER_VOID(__set_special_pids, (struct pid *pid), {
    WRAP_RECURSIVE(pid);
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
    kern_printk("__set_special_pids is invoked.\n");
    PRE_WRAPPER_FUNC(pid);
    __set_special_pids(pid);
    POST_WRAPPER_FUNC(pid);
    kern_printk("__set_special_pids returned.\n");
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
})
#endif


#ifndef KERN_ADDR_bio_phys_segments
#define APP_WRAPPER_FOR_bio_phys_segments
#endif
 
#ifndef APP_WRAPPER_FOR_bio_phys_segments
#define APP_WRAPPER_FOR_bio_phys_segments
FUNCTION_WRAPPER(bio_phys_segments, (struct request_queue *_arg1, struct bio *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("bio_phys_segments is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = bio_phys_segments(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("bio_phys_segments returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_arch_ptrace
#define APP_WRAPPER_FOR_compat_arch_ptrace
#endif
 
#ifndef APP_WRAPPER_FOR_compat_arch_ptrace
#define APP_WRAPPER_FOR_compat_arch_ptrace
FUNCTION_WRAPPER(compat_arch_ptrace, (struct task_struct *child, compat_long_t request, compat_ulong_t addr, compat_ulong_t data), {
    WRAP_RECURSIVE(child);
    TRACES_IF_WATCHPOINT(child);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(child)));
    kern_printk("compat_arch_ptrace is invoked.\n");
    PRE_WRAPPER_FUNC(child, request, addr, data);
    long ret = compat_arch_ptrace(child, request, addr, data);
    POST_WRAPPER_FUNC(child, request, addr, data);
    kern_printk("compat_arch_ptrace returned.\n");
    TRACES_IF_WATCHPOINT(child);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(child)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_queue_max_segments
#define APP_WRAPPER_FOR_blk_queue_max_segments
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_max_segments
#define APP_WRAPPER_FOR_blk_queue_max_segments
FUNCTION_WRAPPER_VOID(blk_queue_max_segments, (struct request_queue *_arg1, unsigned short _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_queue_max_segments is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    blk_queue_max_segments(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_queue_max_segments returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_blk_free_devt
#define APP_WRAPPER_FOR_blk_free_devt
#endif
 
#ifndef APP_WRAPPER_FOR_blk_free_devt
#define APP_WRAPPER_FOR_blk_free_devt
FUNCTION_WRAPPER_VOID(blk_free_devt, (dev_t devt), {
    kern_printk("blk_free_devt is invoked.\n");
    PRE_WRAPPER_FUNC(devt);
    blk_free_devt(devt);
    POST_WRAPPER_FUNC(devt);
    kern_printk("blk_free_devt returned.\n");
})
#endif


#ifndef KERN_ADDR_wakeup_source_add
#define APP_WRAPPER_FOR_wakeup_source_add
#endif
 
#ifndef APP_WRAPPER_FOR_wakeup_source_add
#define APP_WRAPPER_FOR_wakeup_source_add
FUNCTION_WRAPPER_VOID(wakeup_source_add, (struct wakeup_source *ws), {
    WRAP_RECURSIVE(ws);
    TRACES_IF_WATCHPOINT(ws);
    SCAN_HEAD_FUNC(struct wakeup_source)(*(TO_UNWATCHED_ADDRESS(ws)));
    kern_printk("wakeup_source_add is invoked.\n");
    PRE_WRAPPER_FUNC(ws);
    wakeup_source_add(ws);
    POST_WRAPPER_FUNC(ws);
    kern_printk("wakeup_source_add returned.\n");
    TRACES_IF_WATCHPOINT(ws);
    SCAN_HEAD_FUNC(struct wakeup_source)(*(TO_UNWATCHED_ADDRESS(ws)));
})
#endif


#ifndef KERN_ADDR_param_set_long
#define APP_WRAPPER_FOR_param_set_long
#endif
 
#ifndef APP_WRAPPER_FOR_param_set_long
#define APP_WRAPPER_FOR_param_set_long
FUNCTION_WRAPPER(param_set_long, (const char *val, const struct kernel_param *kp), {
    WRAP_RECURSIVE(kp);
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    kern_printk("param_set_long is invoked.\n");
    PRE_WRAPPER_FUNC(val, kp);
    int ret = param_set_long(val, kp);
    POST_WRAPPER_FUNC(val, kp);
    kern_printk("param_set_long returned.\n");
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_final_putname
#define APP_WRAPPER_FOR_final_putname
#endif
 
#ifndef APP_WRAPPER_FOR_final_putname
#define APP_WRAPPER_FOR_final_putname
FUNCTION_WRAPPER_VOID(final_putname, (struct filename *name), {
    kern_printk("final_putname is invoked.\n");
    PRE_WRAPPER_FUNC(name);
    final_putname(name);
    POST_WRAPPER_FUNC(name);
    kern_printk("final_putname returned.\n");
})
#endif


#ifndef KERN_ADDR_kernel_recvmsg
#define APP_WRAPPER_FOR_kernel_recvmsg
#endif
 
#ifndef APP_WRAPPER_FOR_kernel_recvmsg
#define APP_WRAPPER_FOR_kernel_recvmsg
FUNCTION_WRAPPER(kernel_recvmsg, (struct socket *sock, struct msghdr *msg, struct kvec *vec, size_t num, size_t len, int flags), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    kern_printk("kernel_recvmsg is invoked.\n");
    PRE_WRAPPER_FUNC(sock, msg, vec, num, len, flags);
    int ret = kernel_recvmsg(sock, msg, vec, num, len, flags);
    POST_WRAPPER_FUNC(sock, msg, vec, num, len, flags);
    kern_printk("kernel_recvmsg returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pmdp_clear_flush
#define APP_WRAPPER_FOR_pmdp_clear_flush
#endif
 
#ifndef APP_WRAPPER_FOR_pmdp_clear_flush
#define APP_WRAPPER_FOR_pmdp_clear_flush
FUNCTION_WRAPPER(pmdp_clear_flush, (struct vm_area_struct *vma, unsigned long address, pmd_t *pmdp), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("pmdp_clear_flush is invoked.\n");
    PRE_WRAPPER_FUNC(vma, address, pmdp);
    pmd_t ret = pmdp_clear_flush(vma, address, pmdp);
    POST_WRAPPER_FUNC(vma, address, pmdp);
    kern_printk("pmdp_clear_flush returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_tasklet_kill
#define APP_WRAPPER_FOR_tasklet_kill
#endif
 
#ifndef APP_WRAPPER_FOR_tasklet_kill
#define APP_WRAPPER_FOR_tasklet_kill
FUNCTION_WRAPPER_VOID(tasklet_kill, (struct tasklet_struct *t), {
    WRAP_RECURSIVE(t);
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct tasklet_struct)(*(TO_UNWATCHED_ADDRESS(t)));
    kern_printk("tasklet_kill is invoked.\n");
    PRE_WRAPPER_FUNC(t);
    tasklet_kill(t);
    POST_WRAPPER_FUNC(t);
    kern_printk("tasklet_kill returned.\n");
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct tasklet_struct)(*(TO_UNWATCHED_ADDRESS(t)));
})
#endif


#ifndef KERN_ADDR_native_io_delay
#define APP_WRAPPER_FOR_native_io_delay
#endif
 
#ifndef APP_WRAPPER_FOR_native_io_delay
#define APP_WRAPPER_FOR_native_io_delay
FUNCTION_WRAPPER_VOID(native_io_delay, (), {
    kern_printk("native_io_delay is invoked.\n");
    PRE_WRAPPER_FUNC();
    native_io_delay();
    POST_WRAPPER_FUNC();
    kern_printk("native_io_delay returned.\n");
})
#endif


#ifndef KERN_ADDR_do_set_cpus_allowed
#define APP_WRAPPER_FOR_do_set_cpus_allowed
#endif
 
#ifndef APP_WRAPPER_FOR_do_set_cpus_allowed
#define APP_WRAPPER_FOR_do_set_cpus_allowed
FUNCTION_WRAPPER_VOID(do_set_cpus_allowed, (struct task_struct *p, const struct cpumask *new_mask), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("do_set_cpus_allowed is invoked.\n");
    PRE_WRAPPER_FUNC(p, new_mask);
    do_set_cpus_allowed(p, new_mask);
    POST_WRAPPER_FUNC(p, new_mask);
    kern_printk("do_set_cpus_allowed returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
})
#endif


#ifndef KERN_ADDR_schedule_timeout_killable
#define APP_WRAPPER_FOR_schedule_timeout_killable
#endif
 
#ifndef APP_WRAPPER_FOR_schedule_timeout_killable
#define APP_WRAPPER_FOR_schedule_timeout_killable
FUNCTION_WRAPPER(schedule_timeout_killable, (signed long timeout), {
    kern_printk("schedule_timeout_killable is invoked.\n");
    PRE_WRAPPER_FUNC(timeout);
    long ret = schedule_timeout_killable(timeout);
    POST_WRAPPER_FUNC(timeout);
    kern_printk("schedule_timeout_killable returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_mempool_free_pages
#define APP_WRAPPER_FOR_mempool_free_pages
#endif
 
#ifndef APP_WRAPPER_FOR_mempool_free_pages
#define APP_WRAPPER_FOR_mempool_free_pages
FUNCTION_WRAPPER_VOID(mempool_free_pages, (void *element, void *pool_data), {
    kern_printk("mempool_free_pages is invoked.\n");
    PRE_WRAPPER_FUNC(element, pool_data);
    mempool_free_pages(element, pool_data);
    POST_WRAPPER_FUNC(element, pool_data);
    kern_printk("mempool_free_pages returned.\n");
})
#endif


#ifndef KERN_ADDR_default_find_smp_config
#define APP_WRAPPER_FOR_default_find_smp_config
#endif
 
#ifndef APP_WRAPPER_FOR_default_find_smp_config
#define APP_WRAPPER_FOR_default_find_smp_config
FUNCTION_WRAPPER_VOID(default_find_smp_config, (), {
    kern_printk("default_find_smp_config is invoked.\n");
    PRE_WRAPPER_FUNC();
    default_find_smp_config();
    POST_WRAPPER_FUNC();
    kern_printk("default_find_smp_config returned.\n");
})
#endif


#ifndef KERN_ADDR_bdi_start_writeback
#define APP_WRAPPER_FOR_bdi_start_writeback
#endif
 
#ifndef APP_WRAPPER_FOR_bdi_start_writeback
#define APP_WRAPPER_FOR_bdi_start_writeback
FUNCTION_WRAPPER_VOID(bdi_start_writeback, (struct backing_dev_info *bdi, long nr_pages, enum wb_reason reason), {
    WRAP_RECURSIVE(bdi);
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
    kern_printk("bdi_start_writeback is invoked.\n");
    PRE_WRAPPER_FUNC(bdi, nr_pages, reason);
    bdi_start_writeback(bdi, nr_pages, reason);
    POST_WRAPPER_FUNC(bdi, nr_pages, reason);
    kern_printk("bdi_start_writeback returned.\n");
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
})
#endif


#ifndef KERN_ADDR_yield_to
#define APP_WRAPPER_FOR_yield_to
#endif
 
#ifndef APP_WRAPPER_FOR_yield_to
#define APP_WRAPPER_FOR_yield_to
FUNCTION_WRAPPER(yield_to, (struct task_struct *p, bool preempt), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("yield_to is invoked.\n");
    PRE_WRAPPER_FUNC(p, preempt);
    bool ret = yield_to(p, preempt);
    POST_WRAPPER_FUNC(p, preempt);
    kern_printk("yield_to returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    return ret;
})
#endif


#ifndef KERN_ADDR___blockdev_direct_IO
#define APP_WRAPPER_FOR___blockdev_direct_IO
#endif
 
#ifndef APP_WRAPPER_FOR___blockdev_direct_IO
#define APP_WRAPPER_FOR___blockdev_direct_IO
FUNCTION_WRAPPER(__blockdev_direct_IO, (int rw, struct kiocb *iocb, struct inode *inode, struct block_device *bdev, const struct iovec *iov, loff_t offset, unsigned long nr_segs, get_block_t get_block, dio_iodone_t end_io, dio_submit_t submit_io, int flags), {
    WRAP_RECURSIVE(iocb);
    TRACES_IF_WATCHPOINT(iocb);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(iocb)));
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    kern_printk("__blockdev_direct_IO is invoked.\n");
    PRE_WRAPPER_FUNC(rw, iocb, inode, bdev, iov, offset, nr_segs, get_block, end_io, submit_io, flags);
    ssize_t ret = __blockdev_direct_IO(rw, iocb, inode, bdev, iov, offset, nr_segs, get_block, end_io, submit_io, flags);
    POST_WRAPPER_FUNC(rw, iocb, inode, bdev, iov, offset, nr_segs, get_block, end_io, submit_io, flags);
    kern_printk("__blockdev_direct_IO returned.\n");
    TRACES_IF_WATCHPOINT(iocb);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(iocb)));
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_ustat
#define APP_WRAPPER_FOR_vfs_ustat
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_ustat
#define APP_WRAPPER_FOR_vfs_ustat
FUNCTION_WRAPPER(vfs_ustat, (dev_t _arg1, struct kstatfs *_arg2), {
    kern_printk("vfs_ustat is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = vfs_ustat(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("vfs_ustat returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_probe_kernel_read
#define APP_WRAPPER_FOR_probe_kernel_read
#endif
 
#ifndef APP_WRAPPER_FOR_probe_kernel_read
#define APP_WRAPPER_FOR_probe_kernel_read
FUNCTION_WRAPPER(probe_kernel_read, (void *dst, const void *src, size_t size), {
    kern_printk("probe_kernel_read is invoked.\n");
    PRE_WRAPPER_FUNC(dst, src, size);
    long ret = probe_kernel_read(dst, src, size);
    POST_WRAPPER_FUNC(dst, src, size);
    kern_printk("probe_kernel_read returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_add_journal_head
#define APP_WRAPPER_FOR_jbd2_journal_add_journal_head
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_add_journal_head
#define APP_WRAPPER_FOR_jbd2_journal_add_journal_head
FUNCTION_WRAPPER(jbd2_journal_add_journal_head, (struct buffer_head *bh), {
    WRAP_RECURSIVE(bh);
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    kern_printk("jbd2_journal_add_journal_head is invoked.\n");
    PRE_WRAPPER_FUNC(bh);
    struct journal_head *ret = jbd2_journal_add_journal_head(bh);
    POST_WRAPPER_FUNC(bh);
    kern_printk("jbd2_journal_add_journal_head returned.\n");
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_smp_send_reschedule
#define APP_WRAPPER_FOR_smp_send_reschedule
#endif
 
#ifndef APP_WRAPPER_FOR_smp_send_reschedule
#define APP_WRAPPER_FOR_smp_send_reschedule
FUNCTION_WRAPPER_VOID(smp_send_reschedule, (int cpu), {
    kern_printk("smp_send_reschedule is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    smp_send_reschedule(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("smp_send_reschedule returned.\n");
})
#endif


#ifndef KERN_ADDR_enable_IR_x2apic
#define APP_WRAPPER_FOR_enable_IR_x2apic
#endif
 
#ifndef APP_WRAPPER_FOR_enable_IR_x2apic
#define APP_WRAPPER_FOR_enable_IR_x2apic
FUNCTION_WRAPPER_VOID(enable_IR_x2apic, (), {
    kern_printk("enable_IR_x2apic is invoked.\n");
    PRE_WRAPPER_FUNC();
    enable_IR_x2apic();
    POST_WRAPPER_FUNC();
    kern_printk("enable_IR_x2apic returned.\n");
})
#endif


#ifndef KERN_ADDR_remove_percpu_irq
#define APP_WRAPPER_FOR_remove_percpu_irq
#endif
 
#ifndef APP_WRAPPER_FOR_remove_percpu_irq
#define APP_WRAPPER_FOR_remove_percpu_irq
FUNCTION_WRAPPER_VOID(remove_percpu_irq, (unsigned int irq, struct irqaction *act), {
    WRAP_RECURSIVE(act);
    TRACES_IF_WATCHPOINT(act);
    SCAN_HEAD_FUNC(struct irqaction)(*(TO_UNWATCHED_ADDRESS(act)));
    kern_printk("remove_percpu_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq, act);
    remove_percpu_irq(irq, act);
    POST_WRAPPER_FUNC(irq, act);
    kern_printk("remove_percpu_irq returned.\n");
    TRACES_IF_WATCHPOINT(act);
    SCAN_HEAD_FUNC(struct irqaction)(*(TO_UNWATCHED_ADDRESS(act)));
})
#endif


#ifndef KERN_ADDR_idr_for_each
#define APP_WRAPPER_FOR_idr_for_each
#endif
 
#ifndef APP_WRAPPER_FOR_idr_for_each
#define APP_WRAPPER_FOR_idr_for_each
FUNCTION_WRAPPER(idr_for_each, (struct idr *idp, int (*fn)(int, void *, void *), void *data), {
    WRAP_RECURSIVE(idp);
    TRACES_IF_WATCHPOINT(idp);
    SCAN_HEAD_FUNC(struct idr)(*(TO_UNWATCHED_ADDRESS(idp)));
    WRAP_FUNCTION(fn);
    kern_printk("idr_for_each is invoked.\n");
    PRE_WRAPPER_FUNC(idp, fn, data);
    int ret = idr_for_each(idp, fn, data);
    POST_WRAPPER_FUNC(idp, fn, data);
    kern_printk("idr_for_each returned.\n");
    TRACES_IF_WATCHPOINT(idp);
    SCAN_HEAD_FUNC(struct idr)(*(TO_UNWATCHED_ADDRESS(idp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cap_mmap_file
#define APP_WRAPPER_FOR_cap_mmap_file
#endif
 
#ifndef APP_WRAPPER_FOR_cap_mmap_file
#define APP_WRAPPER_FOR_cap_mmap_file
FUNCTION_WRAPPER(cap_mmap_file, (struct file *file, unsigned long reqprot, unsigned long prot, unsigned long flags), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("cap_mmap_file is invoked.\n");
    PRE_WRAPPER_FUNC(file, reqprot, prot, flags);
    int ret = cap_mmap_file(file, reqprot, prot, flags);
    POST_WRAPPER_FUNC(file, reqprot, prot, flags);
    kern_printk("cap_mmap_file returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bh_uptodate_or_lock
#define APP_WRAPPER_FOR_bh_uptodate_or_lock
#endif
 
#ifndef APP_WRAPPER_FOR_bh_uptodate_or_lock
#define APP_WRAPPER_FOR_bh_uptodate_or_lock
FUNCTION_WRAPPER(bh_uptodate_or_lock, (struct buffer_head *bh), {
    WRAP_RECURSIVE(bh);
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    kern_printk("bh_uptodate_or_lock is invoked.\n");
    PRE_WRAPPER_FUNC(bh);
    int ret = bh_uptodate_or_lock(bh);
    POST_WRAPPER_FUNC(bh);
    kern_printk("bh_uptodate_or_lock returned.\n");
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    return ret;
})
#endif


#ifndef KERN_ADDR_neigh_compat_output
#define APP_WRAPPER_FOR_neigh_compat_output
#endif
 
#ifndef APP_WRAPPER_FOR_neigh_compat_output
#define APP_WRAPPER_FOR_neigh_compat_output
FUNCTION_WRAPPER(neigh_compat_output, (struct neighbour *neigh, struct sk_buff *skb), {
    WRAP_RECURSIVE(neigh);
    TRACES_IF_WATCHPOINT(neigh);
    SCAN_HEAD_FUNC(struct neighbour)(*(TO_UNWATCHED_ADDRESS(neigh)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("neigh_compat_output is invoked.\n");
    PRE_WRAPPER_FUNC(neigh, skb);
    int ret = neigh_compat_output(neigh, skb);
    POST_WRAPPER_FUNC(neigh, skb);
    kern_printk("neigh_compat_output returned.\n");
    TRACES_IF_WATCHPOINT(neigh);
    SCAN_HEAD_FUNC(struct neighbour)(*(TO_UNWATCHED_ADDRESS(neigh)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_prop_local_init_percpu
#define APP_WRAPPER_FOR_prop_local_init_percpu
#endif
 
#ifndef APP_WRAPPER_FOR_prop_local_init_percpu
#define APP_WRAPPER_FOR_prop_local_init_percpu
FUNCTION_WRAPPER(prop_local_init_percpu, (struct prop_local_percpu *pl), {
    kern_printk("prop_local_init_percpu is invoked.\n");
    PRE_WRAPPER_FUNC(pl);
    int ret = prop_local_init_percpu(pl);
    POST_WRAPPER_FUNC(pl);
    kern_printk("prop_local_init_percpu returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_alloc_pages_current
#define APP_WRAPPER_FOR_alloc_pages_current
#endif
 
#ifndef APP_WRAPPER_FOR_alloc_pages_current
#define APP_WRAPPER_FOR_alloc_pages_current
FUNCTION_WRAPPER(alloc_pages_current, (gfp_t gfp_mask, unsigned int order), {
    kern_printk("alloc_pages_current is invoked.\n");
    PRE_WRAPPER_FUNC(gfp_mask, order);
    struct page *ret = alloc_pages_current(gfp_mask, order);
    POST_WRAPPER_FUNC(gfp_mask, order);
    kern_printk("alloc_pages_current returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_select_affinity
#define APP_WRAPPER_FOR_irq_select_affinity
#endif
 
#ifndef APP_WRAPPER_FOR_irq_select_affinity
#define APP_WRAPPER_FOR_irq_select_affinity
FUNCTION_WRAPPER(irq_select_affinity, (unsigned int irq), {
    kern_printk("irq_select_affinity is invoked.\n");
    PRE_WRAPPER_FUNC(irq);
    int ret = irq_select_affinity(irq);
    POST_WRAPPER_FUNC(irq);
    kern_printk("irq_select_affinity returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_phy_register_fixup
#define APP_WRAPPER_FOR_phy_register_fixup
#endif
 
#ifndef APP_WRAPPER_FOR_phy_register_fixup
#define APP_WRAPPER_FOR_phy_register_fixup
FUNCTION_WRAPPER(phy_register_fixup, (const char *bus_id, u32 phy_uid, u32 phy_uid_mask, int (*run)(struct phy_device *)), {
    WRAP_FUNCTION(run);
    kern_printk("phy_register_fixup is invoked.\n");
    PRE_WRAPPER_FUNC(bus_id, phy_uid, phy_uid_mask, run);
    int ret = phy_register_fixup(bus_id, phy_uid, phy_uid_mask, run);
    POST_WRAPPER_FUNC(bus_id, phy_uid, phy_uid_mask, run);
    kern_printk("phy_register_fixup returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_test_lock
#define APP_WRAPPER_FOR_vfs_test_lock
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_test_lock
#define APP_WRAPPER_FOR_vfs_test_lock
FUNCTION_WRAPPER(vfs_test_lock, (struct file *_arg1, struct file_lock *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("vfs_test_lock is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = vfs_test_lock(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("vfs_test_lock returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sk_stream_write_space
#define APP_WRAPPER_FOR_sk_stream_write_space
#endif
 
#ifndef APP_WRAPPER_FOR_sk_stream_write_space
#define APP_WRAPPER_FOR_sk_stream_write_space
FUNCTION_WRAPPER_VOID(sk_stream_write_space, (struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sk_stream_write_space is invoked.\n");
    PRE_WRAPPER_FUNC(sk);
    sk_stream_write_space(sk);
    POST_WRAPPER_FUNC(sk);
    kern_printk("sk_stream_write_space returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR_find_last_bit
#define APP_WRAPPER_FOR_find_last_bit
#endif
 
#ifndef APP_WRAPPER_FOR_find_last_bit
#define APP_WRAPPER_FOR_find_last_bit
FUNCTION_WRAPPER(find_last_bit, (unsigned const long *addr, unsigned long size), {
    kern_printk("find_last_bit is invoked.\n");
    PRE_WRAPPER_FUNC(addr, size);
    long ret = find_last_bit(addr, size);
    POST_WRAPPER_FUNC(addr, size);
    kern_printk("find_last_bit returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_flush_delayed_work
#define APP_WRAPPER_FOR_flush_delayed_work
#endif
 
#ifndef APP_WRAPPER_FOR_flush_delayed_work
#define APP_WRAPPER_FOR_flush_delayed_work
FUNCTION_WRAPPER(flush_delayed_work, (struct delayed_work *dwork), {
    WRAP_RECURSIVE(dwork);
    TRACES_IF_WATCHPOINT(dwork);
    SCAN_HEAD_FUNC(struct delayed_work)(*(TO_UNWATCHED_ADDRESS(dwork)));
    kern_printk("flush_delayed_work is invoked.\n");
    PRE_WRAPPER_FUNC(dwork);
    bool ret = flush_delayed_work(dwork);
    POST_WRAPPER_FUNC(dwork);
    kern_printk("flush_delayed_work returned.\n");
    TRACES_IF_WATCHPOINT(dwork);
    SCAN_HEAD_FUNC(struct delayed_work)(*(TO_UNWATCHED_ADDRESS(dwork)));
    return ret;
})
#endif


#ifndef KERN_ADDR_swiotlb_free
#define APP_WRAPPER_FOR_swiotlb_free
#endif
 
#ifndef APP_WRAPPER_FOR_swiotlb_free
#define APP_WRAPPER_FOR_swiotlb_free
FUNCTION_WRAPPER_VOID(swiotlb_free, (), {
    kern_printk("swiotlb_free is invoked.\n");
    PRE_WRAPPER_FUNC();
    swiotlb_free();
    POST_WRAPPER_FUNC();
    kern_printk("swiotlb_free returned.\n");
})
#endif


#ifndef KERN_ADDR_kthread_freezable_should_stop
#define APP_WRAPPER_FOR_kthread_freezable_should_stop
#endif
 
#ifndef APP_WRAPPER_FOR_kthread_freezable_should_stop
#define APP_WRAPPER_FOR_kthread_freezable_should_stop
FUNCTION_WRAPPER(kthread_freezable_should_stop, (bool *was_frozen), {
    kern_printk("kthread_freezable_should_stop is invoked.\n");
    PRE_WRAPPER_FUNC(was_frozen);
    bool ret = kthread_freezable_should_stop(was_frozen);
    POST_WRAPPER_FUNC(was_frozen);
    kern_printk("kthread_freezable_should_stop returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_drop_super
#define APP_WRAPPER_FOR_drop_super
#endif
 
#ifndef APP_WRAPPER_FOR_drop_super
#define APP_WRAPPER_FOR_drop_super
FUNCTION_WRAPPER_VOID(drop_super, (struct super_block *sb), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("drop_super is invoked.\n");
    PRE_WRAPPER_FUNC(sb);
    drop_super(sb);
    POST_WRAPPER_FUNC(sb);
    kern_printk("drop_super returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
})
#endif


#ifndef KERN_ADDR_dm_read_arg_group
#define APP_WRAPPER_FOR_dm_read_arg_group
#endif
 
#ifndef APP_WRAPPER_FOR_dm_read_arg_group
#define APP_WRAPPER_FOR_dm_read_arg_group
FUNCTION_WRAPPER(dm_read_arg_group, (struct dm_arg *arg, struct dm_arg_set *arg_set, unsigned int *num_args, char **error), {
    kern_printk("dm_read_arg_group is invoked.\n");
    PRE_WRAPPER_FUNC(arg, arg_set, num_args, error);
    int ret = dm_read_arg_group(arg, arg_set, num_args, error);
    POST_WRAPPER_FUNC(arg, arg_set, num_args, error);
    kern_printk("dm_read_arg_group returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_wake_up_process
#define APP_WRAPPER_FOR_wake_up_process
#endif
 
#ifndef APP_WRAPPER_FOR_wake_up_process
#define APP_WRAPPER_FOR_wake_up_process
FUNCTION_WRAPPER(wake_up_process, (struct task_struct *tsk), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("wake_up_process is invoked.\n");
    PRE_WRAPPER_FUNC(tsk);
    int ret = wake_up_process(tsk);
    POST_WRAPPER_FUNC(tsk);
    kern_printk("wake_up_process returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    return ret;
})
#endif


#ifndef KERN_ADDR___pskb_pull_tail
#define APP_WRAPPER_FOR___pskb_pull_tail
#endif
 
#ifndef APP_WRAPPER_FOR___pskb_pull_tail
#define APP_WRAPPER_FOR___pskb_pull_tail
FUNCTION_WRAPPER(__pskb_pull_tail, (struct sk_buff *skb, int delta), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("__pskb_pull_tail is invoked.\n");
    PRE_WRAPPER_FUNC(skb, delta);
    unsigned char *ret = __pskb_pull_tail(skb, delta);
    POST_WRAPPER_FUNC(skb, delta);
    kern_printk("__pskb_pull_tail returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_arch_uprobe_exception_notify
#define APP_WRAPPER_FOR_arch_uprobe_exception_notify
#endif
 
#ifndef APP_WRAPPER_FOR_arch_uprobe_exception_notify
#define APP_WRAPPER_FOR_arch_uprobe_exception_notify
FUNCTION_WRAPPER(arch_uprobe_exception_notify, (struct notifier_block *self, unsigned long val, void *data), {
    WRAP_RECURSIVE(self);
    TRACES_IF_WATCHPOINT(self);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(self)));
    kern_printk("arch_uprobe_exception_notify is invoked.\n");
    PRE_WRAPPER_FUNC(self, val, data);
    int ret = arch_uprobe_exception_notify(self, val, data);
    POST_WRAPPER_FUNC(self, val, data);
    kern_printk("arch_uprobe_exception_notify returned.\n");
    TRACES_IF_WATCHPOINT(self);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(self)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_unmap_rom
#define APP_WRAPPER_FOR_pci_unmap_rom
#endif
 
#ifndef APP_WRAPPER_FOR_pci_unmap_rom
#define APP_WRAPPER_FOR_pci_unmap_rom
FUNCTION_WRAPPER_VOID(pci_unmap_rom, (struct pci_dev *pdev, void *rom), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("pci_unmap_rom is invoked.\n");
    PRE_WRAPPER_FUNC(pdev, rom);
    pci_unmap_rom(pdev, rom);
    POST_WRAPPER_FUNC(pdev, rom);
    kern_printk("pci_unmap_rom returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
})
#endif


#ifndef KERN_ADDR_pcibios_set_master
#define APP_WRAPPER_FOR_pcibios_set_master
#endif
 
#ifndef APP_WRAPPER_FOR_pcibios_set_master
#define APP_WRAPPER_FOR_pcibios_set_master
FUNCTION_WRAPPER_VOID(pcibios_set_master, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pcibios_set_master is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pcibios_set_master(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pcibios_set_master returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_ioport_unmap
#define APP_WRAPPER_FOR_ioport_unmap
#endif
 
#ifndef APP_WRAPPER_FOR_ioport_unmap
#define APP_WRAPPER_FOR_ioport_unmap
FUNCTION_WRAPPER_VOID(ioport_unmap, (void *_arg1), {
    kern_printk("ioport_unmap is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    ioport_unmap(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("ioport_unmap returned.\n");
})
#endif


#ifndef KERN_ADDR_gfp_pfmemalloc_allowed
#define APP_WRAPPER_FOR_gfp_pfmemalloc_allowed
#endif
 
#ifndef APP_WRAPPER_FOR_gfp_pfmemalloc_allowed
#define APP_WRAPPER_FOR_gfp_pfmemalloc_allowed
FUNCTION_WRAPPER(gfp_pfmemalloc_allowed, (gfp_t gfp_mask), {
    kern_printk("gfp_pfmemalloc_allowed is invoked.\n");
    PRE_WRAPPER_FUNC(gfp_mask);
    bool ret = gfp_pfmemalloc_allowed(gfp_mask);
    POST_WRAPPER_FUNC(gfp_mask);
    kern_printk("gfp_pfmemalloc_allowed returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_signals_init
#define APP_WRAPPER_FOR_signals_init
#endif
 
#ifndef APP_WRAPPER_FOR_signals_init
#define APP_WRAPPER_FOR_signals_init
FUNCTION_WRAPPER_VOID(signals_init, (), {
    kern_printk("signals_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    signals_init();
    POST_WRAPPER_FUNC();
    kern_printk("signals_init returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_bus_data_handler
#define APP_WRAPPER_FOR_acpi_bus_data_handler
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_bus_data_handler
#define APP_WRAPPER_FOR_acpi_bus_data_handler
FUNCTION_WRAPPER_VOID(acpi_bus_data_handler, (acpi_handle handle, void *context), {
    kern_printk("acpi_bus_data_handler is invoked.\n");
    PRE_WRAPPER_FUNC(handle, context);
    acpi_bus_data_handler(handle, context);
    POST_WRAPPER_FUNC(handle, context);
    kern_printk("acpi_bus_data_handler returned.\n");
})
#endif


#ifndef KERN_ADDR_skb_kill_datagram
#define APP_WRAPPER_FOR_skb_kill_datagram
#endif
 
#ifndef APP_WRAPPER_FOR_skb_kill_datagram
#define APP_WRAPPER_FOR_skb_kill_datagram
FUNCTION_WRAPPER(skb_kill_datagram, (struct sock *sk, struct sk_buff *skb, unsigned int flags), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_kill_datagram is invoked.\n");
    PRE_WRAPPER_FUNC(sk, skb, flags);
    int ret = skb_kill_datagram(sk, skb, flags);
    POST_WRAPPER_FUNC(sk, skb, flags);
    kern_printk("skb_kill_datagram returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_identify_boot_cpu
#define APP_WRAPPER_FOR_identify_boot_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_identify_boot_cpu
#define APP_WRAPPER_FOR_identify_boot_cpu
FUNCTION_WRAPPER_VOID(identify_boot_cpu, (), {
    kern_printk("identify_boot_cpu is invoked.\n");
    PRE_WRAPPER_FUNC();
    identify_boot_cpu();
    POST_WRAPPER_FUNC();
    kern_printk("identify_boot_cpu returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_add_dynid
#define APP_WRAPPER_FOR_pci_add_dynid
#endif
 
#ifndef APP_WRAPPER_FOR_pci_add_dynid
#define APP_WRAPPER_FOR_pci_add_dynid
FUNCTION_WRAPPER(pci_add_dynid, (struct pci_driver *drv, unsigned int vendor, unsigned int device, unsigned int subvendor, unsigned int subdevice, unsigned int class_, unsigned int class_mask, unsigned long driver_data), {
    WRAP_RECURSIVE(drv);
    TRACES_IF_WATCHPOINT(drv);
    SCAN_HEAD_FUNC(struct pci_driver)(*(TO_UNWATCHED_ADDRESS(drv)));
    kern_printk("pci_add_dynid is invoked.\n");
    PRE_WRAPPER_FUNC(drv, vendor, device, subvendor, subdevice, class_, class_mask, driver_data);
    int ret = pci_add_dynid(drv, vendor, device, subvendor, subdevice, class_, class_mask, driver_data);
    POST_WRAPPER_FUNC(drv, vendor, device, subvendor, subdevice, class_, class_mask, driver_data);
    kern_printk("pci_add_dynid returned.\n");
    TRACES_IF_WATCHPOINT(drv);
    SCAN_HEAD_FUNC(struct pci_driver)(*(TO_UNWATCHED_ADDRESS(drv)));
    return ret;
})
#endif


#ifndef KERN_ADDR_rw_copy_check_uvector
#define APP_WRAPPER_FOR_rw_copy_check_uvector
#endif
 
#ifndef APP_WRAPPER_FOR_rw_copy_check_uvector
#define APP_WRAPPER_FOR_rw_copy_check_uvector
FUNCTION_WRAPPER(rw_copy_check_uvector, (int type, const struct iovec *uvector, unsigned long nr_segs, unsigned long fast_segs, struct iovec *fast_pointer, struct iovec **ret_pointer), {
    kern_printk("rw_copy_check_uvector is invoked.\n");
    PRE_WRAPPER_FUNC(type, uvector, nr_segs, fast_segs, fast_pointer, ret_pointer);
    ssize_t ret = rw_copy_check_uvector(type, uvector, nr_segs, fast_segs, fast_pointer, ret_pointer);
    POST_WRAPPER_FUNC(type, uvector, nr_segs, fast_segs, fast_pointer, ret_pointer);
    kern_printk("rw_copy_check_uvector returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___cleancache_init_fs
#define APP_WRAPPER_FOR___cleancache_init_fs
#endif
 
#ifndef APP_WRAPPER_FOR___cleancache_init_fs
#define APP_WRAPPER_FOR___cleancache_init_fs
FUNCTION_WRAPPER_VOID(__cleancache_init_fs, (struct super_block *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__cleancache_init_fs is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    __cleancache_init_fs(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__cleancache_init_fs returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_crypto_shash_finup
#define APP_WRAPPER_FOR_crypto_shash_finup
#endif
 
#ifndef APP_WRAPPER_FOR_crypto_shash_finup
#define APP_WRAPPER_FOR_crypto_shash_finup
FUNCTION_WRAPPER(crypto_shash_finup, (struct shash_desc *desc, const u8 *data, unsigned int len, u8 *out), {
    WRAP_RECURSIVE(desc);
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct shash_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
    kern_printk("crypto_shash_finup is invoked.\n");
    PRE_WRAPPER_FUNC(desc, data, len, out);
    int ret = crypto_shash_finup(desc, data, len, out);
    POST_WRAPPER_FUNC(desc, data, len, out);
    kern_printk("crypto_shash_finup returned.\n");
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct shash_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
    return ret;
})
#endif


#ifndef KERN_ADDR_x86_init_uint_noop
#define APP_WRAPPER_FOR_x86_init_uint_noop
#endif
 
#ifndef APP_WRAPPER_FOR_x86_init_uint_noop
#define APP_WRAPPER_FOR_x86_init_uint_noop
FUNCTION_WRAPPER_VOID(x86_init_uint_noop, (unsigned int unused), {
    kern_printk("x86_init_uint_noop is invoked.\n");
    PRE_WRAPPER_FUNC(unused);
    x86_init_uint_noop(unused);
    POST_WRAPPER_FUNC(unused);
    kern_printk("x86_init_uint_noop returned.\n");
})
#endif


#ifndef KERN_ADDR_try_wait_for_completion
#define APP_WRAPPER_FOR_try_wait_for_completion
#endif
 
#ifndef APP_WRAPPER_FOR_try_wait_for_completion
#define APP_WRAPPER_FOR_try_wait_for_completion
FUNCTION_WRAPPER(try_wait_for_completion, (struct completion *x), {
    kern_printk("try_wait_for_completion is invoked.\n");
    PRE_WRAPPER_FUNC(x);
    bool ret = try_wait_for_completion(x);
    POST_WRAPPER_FUNC(x);
    kern_printk("try_wait_for_completion returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_write_boundary_block
#define APP_WRAPPER_FOR_write_boundary_block
#endif
 
#ifndef APP_WRAPPER_FOR_write_boundary_block
#define APP_WRAPPER_FOR_write_boundary_block
FUNCTION_WRAPPER_VOID(write_boundary_block, (struct block_device *bdev, sector_t bblock, unsigned int blocksize), {
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    kern_printk("write_boundary_block is invoked.\n");
    PRE_WRAPPER_FUNC(bdev, bblock, blocksize);
    write_boundary_block(bdev, bblock, blocksize);
    POST_WRAPPER_FUNC(bdev, bblock, blocksize);
    kern_printk("write_boundary_block returned.\n");
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
})
#endif


#ifndef KERN_ADDR_thread_group_cputimer
#define APP_WRAPPER_FOR_thread_group_cputimer
#endif
 
#ifndef APP_WRAPPER_FOR_thread_group_cputimer
#define APP_WRAPPER_FOR_thread_group_cputimer
FUNCTION_WRAPPER_VOID(thread_group_cputimer, (struct task_struct *tsk, struct task_cputime *times), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("thread_group_cputimer is invoked.\n");
    PRE_WRAPPER_FUNC(tsk, times);
    thread_group_cputimer(tsk, times);
    POST_WRAPPER_FUNC(tsk, times);
    kern_printk("thread_group_cputimer returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
})
#endif


#ifndef KERN_ADDR_find_get_page
#define APP_WRAPPER_FOR_find_get_page
#endif
 
#ifndef APP_WRAPPER_FOR_find_get_page
#define APP_WRAPPER_FOR_find_get_page
FUNCTION_WRAPPER(find_get_page, (struct address_space *mapping, unsigned long index), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("find_get_page is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, index);
    struct page *ret = find_get_page(mapping, index);
    POST_WRAPPER_FUNC(mapping, index);
    kern_printk("find_get_page returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_swiotlb_late_init
#define APP_WRAPPER_FOR_pci_swiotlb_late_init
#endif
 
#ifndef APP_WRAPPER_FOR_pci_swiotlb_late_init
#define APP_WRAPPER_FOR_pci_swiotlb_late_init
FUNCTION_WRAPPER_VOID(pci_swiotlb_late_init, (), {
    kern_printk("pci_swiotlb_late_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    pci_swiotlb_late_init();
    POST_WRAPPER_FUNC();
    kern_printk("pci_swiotlb_late_init returned.\n");
})
#endif


#ifndef KERN_ADDR_iterate_mounts
#define APP_WRAPPER_FOR_iterate_mounts
#endif
 
#ifndef APP_WRAPPER_FOR_iterate_mounts
#define APP_WRAPPER_FOR_iterate_mounts
FUNCTION_WRAPPER(iterate_mounts, (int (*_arg1)(struct vfsmount *, void *), void *_arg2, struct vfsmount *_arg3), {
    WRAP_FUNCTION(_arg1);
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("iterate_mounts is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = iterate_mounts(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("iterate_mounts returned.\n");
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_delete_cache
#define APP_WRAPPER_FOR_acpi_os_delete_cache
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_delete_cache
#define APP_WRAPPER_FOR_acpi_os_delete_cache
FUNCTION_WRAPPER(acpi_os_delete_cache, (struct kmem_cache *cache), {
    WRAP_RECURSIVE(cache);
    TRACES_IF_WATCHPOINT(cache);
    SCAN_HEAD_FUNC(struct kmem_cache)(*(TO_UNWATCHED_ADDRESS(cache)));
    kern_printk("acpi_os_delete_cache is invoked.\n");
    PRE_WRAPPER_FUNC(cache);
    acpi_status ret = acpi_os_delete_cache(cache);
    POST_WRAPPER_FUNC(cache);
    kern_printk("acpi_os_delete_cache returned.\n");
    TRACES_IF_WATCHPOINT(cache);
    SCAN_HEAD_FUNC(struct kmem_cache)(*(TO_UNWATCHED_ADDRESS(cache)));
    return ret;
})
#endif


#ifndef KERN_ADDR_scheduler_tick
#define APP_WRAPPER_FOR_scheduler_tick
#endif
 
#ifndef APP_WRAPPER_FOR_scheduler_tick
#define APP_WRAPPER_FOR_scheduler_tick
FUNCTION_WRAPPER_VOID(scheduler_tick, (), {
    kern_printk("scheduler_tick is invoked.\n");
    PRE_WRAPPER_FUNC();
    scheduler_tick();
    POST_WRAPPER_FUNC();
    kern_printk("scheduler_tick returned.\n");
})
#endif


#ifndef KERN_ADDR_setup_log_buf
#define APP_WRAPPER_FOR_setup_log_buf
#endif
 
#ifndef APP_WRAPPER_FOR_setup_log_buf
#define APP_WRAPPER_FOR_setup_log_buf
FUNCTION_WRAPPER_VOID(setup_log_buf, (int early), {
    kern_printk("setup_log_buf is invoked.\n");
    PRE_WRAPPER_FUNC(early);
    setup_log_buf(early);
    POST_WRAPPER_FUNC(early);
    kern_printk("setup_log_buf returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_check_pme_status
#define APP_WRAPPER_FOR_pci_check_pme_status
#endif
 
#ifndef APP_WRAPPER_FOR_pci_check_pme_status
#define APP_WRAPPER_FOR_pci_check_pme_status
FUNCTION_WRAPPER(pci_check_pme_status, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_check_pme_status is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    bool ret = pci_check_pme_status(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_check_pme_status returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_schedule_tail
#define APP_WRAPPER_FOR_schedule_tail
#endif
 
#ifndef APP_WRAPPER_FOR_schedule_tail
#define APP_WRAPPER_FOR_schedule_tail
FUNCTION_WRAPPER_VOID(schedule_tail, (struct task_struct *prev), {
    WRAP_RECURSIVE(prev);
    TRACES_IF_WATCHPOINT(prev);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(prev)));
    kern_printk("schedule_tail is invoked.\n");
    PRE_WRAPPER_FUNC(prev);
    schedule_tail(prev);
    POST_WRAPPER_FUNC(prev);
    kern_printk("schedule_tail returned.\n");
    TRACES_IF_WATCHPOINT(prev);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(prev)));
})
#endif


#ifndef KERN_ADDR_register_sysctl_table
#define APP_WRAPPER_FOR_register_sysctl_table
#endif
 
#ifndef APP_WRAPPER_FOR_register_sysctl_table
#define APP_WRAPPER_FOR_register_sysctl_table
FUNCTION_WRAPPER(register_sysctl_table, (struct ctl_table *table), {
    WRAP_RECURSIVE(table);
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    kern_printk("register_sysctl_table is invoked.\n");
    PRE_WRAPPER_FUNC(table);
    struct ctl_table_header *ret = register_sysctl_table(table);
    POST_WRAPPER_FUNC(table);
    kern_printk("register_sysctl_table returned.\n");
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_restore_altstack
#define APP_WRAPPER_FOR_restore_altstack
#endif
 
#ifndef APP_WRAPPER_FOR_restore_altstack
#define APP_WRAPPER_FOR_restore_altstack
FUNCTION_WRAPPER(restore_altstack, (const stack_t *_arg1), {
    kern_printk("restore_altstack is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = restore_altstack(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("restore_altstack returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_radix_tree_tag_set
#define APP_WRAPPER_FOR_radix_tree_tag_set
#endif
 
#ifndef APP_WRAPPER_FOR_radix_tree_tag_set
#define APP_WRAPPER_FOR_radix_tree_tag_set
FUNCTION_WRAPPER(radix_tree_tag_set, (struct radix_tree_root *root, unsigned long index, unsigned int tag), {
    kern_printk("radix_tree_tag_set is invoked.\n");
    PRE_WRAPPER_FUNC(root, index, tag);
    void *ret = radix_tree_tag_set(root, index, tag);
    POST_WRAPPER_FUNC(root, index, tag);
    kern_printk("radix_tree_tag_set returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_cap_inode_setxattr
#define APP_WRAPPER_FOR_cap_inode_setxattr
#endif
 
#ifndef APP_WRAPPER_FOR_cap_inode_setxattr
#define APP_WRAPPER_FOR_cap_inode_setxattr
FUNCTION_WRAPPER(cap_inode_setxattr, (struct dentry *dentry, const char *name, const void *value, size_t size, int flags), {
    WRAP_RECURSIVE(dentry);
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    kern_printk("cap_inode_setxattr is invoked.\n");
    PRE_WRAPPER_FUNC(dentry, name, value, size, flags);
    int ret = cap_inode_setxattr(dentry, name, value, size, flags);
    POST_WRAPPER_FUNC(dentry, name, value, size, flags);
    kern_printk("cap_inode_setxattr returned.\n");
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    return ret;
})
#endif


#ifndef KERN_ADDR_do_adjtimex
#define APP_WRAPPER_FOR_do_adjtimex
#endif
 
#ifndef APP_WRAPPER_FOR_do_adjtimex
#define APP_WRAPPER_FOR_do_adjtimex
FUNCTION_WRAPPER(do_adjtimex, (struct timex *_arg1), {
    kern_printk("do_adjtimex is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = do_adjtimex(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("do_adjtimex returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_prop_local_init_single
#define APP_WRAPPER_FOR_prop_local_init_single
#endif
 
#ifndef APP_WRAPPER_FOR_prop_local_init_single
#define APP_WRAPPER_FOR_prop_local_init_single
FUNCTION_WRAPPER(prop_local_init_single, (struct prop_local_single *pl), {
    kern_printk("prop_local_init_single is invoked.\n");
    PRE_WRAPPER_FUNC(pl);
    int ret = prop_local_init_single(pl);
    POST_WRAPPER_FUNC(pl);
    kern_printk("prop_local_init_single returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_hex2bin
#define APP_WRAPPER_FOR_hex2bin
#endif
 
#ifndef APP_WRAPPER_FOR_hex2bin
#define APP_WRAPPER_FOR_hex2bin
FUNCTION_WRAPPER(hex2bin, (u8 *dst, const char *src, size_t count), {
    kern_printk("hex2bin is invoked.\n");
    PRE_WRAPPER_FUNC(dst, src, count);
    int ret = hex2bin(dst, src, count);
    POST_WRAPPER_FUNC(dst, src, count);
    kern_printk("hex2bin returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_next_online_pgdat
#define APP_WRAPPER_FOR_next_online_pgdat
#endif
 
#ifndef APP_WRAPPER_FOR_next_online_pgdat
#define APP_WRAPPER_FOR_next_online_pgdat
FUNCTION_WRAPPER(next_online_pgdat, (struct pglist_data *pgdat), {
    WRAP_RECURSIVE(pgdat);
    TRACES_IF_WATCHPOINT(pgdat);
    SCAN_HEAD_FUNC(struct pglist_data)(*(TO_UNWATCHED_ADDRESS(pgdat)));
    kern_printk("next_online_pgdat is invoked.\n");
    PRE_WRAPPER_FUNC(pgdat);
    struct pglist_data *ret = next_online_pgdat(pgdat);
    POST_WRAPPER_FUNC(pgdat);
    kern_printk("next_online_pgdat returned.\n");
    TRACES_IF_WATCHPOINT(pgdat);
    SCAN_HEAD_FUNC(struct pglist_data)(*(TO_UNWATCHED_ADDRESS(pgdat)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_set_memory_wc
#define APP_WRAPPER_FOR_set_memory_wc
#endif
 
#ifndef APP_WRAPPER_FOR_set_memory_wc
#define APP_WRAPPER_FOR_set_memory_wc
FUNCTION_WRAPPER(set_memory_wc, (unsigned long addr, int numpages), {
    kern_printk("set_memory_wc is invoked.\n");
    PRE_WRAPPER_FUNC(addr, numpages);
    int ret = set_memory_wc(addr, numpages);
    POST_WRAPPER_FUNC(addr, numpages);
    kern_printk("set_memory_wc returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___d_lookup_rcu
#define APP_WRAPPER_FOR___d_lookup_rcu
#endif
 
#ifndef APP_WRAPPER_FOR___d_lookup_rcu
#define APP_WRAPPER_FOR___d_lookup_rcu
FUNCTION_WRAPPER(__d_lookup_rcu, (const struct dentry *parent, const struct qstr *name, unsigned int *seq, struct inode *inode), {
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(const struct dentry)(*(TO_UNWATCHED_ADDRESS(parent)));
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("__d_lookup_rcu is invoked.\n");
    PRE_WRAPPER_FUNC(parent, name, seq, inode);
    struct dentry *ret = __d_lookup_rcu(parent, name, seq, inode);
    POST_WRAPPER_FUNC(parent, name, seq, inode);
    kern_printk("__d_lookup_rcu returned.\n");
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(const struct dentry)(*(TO_UNWATCHED_ADDRESS(parent)));
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_radix_tree_delete
#define APP_WRAPPER_FOR_radix_tree_delete
#endif
 
#ifndef APP_WRAPPER_FOR_radix_tree_delete
#define APP_WRAPPER_FOR_radix_tree_delete
FUNCTION_WRAPPER(radix_tree_delete, (struct radix_tree_root *_arg1, unsigned long _arg2), {
    kern_printk("radix_tree_delete is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    void *ret = radix_tree_delete(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("radix_tree_delete returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_add_new_bus
#define APP_WRAPPER_FOR_pci_add_new_bus
#endif
 
#ifndef APP_WRAPPER_FOR_pci_add_new_bus
#define APP_WRAPPER_FOR_pci_add_new_bus
FUNCTION_WRAPPER(pci_add_new_bus, (struct pci_bus *parent, struct pci_dev *dev, int busnr), {
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(parent)));
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_add_new_bus is invoked.\n");
    PRE_WRAPPER_FUNC(parent, dev, busnr);
    struct pci_bus *ret = pci_add_new_bus(parent, dev, busnr);
    POST_WRAPPER_FUNC(parent, dev, busnr);
    kern_printk("pci_add_new_bus returned.\n");
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(parent)));
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_iget_failed
#define APP_WRAPPER_FOR_iget_failed
#endif
 
#ifndef APP_WRAPPER_FOR_iget_failed
#define APP_WRAPPER_FOR_iget_failed
FUNCTION_WRAPPER_VOID(iget_failed, (struct inode *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("iget_failed is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    iget_failed(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("iget_failed returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_get_super
#define APP_WRAPPER_FOR_get_super
#endif
 
#ifndef APP_WRAPPER_FOR_get_super
#define APP_WRAPPER_FOR_get_super
FUNCTION_WRAPPER(get_super, (struct block_device *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("get_super is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct super_block *ret = get_super(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("get_super returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_csk_route_child_sock
#define APP_WRAPPER_FOR_inet_csk_route_child_sock
#endif
 
#ifndef APP_WRAPPER_FOR_inet_csk_route_child_sock
#define APP_WRAPPER_FOR_inet_csk_route_child_sock
FUNCTION_WRAPPER(inet_csk_route_child_sock, (struct sock *sk, struct sock *newsk, const struct request_sock *req), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(newsk);
    TRACES_IF_WATCHPOINT(newsk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(newsk)));
    WRAP_RECURSIVE(req);
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(const struct request_sock)(*(TO_UNWATCHED_ADDRESS(req)));
    kern_printk("inet_csk_route_child_sock is invoked.\n");
    PRE_WRAPPER_FUNC(sk, newsk, req);
    struct dst_entry *ret = inet_csk_route_child_sock(sk, newsk, req);
    POST_WRAPPER_FUNC(sk, newsk, req);
    kern_printk("inet_csk_route_child_sock returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(newsk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(newsk)));
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(const struct request_sock)(*(TO_UNWATCHED_ADDRESS(req)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_get_mm_exe_file
#define APP_WRAPPER_FOR_get_mm_exe_file
#endif
 
#ifndef APP_WRAPPER_FOR_get_mm_exe_file
#define APP_WRAPPER_FOR_get_mm_exe_file
FUNCTION_WRAPPER(get_mm_exe_file, (struct mm_struct *mm), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    kern_printk("get_mm_exe_file is invoked.\n");
    PRE_WRAPPER_FUNC(mm);
    struct file *ret = get_mm_exe_file(mm);
    POST_WRAPPER_FUNC(mm);
    kern_printk("get_mm_exe_file returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_bioset_create
#define APP_WRAPPER_FOR_bioset_create
#endif
 
#ifndef APP_WRAPPER_FOR_bioset_create
#define APP_WRAPPER_FOR_bioset_create
FUNCTION_WRAPPER(bioset_create, (unsigned int _arg1, unsigned int _arg2), {
    kern_printk("bioset_create is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct bio_set *ret = bioset_create(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("bioset_create returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_apic_timer_interrupt
#define APP_WRAPPER_FOR_apic_timer_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_apic_timer_interrupt
#define APP_WRAPPER_FOR_apic_timer_interrupt
FUNCTION_WRAPPER_VOID(apic_timer_interrupt, (), {
    kern_printk("apic_timer_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC();
    apic_timer_interrupt();
    POST_WRAPPER_FUNC();
    kern_printk("apic_timer_interrupt returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_restore_state
#define APP_WRAPPER_FOR_pci_restore_state
#endif
 
#ifndef APP_WRAPPER_FOR_pci_restore_state
#define APP_WRAPPER_FOR_pci_restore_state
FUNCTION_WRAPPER_VOID(pci_restore_state, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_restore_state is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pci_restore_state(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_restore_state returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_printk_tick
#define APP_WRAPPER_FOR_printk_tick
#endif
 
#ifndef APP_WRAPPER_FOR_printk_tick
#define APP_WRAPPER_FOR_printk_tick
FUNCTION_WRAPPER_VOID(printk_tick, (), {
    kern_printk("printk_tick is invoked.\n");
    PRE_WRAPPER_FUNC();
    printk_tick();
    POST_WRAPPER_FUNC();
    kern_printk("printk_tick returned.\n");
})
#endif


#ifndef KERN_ADDR_bio_associate_current
#define APP_WRAPPER_FOR_bio_associate_current
#endif
 
#ifndef APP_WRAPPER_FOR_bio_associate_current
#define APP_WRAPPER_FOR_bio_associate_current
FUNCTION_WRAPPER(bio_associate_current, (struct bio *bio), {
    WRAP_RECURSIVE(bio);
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
    kern_printk("bio_associate_current is invoked.\n");
    PRE_WRAPPER_FUNC(bio);
    int ret = bio_associate_current(bio);
    POST_WRAPPER_FUNC(bio);
    kern_printk("bio_associate_current returned.\n");
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
    return ret;
})
#endif


#ifndef KERN_ADDR___bitmap_equal
#define APP_WRAPPER_FOR___bitmap_equal
#endif
 
#ifndef APP_WRAPPER_FOR___bitmap_equal
#define APP_WRAPPER_FOR___bitmap_equal
FUNCTION_WRAPPER(__bitmap_equal, (unsigned const long *bitmap1, unsigned const long *bitmap2, int bits), {
    kern_printk("__bitmap_equal is invoked.\n");
    PRE_WRAPPER_FUNC(bitmap1, bitmap2, bits);
    int ret = __bitmap_equal(bitmap1, bitmap2, bits);
    POST_WRAPPER_FUNC(bitmap1, bitmap2, bits);
    kern_printk("__bitmap_equal returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_show_interrupts
#define APP_WRAPPER_FOR_show_interrupts
#endif
 
#ifndef APP_WRAPPER_FOR_show_interrupts
#define APP_WRAPPER_FOR_show_interrupts
FUNCTION_WRAPPER(show_interrupts, (struct seq_file *p, void *v), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("show_interrupts is invoked.\n");
    PRE_WRAPPER_FUNC(p, v);
    int ret = show_interrupts(p, v);
    POST_WRAPPER_FUNC(p, v);
    kern_printk("show_interrupts returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(p)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_register
#define APP_WRAPPER_FOR_sock_register
#endif
 
#ifndef APP_WRAPPER_FOR_sock_register
#define APP_WRAPPER_FOR_sock_register
FUNCTION_WRAPPER(sock_register, (const struct net_proto_family *fam), {
    WRAP_RECURSIVE(fam);
    TRACES_IF_WATCHPOINT(fam);
    SCAN_HEAD_FUNC(const struct net_proto_family)(*(TO_UNWATCHED_ADDRESS(fam)));
    kern_printk("sock_register is invoked.\n");
    PRE_WRAPPER_FUNC(fam);
    int ret = sock_register(fam);
    POST_WRAPPER_FUNC(fam);
    kern_printk("sock_register returned.\n");
    TRACES_IF_WATCHPOINT(fam);
    SCAN_HEAD_FUNC(const struct net_proto_family)(*(TO_UNWATCHED_ADDRESS(fam)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_set_firmware_waking_vector64
#define APP_WRAPPER_FOR_acpi_set_firmware_waking_vector64
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_set_firmware_waking_vector64
#define APP_WRAPPER_FOR_acpi_set_firmware_waking_vector64
FUNCTION_WRAPPER(acpi_set_firmware_waking_vector64, (u64 physical_address), {
    kern_printk("acpi_set_firmware_waking_vector64 is invoked.\n");
    PRE_WRAPPER_FUNC(physical_address);
    acpi_status ret = acpi_set_firmware_waking_vector64(physical_address);
    POST_WRAPPER_FUNC(physical_address);
    kern_printk("acpi_set_firmware_waking_vector64 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_locks_remove_posix
#define APP_WRAPPER_FOR_locks_remove_posix
#endif
 
#ifndef APP_WRAPPER_FOR_locks_remove_posix
#define APP_WRAPPER_FOR_locks_remove_posix
FUNCTION_WRAPPER_VOID(locks_remove_posix, (struct file *_arg1, fl_owner_t _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("locks_remove_posix is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    locks_remove_posix(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("locks_remove_posix returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_dma_async_memcpy_buf_to_pg
#define APP_WRAPPER_FOR_dma_async_memcpy_buf_to_pg
#endif
 
#ifndef APP_WRAPPER_FOR_dma_async_memcpy_buf_to_pg
#define APP_WRAPPER_FOR_dma_async_memcpy_buf_to_pg
FUNCTION_WRAPPER(dma_async_memcpy_buf_to_pg, (struct dma_chan *chan, struct page *page, unsigned int offset, void *kdata, size_t len), {
    WRAP_RECURSIVE(chan);
    TRACES_IF_WATCHPOINT(chan);
    SCAN_HEAD_FUNC(struct dma_chan)(*(TO_UNWATCHED_ADDRESS(chan)));
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("dma_async_memcpy_buf_to_pg is invoked.\n");
    PRE_WRAPPER_FUNC(chan, page, offset, kdata, len);
    dma_cookie_t ret = dma_async_memcpy_buf_to_pg(chan, page, offset, kdata, len);
    POST_WRAPPER_FUNC(chan, page, offset, kdata, len);
    kern_printk("dma_async_memcpy_buf_to_pg returned.\n");
    TRACES_IF_WATCHPOINT(chan);
    SCAN_HEAD_FUNC(struct dma_chan)(*(TO_UNWATCHED_ADDRESS(chan)));
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_profile_event_register
#define APP_WRAPPER_FOR_profile_event_register
#endif
 
#ifndef APP_WRAPPER_FOR_profile_event_register
#define APP_WRAPPER_FOR_profile_event_register
FUNCTION_WRAPPER(profile_event_register, (enum profile_type _arg1, struct notifier_block *n), {
    WRAP_RECURSIVE(n);
    TRACES_IF_WATCHPOINT(n);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(n)));
    kern_printk("profile_event_register is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, n);
    int ret = profile_event_register(_arg1, n);
    POST_WRAPPER_FUNC(_arg1, n);
    kern_printk("profile_event_register returned.\n");
    TRACES_IF_WATCHPOINT(n);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(n)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_addr_init
#define APP_WRAPPER_FOR_dev_addr_init
#endif
 
#ifndef APP_WRAPPER_FOR_dev_addr_init
#define APP_WRAPPER_FOR_dev_addr_init
FUNCTION_WRAPPER(dev_addr_init, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_addr_init is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = dev_addr_init(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_addr_init returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_gpe_count
#define APP_WRAPPER_FOR_acpi_os_gpe_count
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_gpe_count
#define APP_WRAPPER_FOR_acpi_os_gpe_count
FUNCTION_WRAPPER_VOID(acpi_os_gpe_count, (u32 gpe_number), {
    kern_printk("acpi_os_gpe_count is invoked.\n");
    PRE_WRAPPER_FUNC(gpe_number);
    acpi_os_gpe_count(gpe_number);
    POST_WRAPPER_FUNC(gpe_number);
    kern_printk("acpi_os_gpe_count returned.\n");
})
#endif


#ifndef KERN_ADDR_cgroup_taskset_first
#define APP_WRAPPER_FOR_cgroup_taskset_first
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_taskset_first
#define APP_WRAPPER_FOR_cgroup_taskset_first
FUNCTION_WRAPPER(cgroup_taskset_first, (struct cgroup_taskset *tset), {
    kern_printk("cgroup_taskset_first is invoked.\n");
    PRE_WRAPPER_FUNC(tset);
    struct task_struct *ret = cgroup_taskset_first(tset);
    POST_WRAPPER_FUNC(tset);
    kern_printk("cgroup_taskset_first returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sigqueue_alloc
#define APP_WRAPPER_FOR_sigqueue_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_sigqueue_alloc
#define APP_WRAPPER_FOR_sigqueue_alloc
FUNCTION_WRAPPER(sigqueue_alloc, (), {
    kern_printk("sigqueue_alloc is invoked.\n");
    PRE_WRAPPER_FUNC();
    struct sigqueue *ret = sigqueue_alloc();
    POST_WRAPPER_FUNC();
    kern_printk("sigqueue_alloc returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_create_root_bus
#define APP_WRAPPER_FOR_pci_create_root_bus
#endif
 
#ifndef APP_WRAPPER_FOR_pci_create_root_bus
#define APP_WRAPPER_FOR_pci_create_root_bus
FUNCTION_WRAPPER(pci_create_root_bus, (struct device *parent, int bus, struct pci_ops *ops, void *sysdata, struct list_head *resources), {
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(parent)));
    WRAP_RECURSIVE(ops);
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct pci_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    kern_printk("pci_create_root_bus is invoked.\n");
    PRE_WRAPPER_FUNC(parent, bus, ops, sysdata, resources);
    struct pci_bus *ret = pci_create_root_bus(parent, bus, ops, sysdata, resources);
    POST_WRAPPER_FUNC(parent, bus, ops, sysdata, resources);
    kern_printk("pci_create_root_bus returned.\n");
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(parent)));
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct pci_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_paravirt_patch_ignore
#define APP_WRAPPER_FOR_paravirt_patch_ignore
#endif
 
#ifndef APP_WRAPPER_FOR_paravirt_patch_ignore
#define APP_WRAPPER_FOR_paravirt_patch_ignore
FUNCTION_WRAPPER(paravirt_patch_ignore, (unsigned int len), {
    kern_printk("paravirt_patch_ignore is invoked.\n");
    PRE_WRAPPER_FUNC(len);
    int ret = paravirt_patch_ignore(len);
    POST_WRAPPER_FUNC(len);
    kern_printk("paravirt_patch_ignore returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_file_open
#define APP_WRAPPER_FOR_generic_file_open
#endif
 
#ifndef APP_WRAPPER_FOR_generic_file_open
#define APP_WRAPPER_FOR_generic_file_open
FUNCTION_WRAPPER(generic_file_open, (struct inode *inode, struct file *filp), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    WRAP_RECURSIVE(filp);
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    kern_printk("generic_file_open is invoked.\n");
    PRE_WRAPPER_FUNC(inode, filp);
    int ret = generic_file_open(inode, filp);
    POST_WRAPPER_FUNC(inode, filp);
    kern_printk("generic_file_open returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_unregister_switch_driver
#define APP_WRAPPER_FOR_unregister_switch_driver
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_switch_driver
#define APP_WRAPPER_FOR_unregister_switch_driver
FUNCTION_WRAPPER_VOID(unregister_switch_driver, (struct dsa_switch_driver *type), {
    WRAP_RECURSIVE(type);
    TRACES_IF_WATCHPOINT(type);
    SCAN_HEAD_FUNC(struct dsa_switch_driver)(*(TO_UNWATCHED_ADDRESS(type)));
    kern_printk("unregister_switch_driver is invoked.\n");
    PRE_WRAPPER_FUNC(type);
    unregister_switch_driver(type);
    POST_WRAPPER_FUNC(type);
    kern_printk("unregister_switch_driver returned.\n");
    TRACES_IF_WATCHPOINT(type);
    SCAN_HEAD_FUNC(struct dsa_switch_driver)(*(TO_UNWATCHED_ADDRESS(type)));
})
#endif


#ifndef KERN_ADDR_ata_sff_tf_read
#define APP_WRAPPER_FOR_ata_sff_tf_read
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_tf_read
#define APP_WRAPPER_FOR_ata_sff_tf_read
FUNCTION_WRAPPER_VOID(ata_sff_tf_read, (struct ata_port *ap, struct ata_taskfile *tf), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_sff_tf_read is invoked.\n");
    PRE_WRAPPER_FUNC(ap, tf);
    ata_sff_tf_read(ap, tf);
    POST_WRAPPER_FUNC(ap, tf);
    kern_printk("ata_sff_tf_read returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_proc_dointvec_jiffies
#define APP_WRAPPER_FOR_proc_dointvec_jiffies
#endif
 
#ifndef APP_WRAPPER_FOR_proc_dointvec_jiffies
#define APP_WRAPPER_FOR_proc_dointvec_jiffies
FUNCTION_WRAPPER(proc_dointvec_jiffies, (struct ctl_table *_arg1, int _arg2, void *_arg3, size_t *_arg4, loff_t *_arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("proc_dointvec_jiffies is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = proc_dointvec_jiffies(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("proc_dointvec_jiffies returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_paravirt_enter_lazy_mmu
#define APP_WRAPPER_FOR_paravirt_enter_lazy_mmu
#endif
 
#ifndef APP_WRAPPER_FOR_paravirt_enter_lazy_mmu
#define APP_WRAPPER_FOR_paravirt_enter_lazy_mmu
FUNCTION_WRAPPER_VOID(paravirt_enter_lazy_mmu, (), {
    kern_printk("paravirt_enter_lazy_mmu is invoked.\n");
    PRE_WRAPPER_FUNC();
    paravirt_enter_lazy_mmu();
    POST_WRAPPER_FUNC();
    kern_printk("paravirt_enter_lazy_mmu returned.\n");
})
#endif


#ifndef KERN_ADDR_rdmsr_safe_on_cpu
#define APP_WRAPPER_FOR_rdmsr_safe_on_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_rdmsr_safe_on_cpu
#define APP_WRAPPER_FOR_rdmsr_safe_on_cpu
FUNCTION_WRAPPER(rdmsr_safe_on_cpu, (unsigned int cpu, u32 msr_no, u32 *l, u32 *h), {
    kern_printk("rdmsr_safe_on_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, msr_no, l, h);
    int ret = rdmsr_safe_on_cpu(cpu, msr_no, l, h);
    POST_WRAPPER_FUNC(cpu, msr_no, l, h);
    kern_printk("rdmsr_safe_on_cpu returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_d_lookup
#define APP_WRAPPER_FOR_d_lookup
#endif
 
#ifndef APP_WRAPPER_FOR_d_lookup
#define APP_WRAPPER_FOR_d_lookup
FUNCTION_WRAPPER(d_lookup, (struct dentry *_arg1, struct qstr *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("d_lookup is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct dentry *ret = d_lookup(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("d_lookup returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_free_nsproxy
#define APP_WRAPPER_FOR_free_nsproxy
#endif
 
#ifndef APP_WRAPPER_FOR_free_nsproxy
#define APP_WRAPPER_FOR_free_nsproxy
FUNCTION_WRAPPER_VOID(free_nsproxy, (struct nsproxy *ns), {
    WRAP_RECURSIVE(ns);
    TRACES_IF_WATCHPOINT(ns);
    SCAN_HEAD_FUNC(struct nsproxy)(*(TO_UNWATCHED_ADDRESS(ns)));
    kern_printk("free_nsproxy is invoked.\n");
    PRE_WRAPPER_FUNC(ns);
    free_nsproxy(ns);
    POST_WRAPPER_FUNC(ns);
    kern_printk("free_nsproxy returned.\n");
    TRACES_IF_WATCHPOINT(ns);
    SCAN_HEAD_FUNC(struct nsproxy)(*(TO_UNWATCHED_ADDRESS(ns)));
})
#endif


#ifndef KERN_ADDR_pci_enable_msix
#define APP_WRAPPER_FOR_pci_enable_msix
#endif
 
#ifndef APP_WRAPPER_FOR_pci_enable_msix
#define APP_WRAPPER_FOR_pci_enable_msix
FUNCTION_WRAPPER(pci_enable_msix, (struct pci_dev *dev, struct msix_entry *entries, int nvec), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_enable_msix is invoked.\n");
    PRE_WRAPPER_FUNC(dev, entries, nvec);
    int ret = pci_enable_msix(dev, entries, nvec);
    POST_WRAPPER_FUNC(dev, entries, nvec);
    kern_printk("pci_enable_msix returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_cleanup_queue
#define APP_WRAPPER_FOR_blk_cleanup_queue
#endif
 
#ifndef APP_WRAPPER_FOR_blk_cleanup_queue
#define APP_WRAPPER_FOR_blk_cleanup_queue
FUNCTION_WRAPPER_VOID(blk_cleanup_queue, (struct request_queue *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_cleanup_queue is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    blk_cleanup_queue(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("blk_cleanup_queue returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_ata_sas_port_stop
#define APP_WRAPPER_FOR_ata_sas_port_stop
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sas_port_stop
#define APP_WRAPPER_FOR_ata_sas_port_stop
FUNCTION_WRAPPER_VOID(ata_sas_port_stop, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_sas_port_stop is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    ata_sas_port_stop(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_sas_port_stop returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_file_open_root
#define APP_WRAPPER_FOR_file_open_root
#endif
 
#ifndef APP_WRAPPER_FOR_file_open_root
#define APP_WRAPPER_FOR_file_open_root
FUNCTION_WRAPPER(file_open_root, (struct dentry *_arg1, struct vfsmount *_arg2, const char *_arg3, int _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("file_open_root is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    struct file *ret = file_open_root(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("file_open_root returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_install_method
#define APP_WRAPPER_FOR_acpi_install_method
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_install_method
#define APP_WRAPPER_FOR_acpi_install_method
FUNCTION_WRAPPER(acpi_install_method, (u8 *buffer), {
    kern_printk("acpi_install_method is invoked.\n");
    PRE_WRAPPER_FUNC(buffer);
    acpi_status ret = acpi_install_method(buffer);
    POST_WRAPPER_FUNC(buffer);
    kern_printk("acpi_install_method returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_crypto_has_alg
#define APP_WRAPPER_FOR_crypto_has_alg
#endif
 
#ifndef APP_WRAPPER_FOR_crypto_has_alg
#define APP_WRAPPER_FOR_crypto_has_alg
FUNCTION_WRAPPER(crypto_has_alg, (const char *name, u32 type, u32 mask), {
    kern_printk("crypto_has_alg is invoked.\n");
    PRE_WRAPPER_FUNC(name, type, mask);
    int ret = crypto_has_alg(name, type, mask);
    POST_WRAPPER_FUNC(name, type, mask);
    kern_printk("crypto_has_alg returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_swapdev_block
#define APP_WRAPPER_FOR_swapdev_block
#endif
 
#ifndef APP_WRAPPER_FOR_swapdev_block
#define APP_WRAPPER_FOR_swapdev_block
FUNCTION_WRAPPER(swapdev_block, (int _arg1, unsigned long _arg2), {
    kern_printk("swapdev_block is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    sector_t ret = swapdev_block(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("swapdev_block returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_emerg
#define APP_WRAPPER_FOR_dev_emerg
#endif
 
#ifndef APP_WRAPPER_FOR_dev_emerg
#define APP_WRAPPER_FOR_dev_emerg
FUNCTION_WRAPPER(dev_emerg, (const struct device *dev, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    // TODO: variadic arguments
    kern_printk("dev_emerg is invoked.\n");
    PRE_WRAPPER_FUNC(dev, fmt);
    int ret = dev_emerg(dev, fmt);
    POST_WRAPPER_FUNC(dev, fmt);
    kern_printk("dev_emerg returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_prop_change_shift
#define APP_WRAPPER_FOR_prop_change_shift
#endif
 
#ifndef APP_WRAPPER_FOR_prop_change_shift
#define APP_WRAPPER_FOR_prop_change_shift
FUNCTION_WRAPPER_VOID(prop_change_shift, (struct prop_descriptor *pd, int new_shift), {
    WRAP_RECURSIVE(pd);
    TRACES_IF_WATCHPOINT(pd);
    SCAN_HEAD_FUNC(struct prop_descriptor)(*(TO_UNWATCHED_ADDRESS(pd)));
    kern_printk("prop_change_shift is invoked.\n");
    PRE_WRAPPER_FUNC(pd, new_shift);
    prop_change_shift(pd, new_shift);
    POST_WRAPPER_FUNC(pd, new_shift);
    kern_printk("prop_change_shift returned.\n");
    TRACES_IF_WATCHPOINT(pd);
    SCAN_HEAD_FUNC(struct prop_descriptor)(*(TO_UNWATCHED_ADDRESS(pd)));
})
#endif


#ifndef KERN_ADDR_acpi_get_gpe_device
#define APP_WRAPPER_FOR_acpi_get_gpe_device
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_gpe_device
#define APP_WRAPPER_FOR_acpi_get_gpe_device
FUNCTION_WRAPPER(acpi_get_gpe_device, (u32 gpe_index, acpi_handle *gpe_device), {
    kern_printk("acpi_get_gpe_device is invoked.\n");
    PRE_WRAPPER_FUNC(gpe_index, gpe_device);
    acpi_status ret = acpi_get_gpe_device(gpe_index, gpe_device);
    POST_WRAPPER_FUNC(gpe_index, gpe_device);
    kern_printk("acpi_get_gpe_device returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR__raw_spin_unlock
#define APP_WRAPPER_FOR__raw_spin_unlock
#endif
 
#ifndef APP_WRAPPER_FOR__raw_spin_unlock
#define APP_WRAPPER_FOR__raw_spin_unlock
FUNCTION_WRAPPER_VOID(_raw_spin_unlock, (raw_spinlock_t *lock), {
    kern_printk("_raw_spin_unlock is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    _raw_spin_unlock(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("_raw_spin_unlock returned.\n");
})
#endif


#ifndef KERN_ADDR_jbd2_journal_init_transaction_cache
#define APP_WRAPPER_FOR_jbd2_journal_init_transaction_cache
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_init_transaction_cache
#define APP_WRAPPER_FOR_jbd2_journal_init_transaction_cache
FUNCTION_WRAPPER(jbd2_journal_init_transaction_cache, (), {
    kern_printk("jbd2_journal_init_transaction_cache is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = jbd2_journal_init_transaction_cache();
    POST_WRAPPER_FUNC();
    kern_printk("jbd2_journal_init_transaction_cache returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_acpi_cbl_80wire
#define APP_WRAPPER_FOR_ata_acpi_cbl_80wire
#endif
 
#ifndef APP_WRAPPER_FOR_ata_acpi_cbl_80wire
#define APP_WRAPPER_FOR_ata_acpi_cbl_80wire
FUNCTION_WRAPPER(ata_acpi_cbl_80wire, (struct ata_port *ap, const struct ata_acpi_gtm *gtm), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_acpi_cbl_80wire is invoked.\n");
    PRE_WRAPPER_FUNC(ap, gtm);
    int ret = ata_acpi_cbl_80wire(ap, gtm);
    POST_WRAPPER_FUNC(ap, gtm);
    kern_printk("ata_acpi_cbl_80wire returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR_radix_tree_prev_hole
#define APP_WRAPPER_FOR_radix_tree_prev_hole
#endif
 
#ifndef APP_WRAPPER_FOR_radix_tree_prev_hole
#define APP_WRAPPER_FOR_radix_tree_prev_hole
FUNCTION_WRAPPER(radix_tree_prev_hole, (struct radix_tree_root *root, unsigned long index, unsigned long max_scan), {
    kern_printk("radix_tree_prev_hole is invoked.\n");
    PRE_WRAPPER_FUNC(root, index, max_scan);
    long ret = radix_tree_prev_hole(root, index, max_scan);
    POST_WRAPPER_FUNC(root, index, max_scan);
    kern_printk("radix_tree_prev_hole returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_elv_register
#define APP_WRAPPER_FOR_elv_register
#endif
 
#ifndef APP_WRAPPER_FOR_elv_register
#define APP_WRAPPER_FOR_elv_register
FUNCTION_WRAPPER(elv_register, (struct elevator_type *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct elevator_type)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("elv_register is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = elv_register(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("elv_register returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct elevator_type)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR___dev_change_flags
#define APP_WRAPPER_FOR___dev_change_flags
#endif
 
#ifndef APP_WRAPPER_FOR___dev_change_flags
#define APP_WRAPPER_FOR___dev_change_flags
FUNCTION_WRAPPER(__dev_change_flags, (struct net_device *_arg1, unsigned int flags), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__dev_change_flags is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, flags);
    int ret = __dev_change_flags(_arg1, flags);
    POST_WRAPPER_FUNC(_arg1, flags);
    kern_printk("__dev_change_flags returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_shrink_dcache_for_umount
#define APP_WRAPPER_FOR_shrink_dcache_for_umount
#endif
 
#ifndef APP_WRAPPER_FOR_shrink_dcache_for_umount
#define APP_WRAPPER_FOR_shrink_dcache_for_umount
FUNCTION_WRAPPER_VOID(shrink_dcache_for_umount, (struct super_block *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("shrink_dcache_for_umount is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    shrink_dcache_for_umount(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("shrink_dcache_for_umount returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_kstrtouint_from_user
#define APP_WRAPPER_FOR_kstrtouint_from_user
#endif
 
#ifndef APP_WRAPPER_FOR_kstrtouint_from_user
#define APP_WRAPPER_FOR_kstrtouint_from_user
FUNCTION_WRAPPER(kstrtouint_from_user, (const char *s, size_t count, unsigned int base, unsigned int *res), {
    kern_printk("kstrtouint_from_user is invoked.\n");
    PRE_WRAPPER_FUNC(s, count, base, res);
    int ret = kstrtouint_from_user(s, count, base, res);
    POST_WRAPPER_FUNC(s, count, base, res);
    kern_printk("kstrtouint_from_user returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_dev_disable
#define APP_WRAPPER_FOR_ata_dev_disable
#endif
 
#ifndef APP_WRAPPER_FOR_ata_dev_disable
#define APP_WRAPPER_FOR_ata_dev_disable
FUNCTION_WRAPPER_VOID(ata_dev_disable, (struct ata_device *adev), {
    WRAP_RECURSIVE(adev);
    TRACES_IF_WATCHPOINT(adev);
    SCAN_HEAD_FUNC(struct ata_device)(*(TO_UNWATCHED_ADDRESS(adev)));
    kern_printk("ata_dev_disable is invoked.\n");
    PRE_WRAPPER_FUNC(adev);
    ata_dev_disable(adev);
    POST_WRAPPER_FUNC(adev);
    kern_printk("ata_dev_disable returned.\n");
    TRACES_IF_WATCHPOINT(adev);
    SCAN_HEAD_FUNC(struct ata_device)(*(TO_UNWATCHED_ADDRESS(adev)));
})
#endif


#ifndef KERN_ADDR_core_kernel_text
#define APP_WRAPPER_FOR_core_kernel_text
#endif
 
#ifndef APP_WRAPPER_FOR_core_kernel_text
#define APP_WRAPPER_FOR_core_kernel_text
FUNCTION_WRAPPER(core_kernel_text, (unsigned long addr), {
    kern_printk("core_kernel_text is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    int ret = core_kernel_text(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("core_kernel_text returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_bdi_destroy
#define APP_WRAPPER_FOR_bdi_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_bdi_destroy
#define APP_WRAPPER_FOR_bdi_destroy
FUNCTION_WRAPPER_VOID(bdi_destroy, (struct backing_dev_info *bdi), {
    WRAP_RECURSIVE(bdi);
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
    kern_printk("bdi_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(bdi);
    bdi_destroy(bdi);
    POST_WRAPPER_FUNC(bdi);
    kern_printk("bdi_destroy returned.\n");
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
})
#endif


#ifndef KERN_ADDR__kstrtol
#define APP_WRAPPER_FOR__kstrtol
#endif
 
#ifndef APP_WRAPPER_FOR__kstrtol
#define APP_WRAPPER_FOR__kstrtol
FUNCTION_WRAPPER(_kstrtol, (const char *s, unsigned int base, long *res), {
    kern_printk("_kstrtol is invoked.\n");
    PRE_WRAPPER_FUNC(s, base, res);
    int ret = _kstrtol(s, base, res);
    POST_WRAPPER_FUNC(s, base, res);
    kern_printk("_kstrtol returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dpm_suspend_end
#define APP_WRAPPER_FOR_dpm_suspend_end
#endif
 
#ifndef APP_WRAPPER_FOR_dpm_suspend_end
#define APP_WRAPPER_FOR_dpm_suspend_end
FUNCTION_WRAPPER(dpm_suspend_end, (pm_message_t state), {
    kern_printk("dpm_suspend_end is invoked.\n");
    PRE_WRAPPER_FUNC(state);
    int ret = dpm_suspend_end(state);
    POST_WRAPPER_FUNC(state);
    kern_printk("dpm_suspend_end returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___inet_twsk_hashdance
#define APP_WRAPPER_FOR___inet_twsk_hashdance
#endif
 
#ifndef APP_WRAPPER_FOR___inet_twsk_hashdance
#define APP_WRAPPER_FOR___inet_twsk_hashdance
FUNCTION_WRAPPER_VOID(__inet_twsk_hashdance, (struct inet_timewait_sock *tw, struct sock *sk, struct inet_hashinfo *hashinfo), {
    WRAP_RECURSIVE(tw);
    TRACES_IF_WATCHPOINT(tw);
    SCAN_HEAD_FUNC(struct inet_timewait_sock)(*(TO_UNWATCHED_ADDRESS(tw)));
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("__inet_twsk_hashdance is invoked.\n");
    PRE_WRAPPER_FUNC(tw, sk, hashinfo);
    __inet_twsk_hashdance(tw, sk, hashinfo);
    POST_WRAPPER_FUNC(tw, sk, hashinfo);
    kern_printk("__inet_twsk_hashdance returned.\n");
    TRACES_IF_WATCHPOINT(tw);
    SCAN_HEAD_FUNC(struct inet_timewait_sock)(*(TO_UNWATCHED_ADDRESS(tw)));
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR_dm_get_mdptr
#define APP_WRAPPER_FOR_dm_get_mdptr
#endif
 
#ifndef APP_WRAPPER_FOR_dm_get_mdptr
#define APP_WRAPPER_FOR_dm_get_mdptr
FUNCTION_WRAPPER(dm_get_mdptr, (struct mapped_device *md), {
    kern_printk("dm_get_mdptr is invoked.\n");
    PRE_WRAPPER_FUNC(md);
    void *ret = dm_get_mdptr(md);
    POST_WRAPPER_FUNC(md);
    kern_printk("dm_get_mdptr returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_single_release
#define APP_WRAPPER_FOR_single_release
#endif
 
#ifndef APP_WRAPPER_FOR_single_release
#define APP_WRAPPER_FOR_single_release
FUNCTION_WRAPPER(single_release, (struct inode *_arg1, struct file *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("single_release is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = single_release(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("single_release returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_disable_obff
#define APP_WRAPPER_FOR_pci_disable_obff
#endif
 
#ifndef APP_WRAPPER_FOR_pci_disable_obff
#define APP_WRAPPER_FOR_pci_disable_obff
FUNCTION_WRAPPER_VOID(pci_disable_obff, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_disable_obff is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pci_disable_obff(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_disable_obff returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_sysfs_create_file
#define APP_WRAPPER_FOR_sysfs_create_file
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_create_file
#define APP_WRAPPER_FOR_sysfs_create_file
FUNCTION_WRAPPER(sysfs_create_file, (struct kobject *kobj, const struct attribute *attr), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    kern_printk("sysfs_create_file is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, attr);
    int ret = sysfs_create_file(kobj, attr);
    POST_WRAPPER_FUNC(kobj, attr);
    kern_printk("sysfs_create_file returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_gro_receive
#define APP_WRAPPER_FOR_skb_gro_receive
#endif
 
#ifndef APP_WRAPPER_FOR_skb_gro_receive
#define APP_WRAPPER_FOR_skb_gro_receive
FUNCTION_WRAPPER(skb_gro_receive, (struct sk_buff **head, struct sk_buff *skb), {
    WRAP_RECURSIVE(head);
    TRACES_IF_WATCHPOINT(head);
    SCAN_HEAD_FUNC(struct sk_buff *)(*(TO_UNWATCHED_ADDRESS(head)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_gro_receive is invoked.\n");
    PRE_WRAPPER_FUNC(head, skb);
    int ret = skb_gro_receive(head, skb);
    POST_WRAPPER_FUNC(head, skb);
    kern_printk("skb_gro_receive returned.\n");
    TRACES_IF_WATCHPOINT(head);
    SCAN_HEAD_FUNC(struct sk_buff *)(*(TO_UNWATCHED_ADDRESS(head)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_swap_free
#define APP_WRAPPER_FOR_swap_free
#endif
 
#ifndef APP_WRAPPER_FOR_swap_free
#define APP_WRAPPER_FOR_swap_free
FUNCTION_WRAPPER_VOID(swap_free, (swp_entry_t _arg1), {
    kern_printk("swap_free is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    swap_free(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("swap_free returned.\n");
})
#endif


#ifndef KERN_ADDR_param_get_string
#define APP_WRAPPER_FOR_param_get_string
#endif
 
#ifndef APP_WRAPPER_FOR_param_get_string
#define APP_WRAPPER_FOR_param_get_string
FUNCTION_WRAPPER(param_get_string, (char *buffer, const struct kernel_param *kp), {
    WRAP_RECURSIVE(kp);
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    kern_printk("param_get_string is invoked.\n");
    PRE_WRAPPER_FUNC(buffer, kp);
    int ret = param_get_string(buffer, kp);
    POST_WRAPPER_FUNC(buffer, kp);
    kern_printk("param_get_string returned.\n");
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sysctl_min_slab_ratio_sysctl_handler
#define APP_WRAPPER_FOR_sysctl_min_slab_ratio_sysctl_handler
#endif
 
#ifndef APP_WRAPPER_FOR_sysctl_min_slab_ratio_sysctl_handler
#define APP_WRAPPER_FOR_sysctl_min_slab_ratio_sysctl_handler
FUNCTION_WRAPPER(sysctl_min_slab_ratio_sysctl_handler, (struct ctl_table *_arg1, int _arg2, void *_arg3, size_t *_arg4, loff_t *_arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("sysctl_min_slab_ratio_sysctl_handler is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = sysctl_min_slab_ratio_sysctl_handler(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("sysctl_min_slab_ratio_sysctl_handler returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_prandom_u32
#define APP_WRAPPER_FOR_prandom_u32
#endif
 
#ifndef APP_WRAPPER_FOR_prandom_u32
#define APP_WRAPPER_FOR_prandom_u32
FUNCTION_WRAPPER(prandom_u32, (), {
    kern_printk("prandom_u32 is invoked.\n");
    PRE_WRAPPER_FUNC();
    u32 ret = prandom_u32();
    POST_WRAPPER_FUNC();
    kern_printk("prandom_u32 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_queue_stack_limits
#define APP_WRAPPER_FOR_blk_queue_stack_limits
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_stack_limits
#define APP_WRAPPER_FOR_blk_queue_stack_limits
FUNCTION_WRAPPER_VOID(blk_queue_stack_limits, (struct request_queue *t, struct request_queue *b), {
    WRAP_RECURSIVE(t);
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(t)));
    WRAP_RECURSIVE(b);
    TRACES_IF_WATCHPOINT(b);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(b)));
    kern_printk("blk_queue_stack_limits is invoked.\n");
    PRE_WRAPPER_FUNC(t, b);
    blk_queue_stack_limits(t, b);
    POST_WRAPPER_FUNC(t, b);
    kern_printk("blk_queue_stack_limits returned.\n");
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(t)));
    TRACES_IF_WATCHPOINT(b);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(b)));
})
#endif


#ifndef KERN_ADDR_compat_sys_sendmsg
#define APP_WRAPPER_FOR_compat_sys_sendmsg
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_sendmsg
#define APP_WRAPPER_FOR_compat_sys_sendmsg
FUNCTION_WRAPPER(compat_sys_sendmsg, (int fd, struct compat_msghdr *msg, unsigned int flags), {
    kern_printk("compat_sys_sendmsg is invoked.\n");
    PRE_WRAPPER_FUNC(fd, msg, flags);
    long ret = compat_sys_sendmsg(fd, msg, flags);
    POST_WRAPPER_FUNC(fd, msg, flags);
    kern_printk("compat_sys_sendmsg returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_table_event
#define APP_WRAPPER_FOR_dm_table_event
#endif
 
#ifndef APP_WRAPPER_FOR_dm_table_event
#define APP_WRAPPER_FOR_dm_table_event
FUNCTION_WRAPPER_VOID(dm_table_event, (struct dm_table *t), {
    kern_printk("dm_table_event is invoked.\n");
    PRE_WRAPPER_FUNC(t);
    dm_table_event(t);
    POST_WRAPPER_FUNC(t);
    kern_printk("dm_table_event returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_dev_present
#define APP_WRAPPER_FOR_pci_dev_present
#endif
 
#ifndef APP_WRAPPER_FOR_pci_dev_present
#define APP_WRAPPER_FOR_pci_dev_present
FUNCTION_WRAPPER(pci_dev_present, (const struct pci_device_id *ids), {
    kern_printk("pci_dev_present is invoked.\n");
    PRE_WRAPPER_FUNC(ids);
    int ret = pci_dev_present(ids);
    POST_WRAPPER_FUNC(ids);
    kern_printk("pci_dev_present returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_kobject_get_path
#define APP_WRAPPER_FOR_kobject_get_path
#endif
 
#ifndef APP_WRAPPER_FOR_kobject_get_path
#define APP_WRAPPER_FOR_kobject_get_path
FUNCTION_WRAPPER(kobject_get_path, (struct kobject *kobj, gfp_t flag), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    kern_printk("kobject_get_path is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, flag);
    char *ret = kobject_get_path(kobj, flag);
    POST_WRAPPER_FUNC(kobj, flag);
    kern_printk("kobject_get_path returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sg_copy_to_buffer
#define APP_WRAPPER_FOR_sg_copy_to_buffer
#endif
 
#ifndef APP_WRAPPER_FOR_sg_copy_to_buffer
#define APP_WRAPPER_FOR_sg_copy_to_buffer
FUNCTION_WRAPPER(sg_copy_to_buffer, (struct scatterlist *sgl, unsigned int nents, void *buf, size_t buflen), {
    kern_printk("sg_copy_to_buffer is invoked.\n");
    PRE_WRAPPER_FUNC(sgl, nents, buf, buflen);
    size_t ret = sg_copy_to_buffer(sgl, nents, buf, buflen);
    POST_WRAPPER_FUNC(sgl, nents, buf, buflen);
    kern_printk("sg_copy_to_buffer returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_kill_unmapped_request
#define APP_WRAPPER_FOR_dm_kill_unmapped_request
#endif
 
#ifndef APP_WRAPPER_FOR_dm_kill_unmapped_request
#define APP_WRAPPER_FOR_dm_kill_unmapped_request
FUNCTION_WRAPPER_VOID(dm_kill_unmapped_request, (struct request *rq, int error), {
    WRAP_RECURSIVE(rq);
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    kern_printk("dm_kill_unmapped_request is invoked.\n");
    PRE_WRAPPER_FUNC(rq, error);
    dm_kill_unmapped_request(rq, error);
    POST_WRAPPER_FUNC(rq, error);
    kern_printk("dm_kill_unmapped_request returned.\n");
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
})
#endif


#ifndef KERN_ADDR_acpi_leave_sleep_state_prep
#define APP_WRAPPER_FOR_acpi_leave_sleep_state_prep
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_leave_sleep_state_prep
#define APP_WRAPPER_FOR_acpi_leave_sleep_state_prep
FUNCTION_WRAPPER(acpi_leave_sleep_state_prep, (u8 sleep_state), {
    kern_printk("acpi_leave_sleep_state_prep is invoked.\n");
    PRE_WRAPPER_FUNC(sleep_state);
    acpi_status ret = acpi_leave_sleep_state_prep(sleep_state);
    POST_WRAPPER_FUNC(sleep_state);
    kern_printk("acpi_leave_sleep_state_prep returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_from_file
#define APP_WRAPPER_FOR_sock_from_file
#endif
 
#ifndef APP_WRAPPER_FOR_sock_from_file
#define APP_WRAPPER_FOR_sock_from_file
FUNCTION_WRAPPER(sock_from_file, (struct file *file, int *err), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("sock_from_file is invoked.\n");
    PRE_WRAPPER_FUNC(file, err);
    struct socket *ret = sock_from_file(file, err);
    POST_WRAPPER_FUNC(file, err);
    kern_printk("sock_from_file returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_module_bug_cleanup
#define APP_WRAPPER_FOR_module_bug_cleanup
#endif
 
#ifndef APP_WRAPPER_FOR_module_bug_cleanup
#define APP_WRAPPER_FOR_module_bug_cleanup
FUNCTION_WRAPPER_VOID(module_bug_cleanup, (struct module *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("module_bug_cleanup is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    module_bug_cleanup(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("module_bug_cleanup returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_acpi_os_printf
#define APP_WRAPPER_FOR_acpi_os_printf
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_printf
#define APP_WRAPPER_FOR_acpi_os_printf
FUNCTION_WRAPPER_VOID(acpi_os_printf, (const char *format, ...), {
    va_list args__;
    va_start(args__, format);
    // TODO: variadic arguments
    kern_printk("acpi_os_printf is invoked.\n");
    PRE_WRAPPER_FUNC(format);
    acpi_os_printf(format);
    POST_WRAPPER_FUNC(format);
    kern_printk("acpi_os_printf returned.\n");
    va_end(args__);
})
#endif


#ifndef KERN_ADDR__raw_spin_trylock
#define APP_WRAPPER_FOR__raw_spin_trylock
#endif
 
#ifndef APP_WRAPPER_FOR__raw_spin_trylock
#define APP_WRAPPER_FOR__raw_spin_trylock
FUNCTION_WRAPPER(_raw_spin_trylock, (raw_spinlock_t *lock), {
    kern_printk("_raw_spin_trylock is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    int ret = _raw_spin_trylock(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("_raw_spin_trylock returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_rq_unprep_clone
#define APP_WRAPPER_FOR_blk_rq_unprep_clone
#endif
 
#ifndef APP_WRAPPER_FOR_blk_rq_unprep_clone
#define APP_WRAPPER_FOR_blk_rq_unprep_clone
FUNCTION_WRAPPER_VOID(blk_rq_unprep_clone, (struct request *rq), {
    WRAP_RECURSIVE(rq);
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    kern_printk("blk_rq_unprep_clone is invoked.\n");
    PRE_WRAPPER_FUNC(rq);
    blk_rq_unprep_clone(rq);
    POST_WRAPPER_FUNC(rq);
    kern_printk("blk_rq_unprep_clone returned.\n");
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
})
#endif


#ifndef KERN_ADDR_dql_reset
#define APP_WRAPPER_FOR_dql_reset
#endif
 
#ifndef APP_WRAPPER_FOR_dql_reset
#define APP_WRAPPER_FOR_dql_reset
FUNCTION_WRAPPER_VOID(dql_reset, (struct dql *dql), {
    kern_printk("dql_reset is invoked.\n");
    PRE_WRAPPER_FUNC(dql);
    dql_reset(dql);
    POST_WRAPPER_FUNC(dql);
    kern_printk("dql_reset returned.\n");
})
#endif


#ifndef KERN_ADDR_compat_sys_timer_gettime
#define APP_WRAPPER_FOR_compat_sys_timer_gettime
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_timer_gettime
#define APP_WRAPPER_FOR_compat_sys_timer_gettime
FUNCTION_WRAPPER(compat_sys_timer_gettime, (timer_t timer_id, struct compat_itimerspec *setting), {
    kern_printk("compat_sys_timer_gettime is invoked.\n");
    PRE_WRAPPER_FUNC(timer_id, setting);
    long ret = compat_sys_timer_gettime(timer_id, setting);
    POST_WRAPPER_FUNC(timer_id, setting);
    kern_printk("compat_sys_timer_gettime returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sched_exec
#define APP_WRAPPER_FOR_sched_exec
#endif
 
#ifndef APP_WRAPPER_FOR_sched_exec
#define APP_WRAPPER_FOR_sched_exec
FUNCTION_WRAPPER_VOID(sched_exec, (), {
    kern_printk("sched_exec is invoked.\n");
    PRE_WRAPPER_FUNC();
    sched_exec();
    POST_WRAPPER_FUNC();
    kern_printk("sched_exec returned.\n");
})
#endif


#ifndef KERN_ADDR_neigh_parms_alloc
#define APP_WRAPPER_FOR_neigh_parms_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_neigh_parms_alloc
#define APP_WRAPPER_FOR_neigh_parms_alloc
FUNCTION_WRAPPER(neigh_parms_alloc, (struct net_device *dev, struct neigh_table *tbl), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(tbl);
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    kern_printk("neigh_parms_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(dev, tbl);
    struct neigh_parms *ret = neigh_parms_alloc(dev, tbl);
    POST_WRAPPER_FUNC(dev, tbl);
    kern_printk("neigh_parms_alloc returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_insert_inode_locked4
#define APP_WRAPPER_FOR_insert_inode_locked4
#endif
 
#ifndef APP_WRAPPER_FOR_insert_inode_locked4
#define APP_WRAPPER_FOR_insert_inode_locked4
FUNCTION_WRAPPER(insert_inode_locked4, (struct inode *_arg1, unsigned long _arg2, int (*test)(struct inode *, void *), void *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_FUNCTION(test);
    kern_printk("insert_inode_locked4 is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, test, _arg3);
    int ret = insert_inode_locked4(_arg1, _arg2, test, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, test, _arg3);
    kern_printk("insert_inode_locked4 returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bio_integrity_endio
#define APP_WRAPPER_FOR_bio_integrity_endio
#endif
 
#ifndef APP_WRAPPER_FOR_bio_integrity_endio
#define APP_WRAPPER_FOR_bio_integrity_endio
FUNCTION_WRAPPER_VOID(bio_integrity_endio, (struct bio *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bio_integrity_endio is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    bio_integrity_endio(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("bio_integrity_endio returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_unmap_mapping_range
#define APP_WRAPPER_FOR_unmap_mapping_range
#endif
 
#ifndef APP_WRAPPER_FOR_unmap_mapping_range
#define APP_WRAPPER_FOR_unmap_mapping_range
FUNCTION_WRAPPER_VOID(unmap_mapping_range, (struct address_space *mapping, const loff_t holebegin, const loff_t holelen, int even_cows), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("unmap_mapping_range is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, holebegin, holelen, even_cows);
    unmap_mapping_range(mapping, holebegin, holelen, even_cows);
    POST_WRAPPER_FUNC(mapping, holebegin, holelen, even_cows);
    kern_printk("unmap_mapping_range returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
})
#endif


#ifndef KERN_ADDR_vm_events_fold_cpu
#define APP_WRAPPER_FOR_vm_events_fold_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_vm_events_fold_cpu
#define APP_WRAPPER_FOR_vm_events_fold_cpu
FUNCTION_WRAPPER_VOID(vm_events_fold_cpu, (int cpu), {
    kern_printk("vm_events_fold_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    vm_events_fold_cpu(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("vm_events_fold_cpu returned.\n");
})
#endif


#ifndef KERN_ADDR_netlink_sendskb
#define APP_WRAPPER_FOR_netlink_sendskb
#endif
 
#ifndef APP_WRAPPER_FOR_netlink_sendskb
#define APP_WRAPPER_FOR_netlink_sendskb
FUNCTION_WRAPPER(netlink_sendskb, (struct sock *sk, struct sk_buff *skb), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("netlink_sendskb is invoked.\n");
    PRE_WRAPPER_FUNC(sk, skb);
    int ret = netlink_sendskb(sk, skb);
    POST_WRAPPER_FUNC(sk, skb);
    kern_printk("netlink_sendskb returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_exportfs_decode_fh
#define APP_WRAPPER_FOR_exportfs_decode_fh
#endif
 
#ifndef APP_WRAPPER_FOR_exportfs_decode_fh
#define APP_WRAPPER_FOR_exportfs_decode_fh
FUNCTION_WRAPPER(exportfs_decode_fh, (struct vfsmount *mnt, struct fid *fid, int fh_len, int fileid_type, int (*acceptable)(void *, struct dentry *), void *context), {
    WRAP_RECURSIVE(mnt);
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
    WRAP_FUNCTION(acceptable);
    kern_printk("exportfs_decode_fh is invoked.\n");
    PRE_WRAPPER_FUNC(mnt, fid, fh_len, fileid_type, acceptable, context);
    struct dentry *ret = exportfs_decode_fh(mnt, fid, fh_len, fileid_type, acceptable, context);
    POST_WRAPPER_FUNC(mnt, fid, fh_len, fileid_type, acceptable, context);
    kern_printk("exportfs_decode_fh returned.\n");
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_unlock_memory_hotplug
#define APP_WRAPPER_FOR_unlock_memory_hotplug
#endif
 
#ifndef APP_WRAPPER_FOR_unlock_memory_hotplug
#define APP_WRAPPER_FOR_unlock_memory_hotplug
FUNCTION_WRAPPER_VOID(unlock_memory_hotplug, (), {
    kern_printk("unlock_memory_hotplug is invoked.\n");
    PRE_WRAPPER_FUNC();
    unlock_memory_hotplug();
    POST_WRAPPER_FUNC();
    kern_printk("unlock_memory_hotplug returned.\n");
})
#endif


#ifndef KERN_ADDR_skb_put
#define APP_WRAPPER_FOR_skb_put
#endif
 
#ifndef APP_WRAPPER_FOR_skb_put
#define APP_WRAPPER_FOR_skb_put
FUNCTION_WRAPPER(skb_put, (struct sk_buff *skb, unsigned int len), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_put is invoked.\n");
    PRE_WRAPPER_FUNC(skb, len);
    unsigned char *ret = skb_put(skb, len);
    POST_WRAPPER_FUNC(skb, len);
    kern_printk("skb_put returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_mempool_resize
#define APP_WRAPPER_FOR_mempool_resize
#endif
 
#ifndef APP_WRAPPER_FOR_mempool_resize
#define APP_WRAPPER_FOR_mempool_resize
FUNCTION_WRAPPER(mempool_resize, (mempool_t *pool, int new_min_nr, gfp_t gfp_mask), {
    WRAP_RECURSIVE(pool);
    TRACES_IF_WATCHPOINT(pool);
    SCAN_HEAD_FUNC(mempool_t)(*(TO_UNWATCHED_ADDRESS(pool)));
    kern_printk("mempool_resize is invoked.\n");
    PRE_WRAPPER_FUNC(pool, new_min_nr, gfp_mask);
    int ret = mempool_resize(pool, new_min_nr, gfp_mask);
    POST_WRAPPER_FUNC(pool, new_min_nr, gfp_mask);
    kern_printk("mempool_resize returned.\n");
    TRACES_IF_WATCHPOINT(pool);
    SCAN_HEAD_FUNC(mempool_t)(*(TO_UNWATCHED_ADDRESS(pool)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kick_all_cpus_sync
#define APP_WRAPPER_FOR_kick_all_cpus_sync
#endif
 
#ifndef APP_WRAPPER_FOR_kick_all_cpus_sync
#define APP_WRAPPER_FOR_kick_all_cpus_sync
FUNCTION_WRAPPER_VOID(kick_all_cpus_sync, (), {
    kern_printk("kick_all_cpus_sync is invoked.\n");
    PRE_WRAPPER_FUNC();
    kick_all_cpus_sync();
    POST_WRAPPER_FUNC();
    kern_printk("kick_all_cpus_sync returned.\n");
})
#endif


#ifndef KERN_ADDR_tracepoint_iter_start
#define APP_WRAPPER_FOR_tracepoint_iter_start
#endif
 
#ifndef APP_WRAPPER_FOR_tracepoint_iter_start
#define APP_WRAPPER_FOR_tracepoint_iter_start
FUNCTION_WRAPPER_VOID(tracepoint_iter_start, (struct tracepoint_iter *iter), {
    WRAP_RECURSIVE(iter);
    TRACES_IF_WATCHPOINT(iter);
    SCAN_HEAD_FUNC(struct tracepoint_iter)(*(TO_UNWATCHED_ADDRESS(iter)));
    kern_printk("tracepoint_iter_start is invoked.\n");
    PRE_WRAPPER_FUNC(iter);
    tracepoint_iter_start(iter);
    POST_WRAPPER_FUNC(iter);
    kern_printk("tracepoint_iter_start returned.\n");
    TRACES_IF_WATCHPOINT(iter);
    SCAN_HEAD_FUNC(struct tracepoint_iter)(*(TO_UNWATCHED_ADDRESS(iter)));
})
#endif


#ifndef KERN_ADDR_bitmap_set
#define APP_WRAPPER_FOR_bitmap_set
#endif
 
#ifndef APP_WRAPPER_FOR_bitmap_set
#define APP_WRAPPER_FOR_bitmap_set
FUNCTION_WRAPPER_VOID(bitmap_set, (unsigned long *map, int i, int len), {
    kern_printk("bitmap_set is invoked.\n");
    PRE_WRAPPER_FUNC(map, i, len);
    bitmap_set(map, i, len);
    POST_WRAPPER_FUNC(map, i, len);
    kern_printk("bitmap_set returned.\n");
})
#endif


#ifndef KERN_ADDR_show_stack
#define APP_WRAPPER_FOR_show_stack
#endif
 
#ifndef APP_WRAPPER_FOR_show_stack
#define APP_WRAPPER_FOR_show_stack
FUNCTION_WRAPPER_VOID(show_stack, (struct task_struct *task, unsigned long *sp), {
    WRAP_RECURSIVE(task);
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    kern_printk("show_stack is invoked.\n");
    PRE_WRAPPER_FUNC(task, sp);
    show_stack(task, sp);
    POST_WRAPPER_FUNC(task, sp);
    kern_printk("show_stack returned.\n");
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
})
#endif


#ifndef KERN_ADDR_scsi_register_acpi_bus_type
#define APP_WRAPPER_FOR_scsi_register_acpi_bus_type
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_register_acpi_bus_type
#define APP_WRAPPER_FOR_scsi_register_acpi_bus_type
FUNCTION_WRAPPER(scsi_register_acpi_bus_type, (struct acpi_bus_type *bus), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct acpi_bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("scsi_register_acpi_bus_type is invoked.\n");
    PRE_WRAPPER_FUNC(bus);
    int ret = scsi_register_acpi_bus_type(bus);
    POST_WRAPPER_FUNC(bus);
    kern_printk("scsi_register_acpi_bus_type returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct acpi_bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    return ret;
})
#endif


#ifndef KERN_ADDR_get_next_timer_interrupt
#define APP_WRAPPER_FOR_get_next_timer_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_get_next_timer_interrupt
#define APP_WRAPPER_FOR_get_next_timer_interrupt
FUNCTION_WRAPPER(get_next_timer_interrupt, (unsigned long now), {
    kern_printk("get_next_timer_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC(now);
    long ret = get_next_timer_interrupt(now);
    POST_WRAPPER_FUNC(now);
    kern_printk("get_next_timer_interrupt returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_get_geometry
#define APP_WRAPPER_FOR_dm_get_geometry
#endif
 
#ifndef APP_WRAPPER_FOR_dm_get_geometry
#define APP_WRAPPER_FOR_dm_get_geometry
FUNCTION_WRAPPER(dm_get_geometry, (struct mapped_device *md, struct hd_geometry *geo), {
    kern_printk("dm_get_geometry is invoked.\n");
    PRE_WRAPPER_FUNC(md, geo);
    int ret = dm_get_geometry(md, geo);
    POST_WRAPPER_FUNC(md, geo);
    kern_printk("dm_get_geometry returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_graft_qdisc
#define APP_WRAPPER_FOR_dev_graft_qdisc
#endif
 
#ifndef APP_WRAPPER_FOR_dev_graft_qdisc
#define APP_WRAPPER_FOR_dev_graft_qdisc
FUNCTION_WRAPPER(dev_graft_qdisc, (struct netdev_queue *dev_queue, struct Qdisc *qdisc), {
    WRAP_RECURSIVE(dev_queue);
    TRACES_IF_WATCHPOINT(dev_queue);
    SCAN_HEAD_FUNC(struct netdev_queue)(*(TO_UNWATCHED_ADDRESS(dev_queue)));
    WRAP_RECURSIVE(qdisc);
    TRACES_IF_WATCHPOINT(qdisc);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(qdisc)));
    kern_printk("dev_graft_qdisc is invoked.\n");
    PRE_WRAPPER_FUNC(dev_queue, qdisc);
    struct Qdisc *ret = dev_graft_qdisc(dev_queue, qdisc);
    POST_WRAPPER_FUNC(dev_queue, qdisc);
    kern_printk("dev_graft_qdisc returned.\n");
    TRACES_IF_WATCHPOINT(dev_queue);
    SCAN_HEAD_FUNC(struct netdev_queue)(*(TO_UNWATCHED_ADDRESS(dev_queue)));
    TRACES_IF_WATCHPOINT(qdisc);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(qdisc)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_input_set_abs_params
#define APP_WRAPPER_FOR_input_set_abs_params
#endif
 
#ifndef APP_WRAPPER_FOR_input_set_abs_params
#define APP_WRAPPER_FOR_input_set_abs_params
FUNCTION_WRAPPER_VOID(input_set_abs_params, (struct input_dev *dev, unsigned int axis, int min, int max, int fuzz, int flat), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("input_set_abs_params is invoked.\n");
    PRE_WRAPPER_FUNC(dev, axis, min, max, fuzz, flat);
    input_set_abs_params(dev, axis, min, max, fuzz, flat);
    POST_WRAPPER_FUNC(dev, axis, min, max, fuzz, flat);
    kern_printk("input_set_abs_params returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_d_obtain_alias
#define APP_WRAPPER_FOR_d_obtain_alias
#endif
 
#ifndef APP_WRAPPER_FOR_d_obtain_alias
#define APP_WRAPPER_FOR_d_obtain_alias
FUNCTION_WRAPPER(d_obtain_alias, (struct inode *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("d_obtain_alias is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct dentry *ret = d_obtain_alias(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("d_obtain_alias returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_get_rom_size
#define APP_WRAPPER_FOR_pci_get_rom_size
#endif
 
#ifndef APP_WRAPPER_FOR_pci_get_rom_size
#define APP_WRAPPER_FOR_pci_get_rom_size
FUNCTION_WRAPPER(pci_get_rom_size, (struct pci_dev *pdev, void *rom, size_t size), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("pci_get_rom_size is invoked.\n");
    PRE_WRAPPER_FUNC(pdev, rom, size);
    size_t ret = pci_get_rom_size(pdev, rom, size);
    POST_WRAPPER_FUNC(pdev, rom, size);
    kern_printk("pci_get_rom_size returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vmemmap_alloc_block_buf
#define APP_WRAPPER_FOR_vmemmap_alloc_block_buf
#endif
 
#ifndef APP_WRAPPER_FOR_vmemmap_alloc_block_buf
#define APP_WRAPPER_FOR_vmemmap_alloc_block_buf
FUNCTION_WRAPPER(vmemmap_alloc_block_buf, (unsigned long size, int node), {
    kern_printk("vmemmap_alloc_block_buf is invoked.\n");
    PRE_WRAPPER_FUNC(size, node);
    void *ret = vmemmap_alloc_block_buf(size, node);
    POST_WRAPPER_FUNC(size, node);
    kern_printk("vmemmap_alloc_block_buf returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_hex_to_bin
#define APP_WRAPPER_FOR_hex_to_bin
#endif
 
#ifndef APP_WRAPPER_FOR_hex_to_bin
#define APP_WRAPPER_FOR_hex_to_bin
FUNCTION_WRAPPER(hex_to_bin, (char ch), {
    kern_printk("hex_to_bin is invoked.\n");
    PRE_WRAPPER_FUNC(ch);
    int ret = hex_to_bin(ch);
    POST_WRAPPER_FUNC(ch);
    kern_printk("hex_to_bin returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_memweight
#define APP_WRAPPER_FOR_memweight
#endif
 
#ifndef APP_WRAPPER_FOR_memweight
#define APP_WRAPPER_FOR_memweight
FUNCTION_WRAPPER(memweight, (const void *ptr, size_t bytes), {
    kern_printk("memweight is invoked.\n");
    PRE_WRAPPER_FUNC(ptr, bytes);
    size_t ret = memweight(ptr, bytes);
    POST_WRAPPER_FUNC(ptr, bytes);
    kern_printk("memweight returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_setup_ioapic_ids_from_mpc
#define APP_WRAPPER_FOR_setup_ioapic_ids_from_mpc
#endif
 
#ifndef APP_WRAPPER_FOR_setup_ioapic_ids_from_mpc
#define APP_WRAPPER_FOR_setup_ioapic_ids_from_mpc
FUNCTION_WRAPPER_VOID(setup_ioapic_ids_from_mpc, (), {
    kern_printk("setup_ioapic_ids_from_mpc is invoked.\n");
    PRE_WRAPPER_FUNC();
    setup_ioapic_ids_from_mpc();
    POST_WRAPPER_FUNC();
    kern_printk("setup_ioapic_ids_from_mpc returned.\n");
})
#endif


#ifndef KERN_ADDR_tick_clock_notify
#define APP_WRAPPER_FOR_tick_clock_notify
#endif
 
#ifndef APP_WRAPPER_FOR_tick_clock_notify
#define APP_WRAPPER_FOR_tick_clock_notify
FUNCTION_WRAPPER_VOID(tick_clock_notify, (), {
    kern_printk("tick_clock_notify is invoked.\n");
    PRE_WRAPPER_FUNC();
    tick_clock_notify();
    POST_WRAPPER_FUNC();
    kern_printk("tick_clock_notify returned.\n");
})
#endif


#ifndef KERN_ADDR_netdev_features_change
#define APP_WRAPPER_FOR_netdev_features_change
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_features_change
#define APP_WRAPPER_FOR_netdev_features_change
FUNCTION_WRAPPER_VOID(netdev_features_change, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("netdev_features_change is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    netdev_features_change(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("netdev_features_change returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_pcpu_alloc_alloc_info
#define APP_WRAPPER_FOR_pcpu_alloc_alloc_info
#endif
 
#ifndef APP_WRAPPER_FOR_pcpu_alloc_alloc_info
#define APP_WRAPPER_FOR_pcpu_alloc_alloc_info
FUNCTION_WRAPPER(pcpu_alloc_alloc_info, (int nr_groups, int nr_units), {
    kern_printk("pcpu_alloc_alloc_info is invoked.\n");
    PRE_WRAPPER_FUNC(nr_groups, nr_units);
    struct pcpu_alloc_info *ret = pcpu_alloc_alloc_info(nr_groups, nr_units);
    POST_WRAPPER_FUNC(nr_groups, nr_units);
    kern_printk("pcpu_alloc_alloc_info returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_proc_doulongvec_ms_jiffies_minmax
#define APP_WRAPPER_FOR_proc_doulongvec_ms_jiffies_minmax
#endif
 
#ifndef APP_WRAPPER_FOR_proc_doulongvec_ms_jiffies_minmax
#define APP_WRAPPER_FOR_proc_doulongvec_ms_jiffies_minmax
FUNCTION_WRAPPER(proc_doulongvec_ms_jiffies_minmax, (struct ctl_table *table, int _arg1, void *_arg2, size_t *_arg3, loff_t *_arg4), {
    WRAP_RECURSIVE(table);
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    kern_printk("proc_doulongvec_ms_jiffies_minmax is invoked.\n");
    PRE_WRAPPER_FUNC(table, _arg1, _arg2, _arg3, _arg4);
    int ret = proc_doulongvec_ms_jiffies_minmax(table, _arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(table, _arg1, _arg2, _arg3, _arg4);
    kern_printk("proc_doulongvec_ms_jiffies_minmax returned.\n");
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    return ret;
})
#endif


#ifndef KERN_ADDR_proc_do_large_bitmap
#define APP_WRAPPER_FOR_proc_do_large_bitmap
#endif
 
#ifndef APP_WRAPPER_FOR_proc_do_large_bitmap
#define APP_WRAPPER_FOR_proc_do_large_bitmap
FUNCTION_WRAPPER(proc_do_large_bitmap, (struct ctl_table *_arg1, int _arg2, void *_arg3, size_t *_arg4, loff_t *_arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("proc_do_large_bitmap is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = proc_do_large_bitmap(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("proc_do_large_bitmap returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_lookup_resource
#define APP_WRAPPER_FOR_lookup_resource
#endif
 
#ifndef APP_WRAPPER_FOR_lookup_resource
#define APP_WRAPPER_FOR_lookup_resource
FUNCTION_WRAPPER(lookup_resource, (struct resource *root, resource_size_t start), {
    kern_printk("lookup_resource is invoked.\n");
    PRE_WRAPPER_FUNC(root, start);
    struct resource *ret = lookup_resource(root, start);
    POST_WRAPPER_FUNC(root, start);
    kern_printk("lookup_resource returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_alloc_pid
#define APP_WRAPPER_FOR_alloc_pid
#endif
 
#ifndef APP_WRAPPER_FOR_alloc_pid
#define APP_WRAPPER_FOR_alloc_pid
FUNCTION_WRAPPER(alloc_pid, (struct pid_namespace *ns), {
    kern_printk("alloc_pid is invoked.\n");
    PRE_WRAPPER_FUNC(ns);
    struct pid *ret = alloc_pid(ns);
    POST_WRAPPER_FUNC(ns);
    kern_printk("alloc_pid returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sigqueue_free
#define APP_WRAPPER_FOR_sigqueue_free
#endif
 
#ifndef APP_WRAPPER_FOR_sigqueue_free
#define APP_WRAPPER_FOR_sigqueue_free
FUNCTION_WRAPPER_VOID(sigqueue_free, (struct sigqueue *_arg1), {
    kern_printk("sigqueue_free is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    sigqueue_free(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("sigqueue_free returned.\n");
})
#endif


#ifndef KERN_ADDR_proc_free_inum
#define APP_WRAPPER_FOR_proc_free_inum
#endif
 
#ifndef APP_WRAPPER_FOR_proc_free_inum
#define APP_WRAPPER_FOR_proc_free_inum
FUNCTION_WRAPPER_VOID(proc_free_inum, (unsigned int inum), {
    kern_printk("proc_free_inum is invoked.\n");
    PRE_WRAPPER_FUNC(inum);
    proc_free_inum(inum);
    POST_WRAPPER_FUNC(inum);
    kern_printk("proc_free_inum returned.\n");
})
#endif


#ifndef KERN_ADDR_klist_next
#define APP_WRAPPER_FOR_klist_next
#endif
 
#ifndef APP_WRAPPER_FOR_klist_next
#define APP_WRAPPER_FOR_klist_next
FUNCTION_WRAPPER(klist_next, (struct klist_iter *i), {
    WRAP_RECURSIVE(i);
    TRACES_IF_WATCHPOINT(i);
    SCAN_HEAD_FUNC(struct klist_iter)(*(TO_UNWATCHED_ADDRESS(i)));
    kern_printk("klist_next is invoked.\n");
    PRE_WRAPPER_FUNC(i);
    struct klist_node *ret = klist_next(i);
    POST_WRAPPER_FUNC(i);
    kern_printk("klist_next returned.\n");
    TRACES_IF_WATCHPOINT(i);
    SCAN_HEAD_FUNC(struct klist_iter)(*(TO_UNWATCHED_ADDRESS(i)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_gen_kill_estimator
#define APP_WRAPPER_FOR_gen_kill_estimator
#endif
 
#ifndef APP_WRAPPER_FOR_gen_kill_estimator
#define APP_WRAPPER_FOR_gen_kill_estimator
FUNCTION_WRAPPER_VOID(gen_kill_estimator, (struct gnet_stats_basic_packed *bstats, struct gnet_stats_rate_est *rate_est), {
    kern_printk("gen_kill_estimator is invoked.\n");
    PRE_WRAPPER_FUNC(bstats, rate_est);
    gen_kill_estimator(bstats, rate_est);
    POST_WRAPPER_FUNC(bstats, rate_est);
    kern_printk("gen_kill_estimator returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_pci_find_root
#define APP_WRAPPER_FOR_acpi_pci_find_root
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_pci_find_root
#define APP_WRAPPER_FOR_acpi_pci_find_root
FUNCTION_WRAPPER(acpi_pci_find_root, (acpi_handle handle), {
    kern_printk("acpi_pci_find_root is invoked.\n");
    PRE_WRAPPER_FUNC(handle);
    struct acpi_pci_root *ret = acpi_pci_find_root(handle);
    POST_WRAPPER_FUNC(handle);
    kern_printk("acpi_pci_find_root returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_move_masked_irq
#define APP_WRAPPER_FOR_irq_move_masked_irq
#endif
 
#ifndef APP_WRAPPER_FOR_irq_move_masked_irq
#define APP_WRAPPER_FOR_irq_move_masked_irq
FUNCTION_WRAPPER_VOID(irq_move_masked_irq, (struct irq_data *data), {
    WRAP_RECURSIVE(data);
    TRACES_IF_WATCHPOINT(data);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(data)));
    kern_printk("irq_move_masked_irq is invoked.\n");
    PRE_WRAPPER_FUNC(data);
    irq_move_masked_irq(data);
    POST_WRAPPER_FUNC(data);
    kern_printk("irq_move_masked_irq returned.\n");
    TRACES_IF_WATCHPOINT(data);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(data)));
})
#endif


#ifndef KERN_ADDR_cdrom_number_of_slots
#define APP_WRAPPER_FOR_cdrom_number_of_slots
#endif
 
#ifndef APP_WRAPPER_FOR_cdrom_number_of_slots
#define APP_WRAPPER_FOR_cdrom_number_of_slots
FUNCTION_WRAPPER(cdrom_number_of_slots, (struct cdrom_device_info *cdi), {
    WRAP_RECURSIVE(cdi);
    TRACES_IF_WATCHPOINT(cdi);
    SCAN_HEAD_FUNC(struct cdrom_device_info)(*(TO_UNWATCHED_ADDRESS(cdi)));
    kern_printk("cdrom_number_of_slots is invoked.\n");
    PRE_WRAPPER_FUNC(cdi);
    int ret = cdrom_number_of_slots(cdi);
    POST_WRAPPER_FUNC(cdi);
    kern_printk("cdrom_number_of_slots returned.\n");
    TRACES_IF_WATCHPOINT(cdi);
    SCAN_HEAD_FUNC(struct cdrom_device_info)(*(TO_UNWATCHED_ADDRESS(cdi)));
    return ret;
})
#endif


#ifndef KERN_ADDR_skip_spaces
#define APP_WRAPPER_FOR_skip_spaces
#endif
 
#ifndef APP_WRAPPER_FOR_skip_spaces
#define APP_WRAPPER_FOR_skip_spaces
FUNCTION_WRAPPER(skip_spaces, (const char *_arg1), {
    kern_printk("skip_spaces is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    char *ret = skip_spaces(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("skip_spaces returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_cpu_init
#define APP_WRAPPER_FOR_cpu_init
#endif
 
#ifndef APP_WRAPPER_FOR_cpu_init
#define APP_WRAPPER_FOR_cpu_init
FUNCTION_WRAPPER_VOID(cpu_init, (), {
    kern_printk("cpu_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    cpu_init();
    POST_WRAPPER_FUNC();
    kern_printk("cpu_init returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_remove_bus
#define APP_WRAPPER_FOR_pci_remove_bus
#endif
 
#ifndef APP_WRAPPER_FOR_pci_remove_bus
#define APP_WRAPPER_FOR_pci_remove_bus
FUNCTION_WRAPPER_VOID(pci_remove_bus, (struct pci_bus *b), {
    WRAP_RECURSIVE(b);
    TRACES_IF_WATCHPOINT(b);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(b)));
    kern_printk("pci_remove_bus is invoked.\n");
    PRE_WRAPPER_FUNC(b);
    pci_remove_bus(b);
    POST_WRAPPER_FUNC(b);
    kern_printk("pci_remove_bus returned.\n");
    TRACES_IF_WATCHPOINT(b);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(b)));
})
#endif


#ifndef KERN_ADDR_pnp_auto_config_dev
#define APP_WRAPPER_FOR_pnp_auto_config_dev
#endif
 
#ifndef APP_WRAPPER_FOR_pnp_auto_config_dev
#define APP_WRAPPER_FOR_pnp_auto_config_dev
FUNCTION_WRAPPER(pnp_auto_config_dev, (struct pnp_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pnp_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pnp_auto_config_dev is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pnp_auto_config_dev(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pnp_auto_config_dev returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pnp_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_vcalloc
#define APP_WRAPPER_FOR_dm_vcalloc
#endif
 
#ifndef APP_WRAPPER_FOR_dm_vcalloc
#define APP_WRAPPER_FOR_dm_vcalloc
FUNCTION_WRAPPER(dm_vcalloc, (unsigned long nmemb, unsigned long elem_size), {
    kern_printk("dm_vcalloc is invoked.\n");
    PRE_WRAPPER_FUNC(nmemb, elem_size);
    void *ret = dm_vcalloc(nmemb, elem_size);
    POST_WRAPPER_FUNC(nmemb, elem_size);
    kern_printk("dm_vcalloc returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_task_can_switch_user
#define APP_WRAPPER_FOR_task_can_switch_user
#endif
 
#ifndef APP_WRAPPER_FOR_task_can_switch_user
#define APP_WRAPPER_FOR_task_can_switch_user
FUNCTION_WRAPPER(task_can_switch_user, (struct user_struct *up, struct task_struct *tsk), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("task_can_switch_user is invoked.\n");
    PRE_WRAPPER_FUNC(up, tsk);
    int ret = task_can_switch_user(up, tsk);
    POST_WRAPPER_FUNC(up, tsk);
    kern_printk("task_can_switch_user returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_subsys_interface_register
#define APP_WRAPPER_FOR_subsys_interface_register
#endif
 
#ifndef APP_WRAPPER_FOR_subsys_interface_register
#define APP_WRAPPER_FOR_subsys_interface_register
FUNCTION_WRAPPER(subsys_interface_register, (struct subsys_interface *sif), {
    WRAP_RECURSIVE(sif);
    TRACES_IF_WATCHPOINT(sif);
    SCAN_HEAD_FUNC(struct subsys_interface)(*(TO_UNWATCHED_ADDRESS(sif)));
    kern_printk("subsys_interface_register is invoked.\n");
    PRE_WRAPPER_FUNC(sif);
    int ret = subsys_interface_register(sif);
    POST_WRAPPER_FUNC(sif);
    kern_printk("subsys_interface_register returned.\n");
    TRACES_IF_WATCHPOINT(sif);
    SCAN_HEAD_FUNC(struct subsys_interface)(*(TO_UNWATCHED_ADDRESS(sif)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_mount
#define APP_WRAPPER_FOR_compat_sys_mount
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_mount
#define APP_WRAPPER_FOR_compat_sys_mount
FUNCTION_WRAPPER(compat_sys_mount, (const char *dev_name, const char *dir_name, const char *type, unsigned long flags, const void *data), {
    kern_printk("compat_sys_mount is invoked.\n");
    PRE_WRAPPER_FUNC(dev_name, dir_name, type, flags, data);
    long ret = compat_sys_mount(dev_name, dir_name, type, flags, data);
    POST_WRAPPER_FUNC(dev_name, dir_name, type, flags, data);
    kern_printk("compat_sys_mount returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_calc_global_load
#define APP_WRAPPER_FOR_calc_global_load
#endif
 
#ifndef APP_WRAPPER_FOR_calc_global_load
#define APP_WRAPPER_FOR_calc_global_load
FUNCTION_WRAPPER_VOID(calc_global_load, (unsigned long ticks), {
    kern_printk("calc_global_load is invoked.\n");
    PRE_WRAPPER_FUNC(ticks);
    calc_global_load(ticks);
    POST_WRAPPER_FUNC(ticks);
    kern_printk("calc_global_load returned.\n");
})
#endif


#ifndef KERN_ADDR_memblock_x86_fill
#define APP_WRAPPER_FOR_memblock_x86_fill
#endif
 
#ifndef APP_WRAPPER_FOR_memblock_x86_fill
#define APP_WRAPPER_FOR_memblock_x86_fill
FUNCTION_WRAPPER_VOID(memblock_x86_fill, (), {
    kern_printk("memblock_x86_fill is invoked.\n");
    PRE_WRAPPER_FUNC();
    memblock_x86_fill();
    POST_WRAPPER_FUNC();
    kern_printk("memblock_x86_fill returned.\n");
})
#endif


#ifndef KERN_ADDR_register_hotplug_dock_device
#define APP_WRAPPER_FOR_register_hotplug_dock_device
#endif
 
#ifndef APP_WRAPPER_FOR_register_hotplug_dock_device
#define APP_WRAPPER_FOR_register_hotplug_dock_device
FUNCTION_WRAPPER(register_hotplug_dock_device, (acpi_handle handle, const struct acpi_dock_ops *ops, void *context), {
    WRAP_RECURSIVE(ops);
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(const struct acpi_dock_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    kern_printk("register_hotplug_dock_device is invoked.\n");
    PRE_WRAPPER_FUNC(handle, ops, context);
    int ret = register_hotplug_dock_device(handle, ops, context);
    POST_WRAPPER_FUNC(handle, ops, context);
    kern_printk("register_hotplug_dock_device returned.\n");
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(const struct acpi_dock_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_get_irq_routing_table
#define APP_WRAPPER_FOR_acpi_get_irq_routing_table
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_irq_routing_table
#define APP_WRAPPER_FOR_acpi_get_irq_routing_table
FUNCTION_WRAPPER(acpi_get_irq_routing_table, (acpi_handle device, struct acpi_buffer *ret_buffer), {
    kern_printk("acpi_get_irq_routing_table is invoked.\n");
    PRE_WRAPPER_FUNC(device, ret_buffer);
    acpi_status ret = acpi_get_irq_routing_table(device, ret_buffer);
    POST_WRAPPER_FUNC(device, ret_buffer);
    kern_printk("acpi_get_irq_routing_table returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_scan_bus_parented
#define APP_WRAPPER_FOR_pci_scan_bus_parented
#endif
 
#ifndef APP_WRAPPER_FOR_pci_scan_bus_parented
#define APP_WRAPPER_FOR_pci_scan_bus_parented
FUNCTION_WRAPPER(pci_scan_bus_parented, (struct device *parent, int bus, struct pci_ops *ops, void *sysdata), {
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(parent)));
    WRAP_RECURSIVE(ops);
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct pci_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    kern_printk("pci_scan_bus_parented is invoked.\n");
    PRE_WRAPPER_FUNC(parent, bus, ops, sysdata);
    struct pci_bus *ret = pci_scan_bus_parented(parent, bus, ops, sysdata);
    POST_WRAPPER_FUNC(parent, bus, ops, sysdata);
    kern_printk("pci_scan_bus_parented returned.\n");
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(parent)));
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct pci_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_blocks_per_page
#define APP_WRAPPER_FOR_jbd2_journal_blocks_per_page
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_blocks_per_page
#define APP_WRAPPER_FOR_jbd2_journal_blocks_per_page
FUNCTION_WRAPPER(jbd2_journal_blocks_per_page, (struct inode *inode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("jbd2_journal_blocks_per_page is invoked.\n");
    PRE_WRAPPER_FUNC(inode);
    int ret = jbd2_journal_blocks_per_page(inode);
    POST_WRAPPER_FUNC(inode);
    kern_printk("jbd2_journal_blocks_per_page returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    return ret;
})
#endif


#ifndef KERN_ADDR_from_kqid
#define APP_WRAPPER_FOR_from_kqid
#endif
 
#ifndef APP_WRAPPER_FOR_from_kqid
#define APP_WRAPPER_FOR_from_kqid
FUNCTION_WRAPPER(from_kqid, (struct user_namespace *to, struct kqid qid), {
    kern_printk("from_kqid is invoked.\n");
    PRE_WRAPPER_FUNC(to, qid);
    qid_t ret = from_kqid(to, qid);
    POST_WRAPPER_FUNC(to, qid);
    kern_printk("from_kqid returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sata_link_resume
#define APP_WRAPPER_FOR_sata_link_resume
#endif
 
#ifndef APP_WRAPPER_FOR_sata_link_resume
#define APP_WRAPPER_FOR_sata_link_resume
FUNCTION_WRAPPER(sata_link_resume, (struct ata_link *link, unsigned const long *params, unsigned long deadline), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    kern_printk("sata_link_resume is invoked.\n");
    PRE_WRAPPER_FUNC(link, params, deadline);
    int ret = sata_link_resume(link, params, deadline);
    POST_WRAPPER_FUNC(link, params, deadline);
    kern_printk("sata_link_resume returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    return ret;
})
#endif


#ifndef KERN_ADDR_warn_slowpath_fmt_taint
#define APP_WRAPPER_FOR_warn_slowpath_fmt_taint
#endif
 
#ifndef APP_WRAPPER_FOR_warn_slowpath_fmt_taint
#define APP_WRAPPER_FOR_warn_slowpath_fmt_taint
FUNCTION_WRAPPER_VOID(warn_slowpath_fmt_taint, (const char *file, const int line, unsigned int taint, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    // TODO: variadic arguments
    kern_printk("warn_slowpath_fmt_taint is invoked.\n");
    PRE_WRAPPER_FUNC(file, line, taint, fmt);
    warn_slowpath_fmt_taint(file, line, taint, fmt);
    POST_WRAPPER_FUNC(file, line, taint, fmt);
    kern_printk("warn_slowpath_fmt_taint returned.\n");
    va_end(args__);
})
#endif


#ifndef KERN_ADDR_klist_add_head
#define APP_WRAPPER_FOR_klist_add_head
#endif
 
#ifndef APP_WRAPPER_FOR_klist_add_head
#define APP_WRAPPER_FOR_klist_add_head
FUNCTION_WRAPPER_VOID(klist_add_head, (struct klist_node *n, struct klist *k), {
    WRAP_RECURSIVE(k);
    TRACES_IF_WATCHPOINT(k);
    SCAN_HEAD_FUNC(struct klist)(*(TO_UNWATCHED_ADDRESS(k)));
    kern_printk("klist_add_head is invoked.\n");
    PRE_WRAPPER_FUNC(n, k);
    klist_add_head(n, k);
    POST_WRAPPER_FUNC(n, k);
    kern_printk("klist_add_head returned.\n");
    TRACES_IF_WATCHPOINT(k);
    SCAN_HEAD_FUNC(struct klist)(*(TO_UNWATCHED_ADDRESS(k)));
})
#endif


#ifndef KERN_ADDR_register_sysctl
#define APP_WRAPPER_FOR_register_sysctl
#endif
 
#ifndef APP_WRAPPER_FOR_register_sysctl
#define APP_WRAPPER_FOR_register_sysctl
FUNCTION_WRAPPER(register_sysctl, (const char *path, struct ctl_table *table), {
    WRAP_RECURSIVE(table);
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    kern_printk("register_sysctl is invoked.\n");
    PRE_WRAPPER_FUNC(path, table);
    struct ctl_table_header *ret = register_sysctl(path, table);
    POST_WRAPPER_FUNC(path, table);
    kern_printk("register_sysctl returned.\n");
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pcibios_align_resource
#define APP_WRAPPER_FOR_pcibios_align_resource
#endif
 
#ifndef APP_WRAPPER_FOR_pcibios_align_resource
#define APP_WRAPPER_FOR_pcibios_align_resource
FUNCTION_WRAPPER(pcibios_align_resource, (void *_arg1, const struct resource *_arg2, resource_size_t _arg3, resource_size_t _arg4), {
    kern_printk("pcibios_align_resource is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    resource_size_t ret = pcibios_align_resource(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("pcibios_align_resource returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_flow_cache_flush
#define APP_WRAPPER_FOR_flow_cache_flush
#endif
 
#ifndef APP_WRAPPER_FOR_flow_cache_flush
#define APP_WRAPPER_FOR_flow_cache_flush
FUNCTION_WRAPPER_VOID(flow_cache_flush, (), {
    kern_printk("flow_cache_flush is invoked.\n");
    PRE_WRAPPER_FUNC();
    flow_cache_flush();
    POST_WRAPPER_FUNC();
    kern_printk("flow_cache_flush returned.\n");
})
#endif


#ifndef KERN_ADDR_kblockd_schedule_work
#define APP_WRAPPER_FOR_kblockd_schedule_work
#endif
 
#ifndef APP_WRAPPER_FOR_kblockd_schedule_work
#define APP_WRAPPER_FOR_kblockd_schedule_work
FUNCTION_WRAPPER(kblockd_schedule_work, (struct request_queue *q, struct work_struct *work), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    WRAP_RECURSIVE(work);
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
    kern_printk("kblockd_schedule_work is invoked.\n");
    PRE_WRAPPER_FUNC(q, work);
    int ret = kblockd_schedule_work(q, work);
    POST_WRAPPER_FUNC(q, work);
    kern_printk("kblockd_schedule_work returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_enable_gpe
#define APP_WRAPPER_FOR_acpi_enable_gpe
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_enable_gpe
#define APP_WRAPPER_FOR_acpi_enable_gpe
FUNCTION_WRAPPER(acpi_enable_gpe, (acpi_handle gpe_device, u32 gpe_number), {
    kern_printk("acpi_enable_gpe is invoked.\n");
    PRE_WRAPPER_FUNC(gpe_device, gpe_number);
    acpi_status ret = acpi_enable_gpe(gpe_device, gpe_number);
    POST_WRAPPER_FUNC(gpe_device, gpe_number);
    kern_printk("acpi_enable_gpe returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_init_idle_bootup_task
#define APP_WRAPPER_FOR_init_idle_bootup_task
#endif
 
#ifndef APP_WRAPPER_FOR_init_idle_bootup_task
#define APP_WRAPPER_FOR_init_idle_bootup_task
FUNCTION_WRAPPER_VOID(init_idle_bootup_task, (struct task_struct *idle), {
    WRAP_RECURSIVE(idle);
    TRACES_IF_WATCHPOINT(idle);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(idle)));
    kern_printk("init_idle_bootup_task is invoked.\n");
    PRE_WRAPPER_FUNC(idle);
    init_idle_bootup_task(idle);
    POST_WRAPPER_FUNC(idle);
    kern_printk("init_idle_bootup_task returned.\n");
    TRACES_IF_WATCHPOINT(idle);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(idle)));
})
#endif


#ifndef KERN_ADDR___percpu_counter_add
#define APP_WRAPPER_FOR___percpu_counter_add
#endif
 
#ifndef APP_WRAPPER_FOR___percpu_counter_add
#define APP_WRAPPER_FOR___percpu_counter_add
FUNCTION_WRAPPER_VOID(__percpu_counter_add, (struct percpu_counter *fbc, s64 amount, s32 batch), {
    kern_printk("__percpu_counter_add is invoked.\n");
    PRE_WRAPPER_FUNC(fbc, amount, batch);
    __percpu_counter_add(fbc, amount, batch);
    POST_WRAPPER_FUNC(fbc, amount, batch);
    kern_printk("__percpu_counter_add returned.\n");
})
#endif


#ifndef KERN_ADDR_block_invalidatepage
#define APP_WRAPPER_FOR_block_invalidatepage
#endif
 
#ifndef APP_WRAPPER_FOR_block_invalidatepage
#define APP_WRAPPER_FOR_block_invalidatepage
FUNCTION_WRAPPER_VOID(block_invalidatepage, (struct page *page, unsigned long offset), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("block_invalidatepage is invoked.\n");
    PRE_WRAPPER_FUNC(page, offset);
    block_invalidatepage(page, offset);
    POST_WRAPPER_FUNC(page, offset);
    kern_printk("block_invalidatepage returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_sock_no_sendmsg
#define APP_WRAPPER_FOR_sock_no_sendmsg
#endif
 
#ifndef APP_WRAPPER_FOR_sock_no_sendmsg
#define APP_WRAPPER_FOR_sock_no_sendmsg
FUNCTION_WRAPPER(sock_no_sendmsg, (struct kiocb *_arg1, struct socket *_arg2, struct msghdr *_arg3, size_t _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("sock_no_sendmsg is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = sock_no_sendmsg(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("sock_no_sendmsg returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_get_phy_device
#define APP_WRAPPER_FOR_get_phy_device
#endif
 
#ifndef APP_WRAPPER_FOR_get_phy_device
#define APP_WRAPPER_FOR_get_phy_device
FUNCTION_WRAPPER(get_phy_device, (struct mii_bus *bus, int addr, bool is_c45), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct mii_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("get_phy_device is invoked.\n");
    PRE_WRAPPER_FUNC(bus, addr, is_c45);
    struct phy_device *ret = get_phy_device(bus, addr, is_c45);
    POST_WRAPPER_FUNC(bus, addr, is_c45);
    kern_printk("get_phy_device returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct mii_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_splice_sendpage
#define APP_WRAPPER_FOR_generic_splice_sendpage
#endif
 
#ifndef APP_WRAPPER_FOR_generic_splice_sendpage
#define APP_WRAPPER_FOR_generic_splice_sendpage
FUNCTION_WRAPPER(generic_splice_sendpage, (struct pipe_inode_info *pipe, struct file *out, loff_t *_arg1, size_t len, unsigned int flags), {
    WRAP_RECURSIVE(out);
    TRACES_IF_WATCHPOINT(out);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(out)));
    kern_printk("generic_splice_sendpage is invoked.\n");
    PRE_WRAPPER_FUNC(pipe, out, _arg1, len, flags);
    ssize_t ret = generic_splice_sendpage(pipe, out, _arg1, len, flags);
    POST_WRAPPER_FUNC(pipe, out, _arg1, len, flags);
    kern_printk("generic_splice_sendpage returned.\n");
    TRACES_IF_WATCHPOINT(out);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(out)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_get_event_nr
#define APP_WRAPPER_FOR_dm_get_event_nr
#endif
 
#ifndef APP_WRAPPER_FOR_dm_get_event_nr
#define APP_WRAPPER_FOR_dm_get_event_nr
FUNCTION_WRAPPER(dm_get_event_nr, (struct mapped_device *md), {
    kern_printk("dm_get_event_nr is invoked.\n");
    PRE_WRAPPER_FUNC(md);
    uint32_t ret = dm_get_event_nr(md);
    POST_WRAPPER_FUNC(md);
    kern_printk("dm_get_event_nr returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___bitmap_xor
#define APP_WRAPPER_FOR___bitmap_xor
#endif
 
#ifndef APP_WRAPPER_FOR___bitmap_xor
#define APP_WRAPPER_FOR___bitmap_xor
FUNCTION_WRAPPER_VOID(__bitmap_xor, (unsigned long *dst, unsigned const long *bitmap1, unsigned const long *bitmap2, int bits), {
    kern_printk("__bitmap_xor is invoked.\n");
    PRE_WRAPPER_FUNC(dst, bitmap1, bitmap2, bits);
    __bitmap_xor(dst, bitmap1, bitmap2, bits);
    POST_WRAPPER_FUNC(dst, bitmap1, bitmap2, bits);
    kern_printk("__bitmap_xor returned.\n");
})
#endif


#ifndef KERN_ADDR_phy_ethtool_sset
#define APP_WRAPPER_FOR_phy_ethtool_sset
#endif
 
#ifndef APP_WRAPPER_FOR_phy_ethtool_sset
#define APP_WRAPPER_FOR_phy_ethtool_sset
FUNCTION_WRAPPER(phy_ethtool_sset, (struct phy_device *phydev, struct ethtool_cmd *cmd), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    kern_printk("phy_ethtool_sset is invoked.\n");
    PRE_WRAPPER_FUNC(phydev, cmd);
    int ret = phy_ethtool_sset(phydev, cmd);
    POST_WRAPPER_FUNC(phydev, cmd);
    kern_printk("phy_ethtool_sset returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_send_cleanup_vector
#define APP_WRAPPER_FOR_send_cleanup_vector
#endif
 
#ifndef APP_WRAPPER_FOR_send_cleanup_vector
#define APP_WRAPPER_FOR_send_cleanup_vector
FUNCTION_WRAPPER_VOID(send_cleanup_vector, (struct irq_cfg *_arg1), {
    kern_printk("send_cleanup_vector is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    send_cleanup_vector(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("send_cleanup_vector returned.\n");
})
#endif


#ifndef KERN_ADDR_init_cdrom_command
#define APP_WRAPPER_FOR_init_cdrom_command
#endif
 
#ifndef APP_WRAPPER_FOR_init_cdrom_command
#define APP_WRAPPER_FOR_init_cdrom_command
FUNCTION_WRAPPER_VOID(init_cdrom_command, (struct packet_command *cgc, void *buffer, int len, int type), {
    kern_printk("init_cdrom_command is invoked.\n");
    PRE_WRAPPER_FUNC(cgc, buffer, len, type);
    init_cdrom_command(cgc, buffer, len, type);
    POST_WRAPPER_FUNC(cgc, buffer, len, type);
    kern_printk("init_cdrom_command returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_is_video_device
#define APP_WRAPPER_FOR_acpi_is_video_device
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_is_video_device
#define APP_WRAPPER_FOR_acpi_is_video_device
FUNCTION_WRAPPER(acpi_is_video_device, (struct acpi_device *device), {
    WRAP_RECURSIVE(device);
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(device)));
    kern_printk("acpi_is_video_device is invoked.\n");
    PRE_WRAPPER_FUNC(device);
    long ret = acpi_is_video_device(device);
    POST_WRAPPER_FUNC(device);
    kern_printk("acpi_is_video_device returned.\n");
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(device)));
    return ret;
})
#endif


#ifndef KERN_ADDR_subsys_system_register
#define APP_WRAPPER_FOR_subsys_system_register
#endif
 
#ifndef APP_WRAPPER_FOR_subsys_system_register
#define APP_WRAPPER_FOR_subsys_system_register
FUNCTION_WRAPPER(subsys_system_register, (struct bus_type *subsys, const struct attribute_group **groups), {
    WRAP_RECURSIVE(subsys);
    TRACES_IF_WATCHPOINT(subsys);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(subsys)));
    WRAP_RECURSIVE(groups);
    TRACES_IF_WATCHPOINT(groups);
    SCAN_HEAD_FUNC(const struct attribute_group *)(*(TO_UNWATCHED_ADDRESS(groups)));
    kern_printk("subsys_system_register is invoked.\n");
    PRE_WRAPPER_FUNC(subsys, groups);
    int ret = subsys_system_register(subsys, groups);
    POST_WRAPPER_FUNC(subsys, groups);
    kern_printk("subsys_system_register returned.\n");
    TRACES_IF_WATCHPOINT(subsys);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(subsys)));
    TRACES_IF_WATCHPOINT(groups);
    SCAN_HEAD_FUNC(const struct attribute_group *)(*(TO_UNWATCHED_ADDRESS(groups)));
    return ret;
})
#endif


#ifndef KERN_ADDR_printk
#define APP_WRAPPER_FOR_printk
#endif
 
#ifndef APP_WRAPPER_FOR_printk
#define APP_WRAPPER_FOR_printk
FUNCTION_WRAPPER(printk, (const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    // TODO: variadic arguments
    kern_printk("printk is invoked.\n");
    PRE_WRAPPER_FUNC(fmt);
    int ret = printk(fmt);
    POST_WRAPPER_FUNC(fmt);
    kern_printk("printk returned.\n");
    va_end(args__);
    return ret;
})
#endif


#ifndef KERN_ADDR__paravirt_nop
#define APP_WRAPPER_FOR__paravirt_nop
#endif
 
#ifndef APP_WRAPPER_FOR__paravirt_nop
#define APP_WRAPPER_FOR__paravirt_nop
FUNCTION_WRAPPER_VOID(_paravirt_nop, (), {
    kern_printk("_paravirt_nop is invoked.\n");
    PRE_WRAPPER_FUNC();
    _paravirt_nop();
    POST_WRAPPER_FUNC();
    kern_printk("_paravirt_nop returned.\n");
})
#endif


#ifndef KERN_ADDR_neigh_connected_output
#define APP_WRAPPER_FOR_neigh_connected_output
#endif
 
#ifndef APP_WRAPPER_FOR_neigh_connected_output
#define APP_WRAPPER_FOR_neigh_connected_output
FUNCTION_WRAPPER(neigh_connected_output, (struct neighbour *neigh, struct sk_buff *skb), {
    WRAP_RECURSIVE(neigh);
    TRACES_IF_WATCHPOINT(neigh);
    SCAN_HEAD_FUNC(struct neighbour)(*(TO_UNWATCHED_ADDRESS(neigh)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("neigh_connected_output is invoked.\n");
    PRE_WRAPPER_FUNC(neigh, skb);
    int ret = neigh_connected_output(neigh, skb);
    POST_WRAPPER_FUNC(neigh, skb);
    kern_printk("neigh_connected_output returned.\n");
    TRACES_IF_WATCHPOINT(neigh);
    SCAN_HEAD_FUNC(struct neighbour)(*(TO_UNWATCHED_ADDRESS(neigh)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_crypto_unregister_alg
#define APP_WRAPPER_FOR_crypto_unregister_alg
#endif
 
#ifndef APP_WRAPPER_FOR_crypto_unregister_alg
#define APP_WRAPPER_FOR_crypto_unregister_alg
FUNCTION_WRAPPER(crypto_unregister_alg, (struct crypto_alg *alg), {
    WRAP_RECURSIVE(alg);
    TRACES_IF_WATCHPOINT(alg);
    SCAN_HEAD_FUNC(struct crypto_alg)(*(TO_UNWATCHED_ADDRESS(alg)));
    kern_printk("crypto_unregister_alg is invoked.\n");
    PRE_WRAPPER_FUNC(alg);
    int ret = crypto_unregister_alg(alg);
    POST_WRAPPER_FUNC(alg);
    kern_printk("crypto_unregister_alg returned.\n");
    TRACES_IF_WATCHPOINT(alg);
    SCAN_HEAD_FUNC(struct crypto_alg)(*(TO_UNWATCHED_ADDRESS(alg)));
    return ret;
})
#endif


#ifndef KERN_ADDR___mmdrop
#define APP_WRAPPER_FOR___mmdrop
#endif
 
#ifndef APP_WRAPPER_FOR___mmdrop
#define APP_WRAPPER_FOR___mmdrop
FUNCTION_WRAPPER_VOID(__mmdrop, (struct mm_struct *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__mmdrop is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    __mmdrop(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__mmdrop returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_module_kallsyms_lookup_name
#define APP_WRAPPER_FOR_module_kallsyms_lookup_name
#endif
 
#ifndef APP_WRAPPER_FOR_module_kallsyms_lookup_name
#define APP_WRAPPER_FOR_module_kallsyms_lookup_name
FUNCTION_WRAPPER(module_kallsyms_lookup_name, (const char *name), {
    kern_printk("module_kallsyms_lookup_name is invoked.\n");
    PRE_WRAPPER_FUNC(name);
    long ret = module_kallsyms_lookup_name(name);
    POST_WRAPPER_FUNC(name);
    kern_printk("module_kallsyms_lookup_name returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_kvasprintf
#define APP_WRAPPER_FOR_kvasprintf
#endif
 
#ifndef APP_WRAPPER_FOR_kvasprintf
#define APP_WRAPPER_FOR_kvasprintf
FUNCTION_WRAPPER(kvasprintf, (gfp_t gfp, const char *fmt, va_list args), {
    kern_printk("kvasprintf is invoked.\n");
    PRE_WRAPPER_FUNC(gfp, fmt, args);
    char *ret = kvasprintf(gfp, fmt, args);
    POST_WRAPPER_FUNC(gfp, fmt, args);
    kern_printk("kvasprintf returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dentry_open
#define APP_WRAPPER_FOR_dentry_open
#endif
 
#ifndef APP_WRAPPER_FOR_dentry_open
#define APP_WRAPPER_FOR_dentry_open
FUNCTION_WRAPPER(dentry_open, (const struct path *_arg1, int _arg2, const struct cred *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(const struct cred)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("dentry_open is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    struct file *ret = dentry_open(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("dentry_open returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(const struct cred)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_copy_siginfo_from_user32
#define APP_WRAPPER_FOR_copy_siginfo_from_user32
#endif
 
#ifndef APP_WRAPPER_FOR_copy_siginfo_from_user32
#define APP_WRAPPER_FOR_copy_siginfo_from_user32
FUNCTION_WRAPPER(copy_siginfo_from_user32, (siginfo_t *to, struct compat_siginfo *from), {
    kern_printk("copy_siginfo_from_user32 is invoked.\n");
    PRE_WRAPPER_FUNC(to, from);
    int ret = copy_siginfo_from_user32(to, from);
    POST_WRAPPER_FUNC(to, from);
    kern_printk("copy_siginfo_from_user32 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_mp_ioapic_gsi_routing
#define APP_WRAPPER_FOR_mp_ioapic_gsi_routing
#endif
 
#ifndef APP_WRAPPER_FOR_mp_ioapic_gsi_routing
#define APP_WRAPPER_FOR_mp_ioapic_gsi_routing
FUNCTION_WRAPPER(mp_ioapic_gsi_routing, (int ioapic), {
    kern_printk("mp_ioapic_gsi_routing is invoked.\n");
    PRE_WRAPPER_FUNC(ioapic);
    struct mp_ioapic_gsi *ret = mp_ioapic_gsi_routing(ioapic);
    POST_WRAPPER_FUNC(ioapic);
    kern_printk("mp_ioapic_gsi_routing returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_kthread_create_on_node
#define APP_WRAPPER_FOR_kthread_create_on_node
#endif
 
#ifndef APP_WRAPPER_FOR_kthread_create_on_node
#define APP_WRAPPER_FOR_kthread_create_on_node
FUNCTION_WRAPPER(kthread_create_on_node, (int (*threadfn)(void *), void *data, int node, const char namefmt[], ...), {
    va_list args__;
    va_start(args__, namefmt);
    WRAP_FUNCTION(threadfn);
    // TODO: variadic arguments
    kern_printk("kthread_create_on_node is invoked.\n");
    PRE_WRAPPER_FUNC(threadfn, data, node, namefmt);
    struct task_struct *ret = kthread_create_on_node(threadfn, data, node, namefmt);
    POST_WRAPPER_FUNC(threadfn, data, node, namefmt);
    kern_printk("kthread_create_on_node returned.\n");
    va_end(args__);
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_phy_connect
#define APP_WRAPPER_FOR_phy_connect
#endif
 
#ifndef APP_WRAPPER_FOR_phy_connect
#define APP_WRAPPER_FOR_phy_connect
FUNCTION_WRAPPER(phy_connect, (struct net_device *dev, const char *bus_id, void (*handler)(struct net_device *), u32 flags, phy_interface_t interface), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_FUNCTION(handler);
    kern_printk("phy_connect is invoked.\n");
    PRE_WRAPPER_FUNC(dev, bus_id, handler, flags, interface);
    struct phy_device *ret = phy_connect(dev, bus_id, handler, flags, interface);
    POST_WRAPPER_FUNC(dev, bus_id, handler, flags, interface);
    kern_printk("phy_connect returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_signal_delivered
#define APP_WRAPPER_FOR_signal_delivered
#endif
 
#ifndef APP_WRAPPER_FOR_signal_delivered
#define APP_WRAPPER_FOR_signal_delivered
FUNCTION_WRAPPER_VOID(signal_delivered, (int sig, siginfo_t *info, struct k_sigaction *ka, struct pt_regs *regs, int stepping), {
    WRAP_RECURSIVE(ka);
    TRACES_IF_WATCHPOINT(ka);
    SCAN_HEAD_FUNC(struct k_sigaction)(*(TO_UNWATCHED_ADDRESS(ka)));
    kern_printk("signal_delivered is invoked.\n");
    PRE_WRAPPER_FUNC(sig, info, ka, regs, stepping);
    signal_delivered(sig, info, ka, regs, stepping);
    POST_WRAPPER_FUNC(sig, info, ka, regs, stepping);
    kern_printk("signal_delivered returned.\n");
    TRACES_IF_WATCHPOINT(ka);
    SCAN_HEAD_FUNC(struct k_sigaction)(*(TO_UNWATCHED_ADDRESS(ka)));
})
#endif


#ifndef KERN_ADDR_bio_map_kern
#define APP_WRAPPER_FOR_bio_map_kern
#endif
 
#ifndef APP_WRAPPER_FOR_bio_map_kern
#define APP_WRAPPER_FOR_bio_map_kern
FUNCTION_WRAPPER(bio_map_kern, (struct request_queue *_arg1, void *_arg2, unsigned int _arg3, gfp_t _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bio_map_kern is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    struct bio *ret = bio_map_kern(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("bio_map_kern returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_queue_dma_drain
#define APP_WRAPPER_FOR_blk_queue_dma_drain
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_dma_drain
#define APP_WRAPPER_FOR_blk_queue_dma_drain
FUNCTION_WRAPPER(blk_queue_dma_drain, (struct request_queue *q, dma_drain_needed_fn *dma_drain_needed, void *buf, unsigned int size), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    WRAP_FUNCTION(dma_drain_needed);
    kern_printk("blk_queue_dma_drain is invoked.\n");
    PRE_WRAPPER_FUNC(q, dma_drain_needed, buf, size);
    int ret = blk_queue_dma_drain(q, dma_drain_needed, buf, size);
    POST_WRAPPER_FUNC(q, dma_drain_needed, buf, size);
    kern_printk("blk_queue_dma_drain returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kset_find_obj
#define APP_WRAPPER_FOR_kset_find_obj
#endif
 
#ifndef APP_WRAPPER_FOR_kset_find_obj
#define APP_WRAPPER_FOR_kset_find_obj
FUNCTION_WRAPPER(kset_find_obj, (struct kset *_arg1, const char *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kset)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("kset_find_obj is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct kobject *ret = kset_find_obj(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("kset_find_obj returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kset)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_set_security_override
#define APP_WRAPPER_FOR_set_security_override
#endif
 
#ifndef APP_WRAPPER_FOR_set_security_override
#define APP_WRAPPER_FOR_set_security_override
FUNCTION_WRAPPER(set_security_override, (struct cred *_arg1, u32 _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct cred)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("set_security_override is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = set_security_override(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("set_security_override returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct cred)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_notify_change
#define APP_WRAPPER_FOR_notify_change
#endif
 
#ifndef APP_WRAPPER_FOR_notify_change
#define APP_WRAPPER_FOR_notify_change
FUNCTION_WRAPPER(notify_change, (struct dentry *_arg1, struct iattr *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct iattr)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("notify_change is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = notify_change(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("notify_change returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct iattr)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_bus_get_status
#define APP_WRAPPER_FOR_acpi_bus_get_status
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_bus_get_status
#define APP_WRAPPER_FOR_acpi_bus_get_status
FUNCTION_WRAPPER(acpi_bus_get_status, (struct acpi_device *device), {
    WRAP_RECURSIVE(device);
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(device)));
    kern_printk("acpi_bus_get_status is invoked.\n");
    PRE_WRAPPER_FUNC(device);
    int ret = acpi_bus_get_status(device);
    POST_WRAPPER_FUNC(device);
    kern_printk("acpi_bus_get_status returned.\n");
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(device)));
    return ret;
})
#endif


#ifndef KERN_ADDR_printk_sched
#define APP_WRAPPER_FOR_printk_sched
#endif
 
#ifndef APP_WRAPPER_FOR_printk_sched
#define APP_WRAPPER_FOR_printk_sched
FUNCTION_WRAPPER(printk_sched, (const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    // TODO: variadic arguments
    kern_printk("printk_sched is invoked.\n");
    PRE_WRAPPER_FUNC(fmt);
    int ret = printk_sched(fmt);
    POST_WRAPPER_FUNC(fmt);
    kern_printk("printk_sched returned.\n");
    va_end(args__);
    return ret;
})
#endif


#ifndef KERN_ADDR_swiotlb_map_page
#define APP_WRAPPER_FOR_swiotlb_map_page
#endif
 
#ifndef APP_WRAPPER_FOR_swiotlb_map_page
#define APP_WRAPPER_FOR_swiotlb_map_page
FUNCTION_WRAPPER(swiotlb_map_page, (struct device *dev, struct page *page, unsigned long offset, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("swiotlb_map_page is invoked.\n");
    PRE_WRAPPER_FUNC(dev, page, offset, size, dir, attrs);
    dma_addr_t ret = swiotlb_map_page(dev, page, offset, size, dir, attrs);
    POST_WRAPPER_FUNC(dev, page, offset, size, dir, attrs);
    kern_printk("swiotlb_map_page returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR___lock_page
#define APP_WRAPPER_FOR___lock_page
#endif
 
#ifndef APP_WRAPPER_FOR___lock_page
#define APP_WRAPPER_FOR___lock_page
FUNCTION_WRAPPER_VOID(__lock_page, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("__lock_page is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    __lock_page(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("__lock_page returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR___atomic_notifier_call_chain
#define APP_WRAPPER_FOR___atomic_notifier_call_chain
#endif
 
#ifndef APP_WRAPPER_FOR___atomic_notifier_call_chain
#define APP_WRAPPER_FOR___atomic_notifier_call_chain
FUNCTION_WRAPPER(__atomic_notifier_call_chain, (struct atomic_notifier_head *nh, unsigned long val, void *v, int nr_to_call, int *nr_calls), {
    WRAP_RECURSIVE(nh);
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct atomic_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    kern_printk("__atomic_notifier_call_chain is invoked.\n");
    PRE_WRAPPER_FUNC(nh, val, v, nr_to_call, nr_calls);
    int ret = __atomic_notifier_call_chain(nh, val, v, nr_to_call, nr_calls);
    POST_WRAPPER_FUNC(nh, val, v, nr_to_call, nr_calls);
    kern_printk("__atomic_notifier_call_chain returned.\n");
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct atomic_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    return ret;
})
#endif


#ifndef KERN_ADDR_lookup_address
#define APP_WRAPPER_FOR_lookup_address
#endif
 
#ifndef APP_WRAPPER_FOR_lookup_address
#define APP_WRAPPER_FOR_lookup_address
FUNCTION_WRAPPER(lookup_address, (unsigned long address, unsigned int *level), {
    kern_printk("lookup_address is invoked.\n");
    PRE_WRAPPER_FUNC(address, level);
    pte_t *ret = lookup_address(address, level);
    POST_WRAPPER_FUNC(address, level);
    kern_printk("lookup_address returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sata_scr_write
#define APP_WRAPPER_FOR_sata_scr_write
#endif
 
#ifndef APP_WRAPPER_FOR_sata_scr_write
#define APP_WRAPPER_FOR_sata_scr_write
FUNCTION_WRAPPER(sata_scr_write, (struct ata_link *link, int reg, u32 val), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    kern_printk("sata_scr_write is invoked.\n");
    PRE_WRAPPER_FUNC(link, reg, val);
    int ret = sata_scr_write(link, reg, val);
    POST_WRAPPER_FUNC(link, reg, val);
    kern_printk("sata_scr_write returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    return ret;
})
#endif


#ifndef KERN_ADDR_put_compat_rusage
#define APP_WRAPPER_FOR_put_compat_rusage
#endif
 
#ifndef APP_WRAPPER_FOR_put_compat_rusage
#define APP_WRAPPER_FOR_put_compat_rusage
FUNCTION_WRAPPER(put_compat_rusage, (const struct rusage *_arg1, struct compat_rusage *_arg2), {
    kern_printk("put_compat_rusage is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = put_compat_rusage(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("put_compat_rusage returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_unregister_queue
#define APP_WRAPPER_FOR_blk_unregister_queue
#endif
 
#ifndef APP_WRAPPER_FOR_blk_unregister_queue
#define APP_WRAPPER_FOR_blk_unregister_queue
FUNCTION_WRAPPER_VOID(blk_unregister_queue, (struct gendisk *disk), {
    WRAP_RECURSIVE(disk);
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    kern_printk("blk_unregister_queue is invoked.\n");
    PRE_WRAPPER_FUNC(disk);
    blk_unregister_queue(disk);
    POST_WRAPPER_FUNC(disk);
    kern_printk("blk_unregister_queue returned.\n");
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
})
#endif


#ifndef KERN_ADDR_scsi_host_get
#define APP_WRAPPER_FOR_scsi_host_get
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_host_get
#define APP_WRAPPER_FOR_scsi_host_get
FUNCTION_WRAPPER(scsi_host_get, (struct Scsi_Host *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("scsi_host_get is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct Scsi_Host *ret = scsi_host_get(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("scsi_host_get returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_mp_config_acpi_legacy_irqs
#define APP_WRAPPER_FOR_mp_config_acpi_legacy_irqs
#endif
 
#ifndef APP_WRAPPER_FOR_mp_config_acpi_legacy_irqs
#define APP_WRAPPER_FOR_mp_config_acpi_legacy_irqs
FUNCTION_WRAPPER_VOID(mp_config_acpi_legacy_irqs, (), {
    kern_printk("mp_config_acpi_legacy_irqs is invoked.\n");
    PRE_WRAPPER_FUNC();
    mp_config_acpi_legacy_irqs();
    POST_WRAPPER_FUNC();
    kern_printk("mp_config_acpi_legacy_irqs returned.\n");
})
#endif


#ifndef KERN_ADDR_dev_uc_sync
#define APP_WRAPPER_FOR_dev_uc_sync
#endif
 
#ifndef APP_WRAPPER_FOR_dev_uc_sync
#define APP_WRAPPER_FOR_dev_uc_sync
FUNCTION_WRAPPER(dev_uc_sync, (struct net_device *to, struct net_device *from), {
    WRAP_RECURSIVE(to);
    TRACES_IF_WATCHPOINT(to);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(to)));
    WRAP_RECURSIVE(from);
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(from)));
    kern_printk("dev_uc_sync is invoked.\n");
    PRE_WRAPPER_FUNC(to, from);
    int ret = dev_uc_sync(to, from);
    POST_WRAPPER_FUNC(to, from);
    kern_printk("dev_uc_sync returned.\n");
    TRACES_IF_WATCHPOINT(to);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(to)));
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(from)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bh_submit_read
#define APP_WRAPPER_FOR_bh_submit_read
#endif
 
#ifndef APP_WRAPPER_FOR_bh_submit_read
#define APP_WRAPPER_FOR_bh_submit_read
FUNCTION_WRAPPER(bh_submit_read, (struct buffer_head *bh), {
    WRAP_RECURSIVE(bh);
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    kern_printk("bh_submit_read is invoked.\n");
    PRE_WRAPPER_FUNC(bh);
    int ret = bh_submit_read(bh);
    POST_WRAPPER_FUNC(bh);
    kern_printk("bh_submit_read returned.\n");
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    return ret;
})
#endif


#ifndef KERN_ADDR_send_sigio
#define APP_WRAPPER_FOR_send_sigio
#endif
 
#ifndef APP_WRAPPER_FOR_send_sigio
#define APP_WRAPPER_FOR_send_sigio
FUNCTION_WRAPPER_VOID(send_sigio, (struct fown_struct *fown, int fd, int band), {
    WRAP_RECURSIVE(fown);
    TRACES_IF_WATCHPOINT(fown);
    SCAN_HEAD_FUNC(struct fown_struct)(*(TO_UNWATCHED_ADDRESS(fown)));
    kern_printk("send_sigio is invoked.\n");
    PRE_WRAPPER_FUNC(fown, fd, band);
    send_sigio(fown, fd, band);
    POST_WRAPPER_FUNC(fown, fd, band);
    kern_printk("send_sigio returned.\n");
    TRACES_IF_WATCHPOINT(fown);
    SCAN_HEAD_FUNC(struct fown_struct)(*(TO_UNWATCHED_ADDRESS(fown)));
})
#endif


#ifndef KERN_ADDR_simple_fill_super
#define APP_WRAPPER_FOR_simple_fill_super
#endif
 
#ifndef APP_WRAPPER_FOR_simple_fill_super
#define APP_WRAPPER_FOR_simple_fill_super
FUNCTION_WRAPPER(simple_fill_super, (struct super_block *_arg1, unsigned long _arg2, struct tree_descr *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct tree_descr)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("simple_fill_super is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = simple_fill_super(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("simple_fill_super returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct tree_descr)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_override_creds
#define APP_WRAPPER_FOR_override_creds
#endif
 
#ifndef APP_WRAPPER_FOR_override_creds
#define APP_WRAPPER_FOR_override_creds
FUNCTION_WRAPPER(override_creds, (const struct cred *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct cred)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("override_creds is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    const struct cred *ret = override_creds(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("override_creds returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct cred)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_subsys_dev_iter_exit
#define APP_WRAPPER_FOR_subsys_dev_iter_exit
#endif
 
#ifndef APP_WRAPPER_FOR_subsys_dev_iter_exit
#define APP_WRAPPER_FOR_subsys_dev_iter_exit
FUNCTION_WRAPPER_VOID(subsys_dev_iter_exit, (struct subsys_dev_iter *iter), {
    WRAP_RECURSIVE(iter);
    TRACES_IF_WATCHPOINT(iter);
    SCAN_HEAD_FUNC(struct subsys_dev_iter)(*(TO_UNWATCHED_ADDRESS(iter)));
    kern_printk("subsys_dev_iter_exit is invoked.\n");
    PRE_WRAPPER_FUNC(iter);
    subsys_dev_iter_exit(iter);
    POST_WRAPPER_FUNC(iter);
    kern_printk("subsys_dev_iter_exit returned.\n");
    TRACES_IF_WATCHPOINT(iter);
    SCAN_HEAD_FUNC(struct subsys_dev_iter)(*(TO_UNWATCHED_ADDRESS(iter)));
})
#endif


#ifndef KERN_ADDR_jbd2_alloc
#define APP_WRAPPER_FOR_jbd2_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_alloc
#define APP_WRAPPER_FOR_jbd2_alloc
FUNCTION_WRAPPER(jbd2_alloc, (size_t size, gfp_t flags), {
    kern_printk("jbd2_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(size, flags);
    void *ret = jbd2_alloc(size, flags);
    POST_WRAPPER_FUNC(size, flags);
    kern_printk("jbd2_alloc returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dma_pin_iovec_pages
#define APP_WRAPPER_FOR_dma_pin_iovec_pages
#endif
 
#ifndef APP_WRAPPER_FOR_dma_pin_iovec_pages
#define APP_WRAPPER_FOR_dma_pin_iovec_pages
FUNCTION_WRAPPER(dma_pin_iovec_pages, (struct iovec *iov, size_t len), {
    kern_printk("dma_pin_iovec_pages is invoked.\n");
    PRE_WRAPPER_FUNC(iov, len);
    struct dma_pinned_list *ret = dma_pin_iovec_pages(iov, len);
    POST_WRAPPER_FUNC(iov, len);
    kern_printk("dma_pin_iovec_pages returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_schedule_timeout_uninterruptible
#define APP_WRAPPER_FOR_schedule_timeout_uninterruptible
#endif
 
#ifndef APP_WRAPPER_FOR_schedule_timeout_uninterruptible
#define APP_WRAPPER_FOR_schedule_timeout_uninterruptible
FUNCTION_WRAPPER(schedule_timeout_uninterruptible, (signed long timeout), {
    kern_printk("schedule_timeout_uninterruptible is invoked.\n");
    PRE_WRAPPER_FUNC(timeout);
    long ret = schedule_timeout_uninterruptible(timeout);
    POST_WRAPPER_FUNC(timeout);
    kern_printk("schedule_timeout_uninterruptible returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_activate
#define APP_WRAPPER_FOR_dev_activate
#endif
 
#ifndef APP_WRAPPER_FOR_dev_activate
#define APP_WRAPPER_FOR_dev_activate
FUNCTION_WRAPPER_VOID(dev_activate, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_activate is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    dev_activate(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_activate returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_napi_gro_frags
#define APP_WRAPPER_FOR_napi_gro_frags
#endif
 
#ifndef APP_WRAPPER_FOR_napi_gro_frags
#define APP_WRAPPER_FOR_napi_gro_frags
FUNCTION_WRAPPER(napi_gro_frags, (struct napi_struct *napi), {
    WRAP_RECURSIVE(napi);
    TRACES_IF_WATCHPOINT(napi);
    SCAN_HEAD_FUNC(struct napi_struct)(*(TO_UNWATCHED_ADDRESS(napi)));
    kern_printk("napi_gro_frags is invoked.\n");
    PRE_WRAPPER_FUNC(napi);
    gro_result_t ret = napi_gro_frags(napi);
    POST_WRAPPER_FUNC(napi);
    kern_printk("napi_gro_frags returned.\n");
    TRACES_IF_WATCHPOINT(napi);
    SCAN_HEAD_FUNC(struct napi_struct)(*(TO_UNWATCHED_ADDRESS(napi)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_set_pages_uc
#define APP_WRAPPER_FOR_set_pages_uc
#endif
 
#ifndef APP_WRAPPER_FOR_set_pages_uc
#define APP_WRAPPER_FOR_set_pages_uc
FUNCTION_WRAPPER(set_pages_uc, (struct page *page, int numpages), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("set_pages_uc is invoked.\n");
    PRE_WRAPPER_FUNC(page, numpages);
    int ret = set_pages_uc(page, numpages);
    POST_WRAPPER_FUNC(page, numpages);
    kern_printk("set_pages_uc returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_part_stat_show
#define APP_WRAPPER_FOR_part_stat_show
#endif
 
#ifndef APP_WRAPPER_FOR_part_stat_show
#define APP_WRAPPER_FOR_part_stat_show
FUNCTION_WRAPPER(part_stat_show, (struct device *dev, struct device_attribute *attr, char *buf), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(attr);
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(struct device_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    kern_printk("part_stat_show is invoked.\n");
    PRE_WRAPPER_FUNC(dev, attr, buf);
    ssize_t ret = part_stat_show(dev, attr, buf);
    POST_WRAPPER_FUNC(dev, attr, buf);
    kern_printk("part_stat_show returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(struct device_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    return ret;
})
#endif


#ifndef KERN_ADDR_timekeeping_inject_sleeptime
#define APP_WRAPPER_FOR_timekeeping_inject_sleeptime
#endif
 
#ifndef APP_WRAPPER_FOR_timekeeping_inject_sleeptime
#define APP_WRAPPER_FOR_timekeeping_inject_sleeptime
FUNCTION_WRAPPER_VOID(timekeeping_inject_sleeptime, (struct timespec *delta), {
    kern_printk("timekeeping_inject_sleeptime is invoked.\n");
    PRE_WRAPPER_FUNC(delta);
    timekeeping_inject_sleeptime(delta);
    POST_WRAPPER_FUNC(delta);
    kern_printk("timekeeping_inject_sleeptime returned.\n");
})
#endif


#ifndef KERN_ADDR_class_remove_file
#define APP_WRAPPER_FOR_class_remove_file
#endif
 
#ifndef APP_WRAPPER_FOR_class_remove_file
#define APP_WRAPPER_FOR_class_remove_file
FUNCTION_WRAPPER_VOID(class_remove_file, (struct class_ *class_, const struct class_attribute *attr), {
    WRAP_RECURSIVE(class_);
    TRACES_IF_WATCHPOINT(class_);
    SCAN_HEAD_FUNC(struct class_)(*(TO_UNWATCHED_ADDRESS(class_)));
    WRAP_RECURSIVE(attr);
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(const struct class_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    kern_printk("class_remove_file is invoked.\n");
    PRE_WRAPPER_FUNC(class_, attr);
    class_remove_file(class_, attr);
    POST_WRAPPER_FUNC(class_, attr);
    kern_printk("class_remove_file returned.\n");
    TRACES_IF_WATCHPOINT(class_);
    SCAN_HEAD_FUNC(struct class_)(*(TO_UNWATCHED_ADDRESS(class_)));
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(const struct class_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
})
#endif


#ifndef KERN_ADDR_blk_queue_prep_rq
#define APP_WRAPPER_FOR_blk_queue_prep_rq
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_prep_rq
#define APP_WRAPPER_FOR_blk_queue_prep_rq
FUNCTION_WRAPPER_VOID(blk_queue_prep_rq, (struct request_queue *_arg1, prep_rq_fn *pfn), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_FUNCTION(pfn);
    kern_printk("blk_queue_prep_rq is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, pfn);
    blk_queue_prep_rq(_arg1, pfn);
    POST_WRAPPER_FUNC(_arg1, pfn);
    kern_printk("blk_queue_prep_rq returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_mnt_clone_write
#define APP_WRAPPER_FOR_mnt_clone_write
#endif
 
#ifndef APP_WRAPPER_FOR_mnt_clone_write
#define APP_WRAPPER_FOR_mnt_clone_write
FUNCTION_WRAPPER(mnt_clone_write, (struct vfsmount *mnt), {
    WRAP_RECURSIVE(mnt);
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
    kern_printk("mnt_clone_write is invoked.\n");
    PRE_WRAPPER_FUNC(mnt);
    int ret = mnt_clone_write(mnt);
    POST_WRAPPER_FUNC(mnt);
    kern_printk("mnt_clone_write returned.\n");
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mod_timer
#define APP_WRAPPER_FOR_mod_timer
#endif
 
#ifndef APP_WRAPPER_FOR_mod_timer
#define APP_WRAPPER_FOR_mod_timer
FUNCTION_WRAPPER(mod_timer, (struct timer_list *timer, unsigned long expires), {
    WRAP_RECURSIVE(timer);
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(timer)));
    kern_printk("mod_timer is invoked.\n");
    PRE_WRAPPER_FUNC(timer, expires);
    int ret = mod_timer(timer, expires);
    POST_WRAPPER_FUNC(timer, expires);
    kern_printk("mod_timer returned.\n");
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(timer)));
    return ret;
})
#endif


#ifndef KERN_ADDR_locks_end_grace
#define APP_WRAPPER_FOR_locks_end_grace
#endif
 
#ifndef APP_WRAPPER_FOR_locks_end_grace
#define APP_WRAPPER_FOR_locks_end_grace
FUNCTION_WRAPPER_VOID(locks_end_grace, (struct lock_manager *_arg1), {
    kern_printk("locks_end_grace is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    locks_end_grace(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("locks_end_grace returned.\n");
})
#endif


#ifndef KERN_ADDR_clockevents_register_notifier
#define APP_WRAPPER_FOR_clockevents_register_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_clockevents_register_notifier
#define APP_WRAPPER_FOR_clockevents_register_notifier
FUNCTION_WRAPPER(clockevents_register_notifier, (struct notifier_block *nb), {
    WRAP_RECURSIVE(nb);
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    kern_printk("clockevents_register_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(nb);
    int ret = clockevents_register_notifier(nb);
    POST_WRAPPER_FUNC(nb);
    kern_printk("clockevents_register_notifier returned.\n");
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_set_prepare_sleep
#define APP_WRAPPER_FOR_acpi_os_set_prepare_sleep
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_set_prepare_sleep
#define APP_WRAPPER_FOR_acpi_os_set_prepare_sleep
FUNCTION_WRAPPER_VOID(acpi_os_set_prepare_sleep, (int (*func)(u8, u32, u32)), {
    WRAP_FUNCTION(func);
    kern_printk("acpi_os_set_prepare_sleep is invoked.\n");
    PRE_WRAPPER_FUNC(func);
    acpi_os_set_prepare_sleep(func);
    POST_WRAPPER_FUNC(func);
    kern_printk("acpi_os_set_prepare_sleep returned.\n");
})
#endif


#ifndef KERN_ADDR_dev_load
#define APP_WRAPPER_FOR_dev_load
#endif
 
#ifndef APP_WRAPPER_FOR_dev_load
#define APP_WRAPPER_FOR_dev_load
FUNCTION_WRAPPER_VOID(dev_load, (struct net *net, const char *name), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    kern_printk("dev_load is invoked.\n");
    PRE_WRAPPER_FUNC(net, name);
    dev_load(net, name);
    POST_WRAPPER_FUNC(net, name);
    kern_printk("dev_load returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
})
#endif


#ifndef KERN_ADDR_do_exit
#define APP_WRAPPER_FOR_do_exit
#endif
 
#ifndef APP_WRAPPER_FOR_do_exit
#define APP_WRAPPER_FOR_do_exit
FUNCTION_WRAPPER_VOID(do_exit, (long error_code), {
    kern_printk("do_exit is invoked.\n");
    PRE_WRAPPER_FUNC(error_code);
    do_exit(error_code);
    POST_WRAPPER_FUNC(error_code);
    kern_printk("do_exit returned.\n");
})
#endif


#ifndef KERN_ADDR_blkdev_issue_write_same
#define APP_WRAPPER_FOR_blkdev_issue_write_same
#endif
 
#ifndef APP_WRAPPER_FOR_blkdev_issue_write_same
#define APP_WRAPPER_FOR_blkdev_issue_write_same
FUNCTION_WRAPPER(blkdev_issue_write_same, (struct block_device *bdev, sector_t sector, sector_t nr_sects, gfp_t gfp_mask, struct page *page), {
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("blkdev_issue_write_same is invoked.\n");
    PRE_WRAPPER_FUNC(bdev, sector, nr_sects, gfp_mask, page);
    int ret = blkdev_issue_write_same(bdev, sector, nr_sects, gfp_mask, page);
    POST_WRAPPER_FUNC(bdev, sector, nr_sects, gfp_mask, page);
    kern_printk("blkdev_issue_write_same returned.\n");
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_freeze_workqueues_busy
#define APP_WRAPPER_FOR_freeze_workqueues_busy
#endif
 
#ifndef APP_WRAPPER_FOR_freeze_workqueues_busy
#define APP_WRAPPER_FOR_freeze_workqueues_busy
FUNCTION_WRAPPER(freeze_workqueues_busy, (), {
    kern_printk("freeze_workqueues_busy is invoked.\n");
    PRE_WRAPPER_FUNC();
    bool ret = freeze_workqueues_busy();
    POST_WRAPPER_FUNC();
    kern_printk("freeze_workqueues_busy returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_pselect6
#define APP_WRAPPER_FOR_compat_sys_pselect6
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_pselect6
#define APP_WRAPPER_FOR_compat_sys_pselect6
FUNCTION_WRAPPER(compat_sys_pselect6, (int n, compat_ulong_t *inp, compat_ulong_t *outp, compat_ulong_t *exp, struct compat_timespec *tsp, void *sig), {
    kern_printk("compat_sys_pselect6 is invoked.\n");
    PRE_WRAPPER_FUNC(n, inp, outp, exp, tsp, sig);
    long ret = compat_sys_pselect6(n, inp, outp, exp, tsp, sig);
    POST_WRAPPER_FUNC(n, inp, outp, exp, tsp, sig);
    kern_printk("compat_sys_pselect6 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_tcf_destroy
#define APP_WRAPPER_FOR_tcf_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_tcf_destroy
#define APP_WRAPPER_FOR_tcf_destroy
FUNCTION_WRAPPER_VOID(tcf_destroy, (struct tcf_proto *tp), {
    WRAP_RECURSIVE(tp);
    TRACES_IF_WATCHPOINT(tp);
    SCAN_HEAD_FUNC(struct tcf_proto)(*(TO_UNWATCHED_ADDRESS(tp)));
    kern_printk("tcf_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(tp);
    tcf_destroy(tp);
    POST_WRAPPER_FUNC(tp);
    kern_printk("tcf_destroy returned.\n");
    TRACES_IF_WATCHPOINT(tp);
    SCAN_HEAD_FUNC(struct tcf_proto)(*(TO_UNWATCHED_ADDRESS(tp)));
})
#endif


#ifndef KERN_ADDR___node_distance
#define APP_WRAPPER_FOR___node_distance
#endif
 
#ifndef APP_WRAPPER_FOR___node_distance
#define APP_WRAPPER_FOR___node_distance
FUNCTION_WRAPPER(__node_distance, (int _arg1, int _arg2), {
    kern_printk("__node_distance is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = __node_distance(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("__node_distance returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_twsk_alloc
#define APP_WRAPPER_FOR_inet_twsk_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_inet_twsk_alloc
#define APP_WRAPPER_FOR_inet_twsk_alloc
FUNCTION_WRAPPER(inet_twsk_alloc, (const struct sock *sk, const int state), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(const struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("inet_twsk_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(sk, state);
    struct inet_timewait_sock *ret = inet_twsk_alloc(sk, state);
    POST_WRAPPER_FUNC(sk, state);
    kern_printk("inet_twsk_alloc returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(const struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_register_acpi_bus_notifier
#define APP_WRAPPER_FOR_register_acpi_bus_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_register_acpi_bus_notifier
#define APP_WRAPPER_FOR_register_acpi_bus_notifier
FUNCTION_WRAPPER(register_acpi_bus_notifier, (struct notifier_block *nb), {
    WRAP_RECURSIVE(nb);
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    kern_printk("register_acpi_bus_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(nb);
    int ret = register_acpi_bus_notifier(nb);
    POST_WRAPPER_FUNC(nb);
    kern_printk("register_acpi_bus_notifier returned.\n");
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dirty_ratio_handler
#define APP_WRAPPER_FOR_dirty_ratio_handler
#endif
 
#ifndef APP_WRAPPER_FOR_dirty_ratio_handler
#define APP_WRAPPER_FOR_dirty_ratio_handler
FUNCTION_WRAPPER(dirty_ratio_handler, (struct ctl_table *table, int write, void *buffer, size_t *lenp, loff_t *ppos), {
    WRAP_RECURSIVE(table);
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    kern_printk("dirty_ratio_handler is invoked.\n");
    PRE_WRAPPER_FUNC(table, write, buffer, lenp, ppos);
    int ret = dirty_ratio_handler(table, write, buffer, lenp, ppos);
    POST_WRAPPER_FUNC(table, write, buffer, lenp, ppos);
    kern_printk("dirty_ratio_handler returned.\n");
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ptep_clear_flush
#define APP_WRAPPER_FOR_ptep_clear_flush
#endif
 
#ifndef APP_WRAPPER_FOR_ptep_clear_flush
#define APP_WRAPPER_FOR_ptep_clear_flush
FUNCTION_WRAPPER(ptep_clear_flush, (struct vm_area_struct *vma, unsigned long address, pte_t *ptep), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("ptep_clear_flush is invoked.\n");
    PRE_WRAPPER_FUNC(vma, address, ptep);
    pte_t ret = ptep_clear_flush(vma, address, ptep);
    POST_WRAPPER_FUNC(vma, address, ptep);
    kern_printk("ptep_clear_flush returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pcix_set_mmrbc
#define APP_WRAPPER_FOR_pcix_set_mmrbc
#endif
 
#ifndef APP_WRAPPER_FOR_pcix_set_mmrbc
#define APP_WRAPPER_FOR_pcix_set_mmrbc
FUNCTION_WRAPPER(pcix_set_mmrbc, (struct pci_dev *dev, int mmrbc), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pcix_set_mmrbc is invoked.\n");
    PRE_WRAPPER_FUNC(dev, mmrbc);
    int ret = pcix_set_mmrbc(dev, mmrbc);
    POST_WRAPPER_FUNC(dev, mmrbc);
    kern_printk("pcix_set_mmrbc returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_machine_emergency_restart
#define APP_WRAPPER_FOR_machine_emergency_restart
#endif
 
#ifndef APP_WRAPPER_FOR_machine_emergency_restart
#define APP_WRAPPER_FOR_machine_emergency_restart
FUNCTION_WRAPPER_VOID(machine_emergency_restart, (), {
    kern_printk("machine_emergency_restart is invoked.\n");
    PRE_WRAPPER_FUNC();
    machine_emergency_restart();
    POST_WRAPPER_FUNC();
    kern_printk("machine_emergency_restart returned.\n");
})
#endif


#ifndef KERN_ADDR_bitmap_onto
#define APP_WRAPPER_FOR_bitmap_onto
#endif
 
#ifndef APP_WRAPPER_FOR_bitmap_onto
#define APP_WRAPPER_FOR_bitmap_onto
FUNCTION_WRAPPER_VOID(bitmap_onto, (unsigned long *dst, unsigned const long *orig, unsigned const long *relmap, int bits), {
    kern_printk("bitmap_onto is invoked.\n");
    PRE_WRAPPER_FUNC(dst, orig, relmap, bits);
    bitmap_onto(dst, orig, relmap, bits);
    POST_WRAPPER_FUNC(dst, orig, relmap, bits);
    kern_printk("bitmap_onto returned.\n");
})
#endif


#ifndef KERN_ADDR_ata_msleep
#define APP_WRAPPER_FOR_ata_msleep
#endif
 
#ifndef APP_WRAPPER_FOR_ata_msleep
#define APP_WRAPPER_FOR_ata_msleep
FUNCTION_WRAPPER_VOID(ata_msleep, (struct ata_port *ap, unsigned int msecs), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_msleep is invoked.\n");
    PRE_WRAPPER_FUNC(ap, msecs);
    ata_msleep(ap, msecs);
    POST_WRAPPER_FUNC(ap, msecs);
    kern_printk("ata_msleep returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_pm_qos_add_request
#define APP_WRAPPER_FOR_pm_qos_add_request
#endif
 
#ifndef APP_WRAPPER_FOR_pm_qos_add_request
#define APP_WRAPPER_FOR_pm_qos_add_request
FUNCTION_WRAPPER_VOID(pm_qos_add_request, (struct pm_qos_request *req, int pm_qos_class, s32 value), {
    WRAP_RECURSIVE(req);
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct pm_qos_request)(*(TO_UNWATCHED_ADDRESS(req)));
    kern_printk("pm_qos_add_request is invoked.\n");
    PRE_WRAPPER_FUNC(req, pm_qos_class, value);
    pm_qos_add_request(req, pm_qos_class, value);
    POST_WRAPPER_FUNC(req, pm_qos_class, value);
    kern_printk("pm_qos_add_request returned.\n");
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct pm_qos_request)(*(TO_UNWATCHED_ADDRESS(req)));
})
#endif


#ifndef KERN_ADDR_acpi_check_resource_conflict
#define APP_WRAPPER_FOR_acpi_check_resource_conflict
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_check_resource_conflict
#define APP_WRAPPER_FOR_acpi_check_resource_conflict
FUNCTION_WRAPPER(acpi_check_resource_conflict, (const struct resource *res), {
    kern_printk("acpi_check_resource_conflict is invoked.\n");
    PRE_WRAPPER_FUNC(res);
    int ret = acpi_check_resource_conflict(res);
    POST_WRAPPER_FUNC(res);
    kern_printk("acpi_check_resource_conflict returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_bdi_has_dirty_io
#define APP_WRAPPER_FOR_bdi_has_dirty_io
#endif
 
#ifndef APP_WRAPPER_FOR_bdi_has_dirty_io
#define APP_WRAPPER_FOR_bdi_has_dirty_io
FUNCTION_WRAPPER(bdi_has_dirty_io, (struct backing_dev_info *bdi), {
    WRAP_RECURSIVE(bdi);
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
    kern_printk("bdi_has_dirty_io is invoked.\n");
    PRE_WRAPPER_FUNC(bdi);
    int ret = bdi_has_dirty_io(bdi);
    POST_WRAPPER_FUNC(bdi);
    kern_printk("bdi_has_dirty_io returned.\n");
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
    return ret;
})
#endif


#ifndef KERN_ADDR___netlink_change_ngroups
#define APP_WRAPPER_FOR___netlink_change_ngroups
#endif
 
#ifndef APP_WRAPPER_FOR___netlink_change_ngroups
#define APP_WRAPPER_FOR___netlink_change_ngroups
FUNCTION_WRAPPER(__netlink_change_ngroups, (struct sock *sk, unsigned int groups), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("__netlink_change_ngroups is invoked.\n");
    PRE_WRAPPER_FUNC(sk, groups);
    int ret = __netlink_change_ngroups(sk, groups);
    POST_WRAPPER_FUNC(sk, groups);
    kern_printk("__netlink_change_ngroups returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_param_get_bool
#define APP_WRAPPER_FOR_param_get_bool
#endif
 
#ifndef APP_WRAPPER_FOR_param_get_bool
#define APP_WRAPPER_FOR_param_get_bool
FUNCTION_WRAPPER(param_get_bool, (char *buffer, const struct kernel_param *kp), {
    WRAP_RECURSIVE(kp);
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    kern_printk("param_get_bool is invoked.\n");
    PRE_WRAPPER_FUNC(buffer, kp);
    int ret = param_get_bool(buffer, kp);
    POST_WRAPPER_FUNC(buffer, kp);
    kern_printk("param_get_bool returned.\n");
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_dev_pm_detach
#define APP_WRAPPER_FOR_acpi_dev_pm_detach
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_dev_pm_detach
#define APP_WRAPPER_FOR_acpi_dev_pm_detach
FUNCTION_WRAPPER_VOID(acpi_dev_pm_detach, (struct device *dev, bool power_off), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("acpi_dev_pm_detach is invoked.\n");
    PRE_WRAPPER_FUNC(dev, power_off);
    acpi_dev_pm_detach(dev, power_off);
    POST_WRAPPER_FUNC(dev, power_off);
    kern_printk("acpi_dev_pm_detach returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_wmi_query_block
#define APP_WRAPPER_FOR_wmi_query_block
#endif
 
#ifndef APP_WRAPPER_FOR_wmi_query_block
#define APP_WRAPPER_FOR_wmi_query_block
FUNCTION_WRAPPER(wmi_query_block, (const char *guid, u8 instance, struct acpi_buffer *out), {
    kern_printk("wmi_query_block is invoked.\n");
    PRE_WRAPPER_FUNC(guid, instance, out);
    acpi_status ret = wmi_query_block(guid, instance, out);
    POST_WRAPPER_FUNC(guid, instance, out);
    kern_printk("wmi_query_block returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_paravirt_patch_default
#define APP_WRAPPER_FOR_paravirt_patch_default
#endif
 
#ifndef APP_WRAPPER_FOR_paravirt_patch_default
#define APP_WRAPPER_FOR_paravirt_patch_default
FUNCTION_WRAPPER(paravirt_patch_default, (u8 type, u16 clobbers, void *insnbuf, unsigned long addr, unsigned int len), {
    kern_printk("paravirt_patch_default is invoked.\n");
    PRE_WRAPPER_FUNC(type, clobbers, insnbuf, addr, len);
    int ret = paravirt_patch_default(type, clobbers, insnbuf, addr, len);
    POST_WRAPPER_FUNC(type, clobbers, insnbuf, addr, len);
    kern_printk("paravirt_patch_default returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_napi_gro_flush
#define APP_WRAPPER_FOR_napi_gro_flush
#endif
 
#ifndef APP_WRAPPER_FOR_napi_gro_flush
#define APP_WRAPPER_FOR_napi_gro_flush
FUNCTION_WRAPPER_VOID(napi_gro_flush, (struct napi_struct *napi, bool flush_old), {
    WRAP_RECURSIVE(napi);
    TRACES_IF_WATCHPOINT(napi);
    SCAN_HEAD_FUNC(struct napi_struct)(*(TO_UNWATCHED_ADDRESS(napi)));
    kern_printk("napi_gro_flush is invoked.\n");
    PRE_WRAPPER_FUNC(napi, flush_old);
    napi_gro_flush(napi, flush_old);
    POST_WRAPPER_FUNC(napi, flush_old);
    kern_printk("napi_gro_flush returned.\n");
    TRACES_IF_WATCHPOINT(napi);
    SCAN_HEAD_FUNC(struct napi_struct)(*(TO_UNWATCHED_ADDRESS(napi)));
})
#endif


#ifndef KERN_ADDR_match_int
#define APP_WRAPPER_FOR_match_int
#endif
 
#ifndef APP_WRAPPER_FOR_match_int
#define APP_WRAPPER_FOR_match_int
FUNCTION_WRAPPER(match_int, (substring_t *_arg1, int *result), {
    kern_printk("match_int is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, result);
    int ret = match_int(_arg1, result);
    POST_WRAPPER_FUNC(_arg1, result);
    kern_printk("match_int returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_rcu_idle_exit
#define APP_WRAPPER_FOR_rcu_idle_exit
#endif
 
#ifndef APP_WRAPPER_FOR_rcu_idle_exit
#define APP_WRAPPER_FOR_rcu_idle_exit
FUNCTION_WRAPPER_VOID(rcu_idle_exit, (), {
    kern_printk("rcu_idle_exit is invoked.\n");
    PRE_WRAPPER_FUNC();
    rcu_idle_exit();
    POST_WRAPPER_FUNC();
    kern_printk("rcu_idle_exit returned.\n");
})
#endif


#ifndef KERN_ADDR_mb_cache_shrink
#define APP_WRAPPER_FOR_mb_cache_shrink
#endif
 
#ifndef APP_WRAPPER_FOR_mb_cache_shrink
#define APP_WRAPPER_FOR_mb_cache_shrink
FUNCTION_WRAPPER_VOID(mb_cache_shrink, (struct block_device *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("mb_cache_shrink is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    mb_cache_shrink(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("mb_cache_shrink returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_ktime_get_boottime
#define APP_WRAPPER_FOR_ktime_get_boottime
#endif
 
#ifndef APP_WRAPPER_FOR_ktime_get_boottime
#define APP_WRAPPER_FOR_ktime_get_boottime
FUNCTION_WRAPPER(ktime_get_boottime, (), {
    kern_printk("ktime_get_boottime is invoked.\n");
    PRE_WRAPPER_FUNC();
    ktime_t ret = ktime_get_boottime();
    POST_WRAPPER_FUNC();
    kern_printk("ktime_get_boottime returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_qc_complete_multiple
#define APP_WRAPPER_FOR_ata_qc_complete_multiple
#endif
 
#ifndef APP_WRAPPER_FOR_ata_qc_complete_multiple
#define APP_WRAPPER_FOR_ata_qc_complete_multiple
FUNCTION_WRAPPER(ata_qc_complete_multiple, (struct ata_port *ap, u32 qc_active), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_qc_complete_multiple is invoked.\n");
    PRE_WRAPPER_FUNC(ap, qc_active);
    int ret = ata_qc_complete_multiple(ap, qc_active);
    POST_WRAPPER_FUNC(ap, qc_active);
    kern_printk("ata_qc_complete_multiple returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_queue_softirq_done
#define APP_WRAPPER_FOR_blk_queue_softirq_done
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_softirq_done
#define APP_WRAPPER_FOR_blk_queue_softirq_done
FUNCTION_WRAPPER_VOID(blk_queue_softirq_done, (struct request_queue *_arg1, softirq_done_fn *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_FUNCTION(_arg2);
    kern_printk("blk_queue_softirq_done is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    blk_queue_softirq_done(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_queue_softirq_done returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_dma_find_channel
#define APP_WRAPPER_FOR_dma_find_channel
#endif
 
#ifndef APP_WRAPPER_FOR_dma_find_channel
#define APP_WRAPPER_FOR_dma_find_channel
FUNCTION_WRAPPER(dma_find_channel, (enum dma_transaction_type tx_type), {
    kern_printk("dma_find_channel is invoked.\n");
    PRE_WRAPPER_FUNC(tx_type);
    struct dma_chan *ret = dma_find_channel(tx_type);
    POST_WRAPPER_FUNC(tx_type);
    kern_printk("dma_find_channel returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_posix_acl_equiv_mode
#define APP_WRAPPER_FOR_posix_acl_equiv_mode
#endif
 
#ifndef APP_WRAPPER_FOR_posix_acl_equiv_mode
#define APP_WRAPPER_FOR_posix_acl_equiv_mode
FUNCTION_WRAPPER(posix_acl_equiv_mode, (const struct posix_acl *_arg1, umode_t *_arg2), {
    kern_printk("posix_acl_equiv_mode is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = posix_acl_equiv_mode(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("posix_acl_equiv_mode returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_cpumask_next_and
#define APP_WRAPPER_FOR_cpumask_next_and
#endif
 
#ifndef APP_WRAPPER_FOR_cpumask_next_and
#define APP_WRAPPER_FOR_cpumask_next_and
FUNCTION_WRAPPER(cpumask_next_and, (int n, const struct cpumask *_arg1, const struct cpumask *_arg2), {
    kern_printk("cpumask_next_and is invoked.\n");
    PRE_WRAPPER_FUNC(n, _arg1, _arg2);
    int ret = cpumask_next_and(n, _arg1, _arg2);
    POST_WRAPPER_FUNC(n, _arg1, _arg2);
    kern_printk("cpumask_next_and returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_smp_spurious_interrupt
#define APP_WRAPPER_FOR_smp_spurious_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_smp_spurious_interrupt
#define APP_WRAPPER_FOR_smp_spurious_interrupt
FUNCTION_WRAPPER_VOID(smp_spurious_interrupt, (struct pt_regs *_arg1), {
    kern_printk("smp_spurious_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    smp_spurious_interrupt(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("smp_spurious_interrupt returned.\n");
})
#endif


#ifndef KERN_ADDR___insert_inode_hash
#define APP_WRAPPER_FOR___insert_inode_hash
#endif
 
#ifndef APP_WRAPPER_FOR___insert_inode_hash
#define APP_WRAPPER_FOR___insert_inode_hash
FUNCTION_WRAPPER_VOID(__insert_inode_hash, (struct inode *_arg1, unsigned long hashval), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__insert_inode_hash is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, hashval);
    __insert_inode_hash(_arg1, hashval);
    POST_WRAPPER_FUNC(_arg1, hashval);
    kern_printk("__insert_inode_hash returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR__raw_spin_trylock_bh
#define APP_WRAPPER_FOR__raw_spin_trylock_bh
#endif
 
#ifndef APP_WRAPPER_FOR__raw_spin_trylock_bh
#define APP_WRAPPER_FOR__raw_spin_trylock_bh
FUNCTION_WRAPPER(_raw_spin_trylock_bh, (raw_spinlock_t *lock), {
    kern_printk("_raw_spin_trylock_bh is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    int ret = _raw_spin_trylock_bh(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("_raw_spin_trylock_bh returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_mq_timedreceive
#define APP_WRAPPER_FOR_compat_sys_mq_timedreceive
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_mq_timedreceive
#define APP_WRAPPER_FOR_compat_sys_mq_timedreceive
FUNCTION_WRAPPER(compat_sys_mq_timedreceive, (mqd_t mqdes, char *u_msg_ptr, size_t msg_len, unsigned int *u_msg_prio, const struct compat_timespec *u_abs_timeout), {
    kern_printk("compat_sys_mq_timedreceive is invoked.\n");
    PRE_WRAPPER_FUNC(mqdes, u_msg_ptr, msg_len, u_msg_prio, u_abs_timeout);
    ssize_t ret = compat_sys_mq_timedreceive(mqdes, u_msg_ptr, msg_len, u_msg_prio, u_abs_timeout);
    POST_WRAPPER_FUNC(mqdes, u_msg_ptr, msg_len, u_msg_prio, u_abs_timeout);
    kern_printk("compat_sys_mq_timedreceive returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_queue_update_dma_alignment
#define APP_WRAPPER_FOR_blk_queue_update_dma_alignment
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_update_dma_alignment
#define APP_WRAPPER_FOR_blk_queue_update_dma_alignment
FUNCTION_WRAPPER_VOID(blk_queue_update_dma_alignment, (struct request_queue *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_queue_update_dma_alignment is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    blk_queue_update_dma_alignment(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_queue_update_dma_alignment returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_scsi_unblock_requests
#define APP_WRAPPER_FOR_scsi_unblock_requests
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_unblock_requests
#define APP_WRAPPER_FOR_scsi_unblock_requests
FUNCTION_WRAPPER_VOID(scsi_unblock_requests, (struct Scsi_Host *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("scsi_unblock_requests is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    scsi_unblock_requests(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("scsi_unblock_requests returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_acpi_os_get_thread_id
#define APP_WRAPPER_FOR_acpi_os_get_thread_id
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_get_thread_id
#define APP_WRAPPER_FOR_acpi_os_get_thread_id
FUNCTION_WRAPPER(acpi_os_get_thread_id, (), {
    kern_printk("acpi_os_get_thread_id is invoked.\n");
    PRE_WRAPPER_FUNC();
    u64 ret = acpi_os_get_thread_id();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_os_get_thread_id returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_filemap_write_and_wait
#define APP_WRAPPER_FOR_filemap_write_and_wait
#endif
 
#ifndef APP_WRAPPER_FOR_filemap_write_and_wait
#define APP_WRAPPER_FOR_filemap_write_and_wait
FUNCTION_WRAPPER(filemap_write_and_wait, (struct address_space *mapping), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("filemap_write_and_wait is invoked.\n");
    PRE_WRAPPER_FUNC(mapping);
    int ret = filemap_write_and_wait(mapping);
    POST_WRAPPER_FUNC(mapping);
    kern_printk("filemap_write_and_wait returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sched_dead
#define APP_WRAPPER_FOR_sched_dead
#endif
 
#ifndef APP_WRAPPER_FOR_sched_dead
#define APP_WRAPPER_FOR_sched_dead
FUNCTION_WRAPPER_VOID(sched_dead, (struct task_struct *p), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("sched_dead is invoked.\n");
    PRE_WRAPPER_FUNC(p);
    sched_dead(p);
    POST_WRAPPER_FUNC(p);
    kern_printk("sched_dead returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
})
#endif


#ifndef KERN_ADDR_track_pfn_remap
#define APP_WRAPPER_FOR_track_pfn_remap
#endif
 
#ifndef APP_WRAPPER_FOR_track_pfn_remap
#define APP_WRAPPER_FOR_track_pfn_remap
FUNCTION_WRAPPER(track_pfn_remap, (struct vm_area_struct *vma, pgprot_t *prot, unsigned long pfn, unsigned long addr, unsigned long size), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("track_pfn_remap is invoked.\n");
    PRE_WRAPPER_FUNC(vma, prot, pfn, addr, size);
    int ret = track_pfn_remap(vma, prot, pfn, addr, size);
    POST_WRAPPER_FUNC(vma, prot, pfn, addr, size);
    kern_printk("track_pfn_remap returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_nla_reserve_nohdr
#define APP_WRAPPER_FOR_nla_reserve_nohdr
#endif
 
#ifndef APP_WRAPPER_FOR_nla_reserve_nohdr
#define APP_WRAPPER_FOR_nla_reserve_nohdr
FUNCTION_WRAPPER(nla_reserve_nohdr, (struct sk_buff *skb, int attrlen), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("nla_reserve_nohdr is invoked.\n");
    PRE_WRAPPER_FUNC(skb, attrlen);
    void *ret = nla_reserve_nohdr(skb, attrlen);
    POST_WRAPPER_FUNC(skb, attrlen);
    kern_printk("nla_reserve_nohdr returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_kthread_parkme
#define APP_WRAPPER_FOR_kthread_parkme
#endif
 
#ifndef APP_WRAPPER_FOR_kthread_parkme
#define APP_WRAPPER_FOR_kthread_parkme
FUNCTION_WRAPPER_VOID(kthread_parkme, (), {
    kern_printk("kthread_parkme is invoked.\n");
    PRE_WRAPPER_FUNC();
    kthread_parkme();
    POST_WRAPPER_FUNC();
    kern_printk("kthread_parkme returned.\n");
})
#endif


#ifndef KERN_ADDR_mempool_free
#define APP_WRAPPER_FOR_mempool_free
#endif
 
#ifndef APP_WRAPPER_FOR_mempool_free
#define APP_WRAPPER_FOR_mempool_free
FUNCTION_WRAPPER_VOID(mempool_free, (void *element, mempool_t *pool), {
    WRAP_RECURSIVE(pool);
    TRACES_IF_WATCHPOINT(pool);
    SCAN_HEAD_FUNC(mempool_t)(*(TO_UNWATCHED_ADDRESS(pool)));
    kern_printk("mempool_free is invoked.\n");
    PRE_WRAPPER_FUNC(element, pool);
    mempool_free(element, pool);
    POST_WRAPPER_FUNC(element, pool);
    kern_printk("mempool_free returned.\n");
    TRACES_IF_WATCHPOINT(pool);
    SCAN_HEAD_FUNC(mempool_t)(*(TO_UNWATCHED_ADDRESS(pool)));
})
#endif


#ifndef KERN_ADDR_unregister_hotplug_dock_device
#define APP_WRAPPER_FOR_unregister_hotplug_dock_device
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_hotplug_dock_device
#define APP_WRAPPER_FOR_unregister_hotplug_dock_device
FUNCTION_WRAPPER_VOID(unregister_hotplug_dock_device, (acpi_handle handle), {
    kern_printk("unregister_hotplug_dock_device is invoked.\n");
    PRE_WRAPPER_FUNC(handle);
    unregister_hotplug_dock_device(handle);
    POST_WRAPPER_FUNC(handle);
    kern_printk("unregister_hotplug_dock_device returned.\n");
})
#endif


#ifndef KERN_ADDR_mm_alloc
#define APP_WRAPPER_FOR_mm_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_mm_alloc
#define APP_WRAPPER_FOR_mm_alloc
FUNCTION_WRAPPER(mm_alloc, (), {
    kern_printk("mm_alloc is invoked.\n");
    PRE_WRAPPER_FUNC();
    struct mm_struct *ret = mm_alloc();
    POST_WRAPPER_FUNC();
    kern_printk("mm_alloc returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_nvs_for_each_region
#define APP_WRAPPER_FOR_acpi_nvs_for_each_region
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_nvs_for_each_region
#define APP_WRAPPER_FOR_acpi_nvs_for_each_region
FUNCTION_WRAPPER(acpi_nvs_for_each_region, (int (*func)(__u64, __u64, void *), void *data), {
    WRAP_FUNCTION(func);
    kern_printk("acpi_nvs_for_each_region is invoked.\n");
    PRE_WRAPPER_FUNC(func, data);
    int ret = acpi_nvs_for_each_region(func, data);
    POST_WRAPPER_FUNC(func, data);
    kern_printk("acpi_nvs_for_each_region returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_wakeup_source_register
#define APP_WRAPPER_FOR_wakeup_source_register
#endif
 
#ifndef APP_WRAPPER_FOR_wakeup_source_register
#define APP_WRAPPER_FOR_wakeup_source_register
FUNCTION_WRAPPER(wakeup_source_register, (const char *name), {
    kern_printk("wakeup_source_register is invoked.\n");
    PRE_WRAPPER_FUNC(name);
    struct wakeup_source *ret = wakeup_source_register(name);
    POST_WRAPPER_FUNC(name);
    kern_printk("wakeup_source_register returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_flush_signal_handlers
#define APP_WRAPPER_FOR_flush_signal_handlers
#endif
 
#ifndef APP_WRAPPER_FOR_flush_signal_handlers
#define APP_WRAPPER_FOR_flush_signal_handlers
FUNCTION_WRAPPER_VOID(flush_signal_handlers, (struct task_struct *_arg1, int force_default), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("flush_signal_handlers is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, force_default);
    flush_signal_handlers(_arg1, force_default);
    POST_WRAPPER_FUNC(_arg1, force_default);
    kern_printk("flush_signal_handlers returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_thread_group_cputime
#define APP_WRAPPER_FOR_thread_group_cputime
#endif
 
#ifndef APP_WRAPPER_FOR_thread_group_cputime
#define APP_WRAPPER_FOR_thread_group_cputime
FUNCTION_WRAPPER_VOID(thread_group_cputime, (struct task_struct *tsk, struct task_cputime *times), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("thread_group_cputime is invoked.\n");
    PRE_WRAPPER_FUNC(tsk, times);
    thread_group_cputime(tsk, times);
    POST_WRAPPER_FUNC(tsk, times);
    kern_printk("thread_group_cputime returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
})
#endif


#ifndef KERN_ADDR_sync_inodes_sb
#define APP_WRAPPER_FOR_sync_inodes_sb
#endif
 
#ifndef APP_WRAPPER_FOR_sync_inodes_sb
#define APP_WRAPPER_FOR_sync_inodes_sb
FUNCTION_WRAPPER_VOID(sync_inodes_sb, (struct super_block *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("sync_inodes_sb is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    sync_inodes_sb(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("sync_inodes_sb returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_schedule_timeout
#define APP_WRAPPER_FOR_schedule_timeout
#endif
 
#ifndef APP_WRAPPER_FOR_schedule_timeout
#define APP_WRAPPER_FOR_schedule_timeout
FUNCTION_WRAPPER(schedule_timeout, (signed long timeout), {
    kern_printk("schedule_timeout is invoked.\n");
    PRE_WRAPPER_FUNC(timeout);
    long ret = schedule_timeout(timeout);
    POST_WRAPPER_FUNC(timeout);
    kern_printk("schedule_timeout returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_enable_device_mem
#define APP_WRAPPER_FOR_pci_enable_device_mem
#endif
 
#ifndef APP_WRAPPER_FOR_pci_enable_device_mem
#define APP_WRAPPER_FOR_pci_enable_device_mem
FUNCTION_WRAPPER(pci_enable_device_mem, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_enable_device_mem is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pci_enable_device_mem(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_enable_device_mem returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_disk_part_iter_next
#define APP_WRAPPER_FOR_disk_part_iter_next
#endif
 
#ifndef APP_WRAPPER_FOR_disk_part_iter_next
#define APP_WRAPPER_FOR_disk_part_iter_next
FUNCTION_WRAPPER(disk_part_iter_next, (struct disk_part_iter *piter), {
    WRAP_RECURSIVE(piter);
    TRACES_IF_WATCHPOINT(piter);
    SCAN_HEAD_FUNC(struct disk_part_iter)(*(TO_UNWATCHED_ADDRESS(piter)));
    kern_printk("disk_part_iter_next is invoked.\n");
    PRE_WRAPPER_FUNC(piter);
    struct hd_struct *ret = disk_part_iter_next(piter);
    POST_WRAPPER_FUNC(piter);
    kern_printk("disk_part_iter_next returned.\n");
    TRACES_IF_WATCHPOINT(piter);
    SCAN_HEAD_FUNC(struct disk_part_iter)(*(TO_UNWATCHED_ADDRESS(piter)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_free_init_pages
#define APP_WRAPPER_FOR_free_init_pages
#endif
 
#ifndef APP_WRAPPER_FOR_free_init_pages
#define APP_WRAPPER_FOR_free_init_pages
FUNCTION_WRAPPER_VOID(free_init_pages, (char *what, unsigned long begin, unsigned long end), {
    kern_printk("free_init_pages is invoked.\n");
    PRE_WRAPPER_FUNC(what, begin, end);
    free_init_pages(what, begin, end);
    POST_WRAPPER_FUNC(what, begin, end);
    kern_printk("free_init_pages returned.\n");
})
#endif


#ifndef KERN_ADDR___hw_addr_add_multiple
#define APP_WRAPPER_FOR___hw_addr_add_multiple
#endif
 
#ifndef APP_WRAPPER_FOR___hw_addr_add_multiple
#define APP_WRAPPER_FOR___hw_addr_add_multiple
FUNCTION_WRAPPER(__hw_addr_add_multiple, (struct netdev_hw_addr_list *to_list, struct netdev_hw_addr_list *from_list, int addr_len, unsigned char addr_type), {
    kern_printk("__hw_addr_add_multiple is invoked.\n");
    PRE_WRAPPER_FUNC(to_list, from_list, addr_len, addr_type);
    int ret = __hw_addr_add_multiple(to_list, from_list, addr_len, addr_type);
    POST_WRAPPER_FUNC(to_list, from_list, addr_len, addr_type);
    kern_printk("__hw_addr_add_multiple returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_simple_xattr_list_add
#define APP_WRAPPER_FOR_simple_xattr_list_add
#endif
 
#ifndef APP_WRAPPER_FOR_simple_xattr_list_add
#define APP_WRAPPER_FOR_simple_xattr_list_add
FUNCTION_WRAPPER_VOID(simple_xattr_list_add, (struct simple_xattrs *xattrs, struct simple_xattr *new_xattr), {
    kern_printk("simple_xattr_list_add is invoked.\n");
    PRE_WRAPPER_FUNC(xattrs, new_xattr);
    simple_xattr_list_add(xattrs, new_xattr);
    POST_WRAPPER_FUNC(xattrs, new_xattr);
    kern_printk("simple_xattr_list_add returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_request_selected_regions_exclusive
#define APP_WRAPPER_FOR_pci_request_selected_regions_exclusive
#endif
 
#ifndef APP_WRAPPER_FOR_pci_request_selected_regions_exclusive
#define APP_WRAPPER_FOR_pci_request_selected_regions_exclusive
FUNCTION_WRAPPER(pci_request_selected_regions_exclusive, (struct pci_dev *_arg1, int _arg2, const char *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("pci_request_selected_regions_exclusive is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = pci_request_selected_regions_exclusive(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("pci_request_selected_regions_exclusive returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_rtnl_register
#define APP_WRAPPER_FOR_rtnl_register
#endif
 
#ifndef APP_WRAPPER_FOR_rtnl_register
#define APP_WRAPPER_FOR_rtnl_register
FUNCTION_WRAPPER_VOID(rtnl_register, (int protocol, int msgtype, rtnl_doit_func _arg1, rtnl_dumpit_func _arg2, rtnl_calcit_func _arg3), {
    WRAP_FUNCTION(_arg1);
    WRAP_FUNCTION(_arg2);
    WRAP_FUNCTION(_arg3);
    kern_printk("rtnl_register is invoked.\n");
    PRE_WRAPPER_FUNC(protocol, msgtype, _arg1, _arg2, _arg3);
    rtnl_register(protocol, msgtype, _arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(protocol, msgtype, _arg1, _arg2, _arg3);
    kern_printk("rtnl_register returned.\n");
})
#endif


#ifndef KERN_ADDR_lock_may_read
#define APP_WRAPPER_FOR_lock_may_read
#endif
 
#ifndef APP_WRAPPER_FOR_lock_may_read
#define APP_WRAPPER_FOR_lock_may_read
FUNCTION_WRAPPER(lock_may_read, (struct inode *_arg1, loff_t start, unsigned long count), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("lock_may_read is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, start, count);
    int ret = lock_may_read(_arg1, start, count);
    POST_WRAPPER_FUNC(_arg1, start, count);
    kern_printk("lock_may_read returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_cont_expand_simple
#define APP_WRAPPER_FOR_generic_cont_expand_simple
#endif
 
#ifndef APP_WRAPPER_FOR_generic_cont_expand_simple
#define APP_WRAPPER_FOR_generic_cont_expand_simple
FUNCTION_WRAPPER(generic_cont_expand_simple, (struct inode *inode, loff_t size), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("generic_cont_expand_simple is invoked.\n");
    PRE_WRAPPER_FUNC(inode, size);
    int ret = generic_cont_expand_simple(inode, size);
    POST_WRAPPER_FUNC(inode, size);
    kern_printk("generic_cont_expand_simple returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    return ret;
})
#endif


#ifndef KERN_ADDR___sock_recv_wifi_status
#define APP_WRAPPER_FOR___sock_recv_wifi_status
#endif
 
#ifndef APP_WRAPPER_FOR___sock_recv_wifi_status
#define APP_WRAPPER_FOR___sock_recv_wifi_status
FUNCTION_WRAPPER_VOID(__sock_recv_wifi_status, (struct msghdr *msg, struct sock *sk, struct sk_buff *skb), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("__sock_recv_wifi_status is invoked.\n");
    PRE_WRAPPER_FUNC(msg, sk, skb);
    __sock_recv_wifi_status(msg, sk, skb);
    POST_WRAPPER_FUNC(msg, sk, skb);
    kern_printk("__sock_recv_wifi_status returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_disable_pid_allocation
#define APP_WRAPPER_FOR_disable_pid_allocation
#endif
 
#ifndef APP_WRAPPER_FOR_disable_pid_allocation
#define APP_WRAPPER_FOR_disable_pid_allocation
FUNCTION_WRAPPER_VOID(disable_pid_allocation, (struct pid_namespace *ns), {
    kern_printk("disable_pid_allocation is invoked.\n");
    PRE_WRAPPER_FUNC(ns);
    disable_pid_allocation(ns);
    POST_WRAPPER_FUNC(ns);
    kern_printk("disable_pid_allocation returned.\n");
})
#endif


#ifndef KERN_ADDR_dev_pm_qos_remove_notifier
#define APP_WRAPPER_FOR_dev_pm_qos_remove_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_dev_pm_qos_remove_notifier
#define APP_WRAPPER_FOR_dev_pm_qos_remove_notifier
FUNCTION_WRAPPER(dev_pm_qos_remove_notifier, (struct device *dev, struct notifier_block *notifier), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(notifier);
    TRACES_IF_WATCHPOINT(notifier);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(notifier)));
    kern_printk("dev_pm_qos_remove_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(dev, notifier);
    int ret = dev_pm_qos_remove_notifier(dev, notifier);
    POST_WRAPPER_FUNC(dev, notifier);
    kern_printk("dev_pm_qos_remove_notifier returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(notifier);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(notifier)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cgroup_is_descendant
#define APP_WRAPPER_FOR_cgroup_is_descendant
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_is_descendant
#define APP_WRAPPER_FOR_cgroup_is_descendant
FUNCTION_WRAPPER(cgroup_is_descendant, (const struct cgroup *cgrp, struct task_struct *task), {
    WRAP_RECURSIVE(cgrp);
    TRACES_IF_WATCHPOINT(cgrp);
    SCAN_HEAD_FUNC(const struct cgroup)(*(TO_UNWATCHED_ADDRESS(cgrp)));
    WRAP_RECURSIVE(task);
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    kern_printk("cgroup_is_descendant is invoked.\n");
    PRE_WRAPPER_FUNC(cgrp, task);
    int ret = cgroup_is_descendant(cgrp, task);
    POST_WRAPPER_FUNC(cgrp, task);
    kern_printk("cgroup_is_descendant returned.\n");
    TRACES_IF_WATCHPOINT(cgrp);
    SCAN_HEAD_FUNC(const struct cgroup)(*(TO_UNWATCHED_ADDRESS(cgrp)));
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    return ret;
})
#endif


#ifndef KERN_ADDR___ioapic_set_affinity
#define APP_WRAPPER_FOR___ioapic_set_affinity
#endif
 
#ifndef APP_WRAPPER_FOR___ioapic_set_affinity
#define APP_WRAPPER_FOR___ioapic_set_affinity
FUNCTION_WRAPPER(__ioapic_set_affinity, (struct irq_data *_arg1, const struct cpumask *_arg2, unsigned int *dest_id), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__ioapic_set_affinity is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, dest_id);
    int ret = __ioapic_set_affinity(_arg1, _arg2, dest_id);
    POST_WRAPPER_FUNC(_arg1, _arg2, dest_id);
    kern_printk("__ioapic_set_affinity returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_user_write_config_dword
#define APP_WRAPPER_FOR_pci_user_write_config_dword
#endif
 
#ifndef APP_WRAPPER_FOR_pci_user_write_config_dword
#define APP_WRAPPER_FOR_pci_user_write_config_dword
FUNCTION_WRAPPER(pci_user_write_config_dword, (struct pci_dev *dev, int where, u32 val), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_user_write_config_dword is invoked.\n");
    PRE_WRAPPER_FUNC(dev, where, val);
    int ret = pci_user_write_config_dword(dev, where, val);
    POST_WRAPPER_FUNC(dev, where, val);
    kern_printk("pci_user_write_config_dword returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_do_execve
#define APP_WRAPPER_FOR_do_execve
#endif
 
#ifndef APP_WRAPPER_FOR_do_execve
#define APP_WRAPPER_FOR_do_execve
FUNCTION_WRAPPER(do_execve, (const char *_arg1, const char ** const _arg2, const char ** const _arg3), {
    kern_printk("do_execve is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = do_execve(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("do_execve returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___dst_free
#define APP_WRAPPER_FOR___dst_free
#endif
 
#ifndef APP_WRAPPER_FOR___dst_free
#define APP_WRAPPER_FOR___dst_free
FUNCTION_WRAPPER_VOID(__dst_free, (struct dst_entry *dst), {
    WRAP_RECURSIVE(dst);
    TRACES_IF_WATCHPOINT(dst);
    SCAN_HEAD_FUNC(struct dst_entry)(*(TO_UNWATCHED_ADDRESS(dst)));
    kern_printk("__dst_free is invoked.\n");
    PRE_WRAPPER_FUNC(dst);
    __dst_free(dst);
    POST_WRAPPER_FUNC(dst);
    kern_printk("__dst_free returned.\n");
    TRACES_IF_WATCHPOINT(dst);
    SCAN_HEAD_FUNC(struct dst_entry)(*(TO_UNWATCHED_ADDRESS(dst)));
})
#endif


#ifndef KERN_ADDR_dirty_writeback_centisecs_handler
#define APP_WRAPPER_FOR_dirty_writeback_centisecs_handler
#endif
 
#ifndef APP_WRAPPER_FOR_dirty_writeback_centisecs_handler
#define APP_WRAPPER_FOR_dirty_writeback_centisecs_handler
FUNCTION_WRAPPER(dirty_writeback_centisecs_handler, (struct ctl_table *_arg1, int _arg2, void *_arg3, size_t *_arg4, loff_t *_arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("dirty_writeback_centisecs_handler is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = dirty_writeback_centisecs_handler(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("dirty_writeback_centisecs_handler returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_release_jbd_inode
#define APP_WRAPPER_FOR_jbd2_journal_release_jbd_inode
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_release_jbd_inode
#define APP_WRAPPER_FOR_jbd2_journal_release_jbd_inode
FUNCTION_WRAPPER_VOID(jbd2_journal_release_jbd_inode, (journal_t *journal, struct jbd2_inode *jinode), {
    WRAP_RECURSIVE(journal);
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    WRAP_RECURSIVE(jinode);
    TRACES_IF_WATCHPOINT(jinode);
    SCAN_HEAD_FUNC(struct jbd2_inode)(*(TO_UNWATCHED_ADDRESS(jinode)));
    kern_printk("jbd2_journal_release_jbd_inode is invoked.\n");
    PRE_WRAPPER_FUNC(journal, jinode);
    jbd2_journal_release_jbd_inode(journal, jinode);
    POST_WRAPPER_FUNC(journal, jinode);
    kern_printk("jbd2_journal_release_jbd_inode returned.\n");
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    TRACES_IF_WATCHPOINT(jinode);
    SCAN_HEAD_FUNC(struct jbd2_inode)(*(TO_UNWATCHED_ADDRESS(jinode)));
})
#endif


#ifndef KERN_ADDR_kstrtos8
#define APP_WRAPPER_FOR_kstrtos8
#endif
 
#ifndef APP_WRAPPER_FOR_kstrtos8
#define APP_WRAPPER_FOR_kstrtos8
FUNCTION_WRAPPER(kstrtos8, (const char *s, unsigned int base, s8 *res), {
    kern_printk("kstrtos8 is invoked.\n");
    PRE_WRAPPER_FUNC(s, base, res);
    int ret = kstrtos8(s, base, res);
    POST_WRAPPER_FUNC(s, base, res);
    kern_printk("kstrtos8 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_free_hot_cold_page_list
#define APP_WRAPPER_FOR_free_hot_cold_page_list
#endif
 
#ifndef APP_WRAPPER_FOR_free_hot_cold_page_list
#define APP_WRAPPER_FOR_free_hot_cold_page_list
FUNCTION_WRAPPER_VOID(free_hot_cold_page_list, (struct list_head *list, int cold), {
    kern_printk("free_hot_cold_page_list is invoked.\n");
    PRE_WRAPPER_FUNC(list, cold);
    free_hot_cold_page_list(list, cold);
    POST_WRAPPER_FUNC(list, cold);
    kern_printk("free_hot_cold_page_list returned.\n");
})
#endif


#ifndef KERN_ADDR___pskb_copy
#define APP_WRAPPER_FOR___pskb_copy
#endif
 
#ifndef APP_WRAPPER_FOR___pskb_copy
#define APP_WRAPPER_FOR___pskb_copy
FUNCTION_WRAPPER(__pskb_copy, (struct sk_buff *skb, int headroom, gfp_t gfp_mask), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("__pskb_copy is invoked.\n");
    PRE_WRAPPER_FUNC(skb, headroom, gfp_mask);
    struct sk_buff *ret = __pskb_copy(skb, headroom, gfp_mask);
    POST_WRAPPER_FUNC(skb, headroom, gfp_mask);
    kern_printk("__pskb_copy returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_cgroup_scan_tasks
#define APP_WRAPPER_FOR_cgroup_scan_tasks
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_scan_tasks
#define APP_WRAPPER_FOR_cgroup_scan_tasks
FUNCTION_WRAPPER(cgroup_scan_tasks, (struct cgroup_scanner *scan), {
    WRAP_RECURSIVE(scan);
    TRACES_IF_WATCHPOINT(scan);
    SCAN_HEAD_FUNC(struct cgroup_scanner)(*(TO_UNWATCHED_ADDRESS(scan)));
    kern_printk("cgroup_scan_tasks is invoked.\n");
    PRE_WRAPPER_FUNC(scan);
    int ret = cgroup_scan_tasks(scan);
    POST_WRAPPER_FUNC(scan);
    kern_printk("cgroup_scan_tasks returned.\n");
    TRACES_IF_WATCHPOINT(scan);
    SCAN_HEAD_FUNC(struct cgroup_scanner)(*(TO_UNWATCHED_ADDRESS(scan)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_enable_ido
#define APP_WRAPPER_FOR_pci_enable_ido
#endif
 
#ifndef APP_WRAPPER_FOR_pci_enable_ido
#define APP_WRAPPER_FOR_pci_enable_ido
FUNCTION_WRAPPER_VOID(pci_enable_ido, (struct pci_dev *dev, unsigned long type), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_enable_ido is invoked.\n");
    PRE_WRAPPER_FUNC(dev, type);
    pci_enable_ido(dev, type);
    POST_WRAPPER_FUNC(dev, type);
    kern_printk("pci_enable_ido returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_sk_filter
#define APP_WRAPPER_FOR_sk_filter
#endif
 
#ifndef APP_WRAPPER_FOR_sk_filter
#define APP_WRAPPER_FOR_sk_filter
FUNCTION_WRAPPER(sk_filter, (struct sock *sk, struct sk_buff *skb), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("sk_filter is invoked.\n");
    PRE_WRAPPER_FUNC(sk, skb);
    int ret = sk_filter(sk, skb);
    POST_WRAPPER_FUNC(sk, skb);
    kern_printk("sk_filter returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_show_regs
#define APP_WRAPPER_FOR_show_regs
#endif
 
#ifndef APP_WRAPPER_FOR_show_regs
#define APP_WRAPPER_FOR_show_regs
FUNCTION_WRAPPER_VOID(show_regs, (struct pt_regs *_arg1), {
    kern_printk("show_regs is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    show_regs(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("show_regs returned.\n");
})
#endif


#ifndef KERN_ADDR_is_kernel_percpu_address
#define APP_WRAPPER_FOR_is_kernel_percpu_address
#endif
 
#ifndef APP_WRAPPER_FOR_is_kernel_percpu_address
#define APP_WRAPPER_FOR_is_kernel_percpu_address
FUNCTION_WRAPPER(is_kernel_percpu_address, (unsigned long addr), {
    kern_printk("is_kernel_percpu_address is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    bool ret = is_kernel_percpu_address(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("is_kernel_percpu_address returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___cleancache_put_page
#define APP_WRAPPER_FOR___cleancache_put_page
#endif
 
#ifndef APP_WRAPPER_FOR___cleancache_put_page
#define APP_WRAPPER_FOR___cleancache_put_page
FUNCTION_WRAPPER_VOID(__cleancache_put_page, (struct page *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__cleancache_put_page is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    __cleancache_put_page(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__cleancache_put_page returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_dev_mc_add_global
#define APP_WRAPPER_FOR_dev_mc_add_global
#endif
 
#ifndef APP_WRAPPER_FOR_dev_mc_add_global
#define APP_WRAPPER_FOR_dev_mc_add_global
FUNCTION_WRAPPER(dev_mc_add_global, (struct net_device *dev, unsigned const char *addr), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_mc_add_global is invoked.\n");
    PRE_WRAPPER_FUNC(dev, addr);
    int ret = dev_mc_add_global(dev, addr);
    POST_WRAPPER_FUNC(dev, addr);
    kern_printk("dev_mc_add_global returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_put
#define APP_WRAPPER_FOR_dm_put
#endif
 
#ifndef APP_WRAPPER_FOR_dm_put
#define APP_WRAPPER_FOR_dm_put
FUNCTION_WRAPPER_VOID(dm_put, (struct mapped_device *md), {
    kern_printk("dm_put is invoked.\n");
    PRE_WRAPPER_FUNC(md);
    dm_put(md);
    POST_WRAPPER_FUNC(md);
    kern_printk("dm_put returned.\n");
})
#endif


#ifndef KERN_ADDR_sch_direct_xmit
#define APP_WRAPPER_FOR_sch_direct_xmit
#endif
 
#ifndef APP_WRAPPER_FOR_sch_direct_xmit
#define APP_WRAPPER_FOR_sch_direct_xmit
FUNCTION_WRAPPER(sch_direct_xmit, (struct sk_buff *skb, struct Qdisc *q, struct net_device *dev, struct netdev_queue *txq, spinlock_t *root_lock), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(q)));
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(txq);
    TRACES_IF_WATCHPOINT(txq);
    SCAN_HEAD_FUNC(struct netdev_queue)(*(TO_UNWATCHED_ADDRESS(txq)));
    kern_printk("sch_direct_xmit is invoked.\n");
    PRE_WRAPPER_FUNC(skb, q, dev, txq, root_lock);
    int ret = sch_direct_xmit(skb, q, dev, txq, root_lock);
    POST_WRAPPER_FUNC(skb, q, dev, txq, root_lock);
    kern_printk("sch_direct_xmit returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(q)));
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(txq);
    SCAN_HEAD_FUNC(struct netdev_queue)(*(TO_UNWATCHED_ADDRESS(txq)));
    return ret;
})
#endif


#ifndef KERN_ADDR_shrink_slab
#define APP_WRAPPER_FOR_shrink_slab
#endif
 
#ifndef APP_WRAPPER_FOR_shrink_slab
#define APP_WRAPPER_FOR_shrink_slab
FUNCTION_WRAPPER(shrink_slab, (struct shrink_control *shrink, unsigned long nr_pages_scanned, unsigned long lru_pages), {
    kern_printk("shrink_slab is invoked.\n");
    PRE_WRAPPER_FUNC(shrink, nr_pages_scanned, lru_pages);
    long ret = shrink_slab(shrink, nr_pages_scanned, lru_pages);
    POST_WRAPPER_FUNC(shrink, nr_pages_scanned, lru_pages);
    kern_printk("shrink_slab returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___next_cpu_nr
#define APP_WRAPPER_FOR___next_cpu_nr
#endif
 
#ifndef APP_WRAPPER_FOR___next_cpu_nr
#define APP_WRAPPER_FOR___next_cpu_nr
FUNCTION_WRAPPER(__next_cpu_nr, (int n, const cpumask_t *srcp), {
    kern_printk("__next_cpu_nr is invoked.\n");
    PRE_WRAPPER_FUNC(n, srcp);
    int ret = __next_cpu_nr(n, srcp);
    POST_WRAPPER_FUNC(n, srcp);
    kern_printk("__next_cpu_nr returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_rtnl_unregister
#define APP_WRAPPER_FOR_rtnl_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_rtnl_unregister
#define APP_WRAPPER_FOR_rtnl_unregister
FUNCTION_WRAPPER(rtnl_unregister, (int protocol, int msgtype), {
    kern_printk("rtnl_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(protocol, msgtype);
    int ret = rtnl_unregister(protocol, msgtype);
    POST_WRAPPER_FUNC(protocol, msgtype);
    kern_printk("rtnl_unregister returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_exit_mmap
#define APP_WRAPPER_FOR_exit_mmap
#endif
 
#ifndef APP_WRAPPER_FOR_exit_mmap
#define APP_WRAPPER_FOR_exit_mmap
FUNCTION_WRAPPER_VOID(exit_mmap, (struct mm_struct *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("exit_mmap is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    exit_mmap(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("exit_mmap returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_get_kernel_pages
#define APP_WRAPPER_FOR_get_kernel_pages
#endif
 
#ifndef APP_WRAPPER_FOR_get_kernel_pages
#define APP_WRAPPER_FOR_get_kernel_pages
FUNCTION_WRAPPER(get_kernel_pages, (const struct kvec *iov, int nr_pages, int write, struct page **pages), {
    WRAP_RECURSIVE(pages);
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    kern_printk("get_kernel_pages is invoked.\n");
    PRE_WRAPPER_FUNC(iov, nr_pages, write, pages);
    int ret = get_kernel_pages(iov, nr_pages, write, pages);
    POST_WRAPPER_FUNC(iov, nr_pages, write, pages);
    kern_printk("get_kernel_pages returned.\n");
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    return ret;
})
#endif


#ifndef KERN_ADDR___init_kthread_worker
#define APP_WRAPPER_FOR___init_kthread_worker
#endif
 
#ifndef APP_WRAPPER_FOR___init_kthread_worker
#define APP_WRAPPER_FOR___init_kthread_worker
FUNCTION_WRAPPER_VOID(__init_kthread_worker, (struct kthread_worker *worker, const char *name, struct lock_class_key *key), {
    WRAP_RECURSIVE(worker);
    TRACES_IF_WATCHPOINT(worker);
    SCAN_HEAD_FUNC(struct kthread_worker)(*(TO_UNWATCHED_ADDRESS(worker)));
    kern_printk("__init_kthread_worker is invoked.\n");
    PRE_WRAPPER_FUNC(worker, name, key);
    __init_kthread_worker(worker, name, key);
    POST_WRAPPER_FUNC(worker, name, key);
    kern_printk("__init_kthread_worker returned.\n");
    TRACES_IF_WATCHPOINT(worker);
    SCAN_HEAD_FUNC(struct kthread_worker)(*(TO_UNWATCHED_ADDRESS(worker)));
})
#endif


#ifndef KERN_ADDR_file_open_name
#define APP_WRAPPER_FOR_file_open_name
#endif
 
#ifndef APP_WRAPPER_FOR_file_open_name
#define APP_WRAPPER_FOR_file_open_name
FUNCTION_WRAPPER(file_open_name, (struct filename *_arg1, int _arg2, umode_t _arg3), {
    kern_printk("file_open_name is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    struct file *ret = file_open_name(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("file_open_name returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_subsys_suspend_late
#define APP_WRAPPER_FOR_acpi_subsys_suspend_late
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_subsys_suspend_late
#define APP_WRAPPER_FOR_acpi_subsys_suspend_late
FUNCTION_WRAPPER(acpi_subsys_suspend_late, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("acpi_subsys_suspend_late is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = acpi_subsys_suspend_late(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("acpi_subsys_suspend_late returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_hrtimer_nanosleep_restart
#define APP_WRAPPER_FOR_hrtimer_nanosleep_restart
#endif
 
#ifndef APP_WRAPPER_FOR_hrtimer_nanosleep_restart
#define APP_WRAPPER_FOR_hrtimer_nanosleep_restart
FUNCTION_WRAPPER(hrtimer_nanosleep_restart, (struct restart_block *restart_block), {
    WRAP_RECURSIVE(restart_block);
    TRACES_IF_WATCHPOINT(restart_block);
    SCAN_HEAD_FUNC(struct restart_block)(*(TO_UNWATCHED_ADDRESS(restart_block)));
    kern_printk("hrtimer_nanosleep_restart is invoked.\n");
    PRE_WRAPPER_FUNC(restart_block);
    long ret = hrtimer_nanosleep_restart(restart_block);
    POST_WRAPPER_FUNC(restart_block);
    kern_printk("hrtimer_nanosleep_restart returned.\n");
    TRACES_IF_WATCHPOINT(restart_block);
    SCAN_HEAD_FUNC(struct restart_block)(*(TO_UNWATCHED_ADDRESS(restart_block)));
    return ret;
})
#endif


#ifndef KERN_ADDR_round_jiffies_up
#define APP_WRAPPER_FOR_round_jiffies_up
#endif
 
#ifndef APP_WRAPPER_FOR_round_jiffies_up
#define APP_WRAPPER_FOR_round_jiffies_up
FUNCTION_WRAPPER(round_jiffies_up, (unsigned long j), {
    kern_printk("round_jiffies_up is invoked.\n");
    PRE_WRAPPER_FUNC(j);
    long ret = round_jiffies_up(j);
    POST_WRAPPER_FUNC(j);
    kern_printk("round_jiffies_up returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_raw_pci_write
#define APP_WRAPPER_FOR_raw_pci_write
#endif
 
#ifndef APP_WRAPPER_FOR_raw_pci_write
#define APP_WRAPPER_FOR_raw_pci_write
FUNCTION_WRAPPER(raw_pci_write, (unsigned int domain, unsigned int bus, unsigned int devfn, int reg, int len, u32 val), {
    kern_printk("raw_pci_write is invoked.\n");
    PRE_WRAPPER_FUNC(domain, bus, devfn, reg, len, val);
    int ret = raw_pci_write(domain, bus, devfn, reg, len, val);
    POST_WRAPPER_FUNC(domain, bus, devfn, reg, len, val);
    kern_printk("raw_pci_write returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sysfs_create_group
#define APP_WRAPPER_FOR_sysfs_create_group
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_create_group
#define APP_WRAPPER_FOR_sysfs_create_group
FUNCTION_WRAPPER(sysfs_create_group, (struct kobject *kobj, const struct attribute_group *grp), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    WRAP_RECURSIVE(grp);
    TRACES_IF_WATCHPOINT(grp);
    SCAN_HEAD_FUNC(const struct attribute_group)(*(TO_UNWATCHED_ADDRESS(grp)));
    kern_printk("sysfs_create_group is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, grp);
    int ret = sysfs_create_group(kobj, grp);
    POST_WRAPPER_FUNC(kobj, grp);
    kern_printk("sysfs_create_group returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    TRACES_IF_WATCHPOINT(grp);
    SCAN_HEAD_FUNC(const struct attribute_group)(*(TO_UNWATCHED_ADDRESS(grp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_hrtimers_resume
#define APP_WRAPPER_FOR_hrtimers_resume
#endif
 
#ifndef APP_WRAPPER_FOR_hrtimers_resume
#define APP_WRAPPER_FOR_hrtimers_resume
FUNCTION_WRAPPER_VOID(hrtimers_resume, (), {
    kern_printk("hrtimers_resume is invoked.\n");
    PRE_WRAPPER_FUNC();
    hrtimers_resume();
    POST_WRAPPER_FUNC();
    kern_printk("hrtimers_resume returned.\n");
})
#endif


#ifndef KERN_ADDR_netlink_clear_multicast_users
#define APP_WRAPPER_FOR_netlink_clear_multicast_users
#endif
 
#ifndef APP_WRAPPER_FOR_netlink_clear_multicast_users
#define APP_WRAPPER_FOR_netlink_clear_multicast_users
FUNCTION_WRAPPER_VOID(netlink_clear_multicast_users, (struct sock *sk, unsigned int group), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("netlink_clear_multicast_users is invoked.\n");
    PRE_WRAPPER_FUNC(sk, group);
    netlink_clear_multicast_users(sk, group);
    POST_WRAPPER_FUNC(sk, group);
    kern_printk("netlink_clear_multicast_users returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR_acpi_install_gpe_block
#define APP_WRAPPER_FOR_acpi_install_gpe_block
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_install_gpe_block
#define APP_WRAPPER_FOR_acpi_install_gpe_block
FUNCTION_WRAPPER(acpi_install_gpe_block, (acpi_handle gpe_device, struct acpi_generic_address *gpe_block_address, u32 register_count, u32 interrupt_number), {
    kern_printk("acpi_install_gpe_block is invoked.\n");
    PRE_WRAPPER_FUNC(gpe_device, gpe_block_address, register_count, interrupt_number);
    acpi_status ret = acpi_install_gpe_block(gpe_device, gpe_block_address, register_count, interrupt_number);
    POST_WRAPPER_FUNC(gpe_device, gpe_block_address, register_count, interrupt_number);
    kern_printk("acpi_install_gpe_block returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_link_printk
#define APP_WRAPPER_FOR_ata_link_printk
#endif
 
#ifndef APP_WRAPPER_FOR_ata_link_printk
#define APP_WRAPPER_FOR_ata_link_printk
FUNCTION_WRAPPER(ata_link_printk, (const struct ata_link *link, const char *level, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(const struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    // TODO: variadic arguments
    kern_printk("ata_link_printk is invoked.\n");
    PRE_WRAPPER_FUNC(link, level, fmt);
    int ret = ata_link_printk(link, level, fmt);
    POST_WRAPPER_FUNC(link, level, fmt);
    kern_printk("ata_link_printk returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(const struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sockfd_lookup
#define APP_WRAPPER_FOR_sockfd_lookup
#endif
 
#ifndef APP_WRAPPER_FOR_sockfd_lookup
#define APP_WRAPPER_FOR_sockfd_lookup
FUNCTION_WRAPPER(sockfd_lookup, (int fd, int *err), {
    kern_printk("sockfd_lookup is invoked.\n");
    PRE_WRAPPER_FUNC(fd, err);
    struct socket *ret = sockfd_lookup(fd, err);
    POST_WRAPPER_FUNC(fd, err);
    kern_printk("sockfd_lookup returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_bsg_unregister_queue
#define APP_WRAPPER_FOR_bsg_unregister_queue
#endif
 
#ifndef APP_WRAPPER_FOR_bsg_unregister_queue
#define APP_WRAPPER_FOR_bsg_unregister_queue
FUNCTION_WRAPPER_VOID(bsg_unregister_queue, (struct request_queue *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bsg_unregister_queue is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    bsg_unregister_queue(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("bsg_unregister_queue returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_mount_pseudo
#define APP_WRAPPER_FOR_mount_pseudo
#endif
 
#ifndef APP_WRAPPER_FOR_mount_pseudo
#define APP_WRAPPER_FOR_mount_pseudo
FUNCTION_WRAPPER(mount_pseudo, (struct file_system_type *_arg1, char *_arg2, const struct super_operations *ops, const struct dentry_operations *dops, unsigned long _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(ops);
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(const struct super_operations)(*(TO_UNWATCHED_ADDRESS(ops)));
    WRAP_RECURSIVE(dops);
    TRACES_IF_WATCHPOINT(dops);
    SCAN_HEAD_FUNC(const struct dentry_operations)(*(TO_UNWATCHED_ADDRESS(dops)));
    kern_printk("mount_pseudo is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, ops, dops, _arg3);
    struct dentry *ret = mount_pseudo(_arg1, _arg2, ops, dops, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, ops, dops, _arg3);
    kern_printk("mount_pseudo returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(const struct super_operations)(*(TO_UNWATCHED_ADDRESS(ops)));
    TRACES_IF_WATCHPOINT(dops);
    SCAN_HEAD_FUNC(const struct dentry_operations)(*(TO_UNWATCHED_ADDRESS(dops)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_seq_dentry
#define APP_WRAPPER_FOR_seq_dentry
#endif
 
#ifndef APP_WRAPPER_FOR_seq_dentry
#define APP_WRAPPER_FOR_seq_dentry
FUNCTION_WRAPPER(seq_dentry, (struct seq_file *_arg1, struct dentry *_arg2, const char *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("seq_dentry is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = seq_dentry(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("seq_dentry returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_lookup_module_symbol_attrs
#define APP_WRAPPER_FOR_lookup_module_symbol_attrs
#endif
 
#ifndef APP_WRAPPER_FOR_lookup_module_symbol_attrs
#define APP_WRAPPER_FOR_lookup_module_symbol_attrs
FUNCTION_WRAPPER(lookup_module_symbol_attrs, (unsigned long addr, unsigned long *size, unsigned long *offset, char *modname, char *name), {
    kern_printk("lookup_module_symbol_attrs is invoked.\n");
    PRE_WRAPPER_FUNC(addr, size, offset, modname, name);
    int ret = lookup_module_symbol_attrs(addr, size, offset, modname, name);
    POST_WRAPPER_FUNC(addr, size, offset, modname, name);
    kern_printk("lookup_module_symbol_attrs returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_fcntl_setlease
#define APP_WRAPPER_FOR_fcntl_setlease
#endif
 
#ifndef APP_WRAPPER_FOR_fcntl_setlease
#define APP_WRAPPER_FOR_fcntl_setlease
FUNCTION_WRAPPER(fcntl_setlease, (unsigned int fd, struct file *filp, long arg), {
    WRAP_RECURSIVE(filp);
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    kern_printk("fcntl_setlease is invoked.\n");
    PRE_WRAPPER_FUNC(fd, filp, arg);
    int ret = fcntl_setlease(fd, filp, arg);
    POST_WRAPPER_FUNC(fd, filp, arg);
    kern_printk("fcntl_setlease returned.\n");
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kill_bdev
#define APP_WRAPPER_FOR_kill_bdev
#endif
 
#ifndef APP_WRAPPER_FOR_kill_bdev
#define APP_WRAPPER_FOR_kill_bdev
FUNCTION_WRAPPER_VOID(kill_bdev, (struct block_device *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("kill_bdev is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    kill_bdev(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("kill_bdev returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_pci_set_dma_max_seg_size
#define APP_WRAPPER_FOR_pci_set_dma_max_seg_size
#endif
 
#ifndef APP_WRAPPER_FOR_pci_set_dma_max_seg_size
#define APP_WRAPPER_FOR_pci_set_dma_max_seg_size
FUNCTION_WRAPPER(pci_set_dma_max_seg_size, (struct pci_dev *dev, unsigned int size), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_set_dma_max_seg_size is invoked.\n");
    PRE_WRAPPER_FUNC(dev, size);
    int ret = pci_set_dma_max_seg_size(dev, size);
    POST_WRAPPER_FUNC(dev, size);
    kern_printk("pci_set_dma_max_seg_size returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_set_anon_super
#define APP_WRAPPER_FOR_set_anon_super
#endif
 
#ifndef APP_WRAPPER_FOR_set_anon_super
#define APP_WRAPPER_FOR_set_anon_super
FUNCTION_WRAPPER(set_anon_super, (struct super_block *s, void *data), {
    WRAP_RECURSIVE(s);
    TRACES_IF_WATCHPOINT(s);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(s)));
    kern_printk("set_anon_super is invoked.\n");
    PRE_WRAPPER_FUNC(s, data);
    int ret = set_anon_super(s, data);
    POST_WRAPPER_FUNC(s, data);
    kern_printk("set_anon_super returned.\n");
    TRACES_IF_WATCHPOINT(s);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(s)));
    return ret;
})
#endif


#ifndef KERN_ADDR_insert_inode_locked
#define APP_WRAPPER_FOR_insert_inode_locked
#endif
 
#ifndef APP_WRAPPER_FOR_insert_inode_locked
#define APP_WRAPPER_FOR_insert_inode_locked
FUNCTION_WRAPPER(insert_inode_locked, (struct inode *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("insert_inode_locked is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = insert_inode_locked(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("insert_inode_locked returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR___breadahead
#define APP_WRAPPER_FOR___breadahead
#endif
 
#ifndef APP_WRAPPER_FOR___breadahead
#define APP_WRAPPER_FOR___breadahead
FUNCTION_WRAPPER_VOID(__breadahead, (struct block_device *_arg1, sector_t block, unsigned int size), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__breadahead is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, block, size);
    __breadahead(_arg1, block, size);
    POST_WRAPPER_FUNC(_arg1, block, size);
    kern_printk("__breadahead returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_sched_group_shares
#define APP_WRAPPER_FOR_sched_group_shares
#endif
 
#ifndef APP_WRAPPER_FOR_sched_group_shares
#define APP_WRAPPER_FOR_sched_group_shares
FUNCTION_WRAPPER(sched_group_shares, (struct task_group *tg), {
    kern_printk("sched_group_shares is invoked.\n");
    PRE_WRAPPER_FUNC(tg);
    long ret = sched_group_shares(tg);
    POST_WRAPPER_FUNC(tg);
    kern_printk("sched_group_shares returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_do_gettimeofday
#define APP_WRAPPER_FOR_do_gettimeofday
#endif
 
#ifndef APP_WRAPPER_FOR_do_gettimeofday
#define APP_WRAPPER_FOR_do_gettimeofday
FUNCTION_WRAPPER_VOID(do_gettimeofday, (struct timeval *tv), {
    kern_printk("do_gettimeofday is invoked.\n");
    PRE_WRAPPER_FUNC(tv);
    do_gettimeofday(tv);
    POST_WRAPPER_FUNC(tv);
    kern_printk("do_gettimeofday returned.\n");
})
#endif


#ifndef KERN_ADDR_jbd2__journal_start
#define APP_WRAPPER_FOR_jbd2__journal_start
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2__journal_start
#define APP_WRAPPER_FOR_jbd2__journal_start
FUNCTION_WRAPPER(jbd2__journal_start, (journal_t *_arg1, int nblocks, gfp_t gfp_mask), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2__journal_start is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, nblocks, gfp_mask);
    handle_t *ret = jbd2__journal_start(_arg1, nblocks, gfp_mask);
    POST_WRAPPER_FUNC(_arg1, nblocks, gfp_mask);
    kern_printk("jbd2__journal_start returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_morph
#define APP_WRAPPER_FOR_skb_morph
#endif
 
#ifndef APP_WRAPPER_FOR_skb_morph
#define APP_WRAPPER_FOR_skb_morph
FUNCTION_WRAPPER(skb_morph, (struct sk_buff *dst, struct sk_buff *src), {
    WRAP_RECURSIVE(dst);
    TRACES_IF_WATCHPOINT(dst);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(dst)));
    WRAP_RECURSIVE(src);
    TRACES_IF_WATCHPOINT(src);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(src)));
    kern_printk("skb_morph is invoked.\n");
    PRE_WRAPPER_FUNC(dst, src);
    struct sk_buff *ret = skb_morph(dst, src);
    POST_WRAPPER_FUNC(dst, src);
    kern_printk("skb_morph returned.\n");
    TRACES_IF_WATCHPOINT(dst);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(dst)));
    TRACES_IF_WATCHPOINT(src);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(src)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_idr_get_new_above
#define APP_WRAPPER_FOR_idr_get_new_above
#endif
 
#ifndef APP_WRAPPER_FOR_idr_get_new_above
#define APP_WRAPPER_FOR_idr_get_new_above
FUNCTION_WRAPPER(idr_get_new_above, (struct idr *idp, void *ptr, int starting_id, int *id), {
    WRAP_RECURSIVE(idp);
    TRACES_IF_WATCHPOINT(idp);
    SCAN_HEAD_FUNC(struct idr)(*(TO_UNWATCHED_ADDRESS(idp)));
    kern_printk("idr_get_new_above is invoked.\n");
    PRE_WRAPPER_FUNC(idp, ptr, starting_id, id);
    int ret = idr_get_new_above(idp, ptr, starting_id, id);
    POST_WRAPPER_FUNC(idp, ptr, starting_id, id);
    kern_printk("idr_get_new_above returned.\n");
    TRACES_IF_WATCHPOINT(idp);
    SCAN_HEAD_FUNC(struct idr)(*(TO_UNWATCHED_ADDRESS(idp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_set_memory_wb
#define APP_WRAPPER_FOR_set_memory_wb
#endif
 
#ifndef APP_WRAPPER_FOR_set_memory_wb
#define APP_WRAPPER_FOR_set_memory_wb
FUNCTION_WRAPPER(set_memory_wb, (unsigned long addr, int numpages), {
    kern_printk("set_memory_wb is invoked.\n");
    PRE_WRAPPER_FUNC(addr, numpages);
    int ret = set_memory_wb(addr, numpages);
    POST_WRAPPER_FUNC(addr, numpages);
    kern_printk("set_memory_wb returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_intx_mask_supported
#define APP_WRAPPER_FOR_pci_intx_mask_supported
#endif
 
#ifndef APP_WRAPPER_FOR_pci_intx_mask_supported
#define APP_WRAPPER_FOR_pci_intx_mask_supported
FUNCTION_WRAPPER(pci_intx_mask_supported, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_intx_mask_supported is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    bool ret = pci_intx_mask_supported(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_intx_mask_supported returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cpu_set_gdt
#define APP_WRAPPER_FOR_cpu_set_gdt
#endif
 
#ifndef APP_WRAPPER_FOR_cpu_set_gdt
#define APP_WRAPPER_FOR_cpu_set_gdt
FUNCTION_WRAPPER_VOID(cpu_set_gdt, (int _arg1), {
    kern_printk("cpu_set_gdt is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    cpu_set_gdt(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("cpu_set_gdt returned.\n");
})
#endif


#ifndef KERN_ADDR_dm_table_add_target
#define APP_WRAPPER_FOR_dm_table_add_target
#endif
 
#ifndef APP_WRAPPER_FOR_dm_table_add_target
#define APP_WRAPPER_FOR_dm_table_add_target
FUNCTION_WRAPPER(dm_table_add_target, (struct dm_table *t, const char *type, sector_t start, sector_t len, char *params), {
    kern_printk("dm_table_add_target is invoked.\n");
    PRE_WRAPPER_FUNC(t, type, start, len, params);
    int ret = dm_table_add_target(t, type, start, len, params);
    POST_WRAPPER_FUNC(t, type, start, len, params);
    kern_printk("dm_table_add_target returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_init_dev
#define APP_WRAPPER_FOR_jbd2_journal_init_dev
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_init_dev
#define APP_WRAPPER_FOR_jbd2_journal_init_dev
FUNCTION_WRAPPER(jbd2_journal_init_dev, (struct block_device *bdev, struct block_device *fs_dev, unsigned long long start, int len, int bsize), {
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    WRAP_RECURSIVE(fs_dev);
    TRACES_IF_WATCHPOINT(fs_dev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(fs_dev)));
    kern_printk("jbd2_journal_init_dev is invoked.\n");
    PRE_WRAPPER_FUNC(bdev, fs_dev, start, len, bsize);
    journal_t *ret = jbd2_journal_init_dev(bdev, fs_dev, start, len, bsize);
    POST_WRAPPER_FUNC(bdev, fs_dev, start, len, bsize);
    kern_printk("jbd2_journal_init_dev returned.\n");
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    TRACES_IF_WATCHPOINT(fs_dev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(fs_dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_noop_llseek
#define APP_WRAPPER_FOR_noop_llseek
#endif
 
#ifndef APP_WRAPPER_FOR_noop_llseek
#define APP_WRAPPER_FOR_noop_llseek
FUNCTION_WRAPPER(noop_llseek, (struct file *file, loff_t offset, int whence), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("noop_llseek is invoked.\n");
    PRE_WRAPPER_FUNC(file, offset, whence);
    loff_t ret = noop_llseek(file, offset, whence);
    POST_WRAPPER_FUNC(file, offset, whence);
    kern_printk("noop_llseek returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_smp_call_function_any
#define APP_WRAPPER_FOR_smp_call_function_any
#endif
 
#ifndef APP_WRAPPER_FOR_smp_call_function_any
#define APP_WRAPPER_FOR_smp_call_function_any
FUNCTION_WRAPPER(smp_call_function_any, (const struct cpumask *mask, smp_call_func_t func, void *info, int wait), {
    WRAP_FUNCTION(func);
    kern_printk("smp_call_function_any is invoked.\n");
    PRE_WRAPPER_FUNC(mask, func, info, wait);
    int ret = smp_call_function_any(mask, func, info, wait);
    POST_WRAPPER_FUNC(mask, func, info, wait);
    kern_printk("smp_call_function_any returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_strncpy_from_user
#define APP_WRAPPER_FOR_strncpy_from_user
#endif
 
#ifndef APP_WRAPPER_FOR_strncpy_from_user
#define APP_WRAPPER_FOR_strncpy_from_user
FUNCTION_WRAPPER(strncpy_from_user, (char *dst, const char *src, long count), {
    kern_printk("strncpy_from_user is invoked.\n");
    PRE_WRAPPER_FUNC(dst, src, count);
    long ret = strncpy_from_user(dst, src, count);
    POST_WRAPPER_FUNC(dst, src, count);
    kern_printk("strncpy_from_user returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_addr_add_multiple
#define APP_WRAPPER_FOR_dev_addr_add_multiple
#endif
 
#ifndef APP_WRAPPER_FOR_dev_addr_add_multiple
#define APP_WRAPPER_FOR_dev_addr_add_multiple
FUNCTION_WRAPPER(dev_addr_add_multiple, (struct net_device *to_dev, struct net_device *from_dev, unsigned char addr_type), {
    WRAP_RECURSIVE(to_dev);
    TRACES_IF_WATCHPOINT(to_dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(to_dev)));
    WRAP_RECURSIVE(from_dev);
    TRACES_IF_WATCHPOINT(from_dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(from_dev)));
    kern_printk("dev_addr_add_multiple is invoked.\n");
    PRE_WRAPPER_FUNC(to_dev, from_dev, addr_type);
    int ret = dev_addr_add_multiple(to_dev, from_dev, addr_type);
    POST_WRAPPER_FUNC(to_dev, from_dev, addr_type);
    kern_printk("dev_addr_add_multiple returned.\n");
    TRACES_IF_WATCHPOINT(to_dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(to_dev)));
    TRACES_IF_WATCHPOINT(from_dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(from_dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cgroup_task_count
#define APP_WRAPPER_FOR_cgroup_task_count
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_task_count
#define APP_WRAPPER_FOR_cgroup_task_count
FUNCTION_WRAPPER(cgroup_task_count, (const struct cgroup *cgrp), {
    WRAP_RECURSIVE(cgrp);
    TRACES_IF_WATCHPOINT(cgrp);
    SCAN_HEAD_FUNC(const struct cgroup)(*(TO_UNWATCHED_ADDRESS(cgrp)));
    kern_printk("cgroup_task_count is invoked.\n");
    PRE_WRAPPER_FUNC(cgrp);
    int ret = cgroup_task_count(cgrp);
    POST_WRAPPER_FUNC(cgrp);
    kern_printk("cgroup_task_count returned.\n");
    TRACES_IF_WATCHPOINT(cgrp);
    SCAN_HEAD_FUNC(const struct cgroup)(*(TO_UNWATCHED_ADDRESS(cgrp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_do_set_thread_area
#define APP_WRAPPER_FOR_do_set_thread_area
#endif
 
#ifndef APP_WRAPPER_FOR_do_set_thread_area
#define APP_WRAPPER_FOR_do_set_thread_area
FUNCTION_WRAPPER(do_set_thread_area, (struct task_struct *p, int idx, struct user_desc *info, int can_allocate), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("do_set_thread_area is invoked.\n");
    PRE_WRAPPER_FUNC(p, idx, info, can_allocate);
    int ret = do_set_thread_area(p, idx, info, can_allocate);
    POST_WRAPPER_FUNC(p, idx, info, can_allocate);
    kern_printk("do_set_thread_area returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    return ret;
})
#endif


#ifndef KERN_ADDR_add_one_highpage
#define APP_WRAPPER_FOR_add_one_highpage
#endif
 
#ifndef APP_WRAPPER_FOR_add_one_highpage
#define APP_WRAPPER_FOR_add_one_highpage
FUNCTION_WRAPPER(add_one_highpage, (struct page *page, int pfn, int bad_ppro), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("add_one_highpage is invoked.\n");
    PRE_WRAPPER_FUNC(page, pfn, bad_ppro);
    int ret = add_one_highpage(page, pfn, bad_ppro);
    POST_WRAPPER_FUNC(page, pfn, bad_ppro);
    kern_printk("add_one_highpage returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_input_release_device
#define APP_WRAPPER_FOR_input_release_device
#endif
 
#ifndef APP_WRAPPER_FOR_input_release_device
#define APP_WRAPPER_FOR_input_release_device
FUNCTION_WRAPPER_VOID(input_release_device, (struct input_handle *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct input_handle)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("input_release_device is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    input_release_device(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("input_release_device returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct input_handle)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_ioremap_change_attr
#define APP_WRAPPER_FOR_ioremap_change_attr
#endif
 
#ifndef APP_WRAPPER_FOR_ioremap_change_attr
#define APP_WRAPPER_FOR_ioremap_change_attr
FUNCTION_WRAPPER(ioremap_change_attr, (unsigned long vaddr, unsigned long size, unsigned long prot_val), {
    kern_printk("ioremap_change_attr is invoked.\n");
    PRE_WRAPPER_FUNC(vaddr, size, prot_val);
    int ret = ioremap_change_attr(vaddr, size, prot_val);
    POST_WRAPPER_FUNC(vaddr, size, prot_val);
    kern_printk("ioremap_change_attr returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_rcu_init
#define APP_WRAPPER_FOR_rcu_init
#endif
 
#ifndef APP_WRAPPER_FOR_rcu_init
#define APP_WRAPPER_FOR_rcu_init
FUNCTION_WRAPPER_VOID(rcu_init, (), {
    kern_printk("rcu_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    rcu_init();
    POST_WRAPPER_FUNC();
    kern_printk("rcu_init returned.\n");
})
#endif


#ifndef KERN_ADDR_phy_detach
#define APP_WRAPPER_FOR_phy_detach
#endif
 
#ifndef APP_WRAPPER_FOR_phy_detach
#define APP_WRAPPER_FOR_phy_detach
FUNCTION_WRAPPER_VOID(phy_detach, (struct phy_device *phydev), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    kern_printk("phy_detach is invoked.\n");
    PRE_WRAPPER_FUNC(phydev);
    phy_detach(phydev);
    POST_WRAPPER_FUNC(phydev);
    kern_printk("phy_detach returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
})
#endif


#ifndef KERN_ADDR_scsi_remove_host
#define APP_WRAPPER_FOR_scsi_remove_host
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_remove_host
#define APP_WRAPPER_FOR_scsi_remove_host
FUNCTION_WRAPPER_VOID(scsi_remove_host, (struct Scsi_Host *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("scsi_remove_host is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    scsi_remove_host(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("scsi_remove_host returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_dev_deactivate
#define APP_WRAPPER_FOR_dev_deactivate
#endif
 
#ifndef APP_WRAPPER_FOR_dev_deactivate
#define APP_WRAPPER_FOR_dev_deactivate
FUNCTION_WRAPPER_VOID(dev_deactivate, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_deactivate is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    dev_deactivate(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_deactivate returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_jbd2_log_start_commit
#define APP_WRAPPER_FOR_jbd2_log_start_commit
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_log_start_commit
#define APP_WRAPPER_FOR_jbd2_log_start_commit
FUNCTION_WRAPPER(jbd2_log_start_commit, (journal_t *journal, tid_t tid), {
    WRAP_RECURSIVE(journal);
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    kern_printk("jbd2_log_start_commit is invoked.\n");
    PRE_WRAPPER_FUNC(journal, tid);
    int ret = jbd2_log_start_commit(journal, tid);
    POST_WRAPPER_FUNC(journal, tid);
    kern_printk("jbd2_log_start_commit returned.\n");
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    return ret;
})
#endif


#ifndef KERN_ADDR_swapcache_free
#define APP_WRAPPER_FOR_swapcache_free
#endif
 
#ifndef APP_WRAPPER_FOR_swapcache_free
#define APP_WRAPPER_FOR_swapcache_free
FUNCTION_WRAPPER_VOID(swapcache_free, (swp_entry_t _arg1, struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("swapcache_free is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, page);
    swapcache_free(_arg1, page);
    POST_WRAPPER_FUNC(_arg1, page);
    kern_printk("swapcache_free returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_register_cpu_under_node
#define APP_WRAPPER_FOR_register_cpu_under_node
#endif
 
#ifndef APP_WRAPPER_FOR_register_cpu_under_node
#define APP_WRAPPER_FOR_register_cpu_under_node
FUNCTION_WRAPPER(register_cpu_under_node, (unsigned int cpu, unsigned int nid), {
    kern_printk("register_cpu_under_node is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, nid);
    int ret = register_cpu_under_node(cpu, nid);
    POST_WRAPPER_FUNC(cpu, nid);
    kern_printk("register_cpu_under_node returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_ptrace
#define APP_WRAPPER_FOR_compat_sys_ptrace
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_ptrace
#define APP_WRAPPER_FOR_compat_sys_ptrace
FUNCTION_WRAPPER(compat_sys_ptrace, (compat_long_t request, compat_long_t pid, compat_long_t addr, compat_long_t data), {
    kern_printk("compat_sys_ptrace is invoked.\n");
    PRE_WRAPPER_FUNC(request, pid, addr, data);
    long ret = compat_sys_ptrace(request, pid, addr, data);
    POST_WRAPPER_FUNC(request, pid, addr, data);
    kern_printk("compat_sys_ptrace returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_alloc_queue
#define APP_WRAPPER_FOR_blk_alloc_queue
#endif
 
#ifndef APP_WRAPPER_FOR_blk_alloc_queue
#define APP_WRAPPER_FOR_blk_alloc_queue
FUNCTION_WRAPPER(blk_alloc_queue, (gfp_t _arg1), {
    kern_printk("blk_alloc_queue is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct request_queue *ret = blk_alloc_queue(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("blk_alloc_queue returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___bad_gid
#define APP_WRAPPER_FOR___bad_gid
#endif
 
#ifndef APP_WRAPPER_FOR___bad_gid
#define APP_WRAPPER_FOR___bad_gid
FUNCTION_WRAPPER_VOID(__bad_gid, (), {
    kern_printk("__bad_gid is invoked.\n");
    PRE_WRAPPER_FUNC();
    __bad_gid();
    POST_WRAPPER_FUNC();
    kern_printk("__bad_gid returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_numa_memory_affinity_init
#define APP_WRAPPER_FOR_acpi_numa_memory_affinity_init
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_numa_memory_affinity_init
#define APP_WRAPPER_FOR_acpi_numa_memory_affinity_init
FUNCTION_WRAPPER(acpi_numa_memory_affinity_init, (struct acpi_srat_mem_affinity *ma), {
    kern_printk("acpi_numa_memory_affinity_init is invoked.\n");
    PRE_WRAPPER_FUNC(ma);
    int ret = acpi_numa_memory_affinity_init(ma);
    POST_WRAPPER_FUNC(ma);
    kern_printk("acpi_numa_memory_affinity_init returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_invalidatepage
#define APP_WRAPPER_FOR_jbd2_journal_invalidatepage
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_invalidatepage
#define APP_WRAPPER_FOR_jbd2_journal_invalidatepage
FUNCTION_WRAPPER(jbd2_journal_invalidatepage, (journal_t *_arg1, struct page *_arg2, unsigned long _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("jbd2_journal_invalidatepage is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = jbd2_journal_invalidatepage(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("jbd2_journal_invalidatepage returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sysfs_get_dirent
#define APP_WRAPPER_FOR_sysfs_get_dirent
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_get_dirent
#define APP_WRAPPER_FOR_sysfs_get_dirent
FUNCTION_WRAPPER(sysfs_get_dirent, (struct sysfs_dirent *parent_sd, const void *ns, unsigned const char *name), {
    kern_printk("sysfs_get_dirent is invoked.\n");
    PRE_WRAPPER_FUNC(parent_sd, ns, name);
    struct sysfs_dirent *ret = sysfs_get_dirent(parent_sd, ns, name);
    POST_WRAPPER_FUNC(parent_sd, ns, name);
    kern_printk("sysfs_get_dirent returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_device_create
#define APP_WRAPPER_FOR_device_create
#endif
 
#ifndef APP_WRAPPER_FOR_device_create
#define APP_WRAPPER_FOR_device_create
FUNCTION_WRAPPER(device_create, (struct class_ *cls, struct device *parent, dev_t devt, void *drvdata, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    WRAP_RECURSIVE(cls);
    TRACES_IF_WATCHPOINT(cls);
    SCAN_HEAD_FUNC(struct class_)(*(TO_UNWATCHED_ADDRESS(cls)));
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(parent)));
    // TODO: variadic arguments
    kern_printk("device_create is invoked.\n");
    PRE_WRAPPER_FUNC(cls, parent, devt, drvdata, fmt);
    struct device *ret = device_create(cls, parent, devt, drvdata, fmt);
    POST_WRAPPER_FUNC(cls, parent, devt, drvdata, fmt);
    kern_printk("device_create returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(cls);
    SCAN_HEAD_FUNC(struct class_)(*(TO_UNWATCHED_ADDRESS(cls)));
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(parent)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_register_netdevice_notifier
#define APP_WRAPPER_FOR_register_netdevice_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_register_netdevice_notifier
#define APP_WRAPPER_FOR_register_netdevice_notifier
FUNCTION_WRAPPER(register_netdevice_notifier, (struct notifier_block *nb), {
    WRAP_RECURSIVE(nb);
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    kern_printk("register_netdevice_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(nb);
    int ret = register_netdevice_notifier(nb);
    POST_WRAPPER_FUNC(nb);
    kern_printk("register_netdevice_notifier returned.\n");
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_fprop_global_init
#define APP_WRAPPER_FOR_fprop_global_init
#endif
 
#ifndef APP_WRAPPER_FOR_fprop_global_init
#define APP_WRAPPER_FOR_fprop_global_init
FUNCTION_WRAPPER(fprop_global_init, (struct fprop_global *p), {
    kern_printk("fprop_global_init is invoked.\n");
    PRE_WRAPPER_FUNC(p);
    int ret = fprop_global_init(p);
    POST_WRAPPER_FUNC(p);
    kern_printk("fprop_global_init returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_next_log_block
#define APP_WRAPPER_FOR_jbd2_journal_next_log_block
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_next_log_block
#define APP_WRAPPER_FOR_jbd2_journal_next_log_block
FUNCTION_WRAPPER(jbd2_journal_next_log_block, (journal_t *_arg1, unsigned long long *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_next_log_block is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = jbd2_journal_next_log_block(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("jbd2_journal_next_log_block returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_tick_cancel_sched_timer
#define APP_WRAPPER_FOR_tick_cancel_sched_timer
#endif
 
#ifndef APP_WRAPPER_FOR_tick_cancel_sched_timer
#define APP_WRAPPER_FOR_tick_cancel_sched_timer
FUNCTION_WRAPPER_VOID(tick_cancel_sched_timer, (int cpu), {
    kern_printk("tick_cancel_sched_timer is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    tick_cancel_sched_timer(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("tick_cancel_sched_timer returned.\n");
})
#endif


#ifndef KERN_ADDR_dev_set_mtu
#define APP_WRAPPER_FOR_dev_set_mtu
#endif
 
#ifndef APP_WRAPPER_FOR_dev_set_mtu
#define APP_WRAPPER_FOR_dev_set_mtu
FUNCTION_WRAPPER(dev_set_mtu, (struct net_device *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("dev_set_mtu is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = dev_set_mtu(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("dev_set_mtu returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR___dev_remove_offload
#define APP_WRAPPER_FOR___dev_remove_offload
#endif
 
#ifndef APP_WRAPPER_FOR___dev_remove_offload
#define APP_WRAPPER_FOR___dev_remove_offload
FUNCTION_WRAPPER_VOID(__dev_remove_offload, (struct packet_offload *po), {
    WRAP_RECURSIVE(po);
    TRACES_IF_WATCHPOINT(po);
    SCAN_HEAD_FUNC(struct packet_offload)(*(TO_UNWATCHED_ADDRESS(po)));
    kern_printk("__dev_remove_offload is invoked.\n");
    PRE_WRAPPER_FUNC(po);
    __dev_remove_offload(po);
    POST_WRAPPER_FUNC(po);
    kern_printk("__dev_remove_offload returned.\n");
    TRACES_IF_WATCHPOINT(po);
    SCAN_HEAD_FUNC(struct packet_offload)(*(TO_UNWATCHED_ADDRESS(po)));
})
#endif


#ifndef KERN_ADDR_acpi_os_redirect_output
#define APP_WRAPPER_FOR_acpi_os_redirect_output
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_redirect_output
#define APP_WRAPPER_FOR_acpi_os_redirect_output
FUNCTION_WRAPPER_VOID(acpi_os_redirect_output, (void *destination), {
    kern_printk("acpi_os_redirect_output is invoked.\n");
    PRE_WRAPPER_FUNC(destination);
    acpi_os_redirect_output(destination);
    POST_WRAPPER_FUNC(destination);
    kern_printk("acpi_os_redirect_output returned.\n");
})
#endif


#ifndef KERN_ADDR_dev_change_flags
#define APP_WRAPPER_FOR_dev_change_flags
#endif
 
#ifndef APP_WRAPPER_FOR_dev_change_flags
#define APP_WRAPPER_FOR_dev_change_flags
FUNCTION_WRAPPER(dev_change_flags, (struct net_device *_arg1, unsigned int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("dev_change_flags is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = dev_change_flags(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("dev_change_flags returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pcibios_set_pcie_reset_state
#define APP_WRAPPER_FOR_pcibios_set_pcie_reset_state
#endif
 
#ifndef APP_WRAPPER_FOR_pcibios_set_pcie_reset_state
#define APP_WRAPPER_FOR_pcibios_set_pcie_reset_state
FUNCTION_WRAPPER(pcibios_set_pcie_reset_state, (struct pci_dev *dev, enum pcie_reset_state state), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pcibios_set_pcie_reset_state is invoked.\n");
    PRE_WRAPPER_FUNC(dev, state);
    int ret = pcibios_set_pcie_reset_state(dev, state);
    POST_WRAPPER_FUNC(dev, state);
    kern_printk("pcibios_set_pcie_reset_state returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_flow_cache_lookup
#define APP_WRAPPER_FOR_flow_cache_lookup
#endif
 
#ifndef APP_WRAPPER_FOR_flow_cache_lookup
#define APP_WRAPPER_FOR_flow_cache_lookup
FUNCTION_WRAPPER(flow_cache_lookup, (struct net *net, const struct flowi *key, u16 family, u8 dir, flow_resolve_t resolver, void *ctx), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    WRAP_FUNCTION(resolver);
    kern_printk("flow_cache_lookup is invoked.\n");
    PRE_WRAPPER_FUNC(net, key, family, dir, resolver, ctx);
    struct flow_cache_object *ret = flow_cache_lookup(net, key, family, dir, resolver, ctx);
    POST_WRAPPER_FUNC(net, key, family, dir, resolver, ctx);
    kern_printk("flow_cache_lookup returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_unregister_qdisc
#define APP_WRAPPER_FOR_unregister_qdisc
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_qdisc
#define APP_WRAPPER_FOR_unregister_qdisc
FUNCTION_WRAPPER(unregister_qdisc, (struct Qdisc_ops *qops), {
    WRAP_RECURSIVE(qops);
    TRACES_IF_WATCHPOINT(qops);
    SCAN_HEAD_FUNC(struct Qdisc_ops)(*(TO_UNWATCHED_ADDRESS(qops)));
    kern_printk("unregister_qdisc is invoked.\n");
    PRE_WRAPPER_FUNC(qops);
    int ret = unregister_qdisc(qops);
    POST_WRAPPER_FUNC(qops);
    kern_printk("unregister_qdisc returned.\n");
    TRACES_IF_WATCHPOINT(qops);
    SCAN_HEAD_FUNC(struct Qdisc_ops)(*(TO_UNWATCHED_ADDRESS(qops)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_port_wait_eh
#define APP_WRAPPER_FOR_ata_port_wait_eh
#endif
 
#ifndef APP_WRAPPER_FOR_ata_port_wait_eh
#define APP_WRAPPER_FOR_ata_port_wait_eh
FUNCTION_WRAPPER_VOID(ata_port_wait_eh, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_port_wait_eh is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    ata_port_wait_eh(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_port_wait_eh returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_groups_free
#define APP_WRAPPER_FOR_groups_free
#endif
 
#ifndef APP_WRAPPER_FOR_groups_free
#define APP_WRAPPER_FOR_groups_free
FUNCTION_WRAPPER_VOID(groups_free, (struct group_info *_arg1), {
    kern_printk("groups_free is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    groups_free(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("groups_free returned.\n");
})
#endif


#ifndef KERN_ADDR_split_vma
#define APP_WRAPPER_FOR_split_vma
#endif
 
#ifndef APP_WRAPPER_FOR_split_vma
#define APP_WRAPPER_FOR_split_vma
FUNCTION_WRAPPER(split_vma, (struct mm_struct *_arg1, struct vm_area_struct *_arg2, unsigned long addr, int new_below), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("split_vma is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, addr, new_below);
    int ret = split_vma(_arg1, _arg2, addr, new_below);
    POST_WRAPPER_FUNC(_arg1, _arg2, addr, new_below);
    kern_printk("split_vma returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_dev_pair
#define APP_WRAPPER_FOR_ata_dev_pair
#endif
 
#ifndef APP_WRAPPER_FOR_ata_dev_pair
#define APP_WRAPPER_FOR_ata_dev_pair
FUNCTION_WRAPPER(ata_dev_pair, (struct ata_device *adev), {
    WRAP_RECURSIVE(adev);
    TRACES_IF_WATCHPOINT(adev);
    SCAN_HEAD_FUNC(struct ata_device)(*(TO_UNWATCHED_ADDRESS(adev)));
    kern_printk("ata_dev_pair is invoked.\n");
    PRE_WRAPPER_FUNC(adev);
    struct ata_device *ret = ata_dev_pair(adev);
    POST_WRAPPER_FUNC(adev);
    kern_printk("ata_dev_pair returned.\n");
    TRACES_IF_WATCHPOINT(adev);
    SCAN_HEAD_FUNC(struct ata_device)(*(TO_UNWATCHED_ADDRESS(adev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_mempool_create_node
#define APP_WRAPPER_FOR_mempool_create_node
#endif
 
#ifndef APP_WRAPPER_FOR_mempool_create_node
#define APP_WRAPPER_FOR_mempool_create_node
FUNCTION_WRAPPER(mempool_create_node, (int min_nr, mempool_alloc_t *alloc_fn, mempool_free_t *free_fn, void *pool_data, gfp_t gfp_mask, int nid), {
    WRAP_FUNCTION(alloc_fn);
    WRAP_FUNCTION(free_fn);
    kern_printk("mempool_create_node is invoked.\n");
    PRE_WRAPPER_FUNC(min_nr, alloc_fn, free_fn, pool_data, gfp_mask, nid);
    mempool_t *ret = mempool_create_node(min_nr, alloc_fn, free_fn, pool_data, gfp_mask, nid);
    POST_WRAPPER_FUNC(min_nr, alloc_fn, free_fn, pool_data, gfp_mask, nid);
    kern_printk("mempool_create_node returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_memcpy_fromiovecend
#define APP_WRAPPER_FOR_memcpy_fromiovecend
#endif
 
#ifndef APP_WRAPPER_FOR_memcpy_fromiovecend
#define APP_WRAPPER_FOR_memcpy_fromiovecend
FUNCTION_WRAPPER(memcpy_fromiovecend, (unsigned char *kdata, const struct iovec *iov, int offset, int len), {
    kern_printk("memcpy_fromiovecend is invoked.\n");
    PRE_WRAPPER_FUNC(kdata, iov, offset, len);
    int ret = memcpy_fromiovecend(kdata, iov, offset, len);
    POST_WRAPPER_FUNC(kdata, iov, offset, len);
    kern_printk("memcpy_fromiovecend returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_apic_send_IPI_self
#define APP_WRAPPER_FOR_apic_send_IPI_self
#endif
 
#ifndef APP_WRAPPER_FOR_apic_send_IPI_self
#define APP_WRAPPER_FOR_apic_send_IPI_self
FUNCTION_WRAPPER_VOID(apic_send_IPI_self, (int vector), {
    kern_printk("apic_send_IPI_self is invoked.\n");
    PRE_WRAPPER_FUNC(vector);
    apic_send_IPI_self(vector);
    POST_WRAPPER_FUNC(vector);
    kern_printk("apic_send_IPI_self returned.\n");
})
#endif


#ifndef KERN_ADDR_bus_get_device_klist
#define APP_WRAPPER_FOR_bus_get_device_klist
#endif
 
#ifndef APP_WRAPPER_FOR_bus_get_device_klist
#define APP_WRAPPER_FOR_bus_get_device_klist
FUNCTION_WRAPPER(bus_get_device_klist, (struct bus_type *bus), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("bus_get_device_klist is invoked.\n");
    PRE_WRAPPER_FUNC(bus);
    struct klist *ret = bus_get_device_klist(bus);
    POST_WRAPPER_FUNC(bus);
    kern_printk("bus_get_device_klist returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt
#define APP_WRAPPER_FOR_invalidate_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt
#define APP_WRAPPER_FOR_invalidate_interrupt
FUNCTION_WRAPPER_VOID(invalidate_interrupt, (), {
    kern_printk("invalidate_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt returned.\n");
})
#endif


#ifndef KERN_ADDR_rt_mutex_setprio
#define APP_WRAPPER_FOR_rt_mutex_setprio
#endif
 
#ifndef APP_WRAPPER_FOR_rt_mutex_setprio
#define APP_WRAPPER_FOR_rt_mutex_setprio
FUNCTION_WRAPPER_VOID(rt_mutex_setprio, (struct task_struct *p, int prio), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("rt_mutex_setprio is invoked.\n");
    PRE_WRAPPER_FUNC(p, prio);
    rt_mutex_setprio(p, prio);
    POST_WRAPPER_FUNC(p, prio);
    kern_printk("rt_mutex_setprio returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
})
#endif


#ifndef KERN_ADDR_end_local_APIC_setup
#define APP_WRAPPER_FOR_end_local_APIC_setup
#endif
 
#ifndef APP_WRAPPER_FOR_end_local_APIC_setup
#define APP_WRAPPER_FOR_end_local_APIC_setup
FUNCTION_WRAPPER_VOID(end_local_APIC_setup, (), {
    kern_printk("end_local_APIC_setup is invoked.\n");
    PRE_WRAPPER_FUNC();
    end_local_APIC_setup();
    POST_WRAPPER_FUNC();
    kern_printk("end_local_APIC_setup returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_set_gpe_wake_mask
#define APP_WRAPPER_FOR_acpi_set_gpe_wake_mask
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_set_gpe_wake_mask
#define APP_WRAPPER_FOR_acpi_set_gpe_wake_mask
FUNCTION_WRAPPER(acpi_set_gpe_wake_mask, (acpi_handle gpe_device, u32 gpe_number, u8 action), {
    kern_printk("acpi_set_gpe_wake_mask is invoked.\n");
    PRE_WRAPPER_FUNC(gpe_device, gpe_number, action);
    acpi_status ret = acpi_set_gpe_wake_mask(gpe_device, gpe_number, action);
    POST_WRAPPER_FUNC(gpe_device, gpe_number, action);
    kern_printk("acpi_set_gpe_wake_mask returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_set_features
#define APP_WRAPPER_FOR_jbd2_journal_set_features
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_set_features
#define APP_WRAPPER_FOR_jbd2_journal_set_features
FUNCTION_WRAPPER(jbd2_journal_set_features, (journal_t *_arg1, unsigned long _arg2, unsigned long _arg3, unsigned long _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_set_features is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = jbd2_journal_set_features(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("jbd2_journal_set_features returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_readdir
#define APP_WRAPPER_FOR_vfs_readdir
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_readdir
#define APP_WRAPPER_FOR_vfs_readdir
FUNCTION_WRAPPER(vfs_readdir, (struct file *_arg1, filldir_t _arg2, void *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_FUNCTION(_arg2);
    kern_printk("vfs_readdir is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = vfs_readdir(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("vfs_readdir returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bitmap_find_free_region
#define APP_WRAPPER_FOR_bitmap_find_free_region
#endif
 
#ifndef APP_WRAPPER_FOR_bitmap_find_free_region
#define APP_WRAPPER_FOR_bitmap_find_free_region
FUNCTION_WRAPPER(bitmap_find_free_region, (unsigned long *bitmap, int bits, int order), {
    kern_printk("bitmap_find_free_region is invoked.\n");
    PRE_WRAPPER_FUNC(bitmap, bits, order);
    int ret = bitmap_find_free_region(bitmap, bits, order);
    POST_WRAPPER_FUNC(bitmap, bits, order);
    kern_printk("bitmap_find_free_region returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_netdev_change_features
#define APP_WRAPPER_FOR_netdev_change_features
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_change_features
#define APP_WRAPPER_FOR_netdev_change_features
FUNCTION_WRAPPER_VOID(netdev_change_features, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("netdev_change_features is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    netdev_change_features(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("netdev_change_features returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_generic_file_remap_pages
#define APP_WRAPPER_FOR_generic_file_remap_pages
#endif
 
#ifndef APP_WRAPPER_FOR_generic_file_remap_pages
#define APP_WRAPPER_FOR_generic_file_remap_pages
FUNCTION_WRAPPER(generic_file_remap_pages, (struct vm_area_struct *_arg1, unsigned long addr, unsigned long size, unsigned long pgoff), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("generic_file_remap_pages is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, addr, size, pgoff);
    int ret = generic_file_remap_pages(_arg1, addr, size, pgoff);
    POST_WRAPPER_FUNC(_arg1, addr, size, pgoff);
    kern_printk("generic_file_remap_pages returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_send_sigqueue
#define APP_WRAPPER_FOR_send_sigqueue
#endif
 
#ifndef APP_WRAPPER_FOR_send_sigqueue
#define APP_WRAPPER_FOR_send_sigqueue
FUNCTION_WRAPPER(send_sigqueue, (struct sigqueue *_arg1, struct task_struct *_arg2, int group), {
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("send_sigqueue is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, group);
    int ret = send_sigqueue(_arg1, _arg2, group);
    POST_WRAPPER_FUNC(_arg1, _arg2, group);
    kern_printk("send_sigqueue returned.\n");
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mdiobus_register
#define APP_WRAPPER_FOR_mdiobus_register
#endif
 
#ifndef APP_WRAPPER_FOR_mdiobus_register
#define APP_WRAPPER_FOR_mdiobus_register
FUNCTION_WRAPPER(mdiobus_register, (struct mii_bus *bus), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct mii_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("mdiobus_register is invoked.\n");
    PRE_WRAPPER_FUNC(bus);
    int ret = mdiobus_register(bus);
    POST_WRAPPER_FUNC(bus);
    kern_printk("mdiobus_register returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct mii_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    return ret;
})
#endif


#ifndef KERN_ADDR_get_max_files
#define APP_WRAPPER_FOR_get_max_files
#endif
 
#ifndef APP_WRAPPER_FOR_get_max_files
#define APP_WRAPPER_FOR_get_max_files
FUNCTION_WRAPPER(get_max_files, (), {
    kern_printk("get_max_files is invoked.\n");
    PRE_WRAPPER_FUNC();
    long ret = get_max_files();
    POST_WRAPPER_FUNC();
    kern_printk("get_max_files returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_bus_write_config_byte
#define APP_WRAPPER_FOR_pci_bus_write_config_byte
#endif
 
#ifndef APP_WRAPPER_FOR_pci_bus_write_config_byte
#define APP_WRAPPER_FOR_pci_bus_write_config_byte
FUNCTION_WRAPPER(pci_bus_write_config_byte, (struct pci_bus *bus, unsigned int devfn, int where, u8 val), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_bus_write_config_byte is invoked.\n");
    PRE_WRAPPER_FUNC(bus, devfn, where, val);
    int ret = pci_bus_write_config_byte(bus, devfn, where, val);
    POST_WRAPPER_FUNC(bus, devfn, where, val);
    kern_printk("pci_bus_write_config_byte returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_get_mempolicy
#define APP_WRAPPER_FOR_compat_sys_get_mempolicy
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_get_mempolicy
#define APP_WRAPPER_FOR_compat_sys_get_mempolicy
FUNCTION_WRAPPER(compat_sys_get_mempolicy, (int *policy, compat_ulong_t *nmask, compat_ulong_t maxnode, compat_ulong_t addr, compat_ulong_t flags), {
    kern_printk("compat_sys_get_mempolicy is invoked.\n");
    PRE_WRAPPER_FUNC(policy, nmask, maxnode, addr, flags);
    long ret = compat_sys_get_mempolicy(policy, nmask, maxnode, addr, flags);
    POST_WRAPPER_FUNC(policy, nmask, maxnode, addr, flags);
    kern_printk("compat_sys_get_mempolicy returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_free_initmem
#define APP_WRAPPER_FOR_free_initmem
#endif
 
#ifndef APP_WRAPPER_FOR_free_initmem
#define APP_WRAPPER_FOR_free_initmem
FUNCTION_WRAPPER_VOID(free_initmem, (), {
    kern_printk("free_initmem is invoked.\n");
    PRE_WRAPPER_FUNC();
    free_initmem();
    POST_WRAPPER_FUNC();
    kern_printk("free_initmem returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_create_slot
#define APP_WRAPPER_FOR_pci_create_slot
#endif
 
#ifndef APP_WRAPPER_FOR_pci_create_slot
#define APP_WRAPPER_FOR_pci_create_slot
FUNCTION_WRAPPER(pci_create_slot, (struct pci_bus *parent, int slot_nr, const char *name, struct hotplug_slot *hotplug), {
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(parent)));
    kern_printk("pci_create_slot is invoked.\n");
    PRE_WRAPPER_FUNC(parent, slot_nr, name, hotplug);
    struct pci_slot *ret = pci_create_slot(parent, slot_nr, name, hotplug);
    POST_WRAPPER_FUNC(parent, slot_nr, name, hotplug);
    kern_printk("pci_create_slot returned.\n");
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(parent)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_res_counter_uncharge_locked
#define APP_WRAPPER_FOR_res_counter_uncharge_locked
#endif
 
#ifndef APP_WRAPPER_FOR_res_counter_uncharge_locked
#define APP_WRAPPER_FOR_res_counter_uncharge_locked
FUNCTION_WRAPPER(res_counter_uncharge_locked, (struct res_counter *counter, unsigned long val), {
    kern_printk("res_counter_uncharge_locked is invoked.\n");
    PRE_WRAPPER_FUNC(counter, val);
    u64 ret = res_counter_uncharge_locked(counter, val);
    POST_WRAPPER_FUNC(counter, val);
    kern_printk("res_counter_uncharge_locked returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dquot_quota_off
#define APP_WRAPPER_FOR_dquot_quota_off
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_quota_off
#define APP_WRAPPER_FOR_dquot_quota_off
FUNCTION_WRAPPER(dquot_quota_off, (struct super_block *sb, int type), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("dquot_quota_off is invoked.\n");
    PRE_WRAPPER_FUNC(sb, type);
    int ret = dquot_quota_off(sb, type);
    POST_WRAPPER_FUNC(sb, type);
    kern_printk("dquot_quota_off returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dec_zone_state
#define APP_WRAPPER_FOR_dec_zone_state
#endif
 
#ifndef APP_WRAPPER_FOR_dec_zone_state
#define APP_WRAPPER_FOR_dec_zone_state
FUNCTION_WRAPPER_VOID(dec_zone_state, (struct zone *_arg1, enum zone_stat_item _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("dec_zone_state is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    dec_zone_state(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("dec_zone_state returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_wait_on_page_bit
#define APP_WRAPPER_FOR_wait_on_page_bit
#endif
 
#ifndef APP_WRAPPER_FOR_wait_on_page_bit
#define APP_WRAPPER_FOR_wait_on_page_bit
FUNCTION_WRAPPER_VOID(wait_on_page_bit, (struct page *page, int bit_nr), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("wait_on_page_bit is invoked.\n");
    PRE_WRAPPER_FUNC(page, bit_nr);
    wait_on_page_bit(page, bit_nr);
    POST_WRAPPER_FUNC(page, bit_nr);
    kern_printk("wait_on_page_bit returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_tick_setup_sched_timer
#define APP_WRAPPER_FOR_tick_setup_sched_timer
#endif
 
#ifndef APP_WRAPPER_FOR_tick_setup_sched_timer
#define APP_WRAPPER_FOR_tick_setup_sched_timer
FUNCTION_WRAPPER_VOID(tick_setup_sched_timer, (), {
    kern_printk("tick_setup_sched_timer is invoked.\n");
    PRE_WRAPPER_FUNC();
    tick_setup_sched_timer();
    POST_WRAPPER_FUNC();
    kern_printk("tick_setup_sched_timer returned.\n");
})
#endif


#ifndef KERN_ADDR_set_pages_wb
#define APP_WRAPPER_FOR_set_pages_wb
#endif
 
#ifndef APP_WRAPPER_FOR_set_pages_wb
#define APP_WRAPPER_FOR_set_pages_wb
FUNCTION_WRAPPER(set_pages_wb, (struct page *page, int numpages), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("set_pages_wb is invoked.\n");
    PRE_WRAPPER_FUNC(page, numpages);
    int ret = set_pages_wb(page, numpages);
    POST_WRAPPER_FUNC(page, numpages);
    kern_printk("set_pages_wb returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_path_lookup
#define APP_WRAPPER_FOR_vfs_path_lookup
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_path_lookup
#define APP_WRAPPER_FOR_vfs_path_lookup
FUNCTION_WRAPPER(vfs_path_lookup, (struct dentry *_arg1, struct vfsmount *_arg2, const char *_arg3, unsigned int _arg4, struct path *_arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg5);
    TRACES_IF_WATCHPOINT(_arg5);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg5)));
    kern_printk("vfs_path_lookup is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = vfs_path_lookup(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("vfs_path_lookup returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg5);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg5)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_get_device
#define APP_WRAPPER_FOR_dm_get_device
#endif
 
#ifndef APP_WRAPPER_FOR_dm_get_device
#define APP_WRAPPER_FOR_dm_get_device
FUNCTION_WRAPPER(dm_get_device, (struct dm_target *ti, const char *path, fmode_t mode, struct dm_dev **result), {
    WRAP_RECURSIVE(ti);
    TRACES_IF_WATCHPOINT(ti);
    SCAN_HEAD_FUNC(struct dm_target)(*(TO_UNWATCHED_ADDRESS(ti)));
    WRAP_RECURSIVE(result);
    TRACES_IF_WATCHPOINT(result);
    SCAN_HEAD_FUNC(struct dm_dev *)(*(TO_UNWATCHED_ADDRESS(result)));
    kern_printk("dm_get_device is invoked.\n");
    PRE_WRAPPER_FUNC(ti, path, mode, result);
    int ret = dm_get_device(ti, path, mode, result);
    POST_WRAPPER_FUNC(ti, path, mode, result);
    kern_printk("dm_get_device returned.\n");
    TRACES_IF_WATCHPOINT(ti);
    SCAN_HEAD_FUNC(struct dm_target)(*(TO_UNWATCHED_ADDRESS(ti)));
    TRACES_IF_WATCHPOINT(result);
    SCAN_HEAD_FUNC(struct dm_dev *)(*(TO_UNWATCHED_ADDRESS(result)));
    return ret;
})
#endif


#ifndef KERN_ADDR_netdev_rx_csum_fault
#define APP_WRAPPER_FOR_netdev_rx_csum_fault
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_rx_csum_fault
#define APP_WRAPPER_FOR_netdev_rx_csum_fault
FUNCTION_WRAPPER_VOID(netdev_rx_csum_fault, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("netdev_rx_csum_fault is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    netdev_rx_csum_fault(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("netdev_rx_csum_fault returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_nr_processes
#define APP_WRAPPER_FOR_nr_processes
#endif
 
#ifndef APP_WRAPPER_FOR_nr_processes
#define APP_WRAPPER_FOR_nr_processes
FUNCTION_WRAPPER(nr_processes, (), {
    kern_printk("nr_processes is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = nr_processes();
    POST_WRAPPER_FUNC();
    kern_printk("nr_processes returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_init_apic_mappings
#define APP_WRAPPER_FOR_init_apic_mappings
#endif
 
#ifndef APP_WRAPPER_FOR_init_apic_mappings
#define APP_WRAPPER_FOR_init_apic_mappings
FUNCTION_WRAPPER_VOID(init_apic_mappings, (), {
    kern_printk("init_apic_mappings is invoked.\n");
    PRE_WRAPPER_FUNC();
    init_apic_mappings();
    POST_WRAPPER_FUNC();
    kern_printk("init_apic_mappings returned.\n");
})
#endif


#ifndef KERN_ADDR___bad_percpu_size
#define APP_WRAPPER_FOR___bad_percpu_size
#endif
 
#ifndef APP_WRAPPER_FOR___bad_percpu_size
#define APP_WRAPPER_FOR___bad_percpu_size
FUNCTION_WRAPPER_VOID(__bad_percpu_size, (), {
    kern_printk("__bad_percpu_size is invoked.\n");
    PRE_WRAPPER_FUNC();
    __bad_percpu_size();
    POST_WRAPPER_FUNC();
    kern_printk("__bad_percpu_size returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_os_sleep
#define APP_WRAPPER_FOR_acpi_os_sleep
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_sleep
#define APP_WRAPPER_FOR_acpi_os_sleep
FUNCTION_WRAPPER_VOID(acpi_os_sleep, (u64 milliseconds), {
    kern_printk("acpi_os_sleep is invoked.\n");
    PRE_WRAPPER_FUNC(milliseconds);
    acpi_os_sleep(milliseconds);
    POST_WRAPPER_FUNC(milliseconds);
    kern_printk("acpi_os_sleep returned.\n");
})
#endif


#ifndef KERN_ADDR_compat_get_timeval
#define APP_WRAPPER_FOR_compat_get_timeval
#endif
 
#ifndef APP_WRAPPER_FOR_compat_get_timeval
#define APP_WRAPPER_FOR_compat_get_timeval
FUNCTION_WRAPPER(compat_get_timeval, (struct timeval *_arg1, const void *_arg2), {
    kern_printk("compat_get_timeval is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = compat_get_timeval(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("compat_get_timeval returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_seq_path_root
#define APP_WRAPPER_FOR_seq_path_root
#endif
 
#ifndef APP_WRAPPER_FOR_seq_path_root
#define APP_WRAPPER_FOR_seq_path_root
FUNCTION_WRAPPER(seq_path_root, (struct seq_file *m, const struct path *path, const struct path *root, const char *esc), {
    WRAP_RECURSIVE(m);
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
    WRAP_RECURSIVE(path);
    TRACES_IF_WATCHPOINT(path);
    SCAN_HEAD_FUNC(const struct path)(*(TO_UNWATCHED_ADDRESS(path)));
    WRAP_RECURSIVE(root);
    TRACES_IF_WATCHPOINT(root);
    SCAN_HEAD_FUNC(const struct path)(*(TO_UNWATCHED_ADDRESS(root)));
    kern_printk("seq_path_root is invoked.\n");
    PRE_WRAPPER_FUNC(m, path, root, esc);
    int ret = seq_path_root(m, path, root, esc);
    POST_WRAPPER_FUNC(m, path, root, esc);
    kern_printk("seq_path_root returned.\n");
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
    TRACES_IF_WATCHPOINT(path);
    SCAN_HEAD_FUNC(const struct path)(*(TO_UNWATCHED_ADDRESS(path)));
    TRACES_IF_WATCHPOINT(root);
    SCAN_HEAD_FUNC(const struct path)(*(TO_UNWATCHED_ADDRESS(root)));
    return ret;
})
#endif


#ifndef KERN_ADDR_seq_printf
#define APP_WRAPPER_FOR_seq_printf
#endif
 
#ifndef APP_WRAPPER_FOR_seq_printf
#define APP_WRAPPER_FOR_seq_printf
FUNCTION_WRAPPER(seq_printf, (struct seq_file *_arg1, const char *_arg2, ...), {
    va_list args__;
    va_start(args__, _arg2);
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    // TODO: variadic arguments
    kern_printk("seq_printf is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = seq_printf(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("seq_printf returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR___d_path
#define APP_WRAPPER_FOR___d_path
#endif
 
#ifndef APP_WRAPPER_FOR___d_path
#define APP_WRAPPER_FOR___d_path
FUNCTION_WRAPPER(__d_path, (const struct path *_arg1, const struct path *_arg2, char *_arg3, int _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(const struct path)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("__d_path is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    char *ret = __d_path(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("__d_path returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(const struct path)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_free_percpu
#define APP_WRAPPER_FOR_free_percpu
#endif
 
#ifndef APP_WRAPPER_FOR_free_percpu
#define APP_WRAPPER_FOR_free_percpu
FUNCTION_WRAPPER_VOID(free_percpu, (void *__pdata), {
    kern_printk("free_percpu is invoked.\n");
    PRE_WRAPPER_FUNC(__pdata);
    free_percpu(__pdata);
    POST_WRAPPER_FUNC(__pdata);
    kern_printk("free_percpu returned.\n");
})
#endif


#ifndef KERN_ADDR_do_group_exit
#define APP_WRAPPER_FOR_do_group_exit
#endif
 
#ifndef APP_WRAPPER_FOR_do_group_exit
#define APP_WRAPPER_FOR_do_group_exit
FUNCTION_WRAPPER_VOID(do_group_exit, (int _arg1), {
    kern_printk("do_group_exit is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    do_group_exit(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("do_group_exit returned.\n");
})
#endif


#ifndef KERN_ADDR_init_timers
#define APP_WRAPPER_FOR_init_timers
#endif
 
#ifndef APP_WRAPPER_FOR_init_timers
#define APP_WRAPPER_FOR_init_timers
FUNCTION_WRAPPER_VOID(init_timers, (), {
    kern_printk("init_timers is invoked.\n");
    PRE_WRAPPER_FUNC();
    init_timers();
    POST_WRAPPER_FUNC();
    kern_printk("init_timers returned.\n");
})
#endif


#ifndef KERN_ADDR_get_net_ns_by_fd
#define APP_WRAPPER_FOR_get_net_ns_by_fd
#endif
 
#ifndef APP_WRAPPER_FOR_get_net_ns_by_fd
#define APP_WRAPPER_FOR_get_net_ns_by_fd
FUNCTION_WRAPPER(get_net_ns_by_fd, (int pid), {
    kern_printk("get_net_ns_by_fd is invoked.\n");
    PRE_WRAPPER_FUNC(pid);
    struct net *ret = get_net_ns_by_fd(pid);
    POST_WRAPPER_FUNC(pid);
    kern_printk("get_net_ns_by_fd returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___dev_set_rx_mode
#define APP_WRAPPER_FOR___dev_set_rx_mode
#endif
 
#ifndef APP_WRAPPER_FOR___dev_set_rx_mode
#define APP_WRAPPER_FOR___dev_set_rx_mode
FUNCTION_WRAPPER_VOID(__dev_set_rx_mode, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("__dev_set_rx_mode is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    __dev_set_rx_mode(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("__dev_set_rx_mode returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_pcim_iomap_table
#define APP_WRAPPER_FOR_pcim_iomap_table
#endif
 
#ifndef APP_WRAPPER_FOR_pcim_iomap_table
#define APP_WRAPPER_FOR_pcim_iomap_table
FUNCTION_WRAPPER(pcim_iomap_table, (struct pci_dev *pdev), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("pcim_iomap_table is invoked.\n");
    PRE_WRAPPER_FUNC(pdev);
    void ** const ret = pcim_iomap_table(pdev);
    POST_WRAPPER_FUNC(pdev);
    kern_printk("pcim_iomap_table returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_idr_init_cache
#define APP_WRAPPER_FOR_idr_init_cache
#endif
 
#ifndef APP_WRAPPER_FOR_idr_init_cache
#define APP_WRAPPER_FOR_idr_init_cache
FUNCTION_WRAPPER_VOID(idr_init_cache, (), {
    kern_printk("idr_init_cache is invoked.\n");
    PRE_WRAPPER_FUNC();
    idr_init_cache();
    POST_WRAPPER_FUNC();
    kern_printk("idr_init_cache returned.\n");
})
#endif


#ifndef KERN_ADDR_pcim_iomap_regions_request_all
#define APP_WRAPPER_FOR_pcim_iomap_regions_request_all
#endif
 
#ifndef APP_WRAPPER_FOR_pcim_iomap_regions_request_all
#define APP_WRAPPER_FOR_pcim_iomap_regions_request_all
FUNCTION_WRAPPER(pcim_iomap_regions_request_all, (struct pci_dev *pdev, int mask, const char *name), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("pcim_iomap_regions_request_all is invoked.\n");
    PRE_WRAPPER_FUNC(pdev, mask, name);
    int ret = pcim_iomap_regions_request_all(pdev, mask, name);
    POST_WRAPPER_FUNC(pdev, mask, name);
    kern_printk("pcim_iomap_regions_request_all returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_pci_sff_init_one
#define APP_WRAPPER_FOR_ata_pci_sff_init_one
#endif
 
#ifndef APP_WRAPPER_FOR_ata_pci_sff_init_one
#define APP_WRAPPER_FOR_ata_pci_sff_init_one
FUNCTION_WRAPPER(ata_pci_sff_init_one, (struct pci_dev *pdev, const struct ata_port_info ** const ppi, struct scsi_host_template *sht, void *host_priv, int hflags), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    WRAP_RECURSIVE(ppi);
    TRACES_IF_WATCHPOINT(ppi);
  //  SCAN_HEAD_FUNC(const struct ata_port_info * const)(*(TO_UNWATCHED_ADDRESS(ppi)));
    WRAP_RECURSIVE(sht);
    TRACES_IF_WATCHPOINT(sht);
    SCAN_HEAD_FUNC(struct scsi_host_template)(*(TO_UNWATCHED_ADDRESS(sht)));
    kern_printk("ata_pci_sff_init_one is invoked.\n");
    PRE_WRAPPER_FUNC(pdev, ppi, sht, host_priv, hflags);
    int ret = ata_pci_sff_init_one(pdev, ppi, sht, host_priv, hflags);
    POST_WRAPPER_FUNC(pdev, ppi, sht, host_priv, hflags);
    kern_printk("ata_pci_sff_init_one returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    TRACES_IF_WATCHPOINT(ppi);
//    SCAN_HEAD_FUNC(const struct ata_port_info * const)(*(TO_UNWATCHED_ADDRESS(ppi)));
    TRACES_IF_WATCHPOINT(sht);
    SCAN_HEAD_FUNC(struct scsi_host_template)(*(TO_UNWATCHED_ADDRESS(sht)));
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_gc_mask_disable_reg
#define APP_WRAPPER_FOR_irq_gc_mask_disable_reg
#endif
 
#ifndef APP_WRAPPER_FOR_irq_gc_mask_disable_reg
#define APP_WRAPPER_FOR_irq_gc_mask_disable_reg
FUNCTION_WRAPPER_VOID(irq_gc_mask_disable_reg, (struct irq_data *d), {
    WRAP_RECURSIVE(d);
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(d)));
    kern_printk("irq_gc_mask_disable_reg is invoked.\n");
    PRE_WRAPPER_FUNC(d);
    irq_gc_mask_disable_reg(d);
    POST_WRAPPER_FUNC(d);
    kern_printk("irq_gc_mask_disable_reg returned.\n");
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(d)));
})
#endif


#ifndef KERN_ADDR_genphy_read_status
#define APP_WRAPPER_FOR_genphy_read_status
#endif
 
#ifndef APP_WRAPPER_FOR_genphy_read_status
#define APP_WRAPPER_FOR_genphy_read_status
FUNCTION_WRAPPER(genphy_read_status, (struct phy_device *phydev), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    kern_printk("genphy_read_status is invoked.\n");
    PRE_WRAPPER_FUNC(phydev);
    int ret = genphy_read_status(phydev);
    POST_WRAPPER_FUNC(phydev);
    kern_printk("genphy_read_status returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_acquire_object
#define APP_WRAPPER_FOR_acpi_os_acquire_object
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_acquire_object
#define APP_WRAPPER_FOR_acpi_os_acquire_object
FUNCTION_WRAPPER(acpi_os_acquire_object, (struct kmem_cache *cache), {
    WRAP_RECURSIVE(cache);
    TRACES_IF_WATCHPOINT(cache);
//    SCAN_HEAD_FUNC(struct kmem_cache)(*(TO_UNWATCHED_ADDRESS(cache)));
    kern_printk("acpi_os_acquire_object is invoked.\n");
    PRE_WRAPPER_FUNC(cache);
    void *ret = acpi_os_acquire_object(cache);
    POST_WRAPPER_FUNC(cache);
    kern_printk("acpi_os_acquire_object returned.\n");
    TRACES_IF_WATCHPOINT(cache);
 //   SCAN_HEAD_FUNC(struct kmem_cache)(*(TO_UNWATCHED_ADDRESS(cache)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_qdisc_watchdog_schedule
#define APP_WRAPPER_FOR_qdisc_watchdog_schedule
#endif
 
#ifndef APP_WRAPPER_FOR_qdisc_watchdog_schedule
#define APP_WRAPPER_FOR_qdisc_watchdog_schedule
FUNCTION_WRAPPER_VOID(qdisc_watchdog_schedule, (struct qdisc_watchdog *wd, psched_time_t expires), {
    WRAP_RECURSIVE(wd);
    TRACES_IF_WATCHPOINT(wd);
    SCAN_HEAD_FUNC(struct qdisc_watchdog)(*(TO_UNWATCHED_ADDRESS(wd)));
    kern_printk("qdisc_watchdog_schedule is invoked.\n");
    PRE_WRAPPER_FUNC(wd, expires);
    qdisc_watchdog_schedule(wd, expires);
    POST_WRAPPER_FUNC(wd, expires);
    kern_printk("qdisc_watchdog_schedule returned.\n");
    TRACES_IF_WATCHPOINT(wd);
    SCAN_HEAD_FUNC(struct qdisc_watchdog)(*(TO_UNWATCHED_ADDRESS(wd)));
})
#endif


#ifndef KERN_ADDR_bio_integrity_trim
#define APP_WRAPPER_FOR_bio_integrity_trim
#endif
 
#ifndef APP_WRAPPER_FOR_bio_integrity_trim
#define APP_WRAPPER_FOR_bio_integrity_trim
FUNCTION_WRAPPER_VOID(bio_integrity_trim, (struct bio *_arg1, unsigned int _arg2, unsigned int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bio_integrity_trim is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    bio_integrity_trim(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("bio_integrity_trim returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_nla_strcmp
#define APP_WRAPPER_FOR_nla_strcmp
#endif
 
#ifndef APP_WRAPPER_FOR_nla_strcmp
#define APP_WRAPPER_FOR_nla_strcmp
FUNCTION_WRAPPER(nla_strcmp, (const struct nlattr *nla, const char *str), {
    kern_printk("nla_strcmp is invoked.\n");
    PRE_WRAPPER_FUNC(nla, str);
    int ret = nla_strcmp(nla, str);
    POST_WRAPPER_FUNC(nla, str);
    kern_printk("nla_strcmp returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_rdmsr_on_cpus
#define APP_WRAPPER_FOR_rdmsr_on_cpus
#endif
 
#ifndef APP_WRAPPER_FOR_rdmsr_on_cpus
#define APP_WRAPPER_FOR_rdmsr_on_cpus
FUNCTION_WRAPPER_VOID(rdmsr_on_cpus, (const struct cpumask *mask, u32 msr_no, struct msr *msrs), {
    kern_printk("rdmsr_on_cpus is invoked.\n");
    PRE_WRAPPER_FUNC(mask, msr_no, msrs);
    rdmsr_on_cpus(mask, msr_no, msrs);
    POST_WRAPPER_FUNC(mask, msr_no, msrs);
    kern_printk("rdmsr_on_cpus returned.\n");
})
#endif


#ifndef KERN_ADDR_unregister_cdrom
#define APP_WRAPPER_FOR_unregister_cdrom
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_cdrom
#define APP_WRAPPER_FOR_unregister_cdrom
FUNCTION_WRAPPER_VOID(unregister_cdrom, (struct cdrom_device_info *cdi), {
    WRAP_RECURSIVE(cdi);
    TRACES_IF_WATCHPOINT(cdi);
    SCAN_HEAD_FUNC(struct cdrom_device_info)(*(TO_UNWATCHED_ADDRESS(cdi)));
    kern_printk("unregister_cdrom is invoked.\n");
    PRE_WRAPPER_FUNC(cdi);
    unregister_cdrom(cdi);
    POST_WRAPPER_FUNC(cdi);
    kern_printk("unregister_cdrom returned.\n");
    TRACES_IF_WATCHPOINT(cdi);
    SCAN_HEAD_FUNC(struct cdrom_device_info)(*(TO_UNWATCHED_ADDRESS(cdi)));
})
#endif


#ifndef KERN_ADDR_d_instantiate_unique
#define APP_WRAPPER_FOR_d_instantiate_unique
#endif
 
#ifndef APP_WRAPPER_FOR_d_instantiate_unique
#define APP_WRAPPER_FOR_d_instantiate_unique
FUNCTION_WRAPPER(d_instantiate_unique, (struct dentry *_arg1, struct inode *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("d_instantiate_unique is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct dentry *ret = d_instantiate_unique(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("d_instantiate_unique returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_create_proc_entry
#define APP_WRAPPER_FOR_create_proc_entry
#endif
 
#ifndef APP_WRAPPER_FOR_create_proc_entry
#define APP_WRAPPER_FOR_create_proc_entry
FUNCTION_WRAPPER(create_proc_entry, (const char *name, umode_t mode, struct proc_dir_entry *parent), {
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct proc_dir_entry)(*(TO_UNWATCHED_ADDRESS(parent)));
    kern_printk("create_proc_entry is invoked.\n");
    PRE_WRAPPER_FUNC(name, mode, parent);
    struct proc_dir_entry *ret = create_proc_entry(name, mode, parent);
    POST_WRAPPER_FUNC(name, mode, parent);
    kern_printk("create_proc_entry returned.\n");
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct proc_dir_entry)(*(TO_UNWATCHED_ADDRESS(parent)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_set_pcie_reset_state
#define APP_WRAPPER_FOR_pci_set_pcie_reset_state
#endif
 
#ifndef APP_WRAPPER_FOR_pci_set_pcie_reset_state
#define APP_WRAPPER_FOR_pci_set_pcie_reset_state
FUNCTION_WRAPPER(pci_set_pcie_reset_state, (struct pci_dev *dev, enum pcie_reset_state state), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_set_pcie_reset_state is invoked.\n");
    PRE_WRAPPER_FUNC(dev, state);
    int ret = pci_set_pcie_reset_state(dev, state);
    POST_WRAPPER_FUNC(dev, state);
    kern_printk("pci_set_pcie_reset_state returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR___dev_get_by_index
#define APP_WRAPPER_FOR___dev_get_by_index
#endif
 
#ifndef APP_WRAPPER_FOR___dev_get_by_index
#define APP_WRAPPER_FOR___dev_get_by_index
FUNCTION_WRAPPER(__dev_get_by_index, (struct net *net, int ifindex), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    kern_printk("__dev_get_by_index is invoked.\n");
    PRE_WRAPPER_FUNC(net, ifindex);
    struct net_device *ret = __dev_get_by_index(net, ifindex);
    POST_WRAPPER_FUNC(net, ifindex);
    kern_printk("__dev_get_by_index returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_cgroup_rm_cftypes
#define APP_WRAPPER_FOR_cgroup_rm_cftypes
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_rm_cftypes
#define APP_WRAPPER_FOR_cgroup_rm_cftypes
FUNCTION_WRAPPER(cgroup_rm_cftypes, (struct cgroup_subsys *ss, struct cftype *cfts), {
    WRAP_RECURSIVE(ss);
    TRACES_IF_WATCHPOINT(ss);
    SCAN_HEAD_FUNC(struct cgroup_subsys)(*(TO_UNWATCHED_ADDRESS(ss)));
    WRAP_RECURSIVE(cfts);
    TRACES_IF_WATCHPOINT(cfts);
    SCAN_HEAD_FUNC(struct cftype)(*(TO_UNWATCHED_ADDRESS(cfts)));
    kern_printk("cgroup_rm_cftypes is invoked.\n");
    PRE_WRAPPER_FUNC(ss, cfts);
    int ret = cgroup_rm_cftypes(ss, cfts);
    POST_WRAPPER_FUNC(ss, cfts);
    kern_printk("cgroup_rm_cftypes returned.\n");
    TRACES_IF_WATCHPOINT(ss);
    SCAN_HEAD_FUNC(struct cgroup_subsys)(*(TO_UNWATCHED_ADDRESS(ss)));
    TRACES_IF_WATCHPOINT(cfts);
    SCAN_HEAD_FUNC(struct cftype)(*(TO_UNWATCHED_ADDRESS(cfts)));
    return ret;
})
#endif


#ifndef KERN_ADDR_init_emergency_isa_pool
#define APP_WRAPPER_FOR_init_emergency_isa_pool
#endif
 
#ifndef APP_WRAPPER_FOR_init_emergency_isa_pool
#define APP_WRAPPER_FOR_init_emergency_isa_pool
FUNCTION_WRAPPER(init_emergency_isa_pool, (), {
    kern_printk("init_emergency_isa_pool is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = init_emergency_isa_pool();
    POST_WRAPPER_FUNC();
    kern_printk("init_emergency_isa_pool returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_arch_uprobe_post_xol
#define APP_WRAPPER_FOR_arch_uprobe_post_xol
#endif
 
#ifndef APP_WRAPPER_FOR_arch_uprobe_post_xol
#define APP_WRAPPER_FOR_arch_uprobe_post_xol
FUNCTION_WRAPPER(arch_uprobe_post_xol, (struct arch_uprobe *aup, struct pt_regs *regs), {
    kern_printk("arch_uprobe_post_xol is invoked.\n");
    PRE_WRAPPER_FUNC(aup, regs);
    int ret = arch_uprobe_post_xol(aup, regs);
    POST_WRAPPER_FUNC(aup, regs);
    kern_printk("arch_uprobe_post_xol returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_printk_needs_cpu
#define APP_WRAPPER_FOR_printk_needs_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_printk_needs_cpu
#define APP_WRAPPER_FOR_printk_needs_cpu
FUNCTION_WRAPPER(printk_needs_cpu, (int cpu), {
    kern_printk("printk_needs_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    int ret = printk_needs_cpu(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("printk_needs_cpu returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_arch_update_cpu_topology
#define APP_WRAPPER_FOR_arch_update_cpu_topology
#endif
 
#ifndef APP_WRAPPER_FOR_arch_update_cpu_topology
#define APP_WRAPPER_FOR_arch_update_cpu_topology
FUNCTION_WRAPPER(arch_update_cpu_topology, (), {
    kern_printk("arch_update_cpu_topology is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = arch_update_cpu_topology();
    POST_WRAPPER_FUNC();
    kern_printk("arch_update_cpu_topology returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_assign_unassigned_bus_resources
#define APP_WRAPPER_FOR_pci_assign_unassigned_bus_resources
#endif
 
#ifndef APP_WRAPPER_FOR_pci_assign_unassigned_bus_resources
#define APP_WRAPPER_FOR_pci_assign_unassigned_bus_resources
FUNCTION_WRAPPER_VOID(pci_assign_unassigned_bus_resources, (struct pci_bus *bus), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_assign_unassigned_bus_resources is invoked.\n");
    PRE_WRAPPER_FUNC(bus);
    pci_assign_unassigned_bus_resources(bus);
    POST_WRAPPER_FUNC(bus);
    kern_printk("pci_assign_unassigned_bus_resources returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
})
#endif


#ifndef KERN_ADDR___lock_page_or_retry
#define APP_WRAPPER_FOR___lock_page_or_retry
#endif
 
#ifndef APP_WRAPPER_FOR___lock_page_or_retry
#define APP_WRAPPER_FOR___lock_page_or_retry
FUNCTION_WRAPPER(__lock_page_or_retry, (struct page *page, struct mm_struct *mm, unsigned int flags), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    kern_printk("__lock_page_or_retry is invoked.\n");
    PRE_WRAPPER_FUNC(page, mm, flags);
    int ret = __lock_page_or_retry(page, mm, flags);
    POST_WRAPPER_FUNC(page, mm, flags);
    kern_printk("__lock_page_or_retry returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_port_schedule_eh
#define APP_WRAPPER_FOR_ata_port_schedule_eh
#endif
 
#ifndef APP_WRAPPER_FOR_ata_port_schedule_eh
#define APP_WRAPPER_FOR_ata_port_schedule_eh
FUNCTION_WRAPPER_VOID(ata_port_schedule_eh, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_port_schedule_eh is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    ata_port_schedule_eh(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_port_schedule_eh returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_nla_find
#define APP_WRAPPER_FOR_nla_find
#endif
 
#ifndef APP_WRAPPER_FOR_nla_find
#define APP_WRAPPER_FOR_nla_find
FUNCTION_WRAPPER(nla_find, (const struct nlattr *head, int len, int attrtype), {
    kern_printk("nla_find is invoked.\n");
    PRE_WRAPPER_FUNC(head, len, attrtype);
    struct nlattr *ret = nla_find(head, len, attrtype);
    POST_WRAPPER_FUNC(head, len, attrtype);
    kern_printk("nla_find returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_cable_sata
#define APP_WRAPPER_FOR_ata_cable_sata
#endif
 
#ifndef APP_WRAPPER_FOR_ata_cable_sata
#define APP_WRAPPER_FOR_ata_cable_sata
FUNCTION_WRAPPER(ata_cable_sata, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_cable_sata is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    int ret = ata_cable_sata(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_cable_sata returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR___mod_zone_page_state
#define APP_WRAPPER_FOR___mod_zone_page_state
#endif
 
#ifndef APP_WRAPPER_FOR___mod_zone_page_state
#define APP_WRAPPER_FOR___mod_zone_page_state
FUNCTION_WRAPPER_VOID(__mod_zone_page_state, (struct zone *_arg1, enum zone_stat_item item, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__mod_zone_page_state is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, item, _arg2);
    __mod_zone_page_state(_arg1, item, _arg2);
    POST_WRAPPER_FUNC(_arg1, item, _arg2);
    kern_printk("__mod_zone_page_state returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_swiotlb_sync_sg_for_device
#define APP_WRAPPER_FOR_swiotlb_sync_sg_for_device
#endif
 
#ifndef APP_WRAPPER_FOR_swiotlb_sync_sg_for_device
#define APP_WRAPPER_FOR_swiotlb_sync_sg_for_device
FUNCTION_WRAPPER_VOID(swiotlb_sync_sg_for_device, (struct device *hwdev, struct scatterlist *sg, int nelems, enum dma_data_direction dir), {
    WRAP_RECURSIVE(hwdev);
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
    kern_printk("swiotlb_sync_sg_for_device is invoked.\n");
    PRE_WRAPPER_FUNC(hwdev, sg, nelems, dir);
    swiotlb_sync_sg_for_device(hwdev, sg, nelems, dir);
    POST_WRAPPER_FUNC(hwdev, sg, nelems, dir);
    kern_printk("swiotlb_sync_sg_for_device returned.\n");
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
})
#endif


#ifndef KERN_ADDR_pm_generic_restore
#define APP_WRAPPER_FOR_pm_generic_restore
#endif
 
#ifndef APP_WRAPPER_FOR_pm_generic_restore
#define APP_WRAPPER_FOR_pm_generic_restore
FUNCTION_WRAPPER(pm_generic_restore, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pm_generic_restore is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pm_generic_restore(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pm_generic_restore returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_match_strdup
#define APP_WRAPPER_FOR_match_strdup
#endif
 
#ifndef APP_WRAPPER_FOR_match_strdup
#define APP_WRAPPER_FOR_match_strdup
FUNCTION_WRAPPER(match_strdup, (const substring_t *_arg1), {
    kern_printk("match_strdup is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    char *ret = match_strdup(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("match_strdup returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_netdev_class_create_file
#define APP_WRAPPER_FOR_netdev_class_create_file
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_class_create_file
#define APP_WRAPPER_FOR_netdev_class_create_file
FUNCTION_WRAPPER(netdev_class_create_file, (struct class_attribute *class_attr), {
    WRAP_RECURSIVE(class_attr);
    TRACES_IF_WATCHPOINT(class_attr);
    SCAN_HEAD_FUNC(struct class_attribute)(*(TO_UNWATCHED_ADDRESS(class_attr)));
    kern_printk("netdev_class_create_file is invoked.\n");
    PRE_WRAPPER_FUNC(class_attr);
    int ret = netdev_class_create_file(class_attr);
    POST_WRAPPER_FUNC(class_attr);
    kern_printk("netdev_class_create_file returned.\n");
    TRACES_IF_WATCHPOINT(class_attr);
    SCAN_HEAD_FUNC(struct class_attribute)(*(TO_UNWATCHED_ADDRESS(class_attr)));
    return ret;
})
#endif


#ifndef KERN_ADDR_find_bug
#define APP_WRAPPER_FOR_find_bug
#endif
 
#ifndef APP_WRAPPER_FOR_find_bug
#define APP_WRAPPER_FOR_find_bug
FUNCTION_WRAPPER(find_bug, (unsigned long bugaddr), {
    kern_printk("find_bug is invoked.\n");
    PRE_WRAPPER_FUNC(bugaddr);
    const struct bug_entry *ret = find_bug(bugaddr);
    POST_WRAPPER_FUNC(bugaddr);
    kern_printk("find_bug returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dcb_ieee_delapp
#define APP_WRAPPER_FOR_dcb_ieee_delapp
#endif
 
#ifndef APP_WRAPPER_FOR_dcb_ieee_delapp
#define APP_WRAPPER_FOR_dcb_ieee_delapp
FUNCTION_WRAPPER(dcb_ieee_delapp, (struct net_device *_arg1, struct dcb_app *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("dcb_ieee_delapp is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = dcb_ieee_delapp(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("dcb_ieee_delapp returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_register_reboot_notifier
#define APP_WRAPPER_FOR_register_reboot_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_register_reboot_notifier
#define APP_WRAPPER_FOR_register_reboot_notifier
FUNCTION_WRAPPER(register_reboot_notifier, (struct notifier_block *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("register_reboot_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = register_reboot_notifier(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("register_reboot_notifier returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vlan_uses_dev
#define APP_WRAPPER_FOR_vlan_uses_dev
#endif
 
#ifndef APP_WRAPPER_FOR_vlan_uses_dev
#define APP_WRAPPER_FOR_vlan_uses_dev
FUNCTION_WRAPPER(vlan_uses_dev, (const struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("vlan_uses_dev is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    bool ret = vlan_uses_dev(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("vlan_uses_dev returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR___cleancache_init_shared_fs
#define APP_WRAPPER_FOR___cleancache_init_shared_fs
#endif
 
#ifndef APP_WRAPPER_FOR___cleancache_init_shared_fs
#define APP_WRAPPER_FOR___cleancache_init_shared_fs
FUNCTION_WRAPPER_VOID(__cleancache_init_shared_fs, (char *_arg1, struct super_block *_arg2), {
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("__cleancache_init_shared_fs is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    __cleancache_init_shared_fs(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("__cleancache_init_shared_fs returned.\n");
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_kobj_ns_ops
#define APP_WRAPPER_FOR_kobj_ns_ops
#endif
 
#ifndef APP_WRAPPER_FOR_kobj_ns_ops
#define APP_WRAPPER_FOR_kobj_ns_ops
FUNCTION_WRAPPER(kobj_ns_ops, (struct kobject *kobj), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    kern_printk("kobj_ns_ops is invoked.\n");
    PRE_WRAPPER_FUNC(kobj);
    const struct kobj_ns_type_operations *ret = kobj_ns_ops(kobj);
    POST_WRAPPER_FUNC(kobj);
    kern_printk("kobj_ns_ops returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_enable_bridges
#define APP_WRAPPER_FOR_pci_enable_bridges
#endif
 
#ifndef APP_WRAPPER_FOR_pci_enable_bridges
#define APP_WRAPPER_FOR_pci_enable_bridges
FUNCTION_WRAPPER_VOID(pci_enable_bridges, (struct pci_bus *bus), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_enable_bridges is invoked.\n");
    PRE_WRAPPER_FUNC(bus);
    pci_enable_bridges(bus);
    POST_WRAPPER_FUNC(bus);
    kern_printk("pci_enable_bridges returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
})
#endif


#ifndef KERN_ADDR_dev_remove_offload
#define APP_WRAPPER_FOR_dev_remove_offload
#endif
 
#ifndef APP_WRAPPER_FOR_dev_remove_offload
#define APP_WRAPPER_FOR_dev_remove_offload
FUNCTION_WRAPPER_VOID(dev_remove_offload, (struct packet_offload *po), {
    WRAP_RECURSIVE(po);
    TRACES_IF_WATCHPOINT(po);
    SCAN_HEAD_FUNC(struct packet_offload)(*(TO_UNWATCHED_ADDRESS(po)));
    kern_printk("dev_remove_offload is invoked.\n");
    PRE_WRAPPER_FUNC(po);
    dev_remove_offload(po);
    POST_WRAPPER_FUNC(po);
    kern_printk("dev_remove_offload returned.\n");
    TRACES_IF_WATCHPOINT(po);
    SCAN_HEAD_FUNC(struct packet_offload)(*(TO_UNWATCHED_ADDRESS(po)));
})
#endif


#ifndef KERN_ADDR_all_vm_events
#define APP_WRAPPER_FOR_all_vm_events
#endif
 
#ifndef APP_WRAPPER_FOR_all_vm_events
#define APP_WRAPPER_FOR_all_vm_events
FUNCTION_WRAPPER_VOID(all_vm_events, (unsigned long *_arg1), {
    kern_printk("all_vm_events is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    all_vm_events(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("all_vm_events returned.\n");
})
#endif


#ifndef KERN_ADDR_fixup_exception
#define APP_WRAPPER_FOR_fixup_exception
#endif
 
#ifndef APP_WRAPPER_FOR_fixup_exception
#define APP_WRAPPER_FOR_fixup_exception
FUNCTION_WRAPPER(fixup_exception, (struct pt_regs *regs), {
    kern_printk("fixup_exception is invoked.\n");
    PRE_WRAPPER_FUNC(regs);
    int ret = fixup_exception(regs);
    POST_WRAPPER_FUNC(regs);
    kern_printk("fixup_exception returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_bus_for_each_drv
#define APP_WRAPPER_FOR_bus_for_each_drv
#endif
 
#ifndef APP_WRAPPER_FOR_bus_for_each_drv
#define APP_WRAPPER_FOR_bus_for_each_drv
FUNCTION_WRAPPER(bus_for_each_drv, (struct bus_type *bus, struct device_driver *start, void *data, int (*fn)(struct device_driver *, void *)), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    WRAP_RECURSIVE(start);
    TRACES_IF_WATCHPOINT(start);
    SCAN_HEAD_FUNC(struct device_driver)(*(TO_UNWATCHED_ADDRESS(start)));
    WRAP_FUNCTION(fn);
    kern_printk("bus_for_each_drv is invoked.\n");
    PRE_WRAPPER_FUNC(bus, start, data, fn);
    int ret = bus_for_each_drv(bus, start, data, fn);
    POST_WRAPPER_FUNC(bus, start, data, fn);
    kern_printk("bus_for_each_drv returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    TRACES_IF_WATCHPOINT(start);
    SCAN_HEAD_FUNC(struct device_driver)(*(TO_UNWATCHED_ADDRESS(start)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_exit_robust_list
#define APP_WRAPPER_FOR_compat_exit_robust_list
#endif
 
#ifndef APP_WRAPPER_FOR_compat_exit_robust_list
#define APP_WRAPPER_FOR_compat_exit_robust_list
FUNCTION_WRAPPER_VOID(compat_exit_robust_list, (struct task_struct *curr), {
    WRAP_RECURSIVE(curr);
    TRACES_IF_WATCHPOINT(curr);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(curr)));
    kern_printk("compat_exit_robust_list is invoked.\n");
    PRE_WRAPPER_FUNC(curr);
    compat_exit_robust_list(curr);
    POST_WRAPPER_FUNC(curr);
    kern_printk("compat_exit_robust_list returned.\n");
    TRACES_IF_WATCHPOINT(curr);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(curr)));
})
#endif


#ifndef KERN_ADDR_zone_reclaim
#define APP_WRAPPER_FOR_zone_reclaim
#endif
 
#ifndef APP_WRAPPER_FOR_zone_reclaim
#define APP_WRAPPER_FOR_zone_reclaim
FUNCTION_WRAPPER(zone_reclaim, (struct zone *_arg1, gfp_t _arg2, unsigned int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("zone_reclaim is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = zone_reclaim(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("zone_reclaim returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_shmem_zero_setup
#define APP_WRAPPER_FOR_shmem_zero_setup
#endif
 
#ifndef APP_WRAPPER_FOR_shmem_zero_setup
#define APP_WRAPPER_FOR_shmem_zero_setup
FUNCTION_WRAPPER(shmem_zero_setup, (struct vm_area_struct *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("shmem_zero_setup is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = shmem_zero_setup(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("shmem_zero_setup returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_do_dev_read_id
#define APP_WRAPPER_FOR_ata_do_dev_read_id
#endif
 
#ifndef APP_WRAPPER_FOR_ata_do_dev_read_id
#define APP_WRAPPER_FOR_ata_do_dev_read_id
FUNCTION_WRAPPER(ata_do_dev_read_id, (struct ata_device *dev, struct ata_taskfile *tf, u16 *id), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct ata_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("ata_do_dev_read_id is invoked.\n");
    PRE_WRAPPER_FUNC(dev, tf, id);
    int ret = ata_do_dev_read_id(dev, tf, id);
    POST_WRAPPER_FUNC(dev, tf, id);
    kern_printk("ata_do_dev_read_id returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct ata_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_get_disk
#define APP_WRAPPER_FOR_get_disk
#endif
 
#ifndef APP_WRAPPER_FOR_get_disk
#define APP_WRAPPER_FOR_get_disk
FUNCTION_WRAPPER(get_disk, (struct gendisk *disk), {
    WRAP_RECURSIVE(disk);
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    kern_printk("get_disk is invoked.\n");
    PRE_WRAPPER_FUNC(disk);
    struct kobject *ret = get_disk(disk);
    POST_WRAPPER_FUNC(disk);
    kern_printk("get_disk returned.\n");
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_swiotlb_detect_override
#define APP_WRAPPER_FOR_pci_swiotlb_detect_override
#endif
 
#ifndef APP_WRAPPER_FOR_pci_swiotlb_detect_override
#define APP_WRAPPER_FOR_pci_swiotlb_detect_override
FUNCTION_WRAPPER(pci_swiotlb_detect_override, (), {
    kern_printk("pci_swiotlb_detect_override is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = pci_swiotlb_detect_override();
    POST_WRAPPER_FUNC();
    kern_printk("pci_swiotlb_detect_override returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_default_wake_function
#define APP_WRAPPER_FOR_default_wake_function
#endif
 
#ifndef APP_WRAPPER_FOR_default_wake_function
#define APP_WRAPPER_FOR_default_wake_function
FUNCTION_WRAPPER(default_wake_function, (wait_queue_t *wait, unsigned int mode, int flags, void *key), {
    WRAP_RECURSIVE(wait);
    TRACES_IF_WATCHPOINT(wait);
    SCAN_HEAD_FUNC(wait_queue_t)(*(TO_UNWATCHED_ADDRESS(wait)));
    kern_printk("default_wake_function is invoked.\n");
    PRE_WRAPPER_FUNC(wait, mode, flags, key);
    int ret = default_wake_function(wait, mode, flags, key);
    POST_WRAPPER_FUNC(wait, mode, flags, key);
    kern_printk("default_wake_function returned.\n");
    TRACES_IF_WATCHPOINT(wait);
    SCAN_HEAD_FUNC(wait_queue_t)(*(TO_UNWATCHED_ADDRESS(wait)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_add_pm_notifier
#define APP_WRAPPER_FOR_acpi_add_pm_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_add_pm_notifier
#define APP_WRAPPER_FOR_acpi_add_pm_notifier
FUNCTION_WRAPPER(acpi_add_pm_notifier, (struct acpi_device *adev, acpi_notify_handler handler, void *context), {
    WRAP_RECURSIVE(adev);
    TRACES_IF_WATCHPOINT(adev);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(adev)));
    WRAP_FUNCTION(handler);
    kern_printk("acpi_add_pm_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(adev, handler, context);
    acpi_status ret = acpi_add_pm_notifier(adev, handler, context);
    POST_WRAPPER_FUNC(adev, handler, context);
    kern_printk("acpi_add_pm_notifier returned.\n");
    TRACES_IF_WATCHPOINT(adev);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(adev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_clear_nlink
#define APP_WRAPPER_FOR_clear_nlink
#endif
 
#ifndef APP_WRAPPER_FOR_clear_nlink
#define APP_WRAPPER_FOR_clear_nlink
FUNCTION_WRAPPER_VOID(clear_nlink, (struct inode *inode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("clear_nlink is invoked.\n");
    PRE_WRAPPER_FUNC(inode);
    clear_nlink(inode);
    POST_WRAPPER_FUNC(inode);
    kern_printk("clear_nlink returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_no_action
#define APP_WRAPPER_FOR_no_action
#endif
 
#ifndef APP_WRAPPER_FOR_no_action
#define APP_WRAPPER_FOR_no_action
FUNCTION_WRAPPER(no_action, (int cpl, void *dev_id), {
    kern_printk("no_action is invoked.\n");
    PRE_WRAPPER_FUNC(cpl, dev_id);
    irqreturn_t ret = no_action(cpl, dev_id);
    POST_WRAPPER_FUNC(cpl, dev_id);
    kern_printk("no_action returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_tracepoint_probe_unregister_noupdate
#define APP_WRAPPER_FOR_tracepoint_probe_unregister_noupdate
#endif
 
#ifndef APP_WRAPPER_FOR_tracepoint_probe_unregister_noupdate
#define APP_WRAPPER_FOR_tracepoint_probe_unregister_noupdate
FUNCTION_WRAPPER(tracepoint_probe_unregister_noupdate, (const char *name, void *probe, void *data), {
    kern_printk("tracepoint_probe_unregister_noupdate is invoked.\n");
    PRE_WRAPPER_FUNC(name, probe, data);
    int ret = tracepoint_probe_unregister_noupdate(name, probe, data);
    POST_WRAPPER_FUNC(name, probe, data);
    kern_printk("tracepoint_probe_unregister_noupdate returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_param_set_byte
#define APP_WRAPPER_FOR_param_set_byte
#endif
 
#ifndef APP_WRAPPER_FOR_param_set_byte
#define APP_WRAPPER_FOR_param_set_byte
FUNCTION_WRAPPER(param_set_byte, (const char *val, const struct kernel_param *kp), {
    WRAP_RECURSIVE(kp);
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    kern_printk("param_set_byte is invoked.\n");
    PRE_WRAPPER_FUNC(val, kp);
    int ret = param_set_byte(val, kp);
    POST_WRAPPER_FUNC(val, kp);
    kern_printk("param_set_byte returned.\n");
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_rtnl_link_register
#define APP_WRAPPER_FOR_rtnl_link_register
#endif
 
#ifndef APP_WRAPPER_FOR_rtnl_link_register
#define APP_WRAPPER_FOR_rtnl_link_register
FUNCTION_WRAPPER(rtnl_link_register, (struct rtnl_link_ops *ops), {
    WRAP_RECURSIVE(ops);
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct rtnl_link_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    kern_printk("rtnl_link_register is invoked.\n");
    PRE_WRAPPER_FUNC(ops);
    int ret = rtnl_link_register(ops);
    POST_WRAPPER_FUNC(ops);
    kern_printk("rtnl_link_register returned.\n");
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct rtnl_link_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    return ret;
})
#endif


#ifndef KERN_ADDR_klist_iter_exit
#define APP_WRAPPER_FOR_klist_iter_exit
#endif
 
#ifndef APP_WRAPPER_FOR_klist_iter_exit
#define APP_WRAPPER_FOR_klist_iter_exit
FUNCTION_WRAPPER_VOID(klist_iter_exit, (struct klist_iter *i), {
    WRAP_RECURSIVE(i);
    TRACES_IF_WATCHPOINT(i);
    SCAN_HEAD_FUNC(struct klist_iter)(*(TO_UNWATCHED_ADDRESS(i)));
    kern_printk("klist_iter_exit is invoked.\n");
    PRE_WRAPPER_FUNC(i);
    klist_iter_exit(i);
    POST_WRAPPER_FUNC(i);
    kern_printk("klist_iter_exit returned.\n");
    TRACES_IF_WATCHPOINT(i);
    SCAN_HEAD_FUNC(struct klist_iter)(*(TO_UNWATCHED_ADDRESS(i)));
})
#endif


#ifndef KERN_ADDR_blk_queue_dma_alignment
#define APP_WRAPPER_FOR_blk_queue_dma_alignment
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_dma_alignment
#define APP_WRAPPER_FOR_blk_queue_dma_alignment
FUNCTION_WRAPPER_VOID(blk_queue_dma_alignment, (struct request_queue *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_queue_dma_alignment is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    blk_queue_dma_alignment(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_queue_dma_alignment returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_d_absolute_path
#define APP_WRAPPER_FOR_d_absolute_path
#endif
 
#ifndef APP_WRAPPER_FOR_d_absolute_path
#define APP_WRAPPER_FOR_d_absolute_path
FUNCTION_WRAPPER(d_absolute_path, (const struct path *_arg1, char *_arg2, int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("d_absolute_path is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    char *ret = d_absolute_path(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("d_absolute_path returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___prop_inc_percpu_max
#define APP_WRAPPER_FOR___prop_inc_percpu_max
#endif
 
#ifndef APP_WRAPPER_FOR___prop_inc_percpu_max
#define APP_WRAPPER_FOR___prop_inc_percpu_max
FUNCTION_WRAPPER_VOID(__prop_inc_percpu_max, (struct prop_descriptor *pd, struct prop_local_percpu *pl, long frac), {
    WRAP_RECURSIVE(pd);
    TRACES_IF_WATCHPOINT(pd);
    SCAN_HEAD_FUNC(struct prop_descriptor)(*(TO_UNWATCHED_ADDRESS(pd)));
    kern_printk("__prop_inc_percpu_max is invoked.\n");
    PRE_WRAPPER_FUNC(pd, pl, frac);
    __prop_inc_percpu_max(pd, pl, frac);
    POST_WRAPPER_FUNC(pd, pl, frac);
    kern_printk("__prop_inc_percpu_max returned.\n");
    TRACES_IF_WATCHPOINT(pd);
    SCAN_HEAD_FUNC(struct prop_descriptor)(*(TO_UNWATCHED_ADDRESS(pd)));
})
#endif


#ifndef KERN_ADDR_sched_setaffinity
#define APP_WRAPPER_FOR_sched_setaffinity
#endif
 
#ifndef APP_WRAPPER_FOR_sched_setaffinity
#define APP_WRAPPER_FOR_sched_setaffinity
FUNCTION_WRAPPER(sched_setaffinity, (pid_t pid, const struct cpumask *new_mask), {
    kern_printk("sched_setaffinity is invoked.\n");
    PRE_WRAPPER_FUNC(pid, new_mask);
    long ret = sched_setaffinity(pid, new_mask);
    POST_WRAPPER_FUNC(pid, new_mask);
    kern_printk("sched_setaffinity returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_is_module_text_address
#define APP_WRAPPER_FOR_is_module_text_address
#endif
 
#ifndef APP_WRAPPER_FOR_is_module_text_address
#define APP_WRAPPER_FOR_is_module_text_address
FUNCTION_WRAPPER(is_module_text_address, (unsigned long addr), {
    kern_printk("is_module_text_address is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    bool ret = is_module_text_address(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("is_module_text_address returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_pci_irq_add_prt
#define APP_WRAPPER_FOR_acpi_pci_irq_add_prt
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_pci_irq_add_prt
#define APP_WRAPPER_FOR_acpi_pci_irq_add_prt
FUNCTION_WRAPPER(acpi_pci_irq_add_prt, (acpi_handle handle, int segment, int bus), {
    kern_printk("acpi_pci_irq_add_prt is invoked.\n");
    PRE_WRAPPER_FUNC(handle, segment, bus);
    int ret = acpi_pci_irq_add_prt(handle, segment, bus);
    POST_WRAPPER_FUNC(handle, segment, bus);
    kern_printk("acpi_pci_irq_add_prt returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_do_vfs_ioctl
#define APP_WRAPPER_FOR_do_vfs_ioctl
#endif
 
#ifndef APP_WRAPPER_FOR_do_vfs_ioctl
#define APP_WRAPPER_FOR_do_vfs_ioctl
FUNCTION_WRAPPER(do_vfs_ioctl, (struct file *filp, unsigned int fd, unsigned int cmd, unsigned long arg), {
    WRAP_RECURSIVE(filp);
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    kern_printk("do_vfs_ioctl is invoked.\n");
    PRE_WRAPPER_FUNC(filp, fd, cmd, arg);
    int ret = do_vfs_ioctl(filp, fd, cmd, arg);
    POST_WRAPPER_FUNC(filp, fd, cmd, arg);
    kern_printk("do_vfs_ioctl returned.\n");
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_reserve_region_with_split
#define APP_WRAPPER_FOR_reserve_region_with_split
#endif
 
#ifndef APP_WRAPPER_FOR_reserve_region_with_split
#define APP_WRAPPER_FOR_reserve_region_with_split
FUNCTION_WRAPPER_VOID(reserve_region_with_split, (struct resource *root, resource_size_t start, resource_size_t end, const char *name), {
    kern_printk("reserve_region_with_split is invoked.\n");
    PRE_WRAPPER_FUNC(root, start, end, name);
    reserve_region_with_split(root, start, end, name);
    POST_WRAPPER_FUNC(root, start, end, name);
    kern_printk("reserve_region_with_split returned.\n");
})
#endif


#ifndef KERN_ADDR_remap_vmalloc_range
#define APP_WRAPPER_FOR_remap_vmalloc_range
#endif
 
#ifndef APP_WRAPPER_FOR_remap_vmalloc_range
#define APP_WRAPPER_FOR_remap_vmalloc_range
FUNCTION_WRAPPER(remap_vmalloc_range, (struct vm_area_struct *vma, void *addr, unsigned long pgoff), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("remap_vmalloc_range is invoked.\n");
    PRE_WRAPPER_FUNC(vma, addr, pgoff);
    int ret = remap_vmalloc_range(vma, addr, pgoff);
    POST_WRAPPER_FUNC(vma, addr, pgoff);
    kern_printk("remap_vmalloc_range returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_iowrite32be
#define APP_WRAPPER_FOR_iowrite32be
#endif
 
#ifndef APP_WRAPPER_FOR_iowrite32be
#define APP_WRAPPER_FOR_iowrite32be
FUNCTION_WRAPPER_VOID(iowrite32be, (u32 _arg1, void *_arg2), {
    kern_printk("iowrite32be is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    iowrite32be(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("iowrite32be returned.\n");
})
#endif


#ifndef KERN_ADDR_rb_prev
#define APP_WRAPPER_FOR_rb_prev
#endif
 
#ifndef APP_WRAPPER_FOR_rb_prev
#define APP_WRAPPER_FOR_rb_prev
FUNCTION_WRAPPER(rb_prev, (const struct rb_node *_arg1), {
    kern_printk("rb_prev is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct rb_node *ret = rb_prev(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("rb_prev returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_bus_trim
#define APP_WRAPPER_FOR_acpi_bus_trim
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_bus_trim
#define APP_WRAPPER_FOR_acpi_bus_trim
FUNCTION_WRAPPER(acpi_bus_trim, (struct acpi_device *start, int rmdevice), {
    WRAP_RECURSIVE(start);
    TRACES_IF_WATCHPOINT(start);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(start)));
    kern_printk("acpi_bus_trim is invoked.\n");
    PRE_WRAPPER_FUNC(start, rmdevice);
    int ret = acpi_bus_trim(start, rmdevice);
    POST_WRAPPER_FUNC(start, rmdevice);
    kern_printk("acpi_bus_trim returned.\n");
    TRACES_IF_WATCHPOINT(start);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(start)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sff_drain_fifo
#define APP_WRAPPER_FOR_ata_sff_drain_fifo
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_drain_fifo
#define APP_WRAPPER_FOR_ata_sff_drain_fifo
FUNCTION_WRAPPER_VOID(ata_sff_drain_fifo, (struct ata_queued_cmd *qc), {
    WRAP_RECURSIVE(qc);
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    kern_printk("ata_sff_drain_fifo is invoked.\n");
    PRE_WRAPPER_FUNC(qc);
    ata_sff_drain_fifo(qc);
    POST_WRAPPER_FUNC(qc);
    kern_printk("ata_sff_drain_fifo returned.\n");
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
})
#endif


#ifndef KERN_ADDR_skb_to_sgvec
#define APP_WRAPPER_FOR_skb_to_sgvec
#endif
 
#ifndef APP_WRAPPER_FOR_skb_to_sgvec
#define APP_WRAPPER_FOR_skb_to_sgvec
FUNCTION_WRAPPER(skb_to_sgvec, (struct sk_buff *skb, struct scatterlist *sg, int offset, int len), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_to_sgvec is invoked.\n");
    PRE_WRAPPER_FUNC(skb, sg, offset, len);
    int ret = skb_to_sgvec(skb, sg, offset, len);
    POST_WRAPPER_FUNC(skb, sg, offset, len);
    kern_printk("skb_to_sgvec returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_exit_task_namespaces
#define APP_WRAPPER_FOR_exit_task_namespaces
#endif
 
#ifndef APP_WRAPPER_FOR_exit_task_namespaces
#define APP_WRAPPER_FOR_exit_task_namespaces
FUNCTION_WRAPPER_VOID(exit_task_namespaces, (struct task_struct *tsk), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("exit_task_namespaces is invoked.\n");
    PRE_WRAPPER_FUNC(tsk);
    exit_task_namespaces(tsk);
    POST_WRAPPER_FUNC(tsk);
    kern_printk("exit_task_namespaces returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
})
#endif


#ifndef KERN_ADDR_fifo_create_dflt
#define APP_WRAPPER_FOR_fifo_create_dflt
#endif
 
#ifndef APP_WRAPPER_FOR_fifo_create_dflt
#define APP_WRAPPER_FOR_fifo_create_dflt
FUNCTION_WRAPPER(fifo_create_dflt, (struct Qdisc *sch, struct Qdisc_ops *ops, unsigned int limit), {
    WRAP_RECURSIVE(sch);
    TRACES_IF_WATCHPOINT(sch);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(sch)));
    WRAP_RECURSIVE(ops);
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct Qdisc_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    kern_printk("fifo_create_dflt is invoked.\n");
    PRE_WRAPPER_FUNC(sch, ops, limit);
    struct Qdisc *ret = fifo_create_dflt(sch, ops, limit);
    POST_WRAPPER_FUNC(sch, ops, limit);
    kern_printk("fifo_create_dflt returned.\n");
    TRACES_IF_WATCHPOINT(sch);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(sch)));
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct Qdisc_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_set_irq_wake
#define APP_WRAPPER_FOR_irq_set_irq_wake
#endif
 
#ifndef APP_WRAPPER_FOR_irq_set_irq_wake
#define APP_WRAPPER_FOR_irq_set_irq_wake
FUNCTION_WRAPPER(irq_set_irq_wake, (unsigned int irq, unsigned int on), {
    kern_printk("irq_set_irq_wake is invoked.\n");
    PRE_WRAPPER_FUNC(irq, on);
    int ret = irq_set_irq_wake(irq, on);
    POST_WRAPPER_FUNC(irq, on);
    kern_printk("irq_set_irq_wake returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_iterate_supers
#define APP_WRAPPER_FOR_iterate_supers
#endif
 
#ifndef APP_WRAPPER_FOR_iterate_supers
#define APP_WRAPPER_FOR_iterate_supers
FUNCTION_WRAPPER_VOID(iterate_supers, (void (*_arg1)(struct super_block *, void *), void *_arg2), {
    WRAP_FUNCTION(_arg1);
    kern_printk("iterate_supers is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    iterate_supers(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("iterate_supers returned.\n");
})
#endif


#ifndef KERN_ADDR_dump_cpu_task
#define APP_WRAPPER_FOR_dump_cpu_task
#endif
 
#ifndef APP_WRAPPER_FOR_dump_cpu_task
#define APP_WRAPPER_FOR_dump_cpu_task
FUNCTION_WRAPPER_VOID(dump_cpu_task, (int cpu), {
    kern_printk("dump_cpu_task is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    dump_cpu_task(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("dump_cpu_task returned.\n");
})
#endif


#ifndef KERN_ADDR_jbd2_journal_wipe
#define APP_WRAPPER_FOR_jbd2_journal_wipe
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_wipe
#define APP_WRAPPER_FOR_jbd2_journal_wipe
FUNCTION_WRAPPER(jbd2_journal_wipe, (journal_t *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_wipe is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = jbd2_journal_wipe(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("jbd2_journal_wipe returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_devm_ioremap_release
#define APP_WRAPPER_FOR_devm_ioremap_release
#endif
 
#ifndef APP_WRAPPER_FOR_devm_ioremap_release
#define APP_WRAPPER_FOR_devm_ioremap_release
FUNCTION_WRAPPER_VOID(devm_ioremap_release, (struct device *dev, void *res), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("devm_ioremap_release is invoked.\n");
    PRE_WRAPPER_FUNC(dev, res);
    devm_ioremap_release(dev, res);
    POST_WRAPPER_FUNC(dev, res);
    kern_printk("devm_ioremap_release returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR___sk_backlog_rcv
#define APP_WRAPPER_FOR___sk_backlog_rcv
#endif
 
#ifndef APP_WRAPPER_FOR___sk_backlog_rcv
#define APP_WRAPPER_FOR___sk_backlog_rcv
FUNCTION_WRAPPER(__sk_backlog_rcv, (struct sock *sk, struct sk_buff *skb), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("__sk_backlog_rcv is invoked.\n");
    PRE_WRAPPER_FUNC(sk, skb);
    int ret = __sk_backlog_rcv(sk, skb);
    POST_WRAPPER_FUNC(sk, skb);
    kern_printk("__sk_backlog_rcv returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_second_overflow
#define APP_WRAPPER_FOR_second_overflow
#endif
 
#ifndef APP_WRAPPER_FOR_second_overflow
#define APP_WRAPPER_FOR_second_overflow
FUNCTION_WRAPPER(second_overflow, (unsigned long secs), {
    kern_printk("second_overflow is invoked.\n");
    PRE_WRAPPER_FUNC(secs);
    int ret = second_overflow(secs);
    POST_WRAPPER_FUNC(secs);
    kern_printk("second_overflow returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_kobject_del
#define APP_WRAPPER_FOR_kobject_del
#endif
 
#ifndef APP_WRAPPER_FOR_kobject_del
#define APP_WRAPPER_FOR_kobject_del
FUNCTION_WRAPPER_VOID(kobject_del, (struct kobject *kobj), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    kern_printk("kobject_del is invoked.\n");
    PRE_WRAPPER_FUNC(kobj);
    kobject_del(kobj);
    POST_WRAPPER_FUNC(kobj);
    kern_printk("kobject_del returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
})
#endif


#ifndef KERN_ADDR_freeze_super
#define APP_WRAPPER_FOR_freeze_super
#endif
 
#ifndef APP_WRAPPER_FOR_freeze_super
#define APP_WRAPPER_FOR_freeze_super
FUNCTION_WRAPPER(freeze_super, (struct super_block *super), {
    WRAP_RECURSIVE(super);
    TRACES_IF_WATCHPOINT(super);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(super)));
    kern_printk("freeze_super is invoked.\n");
    PRE_WRAPPER_FUNC(super);
    int ret = freeze_super(super);
    POST_WRAPPER_FUNC(super);
    kern_printk("freeze_super returned.\n");
    TRACES_IF_WATCHPOINT(super);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(super)));
    return ret;
})
#endif


#ifndef KERN_ADDR_arch_release_task_struct
#define APP_WRAPPER_FOR_arch_release_task_struct
#endif
 
#ifndef APP_WRAPPER_FOR_arch_release_task_struct
#define APP_WRAPPER_FOR_arch_release_task_struct
FUNCTION_WRAPPER_VOID(arch_release_task_struct, (struct task_struct *tsk), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("arch_release_task_struct is invoked.\n");
    PRE_WRAPPER_FUNC(tsk);
    arch_release_task_struct(tsk);
    POST_WRAPPER_FUNC(tsk);
    kern_printk("arch_release_task_struct returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
})
#endif


#ifndef KERN_ADDR_trim_init_extable
#define APP_WRAPPER_FOR_trim_init_extable
#endif
 
#ifndef APP_WRAPPER_FOR_trim_init_extable
#define APP_WRAPPER_FOR_trim_init_extable
FUNCTION_WRAPPER_VOID(trim_init_extable, (struct module *m), {
    WRAP_RECURSIVE(m);
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(m)));
    kern_printk("trim_init_extable is invoked.\n");
    PRE_WRAPPER_FUNC(m);
    trim_init_extable(m);
    POST_WRAPPER_FUNC(m);
    kern_printk("trim_init_extable returned.\n");
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(m)));
})
#endif


#ifndef KERN_ADDR_iunique
#define APP_WRAPPER_FOR_iunique
#endif
 
#ifndef APP_WRAPPER_FOR_iunique
#define APP_WRAPPER_FOR_iunique
FUNCTION_WRAPPER(iunique, (struct super_block *_arg1, ino_t _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("iunique is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    ino_t ret = iunique(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("iunique returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_locks_in_grace
#define APP_WRAPPER_FOR_locks_in_grace
#endif
 
#ifndef APP_WRAPPER_FOR_locks_in_grace
#define APP_WRAPPER_FOR_locks_in_grace
FUNCTION_WRAPPER(locks_in_grace, (struct net *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("locks_in_grace is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = locks_in_grace(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("locks_in_grace returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_read_cache_pages
#define APP_WRAPPER_FOR_read_cache_pages
#endif
 
#ifndef APP_WRAPPER_FOR_read_cache_pages
#define APP_WRAPPER_FOR_read_cache_pages
FUNCTION_WRAPPER(read_cache_pages, (struct address_space *mapping, struct list_head *pages, filler_t *filler, void *data), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    WRAP_FUNCTION(filler);
    kern_printk("read_cache_pages is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, pages, filler, data);
    int ret = read_cache_pages(mapping, pages, filler, data);
    POST_WRAPPER_FUNC(mapping, pages, filler, data);
    kern_printk("read_cache_pages returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    return ret;
})
#endif


#ifndef KERN_ADDR_timekeeping_max_deferment
#define APP_WRAPPER_FOR_timekeeping_max_deferment
#endif
 
#ifndef APP_WRAPPER_FOR_timekeeping_max_deferment
#define APP_WRAPPER_FOR_timekeeping_max_deferment
FUNCTION_WRAPPER(timekeeping_max_deferment, (), {
    kern_printk("timekeeping_max_deferment is invoked.\n");
    PRE_WRAPPER_FUNC();
    u64 ret = timekeeping_max_deferment();
    POST_WRAPPER_FUNC();
    kern_printk("timekeeping_max_deferment returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_check_addressable
#define APP_WRAPPER_FOR_generic_check_addressable
#endif
 
#ifndef APP_WRAPPER_FOR_generic_check_addressable
#define APP_WRAPPER_FOR_generic_check_addressable
FUNCTION_WRAPPER(generic_check_addressable, (unsigned int _arg1, u64 _arg2), {
    kern_printk("generic_check_addressable is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = generic_check_addressable(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("generic_check_addressable returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_unpoison_memory
#define APP_WRAPPER_FOR_unpoison_memory
#endif
 
#ifndef APP_WRAPPER_FOR_unpoison_memory
#define APP_WRAPPER_FOR_unpoison_memory
FUNCTION_WRAPPER(unpoison_memory, (unsigned long pfn), {
    kern_printk("unpoison_memory is invoked.\n");
    PRE_WRAPPER_FUNC(pfn);
    int ret = unpoison_memory(pfn);
    POST_WRAPPER_FUNC(pfn);
    kern_printk("unpoison_memory returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_noirqdebug_setup
#define APP_WRAPPER_FOR_noirqdebug_setup
#endif
 
#ifndef APP_WRAPPER_FOR_noirqdebug_setup
#define APP_WRAPPER_FOR_noirqdebug_setup
FUNCTION_WRAPPER(noirqdebug_setup, (char *str), {
    kern_printk("noirqdebug_setup is invoked.\n");
    PRE_WRAPPER_FUNC(str);
    int ret = noirqdebug_setup(str);
    POST_WRAPPER_FUNC(str);
    kern_printk("noirqdebug_setup returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___rtnl_unlock
#define APP_WRAPPER_FOR___rtnl_unlock
#endif
 
#ifndef APP_WRAPPER_FOR___rtnl_unlock
#define APP_WRAPPER_FOR___rtnl_unlock
FUNCTION_WRAPPER_VOID(__rtnl_unlock, (), {
    kern_printk("__rtnl_unlock is invoked.\n");
    PRE_WRAPPER_FUNC();
    __rtnl_unlock();
    POST_WRAPPER_FUNC();
    kern_printk("__rtnl_unlock returned.\n");
})
#endif


#ifndef KERN_ADDR_cap_ptrace_access_check
#define APP_WRAPPER_FOR_cap_ptrace_access_check
#endif
 
#ifndef APP_WRAPPER_FOR_cap_ptrace_access_check
#define APP_WRAPPER_FOR_cap_ptrace_access_check
FUNCTION_WRAPPER(cap_ptrace_access_check, (struct task_struct *child, unsigned int mode), {
    WRAP_RECURSIVE(child);
    TRACES_IF_WATCHPOINT(child);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(child)));
    kern_printk("cap_ptrace_access_check is invoked.\n");
    PRE_WRAPPER_FUNC(child, mode);
    int ret = cap_ptrace_access_check(child, mode);
    POST_WRAPPER_FUNC(child, mode);
    kern_printk("cap_ptrace_access_check returned.\n");
    TRACES_IF_WATCHPOINT(child);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(child)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ilookup5
#define APP_WRAPPER_FOR_ilookup5
#endif
 
#ifndef APP_WRAPPER_FOR_ilookup5
#define APP_WRAPPER_FOR_ilookup5
FUNCTION_WRAPPER(ilookup5, (struct super_block *sb, unsigned long hashval, int (*test)(struct inode *, void *), void *data), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    WRAP_FUNCTION(test);
    kern_printk("ilookup5 is invoked.\n");
    PRE_WRAPPER_FUNC(sb, hashval, test, data);
    struct inode *ret = ilookup5(sb, hashval, test, data);
    POST_WRAPPER_FUNC(sb, hashval, test, data);
    kern_printk("ilookup5 returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_textsearch_prepare
#define APP_WRAPPER_FOR_textsearch_prepare
#endif
 
#ifndef APP_WRAPPER_FOR_textsearch_prepare
#define APP_WRAPPER_FOR_textsearch_prepare
FUNCTION_WRAPPER(textsearch_prepare, (const char *_arg1, const void *_arg2, unsigned int _arg3, gfp_t _arg4, int _arg5), {
    kern_printk("textsearch_prepare is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    struct ts_config *ret = textsearch_prepare(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("textsearch_prepare returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_inode_wait_for_writeback
#define APP_WRAPPER_FOR_inode_wait_for_writeback
#endif
 
#ifndef APP_WRAPPER_FOR_inode_wait_for_writeback
#define APP_WRAPPER_FOR_inode_wait_for_writeback
FUNCTION_WRAPPER_VOID(inode_wait_for_writeback, (struct inode *inode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("inode_wait_for_writeback is invoked.\n");
    PRE_WRAPPER_FUNC(inode);
    inode_wait_for_writeback(inode);
    POST_WRAPPER_FUNC(inode);
    kern_printk("inode_wait_for_writeback returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_create_proc_profile
#define APP_WRAPPER_FOR_create_proc_profile
#endif
 
#ifndef APP_WRAPPER_FOR_create_proc_profile
#define APP_WRAPPER_FOR_create_proc_profile
FUNCTION_WRAPPER(create_proc_profile, (), {
    kern_printk("create_proc_profile is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = create_proc_profile();
    POST_WRAPPER_FUNC();
    kern_printk("create_proc_profile returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_seq_read
#define APP_WRAPPER_FOR_seq_read
#endif
 
#ifndef APP_WRAPPER_FOR_seq_read
#define APP_WRAPPER_FOR_seq_read
FUNCTION_WRAPPER(seq_read, (struct file *_arg1, char *_arg2, size_t _arg3, loff_t *_arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("seq_read is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    ssize_t ret = seq_read(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("seq_read returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_put_request
#define APP_WRAPPER_FOR_blk_put_request
#endif
 
#ifndef APP_WRAPPER_FOR_blk_put_request
#define APP_WRAPPER_FOR_blk_put_request
FUNCTION_WRAPPER_VOID(blk_put_request, (struct request *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_put_request is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    blk_put_request(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("blk_put_request returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_vmap
#define APP_WRAPPER_FOR_vmap
#endif
 
#ifndef APP_WRAPPER_FOR_vmap
#define APP_WRAPPER_FOR_vmap
FUNCTION_WRAPPER(vmap, (struct page **pages, unsigned int count, unsigned long flags, pgprot_t prot), {
    WRAP_RECURSIVE(pages);
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    kern_printk("vmap is invoked.\n");
    PRE_WRAPPER_FUNC(pages, count, flags, prot);
    void *ret = vmap(pages, count, flags, prot);
    POST_WRAPPER_FUNC(pages, count, flags, prot);
    kern_printk("vmap returned.\n");
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_use_tsc_delay
#define APP_WRAPPER_FOR_use_tsc_delay
#endif
 
#ifndef APP_WRAPPER_FOR_use_tsc_delay
#define APP_WRAPPER_FOR_use_tsc_delay
FUNCTION_WRAPPER_VOID(use_tsc_delay, (), {
    kern_printk("use_tsc_delay is invoked.\n");
    PRE_WRAPPER_FUNC();
    use_tsc_delay();
    POST_WRAPPER_FUNC();
    kern_printk("use_tsc_delay returned.\n");
})
#endif


#ifndef KERN_ADDR_scsi_host_lookup
#define APP_WRAPPER_FOR_scsi_host_lookup
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_host_lookup
#define APP_WRAPPER_FOR_scsi_host_lookup
FUNCTION_WRAPPER(scsi_host_lookup, (unsigned short _arg1), {
    kern_printk("scsi_host_lookup is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct Scsi_Host *ret = scsi_host_lookup(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("scsi_host_lookup returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sk_stream_wait_close
#define APP_WRAPPER_FOR_sk_stream_wait_close
#endif
 
#ifndef APP_WRAPPER_FOR_sk_stream_wait_close
#define APP_WRAPPER_FOR_sk_stream_wait_close
FUNCTION_WRAPPER_VOID(sk_stream_wait_close, (struct sock *sk, long timeo_p), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sk_stream_wait_close is invoked.\n");
    PRE_WRAPPER_FUNC(sk, timeo_p);
    sk_stream_wait_close(sk, timeo_p);
    POST_WRAPPER_FUNC(sk, timeo_p);
    kern_printk("sk_stream_wait_close returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR_pci_test_config_bits
#define APP_WRAPPER_FOR_pci_test_config_bits
#endif
 
#ifndef APP_WRAPPER_FOR_pci_test_config_bits
#define APP_WRAPPER_FOR_pci_test_config_bits
FUNCTION_WRAPPER(pci_test_config_bits, (struct pci_dev *pdev, const struct pci_bits *bits), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("pci_test_config_bits is invoked.\n");
    PRE_WRAPPER_FUNC(pdev, bits);
    int ret = pci_test_config_bits(pdev, bits);
    POST_WRAPPER_FUNC(pdev, bits);
    kern_printk("pci_test_config_bits returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_try_to_free_buffers
#define APP_WRAPPER_FOR_try_to_free_buffers
#endif
 
#ifndef APP_WRAPPER_FOR_try_to_free_buffers
#define APP_WRAPPER_FOR_try_to_free_buffers
FUNCTION_WRAPPER(try_to_free_buffers, (struct page *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("try_to_free_buffers is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = try_to_free_buffers(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("try_to_free_buffers returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_set_memory_uc
#define APP_WRAPPER_FOR_set_memory_uc
#endif
 
#ifndef APP_WRAPPER_FOR_set_memory_uc
#define APP_WRAPPER_FOR_set_memory_uc
FUNCTION_WRAPPER(set_memory_uc, (unsigned long addr, int numpages), {
    kern_printk("set_memory_uc is invoked.\n");
    PRE_WRAPPER_FUNC(addr, numpages);
    int ret = set_memory_uc(addr, numpages);
    POST_WRAPPER_FUNC(addr, numpages);
    kern_printk("set_memory_uc returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_print_cpu_msr
#define APP_WRAPPER_FOR_print_cpu_msr
#endif
 
#ifndef APP_WRAPPER_FOR_print_cpu_msr
#define APP_WRAPPER_FOR_print_cpu_msr
FUNCTION_WRAPPER_VOID(print_cpu_msr, (struct cpuinfo_x86 *_arg1), {
    kern_printk("print_cpu_msr is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    print_cpu_msr(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("print_cpu_msr returned.\n");
})
#endif


#ifndef KERN_ADDR_blk_queue_max_discard_sectors
#define APP_WRAPPER_FOR_blk_queue_max_discard_sectors
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_max_discard_sectors
#define APP_WRAPPER_FOR_blk_queue_max_discard_sectors
FUNCTION_WRAPPER_VOID(blk_queue_max_discard_sectors, (struct request_queue *q, unsigned int max_discard_sectors), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    kern_printk("blk_queue_max_discard_sectors is invoked.\n");
    PRE_WRAPPER_FUNC(q, max_discard_sectors);
    blk_queue_max_discard_sectors(q, max_discard_sectors);
    POST_WRAPPER_FUNC(q, max_discard_sectors);
    kern_printk("blk_queue_max_discard_sectors returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
})
#endif


#ifndef KERN_ADDR_dma_pool_alloc
#define APP_WRAPPER_FOR_dma_pool_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_dma_pool_alloc
#define APP_WRAPPER_FOR_dma_pool_alloc
FUNCTION_WRAPPER(dma_pool_alloc, (struct dma_pool *pool, gfp_t mem_flags, dma_addr_t *handle), {
    kern_printk("dma_pool_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(pool, mem_flags, handle);
    void *ret = dma_pool_alloc(pool, mem_flags, handle);
    POST_WRAPPER_FUNC(pool, mem_flags, handle);
    kern_printk("dma_pool_alloc returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ack_bad_irq
#define APP_WRAPPER_FOR_ack_bad_irq
#endif
 
#ifndef APP_WRAPPER_FOR_ack_bad_irq
#define APP_WRAPPER_FOR_ack_bad_irq
FUNCTION_WRAPPER_VOID(ack_bad_irq, (unsigned int irq), {
    kern_printk("ack_bad_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq);
    ack_bad_irq(irq);
    POST_WRAPPER_FUNC(irq);
    kern_printk("ack_bad_irq returned.\n");
})
#endif


#ifndef KERN_ADDR_max_sane_readahead
#define APP_WRAPPER_FOR_max_sane_readahead
#endif
 
#ifndef APP_WRAPPER_FOR_max_sane_readahead
#define APP_WRAPPER_FOR_max_sane_readahead
FUNCTION_WRAPPER(max_sane_readahead, (unsigned long nr), {
    kern_printk("max_sane_readahead is invoked.\n");
    PRE_WRAPPER_FUNC(nr);
    long ret = max_sane_readahead(nr);
    POST_WRAPPER_FUNC(nr);
    kern_printk("max_sane_readahead returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_qid_lt
#define APP_WRAPPER_FOR_qid_lt
#endif
 
#ifndef APP_WRAPPER_FOR_qid_lt
#define APP_WRAPPER_FOR_qid_lt
FUNCTION_WRAPPER(qid_lt, (struct kqid left, struct kqid right), {
    kern_printk("qid_lt is invoked.\n");
    PRE_WRAPPER_FUNC(left, right);
    bool ret = qid_lt(left, right);
    POST_WRAPPER_FUNC(left, right);
    kern_printk("qid_lt returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_csk_search_req
#define APP_WRAPPER_FOR_inet_csk_search_req
#endif
 
#ifndef APP_WRAPPER_FOR_inet_csk_search_req
#define APP_WRAPPER_FOR_inet_csk_search_req
FUNCTION_WRAPPER(inet_csk_search_req, (const struct sock *sk, struct request_sock ***prevp, const __be16 rport, const __be32 raddr, const __be32 laddr), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(const struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(prevp);
    TRACES_IF_WATCHPOINT(prevp);
    SCAN_HEAD_FUNC(struct request_sock **)(*(TO_UNWATCHED_ADDRESS(prevp)));
    kern_printk("inet_csk_search_req is invoked.\n");
    PRE_WRAPPER_FUNC(sk, prevp, rport, raddr, laddr);
    struct request_sock *ret = inet_csk_search_req(sk, prevp, rport, raddr, laddr);
    POST_WRAPPER_FUNC(sk, prevp, rport, raddr, laddr);
    kern_printk("inet_csk_search_req returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(const struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(prevp);
    SCAN_HEAD_FUNC(struct request_sock **)(*(TO_UNWATCHED_ADDRESS(prevp)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_release_region
#define APP_WRAPPER_FOR_pci_release_region
#endif
 
#ifndef APP_WRAPPER_FOR_pci_release_region
#define APP_WRAPPER_FOR_pci_release_region
FUNCTION_WRAPPER_VOID(pci_release_region, (struct pci_dev *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("pci_release_region is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    pci_release_region(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("pci_release_region returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_eth_validate_addr
#define APP_WRAPPER_FOR_eth_validate_addr
#endif
 
#ifndef APP_WRAPPER_FOR_eth_validate_addr
#define APP_WRAPPER_FOR_eth_validate_addr
FUNCTION_WRAPPER(eth_validate_addr, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("eth_validate_addr is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = eth_validate_addr(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("eth_validate_addr returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_to_desc
#define APP_WRAPPER_FOR_irq_to_desc
#endif
 
#ifndef APP_WRAPPER_FOR_irq_to_desc
#define APP_WRAPPER_FOR_irq_to_desc
FUNCTION_WRAPPER(irq_to_desc, (unsigned int irq), {
    kern_printk("irq_to_desc is invoked.\n");
    PRE_WRAPPER_FUNC(irq);
    struct irq_desc *ret = irq_to_desc(irq);
    POST_WRAPPER_FUNC(irq);
    kern_printk("irq_to_desc returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_jiffies_to_timeval
#define APP_WRAPPER_FOR_jiffies_to_timeval
#endif
 
#ifndef APP_WRAPPER_FOR_jiffies_to_timeval
#define APP_WRAPPER_FOR_jiffies_to_timeval
FUNCTION_WRAPPER_VOID(jiffies_to_timeval, (unsigned const long jiffies, struct timeval *value), {
    kern_printk("jiffies_to_timeval is invoked.\n");
    PRE_WRAPPER_FUNC(jiffies, value);
    jiffies_to_timeval(jiffies, value);
    POST_WRAPPER_FUNC(jiffies, value);
    kern_printk("jiffies_to_timeval returned.\n");
})
#endif


#ifndef KERN_ADDR_iounmap
#define APP_WRAPPER_FOR_iounmap
#endif
 
#ifndef APP_WRAPPER_FOR_iounmap
#define APP_WRAPPER_FOR_iounmap
FUNCTION_WRAPPER_VOID(iounmap, (volatile void *addr), {
    kern_printk("iounmap is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    iounmap(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("iounmap returned.\n");
})
#endif


#ifndef KERN_ADDR_idr_find
#define APP_WRAPPER_FOR_idr_find
#endif
 
#ifndef APP_WRAPPER_FOR_idr_find
#define APP_WRAPPER_FOR_idr_find
FUNCTION_WRAPPER(idr_find, (struct idr *idp, int id), {
    WRAP_RECURSIVE(idp);
    TRACES_IF_WATCHPOINT(idp);
    SCAN_HEAD_FUNC(struct idr)(*(TO_UNWATCHED_ADDRESS(idp)));
    kern_printk("idr_find is invoked.\n");
    PRE_WRAPPER_FUNC(idp, id);
    void *ret = idr_find(idp, id);
    POST_WRAPPER_FUNC(idp, id);
    kern_printk("idr_find returned.\n");
    TRACES_IF_WATCHPOINT(idp);
    SCAN_HEAD_FUNC(struct idr)(*(TO_UNWATCHED_ADDRESS(idp)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_swap_shmem_alloc
#define APP_WRAPPER_FOR_swap_shmem_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_swap_shmem_alloc
#define APP_WRAPPER_FOR_swap_shmem_alloc
FUNCTION_WRAPPER_VOID(swap_shmem_alloc, (swp_entry_t _arg1), {
    kern_printk("swap_shmem_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    swap_shmem_alloc(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("swap_shmem_alloc returned.\n");
})
#endif


#ifndef KERN_ADDR_new_inode
#define APP_WRAPPER_FOR_new_inode
#endif
 
#ifndef APP_WRAPPER_FOR_new_inode
#define APP_WRAPPER_FOR_new_inode
FUNCTION_WRAPPER(new_inode, (struct super_block *sb), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("new_inode is invoked.\n");
    PRE_WRAPPER_FUNC(sb);
    struct inode *ret = new_inode(sb);
    POST_WRAPPER_FUNC(sb);
    kern_printk("new_inode returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pm_generic_resume_noirq
#define APP_WRAPPER_FOR_pm_generic_resume_noirq
#endif
 
#ifndef APP_WRAPPER_FOR_pm_generic_resume_noirq
#define APP_WRAPPER_FOR_pm_generic_resume_noirq
FUNCTION_WRAPPER(pm_generic_resume_noirq, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pm_generic_resume_noirq is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pm_generic_resume_noirq(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pm_generic_resume_noirq returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_table_parse_madt
#define APP_WRAPPER_FOR_acpi_table_parse_madt
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_table_parse_madt
#define APP_WRAPPER_FOR_acpi_table_parse_madt
FUNCTION_WRAPPER(acpi_table_parse_madt, (enum acpi_madt_type id, acpi_table_entry_handler handler, unsigned int max_entries), {
    WRAP_FUNCTION(handler);
    kern_printk("acpi_table_parse_madt is invoked.\n");
    PRE_WRAPPER_FUNC(id, handler, max_entries);
    int ret = acpi_table_parse_madt(id, handler, max_entries);
    POST_WRAPPER_FUNC(id, handler, max_entries);
    kern_printk("acpi_table_parse_madt returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_parse_early_options
#define APP_WRAPPER_FOR_parse_early_options
#endif
 
#ifndef APP_WRAPPER_FOR_parse_early_options
#define APP_WRAPPER_FOR_parse_early_options
FUNCTION_WRAPPER_VOID(parse_early_options, (char *cmdline), {
    kern_printk("parse_early_options is invoked.\n");
    PRE_WRAPPER_FUNC(cmdline);
    parse_early_options(cmdline);
    POST_WRAPPER_FUNC(cmdline);
    kern_printk("parse_early_options returned.\n");
})
#endif


#ifndef KERN_ADDR___round_jiffies_up
#define APP_WRAPPER_FOR___round_jiffies_up
#endif
 
#ifndef APP_WRAPPER_FOR___round_jiffies_up
#define APP_WRAPPER_FOR___round_jiffies_up
FUNCTION_WRAPPER(__round_jiffies_up, (unsigned long j, int cpu), {
    kern_printk("__round_jiffies_up is invoked.\n");
    PRE_WRAPPER_FUNC(j, cpu);
    long ret = __round_jiffies_up(j, cpu);
    POST_WRAPPER_FUNC(j, cpu);
    kern_printk("__round_jiffies_up returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_clocksource_unregister
#define APP_WRAPPER_FOR_clocksource_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_clocksource_unregister
#define APP_WRAPPER_FOR_clocksource_unregister
FUNCTION_WRAPPER_VOID(clocksource_unregister, (struct clocksource *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct clocksource)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("clocksource_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    clocksource_unregister(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("clocksource_unregister returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct clocksource)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR___cleancache_invalidate_fs
#define APP_WRAPPER_FOR___cleancache_invalidate_fs
#endif
 
#ifndef APP_WRAPPER_FOR___cleancache_invalidate_fs
#define APP_WRAPPER_FOR___cleancache_invalidate_fs
FUNCTION_WRAPPER_VOID(__cleancache_invalidate_fs, (struct super_block *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__cleancache_invalidate_fs is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    __cleancache_invalidate_fs(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__cleancache_invalidate_fs returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_genphy_resume
#define APP_WRAPPER_FOR_genphy_resume
#endif
 
#ifndef APP_WRAPPER_FOR_genphy_resume
#define APP_WRAPPER_FOR_genphy_resume
FUNCTION_WRAPPER(genphy_resume, (struct phy_device *phydev), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    kern_printk("genphy_resume is invoked.\n");
    PRE_WRAPPER_FUNC(phydev);
    int ret = genphy_resume(phydev);
    POST_WRAPPER_FUNC(phydev);
    kern_printk("genphy_resume returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dquot_acquire
#define APP_WRAPPER_FOR_dquot_acquire
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_acquire
#define APP_WRAPPER_FOR_dquot_acquire
FUNCTION_WRAPPER(dquot_acquire, (struct dquot *dquot), {
    WRAP_RECURSIVE(dquot);
    TRACES_IF_WATCHPOINT(dquot);
    SCAN_HEAD_FUNC(struct dquot)(*(TO_UNWATCHED_ADDRESS(dquot)));
    kern_printk("dquot_acquire is invoked.\n");
    PRE_WRAPPER_FUNC(dquot);
    int ret = dquot_acquire(dquot);
    POST_WRAPPER_FUNC(dquot);
    kern_printk("dquot_acquire returned.\n");
    TRACES_IF_WATCHPOINT(dquot);
    SCAN_HEAD_FUNC(struct dquot)(*(TO_UNWATCHED_ADDRESS(dquot)));
    return ret;
})
#endif


#ifndef KERN_ADDR___rtnl_register
#define APP_WRAPPER_FOR___rtnl_register
#endif
 
#ifndef APP_WRAPPER_FOR___rtnl_register
#define APP_WRAPPER_FOR___rtnl_register
FUNCTION_WRAPPER(__rtnl_register, (int protocol, int msgtype, rtnl_doit_func _arg1, rtnl_dumpit_func _arg2, rtnl_calcit_func _arg3), {
    WRAP_FUNCTION(_arg1);
    WRAP_FUNCTION(_arg2);
    WRAP_FUNCTION(_arg3);
    kern_printk("__rtnl_register is invoked.\n");
    PRE_WRAPPER_FUNC(protocol, msgtype, _arg1, _arg2, _arg3);
    int ret = __rtnl_register(protocol, msgtype, _arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(protocol, msgtype, _arg1, _arg2, _arg3);
    kern_printk("__rtnl_register returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_find_get_pages_tag
#define APP_WRAPPER_FOR_find_get_pages_tag
#endif
 
#ifndef APP_WRAPPER_FOR_find_get_pages_tag
#define APP_WRAPPER_FOR_find_get_pages_tag
FUNCTION_WRAPPER(find_get_pages_tag, (struct address_space *mapping, unsigned long *index, int tag, unsigned int nr_pages, struct page **pages), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    WRAP_RECURSIVE(pages);
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    kern_printk("find_get_pages_tag is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, index, tag, nr_pages, pages);
    int ret = find_get_pages_tag(mapping, index, tag, nr_pages, pages);
    POST_WRAPPER_FUNC(mapping, index, tag, nr_pages, pages);
    kern_printk("find_get_pages_tag returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_blkdev_ioctl
#define APP_WRAPPER_FOR_compat_blkdev_ioctl
#endif
 
#ifndef APP_WRAPPER_FOR_compat_blkdev_ioctl
#define APP_WRAPPER_FOR_compat_blkdev_ioctl
FUNCTION_WRAPPER(compat_blkdev_ioctl, (struct file *_arg1, unsigned int _arg2, unsigned long _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("compat_blkdev_ioctl is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    long ret = compat_blkdev_ioctl(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("compat_blkdev_ioctl returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_usermodehelper_read_trylock
#define APP_WRAPPER_FOR_usermodehelper_read_trylock
#endif
 
#ifndef APP_WRAPPER_FOR_usermodehelper_read_trylock
#define APP_WRAPPER_FOR_usermodehelper_read_trylock
FUNCTION_WRAPPER(usermodehelper_read_trylock, (), {
    kern_printk("usermodehelper_read_trylock is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = usermodehelper_read_trylock();
    POST_WRAPPER_FUNC();
    kern_printk("usermodehelper_read_trylock returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_klist_node_attached
#define APP_WRAPPER_FOR_klist_node_attached
#endif
 
#ifndef APP_WRAPPER_FOR_klist_node_attached
#define APP_WRAPPER_FOR_klist_node_attached
FUNCTION_WRAPPER(klist_node_attached, (struct klist_node *n), {
    kern_printk("klist_node_attached is invoked.\n");
    PRE_WRAPPER_FUNC(n);
    int ret = klist_node_attached(n);
    POST_WRAPPER_FUNC(n);
    kern_printk("klist_node_attached returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dpm_resume_start
#define APP_WRAPPER_FOR_dpm_resume_start
#endif
 
#ifndef APP_WRAPPER_FOR_dpm_resume_start
#define APP_WRAPPER_FOR_dpm_resume_start
FUNCTION_WRAPPER_VOID(dpm_resume_start, (pm_message_t state), {
    kern_printk("dpm_resume_start is invoked.\n");
    PRE_WRAPPER_FUNC(state);
    dpm_resume_start(state);
    POST_WRAPPER_FUNC(state);
    kern_printk("dpm_resume_start returned.\n");
})
#endif


#ifndef KERN_ADDR_nobh_writepage
#define APP_WRAPPER_FOR_nobh_writepage
#endif
 
#ifndef APP_WRAPPER_FOR_nobh_writepage
#define APP_WRAPPER_FOR_nobh_writepage
FUNCTION_WRAPPER(nobh_writepage, (struct page *page, get_block_t *get_block, struct writeback_control *wbc), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    WRAP_FUNCTION(get_block);
    kern_printk("nobh_writepage is invoked.\n");
    PRE_WRAPPER_FUNC(page, get_block, wbc);
    int ret = nobh_writepage(page, get_block, wbc);
    POST_WRAPPER_FUNC(page, get_block, wbc);
    kern_printk("nobh_writepage returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_execute
#define APP_WRAPPER_FOR_acpi_os_execute
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_execute
#define APP_WRAPPER_FOR_acpi_os_execute
FUNCTION_WRAPPER(acpi_os_execute, (acpi_execute_type type, acpi_osd_exec_callback function, void *context), {
    WRAP_FUNCTION(function);
    kern_printk("acpi_os_execute is invoked.\n");
    PRE_WRAPPER_FUNC(type, function, context);
    acpi_status ret = acpi_os_execute(type, function, context);
    POST_WRAPPER_FUNC(type, function, context);
    kern_printk("acpi_os_execute returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_set_default_limits
#define APP_WRAPPER_FOR_blk_set_default_limits
#endif
 
#ifndef APP_WRAPPER_FOR_blk_set_default_limits
#define APP_WRAPPER_FOR_blk_set_default_limits
FUNCTION_WRAPPER_VOID(blk_set_default_limits, (struct queue_limits *lim), {
    kern_printk("blk_set_default_limits is invoked.\n");
    PRE_WRAPPER_FUNC(lim);
    blk_set_default_limits(lim);
    POST_WRAPPER_FUNC(lim);
    kern_printk("blk_set_default_limits returned.\n");
})
#endif


#ifndef KERN_ADDR___absent_pages_in_range
#define APP_WRAPPER_FOR___absent_pages_in_range
#endif
 
#ifndef APP_WRAPPER_FOR___absent_pages_in_range
#define APP_WRAPPER_FOR___absent_pages_in_range
FUNCTION_WRAPPER(__absent_pages_in_range, (int nid, unsigned long start_pfn, unsigned long end_pfn), {
    kern_printk("__absent_pages_in_range is invoked.\n");
    PRE_WRAPPER_FUNC(nid, start_pfn, end_pfn);
    long ret = __absent_pages_in_range(nid, start_pfn, end_pfn);
    POST_WRAPPER_FUNC(nid, start_pfn, end_pfn);
    kern_printk("__absent_pages_in_range returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_input_open_device
#define APP_WRAPPER_FOR_input_open_device
#endif
 
#ifndef APP_WRAPPER_FOR_input_open_device
#define APP_WRAPPER_FOR_input_open_device
FUNCTION_WRAPPER(input_open_device, (struct input_handle *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct input_handle)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("input_open_device is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = input_open_device(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("input_open_device returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct input_handle)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dcb_ieee_getapp_mask
#define APP_WRAPPER_FOR_dcb_ieee_getapp_mask
#endif
 
#ifndef APP_WRAPPER_FOR_dcb_ieee_getapp_mask
#define APP_WRAPPER_FOR_dcb_ieee_getapp_mask
FUNCTION_WRAPPER(dcb_ieee_getapp_mask, (struct net_device *_arg1, struct dcb_app *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("dcb_ieee_getapp_mask is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    u8 ret = dcb_ieee_getapp_mask(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("dcb_ieee_getapp_mask returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_find_next_ext_capability
#define APP_WRAPPER_FOR_pci_find_next_ext_capability
#endif
 
#ifndef APP_WRAPPER_FOR_pci_find_next_ext_capability
#define APP_WRAPPER_FOR_pci_find_next_ext_capability
FUNCTION_WRAPPER(pci_find_next_ext_capability, (struct pci_dev *dev, int pos, int cap), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_find_next_ext_capability is invoked.\n");
    PRE_WRAPPER_FUNC(dev, pos, cap);
    int ret = pci_find_next_ext_capability(dev, pos, cap);
    POST_WRAPPER_FUNC(dev, pos, cap);
    kern_printk("pci_find_next_ext_capability returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_csk_listen_stop
#define APP_WRAPPER_FOR_inet_csk_listen_stop
#endif
 
#ifndef APP_WRAPPER_FOR_inet_csk_listen_stop
#define APP_WRAPPER_FOR_inet_csk_listen_stop
FUNCTION_WRAPPER_VOID(inet_csk_listen_stop, (struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("inet_csk_listen_stop is invoked.\n");
    PRE_WRAPPER_FUNC(sk);
    inet_csk_listen_stop(sk);
    POST_WRAPPER_FUNC(sk);
    kern_printk("inet_csk_listen_stop returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR_blk_queue_invalidate_tags
#define APP_WRAPPER_FOR_blk_queue_invalidate_tags
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_invalidate_tags
#define APP_WRAPPER_FOR_blk_queue_invalidate_tags
FUNCTION_WRAPPER_VOID(blk_queue_invalidate_tags, (struct request_queue *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_queue_invalidate_tags is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    blk_queue_invalidate_tags(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("blk_queue_invalidate_tags returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_pci_find_ext_capability
#define APP_WRAPPER_FOR_pci_find_ext_capability
#endif
 
#ifndef APP_WRAPPER_FOR_pci_find_ext_capability
#define APP_WRAPPER_FOR_pci_find_ext_capability
FUNCTION_WRAPPER(pci_find_ext_capability, (struct pci_dev *dev, int cap), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_find_ext_capability is invoked.\n");
    PRE_WRAPPER_FUNC(dev, cap);
    int ret = pci_find_ext_capability(dev, cap);
    POST_WRAPPER_FUNC(dev, cap);
    kern_printk("pci_find_ext_capability returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_deactivate_many
#define APP_WRAPPER_FOR_dev_deactivate_many
#endif
 
#ifndef APP_WRAPPER_FOR_dev_deactivate_many
#define APP_WRAPPER_FOR_dev_deactivate_many
FUNCTION_WRAPPER_VOID(dev_deactivate_many, (struct list_head *head), {
    kern_printk("dev_deactivate_many is invoked.\n");
    PRE_WRAPPER_FUNC(head);
    dev_deactivate_many(head);
    POST_WRAPPER_FUNC(head);
    kern_printk("dev_deactivate_many returned.\n");
})
#endif


#ifndef KERN_ADDR_lruvec_init
#define APP_WRAPPER_FOR_lruvec_init
#endif
 
#ifndef APP_WRAPPER_FOR_lruvec_init
#define APP_WRAPPER_FOR_lruvec_init
FUNCTION_WRAPPER_VOID(lruvec_init, (struct lruvec *lruvec), {
    kern_printk("lruvec_init is invoked.\n");
    PRE_WRAPPER_FUNC(lruvec);
    lruvec_init(lruvec);
    POST_WRAPPER_FUNC(lruvec);
    kern_printk("lruvec_init returned.\n");
})
#endif


#ifndef KERN_ADDR_textsearch_destroy
#define APP_WRAPPER_FOR_textsearch_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_textsearch_destroy
#define APP_WRAPPER_FOR_textsearch_destroy
FUNCTION_WRAPPER_VOID(textsearch_destroy, (struct ts_config *conf), {
    WRAP_RECURSIVE(conf);
    TRACES_IF_WATCHPOINT(conf);
    SCAN_HEAD_FUNC(struct ts_config)(*(TO_UNWATCHED_ADDRESS(conf)));
    kern_printk("textsearch_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(conf);
    textsearch_destroy(conf);
    POST_WRAPPER_FUNC(conf);
    kern_printk("textsearch_destroy returned.\n");
    TRACES_IF_WATCHPOINT(conf);
    SCAN_HEAD_FUNC(struct ts_config)(*(TO_UNWATCHED_ADDRESS(conf)));
})
#endif


#ifndef KERN_ADDR_setattr_copy
#define APP_WRAPPER_FOR_setattr_copy
#endif
 
#ifndef APP_WRAPPER_FOR_setattr_copy
#define APP_WRAPPER_FOR_setattr_copy
FUNCTION_WRAPPER_VOID(setattr_copy, (struct inode *inode, const struct iattr *attr), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    WRAP_RECURSIVE(attr);
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(const struct iattr)(*(TO_UNWATCHED_ADDRESS(attr)));
    kern_printk("setattr_copy is invoked.\n");
    PRE_WRAPPER_FUNC(inode, attr);
    setattr_copy(inode, attr);
    POST_WRAPPER_FUNC(inode, attr);
    kern_printk("setattr_copy returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(const struct iattr)(*(TO_UNWATCHED_ADDRESS(attr)));
})
#endif


#ifndef KERN_ADDR_dquot_claim_space_nodirty
#define APP_WRAPPER_FOR_dquot_claim_space_nodirty
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_claim_space_nodirty
#define APP_WRAPPER_FOR_dquot_claim_space_nodirty
FUNCTION_WRAPPER(dquot_claim_space_nodirty, (struct inode *inode, qsize_t number), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("dquot_claim_space_nodirty is invoked.\n");
    PRE_WRAPPER_FUNC(inode, number);
    int ret = dquot_claim_space_nodirty(inode, number);
    POST_WRAPPER_FUNC(inode, number);
    kern_printk("dquot_claim_space_nodirty returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    return ret;
})
#endif


#ifndef KERN_ADDR_res_counter_uncharge_until
#define APP_WRAPPER_FOR_res_counter_uncharge_until
#endif
 
#ifndef APP_WRAPPER_FOR_res_counter_uncharge_until
#define APP_WRAPPER_FOR_res_counter_uncharge_until
FUNCTION_WRAPPER(res_counter_uncharge_until, (struct res_counter *counter, struct res_counter *top, unsigned long val), {
    kern_printk("res_counter_uncharge_until is invoked.\n");
    PRE_WRAPPER_FUNC(counter, top, val);
    u64 ret = res_counter_uncharge_until(counter, top, val);
    POST_WRAPPER_FUNC(counter, top, val);
    kern_printk("res_counter_uncharge_until returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_default_smp_read_mpc_oem
#define APP_WRAPPER_FOR_default_smp_read_mpc_oem
#endif
 
#ifndef APP_WRAPPER_FOR_default_smp_read_mpc_oem
#define APP_WRAPPER_FOR_default_smp_read_mpc_oem
FUNCTION_WRAPPER_VOID(default_smp_read_mpc_oem, (struct mpc_table *mpc), {
    kern_printk("default_smp_read_mpc_oem is invoked.\n");
    PRE_WRAPPER_FUNC(mpc);
    default_smp_read_mpc_oem(mpc);
    POST_WRAPPER_FUNC(mpc);
    kern_printk("default_smp_read_mpc_oem returned.\n");
})
#endif


#ifndef KERN_ADDR_init_cpu_online
#define APP_WRAPPER_FOR_init_cpu_online
#endif
 
#ifndef APP_WRAPPER_FOR_init_cpu_online
#define APP_WRAPPER_FOR_init_cpu_online
FUNCTION_WRAPPER_VOID(init_cpu_online, (const struct cpumask *src), {
    kern_printk("init_cpu_online is invoked.\n");
    PRE_WRAPPER_FUNC(src);
    init_cpu_online(src);
    POST_WRAPPER_FUNC(src);
    kern_printk("init_cpu_online returned.\n");
})
#endif


#ifndef KERN_ADDR_split_huge_page_pmd_mm
#define APP_WRAPPER_FOR_split_huge_page_pmd_mm
#endif
 
#ifndef APP_WRAPPER_FOR_split_huge_page_pmd_mm
#define APP_WRAPPER_FOR_split_huge_page_pmd_mm
FUNCTION_WRAPPER_VOID(split_huge_page_pmd_mm, (struct mm_struct *mm, unsigned long address, pmd_t *pmd), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    kern_printk("split_huge_page_pmd_mm is invoked.\n");
    PRE_WRAPPER_FUNC(mm, address, pmd);
    split_huge_page_pmd_mm(mm, address, pmd);
    POST_WRAPPER_FUNC(mm, address, pmd);
    kern_printk("split_huge_page_pmd_mm returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
})
#endif


#ifndef KERN_ADDR_rcu_idle_enter
#define APP_WRAPPER_FOR_rcu_idle_enter
#endif
 
#ifndef APP_WRAPPER_FOR_rcu_idle_enter
#define APP_WRAPPER_FOR_rcu_idle_enter
FUNCTION_WRAPPER_VOID(rcu_idle_enter, (), {
    kern_printk("rcu_idle_enter is invoked.\n");
    PRE_WRAPPER_FUNC();
    rcu_idle_enter();
    POST_WRAPPER_FUNC();
    kern_printk("rcu_idle_enter returned.\n");
})
#endif


#ifndef KERN_ADDR_strlcpy
#define APP_WRAPPER_FOR_strlcpy
#endif
 
#ifndef APP_WRAPPER_FOR_strlcpy
#define APP_WRAPPER_FOR_strlcpy
FUNCTION_WRAPPER(strlcpy, (char *_arg1, const char *_arg2, size_t _arg3), {
    kern_printk("strlcpy is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    size_t ret = strlcpy(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("strlcpy returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_msix_shutdown
#define APP_WRAPPER_FOR_pci_msix_shutdown
#endif
 
#ifndef APP_WRAPPER_FOR_pci_msix_shutdown
#define APP_WRAPPER_FOR_pci_msix_shutdown
FUNCTION_WRAPPER_VOID(pci_msix_shutdown, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_msix_shutdown is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pci_msix_shutdown(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_msix_shutdown returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt12
#define APP_WRAPPER_FOR_invalidate_interrupt12
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt12
#define APP_WRAPPER_FOR_invalidate_interrupt12
FUNCTION_WRAPPER_VOID(invalidate_interrupt12, (), {
    kern_printk("invalidate_interrupt12 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt12();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt12 returned.\n");
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt13
#define APP_WRAPPER_FOR_invalidate_interrupt13
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt13
#define APP_WRAPPER_FOR_invalidate_interrupt13
FUNCTION_WRAPPER_VOID(invalidate_interrupt13, (), {
    kern_printk("invalidate_interrupt13 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt13();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt13 returned.\n");
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt10
#define APP_WRAPPER_FOR_invalidate_interrupt10
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt10
#define APP_WRAPPER_FOR_invalidate_interrupt10
FUNCTION_WRAPPER_VOID(invalidate_interrupt10, (), {
    kern_printk("invalidate_interrupt10 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt10();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt10 returned.\n");
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt11
#define APP_WRAPPER_FOR_invalidate_interrupt11
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt11
#define APP_WRAPPER_FOR_invalidate_interrupt11
FUNCTION_WRAPPER_VOID(invalidate_interrupt11, (), {
    kern_printk("invalidate_interrupt11 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt11();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt11 returned.\n");
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt16
#define APP_WRAPPER_FOR_invalidate_interrupt16
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt16
#define APP_WRAPPER_FOR_invalidate_interrupt16
FUNCTION_WRAPPER_VOID(invalidate_interrupt16, (), {
    kern_printk("invalidate_interrupt16 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt16();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt16 returned.\n");
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt17
#define APP_WRAPPER_FOR_invalidate_interrupt17
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt17
#define APP_WRAPPER_FOR_invalidate_interrupt17
FUNCTION_WRAPPER_VOID(invalidate_interrupt17, (), {
    kern_printk("invalidate_interrupt17 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt17();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt17 returned.\n");
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt14
#define APP_WRAPPER_FOR_invalidate_interrupt14
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt14
#define APP_WRAPPER_FOR_invalidate_interrupt14
FUNCTION_WRAPPER_VOID(invalidate_interrupt14, (), {
    kern_printk("invalidate_interrupt14 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt14();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt14 returned.\n");
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt15
#define APP_WRAPPER_FOR_invalidate_interrupt15
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt15
#define APP_WRAPPER_FOR_invalidate_interrupt15
FUNCTION_WRAPPER_VOID(invalidate_interrupt15, (), {
    kern_printk("invalidate_interrupt15 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt15();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt15 returned.\n");
})
#endif


#ifndef KERN_ADDR_sysfs_merge_group
#define APP_WRAPPER_FOR_sysfs_merge_group
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_merge_group
#define APP_WRAPPER_FOR_sysfs_merge_group
FUNCTION_WRAPPER(sysfs_merge_group, (struct kobject *kobj, const struct attribute_group *grp), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    WRAP_RECURSIVE(grp);
    TRACES_IF_WATCHPOINT(grp);
    SCAN_HEAD_FUNC(const struct attribute_group)(*(TO_UNWATCHED_ADDRESS(grp)));
    kern_printk("sysfs_merge_group is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, grp);
    int ret = sysfs_merge_group(kobj, grp);
    POST_WRAPPER_FUNC(kobj, grp);
    kern_printk("sysfs_merge_group returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    TRACES_IF_WATCHPOINT(grp);
    SCAN_HEAD_FUNC(const struct attribute_group)(*(TO_UNWATCHED_ADDRESS(grp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt19
#define APP_WRAPPER_FOR_invalidate_interrupt19
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt19
#define APP_WRAPPER_FOR_invalidate_interrupt19
FUNCTION_WRAPPER_VOID(invalidate_interrupt19, (), {
    kern_printk("invalidate_interrupt19 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt19();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt19 returned.\n");
})
#endif


#ifndef KERN_ADDR_dm_create
#define APP_WRAPPER_FOR_dm_create
#endif
 
#ifndef APP_WRAPPER_FOR_dm_create
#define APP_WRAPPER_FOR_dm_create
FUNCTION_WRAPPER(dm_create, (int minor, struct mapped_device **md), {
    kern_printk("dm_create is invoked.\n");
    PRE_WRAPPER_FUNC(minor, md);
    int ret = dm_create(minor, md);
    POST_WRAPPER_FUNC(minor, md);
    kern_printk("dm_create returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_page_symlink
#define APP_WRAPPER_FOR_page_symlink
#endif
 
#ifndef APP_WRAPPER_FOR_page_symlink
#define APP_WRAPPER_FOR_page_symlink
FUNCTION_WRAPPER(page_symlink, (struct inode *inode, const char *symname, int len), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("page_symlink is invoked.\n");
    PRE_WRAPPER_FUNC(inode, symname, len);
    int ret = page_symlink(inode, symname, len);
    POST_WRAPPER_FUNC(inode, symname, len);
    kern_printk("page_symlink returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    return ret;
})
#endif


#ifndef KERN_ADDR_qdisc_class_hash_init
#define APP_WRAPPER_FOR_qdisc_class_hash_init
#endif
 
#ifndef APP_WRAPPER_FOR_qdisc_class_hash_init
#define APP_WRAPPER_FOR_qdisc_class_hash_init
FUNCTION_WRAPPER(qdisc_class_hash_init, (struct Qdisc_class_hash *_arg1), {
    kern_printk("qdisc_class_hash_init is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = qdisc_class_hash_init(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("qdisc_class_hash_init returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ether_setup
#define APP_WRAPPER_FOR_ether_setup
#endif
 
#ifndef APP_WRAPPER_FOR_ether_setup
#define APP_WRAPPER_FOR_ether_setup
FUNCTION_WRAPPER_VOID(ether_setup, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("ether_setup is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    ether_setup(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("ether_setup returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_bus_remove_file
#define APP_WRAPPER_FOR_bus_remove_file
#endif
 
#ifndef APP_WRAPPER_FOR_bus_remove_file
#define APP_WRAPPER_FOR_bus_remove_file
FUNCTION_WRAPPER_VOID(bus_remove_file, (struct bus_type *_arg1, struct bus_attribute *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bus_attribute)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("bus_remove_file is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    bus_remove_file(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("bus_remove_file returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bus_attribute)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_dev_ingress_queue_create
#define APP_WRAPPER_FOR_dev_ingress_queue_create
#endif
 
#ifndef APP_WRAPPER_FOR_dev_ingress_queue_create
#define APP_WRAPPER_FOR_dev_ingress_queue_create
FUNCTION_WRAPPER(dev_ingress_queue_create, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_ingress_queue_create is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    struct netdev_queue *ret = dev_ingress_queue_create(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_ingress_queue_create returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_vmemmap_alloc_block
#define APP_WRAPPER_FOR_vmemmap_alloc_block
#endif
 
#ifndef APP_WRAPPER_FOR_vmemmap_alloc_block
#define APP_WRAPPER_FOR_vmemmap_alloc_block
FUNCTION_WRAPPER(vmemmap_alloc_block, (unsigned long size, int node), {
    kern_printk("vmemmap_alloc_block is invoked.\n");
    PRE_WRAPPER_FUNC(size, node);
    void *ret = vmemmap_alloc_block(size, node);
    POST_WRAPPER_FUNC(size, node);
    kern_printk("vmemmap_alloc_block returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_frag_kill
#define APP_WRAPPER_FOR_inet_frag_kill
#endif
 
#ifndef APP_WRAPPER_FOR_inet_frag_kill
#define APP_WRAPPER_FOR_inet_frag_kill
FUNCTION_WRAPPER_VOID(inet_frag_kill, (struct inet_frag_queue *q, struct inet_frags *f), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct inet_frag_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    WRAP_RECURSIVE(f);
    TRACES_IF_WATCHPOINT(f);
    SCAN_HEAD_FUNC(struct inet_frags)(*(TO_UNWATCHED_ADDRESS(f)));
    kern_printk("inet_frag_kill is invoked.\n");
    PRE_WRAPPER_FUNC(q, f);
    inet_frag_kill(q, f);
    POST_WRAPPER_FUNC(q, f);
    kern_printk("inet_frag_kill returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct inet_frag_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    TRACES_IF_WATCHPOINT(f);
    SCAN_HEAD_FUNC(struct inet_frags)(*(TO_UNWATCHED_ADDRESS(f)));
})
#endif


#ifndef KERN_ADDR_acpi_set_firmware_waking_vector
#define APP_WRAPPER_FOR_acpi_set_firmware_waking_vector
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_set_firmware_waking_vector
#define APP_WRAPPER_FOR_acpi_set_firmware_waking_vector
FUNCTION_WRAPPER(acpi_set_firmware_waking_vector, (u32 physical_address), {
    kern_printk("acpi_set_firmware_waking_vector is invoked.\n");
    PRE_WRAPPER_FUNC(physical_address);
    acpi_status ret = acpi_set_firmware_waking_vector(physical_address);
    POST_WRAPPER_FUNC(physical_address);
    kern_printk("acpi_set_firmware_waking_vector returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_timerqueue_add
#define APP_WRAPPER_FOR_timerqueue_add
#endif
 
#ifndef APP_WRAPPER_FOR_timerqueue_add
#define APP_WRAPPER_FOR_timerqueue_add
FUNCTION_WRAPPER_VOID(timerqueue_add, (struct timerqueue_head *head, struct timerqueue_node *node), {
    kern_printk("timerqueue_add is invoked.\n");
    PRE_WRAPPER_FUNC(head, node);
    timerqueue_add(head, node);
    POST_WRAPPER_FUNC(head, node);
    kern_printk("timerqueue_add returned.\n");
})
#endif


#ifndef KERN_ADDR_klist_add_tail
#define APP_WRAPPER_FOR_klist_add_tail
#endif
 
#ifndef APP_WRAPPER_FOR_klist_add_tail
#define APP_WRAPPER_FOR_klist_add_tail
FUNCTION_WRAPPER_VOID(klist_add_tail, (struct klist_node *n, struct klist *k), {
    WRAP_RECURSIVE(k);
    TRACES_IF_WATCHPOINT(k);
    SCAN_HEAD_FUNC(struct klist)(*(TO_UNWATCHED_ADDRESS(k)));
    kern_printk("klist_add_tail is invoked.\n");
    PRE_WRAPPER_FUNC(n, k);
    klist_add_tail(n, k);
    POST_WRAPPER_FUNC(n, k);
    kern_printk("klist_add_tail returned.\n");
    TRACES_IF_WATCHPOINT(k);
    SCAN_HEAD_FUNC(struct klist)(*(TO_UNWATCHED_ADDRESS(k)));
})
#endif


#ifndef KERN_ADDR_d_add_ci
#define APP_WRAPPER_FOR_d_add_ci
#endif
 
#ifndef APP_WRAPPER_FOR_d_add_ci
#define APP_WRAPPER_FOR_d_add_ci
FUNCTION_WRAPPER(d_add_ci, (struct dentry *_arg1, struct inode *_arg2, struct qstr *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("d_add_ci is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    struct dentry *ret = d_add_ci(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("d_add_ci returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_inode_needs_sync
#define APP_WRAPPER_FOR_inode_needs_sync
#endif
 
#ifndef APP_WRAPPER_FOR_inode_needs_sync
#define APP_WRAPPER_FOR_inode_needs_sync
FUNCTION_WRAPPER(inode_needs_sync, (struct inode *inode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("inode_needs_sync is invoked.\n");
    PRE_WRAPPER_FUNC(inode);
    int ret = inode_needs_sync(inode);
    POST_WRAPPER_FUNC(inode);
    kern_printk("inode_needs_sync returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    return ret;
})
#endif


#ifndef KERN_ADDR_fsync_bdev
#define APP_WRAPPER_FOR_fsync_bdev
#endif
 
#ifndef APP_WRAPPER_FOR_fsync_bdev
#define APP_WRAPPER_FOR_fsync_bdev
FUNCTION_WRAPPER(fsync_bdev, (struct block_device *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("fsync_bdev is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = fsync_bdev(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("fsync_bdev returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_neigh_resolve_output
#define APP_WRAPPER_FOR_neigh_resolve_output
#endif
 
#ifndef APP_WRAPPER_FOR_neigh_resolve_output
#define APP_WRAPPER_FOR_neigh_resolve_output
FUNCTION_WRAPPER(neigh_resolve_output, (struct neighbour *neigh, struct sk_buff *skb), {
    WRAP_RECURSIVE(neigh);
    TRACES_IF_WATCHPOINT(neigh);
    SCAN_HEAD_FUNC(struct neighbour)(*(TO_UNWATCHED_ADDRESS(neigh)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("neigh_resolve_output is invoked.\n");
    PRE_WRAPPER_FUNC(neigh, skb);
    int ret = neigh_resolve_output(neigh, skb);
    POST_WRAPPER_FUNC(neigh, skb);
    kern_printk("neigh_resolve_output returned.\n");
    TRACES_IF_WATCHPOINT(neigh);
    SCAN_HEAD_FUNC(struct neighbour)(*(TO_UNWATCHED_ADDRESS(neigh)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blkdev_show
#define APP_WRAPPER_FOR_blkdev_show
#endif
 
#ifndef APP_WRAPPER_FOR_blkdev_show
#define APP_WRAPPER_FOR_blkdev_show
FUNCTION_WRAPPER_VOID(blkdev_show, (struct seq_file *_arg1, off_t _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blkdev_show is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    blkdev_show(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blkdev_show returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_assign_irq_vector
#define APP_WRAPPER_FOR_assign_irq_vector
#endif
 
#ifndef APP_WRAPPER_FOR_assign_irq_vector
#define APP_WRAPPER_FOR_assign_irq_vector
FUNCTION_WRAPPER(assign_irq_vector, (int _arg1, struct irq_cfg *_arg2, const struct cpumask *_arg3), {
    kern_printk("assign_irq_vector is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = assign_irq_vector(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("assign_irq_vector returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_phy_driver_unregister
#define APP_WRAPPER_FOR_phy_driver_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_phy_driver_unregister
#define APP_WRAPPER_FOR_phy_driver_unregister
FUNCTION_WRAPPER_VOID(phy_driver_unregister, (struct phy_driver *drv), {
    WRAP_RECURSIVE(drv);
    TRACES_IF_WATCHPOINT(drv);
    SCAN_HEAD_FUNC(struct phy_driver)(*(TO_UNWATCHED_ADDRESS(drv)));
    kern_printk("phy_driver_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(drv);
    phy_driver_unregister(drv);
    POST_WRAPPER_FUNC(drv);
    kern_printk("phy_driver_unregister returned.\n");
    TRACES_IF_WATCHPOINT(drv);
    SCAN_HEAD_FUNC(struct phy_driver)(*(TO_UNWATCHED_ADDRESS(drv)));
})
#endif


#ifndef KERN_ADDR_mem_init
#define APP_WRAPPER_FOR_mem_init
#endif
 
#ifndef APP_WRAPPER_FOR_mem_init
#define APP_WRAPPER_FOR_mem_init
FUNCTION_WRAPPER_VOID(mem_init, (), {
    kern_printk("mem_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    mem_init();
    POST_WRAPPER_FUNC();
    kern_printk("mem_init returned.\n");
})
#endif


#ifndef KERN_ADDR____pskb_trim
#define APP_WRAPPER_FOR____pskb_trim
#endif
 
#ifndef APP_WRAPPER_FOR____pskb_trim
#define APP_WRAPPER_FOR____pskb_trim
FUNCTION_WRAPPER(___pskb_trim, (struct sk_buff *skb, unsigned int len), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("___pskb_trim is invoked.\n");
    PRE_WRAPPER_FUNC(skb, len);
    int ret = ___pskb_trim(skb, len);
    POST_WRAPPER_FUNC(skb, len);
    kern_printk("___pskb_trim returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_reset_security_ops
#define APP_WRAPPER_FOR_reset_security_ops
#endif
 
#ifndef APP_WRAPPER_FOR_reset_security_ops
#define APP_WRAPPER_FOR_reset_security_ops
FUNCTION_WRAPPER_VOID(reset_security_ops, (), {
    kern_printk("reset_security_ops is invoked.\n");
    PRE_WRAPPER_FUNC();
    reset_security_ops();
    POST_WRAPPER_FUNC();
    kern_printk("reset_security_ops returned.\n");
})
#endif


#ifndef KERN_ADDR_in_gate_area_no_mm
#define APP_WRAPPER_FOR_in_gate_area_no_mm
#endif
 
#ifndef APP_WRAPPER_FOR_in_gate_area_no_mm
#define APP_WRAPPER_FOR_in_gate_area_no_mm
FUNCTION_WRAPPER(in_gate_area_no_mm, (unsigned long addr), {
    kern_printk("in_gate_area_no_mm is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    int ret = in_gate_area_no_mm(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("in_gate_area_no_mm returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_bmdma_port_start
#define APP_WRAPPER_FOR_ata_bmdma_port_start
#endif
 
#ifndef APP_WRAPPER_FOR_ata_bmdma_port_start
#define APP_WRAPPER_FOR_ata_bmdma_port_start
FUNCTION_WRAPPER(ata_bmdma_port_start, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_bmdma_port_start is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    int ret = ata_bmdma_port_start(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_bmdma_port_start returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR_debug_locks_off
#define APP_WRAPPER_FOR_debug_locks_off
#endif
 
#ifndef APP_WRAPPER_FOR_debug_locks_off
#define APP_WRAPPER_FOR_debug_locks_off
FUNCTION_WRAPPER(debug_locks_off, (), {
    kern_printk("debug_locks_off is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = debug_locks_off();
    POST_WRAPPER_FUNC();
    kern_printk("debug_locks_off returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_vprintf
#define APP_WRAPPER_FOR_acpi_os_vprintf
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_vprintf
#define APP_WRAPPER_FOR_acpi_os_vprintf
FUNCTION_WRAPPER_VOID(acpi_os_vprintf, (const char *format, va_list args), {
    kern_printk("acpi_os_vprintf is invoked.\n");
    PRE_WRAPPER_FUNC(format, args);
    acpi_os_vprintf(format, args);
    POST_WRAPPER_FUNC(format, args);
    kern_printk("acpi_os_vprintf returned.\n");
})
#endif


#ifndef KERN_ADDR_jbd2_journal_destroy
#define APP_WRAPPER_FOR_jbd2_journal_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_destroy
#define APP_WRAPPER_FOR_jbd2_journal_destroy
FUNCTION_WRAPPER(jbd2_journal_destroy, (journal_t *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = jbd2_journal_destroy(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("jbd2_journal_destroy returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_print_oops_end_marker
#define APP_WRAPPER_FOR_print_oops_end_marker
#endif
 
#ifndef APP_WRAPPER_FOR_print_oops_end_marker
#define APP_WRAPPER_FOR_print_oops_end_marker
FUNCTION_WRAPPER_VOID(print_oops_end_marker, (), {
    kern_printk("print_oops_end_marker is invoked.\n");
    PRE_WRAPPER_FUNC();
    print_oops_end_marker();
    POST_WRAPPER_FUNC();
    kern_printk("print_oops_end_marker returned.\n");
})
#endif


#ifndef KERN_ADDR___find_get_block
#define APP_WRAPPER_FOR___find_get_block
#endif
 
#ifndef APP_WRAPPER_FOR___find_get_block
#define APP_WRAPPER_FOR___find_get_block
FUNCTION_WRAPPER(__find_get_block, (struct block_device *bdev, sector_t block, unsigned int size), {
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    kern_printk("__find_get_block is invoked.\n");
    PRE_WRAPPER_FUNC(bdev, block, size);
    struct buffer_head *ret = __find_get_block(bdev, block, size);
    POST_WRAPPER_FUNC(bdev, block, size);
    kern_printk("__find_get_block returned.\n");
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_kern_path
#define APP_WRAPPER_FOR_kern_path
#endif
 
#ifndef APP_WRAPPER_FOR_kern_path
#define APP_WRAPPER_FOR_kern_path
FUNCTION_WRAPPER(kern_path, (const char *_arg1, unsigned int _arg2, struct path *_arg3), {
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("kern_path is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = kern_path(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("kern_path returned.\n");
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_setlease
#define APP_WRAPPER_FOR_vfs_setlease
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_setlease
#define APP_WRAPPER_FOR_vfs_setlease
FUNCTION_WRAPPER(vfs_setlease, (struct file *_arg1, long _arg2, struct file_lock **_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct file_lock *)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("vfs_setlease is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = vfs_setlease(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("vfs_setlease returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct file_lock *)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_access_process_vm
#define APP_WRAPPER_FOR_access_process_vm
#endif
 
#ifndef APP_WRAPPER_FOR_access_process_vm
#define APP_WRAPPER_FOR_access_process_vm
FUNCTION_WRAPPER(access_process_vm, (struct task_struct *tsk, unsigned long addr, void *buf, int len, int write), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("access_process_vm is invoked.\n");
    PRE_WRAPPER_FUNC(tsk, addr, buf, len, write);
    int ret = access_process_vm(tsk, addr, buf, len, write);
    POST_WRAPPER_FUNC(tsk, addr, buf, len, write);
    kern_printk("access_process_vm returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_block_write_begin
#define APP_WRAPPER_FOR_block_write_begin
#endif
 
#ifndef APP_WRAPPER_FOR_block_write_begin
#define APP_WRAPPER_FOR_block_write_begin
FUNCTION_WRAPPER(block_write_begin, (struct address_space *mapping, loff_t pos, unsigned int len, unsigned int flags, struct page **pagep, get_block_t *get_block), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    WRAP_RECURSIVE(pagep);
    TRACES_IF_WATCHPOINT(pagep);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pagep)));
    WRAP_FUNCTION(get_block);
    kern_printk("block_write_begin is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, pos, len, flags, pagep, get_block);
    int ret = block_write_begin(mapping, pos, len, flags, pagep, get_block);
    POST_WRAPPER_FUNC(mapping, pos, len, flags, pagep, get_block);
    kern_printk("block_write_begin returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    TRACES_IF_WATCHPOINT(pagep);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pagep)));
    return ret;
})
#endif


#ifndef KERN_ADDR___wait_on_journal
#define APP_WRAPPER_FOR___wait_on_journal
#endif
 
#ifndef APP_WRAPPER_FOR___wait_on_journal
#define APP_WRAPPER_FOR___wait_on_journal
FUNCTION_WRAPPER_VOID(__wait_on_journal, (journal_t *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__wait_on_journal is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    __wait_on_journal(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__wait_on_journal returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_acpi_table_print_madt_entry
#define APP_WRAPPER_FOR_acpi_table_print_madt_entry
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_table_print_madt_entry
#define APP_WRAPPER_FOR_acpi_table_print_madt_entry
FUNCTION_WRAPPER_VOID(acpi_table_print_madt_entry, (struct acpi_subtable_header *madt), {
    kern_printk("acpi_table_print_madt_entry is invoked.\n");
    PRE_WRAPPER_FUNC(madt);
    acpi_table_print_madt_entry(madt);
    POST_WRAPPER_FUNC(madt);
    kern_printk("acpi_table_print_madt_entry returned.\n");
})
#endif


#ifndef KERN_ADDR_locks_start_grace
#define APP_WRAPPER_FOR_locks_start_grace
#endif
 
#ifndef APP_WRAPPER_FOR_locks_start_grace
#define APP_WRAPPER_FOR_locks_start_grace
FUNCTION_WRAPPER_VOID(locks_start_grace, (struct net *_arg1, struct lock_manager *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("locks_start_grace is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    locks_start_grace(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("locks_start_grace returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_find_vm_area
#define APP_WRAPPER_FOR_find_vm_area
#endif
 
#ifndef APP_WRAPPER_FOR_find_vm_area
#define APP_WRAPPER_FOR_find_vm_area
FUNCTION_WRAPPER(find_vm_area, (const void *addr), {
    kern_printk("find_vm_area is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    struct vm_struct *ret = find_vm_area(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("find_vm_area returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_atomic_dec_and_mutex_lock
#define APP_WRAPPER_FOR_atomic_dec_and_mutex_lock
#endif
 
#ifndef APP_WRAPPER_FOR_atomic_dec_and_mutex_lock
#define APP_WRAPPER_FOR_atomic_dec_and_mutex_lock
FUNCTION_WRAPPER(atomic_dec_and_mutex_lock, (atomic_t *cnt, struct mutex *lock), {
    WRAP_RECURSIVE(lock);
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
    kern_printk("atomic_dec_and_mutex_lock is invoked.\n");
    PRE_WRAPPER_FUNC(cnt, lock);
    int ret = atomic_dec_and_mutex_lock(cnt, lock);
    POST_WRAPPER_FUNC(cnt, lock);
    kern_printk("atomic_dec_and_mutex_lock returned.\n");
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
    return ret;
})
#endif


#ifndef KERN_ADDR_native_send_call_func_ipi
#define APP_WRAPPER_FOR_native_send_call_func_ipi
#endif
 
#ifndef APP_WRAPPER_FOR_native_send_call_func_ipi
#define APP_WRAPPER_FOR_native_send_call_func_ipi
FUNCTION_WRAPPER_VOID(native_send_call_func_ipi, (const struct cpumask *mask), {
    kern_printk("native_send_call_func_ipi is invoked.\n");
    PRE_WRAPPER_FUNC(mask);
    native_send_call_func_ipi(mask);
    POST_WRAPPER_FUNC(mask);
    kern_printk("native_send_call_func_ipi returned.\n");
})
#endif


#ifndef KERN_ADDR_sort_extable
#define APP_WRAPPER_FOR_sort_extable
#endif
 
#ifndef APP_WRAPPER_FOR_sort_extable
#define APP_WRAPPER_FOR_sort_extable
FUNCTION_WRAPPER_VOID(sort_extable, (struct exception_table_entry *start, struct exception_table_entry *finish), {
    kern_printk("sort_extable is invoked.\n");
    PRE_WRAPPER_FUNC(start, finish);
    sort_extable(start, finish);
    POST_WRAPPER_FUNC(start, finish);
    kern_printk("sort_extable returned.\n");
})
#endif


#ifndef KERN_ADDR_convert_ip_to_linear
#define APP_WRAPPER_FOR_convert_ip_to_linear
#endif
 
#ifndef APP_WRAPPER_FOR_convert_ip_to_linear
#define APP_WRAPPER_FOR_convert_ip_to_linear
FUNCTION_WRAPPER(convert_ip_to_linear, (struct task_struct *child, struct pt_regs *regs), {
    WRAP_RECURSIVE(child);
    TRACES_IF_WATCHPOINT(child);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(child)));
    kern_printk("convert_ip_to_linear is invoked.\n");
    PRE_WRAPPER_FUNC(child, regs);
    long ret = convert_ip_to_linear(child, regs);
    POST_WRAPPER_FUNC(child, regs);
    kern_printk("convert_ip_to_linear returned.\n");
    TRACES_IF_WATCHPOINT(child);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(child)));
    return ret;
})
#endif


#ifndef KERN_ADDR_netlink_change_ngroups
#define APP_WRAPPER_FOR_netlink_change_ngroups
#endif
 
#ifndef APP_WRAPPER_FOR_netlink_change_ngroups
#define APP_WRAPPER_FOR_netlink_change_ngroups
FUNCTION_WRAPPER(netlink_change_ngroups, (struct sock *sk, unsigned int groups), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("netlink_change_ngroups is invoked.\n");
    PRE_WRAPPER_FUNC(sk, groups);
    int ret = netlink_change_ngroups(sk, groups);
    POST_WRAPPER_FUNC(sk, groups);
    kern_printk("netlink_change_ngroups returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_queue_delayed_work_on
#define APP_WRAPPER_FOR_queue_delayed_work_on
#endif
 
#ifndef APP_WRAPPER_FOR_queue_delayed_work_on
#define APP_WRAPPER_FOR_queue_delayed_work_on
FUNCTION_WRAPPER(queue_delayed_work_on, (int cpu, struct workqueue_struct *wq, struct delayed_work *work, unsigned long delay), {
    WRAP_RECURSIVE(work);
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct delayed_work)(*(TO_UNWATCHED_ADDRESS(work)));
    kern_printk("queue_delayed_work_on is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, wq, work, delay);
    bool ret = queue_delayed_work_on(cpu, wq, work, delay);
    POST_WRAPPER_FUNC(cpu, wq, work, delay);
    kern_printk("queue_delayed_work_on returned.\n");
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct delayed_work)(*(TO_UNWATCHED_ADDRESS(work)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_link_next
#define APP_WRAPPER_FOR_ata_link_next
#endif
 
#ifndef APP_WRAPPER_FOR_ata_link_next
#define APP_WRAPPER_FOR_ata_link_next
FUNCTION_WRAPPER(ata_link_next, (struct ata_link *link, struct ata_port *ap, enum ata_link_iter_mode mode), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_link_next is invoked.\n");
    PRE_WRAPPER_FUNC(link, ap, mode);
    struct ata_link *ret = ata_link_next(link, ap, mode);
    POST_WRAPPER_FUNC(link, ap, mode);
    kern_printk("ata_link_next returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_edemux
#define APP_WRAPPER_FOR_sock_edemux
#endif
 
#ifndef APP_WRAPPER_FOR_sock_edemux
#define APP_WRAPPER_FOR_sock_edemux
FUNCTION_WRAPPER_VOID(sock_edemux, (struct sk_buff *skb), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("sock_edemux is invoked.\n");
    PRE_WRAPPER_FUNC(skb);
    sock_edemux(skb);
    POST_WRAPPER_FUNC(skb);
    kern_printk("sock_edemux returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_elv_completed_request
#define APP_WRAPPER_FOR_elv_completed_request
#endif
 
#ifndef APP_WRAPPER_FOR_elv_completed_request
#define APP_WRAPPER_FOR_elv_completed_request
FUNCTION_WRAPPER_VOID(elv_completed_request, (struct request_queue *_arg1, struct request *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("elv_completed_request is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    elv_completed_request(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("elv_completed_request returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_cap_capget
#define APP_WRAPPER_FOR_cap_capget
#endif
 
#ifndef APP_WRAPPER_FOR_cap_capget
#define APP_WRAPPER_FOR_cap_capget
FUNCTION_WRAPPER(cap_capget, (struct task_struct *target, kernel_cap_t *effective, kernel_cap_t *inheritable, kernel_cap_t *permitted), {
    WRAP_RECURSIVE(target);
    TRACES_IF_WATCHPOINT(target);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(target)));
    kern_printk("cap_capget is invoked.\n");
    PRE_WRAPPER_FUNC(target, effective, inheritable, permitted);
    int ret = cap_capget(target, effective, inheritable, permitted);
    POST_WRAPPER_FUNC(target, effective, inheritable, permitted);
    kern_printk("cap_capget returned.\n");
    TRACES_IF_WATCHPOINT(target);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(target)));
    return ret;
})
#endif


#ifndef KERN_ADDR_wakeup_source_unregister
#define APP_WRAPPER_FOR_wakeup_source_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_wakeup_source_unregister
#define APP_WRAPPER_FOR_wakeup_source_unregister
FUNCTION_WRAPPER_VOID(wakeup_source_unregister, (struct wakeup_source *ws), {
    WRAP_RECURSIVE(ws);
    TRACES_IF_WATCHPOINT(ws);
    SCAN_HEAD_FUNC(struct wakeup_source)(*(TO_UNWATCHED_ADDRESS(ws)));
    kern_printk("wakeup_source_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(ws);
    wakeup_source_unregister(ws);
    POST_WRAPPER_FUNC(ws);
    kern_printk("wakeup_source_unregister returned.\n");
    TRACES_IF_WATCHPOINT(ws);
    SCAN_HEAD_FUNC(struct wakeup_source)(*(TO_UNWATCHED_ADDRESS(ws)));
})
#endif


#ifndef KERN_ADDR_ata_sff_qc_fill_rtf
#define APP_WRAPPER_FOR_ata_sff_qc_fill_rtf
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_qc_fill_rtf
#define APP_WRAPPER_FOR_ata_sff_qc_fill_rtf
FUNCTION_WRAPPER(ata_sff_qc_fill_rtf, (struct ata_queued_cmd *qc), {
    WRAP_RECURSIVE(qc);
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    kern_printk("ata_sff_qc_fill_rtf is invoked.\n");
    PRE_WRAPPER_FUNC(qc);
    bool ret = ata_sff_qc_fill_rtf(qc);
    POST_WRAPPER_FUNC(qc);
    kern_printk("ata_sff_qc_fill_rtf returned.\n");
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    return ret;
})
#endif


#ifndef KERN_ADDR_alloc_page_buffers
#define APP_WRAPPER_FOR_alloc_page_buffers
#endif
 
#ifndef APP_WRAPPER_FOR_alloc_page_buffers
#define APP_WRAPPER_FOR_alloc_page_buffers
FUNCTION_WRAPPER(alloc_page_buffers, (struct page *page, unsigned long size, int retry), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("alloc_page_buffers is invoked.\n");
    PRE_WRAPPER_FUNC(page, size, retry);
    struct buffer_head *ret = alloc_page_buffers(page, size, retry);
    POST_WRAPPER_FUNC(page, size, retry);
    kern_printk("alloc_page_buffers returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_d_drop
#define APP_WRAPPER_FOR_d_drop
#endif
 
#ifndef APP_WRAPPER_FOR_d_drop
#define APP_WRAPPER_FOR_d_drop
FUNCTION_WRAPPER_VOID(d_drop, (struct dentry *dentry), {
    WRAP_RECURSIVE(dentry);
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    kern_printk("d_drop is invoked.\n");
    PRE_WRAPPER_FUNC(dentry);
    d_drop(dentry);
    POST_WRAPPER_FUNC(dentry);
    kern_printk("d_drop returned.\n");
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
})
#endif


#ifndef KERN_ADDR_pm_generic_poweroff_late
#define APP_WRAPPER_FOR_pm_generic_poweroff_late
#endif
 
#ifndef APP_WRAPPER_FOR_pm_generic_poweroff_late
#define APP_WRAPPER_FOR_pm_generic_poweroff_late
FUNCTION_WRAPPER(pm_generic_poweroff_late, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pm_generic_poweroff_late is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pm_generic_poweroff_late(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pm_generic_poweroff_late returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_no_s4_hw_signature
#define APP_WRAPPER_FOR_acpi_no_s4_hw_signature
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_no_s4_hw_signature
#define APP_WRAPPER_FOR_acpi_no_s4_hw_signature
FUNCTION_WRAPPER_VOID(acpi_no_s4_hw_signature, (), {
    kern_printk("acpi_no_s4_hw_signature is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_no_s4_hw_signature();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_no_s4_hw_signature returned.\n");
})
#endif


#ifndef KERN_ADDR_crypto_aead_setauthsize
#define APP_WRAPPER_FOR_crypto_aead_setauthsize
#endif
 
#ifndef APP_WRAPPER_FOR_crypto_aead_setauthsize
#define APP_WRAPPER_FOR_crypto_aead_setauthsize
FUNCTION_WRAPPER(crypto_aead_setauthsize, (struct crypto_aead *tfm, unsigned int authsize), {
    WRAP_RECURSIVE(tfm);
    TRACES_IF_WATCHPOINT(tfm);
    SCAN_HEAD_FUNC(struct crypto_aead)(*(TO_UNWATCHED_ADDRESS(tfm)));
    kern_printk("crypto_aead_setauthsize is invoked.\n");
    PRE_WRAPPER_FUNC(tfm, authsize);
    int ret = crypto_aead_setauthsize(tfm, authsize);
    POST_WRAPPER_FUNC(tfm, authsize);
    kern_printk("crypto_aead_setauthsize returned.\n");
    TRACES_IF_WATCHPOINT(tfm);
    SCAN_HEAD_FUNC(struct crypto_aead)(*(TO_UNWATCHED_ADDRESS(tfm)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_bus_register_driver
#define APP_WRAPPER_FOR_acpi_bus_register_driver
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_bus_register_driver
#define APP_WRAPPER_FOR_acpi_bus_register_driver
FUNCTION_WRAPPER(acpi_bus_register_driver, (struct acpi_driver *driver), {
    WRAP_RECURSIVE(driver);
    TRACES_IF_WATCHPOINT(driver);
    SCAN_HEAD_FUNC(struct acpi_driver)(*(TO_UNWATCHED_ADDRESS(driver)));
    kern_printk("acpi_bus_register_driver is invoked.\n");
    PRE_WRAPPER_FUNC(driver);
    int ret = acpi_bus_register_driver(driver);
    POST_WRAPPER_FUNC(driver);
    kern_printk("acpi_bus_register_driver returned.\n");
    TRACES_IF_WATCHPOINT(driver);
    SCAN_HEAD_FUNC(struct acpi_driver)(*(TO_UNWATCHED_ADDRESS(driver)));
    return ret;
})
#endif


#ifndef KERN_ADDR_alloc_vm_area
#define APP_WRAPPER_FOR_alloc_vm_area
#endif
 
#ifndef APP_WRAPPER_FOR_alloc_vm_area
#define APP_WRAPPER_FOR_alloc_vm_area
FUNCTION_WRAPPER(alloc_vm_area, (size_t size, pte_t **ptes), {
    kern_printk("alloc_vm_area is invoked.\n");
    PRE_WRAPPER_FUNC(size, ptes);
    struct vm_struct *ret = alloc_vm_area(size, ptes);
    POST_WRAPPER_FUNC(size, ptes);
    kern_printk("alloc_vm_area returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sg_init
#define APP_WRAPPER_FOR_ata_sg_init
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sg_init
#define APP_WRAPPER_FOR_ata_sg_init
FUNCTION_WRAPPER_VOID(ata_sg_init, (struct ata_queued_cmd *qc, struct scatterlist *sg, unsigned int n_elem), {
    WRAP_RECURSIVE(qc);
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    kern_printk("ata_sg_init is invoked.\n");
    PRE_WRAPPER_FUNC(qc, sg, n_elem);
    ata_sg_init(qc, sg, n_elem);
    POST_WRAPPER_FUNC(qc, sg, n_elem);
    kern_printk("ata_sg_init returned.\n");
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
})
#endif


#ifndef KERN_ADDR_idr_get_new
#define APP_WRAPPER_FOR_idr_get_new
#endif
 
#ifndef APP_WRAPPER_FOR_idr_get_new
#define APP_WRAPPER_FOR_idr_get_new
FUNCTION_WRAPPER(idr_get_new, (struct idr *idp, void *ptr, int *id), {
    WRAP_RECURSIVE(idp);
    TRACES_IF_WATCHPOINT(idp);
    SCAN_HEAD_FUNC(struct idr)(*(TO_UNWATCHED_ADDRESS(idp)));
    kern_printk("idr_get_new is invoked.\n");
    PRE_WRAPPER_FUNC(idp, ptr, id);
    int ret = idr_get_new(idp, ptr, id);
    POST_WRAPPER_FUNC(idp, ptr, id);
    kern_printk("idr_get_new returned.\n");
    TRACES_IF_WATCHPOINT(idp);
    SCAN_HEAD_FUNC(struct idr)(*(TO_UNWATCHED_ADDRESS(idp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ida_destroy
#define APP_WRAPPER_FOR_ida_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_ida_destroy
#define APP_WRAPPER_FOR_ida_destroy
FUNCTION_WRAPPER_VOID(ida_destroy, (struct ida *ida), {
    WRAP_RECURSIVE(ida);
    TRACES_IF_WATCHPOINT(ida);
    SCAN_HEAD_FUNC(struct ida)(*(TO_UNWATCHED_ADDRESS(ida)));
    kern_printk("ida_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(ida);
    ida_destroy(ida);
    POST_WRAPPER_FUNC(ida);
    kern_printk("ida_destroy returned.\n");
    TRACES_IF_WATCHPOINT(ida);
    SCAN_HEAD_FUNC(struct ida)(*(TO_UNWATCHED_ADDRESS(ida)));
})
#endif


#ifndef KERN_ADDR_wakeup_source_create
#define APP_WRAPPER_FOR_wakeup_source_create
#endif
 
#ifndef APP_WRAPPER_FOR_wakeup_source_create
#define APP_WRAPPER_FOR_wakeup_source_create
FUNCTION_WRAPPER(wakeup_source_create, (const char *name), {
    kern_printk("wakeup_source_create is invoked.\n");
    PRE_WRAPPER_FUNC(name);
    struct wakeup_source *ret = wakeup_source_create(name);
    POST_WRAPPER_FUNC(name);
    kern_printk("wakeup_source_create returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_set_cpu_active
#define APP_WRAPPER_FOR_set_cpu_active
#endif
 
#ifndef APP_WRAPPER_FOR_set_cpu_active
#define APP_WRAPPER_FOR_set_cpu_active
FUNCTION_WRAPPER_VOID(set_cpu_active, (unsigned int cpu, bool active), {
    kern_printk("set_cpu_active is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, active);
    set_cpu_active(cpu, active);
    POST_WRAPPER_FUNC(cpu, active);
    kern_printk("set_cpu_active returned.\n");
})
#endif


#ifndef KERN_ADDR_bsg_register_queue
#define APP_WRAPPER_FOR_bsg_register_queue
#endif
 
#ifndef APP_WRAPPER_FOR_bsg_register_queue
#define APP_WRAPPER_FOR_bsg_register_queue
FUNCTION_WRAPPER(bsg_register_queue, (struct request_queue *q, struct device *parent, const char *name, void (*release)(struct device *)), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(parent)));
    WRAP_FUNCTION(release);
    kern_printk("bsg_register_queue is invoked.\n");
    PRE_WRAPPER_FUNC(q, parent, name, release);
    int ret = bsg_register_queue(q, parent, name, release);
    POST_WRAPPER_FUNC(q, parent, name, release);
    kern_printk("bsg_register_queue returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(parent)));
    return ret;
})
#endif


#ifndef KERN_ADDR_simple_attr_write
#define APP_WRAPPER_FOR_simple_attr_write
#endif
 
#ifndef APP_WRAPPER_FOR_simple_attr_write
#define APP_WRAPPER_FOR_simple_attr_write
FUNCTION_WRAPPER(simple_attr_write, (struct file *file, const char *buf, size_t len, loff_t *ppos), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("simple_attr_write is invoked.\n");
    PRE_WRAPPER_FUNC(file, buf, len, ppos);
    ssize_t ret = simple_attr_write(file, buf, len, ppos);
    POST_WRAPPER_FUNC(file, buf, len, ppos);
    kern_printk("simple_attr_write returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_read_swap_cache_async
#define APP_WRAPPER_FOR_read_swap_cache_async
#endif
 
#ifndef APP_WRAPPER_FOR_read_swap_cache_async
#define APP_WRAPPER_FOR_read_swap_cache_async
FUNCTION_WRAPPER(read_swap_cache_async, (swp_entry_t _arg1, gfp_t _arg2, struct vm_area_struct *vma, unsigned long addr), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("read_swap_cache_async is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, vma, addr);
    struct page *ret = read_swap_cache_async(_arg1, _arg2, vma, addr);
    POST_WRAPPER_FUNC(_arg1, _arg2, vma, addr);
    kern_printk("read_swap_cache_async returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pcibios_enable_device
#define APP_WRAPPER_FOR_pcibios_enable_device
#endif
 
#ifndef APP_WRAPPER_FOR_pcibios_enable_device
#define APP_WRAPPER_FOR_pcibios_enable_device
FUNCTION_WRAPPER(pcibios_enable_device, (struct pci_dev *_arg1, int mask), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("pcibios_enable_device is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, mask);
    int ret = pcibios_enable_device(_arg1, mask);
    POST_WRAPPER_FUNC(_arg1, mask);
    kern_printk("pcibios_enable_device returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_handle_fasteoi_irq
#define APP_WRAPPER_FOR_handle_fasteoi_irq
#endif
 
#ifndef APP_WRAPPER_FOR_handle_fasteoi_irq
#define APP_WRAPPER_FOR_handle_fasteoi_irq
FUNCTION_WRAPPER_VOID(handle_fasteoi_irq, (unsigned int irq, struct irq_desc *desc), {
    WRAP_RECURSIVE(desc);
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct irq_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
    kern_printk("handle_fasteoi_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq, desc);
    handle_fasteoi_irq(irq, desc);
    POST_WRAPPER_FUNC(irq, desc);
    kern_printk("handle_fasteoi_irq returned.\n");
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct irq_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
})
#endif


#ifndef KERN_ADDR_truncate_inode_pages_range
#define APP_WRAPPER_FOR_truncate_inode_pages_range
#endif
 
#ifndef APP_WRAPPER_FOR_truncate_inode_pages_range
#define APP_WRAPPER_FOR_truncate_inode_pages_range
FUNCTION_WRAPPER_VOID(truncate_inode_pages_range, (struct address_space *_arg1, loff_t lstart, loff_t lend), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("truncate_inode_pages_range is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, lstart, lend);
    truncate_inode_pages_range(_arg1, lstart, lend);
    POST_WRAPPER_FUNC(_arg1, lstart, lend);
    kern_printk("truncate_inode_pages_range returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR___pci_complete_power_transition
#define APP_WRAPPER_FOR___pci_complete_power_transition
#endif
 
#ifndef APP_WRAPPER_FOR___pci_complete_power_transition
#define APP_WRAPPER_FOR___pci_complete_power_transition
FUNCTION_WRAPPER(__pci_complete_power_transition, (struct pci_dev *dev, pci_power_t state), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("__pci_complete_power_transition is invoked.\n");
    PRE_WRAPPER_FUNC(dev, state);
    int ret = __pci_complete_power_transition(dev, state);
    POST_WRAPPER_FUNC(dev, state);
    kern_printk("__pci_complete_power_transition returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mark_info_dirty
#define APP_WRAPPER_FOR_mark_info_dirty
#endif
 
#ifndef APP_WRAPPER_FOR_mark_info_dirty
#define APP_WRAPPER_FOR_mark_info_dirty
FUNCTION_WRAPPER_VOID(mark_info_dirty, (struct super_block *sb, int type), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("mark_info_dirty is invoked.\n");
    PRE_WRAPPER_FUNC(sb, type);
    mark_info_dirty(sb, type);
    POST_WRAPPER_FUNC(sb, type);
    kern_printk("mark_info_dirty returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
})
#endif


#ifndef KERN_ADDR_do_sigpending
#define APP_WRAPPER_FOR_do_sigpending
#endif
 
#ifndef APP_WRAPPER_FOR_do_sigpending
#define APP_WRAPPER_FOR_do_sigpending
FUNCTION_WRAPPER(do_sigpending, (void *_arg1, unsigned long _arg2), {
    kern_printk("do_sigpending is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    long ret = do_sigpending(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("do_sigpending returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_set_vga_state
#define APP_WRAPPER_FOR_pci_set_vga_state
#endif
 
#ifndef APP_WRAPPER_FOR_pci_set_vga_state
#define APP_WRAPPER_FOR_pci_set_vga_state
FUNCTION_WRAPPER(pci_set_vga_state, (struct pci_dev *pdev, bool decode, unsigned int command_bits, u32 flags), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("pci_set_vga_state is invoked.\n");
    PRE_WRAPPER_FUNC(pdev, decode, command_bits, flags);
    int ret = pci_set_vga_state(pdev, decode, command_bits, flags);
    POST_WRAPPER_FUNC(pdev, decode, command_bits, flags);
    kern_printk("pci_set_vga_state returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_arch_flush_lazy_mmu_mode
#define APP_WRAPPER_FOR_arch_flush_lazy_mmu_mode
#endif
 
#ifndef APP_WRAPPER_FOR_arch_flush_lazy_mmu_mode
#define APP_WRAPPER_FOR_arch_flush_lazy_mmu_mode
FUNCTION_WRAPPER_VOID(arch_flush_lazy_mmu_mode, (), {
    kern_printk("arch_flush_lazy_mmu_mode is invoked.\n");
    PRE_WRAPPER_FUNC();
    arch_flush_lazy_mmu_mode();
    POST_WRAPPER_FUNC();
    kern_printk("arch_flush_lazy_mmu_mode returned.\n");
})
#endif


#ifndef KERN_ADDR_d_validate
#define APP_WRAPPER_FOR_d_validate
#endif
 
#ifndef APP_WRAPPER_FOR_d_validate
#define APP_WRAPPER_FOR_d_validate
FUNCTION_WRAPPER(d_validate, (struct dentry *_arg1, struct dentry *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("d_validate is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = d_validate(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("d_validate returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR__raw_spin_lock_bh
#define APP_WRAPPER_FOR__raw_spin_lock_bh
#endif
 
#ifndef APP_WRAPPER_FOR__raw_spin_lock_bh
#define APP_WRAPPER_FOR__raw_spin_lock_bh
FUNCTION_WRAPPER_VOID(_raw_spin_lock_bh, (raw_spinlock_t *lock), {
    kern_printk("_raw_spin_lock_bh is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    _raw_spin_lock_bh(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("_raw_spin_lock_bh returned.\n");
})
#endif


#ifndef KERN_ADDR_sparse_mem_map_populate
#define APP_WRAPPER_FOR_sparse_mem_map_populate
#endif
 
#ifndef APP_WRAPPER_FOR_sparse_mem_map_populate
#define APP_WRAPPER_FOR_sparse_mem_map_populate
FUNCTION_WRAPPER(sparse_mem_map_populate, (unsigned long pnum, int nid), {
    kern_printk("sparse_mem_map_populate is invoked.\n");
    PRE_WRAPPER_FUNC(pnum, nid);
    struct page *ret = sparse_mem_map_populate(pnum, nid);
    POST_WRAPPER_FUNC(pnum, nid);
    kern_printk("sparse_mem_map_populate returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_bvec_free_bs
#define APP_WRAPPER_FOR_bvec_free_bs
#endif
 
#ifndef APP_WRAPPER_FOR_bvec_free_bs
#define APP_WRAPPER_FOR_bvec_free_bs
FUNCTION_WRAPPER_VOID(bvec_free_bs, (struct bio_set *_arg1, struct bio_vec *_arg2, unsigned int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio_set)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio_vec)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("bvec_free_bs is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    bvec_free_bs(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("bvec_free_bs returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio_set)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio_vec)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_vma_interval_tree_iter_next
#define APP_WRAPPER_FOR_vma_interval_tree_iter_next
#endif
 
#ifndef APP_WRAPPER_FOR_vma_interval_tree_iter_next
#define APP_WRAPPER_FOR_vma_interval_tree_iter_next
FUNCTION_WRAPPER(vma_interval_tree_iter_next, (struct vm_area_struct *node, unsigned long start, unsigned long last), {
    WRAP_RECURSIVE(node);
    TRACES_IF_WATCHPOINT(node);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(node)));
    kern_printk("vma_interval_tree_iter_next is invoked.\n");
    PRE_WRAPPER_FUNC(node, start, last);
    struct vm_area_struct *ret = vma_interval_tree_iter_next(node, start, last);
    POST_WRAPPER_FUNC(node, start, last);
    kern_printk("vma_interval_tree_iter_next returned.\n");
    TRACES_IF_WATCHPOINT(node);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(node)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_simple_xattr_alloc
#define APP_WRAPPER_FOR_simple_xattr_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_simple_xattr_alloc
#define APP_WRAPPER_FOR_simple_xattr_alloc
FUNCTION_WRAPPER(simple_xattr_alloc, (const void *value, size_t size), {
    kern_printk("simple_xattr_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(value, size);
    struct simple_xattr *ret = simple_xattr_alloc(value, size);
    POST_WRAPPER_FUNC(value, size);
    kern_printk("simple_xattr_alloc returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_get_compat_itimerspec
#define APP_WRAPPER_FOR_get_compat_itimerspec
#endif
 
#ifndef APP_WRAPPER_FOR_get_compat_itimerspec
#define APP_WRAPPER_FOR_get_compat_itimerspec
FUNCTION_WRAPPER(get_compat_itimerspec, (struct itimerspec *dst, const struct compat_itimerspec *src), {
    kern_printk("get_compat_itimerspec is invoked.\n");
    PRE_WRAPPER_FUNC(dst, src);
    int ret = get_compat_itimerspec(dst, src);
    POST_WRAPPER_FUNC(dst, src);
    kern_printk("get_compat_itimerspec returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_scsi_unregister
#define APP_WRAPPER_FOR_scsi_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_unregister
#define APP_WRAPPER_FOR_scsi_unregister
FUNCTION_WRAPPER_VOID(scsi_unregister, (struct Scsi_Host *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("scsi_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    scsi_unregister(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("scsi_unregister returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_device_find_child
#define APP_WRAPPER_FOR_device_find_child
#endif
 
#ifndef APP_WRAPPER_FOR_device_find_child
#define APP_WRAPPER_FOR_device_find_child
FUNCTION_WRAPPER(device_find_child, (struct device *dev, void *data, int (*match)(struct device *, void *)), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_FUNCTION(match);
    kern_printk("device_find_child is invoked.\n");
    PRE_WRAPPER_FUNC(dev, data, match);
    struct device *ret = device_find_child(dev, data, match);
    POST_WRAPPER_FUNC(dev, data, match);
    kern_printk("device_find_child returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_netdev_notice
#define APP_WRAPPER_FOR_netdev_notice
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_notice
#define APP_WRAPPER_FOR_netdev_notice
FUNCTION_WRAPPER(netdev_notice, (const struct net_device *dev, const char *format, ...), {
    va_list args__;
    va_start(args__, format);
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    // TODO: variadic arguments
    kern_printk("netdev_notice is invoked.\n");
    PRE_WRAPPER_FUNC(dev, format);
    int ret = netdev_notice(dev, format);
    POST_WRAPPER_FUNC(dev, format);
    kern_printk("netdev_notice returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_netdev_info
#define APP_WRAPPER_FOR_netdev_info
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_info
#define APP_WRAPPER_FOR_netdev_info
FUNCTION_WRAPPER(netdev_info, (const struct net_device *dev, const char *format, ...), {
    va_list args__;
    va_start(args__, format);
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    // TODO: variadic arguments
    kern_printk("netdev_info is invoked.\n");
    PRE_WRAPPER_FUNC(dev, format);
    int ret = netdev_info(dev, format);
    POST_WRAPPER_FUNC(dev, format);
    kern_printk("netdev_info returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_bmdma_port_intr
#define APP_WRAPPER_FOR_ata_bmdma_port_intr
#endif
 
#ifndef APP_WRAPPER_FOR_ata_bmdma_port_intr
#define APP_WRAPPER_FOR_ata_bmdma_port_intr
FUNCTION_WRAPPER(ata_bmdma_port_intr, (struct ata_port *ap, struct ata_queued_cmd *qc), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    WRAP_RECURSIVE(qc);
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    kern_printk("ata_bmdma_port_intr is invoked.\n");
    PRE_WRAPPER_FUNC(ap, qc);
    int ret = ata_bmdma_port_intr(ap, qc);
    POST_WRAPPER_FUNC(ap, qc);
    kern_printk("ata_bmdma_port_intr returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    return ret;
})
#endif


#ifndef KERN_ADDR_downgrade_write
#define APP_WRAPPER_FOR_downgrade_write
#endif
 
#ifndef APP_WRAPPER_FOR_downgrade_write
#define APP_WRAPPER_FOR_downgrade_write
FUNCTION_WRAPPER_VOID(downgrade_write, (struct rw_semaphore *sem), {
    kern_printk("downgrade_write is invoked.\n");
    PRE_WRAPPER_FUNC(sem);
    downgrade_write(sem);
    POST_WRAPPER_FUNC(sem);
    kern_printk("downgrade_write returned.\n");
})
#endif


#ifndef KERN_ADDR___kernel_param_lock
#define APP_WRAPPER_FOR___kernel_param_lock
#endif
 
#ifndef APP_WRAPPER_FOR___kernel_param_lock
#define APP_WRAPPER_FOR___kernel_param_lock
FUNCTION_WRAPPER_VOID(__kernel_param_lock, (), {
    kern_printk("__kernel_param_lock is invoked.\n");
    PRE_WRAPPER_FUNC();
    __kernel_param_lock();
    POST_WRAPPER_FUNC();
    kern_printk("__kernel_param_lock returned.\n");
})
#endif


#ifndef KERN_ADDR_bdi_set_min_ratio
#define APP_WRAPPER_FOR_bdi_set_min_ratio
#endif
 
#ifndef APP_WRAPPER_FOR_bdi_set_min_ratio
#define APP_WRAPPER_FOR_bdi_set_min_ratio
FUNCTION_WRAPPER(bdi_set_min_ratio, (struct backing_dev_info *bdi, unsigned int min_ratio), {
    WRAP_RECURSIVE(bdi);
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
    kern_printk("bdi_set_min_ratio is invoked.\n");
    PRE_WRAPPER_FUNC(bdi, min_ratio);
    int ret = bdi_set_min_ratio(bdi, min_ratio);
    POST_WRAPPER_FUNC(bdi, min_ratio);
    kern_printk("bdi_set_min_ratio returned.\n");
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
    return ret;
})
#endif


#ifndef KERN_ADDR_schedule_delayed_work_on
#define APP_WRAPPER_FOR_schedule_delayed_work_on
#endif
 
#ifndef APP_WRAPPER_FOR_schedule_delayed_work_on
#define APP_WRAPPER_FOR_schedule_delayed_work_on
FUNCTION_WRAPPER(schedule_delayed_work_on, (int cpu, struct delayed_work *work, unsigned long delay), {
    WRAP_RECURSIVE(work);
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct delayed_work)(*(TO_UNWATCHED_ADDRESS(work)));
    kern_printk("schedule_delayed_work_on is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, work, delay);
    bool ret = schedule_delayed_work_on(cpu, work, delay);
    POST_WRAPPER_FUNC(cpu, work, delay);
    kern_printk("schedule_delayed_work_on returned.\n");
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct delayed_work)(*(TO_UNWATCHED_ADDRESS(work)));
    return ret;
})
#endif


#ifndef KERN_ADDR_nla_strlcpy
#define APP_WRAPPER_FOR_nla_strlcpy
#endif
 
#ifndef APP_WRAPPER_FOR_nla_strlcpy
#define APP_WRAPPER_FOR_nla_strlcpy
FUNCTION_WRAPPER(nla_strlcpy, (char *dst, const struct nlattr *nla, size_t dstsize), {
    kern_printk("nla_strlcpy is invoked.\n");
    PRE_WRAPPER_FUNC(dst, nla, dstsize);
    size_t ret = nla_strlcpy(dst, nla, dstsize);
    POST_WRAPPER_FUNC(dst, nla, dstsize);
    kern_printk("nla_strlcpy returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_kern_path_create
#define APP_WRAPPER_FOR_kern_path_create
#endif
 
#ifndef APP_WRAPPER_FOR_kern_path_create
#define APP_WRAPPER_FOR_kern_path_create
FUNCTION_WRAPPER(kern_path_create, (int _arg1, const char *_arg2, struct path *_arg3, unsigned int _arg4), {
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("kern_path_create is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    struct dentry *ret = kern_path_create(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("kern_path_create returned.\n");
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_arch_uprobe_abort_xol
#define APP_WRAPPER_FOR_arch_uprobe_abort_xol
#endif
 
#ifndef APP_WRAPPER_FOR_arch_uprobe_abort_xol
#define APP_WRAPPER_FOR_arch_uprobe_abort_xol
FUNCTION_WRAPPER_VOID(arch_uprobe_abort_xol, (struct arch_uprobe *aup, struct pt_regs *regs), {
    kern_printk("arch_uprobe_abort_xol is invoked.\n");
    PRE_WRAPPER_FUNC(aup, regs);
    arch_uprobe_abort_xol(aup, regs);
    POST_WRAPPER_FUNC(aup, regs);
    kern_printk("arch_uprobe_abort_xol returned.\n");
})
#endif


#ifndef KERN_ADDR_proc_doulongvec_minmax
#define APP_WRAPPER_FOR_proc_doulongvec_minmax
#endif
 
#ifndef APP_WRAPPER_FOR_proc_doulongvec_minmax
#define APP_WRAPPER_FOR_proc_doulongvec_minmax
FUNCTION_WRAPPER(proc_doulongvec_minmax, (struct ctl_table *_arg1, int _arg2, void *_arg3, size_t *_arg4, loff_t *_arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("proc_doulongvec_minmax is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = proc_doulongvec_minmax(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("proc_doulongvec_minmax returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sff_tf_load
#define APP_WRAPPER_FOR_ata_sff_tf_load
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_tf_load
#define APP_WRAPPER_FOR_ata_sff_tf_load
FUNCTION_WRAPPER_VOID(ata_sff_tf_load, (struct ata_port *ap, const struct ata_taskfile *tf), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_sff_tf_load is invoked.\n");
    PRE_WRAPPER_FUNC(ap, tf);
    ata_sff_tf_load(ap, tf);
    POST_WRAPPER_FUNC(ap, tf);
    kern_printk("ata_sff_tf_load returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_inet_twsk_purge
#define APP_WRAPPER_FOR_inet_twsk_purge
#endif
 
#ifndef APP_WRAPPER_FOR_inet_twsk_purge
#define APP_WRAPPER_FOR_inet_twsk_purge
FUNCTION_WRAPPER_VOID(inet_twsk_purge, (struct inet_hashinfo *hashinfo, struct inet_timewait_death_row *twdr, int family), {
    WRAP_RECURSIVE(twdr);
    TRACES_IF_WATCHPOINT(twdr);
    SCAN_HEAD_FUNC(struct inet_timewait_death_row)(*(TO_UNWATCHED_ADDRESS(twdr)));
    kern_printk("inet_twsk_purge is invoked.\n");
    PRE_WRAPPER_FUNC(hashinfo, twdr, family);
    inet_twsk_purge(hashinfo, twdr, family);
    POST_WRAPPER_FUNC(hashinfo, twdr, family);
    kern_printk("inet_twsk_purge returned.\n");
    TRACES_IF_WATCHPOINT(twdr);
    SCAN_HEAD_FUNC(struct inet_timewait_death_row)(*(TO_UNWATCHED_ADDRESS(twdr)));
})
#endif


#ifndef KERN_ADDR_pgprot_writecombine
#define APP_WRAPPER_FOR_pgprot_writecombine
#endif
 
#ifndef APP_WRAPPER_FOR_pgprot_writecombine
#define APP_WRAPPER_FOR_pgprot_writecombine
FUNCTION_WRAPPER(pgprot_writecombine, (pgprot_t prot), {
    kern_printk("pgprot_writecombine is invoked.\n");
    PRE_WRAPPER_FUNC(prot);
    pgprot_t ret = pgprot_writecombine(prot);
    POST_WRAPPER_FUNC(prot);
    kern_printk("pgprot_writecombine returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_simple_rename
#define APP_WRAPPER_FOR_simple_rename
#endif
 
#ifndef APP_WRAPPER_FOR_simple_rename
#define APP_WRAPPER_FOR_simple_rename
FUNCTION_WRAPPER(simple_rename, (struct inode *_arg1, struct dentry *_arg2, struct inode *_arg3, struct dentry *_arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    WRAP_RECURSIVE(_arg4);
    TRACES_IF_WATCHPOINT(_arg4);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg4)));
    kern_printk("simple_rename is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = simple_rename(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("simple_rename returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    TRACES_IF_WATCHPOINT(_arg4);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg4)));
    return ret;
})
#endif


#ifndef KERN_ADDR_aio_put_req
#define APP_WRAPPER_FOR_aio_put_req
#endif
 
#ifndef APP_WRAPPER_FOR_aio_put_req
#define APP_WRAPPER_FOR_aio_put_req
FUNCTION_WRAPPER(aio_put_req, (struct kiocb *iocb), {
    WRAP_RECURSIVE(iocb);
    TRACES_IF_WATCHPOINT(iocb);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(iocb)));
    kern_printk("aio_put_req is invoked.\n");
    PRE_WRAPPER_FUNC(iocb);
    int ret = aio_put_req(iocb);
    POST_WRAPPER_FUNC(iocb);
    kern_printk("aio_put_req returned.\n");
    TRACES_IF_WATCHPOINT(iocb);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(iocb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_idle_task
#define APP_WRAPPER_FOR_idle_task
#endif
 
#ifndef APP_WRAPPER_FOR_idle_task
#define APP_WRAPPER_FOR_idle_task
FUNCTION_WRAPPER(idle_task, (int cpu), {
    kern_printk("idle_task is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    struct task_struct *ret = idle_task(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("idle_task returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_hp_remove_module_link
#define APP_WRAPPER_FOR_pci_hp_remove_module_link
#endif
 
#ifndef APP_WRAPPER_FOR_pci_hp_remove_module_link
#define APP_WRAPPER_FOR_pci_hp_remove_module_link
FUNCTION_WRAPPER_VOID(pci_hp_remove_module_link, (struct pci_slot *pci_slot), {
    WRAP_RECURSIVE(pci_slot);
    TRACES_IF_WATCHPOINT(pci_slot);
    SCAN_HEAD_FUNC(struct pci_slot)(*(TO_UNWATCHED_ADDRESS(pci_slot)));
    kern_printk("pci_hp_remove_module_link is invoked.\n");
    PRE_WRAPPER_FUNC(pci_slot);
    pci_hp_remove_module_link(pci_slot);
    POST_WRAPPER_FUNC(pci_slot);
    kern_printk("pci_hp_remove_module_link returned.\n");
    TRACES_IF_WATCHPOINT(pci_slot);
    SCAN_HEAD_FUNC(struct pci_slot)(*(TO_UNWATCHED_ADDRESS(pci_slot)));
})
#endif


#ifndef KERN_ADDR_ata_host_register
#define APP_WRAPPER_FOR_ata_host_register
#endif
 
#ifndef APP_WRAPPER_FOR_ata_host_register
#define APP_WRAPPER_FOR_ata_host_register
FUNCTION_WRAPPER(ata_host_register, (struct ata_host *host, struct scsi_host_template *sht), {
    WRAP_RECURSIVE(host);
    TRACES_IF_WATCHPOINT(host);
    SCAN_HEAD_FUNC(struct ata_host)(*(TO_UNWATCHED_ADDRESS(host)));
    WRAP_RECURSIVE(sht);
    TRACES_IF_WATCHPOINT(sht);
    SCAN_HEAD_FUNC(struct scsi_host_template)(*(TO_UNWATCHED_ADDRESS(sht)));
    kern_printk("ata_host_register is invoked.\n");
    PRE_WRAPPER_FUNC(host, sht);
    int ret = ata_host_register(host, sht);
    POST_WRAPPER_FUNC(host, sht);
    kern_printk("ata_host_register returned.\n");
    TRACES_IF_WATCHPOINT(host);
    SCAN_HEAD_FUNC(struct ata_host)(*(TO_UNWATCHED_ADDRESS(host)));
    TRACES_IF_WATCHPOINT(sht);
    SCAN_HEAD_FUNC(struct scsi_host_template)(*(TO_UNWATCHED_ADDRESS(sht)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_end_request_all
#define APP_WRAPPER_FOR_blk_end_request_all
#endif
 
#ifndef APP_WRAPPER_FOR_blk_end_request_all
#define APP_WRAPPER_FOR_blk_end_request_all
FUNCTION_WRAPPER_VOID(blk_end_request_all, (struct request *rq, int error), {
    WRAP_RECURSIVE(rq);
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    kern_printk("blk_end_request_all is invoked.\n");
    PRE_WRAPPER_FUNC(rq, error);
    blk_end_request_all(rq, error);
    POST_WRAPPER_FUNC(rq, error);
    kern_printk("blk_end_request_all returned.\n");
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
})
#endif


#ifndef KERN_ADDR___kernel_param_unlock
#define APP_WRAPPER_FOR___kernel_param_unlock
#endif
 
#ifndef APP_WRAPPER_FOR___kernel_param_unlock
#define APP_WRAPPER_FOR___kernel_param_unlock
FUNCTION_WRAPPER_VOID(__kernel_param_unlock, (), {
    kern_printk("__kernel_param_unlock is invoked.\n");
    PRE_WRAPPER_FUNC();
    __kernel_param_unlock();
    POST_WRAPPER_FUNC();
    kern_printk("__kernel_param_unlock returned.\n");
})
#endif


#ifndef KERN_ADDR_skb_realloc_headroom
#define APP_WRAPPER_FOR_skb_realloc_headroom
#endif
 
#ifndef APP_WRAPPER_FOR_skb_realloc_headroom
#define APP_WRAPPER_FOR_skb_realloc_headroom
FUNCTION_WRAPPER(skb_realloc_headroom, (struct sk_buff *skb, unsigned int headroom), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_realloc_headroom is invoked.\n");
    PRE_WRAPPER_FUNC(skb, headroom);
    struct sk_buff *ret = skb_realloc_headroom(skb, headroom);
    POST_WRAPPER_FUNC(skb, headroom);
    kern_printk("skb_realloc_headroom returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_pull
#define APP_WRAPPER_FOR_skb_pull
#endif
 
#ifndef APP_WRAPPER_FOR_skb_pull
#define APP_WRAPPER_FOR_skb_pull
FUNCTION_WRAPPER(skb_pull, (struct sk_buff *skb, unsigned int len), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_pull is invoked.\n");
    PRE_WRAPPER_FUNC(skb, len);
    unsigned char *ret = skb_pull(skb, len);
    POST_WRAPPER_FUNC(skb, len);
    kern_printk("skb_pull returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_disable_device
#define APP_WRAPPER_FOR_pci_disable_device
#endif
 
#ifndef APP_WRAPPER_FOR_pci_disable_device
#define APP_WRAPPER_FOR_pci_disable_device
FUNCTION_WRAPPER_VOID(pci_disable_device, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_disable_device is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pci_disable_device(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_disable_device returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_finish_open
#define APP_WRAPPER_FOR_finish_open
#endif
 
#ifndef APP_WRAPPER_FOR_finish_open
#define APP_WRAPPER_FOR_finish_open
FUNCTION_WRAPPER(finish_open, (struct file *file, struct dentry *dentry, int (*open)(struct inode *, struct file *), int *opened), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    WRAP_RECURSIVE(dentry);
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    WRAP_FUNCTION(open);
    kern_printk("finish_open is invoked.\n");
    PRE_WRAPPER_FUNC(file, dentry, open, opened);
    int ret = finish_open(file, dentry, open, opened);
    POST_WRAPPER_FUNC(file, dentry, open, opened);
    kern_printk("finish_open returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    return ret;
})
#endif


#ifndef KERN_ADDR_register_task_migration_notifier
#define APP_WRAPPER_FOR_register_task_migration_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_register_task_migration_notifier
#define APP_WRAPPER_FOR_register_task_migration_notifier
FUNCTION_WRAPPER_VOID(register_task_migration_notifier, (struct notifier_block *n), {
    WRAP_RECURSIVE(n);
    TRACES_IF_WATCHPOINT(n);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(n)));
    kern_printk("register_task_migration_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(n);
    register_task_migration_notifier(n);
    POST_WRAPPER_FUNC(n);
    kern_printk("register_task_migration_notifier returned.\n");
    TRACES_IF_WATCHPOINT(n);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(n)));
})
#endif


#ifndef KERN_ADDR_acpi_nvs_nosave_s3
#define APP_WRAPPER_FOR_acpi_nvs_nosave_s3
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_nvs_nosave_s3
#define APP_WRAPPER_FOR_acpi_nvs_nosave_s3
FUNCTION_WRAPPER_VOID(acpi_nvs_nosave_s3, (), {
    kern_printk("acpi_nvs_nosave_s3 is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_nvs_nosave_s3();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_nvs_nosave_s3 returned.\n");
})
#endif


#ifndef KERN_ADDR_crypto_ahash_finup
#define APP_WRAPPER_FOR_crypto_ahash_finup
#endif
 
#ifndef APP_WRAPPER_FOR_crypto_ahash_finup
#define APP_WRAPPER_FOR_crypto_ahash_finup
FUNCTION_WRAPPER(crypto_ahash_finup, (struct ahash_request *req), {
    WRAP_RECURSIVE(req);
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct ahash_request)(*(TO_UNWATCHED_ADDRESS(req)));
    kern_printk("crypto_ahash_finup is invoked.\n");
    PRE_WRAPPER_FUNC(req);
    int ret = crypto_ahash_finup(req);
    POST_WRAPPER_FUNC(req);
    kern_printk("crypto_ahash_finup returned.\n");
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct ahash_request)(*(TO_UNWATCHED_ADDRESS(req)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_cancel_revoke
#define APP_WRAPPER_FOR_jbd2_journal_cancel_revoke
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_cancel_revoke
#define APP_WRAPPER_FOR_jbd2_journal_cancel_revoke
FUNCTION_WRAPPER(jbd2_journal_cancel_revoke, (handle_t *_arg1, struct journal_head *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(handle_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("jbd2_journal_cancel_revoke is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = jbd2_journal_cancel_revoke(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("jbd2_journal_cancel_revoke returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(handle_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_csk_compat_getsockopt
#define APP_WRAPPER_FOR_inet_csk_compat_getsockopt
#endif
 
#ifndef APP_WRAPPER_FOR_inet_csk_compat_getsockopt
#define APP_WRAPPER_FOR_inet_csk_compat_getsockopt
FUNCTION_WRAPPER(inet_csk_compat_getsockopt, (struct sock *sk, int level, int optname, char *optval, int *optlen), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("inet_csk_compat_getsockopt is invoked.\n");
    PRE_WRAPPER_FUNC(sk, level, optname, optval, optlen);
    int ret = inet_csk_compat_getsockopt(sk, level, optname, optval, optlen);
    POST_WRAPPER_FUNC(sk, level, optname, optval, optlen);
    kern_printk("inet_csk_compat_getsockopt returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_inc_zone_state
#define APP_WRAPPER_FOR_inc_zone_state
#endif
 
#ifndef APP_WRAPPER_FOR_inc_zone_state
#define APP_WRAPPER_FOR_inc_zone_state
FUNCTION_WRAPPER_VOID(inc_zone_state, (struct zone *_arg1, enum zone_stat_item _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("inc_zone_state is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    inc_zone_state(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("inc_zone_state returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_refresh_zone_stat_thresholds
#define APP_WRAPPER_FOR_refresh_zone_stat_thresholds
#endif
 
#ifndef APP_WRAPPER_FOR_refresh_zone_stat_thresholds
#define APP_WRAPPER_FOR_refresh_zone_stat_thresholds
FUNCTION_WRAPPER_VOID(refresh_zone_stat_thresholds, (), {
    kern_printk("refresh_zone_stat_thresholds is invoked.\n");
    PRE_WRAPPER_FUNC();
    refresh_zone_stat_thresholds();
    POST_WRAPPER_FUNC();
    kern_printk("refresh_zone_stat_thresholds returned.\n");
})
#endif


#ifndef KERN_ADDR_vfs_symlink
#define APP_WRAPPER_FOR_vfs_symlink
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_symlink
#define APP_WRAPPER_FOR_vfs_symlink
FUNCTION_WRAPPER(vfs_symlink, (struct inode *_arg1, struct dentry *_arg2, const char *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("vfs_symlink is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = vfs_symlink(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("vfs_symlink returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_write
#define APP_WRAPPER_FOR_acpi_write
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_write
#define APP_WRAPPER_FOR_acpi_write
FUNCTION_WRAPPER(acpi_write, (u64 value, struct acpi_generic_address *reg), {
    kern_printk("acpi_write is invoked.\n");
    PRE_WRAPPER_FUNC(value, reg);
    acpi_status ret = acpi_write(value, reg);
    POST_WRAPPER_FUNC(value, reg);
    kern_printk("acpi_write returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_set_page_dirty_balance
#define APP_WRAPPER_FOR_set_page_dirty_balance
#endif
 
#ifndef APP_WRAPPER_FOR_set_page_dirty_balance
#define APP_WRAPPER_FOR_set_page_dirty_balance
FUNCTION_WRAPPER_VOID(set_page_dirty_balance, (struct page *page, int page_mkwrite), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("set_page_dirty_balance is invoked.\n");
    PRE_WRAPPER_FUNC(page, page_mkwrite);
    set_page_dirty_balance(page, page_mkwrite);
    POST_WRAPPER_FUNC(page, page_mkwrite);
    kern_printk("set_page_dirty_balance returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR___sg_free_table
#define APP_WRAPPER_FOR___sg_free_table
#endif
 
#ifndef APP_WRAPPER_FOR___sg_free_table
#define APP_WRAPPER_FOR___sg_free_table
FUNCTION_WRAPPER_VOID(__sg_free_table, (struct sg_table *_arg1, unsigned int _arg2, sg_free_fn *_arg3), {
    WRAP_FUNCTION(_arg3);
    kern_printk("__sg_free_table is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    __sg_free_table(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("__sg_free_table returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_scan_bus_on_node
#define APP_WRAPPER_FOR_pci_scan_bus_on_node
#endif
 
#ifndef APP_WRAPPER_FOR_pci_scan_bus_on_node
#define APP_WRAPPER_FOR_pci_scan_bus_on_node
FUNCTION_WRAPPER(pci_scan_bus_on_node, (int busno, struct pci_ops *ops, int node), {
    WRAP_RECURSIVE(ops);
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct pci_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    kern_printk("pci_scan_bus_on_node is invoked.\n");
    PRE_WRAPPER_FUNC(busno, ops, node);
    struct pci_bus *ret = pci_scan_bus_on_node(busno, ops, node);
    POST_WRAPPER_FUNC(busno, ops, node);
    kern_printk("pci_scan_bus_on_node returned.\n");
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct pci_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR__raw_read_trylock
#define APP_WRAPPER_FOR__raw_read_trylock
#endif
 
#ifndef APP_WRAPPER_FOR__raw_read_trylock
#define APP_WRAPPER_FOR__raw_read_trylock
FUNCTION_WRAPPER(_raw_read_trylock, (rwlock_t *lock), {
    kern_printk("_raw_read_trylock is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    int ret = _raw_read_trylock(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("_raw_read_trylock returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_e820_any_mapped
#define APP_WRAPPER_FOR_e820_any_mapped
#endif
 
#ifndef APP_WRAPPER_FOR_e820_any_mapped
#define APP_WRAPPER_FOR_e820_any_mapped
FUNCTION_WRAPPER(e820_any_mapped, (u64 start, u64 end, unsigned int type), {
    kern_printk("e820_any_mapped is invoked.\n");
    PRE_WRAPPER_FUNC(start, end, type);
    int ret = e820_any_mapped(start, end, type);
    POST_WRAPPER_FUNC(start, end, type);
    kern_printk("e820_any_mapped returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_queue_update_dma_pad
#define APP_WRAPPER_FOR_blk_queue_update_dma_pad
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_update_dma_pad
#define APP_WRAPPER_FOR_blk_queue_update_dma_pad
FUNCTION_WRAPPER_VOID(blk_queue_update_dma_pad, (struct request_queue *_arg1, unsigned int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_queue_update_dma_pad is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    blk_queue_update_dma_pad(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_queue_update_dma_pad returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_pcibios_resource_to_bus
#define APP_WRAPPER_FOR_pcibios_resource_to_bus
#endif
 
#ifndef APP_WRAPPER_FOR_pcibios_resource_to_bus
#define APP_WRAPPER_FOR_pcibios_resource_to_bus
FUNCTION_WRAPPER_VOID(pcibios_resource_to_bus, (struct pci_dev *dev, struct pci_bus_region *region, struct resource *res), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pcibios_resource_to_bus is invoked.\n");
    PRE_WRAPPER_FUNC(dev, region, res);
    pcibios_resource_to_bus(dev, region, res);
    POST_WRAPPER_FUNC(dev, region, res);
    kern_printk("pcibios_resource_to_bus returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_match_token
#define APP_WRAPPER_FOR_match_token
#endif
 
#ifndef APP_WRAPPER_FOR_match_token
#define APP_WRAPPER_FOR_match_token
FUNCTION_WRAPPER(match_token, (char *_arg1, const match_table_t table, substring_t args[]), {
    kern_printk("match_token is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, table, args);
    int ret = match_token(_arg1, table, args);
    POST_WRAPPER_FUNC(_arg1, table, args);
    kern_printk("match_token returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_truncate
#define APP_WRAPPER_FOR_vfs_truncate
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_truncate
#define APP_WRAPPER_FOR_vfs_truncate
FUNCTION_WRAPPER(vfs_truncate, (struct path *_arg1, loff_t _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("vfs_truncate is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    long ret = vfs_truncate(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("vfs_truncate returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_wakeup_source_destroy
#define APP_WRAPPER_FOR_wakeup_source_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_wakeup_source_destroy
#define APP_WRAPPER_FOR_wakeup_source_destroy
FUNCTION_WRAPPER_VOID(wakeup_source_destroy, (struct wakeup_source *ws), {
    WRAP_RECURSIVE(ws);
    TRACES_IF_WATCHPOINT(ws);
    SCAN_HEAD_FUNC(struct wakeup_source)(*(TO_UNWATCHED_ADDRESS(ws)));
    kern_printk("wakeup_source_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(ws);
    wakeup_source_destroy(ws);
    POST_WRAPPER_FUNC(ws);
    kern_printk("wakeup_source_destroy returned.\n");
    TRACES_IF_WATCHPOINT(ws);
    SCAN_HEAD_FUNC(struct wakeup_source)(*(TO_UNWATCHED_ADDRESS(ws)));
})
#endif


#ifndef KERN_ADDR_pci_msi_enabled
#define APP_WRAPPER_FOR_pci_msi_enabled
#endif
 
#ifndef APP_WRAPPER_FOR_pci_msi_enabled
#define APP_WRAPPER_FOR_pci_msi_enabled
FUNCTION_WRAPPER(pci_msi_enabled, (), {
    kern_printk("pci_msi_enabled is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = pci_msi_enabled();
    POST_WRAPPER_FUNC();
    kern_printk("pci_msi_enabled returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dst_cow_metrics_generic
#define APP_WRAPPER_FOR_dst_cow_metrics_generic
#endif
 
#ifndef APP_WRAPPER_FOR_dst_cow_metrics_generic
#define APP_WRAPPER_FOR_dst_cow_metrics_generic
FUNCTION_WRAPPER(dst_cow_metrics_generic, (struct dst_entry *dst, unsigned long old), {
    WRAP_RECURSIVE(dst);
    TRACES_IF_WATCHPOINT(dst);
    SCAN_HEAD_FUNC(struct dst_entry)(*(TO_UNWATCHED_ADDRESS(dst)));
    kern_printk("dst_cow_metrics_generic is invoked.\n");
    PRE_WRAPPER_FUNC(dst, old);
    u32 *ret = dst_cow_metrics_generic(dst, old);
    POST_WRAPPER_FUNC(dst, old);
    kern_printk("dst_cow_metrics_generic returned.\n");
    TRACES_IF_WATCHPOINT(dst);
    SCAN_HEAD_FUNC(struct dst_entry)(*(TO_UNWATCHED_ADDRESS(dst)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_locks_delete_block
#define APP_WRAPPER_FOR_locks_delete_block
#endif
 
#ifndef APP_WRAPPER_FOR_locks_delete_block
#define APP_WRAPPER_FOR_locks_delete_block
FUNCTION_WRAPPER_VOID(locks_delete_block, (struct file_lock *waiter), {
    WRAP_RECURSIVE(waiter);
    TRACES_IF_WATCHPOINT(waiter);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(waiter)));
    kern_printk("locks_delete_block is invoked.\n");
    PRE_WRAPPER_FUNC(waiter);
    locks_delete_block(waiter);
    POST_WRAPPER_FUNC(waiter);
    kern_printk("locks_delete_block returned.\n");
    TRACES_IF_WATCHPOINT(waiter);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(waiter)));
})
#endif


#ifndef KERN_ADDR_do_fork
#define APP_WRAPPER_FOR_do_fork
#endif
 
#ifndef APP_WRAPPER_FOR_do_fork
#define APP_WRAPPER_FOR_do_fork
FUNCTION_WRAPPER(do_fork, (unsigned long _arg1, unsigned long _arg2, unsigned long _arg3, int *_arg4, int *_arg5), {
    kern_printk("do_fork is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    long ret = do_fork(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("do_fork returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_lease_modify
#define APP_WRAPPER_FOR_lease_modify
#endif
 
#ifndef APP_WRAPPER_FOR_lease_modify
#define APP_WRAPPER_FOR_lease_modify
FUNCTION_WRAPPER(lease_modify, (struct file_lock **_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file_lock *)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("lease_modify is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = lease_modify(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("lease_modify returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file_lock *)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_hard_smp_processor_id
#define APP_WRAPPER_FOR_hard_smp_processor_id
#endif
 
#ifndef APP_WRAPPER_FOR_hard_smp_processor_id
#define APP_WRAPPER_FOR_hard_smp_processor_id
FUNCTION_WRAPPER(hard_smp_processor_id, (), {
    kern_printk("hard_smp_processor_id is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = hard_smp_processor_id();
    POST_WRAPPER_FUNC();
    kern_printk("hard_smp_processor_id returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_nvs_register
#define APP_WRAPPER_FOR_acpi_nvs_register
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_nvs_register
#define APP_WRAPPER_FOR_acpi_nvs_register
FUNCTION_WRAPPER(acpi_nvs_register, (__u64 start, __u64 size), {
    kern_printk("acpi_nvs_register is invoked.\n");
    PRE_WRAPPER_FUNC(start, size);
    int ret = acpi_nvs_register(start, size);
    POST_WRAPPER_FUNC(start, size);
    kern_printk("acpi_nvs_register returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_get_table_with_size
#define APP_WRAPPER_FOR_acpi_get_table_with_size
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_table_with_size
#define APP_WRAPPER_FOR_acpi_get_table_with_size
FUNCTION_WRAPPER(acpi_get_table_with_size, (acpi_string signature, u32 instance, struct acpi_table_header **out_table, acpi_size *tbl_size), {
    kern_printk("acpi_get_table_with_size is invoked.\n");
    PRE_WRAPPER_FUNC(signature, instance, out_table, tbl_size);
    acpi_status ret = acpi_get_table_with_size(signature, instance, out_table, tbl_size);
    POST_WRAPPER_FUNC(signature, instance, out_table, tbl_size);
    kern_printk("acpi_get_table_with_size returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_radix_tree_lookup_slot
#define APP_WRAPPER_FOR_radix_tree_lookup_slot
#endif
 
#ifndef APP_WRAPPER_FOR_radix_tree_lookup_slot
#define APP_WRAPPER_FOR_radix_tree_lookup_slot
FUNCTION_WRAPPER(radix_tree_lookup_slot, (struct radix_tree_root *_arg1, unsigned long _arg2), {
    kern_printk("radix_tree_lookup_slot is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    void **ret = radix_tree_lookup_slot(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("radix_tree_lookup_slot returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pcibios_add_platform_entries
#define APP_WRAPPER_FOR_pcibios_add_platform_entries
#endif
 
#ifndef APP_WRAPPER_FOR_pcibios_add_platform_entries
#define APP_WRAPPER_FOR_pcibios_add_platform_entries
FUNCTION_WRAPPER(pcibios_add_platform_entries, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pcibios_add_platform_entries is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pcibios_add_platform_entries(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pcibios_add_platform_entries returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_swiotlb_tbl_sync_single
#define APP_WRAPPER_FOR_swiotlb_tbl_sync_single
#endif
 
#ifndef APP_WRAPPER_FOR_swiotlb_tbl_sync_single
#define APP_WRAPPER_FOR_swiotlb_tbl_sync_single
FUNCTION_WRAPPER_VOID(swiotlb_tbl_sync_single, (struct device *hwdev, phys_addr_t tlb_addr, size_t size, enum dma_data_direction dir, enum dma_sync_target target), {
    WRAP_RECURSIVE(hwdev);
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
    kern_printk("swiotlb_tbl_sync_single is invoked.\n");
    PRE_WRAPPER_FUNC(hwdev, tlb_addr, size, dir, target);
    swiotlb_tbl_sync_single(hwdev, tlb_addr, size, dir, target);
    POST_WRAPPER_FUNC(hwdev, tlb_addr, size, dir, target);
    kern_printk("swiotlb_tbl_sync_single returned.\n");
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
})
#endif


#ifndef KERN_ADDR_sata_set_spd
#define APP_WRAPPER_FOR_sata_set_spd
#endif
 
#ifndef APP_WRAPPER_FOR_sata_set_spd
#define APP_WRAPPER_FOR_sata_set_spd
FUNCTION_WRAPPER(sata_set_spd, (struct ata_link *link), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    kern_printk("sata_set_spd is invoked.\n");
    PRE_WRAPPER_FUNC(link);
    int ret = sata_set_spd(link);
    POST_WRAPPER_FUNC(link);
    kern_printk("sata_set_spd returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_load_saved_state
#define APP_WRAPPER_FOR_pci_load_saved_state
#endif
 
#ifndef APP_WRAPPER_FOR_pci_load_saved_state
#define APP_WRAPPER_FOR_pci_load_saved_state
FUNCTION_WRAPPER(pci_load_saved_state, (struct pci_dev *dev, struct pci_saved_state *state), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_load_saved_state is invoked.\n");
    PRE_WRAPPER_FUNC(dev, state);
    int ret = pci_load_saved_state(dev, state);
    POST_WRAPPER_FUNC(dev, state);
    kern_printk("pci_load_saved_state returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_netdev_increment_features
#define APP_WRAPPER_FOR_netdev_increment_features
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_increment_features
#define APP_WRAPPER_FOR_netdev_increment_features
FUNCTION_WRAPPER(netdev_increment_features, (netdev_features_t all, netdev_features_t one, netdev_features_t mask), {
    kern_printk("netdev_increment_features is invoked.\n");
    PRE_WRAPPER_FUNC(all, one, mask);
    netdev_features_t ret = netdev_increment_features(all, one, mask);
    POST_WRAPPER_FUNC(all, one, mask);
    kern_printk("netdev_increment_features returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_kick_process
#define APP_WRAPPER_FOR_kick_process
#endif
 
#ifndef APP_WRAPPER_FOR_kick_process
#define APP_WRAPPER_FOR_kick_process
FUNCTION_WRAPPER_VOID(kick_process, (struct task_struct *tsk), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("kick_process is invoked.\n");
    PRE_WRAPPER_FUNC(tsk);
    kick_process(tsk);
    POST_WRAPPER_FUNC(tsk);
    kern_printk("kick_process returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
})
#endif


#ifndef KERN_ADDR_get_physical_broadcast
#define APP_WRAPPER_FOR_get_physical_broadcast
#endif
 
#ifndef APP_WRAPPER_FOR_get_physical_broadcast
#define APP_WRAPPER_FOR_get_physical_broadcast
FUNCTION_WRAPPER(get_physical_broadcast, (), {
    kern_printk("get_physical_broadcast is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = get_physical_broadcast();
    POST_WRAPPER_FUNC();
    kern_printk("get_physical_broadcast returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_memcpy_toiovec
#define APP_WRAPPER_FOR_memcpy_toiovec
#endif
 
#ifndef APP_WRAPPER_FOR_memcpy_toiovec
#define APP_WRAPPER_FOR_memcpy_toiovec
FUNCTION_WRAPPER(memcpy_toiovec, (struct iovec *v, unsigned char *kdata, int len), {
    kern_printk("memcpy_toiovec is invoked.\n");
    PRE_WRAPPER_FUNC(v, kdata, len);
    int ret = memcpy_toiovec(v, kdata, len);
    POST_WRAPPER_FUNC(v, kdata, len);
    kern_printk("memcpy_toiovec returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_tsc_init
#define APP_WRAPPER_FOR_tsc_init
#endif
 
#ifndef APP_WRAPPER_FOR_tsc_init
#define APP_WRAPPER_FOR_tsc_init
FUNCTION_WRAPPER_VOID(tsc_init, (), {
    kern_printk("tsc_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    tsc_init();
    POST_WRAPPER_FUNC();
    kern_printk("tsc_init returned.\n");
})
#endif


#ifndef KERN_ADDR_irq_gc_mask_clr_bit
#define APP_WRAPPER_FOR_irq_gc_mask_clr_bit
#endif
 
#ifndef APP_WRAPPER_FOR_irq_gc_mask_clr_bit
#define APP_WRAPPER_FOR_irq_gc_mask_clr_bit
FUNCTION_WRAPPER_VOID(irq_gc_mask_clr_bit, (struct irq_data *d), {
    WRAP_RECURSIVE(d);
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(d)));
    kern_printk("irq_gc_mask_clr_bit is invoked.\n");
    PRE_WRAPPER_FUNC(d);
    irq_gc_mask_clr_bit(d);
    POST_WRAPPER_FUNC(d);
    kern_printk("irq_gc_mask_clr_bit returned.\n");
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(d)));
})
#endif


#ifndef KERN_ADDR_compare_pnp_id
#define APP_WRAPPER_FOR_compare_pnp_id
#endif
 
#ifndef APP_WRAPPER_FOR_compare_pnp_id
#define APP_WRAPPER_FOR_compare_pnp_id
FUNCTION_WRAPPER(compare_pnp_id, (struct pnp_id *pos, const char *id), {
    kern_printk("compare_pnp_id is invoked.\n");
    PRE_WRAPPER_FUNC(pos, id);
    int ret = compare_pnp_id(pos, id);
    POST_WRAPPER_FUNC(pos, id);
    kern_printk("compare_pnp_id returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_scm_detach_fds
#define APP_WRAPPER_FOR_scm_detach_fds
#endif
 
#ifndef APP_WRAPPER_FOR_scm_detach_fds
#define APP_WRAPPER_FOR_scm_detach_fds
FUNCTION_WRAPPER_VOID(scm_detach_fds, (struct msghdr *msg, struct scm_cookie *scm), {
    WRAP_RECURSIVE(scm);
    TRACES_IF_WATCHPOINT(scm);
    SCAN_HEAD_FUNC(struct scm_cookie)(*(TO_UNWATCHED_ADDRESS(scm)));
    kern_printk("scm_detach_fds is invoked.\n");
    PRE_WRAPPER_FUNC(msg, scm);
    scm_detach_fds(msg, scm);
    POST_WRAPPER_FUNC(msg, scm);
    kern_printk("scm_detach_fds returned.\n");
    TRACES_IF_WATCHPOINT(scm);
    SCAN_HEAD_FUNC(struct scm_cookie)(*(TO_UNWATCHED_ADDRESS(scm)));
})
#endif


#ifndef KERN_ADDR_sock_no_setsockopt
#define APP_WRAPPER_FOR_sock_no_setsockopt
#endif
 
#ifndef APP_WRAPPER_FOR_sock_no_setsockopt
#define APP_WRAPPER_FOR_sock_no_setsockopt
FUNCTION_WRAPPER(sock_no_setsockopt, (struct socket *_arg1, int _arg2, int _arg3, char *_arg4, unsigned int _arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("sock_no_setsockopt is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = sock_no_setsockopt(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("sock_no_setsockopt returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_put_disk
#define APP_WRAPPER_FOR_put_disk
#endif
 
#ifndef APP_WRAPPER_FOR_put_disk
#define APP_WRAPPER_FOR_put_disk
FUNCTION_WRAPPER_VOID(put_disk, (struct gendisk *disk), {
    WRAP_RECURSIVE(disk);
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    kern_printk("put_disk is invoked.\n");
    PRE_WRAPPER_FUNC(disk);
    put_disk(disk);
    POST_WRAPPER_FUNC(disk);
    kern_printk("put_disk returned.\n");
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
})
#endif


#ifndef KERN_ADDR_wait_task_inactive
#define APP_WRAPPER_FOR_wait_task_inactive
#endif
 
#ifndef APP_WRAPPER_FOR_wait_task_inactive
#define APP_WRAPPER_FOR_wait_task_inactive
FUNCTION_WRAPPER(wait_task_inactive, (struct task_struct *_arg1, long match_state), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("wait_task_inactive is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, match_state);
    long ret = wait_task_inactive(_arg1, match_state);
    POST_WRAPPER_FUNC(_arg1, match_state);
    kern_printk("wait_task_inactive returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_flush_work
#define APP_WRAPPER_FOR_flush_work
#endif
 
#ifndef APP_WRAPPER_FOR_flush_work
#define APP_WRAPPER_FOR_flush_work
FUNCTION_WRAPPER(flush_work, (struct work_struct *work), {
    WRAP_RECURSIVE(work);
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
    kern_printk("flush_work is invoked.\n");
    PRE_WRAPPER_FUNC(work);
    bool ret = flush_work(work);
    POST_WRAPPER_FUNC(work);
    kern_printk("flush_work returned.\n");
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
    return ret;
})
#endif


#ifndef KERN_ADDR___break_lease
#define APP_WRAPPER_FOR___break_lease
#endif
 
#ifndef APP_WRAPPER_FOR___break_lease
#define APP_WRAPPER_FOR___break_lease
FUNCTION_WRAPPER(__break_lease, (struct inode *inode, unsigned int flags), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("__break_lease is invoked.\n");
    PRE_WRAPPER_FUNC(inode, flags);
    int ret = __break_lease(inode, flags);
    POST_WRAPPER_FUNC(inode, flags);
    kern_printk("__break_lease returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    return ret;
})
#endif


#ifndef KERN_ADDR_swiotlb_dma_supported
#define APP_WRAPPER_FOR_swiotlb_dma_supported
#endif
 
#ifndef APP_WRAPPER_FOR_swiotlb_dma_supported
#define APP_WRAPPER_FOR_swiotlb_dma_supported
FUNCTION_WRAPPER(swiotlb_dma_supported, (struct device *hwdev, u64 mask), {
    WRAP_RECURSIVE(hwdev);
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
    kern_printk("swiotlb_dma_supported is invoked.\n");
    PRE_WRAPPER_FUNC(hwdev, mask);
    int ret = swiotlb_dma_supported(hwdev, mask);
    POST_WRAPPER_FUNC(hwdev, mask);
    kern_printk("swiotlb_dma_supported returned.\n");
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_parse_early_param
#define APP_WRAPPER_FOR_parse_early_param
#endif
 
#ifndef APP_WRAPPER_FOR_parse_early_param
#define APP_WRAPPER_FOR_parse_early_param
FUNCTION_WRAPPER_VOID(parse_early_param, (), {
    kern_printk("parse_early_param is invoked.\n");
    PRE_WRAPPER_FUNC();
    parse_early_param();
    POST_WRAPPER_FUNC();
    kern_printk("parse_early_param returned.\n");
})
#endif


#ifndef KERN_ADDR___lock_buffer
#define APP_WRAPPER_FOR___lock_buffer
#endif
 
#ifndef APP_WRAPPER_FOR___lock_buffer
#define APP_WRAPPER_FOR___lock_buffer
FUNCTION_WRAPPER_VOID(__lock_buffer, (struct buffer_head *bh), {
    WRAP_RECURSIVE(bh);
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    kern_printk("__lock_buffer is invoked.\n");
    PRE_WRAPPER_FUNC(bh);
    __lock_buffer(bh);
    POST_WRAPPER_FUNC(bh);
    kern_printk("__lock_buffer returned.\n");
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
})
#endif


#ifndef KERN_ADDR_si_meminfo
#define APP_WRAPPER_FOR_si_meminfo
#endif
 
#ifndef APP_WRAPPER_FOR_si_meminfo
#define APP_WRAPPER_FOR_si_meminfo
FUNCTION_WRAPPER_VOID(si_meminfo, (struct sysinfo *val), {
    kern_printk("si_meminfo is invoked.\n");
    PRE_WRAPPER_FUNC(val);
    si_meminfo(val);
    POST_WRAPPER_FUNC(val);
    kern_printk("si_meminfo returned.\n");
})
#endif


#ifndef KERN_ADDR_dquot_set_dqinfo
#define APP_WRAPPER_FOR_dquot_set_dqinfo
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_set_dqinfo
#define APP_WRAPPER_FOR_dquot_set_dqinfo
FUNCTION_WRAPPER(dquot_set_dqinfo, (struct super_block *sb, int type, struct if_dqinfo *ii), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("dquot_set_dqinfo is invoked.\n");
    PRE_WRAPPER_FUNC(sb, type, ii);
    int ret = dquot_set_dqinfo(sb, type, ii);
    POST_WRAPPER_FUNC(sb, type, ii);
    kern_printk("dquot_set_dqinfo returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_block_bmap
#define APP_WRAPPER_FOR_generic_block_bmap
#endif
 
#ifndef APP_WRAPPER_FOR_generic_block_bmap
#define APP_WRAPPER_FOR_generic_block_bmap
FUNCTION_WRAPPER(generic_block_bmap, (struct address_space *_arg1, sector_t _arg2, get_block_t *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_FUNCTION(_arg3);
    kern_printk("generic_block_bmap is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    sector_t ret = generic_block_bmap(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("generic_block_bmap returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_free_anon_bdev
#define APP_WRAPPER_FOR_free_anon_bdev
#endif
 
#ifndef APP_WRAPPER_FOR_free_anon_bdev
#define APP_WRAPPER_FOR_free_anon_bdev
FUNCTION_WRAPPER_VOID(free_anon_bdev, (dev_t _arg1), {
    kern_printk("free_anon_bdev is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    free_anon_bdev(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("free_anon_bdev returned.\n");
})
#endif


#ifndef KERN_ADDR_sched_clock
#define APP_WRAPPER_FOR_sched_clock
#endif
 
#ifndef APP_WRAPPER_FOR_sched_clock
#define APP_WRAPPER_FOR_sched_clock
FUNCTION_WRAPPER(sched_clock, (), {
    kern_printk("sched_clock is invoked.\n");
    PRE_WRAPPER_FUNC();
    long long ret = sched_clock();
    POST_WRAPPER_FUNC();
    kern_printk("sched_clock returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_ext_cfg_avail
#define APP_WRAPPER_FOR_pci_ext_cfg_avail
#endif
 
#ifndef APP_WRAPPER_FOR_pci_ext_cfg_avail
#define APP_WRAPPER_FOR_pci_ext_cfg_avail
FUNCTION_WRAPPER(pci_ext_cfg_avail, (), {
    kern_printk("pci_ext_cfg_avail is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = pci_ext_cfg_avail();
    POST_WRAPPER_FUNC();
    kern_printk("pci_ext_cfg_avail returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ioremap_prot
#define APP_WRAPPER_FOR_ioremap_prot
#endif
 
#ifndef APP_WRAPPER_FOR_ioremap_prot
#define APP_WRAPPER_FOR_ioremap_prot
FUNCTION_WRAPPER(ioremap_prot, (resource_size_t offset, unsigned long size, unsigned long prot_val), {
    kern_printk("ioremap_prot is invoked.\n");
    PRE_WRAPPER_FUNC(offset, size, prot_val);
    void *ret = ioremap_prot(offset, size, prot_val);
    POST_WRAPPER_FUNC(offset, size, prot_val);
    kern_printk("ioremap_prot returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_default_llseek
#define APP_WRAPPER_FOR_default_llseek
#endif
 
#ifndef APP_WRAPPER_FOR_default_llseek
#define APP_WRAPPER_FOR_default_llseek
FUNCTION_WRAPPER(default_llseek, (struct file *file, loff_t offset, int whence), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("default_llseek is invoked.\n");
    PRE_WRAPPER_FUNC(file, offset, whence);
    loff_t ret = default_llseek(file, offset, whence);
    POST_WRAPPER_FUNC(file, offset, whence);
    kern_printk("default_llseek returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kstrtoul_from_user
#define APP_WRAPPER_FOR_kstrtoul_from_user
#endif
 
#ifndef APP_WRAPPER_FOR_kstrtoul_from_user
#define APP_WRAPPER_FOR_kstrtoul_from_user
FUNCTION_WRAPPER(kstrtoul_from_user, (const char *s, size_t count, unsigned int base, unsigned long *res), {
    kern_printk("kstrtoul_from_user is invoked.\n");
    PRE_WRAPPER_FUNC(s, count, base, res);
    int ret = kstrtoul_from_user(s, count, base, res);
    POST_WRAPPER_FUNC(s, count, base, res);
    kern_printk("kstrtoul_from_user returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_unsynchronized_tsc
#define APP_WRAPPER_FOR_unsynchronized_tsc
#endif
 
#ifndef APP_WRAPPER_FOR_unsynchronized_tsc
#define APP_WRAPPER_FOR_unsynchronized_tsc
FUNCTION_WRAPPER(unsynchronized_tsc, (), {
    kern_printk("unsynchronized_tsc is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = unsynchronized_tsc();
    POST_WRAPPER_FUNC();
    kern_printk("unsynchronized_tsc returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_icmpv6_init
#define APP_WRAPPER_FOR_icmpv6_init
#endif
 
#ifndef APP_WRAPPER_FOR_icmpv6_init
#define APP_WRAPPER_FOR_icmpv6_init
FUNCTION_WRAPPER(icmpv6_init, (), {
    kern_printk("icmpv6_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = icmpv6_init();
    POST_WRAPPER_FUNC();
    kern_printk("icmpv6_init returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sock_common_setsockopt
#define APP_WRAPPER_FOR_compat_sock_common_setsockopt
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sock_common_setsockopt
#define APP_WRAPPER_FOR_compat_sock_common_setsockopt
FUNCTION_WRAPPER(compat_sock_common_setsockopt, (struct socket *sock, int level, int optname, char *optval, unsigned int optlen), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    kern_printk("compat_sock_common_setsockopt is invoked.\n");
    PRE_WRAPPER_FUNC(sock, level, optname, optval, optlen);
    int ret = compat_sock_common_setsockopt(sock, level, optname, optval, optlen);
    POST_WRAPPER_FUNC(sock, level, optname, optval, optlen);
    kern_printk("compat_sock_common_setsockopt returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mempool_create
#define APP_WRAPPER_FOR_mempool_create
#endif
 
#ifndef APP_WRAPPER_FOR_mempool_create
#define APP_WRAPPER_FOR_mempool_create
FUNCTION_WRAPPER(mempool_create, (int min_nr, mempool_alloc_t *alloc_fn, mempool_free_t *free_fn, void *pool_data), {
    WRAP_FUNCTION(alloc_fn);
    WRAP_FUNCTION(free_fn);
    kern_printk("mempool_create is invoked.\n");
    PRE_WRAPPER_FUNC(min_nr, alloc_fn, free_fn, pool_data);
    mempool_t *ret = mempool_create(min_nr, alloc_fn, free_fn, pool_data);
    POST_WRAPPER_FUNC(min_nr, alloc_fn, free_fn, pool_data);
    kern_printk("mempool_create returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_report_bug
#define APP_WRAPPER_FOR_report_bug
#endif
 
#ifndef APP_WRAPPER_FOR_report_bug
#define APP_WRAPPER_FOR_report_bug
FUNCTION_WRAPPER(report_bug, (unsigned long bug_addr, struct pt_regs *regs), {
    kern_printk("report_bug is invoked.\n");
    PRE_WRAPPER_FUNC(bug_addr, regs);
    enum bug_trap_type ret = report_bug(bug_addr, regs);
    POST_WRAPPER_FUNC(bug_addr, regs);
    kern_printk("report_bug returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_rt_sigsuspend
#define APP_WRAPPER_FOR_compat_sys_rt_sigsuspend
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_rt_sigsuspend
#define APP_WRAPPER_FOR_compat_sys_rt_sigsuspend
FUNCTION_WRAPPER(compat_sys_rt_sigsuspend, (compat_sigset_t *unewset, compat_size_t sigsetsize), {
    kern_printk("compat_sys_rt_sigsuspend is invoked.\n");
    PRE_WRAPPER_FUNC(unewset, sigsetsize);
    long ret = compat_sys_rt_sigsuspend(unewset, sigsetsize);
    POST_WRAPPER_FUNC(unewset, sigsetsize);
    kern_printk("compat_sys_rt_sigsuspend returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_kernel_text_address
#define APP_WRAPPER_FOR_kernel_text_address
#endif
 
#ifndef APP_WRAPPER_FOR_kernel_text_address
#define APP_WRAPPER_FOR_kernel_text_address
FUNCTION_WRAPPER(kernel_text_address, (unsigned long addr), {
    kern_printk("kernel_text_address is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    int ret = kernel_text_address(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("kernel_text_address returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sysfs_notify_dirent
#define APP_WRAPPER_FOR_sysfs_notify_dirent
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_notify_dirent
#define APP_WRAPPER_FOR_sysfs_notify_dirent
FUNCTION_WRAPPER_VOID(sysfs_notify_dirent, (struct sysfs_dirent *sd), {
    kern_printk("sysfs_notify_dirent is invoked.\n");
    PRE_WRAPPER_FUNC(sd);
    sysfs_notify_dirent(sd);
    POST_WRAPPER_FUNC(sd);
    kern_printk("sysfs_notify_dirent returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_dev_runtime_resume
#define APP_WRAPPER_FOR_acpi_dev_runtime_resume
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_dev_runtime_resume
#define APP_WRAPPER_FOR_acpi_dev_runtime_resume
FUNCTION_WRAPPER(acpi_dev_runtime_resume, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("acpi_dev_runtime_resume is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = acpi_dev_runtime_resume(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("acpi_dev_runtime_resume returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_proc_dowatchdog_thresh
#define APP_WRAPPER_FOR_proc_dowatchdog_thresh
#endif
 
#ifndef APP_WRAPPER_FOR_proc_dowatchdog_thresh
#define APP_WRAPPER_FOR_proc_dowatchdog_thresh
FUNCTION_WRAPPER(proc_dowatchdog_thresh, (struct ctl_table *table, int write, void *buffer, size_t *lenp, loff_t *ppos), {
    WRAP_RECURSIVE(table);
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    kern_printk("proc_dowatchdog_thresh is invoked.\n");
    PRE_WRAPPER_FUNC(table, write, buffer, lenp, ppos);
    int ret = proc_dowatchdog_thresh(table, write, buffer, lenp, ppos);
    POST_WRAPPER_FUNC(table, write, buffer, lenp, ppos);
    kern_printk("proc_dowatchdog_thresh returned.\n");
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    return ret;
})
#endif


#ifndef KERN_ADDR_driver_find
#define APP_WRAPPER_FOR_driver_find
#endif
 
#ifndef APP_WRAPPER_FOR_driver_find
#define APP_WRAPPER_FOR_driver_find
FUNCTION_WRAPPER(driver_find, (const char *name, struct bus_type *bus), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("driver_find is invoked.\n");
    PRE_WRAPPER_FUNC(name, bus);
    struct device_driver *ret = driver_find(name, bus);
    POST_WRAPPER_FUNC(name, bus);
    kern_printk("driver_find returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pcie_capability_clear_and_set_dword
#define APP_WRAPPER_FOR_pcie_capability_clear_and_set_dword
#endif
 
#ifndef APP_WRAPPER_FOR_pcie_capability_clear_and_set_dword
#define APP_WRAPPER_FOR_pcie_capability_clear_and_set_dword
FUNCTION_WRAPPER(pcie_capability_clear_and_set_dword, (struct pci_dev *dev, int pos, u32 clear, u32 set), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pcie_capability_clear_and_set_dword is invoked.\n");
    PRE_WRAPPER_FUNC(dev, pos, clear, set);
    int ret = pcie_capability_clear_and_set_dword(dev, pos, clear, set);
    POST_WRAPPER_FUNC(dev, pos, clear, set);
    kern_printk("pcie_capability_clear_and_set_dword returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_proc_tty_unregister_driver
#define APP_WRAPPER_FOR_proc_tty_unregister_driver
#endif
 
#ifndef APP_WRAPPER_FOR_proc_tty_unregister_driver
#define APP_WRAPPER_FOR_proc_tty_unregister_driver
FUNCTION_WRAPPER_VOID(proc_tty_unregister_driver, (struct tty_driver *driver), {
    kern_printk("proc_tty_unregister_driver is invoked.\n");
    PRE_WRAPPER_FUNC(driver);
    proc_tty_unregister_driver(driver);
    POST_WRAPPER_FUNC(driver);
    kern_printk("proc_tty_unregister_driver returned.\n");
})
#endif


#ifndef KERN_ADDR_dm_table_get_num_targets
#define APP_WRAPPER_FOR_dm_table_get_num_targets
#endif
 
#ifndef APP_WRAPPER_FOR_dm_table_get_num_targets
#define APP_WRAPPER_FOR_dm_table_get_num_targets
FUNCTION_WRAPPER(dm_table_get_num_targets, (struct dm_table *t), {
    kern_printk("dm_table_get_num_targets is invoked.\n");
    PRE_WRAPPER_FUNC(t);
    int ret = dm_table_get_num_targets(t);
    POST_WRAPPER_FUNC(t);
    kern_printk("dm_table_get_num_targets returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_kernel_restart
#define APP_WRAPPER_FOR_kernel_restart
#endif
 
#ifndef APP_WRAPPER_FOR_kernel_restart
#define APP_WRAPPER_FOR_kernel_restart
FUNCTION_WRAPPER_VOID(kernel_restart, (char *cmd), {
    kern_printk("kernel_restart is invoked.\n");
    PRE_WRAPPER_FUNC(cmd);
    kernel_restart(cmd);
    POST_WRAPPER_FUNC(cmd);
    kern_printk("kernel_restart returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_register_set_vga_state
#define APP_WRAPPER_FOR_pci_register_set_vga_state
#endif
 
#ifndef APP_WRAPPER_FOR_pci_register_set_vga_state
#define APP_WRAPPER_FOR_pci_register_set_vga_state
FUNCTION_WRAPPER_VOID(pci_register_set_vga_state, (arch_set_vga_state_t func), {
    WRAP_FUNCTION(func);
    kern_printk("pci_register_set_vga_state is invoked.\n");
    PRE_WRAPPER_FUNC(func);
    pci_register_set_vga_state(func);
    POST_WRAPPER_FUNC(func);
    kern_printk("pci_register_set_vga_state returned.\n");
})
#endif


#ifndef KERN_ADDR___module_put_and_exit
#define APP_WRAPPER_FOR___module_put_and_exit
#endif
 
#ifndef APP_WRAPPER_FOR___module_put_and_exit
#define APP_WRAPPER_FOR___module_put_and_exit
FUNCTION_WRAPPER_VOID(__module_put_and_exit, (struct module *mod, long code), {
    WRAP_RECURSIVE(mod);
    TRACES_IF_WATCHPOINT(mod);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(mod)));
    kern_printk("__module_put_and_exit is invoked.\n");
    PRE_WRAPPER_FUNC(mod, code);
    __module_put_and_exit(mod, code);
    POST_WRAPPER_FUNC(mod, code);
    kern_printk("__module_put_and_exit returned.\n");
    TRACES_IF_WATCHPOINT(mod);
    SCAN_HEAD_FUNC(struct module)(*(TO_UNWATCHED_ADDRESS(mod)));
})
#endif


#ifndef KERN_ADDR_ida_simple_remove
#define APP_WRAPPER_FOR_ida_simple_remove
#endif
 
#ifndef APP_WRAPPER_FOR_ida_simple_remove
#define APP_WRAPPER_FOR_ida_simple_remove
FUNCTION_WRAPPER_VOID(ida_simple_remove, (struct ida *ida, unsigned int id), {
    WRAP_RECURSIVE(ida);
    TRACES_IF_WATCHPOINT(ida);
    SCAN_HEAD_FUNC(struct ida)(*(TO_UNWATCHED_ADDRESS(ida)));
    kern_printk("ida_simple_remove is invoked.\n");
    PRE_WRAPPER_FUNC(ida, id);
    ida_simple_remove(ida, id);
    POST_WRAPPER_FUNC(ida, id);
    kern_printk("ida_simple_remove returned.\n");
    TRACES_IF_WATCHPOINT(ida);
    SCAN_HEAD_FUNC(struct ida)(*(TO_UNWATCHED_ADDRESS(ida)));
})
#endif


#ifndef KERN_ADDR_sched_group_rt_runtime
#define APP_WRAPPER_FOR_sched_group_rt_runtime
#endif
 
#ifndef APP_WRAPPER_FOR_sched_group_rt_runtime
#define APP_WRAPPER_FOR_sched_group_rt_runtime
FUNCTION_WRAPPER(sched_group_rt_runtime, (struct task_group *tg), {
    kern_printk("sched_group_rt_runtime is invoked.\n");
    PRE_WRAPPER_FUNC(tg);
    long ret = sched_group_rt_runtime(tg);
    POST_WRAPPER_FUNC(tg);
    kern_printk("sched_group_rt_runtime returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_remove_proc_entry
#define APP_WRAPPER_FOR_remove_proc_entry
#endif
 
#ifndef APP_WRAPPER_FOR_remove_proc_entry
#define APP_WRAPPER_FOR_remove_proc_entry
FUNCTION_WRAPPER_VOID(remove_proc_entry, (const char *name, struct proc_dir_entry *parent), {
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct proc_dir_entry)(*(TO_UNWATCHED_ADDRESS(parent)));
    kern_printk("remove_proc_entry is invoked.\n");
    PRE_WRAPPER_FUNC(name, parent);
    remove_proc_entry(name, parent);
    POST_WRAPPER_FUNC(name, parent);
    kern_printk("remove_proc_entry returned.\n");
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct proc_dir_entry)(*(TO_UNWATCHED_ADDRESS(parent)));
})
#endif


#ifndef KERN_ADDR_bit_waitqueue
#define APP_WRAPPER_FOR_bit_waitqueue
#endif
 
#ifndef APP_WRAPPER_FOR_bit_waitqueue
#define APP_WRAPPER_FOR_bit_waitqueue
FUNCTION_WRAPPER(bit_waitqueue, (void *_arg1, int _arg2), {
    kern_printk("bit_waitqueue is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    wait_queue_head_t *ret = bit_waitqueue(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("bit_waitqueue returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_penalize_isa_irq
#define APP_WRAPPER_FOR_acpi_penalize_isa_irq
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_penalize_isa_irq
#define APP_WRAPPER_FOR_acpi_penalize_isa_irq
FUNCTION_WRAPPER_VOID(acpi_penalize_isa_irq, (int irq, int active), {
    kern_printk("acpi_penalize_isa_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq, active);
    acpi_penalize_isa_irq(irq, active);
    POST_WRAPPER_FUNC(irq, active);
    kern_printk("acpi_penalize_isa_irq returned.\n");
})
#endif


#ifndef KERN_ADDR_noop_fsync
#define APP_WRAPPER_FOR_noop_fsync
#endif
 
#ifndef APP_WRAPPER_FOR_noop_fsync
#define APP_WRAPPER_FOR_noop_fsync
FUNCTION_WRAPPER(noop_fsync, (struct file *_arg1, loff_t _arg2, loff_t _arg3, int _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("noop_fsync is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = noop_fsync(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("noop_fsync returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_blacklisted
#define APP_WRAPPER_FOR_acpi_blacklisted
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_blacklisted
#define APP_WRAPPER_FOR_acpi_blacklisted
FUNCTION_WRAPPER(acpi_blacklisted, (), {
    kern_printk("acpi_blacklisted is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = acpi_blacklisted();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_blacklisted returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_do_sysinfo
#define APP_WRAPPER_FOR_do_sysinfo
#endif
 
#ifndef APP_WRAPPER_FOR_do_sysinfo
#define APP_WRAPPER_FOR_do_sysinfo
FUNCTION_WRAPPER(do_sysinfo, (struct sysinfo *info), {
    kern_printk("do_sysinfo is invoked.\n");
    PRE_WRAPPER_FUNC(info);
    int ret = do_sysinfo(info);
    POST_WRAPPER_FUNC(info);
    kern_printk("do_sysinfo returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___blk_end_request_cur
#define APP_WRAPPER_FOR___blk_end_request_cur
#endif
 
#ifndef APP_WRAPPER_FOR___blk_end_request_cur
#define APP_WRAPPER_FOR___blk_end_request_cur
FUNCTION_WRAPPER(__blk_end_request_cur, (struct request *rq, int error), {
    WRAP_RECURSIVE(rq);
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    kern_printk("__blk_end_request_cur is invoked.\n");
    PRE_WRAPPER_FUNC(rq, error);
    bool ret = __blk_end_request_cur(rq, error);
    POST_WRAPPER_FUNC(rq, error);
    kern_printk("__blk_end_request_cur returned.\n");
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    return ret;
})
#endif


#ifndef KERN_ADDR_flush_sigqueue
#define APP_WRAPPER_FOR_flush_sigqueue
#endif
 
#ifndef APP_WRAPPER_FOR_flush_sigqueue
#define APP_WRAPPER_FOR_flush_sigqueue
FUNCTION_WRAPPER_VOID(flush_sigqueue, (struct sigpending *queue), {
    kern_printk("flush_sigqueue is invoked.\n");
    PRE_WRAPPER_FUNC(queue);
    flush_sigqueue(queue);
    POST_WRAPPER_FUNC(queue);
    kern_printk("flush_sigqueue returned.\n");
})
#endif


#ifndef KERN_ADDR_bdput
#define APP_WRAPPER_FOR_bdput
#endif
 
#ifndef APP_WRAPPER_FOR_bdput
#define APP_WRAPPER_FOR_bdput
FUNCTION_WRAPPER_VOID(bdput, (struct block_device *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bdput is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    bdput(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("bdput returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt30
#define APP_WRAPPER_FOR_invalidate_interrupt30
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt30
#define APP_WRAPPER_FOR_invalidate_interrupt30
FUNCTION_WRAPPER_VOID(invalidate_interrupt30, (), {
    kern_printk("invalidate_interrupt30 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt30();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt30 returned.\n");
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt31
#define APP_WRAPPER_FOR_invalidate_interrupt31
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt31
#define APP_WRAPPER_FOR_invalidate_interrupt31
FUNCTION_WRAPPER_VOID(invalidate_interrupt31, (), {
    kern_printk("invalidate_interrupt31 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt31();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt31 returned.\n");
})
#endif


#ifndef KERN_ADDR_clocksource_mmio_init
#define APP_WRAPPER_FOR_clocksource_mmio_init
#endif
 
#ifndef APP_WRAPPER_FOR_clocksource_mmio_init
#define APP_WRAPPER_FOR_clocksource_mmio_init
FUNCTION_WRAPPER(clocksource_mmio_init, (void *_arg1, const char *_arg2, unsigned long _arg3, int _arg4, unsigned int _arg5, cycle_t (*_arg6)(struct clocksource *)), {
    WRAP_FUNCTION(_arg6);
    kern_printk("clocksource_mmio_init is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
    int ret = clocksource_mmio_init(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
    kern_printk("clocksource_mmio_init returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_remove_generic_chip
#define APP_WRAPPER_FOR_irq_remove_generic_chip
#endif
 
#ifndef APP_WRAPPER_FOR_irq_remove_generic_chip
#define APP_WRAPPER_FOR_irq_remove_generic_chip
FUNCTION_WRAPPER_VOID(irq_remove_generic_chip, (struct irq_chip_generic *gc, u32 msk, unsigned int clr, unsigned int set), {
    kern_printk("irq_remove_generic_chip is invoked.\n");
    PRE_WRAPPER_FUNC(gc, msk, clr, set);
    irq_remove_generic_chip(gc, msk, clr, set);
    POST_WRAPPER_FUNC(gc, msk, clr, set);
    kern_printk("irq_remove_generic_chip returned.\n");
})
#endif


#ifndef KERN_ADDR_wmi_evaluate_method
#define APP_WRAPPER_FOR_wmi_evaluate_method
#endif
 
#ifndef APP_WRAPPER_FOR_wmi_evaluate_method
#define APP_WRAPPER_FOR_wmi_evaluate_method
FUNCTION_WRAPPER(wmi_evaluate_method, (const char *guid, u8 instance, u32 method_id, const struct acpi_buffer *in, struct acpi_buffer *out), {
    kern_printk("wmi_evaluate_method is invoked.\n");
    PRE_WRAPPER_FUNC(guid, instance, method_id, in, out);
    acpi_status ret = wmi_evaluate_method(guid, instance, method_id, in, out);
    POST_WRAPPER_FUNC(guid, instance, method_id, in, out);
    kern_printk("wmi_evaluate_method returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_free_area_init
#define APP_WRAPPER_FOR_free_area_init
#endif
 
#ifndef APP_WRAPPER_FOR_free_area_init
#define APP_WRAPPER_FOR_free_area_init
FUNCTION_WRAPPER_VOID(free_area_init, (unsigned long *zones_size), {
    kern_printk("free_area_init is invoked.\n");
    PRE_WRAPPER_FUNC(zones_size);
    free_area_init(zones_size);
    POST_WRAPPER_FUNC(zones_size);
    kern_printk("free_area_init returned.\n");
})
#endif


#ifndef KERN_ADDR_pagecache_write_begin
#define APP_WRAPPER_FOR_pagecache_write_begin
#endif
 
#ifndef APP_WRAPPER_FOR_pagecache_write_begin
#define APP_WRAPPER_FOR_pagecache_write_begin
FUNCTION_WRAPPER(pagecache_write_begin, (struct file *_arg1, struct address_space *mapping, loff_t pos, unsigned int len, unsigned int flags, struct page **pagep, void **fsdata), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    WRAP_RECURSIVE(pagep);
    TRACES_IF_WATCHPOINT(pagep);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pagep)));
    kern_printk("pagecache_write_begin is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, mapping, pos, len, flags, pagep, fsdata);
    int ret = pagecache_write_begin(_arg1, mapping, pos, len, flags, pagep, fsdata);
    POST_WRAPPER_FUNC(_arg1, mapping, pos, len, flags, pagep, fsdata);
    kern_printk("pagecache_write_begin returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    TRACES_IF_WATCHPOINT(pagep);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pagep)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sff_check_status
#define APP_WRAPPER_FOR_ata_sff_check_status
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_check_status
#define APP_WRAPPER_FOR_ata_sff_check_status
FUNCTION_WRAPPER(ata_sff_check_status, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_sff_check_status is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    u8 ret = ata_sff_check_status(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_sff_check_status returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR_netdev_refcnt_read
#define APP_WRAPPER_FOR_netdev_refcnt_read
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_refcnt_read
#define APP_WRAPPER_FOR_netdev_refcnt_read
FUNCTION_WRAPPER(netdev_refcnt_read, (const struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("netdev_refcnt_read is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = netdev_refcnt_read(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("netdev_refcnt_read returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_apply_to_page_range
#define APP_WRAPPER_FOR_apply_to_page_range
#endif
 
#ifndef APP_WRAPPER_FOR_apply_to_page_range
#define APP_WRAPPER_FOR_apply_to_page_range
FUNCTION_WRAPPER(apply_to_page_range, (struct mm_struct *mm, unsigned long address, unsigned long size, pte_fn_t fn, void *data), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    WRAP_FUNCTION(fn);
    kern_printk("apply_to_page_range is invoked.\n");
    PRE_WRAPPER_FUNC(mm, address, size, fn, data);
    int ret = apply_to_page_range(mm, address, size, fn, data);
    POST_WRAPPER_FUNC(mm, address, size, fn, data);
    kern_printk("apply_to_page_range returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    return ret;
})
#endif


#ifndef KERN_ADDR___inode_add_bytes
#define APP_WRAPPER_FOR___inode_add_bytes
#endif
 
#ifndef APP_WRAPPER_FOR___inode_add_bytes
#define APP_WRAPPER_FOR___inode_add_bytes
FUNCTION_WRAPPER_VOID(__inode_add_bytes, (struct inode *inode, loff_t bytes), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("__inode_add_bytes is invoked.\n");
    PRE_WRAPPER_FUNC(inode, bytes);
    __inode_add_bytes(inode, bytes);
    POST_WRAPPER_FUNC(inode, bytes);
    kern_printk("__inode_add_bytes returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR_copy_user_enhanced_fast_string
#define APP_WRAPPER_FOR_copy_user_enhanced_fast_string
#endif
 
#ifndef APP_WRAPPER_FOR_copy_user_enhanced_fast_string
#define APP_WRAPPER_FOR_copy_user_enhanced_fast_string
FUNCTION_WRAPPER(copy_user_enhanced_fast_string, (void *to, const void *from, unsigned int len), {
    kern_printk("copy_user_enhanced_fast_string is invoked.\n");
    PRE_WRAPPER_FUNC(to, from, len);
    long ret = copy_user_enhanced_fast_string(to, from, len);
    POST_WRAPPER_FUNC(to, from, len);
    kern_printk("copy_user_enhanced_fast_string returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_getxattr
#define APP_WRAPPER_FOR_vfs_getxattr
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_getxattr
#define APP_WRAPPER_FOR_vfs_getxattr
FUNCTION_WRAPPER(vfs_getxattr, (struct dentry *_arg1, const char *_arg2, void *_arg3, size_t _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("vfs_getxattr is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    ssize_t ret = vfs_getxattr(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("vfs_getxattr returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_rcu_irq_exit
#define APP_WRAPPER_FOR_rcu_irq_exit
#endif
 
#ifndef APP_WRAPPER_FOR_rcu_irq_exit
#define APP_WRAPPER_FOR_rcu_irq_exit
FUNCTION_WRAPPER_VOID(rcu_irq_exit, (), {
    kern_printk("rcu_irq_exit is invoked.\n");
    PRE_WRAPPER_FUNC();
    rcu_irq_exit();
    POST_WRAPPER_FUNC();
    kern_printk("rcu_irq_exit returned.\n");
})
#endif


#ifndef KERN_ADDR_param_set_int
#define APP_WRAPPER_FOR_param_set_int
#endif
 
#ifndef APP_WRAPPER_FOR_param_set_int
#define APP_WRAPPER_FOR_param_set_int
FUNCTION_WRAPPER(param_set_int, (const char *val, const struct kernel_param *kp), {
    WRAP_RECURSIVE(kp);
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    kern_printk("param_set_int is invoked.\n");
    PRE_WRAPPER_FUNC(val, kp);
    int ret = param_set_int(val, kp);
    POST_WRAPPER_FUNC(val, kp);
    kern_printk("param_set_int returned.\n");
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_nf_ct_attach
#define APP_WRAPPER_FOR_nf_ct_attach
#endif
 
#ifndef APP_WRAPPER_FOR_nf_ct_attach
#define APP_WRAPPER_FOR_nf_ct_attach
FUNCTION_WRAPPER_VOID(nf_ct_attach, (struct sk_buff *_arg1, struct sk_buff *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("nf_ct_attach is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    nf_ct_attach(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("nf_ct_attach returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_msrs_free
#define APP_WRAPPER_FOR_msrs_free
#endif
 
#ifndef APP_WRAPPER_FOR_msrs_free
#define APP_WRAPPER_FOR_msrs_free
FUNCTION_WRAPPER_VOID(msrs_free, (struct msr *msrs), {
    kern_printk("msrs_free is invoked.\n");
    PRE_WRAPPER_FUNC(msrs);
    msrs_free(msrs);
    POST_WRAPPER_FUNC(msrs);
    kern_printk("msrs_free returned.\n");
})
#endif


#ifndef KERN_ADDR_netif_stacked_transfer_operstate
#define APP_WRAPPER_FOR_netif_stacked_transfer_operstate
#endif
 
#ifndef APP_WRAPPER_FOR_netif_stacked_transfer_operstate
#define APP_WRAPPER_FOR_netif_stacked_transfer_operstate
FUNCTION_WRAPPER_VOID(netif_stacked_transfer_operstate, (const struct net_device *rootdev, struct net_device *dev), {
    WRAP_RECURSIVE(rootdev);
    TRACES_IF_WATCHPOINT(rootdev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(rootdev)));
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("netif_stacked_transfer_operstate is invoked.\n");
    PRE_WRAPPER_FUNC(rootdev, dev);
    netif_stacked_transfer_operstate(rootdev, dev);
    POST_WRAPPER_FUNC(rootdev, dev);
    kern_printk("netif_stacked_transfer_operstate returned.\n");
    TRACES_IF_WATCHPOINT(rootdev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(rootdev)));
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_single_open
#define APP_WRAPPER_FOR_single_open
#endif
 
#ifndef APP_WRAPPER_FOR_single_open
#define APP_WRAPPER_FOR_single_open
FUNCTION_WRAPPER(single_open, (struct file *_arg1, int (*_arg2)(struct seq_file *, void *), void *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_FUNCTION(_arg2);
    kern_printk("single_open is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = single_open(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("single_open returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_walk_bus
#define APP_WRAPPER_FOR_pci_walk_bus
#endif
 
#ifndef APP_WRAPPER_FOR_pci_walk_bus
#define APP_WRAPPER_FOR_pci_walk_bus
FUNCTION_WRAPPER_VOID(pci_walk_bus, (struct pci_bus *top, int (*cb)(struct pci_dev *, void *), void *userdata), {
    WRAP_RECURSIVE(top);
    TRACES_IF_WATCHPOINT(top);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(top)));
    WRAP_FUNCTION(cb);
    kern_printk("pci_walk_bus is invoked.\n");
    PRE_WRAPPER_FUNC(top, cb, userdata);
    pci_walk_bus(top, cb, userdata);
    POST_WRAPPER_FUNC(top, cb, userdata);
    kern_printk("pci_walk_bus returned.\n");
    TRACES_IF_WATCHPOINT(top);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(top)));
})
#endif


#ifndef KERN_ADDR_tick_get_broadcast_mask
#define APP_WRAPPER_FOR_tick_get_broadcast_mask
#endif
 
#ifndef APP_WRAPPER_FOR_tick_get_broadcast_mask
#define APP_WRAPPER_FOR_tick_get_broadcast_mask
FUNCTION_WRAPPER(tick_get_broadcast_mask, (), {
    kern_printk("tick_get_broadcast_mask is invoked.\n");
    PRE_WRAPPER_FUNC();
    struct cpumask *ret = tick_get_broadcast_mask();
    POST_WRAPPER_FUNC();
    kern_printk("tick_get_broadcast_mask returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sync_dirty_buffer
#define APP_WRAPPER_FOR_sync_dirty_buffer
#endif
 
#ifndef APP_WRAPPER_FOR_sync_dirty_buffer
#define APP_WRAPPER_FOR_sync_dirty_buffer
FUNCTION_WRAPPER(sync_dirty_buffer, (struct buffer_head *bh), {
    WRAP_RECURSIVE(bh);
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    kern_printk("sync_dirty_buffer is invoked.\n");
    PRE_WRAPPER_FUNC(bh);
    int ret = sync_dirty_buffer(bh);
    POST_WRAPPER_FUNC(bh);
    kern_printk("sync_dirty_buffer returned.\n");
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    return ret;
})
#endif


#ifndef KERN_ADDR___sock_recv_timestamp
#define APP_WRAPPER_FOR___sock_recv_timestamp
#endif
 
#ifndef APP_WRAPPER_FOR___sock_recv_timestamp
#define APP_WRAPPER_FOR___sock_recv_timestamp
FUNCTION_WRAPPER_VOID(__sock_recv_timestamp, (struct msghdr *msg, struct sock *sk, struct sk_buff *skb), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("__sock_recv_timestamp is invoked.\n");
    PRE_WRAPPER_FUNC(msg, sk, skb);
    __sock_recv_timestamp(msg, sk, skb);
    POST_WRAPPER_FUNC(msg, sk, skb);
    kern_printk("__sock_recv_timestamp returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_page_alloc_init
#define APP_WRAPPER_FOR_page_alloc_init
#endif
 
#ifndef APP_WRAPPER_FOR_page_alloc_init
#define APP_WRAPPER_FOR_page_alloc_init
FUNCTION_WRAPPER_VOID(page_alloc_init, (), {
    kern_printk("page_alloc_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    page_alloc_init();
    POST_WRAPPER_FUNC();
    kern_printk("page_alloc_init returned.\n");
})
#endif


#ifndef KERN_ADDR_fiemap_fill_next_extent
#define APP_WRAPPER_FOR_fiemap_fill_next_extent
#endif
 
#ifndef APP_WRAPPER_FOR_fiemap_fill_next_extent
#define APP_WRAPPER_FOR_fiemap_fill_next_extent
FUNCTION_WRAPPER(fiemap_fill_next_extent, (struct fiemap_extent_info *info, u64 logical, u64 phys, u64 len, u32 flags), {
    kern_printk("fiemap_fill_next_extent is invoked.\n");
    PRE_WRAPPER_FUNC(info, logical, phys, len, flags);
    int ret = fiemap_fill_next_extent(info, logical, phys, len, flags);
    POST_WRAPPER_FUNC(info, logical, phys, len, flags);
    kern_printk("fiemap_fill_next_extent returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_arch_align_stack
#define APP_WRAPPER_FOR_arch_align_stack
#endif
 
#ifndef APP_WRAPPER_FOR_arch_align_stack
#define APP_WRAPPER_FOR_arch_align_stack
FUNCTION_WRAPPER(arch_align_stack, (unsigned long sp), {
    kern_printk("arch_align_stack is invoked.\n");
    PRE_WRAPPER_FUNC(sp);
    long ret = arch_align_stack(sp);
    POST_WRAPPER_FUNC(sp);
    kern_printk("arch_align_stack returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_phys_mem_access_prot_allowed
#define APP_WRAPPER_FOR_phys_mem_access_prot_allowed
#endif
 
#ifndef APP_WRAPPER_FOR_phys_mem_access_prot_allowed
#define APP_WRAPPER_FOR_phys_mem_access_prot_allowed
FUNCTION_WRAPPER(phys_mem_access_prot_allowed, (struct file *file, unsigned long pfn, unsigned long size, pgprot_t *vma_prot), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("phys_mem_access_prot_allowed is invoked.\n");
    PRE_WRAPPER_FUNC(file, pfn, size, vma_prot);
    int ret = phys_mem_access_prot_allowed(file, pfn, size, vma_prot);
    POST_WRAPPER_FUNC(file, pfn, size, vma_prot);
    kern_printk("phys_mem_access_prot_allowed returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR___brelse
#define APP_WRAPPER_FOR___brelse
#endif
 
#ifndef APP_WRAPPER_FOR___brelse
#define APP_WRAPPER_FOR___brelse
FUNCTION_WRAPPER_VOID(__brelse, (struct buffer_head *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("__brelse is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    __brelse(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__brelse returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_input_allocate_device
#define APP_WRAPPER_FOR_input_allocate_device
#endif
 
#ifndef APP_WRAPPER_FOR_input_allocate_device
#define APP_WRAPPER_FOR_input_allocate_device
FUNCTION_WRAPPER(input_allocate_device, (), {
    kern_printk("input_allocate_device is invoked.\n");
    PRE_WRAPPER_FUNC();
    struct input_dev *ret = input_allocate_device();
    POST_WRAPPER_FUNC();
    kern_printk("input_allocate_device returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_bus_get_status_handle
#define APP_WRAPPER_FOR_acpi_bus_get_status_handle
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_bus_get_status_handle
#define APP_WRAPPER_FOR_acpi_bus_get_status_handle
FUNCTION_WRAPPER(acpi_bus_get_status_handle, (acpi_handle handle, unsigned long long *sta), {
    kern_printk("acpi_bus_get_status_handle is invoked.\n");
    PRE_WRAPPER_FUNC(handle, sta);
    acpi_status ret = acpi_bus_get_status_handle(handle, sta);
    POST_WRAPPER_FUNC(handle, sta);
    kern_printk("acpi_bus_get_status_handle returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_no_aer
#define APP_WRAPPER_FOR_pci_no_aer
#endif
 
#ifndef APP_WRAPPER_FOR_pci_no_aer
#define APP_WRAPPER_FOR_pci_no_aer
FUNCTION_WRAPPER_VOID(pci_no_aer, (), {
    kern_printk("pci_no_aer is invoked.\n");
    PRE_WRAPPER_FUNC();
    pci_no_aer();
    POST_WRAPPER_FUNC();
    kern_printk("pci_no_aer returned.\n");
})
#endif


#ifndef KERN_ADDR_blk_verify_command
#define APP_WRAPPER_FOR_blk_verify_command
#endif
 
#ifndef APP_WRAPPER_FOR_blk_verify_command
#define APP_WRAPPER_FOR_blk_verify_command
FUNCTION_WRAPPER(blk_verify_command, (unsigned char *cmd, fmode_t has_write_perm), {
    kern_printk("blk_verify_command is invoked.\n");
    PRE_WRAPPER_FUNC(cmd, has_write_perm);
    int ret = blk_verify_command(cmd, has_write_perm);
    POST_WRAPPER_FUNC(cmd, has_write_perm);
    kern_printk("blk_verify_command returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_set_bdi_congested
#define APP_WRAPPER_FOR_set_bdi_congested
#endif
 
#ifndef APP_WRAPPER_FOR_set_bdi_congested
#define APP_WRAPPER_FOR_set_bdi_congested
FUNCTION_WRAPPER_VOID(set_bdi_congested, (struct backing_dev_info *bdi, int sync), {
    WRAP_RECURSIVE(bdi);
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
    kern_printk("set_bdi_congested is invoked.\n");
    PRE_WRAPPER_FUNC(bdi, sync);
    set_bdi_congested(bdi, sync);
    POST_WRAPPER_FUNC(bdi, sync);
    kern_printk("set_bdi_congested returned.\n");
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
})
#endif


#ifndef KERN_ADDR_set_cpu_sd_state_idle
#define APP_WRAPPER_FOR_set_cpu_sd_state_idle
#endif
 
#ifndef APP_WRAPPER_FOR_set_cpu_sd_state_idle
#define APP_WRAPPER_FOR_set_cpu_sd_state_idle
FUNCTION_WRAPPER_VOID(set_cpu_sd_state_idle, (), {
    kern_printk("set_cpu_sd_state_idle is invoked.\n");
    PRE_WRAPPER_FUNC();
    set_cpu_sd_state_idle();
    POST_WRAPPER_FUNC();
    kern_printk("set_cpu_sd_state_idle returned.\n");
})
#endif


#ifndef KERN_ADDR_rtnl_lock
#define APP_WRAPPER_FOR_rtnl_lock
#endif
 
#ifndef APP_WRAPPER_FOR_rtnl_lock
#define APP_WRAPPER_FOR_rtnl_lock
FUNCTION_WRAPPER_VOID(rtnl_lock, (), {
    kern_printk("rtnl_lock is invoked.\n");
    PRE_WRAPPER_FUNC();
    rtnl_lock();
    POST_WRAPPER_FUNC();
    kern_printk("rtnl_lock returned.\n");
})
#endif


#ifndef KERN_ADDR_bioset_integrity_free
#define APP_WRAPPER_FOR_bioset_integrity_free
#endif
 
#ifndef APP_WRAPPER_FOR_bioset_integrity_free
#define APP_WRAPPER_FOR_bioset_integrity_free
FUNCTION_WRAPPER_VOID(bioset_integrity_free, (struct bio_set *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio_set)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bioset_integrity_free is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    bioset_integrity_free(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("bioset_integrity_free returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio_set)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_idr_destroy
#define APP_WRAPPER_FOR_idr_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_idr_destroy
#define APP_WRAPPER_FOR_idr_destroy
FUNCTION_WRAPPER_VOID(idr_destroy, (struct idr *idp), {
    WRAP_RECURSIVE(idp);
    TRACES_IF_WATCHPOINT(idp);
    SCAN_HEAD_FUNC(struct idr)(*(TO_UNWATCHED_ADDRESS(idp)));
    kern_printk("idr_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(idp);
    idr_destroy(idp);
    POST_WRAPPER_FUNC(idp);
    kern_printk("idr_destroy returned.\n");
    TRACES_IF_WATCHPOINT(idp);
    SCAN_HEAD_FUNC(struct idr)(*(TO_UNWATCHED_ADDRESS(idp)));
})
#endif


#ifndef KERN_ADDR_block_write_full_page_endio
#define APP_WRAPPER_FOR_block_write_full_page_endio
#endif
 
#ifndef APP_WRAPPER_FOR_block_write_full_page_endio
#define APP_WRAPPER_FOR_block_write_full_page_endio
FUNCTION_WRAPPER(block_write_full_page_endio, (struct page *page, get_block_t *get_block, struct writeback_control *wbc, bh_end_io_t *handler), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    WRAP_FUNCTION(get_block);
    WRAP_FUNCTION(handler);
    kern_printk("block_write_full_page_endio is invoked.\n");
    PRE_WRAPPER_FUNC(page, get_block, wbc, handler);
    int ret = block_write_full_page_endio(page, get_block, wbc, handler);
    POST_WRAPPER_FUNC(page, get_block, wbc, handler);
    kern_printk("block_write_full_page_endio returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_insert
#define APP_WRAPPER_FOR_skb_insert
#endif
 
#ifndef APP_WRAPPER_FOR_skb_insert
#define APP_WRAPPER_FOR_skb_insert
FUNCTION_WRAPPER_VOID(skb_insert, (struct sk_buff *old, struct sk_buff *newsk, struct sk_buff_head *list), {
    WRAP_RECURSIVE(old);
    TRACES_IF_WATCHPOINT(old);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(old)));
    WRAP_RECURSIVE(newsk);
    TRACES_IF_WATCHPOINT(newsk);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(newsk)));
    WRAP_RECURSIVE(list);
    TRACES_IF_WATCHPOINT(list);
    SCAN_HEAD_FUNC(struct sk_buff_head)(*(TO_UNWATCHED_ADDRESS(list)));
    kern_printk("skb_insert is invoked.\n");
    PRE_WRAPPER_FUNC(old, newsk, list);
    skb_insert(old, newsk, list);
    POST_WRAPPER_FUNC(old, newsk, list);
    kern_printk("skb_insert returned.\n");
    TRACES_IF_WATCHPOINT(old);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(old)));
    TRACES_IF_WATCHPOINT(newsk);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(newsk)));
    TRACES_IF_WATCHPOINT(list);
    SCAN_HEAD_FUNC(struct sk_buff_head)(*(TO_UNWATCHED_ADDRESS(list)));
})
#endif


#ifndef KERN_ADDR_journal_sync_buffer
#define APP_WRAPPER_FOR_journal_sync_buffer
#endif
 
#ifndef APP_WRAPPER_FOR_journal_sync_buffer
#define APP_WRAPPER_FOR_journal_sync_buffer
FUNCTION_WRAPPER_VOID(journal_sync_buffer, (struct buffer_head *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("journal_sync_buffer is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    journal_sync_buffer(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("journal_sync_buffer returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_kobj_child_ns_ops
#define APP_WRAPPER_FOR_kobj_child_ns_ops
#endif
 
#ifndef APP_WRAPPER_FOR_kobj_child_ns_ops
#define APP_WRAPPER_FOR_kobj_child_ns_ops
FUNCTION_WRAPPER(kobj_child_ns_ops, (struct kobject *parent), {
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(parent)));
    kern_printk("kobj_child_ns_ops is invoked.\n");
    PRE_WRAPPER_FUNC(parent);
    const struct kobj_ns_type_operations *ret = kobj_child_ns_ops(parent);
    POST_WRAPPER_FUNC(parent);
    kern_printk("kobj_child_ns_ops returned.\n");
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(parent)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_jiffies_to_usecs
#define APP_WRAPPER_FOR_jiffies_to_usecs
#endif
 
#ifndef APP_WRAPPER_FOR_jiffies_to_usecs
#define APP_WRAPPER_FOR_jiffies_to_usecs
FUNCTION_WRAPPER(jiffies_to_usecs, (unsigned const long j), {
    kern_printk("jiffies_to_usecs is invoked.\n");
    PRE_WRAPPER_FUNC(j);
    int ret = jiffies_to_usecs(j);
    POST_WRAPPER_FUNC(j);
    kern_printk("jiffies_to_usecs returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_start_thread
#define APP_WRAPPER_FOR_start_thread
#endif
 
#ifndef APP_WRAPPER_FOR_start_thread
#define APP_WRAPPER_FOR_start_thread
FUNCTION_WRAPPER_VOID(start_thread, (struct pt_regs *regs, unsigned long new_ip, unsigned long new_sp), {
    kern_printk("start_thread is invoked.\n");
    PRE_WRAPPER_FUNC(regs, new_ip, new_sp);
    start_thread(regs, new_ip, new_sp);
    POST_WRAPPER_FUNC(regs, new_ip, new_sp);
    kern_printk("start_thread returned.\n");
})
#endif


#ifndef KERN_ADDR_cgroup_exit
#define APP_WRAPPER_FOR_cgroup_exit
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_exit
#define APP_WRAPPER_FOR_cgroup_exit
FUNCTION_WRAPPER_VOID(cgroup_exit, (struct task_struct *p, int run_callbacks), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("cgroup_exit is invoked.\n");
    PRE_WRAPPER_FUNC(p, run_callbacks);
    cgroup_exit(p, run_callbacks);
    POST_WRAPPER_FUNC(p, run_callbacks);
    kern_printk("cgroup_exit returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
})
#endif


#ifndef KERN_ADDR_dma_async_memcpy_pg_to_pg
#define APP_WRAPPER_FOR_dma_async_memcpy_pg_to_pg
#endif
 
#ifndef APP_WRAPPER_FOR_dma_async_memcpy_pg_to_pg
#define APP_WRAPPER_FOR_dma_async_memcpy_pg_to_pg
FUNCTION_WRAPPER(dma_async_memcpy_pg_to_pg, (struct dma_chan *chan, struct page *dest_pg, unsigned int dest_off, struct page *src_pg, unsigned int src_off, size_t len), {
    WRAP_RECURSIVE(chan);
    TRACES_IF_WATCHPOINT(chan);
    SCAN_HEAD_FUNC(struct dma_chan)(*(TO_UNWATCHED_ADDRESS(chan)));
    WRAP_RECURSIVE(dest_pg);
    TRACES_IF_WATCHPOINT(dest_pg);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(dest_pg)));
    WRAP_RECURSIVE(src_pg);
    TRACES_IF_WATCHPOINT(src_pg);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(src_pg)));
    kern_printk("dma_async_memcpy_pg_to_pg is invoked.\n");
    PRE_WRAPPER_FUNC(chan, dest_pg, dest_off, src_pg, src_off, len);
    dma_cookie_t ret = dma_async_memcpy_pg_to_pg(chan, dest_pg, dest_off, src_pg, src_off, len);
    POST_WRAPPER_FUNC(chan, dest_pg, dest_off, src_pg, src_off, len);
    kern_printk("dma_async_memcpy_pg_to_pg returned.\n");
    TRACES_IF_WATCHPOINT(chan);
    SCAN_HEAD_FUNC(struct dma_chan)(*(TO_UNWATCHED_ADDRESS(chan)));
    TRACES_IF_WATCHPOINT(dest_pg);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(dest_pg)));
    TRACES_IF_WATCHPOINT(src_pg);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(src_pg)));
    return ret;
})
#endif


#ifndef KERN_ADDR_open_exec
#define APP_WRAPPER_FOR_open_exec
#endif
 
#ifndef APP_WRAPPER_FOR_open_exec
#define APP_WRAPPER_FOR_open_exec
FUNCTION_WRAPPER(open_exec, (const char *_arg1), {
    kern_printk("open_exec is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct file *ret = open_exec(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("open_exec returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_bus_insert_busn_res
#define APP_WRAPPER_FOR_pci_bus_insert_busn_res
#endif
 
#ifndef APP_WRAPPER_FOR_pci_bus_insert_busn_res
#define APP_WRAPPER_FOR_pci_bus_insert_busn_res
FUNCTION_WRAPPER(pci_bus_insert_busn_res, (struct pci_bus *b, int bus, int busmax), {
    WRAP_RECURSIVE(b);
    TRACES_IF_WATCHPOINT(b);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(b)));
    kern_printk("pci_bus_insert_busn_res is invoked.\n");
    PRE_WRAPPER_FUNC(b, bus, busmax);
    int ret = pci_bus_insert_busn_res(b, bus, busmax);
    POST_WRAPPER_FUNC(b, bus, busmax);
    kern_printk("pci_bus_insert_busn_res returned.\n");
    TRACES_IF_WATCHPOINT(b);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(b)));
    return ret;
})
#endif


#ifndef KERN_ADDR___secure_computing
#define APP_WRAPPER_FOR___secure_computing
#endif
 
#ifndef APP_WRAPPER_FOR___secure_computing
#define APP_WRAPPER_FOR___secure_computing
FUNCTION_WRAPPER(__secure_computing, (int _arg1), {
    kern_printk("__secure_computing is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = __secure_computing(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__secure_computing returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_profile_event_unregister
#define APP_WRAPPER_FOR_profile_event_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_profile_event_unregister
#define APP_WRAPPER_FOR_profile_event_unregister
FUNCTION_WRAPPER(profile_event_unregister, (enum profile_type _arg1, struct notifier_block *n), {
    WRAP_RECURSIVE(n);
    TRACES_IF_WATCHPOINT(n);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(n)));
    kern_printk("profile_event_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, n);
    int ret = profile_event_unregister(_arg1, n);
    POST_WRAPPER_FUNC(_arg1, n);
    kern_printk("profile_event_unregister returned.\n");
    TRACES_IF_WATCHPOINT(n);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(n)));
    return ret;
})
#endif


#ifndef KERN_ADDR_install_special_mapping
#define APP_WRAPPER_FOR_install_special_mapping
#endif
 
#ifndef APP_WRAPPER_FOR_install_special_mapping
#define APP_WRAPPER_FOR_install_special_mapping
FUNCTION_WRAPPER(install_special_mapping, (struct mm_struct *mm, unsigned long addr, unsigned long len, unsigned long flags, struct page **pages), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    WRAP_RECURSIVE(pages);
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    kern_printk("install_special_mapping is invoked.\n");
    PRE_WRAPPER_FUNC(mm, addr, len, flags, pages);
    int ret = install_special_mapping(mm, addr, len, flags, pages);
    POST_WRAPPER_FUNC(mm, addr, len, flags, pages);
    kern_printk("install_special_mapping returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    return ret;
})
#endif


#ifndef KERN_ADDR_elv_set_request
#define APP_WRAPPER_FOR_elv_set_request
#endif
 
#ifndef APP_WRAPPER_FOR_elv_set_request
#define APP_WRAPPER_FOR_elv_set_request
FUNCTION_WRAPPER(elv_set_request, (struct request_queue *q, struct request *rq, struct bio *bio, gfp_t gfp_mask), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    WRAP_RECURSIVE(rq);
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    WRAP_RECURSIVE(bio);
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
    kern_printk("elv_set_request is invoked.\n");
    PRE_WRAPPER_FUNC(q, rq, bio, gfp_mask);
    int ret = elv_set_request(q, rq, bio, gfp_mask);
    POST_WRAPPER_FUNC(q, rq, bio, gfp_mask);
    kern_printk("elv_set_request returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    TRACES_IF_WATCHPOINT(rq);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(rq)));
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
    return ret;
})
#endif


#ifndef KERN_ADDR_zero_fill_bio
#define APP_WRAPPER_FOR_zero_fill_bio
#endif
 
#ifndef APP_WRAPPER_FOR_zero_fill_bio
#define APP_WRAPPER_FOR_zero_fill_bio
FUNCTION_WRAPPER_VOID(zero_fill_bio, (struct bio *bio), {
    WRAP_RECURSIVE(bio);
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
    kern_printk("zero_fill_bio is invoked.\n");
    PRE_WRAPPER_FUNC(bio);
    zero_fill_bio(bio);
    POST_WRAPPER_FUNC(bio);
    kern_printk("zero_fill_bio returned.\n");
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
})
#endif


#ifndef KERN_ADDR_generic_block_fiemap
#define APP_WRAPPER_FOR_generic_block_fiemap
#endif
 
#ifndef APP_WRAPPER_FOR_generic_block_fiemap
#define APP_WRAPPER_FOR_generic_block_fiemap
FUNCTION_WRAPPER(generic_block_fiemap, (struct inode *inode, struct fiemap_extent_info *fieinfo, u64 start, u64 len, get_block_t *get_block), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    WRAP_FUNCTION(get_block);
    kern_printk("generic_block_fiemap is invoked.\n");
    PRE_WRAPPER_FUNC(inode, fieinfo, start, len, get_block);
    int ret = generic_block_fiemap(inode, fieinfo, start, len, get_block);
    POST_WRAPPER_FUNC(inode, fieinfo, start, len, get_block);
    kern_printk("generic_block_fiemap returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    return ret;
})
#endif


#ifndef KERN_ADDR_nsecs_to_jiffies
#define APP_WRAPPER_FOR_nsecs_to_jiffies
#endif
 
#ifndef APP_WRAPPER_FOR_nsecs_to_jiffies
#define APP_WRAPPER_FOR_nsecs_to_jiffies
FUNCTION_WRAPPER(nsecs_to_jiffies, (u64 n), {
    kern_printk("nsecs_to_jiffies is invoked.\n");
    PRE_WRAPPER_FUNC(n);
    long ret = nsecs_to_jiffies(n);
    POST_WRAPPER_FUNC(n);
    kern_printk("nsecs_to_jiffies returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_acpi_crs_quirks
#define APP_WRAPPER_FOR_pci_acpi_crs_quirks
#endif
 
#ifndef APP_WRAPPER_FOR_pci_acpi_crs_quirks
#define APP_WRAPPER_FOR_pci_acpi_crs_quirks
FUNCTION_WRAPPER_VOID(pci_acpi_crs_quirks, (), {
    kern_printk("pci_acpi_crs_quirks is invoked.\n");
    PRE_WRAPPER_FUNC();
    pci_acpi_crs_quirks();
    POST_WRAPPER_FUNC();
    kern_printk("pci_acpi_crs_quirks returned.\n");
})
#endif


#ifndef KERN_ADDR_mktime
#define APP_WRAPPER_FOR_mktime
#endif
 
#ifndef APP_WRAPPER_FOR_mktime
#define APP_WRAPPER_FOR_mktime
FUNCTION_WRAPPER(mktime, (unsigned const int year, unsigned const int mon, unsigned const int day, unsigned const int hour, unsigned const int min, unsigned const int sec), {
    kern_printk("mktime is invoked.\n");
    PRE_WRAPPER_FUNC(year, mon, day, hour, min, sec);
    long ret = mktime(year, mon, day, hour, min, sec);
    POST_WRAPPER_FUNC(year, mon, day, hour, min, sec);
    kern_printk("mktime returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_mod_timer_pinned
#define APP_WRAPPER_FOR_mod_timer_pinned
#endif
 
#ifndef APP_WRAPPER_FOR_mod_timer_pinned
#define APP_WRAPPER_FOR_mod_timer_pinned
FUNCTION_WRAPPER(mod_timer_pinned, (struct timer_list *timer, unsigned long expires), {
    WRAP_RECURSIVE(timer);
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(timer)));
    kern_printk("mod_timer_pinned is invoked.\n");
    PRE_WRAPPER_FUNC(timer, expires);
    int ret = mod_timer_pinned(timer, expires);
    POST_WRAPPER_FUNC(timer, expires);
    kern_printk("mod_timer_pinned returned.\n");
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(timer)));
    return ret;
})
#endif


#ifndef KERN_ADDR_page_follow_link_light
#define APP_WRAPPER_FOR_page_follow_link_light
#endif
 
#ifndef APP_WRAPPER_FOR_page_follow_link_light
#define APP_WRAPPER_FOR_page_follow_link_light
FUNCTION_WRAPPER(page_follow_link_light, (struct dentry *_arg1, struct nameidata *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct nameidata)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("page_follow_link_light is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    void *ret = page_follow_link_light(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("page_follow_link_light returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct nameidata)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_work_busy
#define APP_WRAPPER_FOR_work_busy
#endif
 
#ifndef APP_WRAPPER_FOR_work_busy
#define APP_WRAPPER_FOR_work_busy
FUNCTION_WRAPPER(work_busy, (struct work_struct *work), {
    WRAP_RECURSIVE(work);
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
    kern_printk("work_busy is invoked.\n");
    PRE_WRAPPER_FUNC(work);
    int ret = work_busy(work);
    POST_WRAPPER_FUNC(work);
    kern_printk("work_busy returned.\n");
    TRACES_IF_WATCHPOINT(work);
    SCAN_HEAD_FUNC(struct work_struct)(*(TO_UNWATCHED_ADDRESS(work)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vmalloc_to_page
#define APP_WRAPPER_FOR_vmalloc_to_page
#endif
 
#ifndef APP_WRAPPER_FOR_vmalloc_to_page
#define APP_WRAPPER_FOR_vmalloc_to_page
FUNCTION_WRAPPER(vmalloc_to_page, (const void *addr), {
    kern_printk("vmalloc_to_page is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    struct page *ret = vmalloc_to_page(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("vmalloc_to_page returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_bus_remove_resources
#define APP_WRAPPER_FOR_pci_bus_remove_resources
#endif
 
#ifndef APP_WRAPPER_FOR_pci_bus_remove_resources
#define APP_WRAPPER_FOR_pci_bus_remove_resources
FUNCTION_WRAPPER_VOID(pci_bus_remove_resources, (struct pci_bus *bus), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_bus_remove_resources is invoked.\n");
    PRE_WRAPPER_FUNC(bus);
    pci_bus_remove_resources(bus);
    POST_WRAPPER_FUNC(bus);
    kern_printk("pci_bus_remove_resources returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
})
#endif


#ifndef KERN_ADDR_sort_main_extable
#define APP_WRAPPER_FOR_sort_main_extable
#endif
 
#ifndef APP_WRAPPER_FOR_sort_main_extable
#define APP_WRAPPER_FOR_sort_main_extable
FUNCTION_WRAPPER_VOID(sort_main_extable, (), {
    kern_printk("sort_main_extable is invoked.\n");
    PRE_WRAPPER_FUNC();
    sort_main_extable();
    POST_WRAPPER_FUNC();
    kern_printk("sort_main_extable returned.\n");
})
#endif


#ifndef KERN_ADDR_printk_emit
#define APP_WRAPPER_FOR_printk_emit
#endif
 
#ifndef APP_WRAPPER_FOR_printk_emit
#define APP_WRAPPER_FOR_printk_emit
FUNCTION_WRAPPER(printk_emit, (int facility, int level, const char *dict, size_t dictlen, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    // TODO: variadic arguments
    kern_printk("printk_emit is invoked.\n");
    PRE_WRAPPER_FUNC(facility, level, dict, dictlen, fmt);
    int ret = printk_emit(facility, level, dict, dictlen, fmt);
    POST_WRAPPER_FUNC(facility, level, dict, dictlen, fmt);
    kern_printk("printk_emit returned.\n");
    va_end(args__);
    return ret;
})
#endif


#ifndef KERN_ADDR_play_dead_common
#define APP_WRAPPER_FOR_play_dead_common
#endif
 
#ifndef APP_WRAPPER_FOR_play_dead_common
#define APP_WRAPPER_FOR_play_dead_common
FUNCTION_WRAPPER_VOID(play_dead_common, (), {
    kern_printk("play_dead_common is invoked.\n");
    PRE_WRAPPER_FUNC();
    play_dead_common();
    POST_WRAPPER_FUNC();
    kern_printk("play_dead_common returned.\n");
})
#endif


#ifndef KERN_ADDR_pnp_request_card_device
#define APP_WRAPPER_FOR_pnp_request_card_device
#endif
 
#ifndef APP_WRAPPER_FOR_pnp_request_card_device
#define APP_WRAPPER_FOR_pnp_request_card_device
FUNCTION_WRAPPER(pnp_request_card_device, (struct pnp_card_link *clink, const char *id, struct pnp_dev *from), {
    WRAP_RECURSIVE(clink);
    TRACES_IF_WATCHPOINT(clink);
    SCAN_HEAD_FUNC(struct pnp_card_link)(*(TO_UNWATCHED_ADDRESS(clink)));
    WRAP_RECURSIVE(from);
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(struct pnp_dev)(*(TO_UNWATCHED_ADDRESS(from)));
    kern_printk("pnp_request_card_device is invoked.\n");
    PRE_WRAPPER_FUNC(clink, id, from);
    struct pnp_dev *ret = pnp_request_card_device(clink, id, from);
    POST_WRAPPER_FUNC(clink, id, from);
    kern_printk("pnp_request_card_device returned.\n");
    TRACES_IF_WATCHPOINT(clink);
    SCAN_HEAD_FUNC(struct pnp_card_link)(*(TO_UNWATCHED_ADDRESS(clink)));
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(struct pnp_dev)(*(TO_UNWATCHED_ADDRESS(from)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_printk_timed_ratelimit
#define APP_WRAPPER_FOR_printk_timed_ratelimit
#endif
 
#ifndef APP_WRAPPER_FOR_printk_timed_ratelimit
#define APP_WRAPPER_FOR_printk_timed_ratelimit
FUNCTION_WRAPPER(printk_timed_ratelimit, (unsigned long *caller_jiffies, unsigned int interval_msec), {
    kern_printk("printk_timed_ratelimit is invoked.\n");
    PRE_WRAPPER_FUNC(caller_jiffies, interval_msec);
    bool ret = printk_timed_ratelimit(caller_jiffies, interval_msec);
    POST_WRAPPER_FUNC(caller_jiffies, interval_msec);
    kern_printk("printk_timed_ratelimit returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_std_end_eh
#define APP_WRAPPER_FOR_ata_std_end_eh
#endif
 
#ifndef APP_WRAPPER_FOR_ata_std_end_eh
#define APP_WRAPPER_FOR_ata_std_end_eh
FUNCTION_WRAPPER_VOID(ata_std_end_eh, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_std_end_eh is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    ata_std_end_eh(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_std_end_eh returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_ida_pre_get
#define APP_WRAPPER_FOR_ida_pre_get
#endif
 
#ifndef APP_WRAPPER_FOR_ida_pre_get
#define APP_WRAPPER_FOR_ida_pre_get
FUNCTION_WRAPPER(ida_pre_get, (struct ida *ida, gfp_t gfp_mask), {
    WRAP_RECURSIVE(ida);
    TRACES_IF_WATCHPOINT(ida);
    SCAN_HEAD_FUNC(struct ida)(*(TO_UNWATCHED_ADDRESS(ida)));
    kern_printk("ida_pre_get is invoked.\n");
    PRE_WRAPPER_FUNC(ida, gfp_mask);
    int ret = ida_pre_get(ida, gfp_mask);
    POST_WRAPPER_FUNC(ida, gfp_mask);
    kern_printk("ida_pre_get returned.\n");
    TRACES_IF_WATCHPOINT(ida);
    SCAN_HEAD_FUNC(struct ida)(*(TO_UNWATCHED_ADDRESS(ida)));
    return ret;
})
#endif


#ifndef KERN_ADDR_filp_open
#define APP_WRAPPER_FOR_filp_open
#endif
 
#ifndef APP_WRAPPER_FOR_filp_open
#define APP_WRAPPER_FOR_filp_open
FUNCTION_WRAPPER(filp_open, (const char *_arg1, int _arg2, umode_t _arg3), {
    kern_printk("filp_open is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    struct file *ret = filp_open(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("filp_open returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_resume
#define APP_WRAPPER_FOR_dm_resume
#endif
 
#ifndef APP_WRAPPER_FOR_dm_resume
#define APP_WRAPPER_FOR_dm_resume
FUNCTION_WRAPPER(dm_resume, (struct mapped_device *md), {
    kern_printk("dm_resume is invoked.\n");
    PRE_WRAPPER_FUNC(md);
    int ret = dm_resume(md);
    POST_WRAPPER_FUNC(md);
    kern_printk("dm_resume returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_nf_unregister_sockopt
#define APP_WRAPPER_FOR_nf_unregister_sockopt
#endif
 
#ifndef APP_WRAPPER_FOR_nf_unregister_sockopt
#define APP_WRAPPER_FOR_nf_unregister_sockopt
FUNCTION_WRAPPER_VOID(nf_unregister_sockopt, (struct nf_sockopt_ops *reg), {
    WRAP_RECURSIVE(reg);
    TRACES_IF_WATCHPOINT(reg);
    SCAN_HEAD_FUNC(struct nf_sockopt_ops)(*(TO_UNWATCHED_ADDRESS(reg)));
    kern_printk("nf_unregister_sockopt is invoked.\n");
    PRE_WRAPPER_FUNC(reg);
    nf_unregister_sockopt(reg);
    POST_WRAPPER_FUNC(reg);
    kern_printk("nf_unregister_sockopt returned.\n");
    TRACES_IF_WATCHPOINT(reg);
    SCAN_HEAD_FUNC(struct nf_sockopt_ops)(*(TO_UNWATCHED_ADDRESS(reg)));
})
#endif


#ifndef KERN_ADDR_msleep
#define APP_WRAPPER_FOR_msleep
#endif
 
#ifndef APP_WRAPPER_FOR_msleep
#define APP_WRAPPER_FOR_msleep
FUNCTION_WRAPPER_VOID(msleep, (unsigned int msecs), {
    kern_printk("msleep is invoked.\n");
    PRE_WRAPPER_FUNC(msecs);
    msleep(msecs);
    POST_WRAPPER_FUNC(msecs);
    kern_printk("msleep returned.\n");
})
#endif


#ifndef KERN_ADDR_inode_newsize_ok
#define APP_WRAPPER_FOR_inode_newsize_ok
#endif
 
#ifndef APP_WRAPPER_FOR_inode_newsize_ok
#define APP_WRAPPER_FOR_inode_newsize_ok
FUNCTION_WRAPPER(inode_newsize_ok, (const struct inode *_arg1, loff_t offset), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("inode_newsize_ok is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, offset);
    int ret = inode_newsize_ok(_arg1, offset);
    POST_WRAPPER_FUNC(_arg1, offset);
    kern_printk("inode_newsize_ok returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_gen_new_estimator
#define APP_WRAPPER_FOR_gen_new_estimator
#endif
 
#ifndef APP_WRAPPER_FOR_gen_new_estimator
#define APP_WRAPPER_FOR_gen_new_estimator
FUNCTION_WRAPPER(gen_new_estimator, (struct gnet_stats_basic_packed *bstats, struct gnet_stats_rate_est *rate_est, spinlock_t *stats_lock, struct nlattr *opt), {
    kern_printk("gen_new_estimator is invoked.\n");
    PRE_WRAPPER_FUNC(bstats, rate_est, stats_lock, opt);
    int ret = gen_new_estimator(bstats, rate_est, stats_lock, opt);
    POST_WRAPPER_FUNC(bstats, rate_est, stats_lock, opt);
    kern_printk("gen_new_estimator returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_io_setup
#define APP_WRAPPER_FOR_compat_sys_io_setup
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_io_setup
#define APP_WRAPPER_FOR_compat_sys_io_setup
FUNCTION_WRAPPER(compat_sys_io_setup, (unsigned int nr_reqs, u32 *ctx32p), {
    kern_printk("compat_sys_io_setup is invoked.\n");
    PRE_WRAPPER_FUNC(nr_reqs, ctx32p);
    long ret = compat_sys_io_setup(nr_reqs, ctx32p);
    POST_WRAPPER_FUNC(nr_reqs, ctx32p);
    kern_printk("compat_sys_io_setup returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_net_ratelimit
#define APP_WRAPPER_FOR_net_ratelimit
#endif
 
#ifndef APP_WRAPPER_FOR_net_ratelimit
#define APP_WRAPPER_FOR_net_ratelimit
FUNCTION_WRAPPER(net_ratelimit, (), {
    kern_printk("net_ratelimit is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = net_ratelimit();
    POST_WRAPPER_FUNC();
    kern_printk("net_ratelimit returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_destroy_transaction_cache
#define APP_WRAPPER_FOR_jbd2_journal_destroy_transaction_cache
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_destroy_transaction_cache
#define APP_WRAPPER_FOR_jbd2_journal_destroy_transaction_cache
FUNCTION_WRAPPER_VOID(jbd2_journal_destroy_transaction_cache, (), {
    kern_printk("jbd2_journal_destroy_transaction_cache is invoked.\n");
    PRE_WRAPPER_FUNC();
    jbd2_journal_destroy_transaction_cache();
    POST_WRAPPER_FUNC();
    kern_printk("jbd2_journal_destroy_transaction_cache returned.\n");
})
#endif


#ifndef KERN_ADDR_swiotlb_sync_single_for_device
#define APP_WRAPPER_FOR_swiotlb_sync_single_for_device
#endif
 
#ifndef APP_WRAPPER_FOR_swiotlb_sync_single_for_device
#define APP_WRAPPER_FOR_swiotlb_sync_single_for_device
FUNCTION_WRAPPER_VOID(swiotlb_sync_single_for_device, (struct device *hwdev, dma_addr_t dev_addr, size_t size, enum dma_data_direction dir), {
    WRAP_RECURSIVE(hwdev);
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
    kern_printk("swiotlb_sync_single_for_device is invoked.\n");
    PRE_WRAPPER_FUNC(hwdev, dev_addr, size, dir);
    swiotlb_sync_single_for_device(hwdev, dev_addr, size, dir);
    POST_WRAPPER_FUNC(hwdev, dev_addr, size, dir);
    kern_printk("swiotlb_sync_single_for_device returned.\n");
    TRACES_IF_WATCHPOINT(hwdev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(hwdev)));
})
#endif


#ifndef KERN_ADDR_skb_append
#define APP_WRAPPER_FOR_skb_append
#endif
 
#ifndef APP_WRAPPER_FOR_skb_append
#define APP_WRAPPER_FOR_skb_append
FUNCTION_WRAPPER_VOID(skb_append, (struct sk_buff *old, struct sk_buff *newsk, struct sk_buff_head *list), {
    WRAP_RECURSIVE(old);
    TRACES_IF_WATCHPOINT(old);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(old)));
    WRAP_RECURSIVE(newsk);
    TRACES_IF_WATCHPOINT(newsk);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(newsk)));
    WRAP_RECURSIVE(list);
    TRACES_IF_WATCHPOINT(list);
    SCAN_HEAD_FUNC(struct sk_buff_head)(*(TO_UNWATCHED_ADDRESS(list)));
    kern_printk("skb_append is invoked.\n");
    PRE_WRAPPER_FUNC(old, newsk, list);
    skb_append(old, newsk, list);
    POST_WRAPPER_FUNC(old, newsk, list);
    kern_printk("skb_append returned.\n");
    TRACES_IF_WATCHPOINT(old);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(old)));
    TRACES_IF_WATCHPOINT(newsk);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(newsk)));
    TRACES_IF_WATCHPOINT(list);
    SCAN_HEAD_FUNC(struct sk_buff_head)(*(TO_UNWATCHED_ADDRESS(list)));
})
#endif


#ifndef KERN_ADDR_pci_enable_msi_block
#define APP_WRAPPER_FOR_pci_enable_msi_block
#endif
 
#ifndef APP_WRAPPER_FOR_pci_enable_msi_block
#define APP_WRAPPER_FOR_pci_enable_msi_block
FUNCTION_WRAPPER(pci_enable_msi_block, (struct pci_dev *dev, unsigned int nvec), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_enable_msi_block is invoked.\n");
    PRE_WRAPPER_FUNC(dev, nvec);
    int ret = pci_enable_msi_block(dev, nvec);
    POST_WRAPPER_FUNC(dev, nvec);
    kern_printk("pci_enable_msi_block returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_eh_analyze_ncq_error
#define APP_WRAPPER_FOR_ata_eh_analyze_ncq_error
#endif
 
#ifndef APP_WRAPPER_FOR_ata_eh_analyze_ncq_error
#define APP_WRAPPER_FOR_ata_eh_analyze_ncq_error
FUNCTION_WRAPPER_VOID(ata_eh_analyze_ncq_error, (struct ata_link *link), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    kern_printk("ata_eh_analyze_ncq_error is invoked.\n");
    PRE_WRAPPER_FUNC(link);
    ata_eh_analyze_ncq_error(link);
    POST_WRAPPER_FUNC(link);
    kern_printk("ata_eh_analyze_ncq_error returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
})
#endif


#ifndef KERN_ADDR_sync_mm_rss
#define APP_WRAPPER_FOR_sync_mm_rss
#endif
 
#ifndef APP_WRAPPER_FOR_sync_mm_rss
#define APP_WRAPPER_FOR_sync_mm_rss
FUNCTION_WRAPPER_VOID(sync_mm_rss, (struct mm_struct *mm), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    kern_printk("sync_mm_rss is invoked.\n");
    PRE_WRAPPER_FUNC(mm);
    sync_mm_rss(mm);
    POST_WRAPPER_FUNC(mm);
    kern_printk("sync_mm_rss returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
})
#endif


#ifndef KERN_ADDR_jbd2_journal_force_commit
#define APP_WRAPPER_FOR_jbd2_journal_force_commit
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_force_commit
#define APP_WRAPPER_FOR_jbd2_journal_force_commit
FUNCTION_WRAPPER(jbd2_journal_force_commit, (journal_t *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_force_commit is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = jbd2_journal_force_commit(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("jbd2_journal_force_commit returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_bioset_integrity_create
#define APP_WRAPPER_FOR_bioset_integrity_create
#endif
 
#ifndef APP_WRAPPER_FOR_bioset_integrity_create
#define APP_WRAPPER_FOR_bioset_integrity_create
FUNCTION_WRAPPER(bioset_integrity_create, (struct bio_set *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio_set)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bioset_integrity_create is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = bioset_integrity_create(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("bioset_integrity_create returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio_set)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR___journal_clean_data_list
#define APP_WRAPPER_FOR___journal_clean_data_list
#endif
 
#ifndef APP_WRAPPER_FOR___journal_clean_data_list
#define APP_WRAPPER_FOR___journal_clean_data_list
FUNCTION_WRAPPER_VOID(__journal_clean_data_list, (transaction_t *transaction), {
    WRAP_RECURSIVE(transaction);
    TRACES_IF_WATCHPOINT(transaction);
    SCAN_HEAD_FUNC(transaction_t)(*(TO_UNWATCHED_ADDRESS(transaction)));
    kern_printk("__journal_clean_data_list is invoked.\n");
    PRE_WRAPPER_FUNC(transaction);
    __journal_clean_data_list(transaction);
    POST_WRAPPER_FUNC(transaction);
    kern_printk("__journal_clean_data_list returned.\n");
    TRACES_IF_WATCHPOINT(transaction);
    SCAN_HEAD_FUNC(transaction_t)(*(TO_UNWATCHED_ADDRESS(transaction)));
})
#endif


#ifndef KERN_ADDR_phys_mem_access_prot
#define APP_WRAPPER_FOR_phys_mem_access_prot
#endif
 
#ifndef APP_WRAPPER_FOR_phys_mem_access_prot
#define APP_WRAPPER_FOR_phys_mem_access_prot
FUNCTION_WRAPPER(phys_mem_access_prot, (struct file *file, unsigned long pfn, unsigned long size, pgprot_t vma_prot), {
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("phys_mem_access_prot is invoked.\n");
    PRE_WRAPPER_FUNC(file, pfn, size, vma_prot);
    pgprot_t ret = phys_mem_access_prot(file, pfn, size, vma_prot);
    POST_WRAPPER_FUNC(file, pfn, size, vma_prot);
    kern_printk("phys_mem_access_prot returned.\n");
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_end_buffer_async_write
#define APP_WRAPPER_FOR_end_buffer_async_write
#endif
 
#ifndef APP_WRAPPER_FOR_end_buffer_async_write
#define APP_WRAPPER_FOR_end_buffer_async_write
FUNCTION_WRAPPER_VOID(end_buffer_async_write, (struct buffer_head *bh, int uptodate), {
    WRAP_RECURSIVE(bh);
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    kern_printk("end_buffer_async_write is invoked.\n");
    PRE_WRAPPER_FUNC(bh, uptodate);
    end_buffer_async_write(bh, uptodate);
    POST_WRAPPER_FUNC(bh, uptodate);
    kern_printk("end_buffer_async_write returned.\n");
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
})
#endif


#ifndef KERN_ADDR_compat_sys_semctl
#define APP_WRAPPER_FOR_compat_sys_semctl
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_semctl
#define APP_WRAPPER_FOR_compat_sys_semctl
FUNCTION_WRAPPER(compat_sys_semctl, (int first, int second, int third, void *uptr), {
    kern_printk("compat_sys_semctl is invoked.\n");
    PRE_WRAPPER_FUNC(first, second, third, uptr);
    long ret = compat_sys_semctl(first, second, third, uptr);
    POST_WRAPPER_FUNC(first, second, third, uptr);
    kern_printk("compat_sys_semctl returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_set_disk_ro
#define APP_WRAPPER_FOR_set_disk_ro
#endif
 
#ifndef APP_WRAPPER_FOR_set_disk_ro
#define APP_WRAPPER_FOR_set_disk_ro
FUNCTION_WRAPPER_VOID(set_disk_ro, (struct gendisk *disk, int flag), {
    WRAP_RECURSIVE(disk);
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    kern_printk("set_disk_ro is invoked.\n");
    PRE_WRAPPER_FUNC(disk, flag);
    set_disk_ro(disk, flag);
    POST_WRAPPER_FUNC(disk, flag);
    kern_printk("set_disk_ro returned.\n");
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
})
#endif


#ifndef KERN_ADDR_unregister_net_sysctl_table
#define APP_WRAPPER_FOR_unregister_net_sysctl_table
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_net_sysctl_table
#define APP_WRAPPER_FOR_unregister_net_sysctl_table
FUNCTION_WRAPPER_VOID(unregister_net_sysctl_table, (struct ctl_table_header *header), {
    WRAP_RECURSIVE(header);
    TRACES_IF_WATCHPOINT(header);
    SCAN_HEAD_FUNC(struct ctl_table_header)(*(TO_UNWATCHED_ADDRESS(header)));
    kern_printk("unregister_net_sysctl_table is invoked.\n");
    PRE_WRAPPER_FUNC(header);
    unregister_net_sysctl_table(header);
    POST_WRAPPER_FUNC(header);
    kern_printk("unregister_net_sysctl_table returned.\n");
    TRACES_IF_WATCHPOINT(header);
    SCAN_HEAD_FUNC(struct ctl_table_header)(*(TO_UNWATCHED_ADDRESS(header)));
})
#endif


#ifndef KERN_ADDR_set_pcie_port_type
#define APP_WRAPPER_FOR_set_pcie_port_type
#endif
 
#ifndef APP_WRAPPER_FOR_set_pcie_port_type
#define APP_WRAPPER_FOR_set_pcie_port_type
FUNCTION_WRAPPER_VOID(set_pcie_port_type, (struct pci_dev *pdev), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("set_pcie_port_type is invoked.\n");
    PRE_WRAPPER_FUNC(pdev);
    set_pcie_port_type(pdev);
    POST_WRAPPER_FUNC(pdev);
    kern_printk("set_pcie_port_type returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
})
#endif


#ifndef KERN_ADDR_mm_access
#define APP_WRAPPER_FOR_mm_access
#endif
 
#ifndef APP_WRAPPER_FOR_mm_access
#define APP_WRAPPER_FOR_mm_access
FUNCTION_WRAPPER(mm_access, (struct task_struct *task, unsigned int mode), {
    WRAP_RECURSIVE(task);
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    kern_printk("mm_access is invoked.\n");
    PRE_WRAPPER_FUNC(task, mode);
    struct mm_struct *ret = mm_access(task, mode);
    POST_WRAPPER_FUNC(task, mode);
    kern_printk("mm_access returned.\n");
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_flush_thread
#define APP_WRAPPER_FOR_flush_thread
#endif
 
#ifndef APP_WRAPPER_FOR_flush_thread
#define APP_WRAPPER_FOR_flush_thread
FUNCTION_WRAPPER_VOID(flush_thread, (), {
    kern_printk("flush_thread is invoked.\n");
    PRE_WRAPPER_FUNC();
    flush_thread();
    POST_WRAPPER_FUNC();
    kern_printk("flush_thread returned.\n");
})
#endif


#ifndef KERN_ADDR_alloc_etherdev_mqs
#define APP_WRAPPER_FOR_alloc_etherdev_mqs
#endif
 
#ifndef APP_WRAPPER_FOR_alloc_etherdev_mqs
#define APP_WRAPPER_FOR_alloc_etherdev_mqs
FUNCTION_WRAPPER(alloc_etherdev_mqs, (int sizeof_priv, unsigned int txqs, unsigned int rxqs), {
    kern_printk("alloc_etherdev_mqs is invoked.\n");
    PRE_WRAPPER_FUNC(sizeof_priv, txqs, rxqs);
    struct net_device *ret = alloc_etherdev_mqs(sizeof_priv, txqs, rxqs);
    POST_WRAPPER_FUNC(sizeof_priv, txqs, rxqs);
    kern_printk("alloc_etherdev_mqs returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_alloc_disk
#define APP_WRAPPER_FOR_alloc_disk
#endif
 
#ifndef APP_WRAPPER_FOR_alloc_disk
#define APP_WRAPPER_FOR_alloc_disk
FUNCTION_WRAPPER(alloc_disk, (int minors), {
    kern_printk("alloc_disk is invoked.\n");
    PRE_WRAPPER_FUNC(minors);
    struct gendisk *ret = alloc_disk(minors);
    POST_WRAPPER_FUNC(minors);
    kern_printk("alloc_disk returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_init_VISWS_APIC_irqs
#define APP_WRAPPER_FOR_init_VISWS_APIC_irqs
#endif
 
#ifndef APP_WRAPPER_FOR_init_VISWS_APIC_irqs
#define APP_WRAPPER_FOR_init_VISWS_APIC_irqs
FUNCTION_WRAPPER_VOID(init_VISWS_APIC_irqs, (), {
    kern_printk("init_VISWS_APIC_irqs is invoked.\n");
    PRE_WRAPPER_FUNC();
    init_VISWS_APIC_irqs();
    POST_WRAPPER_FUNC();
    kern_printk("init_VISWS_APIC_irqs returned.\n");
})
#endif


#ifndef KERN_ADDR_plist_add
#define APP_WRAPPER_FOR_plist_add
#endif
 
#ifndef APP_WRAPPER_FOR_plist_add
#define APP_WRAPPER_FOR_plist_add
FUNCTION_WRAPPER_VOID(plist_add, (struct plist_node *node, struct plist_head *head), {
    kern_printk("plist_add is invoked.\n");
    PRE_WRAPPER_FUNC(node, head);
    plist_add(node, head);
    POST_WRAPPER_FUNC(node, head);
    kern_printk("plist_add returned.\n");
})
#endif


#ifndef KERN_ADDR___netdev_alloc_skb
#define APP_WRAPPER_FOR___netdev_alloc_skb
#endif
 
#ifndef APP_WRAPPER_FOR___netdev_alloc_skb
#define APP_WRAPPER_FOR___netdev_alloc_skb
FUNCTION_WRAPPER(__netdev_alloc_skb, (struct net_device *dev, unsigned int length, gfp_t gfp_mask), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("__netdev_alloc_skb is invoked.\n");
    PRE_WRAPPER_FUNC(dev, length, gfp_mask);
    struct sk_buff *ret = __netdev_alloc_skb(dev, length, gfp_mask);
    POST_WRAPPER_FUNC(dev, length, gfp_mask);
    kern_printk("__netdev_alloc_skb returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_inode_get_bytes
#define APP_WRAPPER_FOR_inode_get_bytes
#endif
 
#ifndef APP_WRAPPER_FOR_inode_get_bytes
#define APP_WRAPPER_FOR_inode_get_bytes
FUNCTION_WRAPPER(inode_get_bytes, (struct inode *inode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("inode_get_bytes is invoked.\n");
    PRE_WRAPPER_FUNC(inode);
    loff_t ret = inode_get_bytes(inode);
    POST_WRAPPER_FUNC(inode);
    kern_printk("inode_get_bytes returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    return ret;
})
#endif


#ifndef KERN_ADDR___pmd_trans_huge_lock
#define APP_WRAPPER_FOR___pmd_trans_huge_lock
#endif
 
#ifndef APP_WRAPPER_FOR___pmd_trans_huge_lock
#define APP_WRAPPER_FOR___pmd_trans_huge_lock
FUNCTION_WRAPPER(__pmd_trans_huge_lock, (pmd_t *pmd, struct vm_area_struct *vma), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("__pmd_trans_huge_lock is invoked.\n");
    PRE_WRAPPER_FUNC(pmd, vma);
    int ret = __pmd_trans_huge_lock(pmd, vma);
    POST_WRAPPER_FUNC(pmd, vma);
    kern_printk("__pmd_trans_huge_lock returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_initialize_tables
#define APP_WRAPPER_FOR_acpi_initialize_tables
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_initialize_tables
#define APP_WRAPPER_FOR_acpi_initialize_tables
FUNCTION_WRAPPER(acpi_initialize_tables, (struct acpi_table_desc *initial_storage, u32 initial_table_count, u8 allow_resize), {
    kern_printk("acpi_initialize_tables is invoked.\n");
    PRE_WRAPPER_FUNC(initial_storage, initial_table_count, allow_resize);
    acpi_status ret = acpi_initialize_tables(initial_storage, initial_table_count, allow_resize);
    POST_WRAPPER_FUNC(initial_storage, initial_table_count, allow_resize);
    kern_printk("acpi_initialize_tables returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_num_vf
#define APP_WRAPPER_FOR_pci_num_vf
#endif
 
#ifndef APP_WRAPPER_FOR_pci_num_vf
#define APP_WRAPPER_FOR_pci_num_vf
FUNCTION_WRAPPER(pci_num_vf, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_num_vf is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pci_num_vf(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_num_vf returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_clocksource_register
#define APP_WRAPPER_FOR_clocksource_register
#endif
 
#ifndef APP_WRAPPER_FOR_clocksource_register
#define APP_WRAPPER_FOR_clocksource_register
FUNCTION_WRAPPER(clocksource_register, (struct clocksource *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct clocksource)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("clocksource_register is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = clocksource_register(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("clocksource_register returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct clocksource)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_shrink_all_memory
#define APP_WRAPPER_FOR_shrink_all_memory
#endif
 
#ifndef APP_WRAPPER_FOR_shrink_all_memory
#define APP_WRAPPER_FOR_shrink_all_memory
FUNCTION_WRAPPER(shrink_all_memory, (unsigned long nr_pages), {
    kern_printk("shrink_all_memory is invoked.\n");
    PRE_WRAPPER_FUNC(nr_pages);
    long ret = shrink_all_memory(nr_pages);
    POST_WRAPPER_FUNC(nr_pages);
    kern_printk("shrink_all_memory returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___pneigh_lookup
#define APP_WRAPPER_FOR___pneigh_lookup
#endif
 
#ifndef APP_WRAPPER_FOR___pneigh_lookup
#define APP_WRAPPER_FOR___pneigh_lookup
FUNCTION_WRAPPER(__pneigh_lookup, (struct neigh_table *tbl, struct net *net, const void *key, struct net_device *dev), {
    WRAP_RECURSIVE(tbl);
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("__pneigh_lookup is invoked.\n");
    PRE_WRAPPER_FUNC(tbl, net, key, dev);
    struct pneigh_entry *ret = __pneigh_lookup(tbl, net, key, dev);
    POST_WRAPPER_FUNC(tbl, net, key, dev);
    kern_printk("__pneigh_lookup returned.\n");
    TRACES_IF_WATCHPOINT(tbl);
    SCAN_HEAD_FUNC(struct neigh_table)(*(TO_UNWATCHED_ADDRESS(tbl)));
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_cpus_share_cache
#define APP_WRAPPER_FOR_cpus_share_cache
#endif
 
#ifndef APP_WRAPPER_FOR_cpus_share_cache
#define APP_WRAPPER_FOR_cpus_share_cache
FUNCTION_WRAPPER(cpus_share_cache, (int this_cpu, int that_cpu), {
    kern_printk("cpus_share_cache is invoked.\n");
    PRE_WRAPPER_FUNC(this_cpu, that_cpu);
    bool ret = cpus_share_cache(this_cpu, that_cpu);
    POST_WRAPPER_FUNC(this_cpu, that_cpu);
    kern_printk("cpus_share_cache returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_alloc_user_space
#define APP_WRAPPER_FOR_compat_alloc_user_space
#endif
 
#ifndef APP_WRAPPER_FOR_compat_alloc_user_space
#define APP_WRAPPER_FOR_compat_alloc_user_space
FUNCTION_WRAPPER(compat_alloc_user_space, (unsigned long len), {
    kern_printk("compat_alloc_user_space is invoked.\n");
    PRE_WRAPPER_FUNC(len);
    void *ret = compat_alloc_user_space(len);
    POST_WRAPPER_FUNC(len);
    kern_printk("compat_alloc_user_space returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___remove_pages
#define APP_WRAPPER_FOR___remove_pages
#endif
 
#ifndef APP_WRAPPER_FOR___remove_pages
#define APP_WRAPPER_FOR___remove_pages
FUNCTION_WRAPPER(__remove_pages, (struct zone *zone, unsigned long start_pfn, unsigned long nr_pages), {
    WRAP_RECURSIVE(zone);
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    kern_printk("__remove_pages is invoked.\n");
    PRE_WRAPPER_FUNC(zone, start_pfn, nr_pages);
    int ret = __remove_pages(zone, start_pfn, nr_pages);
    POST_WRAPPER_FUNC(zone, start_pfn, nr_pages);
    kern_printk("__remove_pages returned.\n");
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pm_generic_restore_noirq
#define APP_WRAPPER_FOR_pm_generic_restore_noirq
#endif
 
#ifndef APP_WRAPPER_FOR_pm_generic_restore_noirq
#define APP_WRAPPER_FOR_pm_generic_restore_noirq
FUNCTION_WRAPPER(pm_generic_restore_noirq, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pm_generic_restore_noirq is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pm_generic_restore_noirq(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pm_generic_restore_noirq returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR___sys_recvmmsg
#define APP_WRAPPER_FOR___sys_recvmmsg
#endif
 
#ifndef APP_WRAPPER_FOR___sys_recvmmsg
#define APP_WRAPPER_FOR___sys_recvmmsg
FUNCTION_WRAPPER(__sys_recvmmsg, (int fd, struct mmsghdr *mmsg, unsigned int vlen, unsigned int flags, struct timespec *timeout), {
    kern_printk("__sys_recvmmsg is invoked.\n");
    PRE_WRAPPER_FUNC(fd, mmsg, vlen, flags, timeout);
    int ret = __sys_recvmmsg(fd, mmsg, vlen, flags, timeout);
    POST_WRAPPER_FUNC(fd, mmsg, vlen, flags, timeout);
    kern_printk("__sys_recvmmsg returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pnp_is_active
#define APP_WRAPPER_FOR_pnp_is_active
#endif
 
#ifndef APP_WRAPPER_FOR_pnp_is_active
#define APP_WRAPPER_FOR_pnp_is_active
FUNCTION_WRAPPER(pnp_is_active, (struct pnp_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pnp_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pnp_is_active is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pnp_is_active(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pnp_is_active returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pnp_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_start_queue
#define APP_WRAPPER_FOR_blk_start_queue
#endif
 
#ifndef APP_WRAPPER_FOR_blk_start_queue
#define APP_WRAPPER_FOR_blk_start_queue
FUNCTION_WRAPPER_VOID(blk_start_queue, (struct request_queue *q), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    kern_printk("blk_start_queue is invoked.\n");
    PRE_WRAPPER_FUNC(q);
    blk_start_queue(q);
    POST_WRAPPER_FUNC(q);
    kern_printk("blk_start_queue returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
})
#endif


#ifndef KERN_ADDR_pci_intx
#define APP_WRAPPER_FOR_pci_intx
#endif
 
#ifndef APP_WRAPPER_FOR_pci_intx
#define APP_WRAPPER_FOR_pci_intx
FUNCTION_WRAPPER_VOID(pci_intx, (struct pci_dev *dev, int enable), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_intx is invoked.\n");
    PRE_WRAPPER_FUNC(dev, enable);
    pci_intx(dev, enable);
    POST_WRAPPER_FUNC(dev, enable);
    kern_printk("pci_intx returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_pci_scan_child_bus
#define APP_WRAPPER_FOR_pci_scan_child_bus
#endif
 
#ifndef APP_WRAPPER_FOR_pci_scan_child_bus
#define APP_WRAPPER_FOR_pci_scan_child_bus
FUNCTION_WRAPPER(pci_scan_child_bus, (struct pci_bus *bus), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pci_scan_child_bus is invoked.\n");
    PRE_WRAPPER_FUNC(bus);
    int ret = pci_scan_child_bus(bus);
    POST_WRAPPER_FUNC(bus);
    kern_printk("pci_scan_child_bus returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    return ret;
})
#endif


#ifndef KERN_ADDR_key_alloc
#define APP_WRAPPER_FOR_key_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_key_alloc
#define APP_WRAPPER_FOR_key_alloc
FUNCTION_WRAPPER(key_alloc, (struct key_type *type, const char *desc, kuid_t uid, kgid_t gid, const struct cred *cred, key_perm_t perm, unsigned long flags), {
    WRAP_RECURSIVE(cred);
    TRACES_IF_WATCHPOINT(cred);
    SCAN_HEAD_FUNC(const struct cred)(*(TO_UNWATCHED_ADDRESS(cred)));
    kern_printk("key_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(type, desc, uid, gid, cred, perm, flags);
    struct key *ret = key_alloc(type, desc, uid, gid, cred, perm, flags);
    POST_WRAPPER_FUNC(type, desc, uid, gid, cred, perm, flags);
    kern_printk("key_alloc returned.\n");
    TRACES_IF_WATCHPOINT(cred);
    SCAN_HEAD_FUNC(const struct cred)(*(TO_UNWATCHED_ADDRESS(cred)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_set_gpe
#define APP_WRAPPER_FOR_acpi_set_gpe
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_set_gpe
#define APP_WRAPPER_FOR_acpi_set_gpe
FUNCTION_WRAPPER(acpi_set_gpe, (acpi_handle gpe_device, u32 gpe_number, u8 action), {
    kern_printk("acpi_set_gpe is invoked.\n");
    PRE_WRAPPER_FUNC(gpe_device, gpe_number, action);
    acpi_status ret = acpi_set_gpe(gpe_device, gpe_number, action);
    POST_WRAPPER_FUNC(gpe_device, gpe_number, action);
    kern_printk("acpi_set_gpe returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_std_prereset
#define APP_WRAPPER_FOR_ata_std_prereset
#endif
 
#ifndef APP_WRAPPER_FOR_ata_std_prereset
#define APP_WRAPPER_FOR_ata_std_prereset
FUNCTION_WRAPPER(ata_std_prereset, (struct ata_link *link, unsigned long deadline), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    kern_printk("ata_std_prereset is invoked.\n");
    PRE_WRAPPER_FUNC(link, deadline);
    int ret = ata_std_prereset(link, deadline);
    POST_WRAPPER_FUNC(link, deadline);
    kern_printk("ata_std_prereset returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sk_unattached_filter_destroy
#define APP_WRAPPER_FOR_sk_unattached_filter_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_sk_unattached_filter_destroy
#define APP_WRAPPER_FOR_sk_unattached_filter_destroy
FUNCTION_WRAPPER_VOID(sk_unattached_filter_destroy, (struct sk_filter *fp), {
    WRAP_RECURSIVE(fp);
    TRACES_IF_WATCHPOINT(fp);
    SCAN_HEAD_FUNC(struct sk_filter)(*(TO_UNWATCHED_ADDRESS(fp)));
    kern_printk("sk_unattached_filter_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(fp);
    sk_unattached_filter_destroy(fp);
    POST_WRAPPER_FUNC(fp);
    kern_printk("sk_unattached_filter_destroy returned.\n");
    TRACES_IF_WATCHPOINT(fp);
    SCAN_HEAD_FUNC(struct sk_filter)(*(TO_UNWATCHED_ADDRESS(fp)));
})
#endif


#ifndef KERN_ADDR_dev_vprintk_emit
#define APP_WRAPPER_FOR_dev_vprintk_emit
#endif
 
#ifndef APP_WRAPPER_FOR_dev_vprintk_emit
#define APP_WRAPPER_FOR_dev_vprintk_emit
FUNCTION_WRAPPER(dev_vprintk_emit, (int level, const struct device *dev, const char *fmt, va_list args), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_vprintk_emit is invoked.\n");
    PRE_WRAPPER_FUNC(level, dev, fmt, args);
    int ret = dev_vprintk_emit(level, dev, fmt, args);
    POST_WRAPPER_FUNC(level, dev, fmt, args);
    kern_printk("dev_vprintk_emit returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jiffies_to_timespec
#define APP_WRAPPER_FOR_jiffies_to_timespec
#endif
 
#ifndef APP_WRAPPER_FOR_jiffies_to_timespec
#define APP_WRAPPER_FOR_jiffies_to_timespec
FUNCTION_WRAPPER_VOID(jiffies_to_timespec, (unsigned const long jiffies, struct timespec *value), {
    kern_printk("jiffies_to_timespec is invoked.\n");
    PRE_WRAPPER_FUNC(jiffies, value);
    jiffies_to_timespec(jiffies, value);
    POST_WRAPPER_FUNC(jiffies, value);
    kern_printk("jiffies_to_timespec returned.\n");
})
#endif


#ifndef KERN_ADDR_elv_rb_add
#define APP_WRAPPER_FOR_elv_rb_add
#endif
 
#ifndef APP_WRAPPER_FOR_elv_rb_add
#define APP_WRAPPER_FOR_elv_rb_add
FUNCTION_WRAPPER_VOID(elv_rb_add, (struct rb_root *_arg1, struct request *_arg2), {
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("elv_rb_add is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    elv_rb_add(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("elv_rb_add returned.\n");
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_wake_up_bit
#define APP_WRAPPER_FOR_wake_up_bit
#endif
 
#ifndef APP_WRAPPER_FOR_wake_up_bit
#define APP_WRAPPER_FOR_wake_up_bit
FUNCTION_WRAPPER_VOID(wake_up_bit, (void *_arg1, int _arg2), {
    kern_printk("wake_up_bit is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    wake_up_bit(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("wake_up_bit returned.\n");
})
#endif


#ifndef KERN_ADDR_current_is_single_threaded
#define APP_WRAPPER_FOR_current_is_single_threaded
#endif
 
#ifndef APP_WRAPPER_FOR_current_is_single_threaded
#define APP_WRAPPER_FOR_current_is_single_threaded
FUNCTION_WRAPPER(current_is_single_threaded, (), {
    kern_printk("current_is_single_threaded is invoked.\n");
    PRE_WRAPPER_FUNC();
    bool ret = current_is_single_threaded();
    POST_WRAPPER_FUNC();
    kern_printk("current_is_single_threaded returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_enable_all_runtime_gpes
#define APP_WRAPPER_FOR_acpi_enable_all_runtime_gpes
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_enable_all_runtime_gpes
#define APP_WRAPPER_FOR_acpi_enable_all_runtime_gpes
FUNCTION_WRAPPER(acpi_enable_all_runtime_gpes, (), {
    kern_printk("acpi_enable_all_runtime_gpes is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_status ret = acpi_enable_all_runtime_gpes();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_enable_all_runtime_gpes returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_arch_uprobe_analyze_insn
#define APP_WRAPPER_FOR_arch_uprobe_analyze_insn
#endif
 
#ifndef APP_WRAPPER_FOR_arch_uprobe_analyze_insn
#define APP_WRAPPER_FOR_arch_uprobe_analyze_insn
FUNCTION_WRAPPER(arch_uprobe_analyze_insn, (struct arch_uprobe *aup, struct mm_struct *mm, unsigned long addr), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    kern_printk("arch_uprobe_analyze_insn is invoked.\n");
    PRE_WRAPPER_FUNC(aup, mm, addr);
    int ret = arch_uprobe_analyze_insn(aup, mm, addr);
    POST_WRAPPER_FUNC(aup, mm, addr);
    kern_printk("arch_uprobe_analyze_insn returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_lookup_devt
#define APP_WRAPPER_FOR_blk_lookup_devt
#endif
 
#ifndef APP_WRAPPER_FOR_blk_lookup_devt
#define APP_WRAPPER_FOR_blk_lookup_devt
FUNCTION_WRAPPER(blk_lookup_devt, (const char *name, int partno), {
    kern_printk("blk_lookup_devt is invoked.\n");
    PRE_WRAPPER_FUNC(name, partno);
    dev_t ret = blk_lookup_devt(name, partno);
    POST_WRAPPER_FUNC(name, partno);
    kern_printk("blk_lookup_devt returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_get_table
#define APP_WRAPPER_FOR_acpi_get_table
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_table
#define APP_WRAPPER_FOR_acpi_get_table
FUNCTION_WRAPPER(acpi_get_table, (acpi_string signature, u32 instance, struct acpi_table_header **out_table), {
    kern_printk("acpi_get_table is invoked.\n");
    PRE_WRAPPER_FUNC(signature, instance, out_table);
    acpi_status ret = acpi_get_table(signature, instance, out_table);
    POST_WRAPPER_FUNC(signature, instance, out_table);
    kern_printk("acpi_get_table returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_epoll_pwait
#define APP_WRAPPER_FOR_compat_sys_epoll_pwait
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_epoll_pwait
#define APP_WRAPPER_FOR_compat_sys_epoll_pwait
FUNCTION_WRAPPER(compat_sys_epoll_pwait, (int epfd, struct epoll_event *events, int maxevents, int timeout, const compat_sigset_t *sigmask, compat_size_t sigsetsize), {
    kern_printk("compat_sys_epoll_pwait is invoked.\n");
    PRE_WRAPPER_FUNC(epfd, events, maxevents, timeout, sigmask, sigsetsize);
    long ret = compat_sys_epoll_pwait(epfd, events, maxevents, timeout, sigmask, sigsetsize);
    POST_WRAPPER_FUNC(epfd, events, maxevents, timeout, sigmask, sigsetsize);
    kern_printk("compat_sys_epoll_pwait returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_mutex_unlock
#define APP_WRAPPER_FOR_mutex_unlock
#endif
 
#ifndef APP_WRAPPER_FOR_mutex_unlock
#define APP_WRAPPER_FOR_mutex_unlock
FUNCTION_WRAPPER_VOID(mutex_unlock, (struct mutex *lock), {
    WRAP_RECURSIVE(lock);
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
    kern_printk("mutex_unlock is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    mutex_unlock(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("mutex_unlock returned.\n");
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
})
#endif


#ifndef KERN_ADDR_clockevents_notify
#define APP_WRAPPER_FOR_clockevents_notify
#endif
 
#ifndef APP_WRAPPER_FOR_clockevents_notify
#define APP_WRAPPER_FOR_clockevents_notify
FUNCTION_WRAPPER_VOID(clockevents_notify, (unsigned long reason, void *arg), {
    kern_printk("clockevents_notify is invoked.\n");
    PRE_WRAPPER_FUNC(reason, arg);
    clockevents_notify(reason, arg);
    POST_WRAPPER_FUNC(reason, arg);
    kern_printk("clockevents_notify returned.\n");
})
#endif


#ifndef KERN_ADDR_add_to_page_cache_locked
#define APP_WRAPPER_FOR_add_to_page_cache_locked
#endif
 
#ifndef APP_WRAPPER_FOR_add_to_page_cache_locked
#define APP_WRAPPER_FOR_add_to_page_cache_locked
FUNCTION_WRAPPER(add_to_page_cache_locked, (struct page *page, struct address_space *mapping, unsigned long index, gfp_t gfp_mask), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("add_to_page_cache_locked is invoked.\n");
    PRE_WRAPPER_FUNC(page, mapping, index, gfp_mask);
    int ret = add_to_page_cache_locked(page, mapping, index, gfp_mask);
    POST_WRAPPER_FUNC(page, mapping, index, gfp_mask);
    kern_printk("add_to_page_cache_locked returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_mc_sync
#define APP_WRAPPER_FOR_dev_mc_sync
#endif
 
#ifndef APP_WRAPPER_FOR_dev_mc_sync
#define APP_WRAPPER_FOR_dev_mc_sync
FUNCTION_WRAPPER(dev_mc_sync, (struct net_device *to, struct net_device *from), {
    WRAP_RECURSIVE(to);
    TRACES_IF_WATCHPOINT(to);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(to)));
    WRAP_RECURSIVE(from);
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(from)));
    kern_printk("dev_mc_sync is invoked.\n");
    PRE_WRAPPER_FUNC(to, from);
    int ret = dev_mc_sync(to, from);
    POST_WRAPPER_FUNC(to, from);
    kern_printk("dev_mc_sync returned.\n");
    TRACES_IF_WATCHPOINT(to);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(to)));
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(from)));
    return ret;
})
#endif


#ifndef KERN_ADDR_int_sqrt
#define APP_WRAPPER_FOR_int_sqrt
#endif
 
#ifndef APP_WRAPPER_FOR_int_sqrt
#define APP_WRAPPER_FOR_int_sqrt
FUNCTION_WRAPPER(int_sqrt, (unsigned long _arg1), {
    kern_printk("int_sqrt is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    long ret = int_sqrt(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("int_sqrt returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_get_dumpable
#define APP_WRAPPER_FOR_get_dumpable
#endif
 
#ifndef APP_WRAPPER_FOR_get_dumpable
#define APP_WRAPPER_FOR_get_dumpable
FUNCTION_WRAPPER(get_dumpable, (struct mm_struct *mm), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    kern_printk("get_dumpable is invoked.\n");
    PRE_WRAPPER_FUNC(mm);
    int ret = get_dumpable(mm);
    POST_WRAPPER_FUNC(mm);
    kern_printk("get_dumpable returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_clear_err
#define APP_WRAPPER_FOR_jbd2_journal_clear_err
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_clear_err
#define APP_WRAPPER_FOR_jbd2_journal_clear_err
FUNCTION_WRAPPER(jbd2_journal_clear_err, (journal_t *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_clear_err is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = jbd2_journal_clear_err(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("jbd2_journal_clear_err returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_d_genocide
#define APP_WRAPPER_FOR_d_genocide
#endif
 
#ifndef APP_WRAPPER_FOR_d_genocide
#define APP_WRAPPER_FOR_d_genocide
FUNCTION_WRAPPER_VOID(d_genocide, (struct dentry *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("d_genocide is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    d_genocide(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("d_genocide returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR___netdev_watchdog_up
#define APP_WRAPPER_FOR___netdev_watchdog_up
#endif
 
#ifndef APP_WRAPPER_FOR___netdev_watchdog_up
#define APP_WRAPPER_FOR___netdev_watchdog_up
FUNCTION_WRAPPER_VOID(__netdev_watchdog_up, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("__netdev_watchdog_up is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    __netdev_watchdog_up(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("__netdev_watchdog_up returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_crypto_shash_update
#define APP_WRAPPER_FOR_crypto_shash_update
#endif
 
#ifndef APP_WRAPPER_FOR_crypto_shash_update
#define APP_WRAPPER_FOR_crypto_shash_update
FUNCTION_WRAPPER(crypto_shash_update, (struct shash_desc *desc, const u8 *data, unsigned int len), {
    WRAP_RECURSIVE(desc);
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct shash_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
    kern_printk("crypto_shash_update is invoked.\n");
    PRE_WRAPPER_FUNC(desc, data, len);
    int ret = crypto_shash_update(desc, data, len);
    POST_WRAPPER_FUNC(desc, data, len);
    kern_printk("crypto_shash_update returned.\n");
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct shash_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cache_firmware
#define APP_WRAPPER_FOR_cache_firmware
#endif
 
#ifndef APP_WRAPPER_FOR_cache_firmware
#define APP_WRAPPER_FOR_cache_firmware
FUNCTION_WRAPPER(cache_firmware, (const char *name), {
    kern_printk("cache_firmware is invoked.\n");
    PRE_WRAPPER_FUNC(name);
    int ret = cache_firmware(name);
    POST_WRAPPER_FUNC(name);
    kern_printk("cache_firmware returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___native_set_fixmap
#define APP_WRAPPER_FOR___native_set_fixmap
#endif
 
#ifndef APP_WRAPPER_FOR___native_set_fixmap
#define APP_WRAPPER_FOR___native_set_fixmap
FUNCTION_WRAPPER_VOID(__native_set_fixmap, (enum fixed_addresses idx, pte_t pte), {
    kern_printk("__native_set_fixmap is invoked.\n");
    PRE_WRAPPER_FUNC(idx, pte);
    __native_set_fixmap(idx, pte);
    POST_WRAPPER_FUNC(idx, pte);
    kern_printk("__native_set_fixmap returned.\n");
})
#endif


#ifndef KERN_ADDR_kernel_getsockopt
#define APP_WRAPPER_FOR_kernel_getsockopt
#endif
 
#ifndef APP_WRAPPER_FOR_kernel_getsockopt
#define APP_WRAPPER_FOR_kernel_getsockopt
FUNCTION_WRAPPER(kernel_getsockopt, (struct socket *sock, int level, int optname, char *optval, int *optlen), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    kern_printk("kernel_getsockopt is invoked.\n");
    PRE_WRAPPER_FUNC(sock, level, optname, optval, optlen);
    int ret = kernel_getsockopt(sock, level, optname, optval, optlen);
    POST_WRAPPER_FUNC(sock, level, optname, optval, optlen);
    kern_printk("kernel_getsockopt returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    return ret;
})
#endif


#ifndef KERN_ADDR_proc_tty_init
#define APP_WRAPPER_FOR_proc_tty_init
#endif
 
#ifndef APP_WRAPPER_FOR_proc_tty_init
#define APP_WRAPPER_FOR_proc_tty_init
FUNCTION_WRAPPER_VOID(proc_tty_init, (), {
    kern_printk("proc_tty_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    proc_tty_init();
    POST_WRAPPER_FUNC();
    kern_printk("proc_tty_init returned.\n");
})
#endif


#ifndef KERN_ADDR_dev_valid_name
#define APP_WRAPPER_FOR_dev_valid_name
#endif
 
#ifndef APP_WRAPPER_FOR_dev_valid_name
#define APP_WRAPPER_FOR_dev_valid_name
FUNCTION_WRAPPER(dev_valid_name, (const char *name), {
    kern_printk("dev_valid_name is invoked.\n");
    PRE_WRAPPER_FUNC(name);
    bool ret = dev_valid_name(name);
    POST_WRAPPER_FUNC(name);
    kern_printk("dev_valid_name returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_get_queue
#define APP_WRAPPER_FOR_blk_get_queue
#endif
 
#ifndef APP_WRAPPER_FOR_blk_get_queue
#define APP_WRAPPER_FOR_blk_get_queue
FUNCTION_WRAPPER(blk_get_queue, (struct request_queue *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_get_queue is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    bool ret = blk_get_queue(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("blk_get_queue returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_bmdma_post_internal_cmd
#define APP_WRAPPER_FOR_ata_bmdma_post_internal_cmd
#endif
 
#ifndef APP_WRAPPER_FOR_ata_bmdma_post_internal_cmd
#define APP_WRAPPER_FOR_ata_bmdma_post_internal_cmd
FUNCTION_WRAPPER_VOID(ata_bmdma_post_internal_cmd, (struct ata_queued_cmd *qc), {
    WRAP_RECURSIVE(qc);
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
    kern_printk("ata_bmdma_post_internal_cmd is invoked.\n");
    PRE_WRAPPER_FUNC(qc);
    ata_bmdma_post_internal_cmd(qc);
    POST_WRAPPER_FUNC(qc);
    kern_printk("ata_bmdma_post_internal_cmd returned.\n");
    TRACES_IF_WATCHPOINT(qc);
    SCAN_HEAD_FUNC(struct ata_queued_cmd)(*(TO_UNWATCHED_ADDRESS(qc)));
})
#endif


#ifndef KERN_ADDR_d_ancestor
#define APP_WRAPPER_FOR_d_ancestor
#endif
 
#ifndef APP_WRAPPER_FOR_d_ancestor
#define APP_WRAPPER_FOR_d_ancestor
FUNCTION_WRAPPER(d_ancestor, (struct dentry *_arg1, struct dentry *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("d_ancestor is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct dentry *ret = d_ancestor(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("d_ancestor returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_netlink_broadcast
#define APP_WRAPPER_FOR_netlink_broadcast
#endif
 
#ifndef APP_WRAPPER_FOR_netlink_broadcast
#define APP_WRAPPER_FOR_netlink_broadcast
FUNCTION_WRAPPER(netlink_broadcast, (struct sock *ssk, struct sk_buff *skb, __u32 portid, __u32 group, gfp_t allocation), {
    WRAP_RECURSIVE(ssk);
    TRACES_IF_WATCHPOINT(ssk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(ssk)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("netlink_broadcast is invoked.\n");
    PRE_WRAPPER_FUNC(ssk, skb, portid, group, allocation);
    int ret = netlink_broadcast(ssk, skb, portid, group, allocation);
    POST_WRAPPER_FUNC(ssk, skb, portid, group, allocation);
    kern_printk("netlink_broadcast returned.\n");
    TRACES_IF_WATCHPOINT(ssk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(ssk)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_detach_pid
#define APP_WRAPPER_FOR_detach_pid
#endif
 
#ifndef APP_WRAPPER_FOR_detach_pid
#define APP_WRAPPER_FOR_detach_pid
FUNCTION_WRAPPER_VOID(detach_pid, (struct task_struct *task, enum pid_type _arg1), {
    WRAP_RECURSIVE(task);
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    kern_printk("detach_pid is invoked.\n");
    PRE_WRAPPER_FUNC(task, _arg1);
    detach_pid(task, _arg1);
    POST_WRAPPER_FUNC(task, _arg1);
    kern_printk("detach_pid returned.\n");
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
})
#endif


#ifndef KERN_ADDR_grab_cache_page_write_begin
#define APP_WRAPPER_FOR_grab_cache_page_write_begin
#endif
 
#ifndef APP_WRAPPER_FOR_grab_cache_page_write_begin
#define APP_WRAPPER_FOR_grab_cache_page_write_begin
FUNCTION_WRAPPER(grab_cache_page_write_begin, (struct address_space *mapping, unsigned long index, unsigned int flags), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("grab_cache_page_write_begin is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, index, flags);
    struct page *ret = grab_cache_page_write_begin(mapping, index, flags);
    POST_WRAPPER_FUNC(mapping, index, flags);
    kern_printk("grab_cache_page_write_begin returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_neigh_rand_reach_time
#define APP_WRAPPER_FOR_neigh_rand_reach_time
#endif
 
#ifndef APP_WRAPPER_FOR_neigh_rand_reach_time
#define APP_WRAPPER_FOR_neigh_rand_reach_time
FUNCTION_WRAPPER(neigh_rand_reach_time, (unsigned long base), {
    kern_printk("neigh_rand_reach_time is invoked.\n");
    PRE_WRAPPER_FUNC(base);
    long ret = neigh_rand_reach_time(base);
    POST_WRAPPER_FUNC(base);
    kern_printk("neigh_rand_reach_time returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_early_irq_init
#define APP_WRAPPER_FOR_early_irq_init
#endif
 
#ifndef APP_WRAPPER_FOR_early_irq_init
#define APP_WRAPPER_FOR_early_irq_init
FUNCTION_WRAPPER(early_irq_init, (), {
    kern_printk("early_irq_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = early_irq_init();
    POST_WRAPPER_FUNC();
    kern_printk("early_irq_init returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_insert_vm_struct
#define APP_WRAPPER_FOR_insert_vm_struct
#endif
 
#ifndef APP_WRAPPER_FOR_insert_vm_struct
#define APP_WRAPPER_FOR_insert_vm_struct
FUNCTION_WRAPPER(insert_vm_struct, (struct mm_struct *_arg1, struct vm_area_struct *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("insert_vm_struct is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = insert_vm_struct(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("insert_vm_struct returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR___dquot_transfer
#define APP_WRAPPER_FOR___dquot_transfer
#endif
 
#ifndef APP_WRAPPER_FOR___dquot_transfer
#define APP_WRAPPER_FOR___dquot_transfer
FUNCTION_WRAPPER(__dquot_transfer, (struct inode *inode, struct dquot **transfer_to), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    WRAP_RECURSIVE(transfer_to);
    TRACES_IF_WATCHPOINT(transfer_to);
    SCAN_HEAD_FUNC(struct dquot *)(*(TO_UNWATCHED_ADDRESS(transfer_to)));
    kern_printk("__dquot_transfer is invoked.\n");
    PRE_WRAPPER_FUNC(inode, transfer_to);
    int ret = __dquot_transfer(inode, transfer_to);
    POST_WRAPPER_FUNC(inode, transfer_to);
    kern_printk("__dquot_transfer returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    TRACES_IF_WATCHPOINT(transfer_to);
    SCAN_HEAD_FUNC(struct dquot *)(*(TO_UNWATCHED_ADDRESS(transfer_to)));
    return ret;
})
#endif


#ifndef KERN_ADDR_raise_softirq_irqoff
#define APP_WRAPPER_FOR_raise_softirq_irqoff
#endif
 
#ifndef APP_WRAPPER_FOR_raise_softirq_irqoff
#define APP_WRAPPER_FOR_raise_softirq_irqoff
FUNCTION_WRAPPER_VOID(raise_softirq_irqoff, (unsigned int nr), {
    kern_printk("raise_softirq_irqoff is invoked.\n");
    PRE_WRAPPER_FUNC(nr);
    raise_softirq_irqoff(nr);
    POST_WRAPPER_FUNC(nr);
    kern_printk("raise_softirq_irqoff returned.\n");
})
#endif


#ifndef KERN_ADDR_ata_pci_device_suspend
#define APP_WRAPPER_FOR_ata_pci_device_suspend
#endif
 
#ifndef APP_WRAPPER_FOR_ata_pci_device_suspend
#define APP_WRAPPER_FOR_ata_pci_device_suspend
FUNCTION_WRAPPER(ata_pci_device_suspend, (struct pci_dev *pdev, pm_message_t mesg), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("ata_pci_device_suspend is invoked.\n");
    PRE_WRAPPER_FUNC(pdev, mesg);
    int ret = ata_pci_device_suspend(pdev, mesg);
    POST_WRAPPER_FUNC(pdev, mesg);
    kern_printk("ata_pci_device_suspend returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR___sw_hweight32
#define APP_WRAPPER_FOR___sw_hweight32
#endif
 
#ifndef APP_WRAPPER_FOR___sw_hweight32
#define APP_WRAPPER_FOR___sw_hweight32
FUNCTION_WRAPPER(__sw_hweight32, (unsigned int w), {
    kern_printk("__sw_hweight32 is invoked.\n");
    PRE_WRAPPER_FUNC(w);
    int ret = __sw_hweight32(w);
    POST_WRAPPER_FUNC(w);
    kern_printk("__sw_hweight32 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR__raw_spin_lock_irqsave_nested
#define APP_WRAPPER_FOR__raw_spin_lock_irqsave_nested
#endif
 
#ifndef APP_WRAPPER_FOR__raw_spin_lock_irqsave_nested
#define APP_WRAPPER_FOR__raw_spin_lock_irqsave_nested
FUNCTION_WRAPPER(_raw_spin_lock_irqsave_nested, (raw_spinlock_t *lock, int subclass), {
    kern_printk("_raw_spin_lock_irqsave_nested is invoked.\n");
    PRE_WRAPPER_FUNC(lock, subclass);
    long ret = _raw_spin_lock_irqsave_nested(lock, subclass);
    POST_WRAPPER_FUNC(lock, subclass);
    kern_printk("_raw_spin_lock_irqsave_nested returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_syscall32_setup_pages
#define APP_WRAPPER_FOR_syscall32_setup_pages
#endif
 
#ifndef APP_WRAPPER_FOR_syscall32_setup_pages
#define APP_WRAPPER_FOR_syscall32_setup_pages
FUNCTION_WRAPPER(syscall32_setup_pages, (struct linux_binprm *_arg1, int exstack), {
    kern_printk("syscall32_setup_pages is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, exstack);
    int ret = syscall32_setup_pages(_arg1, exstack);
    POST_WRAPPER_FUNC(_arg1, exstack);
    kern_printk("syscall32_setup_pages returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_free_thread_xstate
#define APP_WRAPPER_FOR_free_thread_xstate
#endif
 
#ifndef APP_WRAPPER_FOR_free_thread_xstate
#define APP_WRAPPER_FOR_free_thread_xstate
FUNCTION_WRAPPER_VOID(free_thread_xstate, (struct task_struct *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("free_thread_xstate is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    free_thread_xstate(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("free_thread_xstate returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_lowmem_reserve_ratio_sysctl_handler
#define APP_WRAPPER_FOR_lowmem_reserve_ratio_sysctl_handler
#endif
 
#ifndef APP_WRAPPER_FOR_lowmem_reserve_ratio_sysctl_handler
#define APP_WRAPPER_FOR_lowmem_reserve_ratio_sysctl_handler
FUNCTION_WRAPPER(lowmem_reserve_ratio_sysctl_handler, (struct ctl_table *_arg1, int _arg2, void *_arg3, size_t *_arg4, loff_t *_arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("lowmem_reserve_ratio_sysctl_handler is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = lowmem_reserve_ratio_sysctl_handler(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("lowmem_reserve_ratio_sysctl_handler returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_get_domain_bus_and_slot
#define APP_WRAPPER_FOR_pci_get_domain_bus_and_slot
#endif
 
#ifndef APP_WRAPPER_FOR_pci_get_domain_bus_and_slot
#define APP_WRAPPER_FOR_pci_get_domain_bus_and_slot
FUNCTION_WRAPPER(pci_get_domain_bus_and_slot, (int domain, unsigned int bus, unsigned int devfn), {
    kern_printk("pci_get_domain_bus_and_slot is invoked.\n");
    PRE_WRAPPER_FUNC(domain, bus, devfn);
    struct pci_dev *ret = pci_get_domain_bus_and_slot(domain, bus, devfn);
    POST_WRAPPER_FUNC(domain, bus, devfn);
    kern_printk("pci_get_domain_bus_and_slot returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pcibios_get_irq_routing_table
#define APP_WRAPPER_FOR_pcibios_get_irq_routing_table
#endif
 
#ifndef APP_WRAPPER_FOR_pcibios_get_irq_routing_table
#define APP_WRAPPER_FOR_pcibios_get_irq_routing_table
FUNCTION_WRAPPER(pcibios_get_irq_routing_table, (), {
    kern_printk("pcibios_get_irq_routing_table is invoked.\n");
    PRE_WRAPPER_FUNC();
    struct irq_routing_table *ret = pcibios_get_irq_routing_table();
    POST_WRAPPER_FUNC();
    kern_printk("pcibios_get_irq_routing_table returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_kobject_init_and_add
#define APP_WRAPPER_FOR_kobject_init_and_add
#endif
 
#ifndef APP_WRAPPER_FOR_kobject_init_and_add
#define APP_WRAPPER_FOR_kobject_init_and_add
FUNCTION_WRAPPER(kobject_init_and_add, (struct kobject *kobj, struct kobj_type *ktype, struct kobject *parent, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    WRAP_RECURSIVE(ktype);
    TRACES_IF_WATCHPOINT(ktype);
    SCAN_HEAD_FUNC(struct kobj_type)(*(TO_UNWATCHED_ADDRESS(ktype)));
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(parent)));
    // TODO: variadic arguments
    kern_printk("kobject_init_and_add is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, ktype, parent, fmt);
    int ret = kobject_init_and_add(kobj, ktype, parent, fmt);
    POST_WRAPPER_FUNC(kobj, ktype, parent, fmt);
    kern_printk("kobject_init_and_add returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    TRACES_IF_WATCHPOINT(ktype);
    SCAN_HEAD_FUNC(struct kobj_type)(*(TO_UNWATCHED_ADDRESS(ktype)));
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(parent)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sk_filter_release_rcu
#define APP_WRAPPER_FOR_sk_filter_release_rcu
#endif
 
#ifndef APP_WRAPPER_FOR_sk_filter_release_rcu
#define APP_WRAPPER_FOR_sk_filter_release_rcu
FUNCTION_WRAPPER_VOID(sk_filter_release_rcu, (struct callback_head *rcu), {
    WRAP_RECURSIVE(rcu);
    TRACES_IF_WATCHPOINT(rcu);
    SCAN_HEAD_FUNC(struct callback_head)(*(TO_UNWATCHED_ADDRESS(rcu)));
    kern_printk("sk_filter_release_rcu is invoked.\n");
    PRE_WRAPPER_FUNC(rcu);
    sk_filter_release_rcu(rcu);
    POST_WRAPPER_FUNC(rcu);
    kern_printk("sk_filter_release_rcu returned.\n");
    TRACES_IF_WATCHPOINT(rcu);
    SCAN_HEAD_FUNC(struct callback_head)(*(TO_UNWATCHED_ADDRESS(rcu)));
})
#endif


#ifndef KERN_ADDR_sched_rt_handler
#define APP_WRAPPER_FOR_sched_rt_handler
#endif
 
#ifndef APP_WRAPPER_FOR_sched_rt_handler
#define APP_WRAPPER_FOR_sched_rt_handler
FUNCTION_WRAPPER(sched_rt_handler, (struct ctl_table *table, int write, void *buffer, size_t *lenp, loff_t *ppos), {
    WRAP_RECURSIVE(table);
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    kern_printk("sched_rt_handler is invoked.\n");
    PRE_WRAPPER_FUNC(table, write, buffer, lenp, ppos);
    int ret = sched_rt_handler(table, write, buffer, lenp, ppos);
    POST_WRAPPER_FUNC(table, write, buffer, lenp, ppos);
    kern_printk("sched_rt_handler returned.\n");
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sync_inode_metadata
#define APP_WRAPPER_FOR_sync_inode_metadata
#endif
 
#ifndef APP_WRAPPER_FOR_sync_inode_metadata
#define APP_WRAPPER_FOR_sync_inode_metadata
FUNCTION_WRAPPER(sync_inode_metadata, (struct inode *inode, int wait), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("sync_inode_metadata is invoked.\n");
    PRE_WRAPPER_FUNC(inode, wait);
    int ret = sync_inode_metadata(inode, wait);
    POST_WRAPPER_FUNC(inode, wait);
    kern_printk("sync_inode_metadata returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mb_cache_destroy
#define APP_WRAPPER_FOR_mb_cache_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_mb_cache_destroy
#define APP_WRAPPER_FOR_mb_cache_destroy
FUNCTION_WRAPPER_VOID(mb_cache_destroy, (struct mb_cache *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mb_cache)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("mb_cache_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    mb_cache_destroy(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("mb_cache_destroy returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mb_cache)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_pcie_update_link_speed
#define APP_WRAPPER_FOR_pcie_update_link_speed
#endif
 
#ifndef APP_WRAPPER_FOR_pcie_update_link_speed
#define APP_WRAPPER_FOR_pcie_update_link_speed
FUNCTION_WRAPPER_VOID(pcie_update_link_speed, (struct pci_bus *bus, u16 link_status), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pcie_update_link_speed is invoked.\n");
    PRE_WRAPPER_FUNC(bus, link_status);
    pcie_update_link_speed(bus, link_status);
    POST_WRAPPER_FUNC(bus, link_status);
    kern_printk("pcie_update_link_speed returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
})
#endif


#ifndef KERN_ADDR_sleep_on
#define APP_WRAPPER_FOR_sleep_on
#endif
 
#ifndef APP_WRAPPER_FOR_sleep_on
#define APP_WRAPPER_FOR_sleep_on
FUNCTION_WRAPPER_VOID(sleep_on, (wait_queue_head_t *q), {
    kern_printk("sleep_on is invoked.\n");
    PRE_WRAPPER_FUNC(q);
    sleep_on(q);
    POST_WRAPPER_FUNC(q);
    kern_printk("sleep_on returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_os_map_memory
#define APP_WRAPPER_FOR_acpi_os_map_memory
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_map_memory
#define APP_WRAPPER_FOR_acpi_os_map_memory
FUNCTION_WRAPPER(acpi_os_map_memory, (acpi_physical_address where, acpi_size length), {
    kern_printk("acpi_os_map_memory is invoked.\n");
    PRE_WRAPPER_FUNC(where, length);
    void *ret = acpi_os_map_memory(where, length);
    POST_WRAPPER_FUNC(where, length);
    kern_printk("acpi_os_map_memory returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_tf_to_fis
#define APP_WRAPPER_FOR_ata_tf_to_fis
#endif
 
#ifndef APP_WRAPPER_FOR_ata_tf_to_fis
#define APP_WRAPPER_FOR_ata_tf_to_fis
FUNCTION_WRAPPER_VOID(ata_tf_to_fis, (const struct ata_taskfile *tf, u8 pmp, int is_cmd, u8 *fis), {
    kern_printk("ata_tf_to_fis is invoked.\n");
    PRE_WRAPPER_FUNC(tf, pmp, is_cmd, fis);
    ata_tf_to_fis(tf, pmp, is_cmd, fis);
    POST_WRAPPER_FUNC(tf, pmp, is_cmd, fis);
    kern_printk("ata_tf_to_fis returned.\n");
})
#endif


#ifndef KERN_ADDR___skb_warn_lro_forwarding
#define APP_WRAPPER_FOR___skb_warn_lro_forwarding
#endif
 
#ifndef APP_WRAPPER_FOR___skb_warn_lro_forwarding
#define APP_WRAPPER_FOR___skb_warn_lro_forwarding
FUNCTION_WRAPPER_VOID(__skb_warn_lro_forwarding, (const struct sk_buff *skb), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(const struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("__skb_warn_lro_forwarding is invoked.\n");
    PRE_WRAPPER_FUNC(skb);
    __skb_warn_lro_forwarding(skb);
    POST_WRAPPER_FUNC(skb);
    kern_printk("__skb_warn_lro_forwarding returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(const struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
})
#endif


#ifndef KERN_ADDR_tag_pages_for_writeback
#define APP_WRAPPER_FOR_tag_pages_for_writeback
#endif
 
#ifndef APP_WRAPPER_FOR_tag_pages_for_writeback
#define APP_WRAPPER_FOR_tag_pages_for_writeback
FUNCTION_WRAPPER_VOID(tag_pages_for_writeback, (struct address_space *mapping, unsigned long start, unsigned long end), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("tag_pages_for_writeback is invoked.\n");
    PRE_WRAPPER_FUNC(mapping, start, end);
    tag_pages_for_writeback(mapping, start, end);
    POST_WRAPPER_FUNC(mapping, start, end);
    kern_printk("tag_pages_for_writeback returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
})
#endif


#ifndef KERN_ADDR_add_disk_randomness
#define APP_WRAPPER_FOR_add_disk_randomness
#endif
 
#ifndef APP_WRAPPER_FOR_add_disk_randomness
#define APP_WRAPPER_FOR_add_disk_randomness
FUNCTION_WRAPPER_VOID(add_disk_randomness, (struct gendisk *disk), {
    WRAP_RECURSIVE(disk);
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    kern_printk("add_disk_randomness is invoked.\n");
    PRE_WRAPPER_FUNC(disk);
    add_disk_randomness(disk);
    POST_WRAPPER_FUNC(disk);
    kern_printk("add_disk_randomness returned.\n");
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
})
#endif


#ifndef KERN_ADDR_qdisc_class_hash_insert
#define APP_WRAPPER_FOR_qdisc_class_hash_insert
#endif
 
#ifndef APP_WRAPPER_FOR_qdisc_class_hash_insert
#define APP_WRAPPER_FOR_qdisc_class_hash_insert
FUNCTION_WRAPPER_VOID(qdisc_class_hash_insert, (struct Qdisc_class_hash *_arg1, struct Qdisc_class_common *_arg2), {
    kern_printk("qdisc_class_hash_insert is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    qdisc_class_hash_insert(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("qdisc_class_hash_insert returned.\n");
})
#endif


#ifndef KERN_ADDR_mempool_kfree
#define APP_WRAPPER_FOR_mempool_kfree
#endif
 
#ifndef APP_WRAPPER_FOR_mempool_kfree
#define APP_WRAPPER_FOR_mempool_kfree
FUNCTION_WRAPPER_VOID(mempool_kfree, (void *element, void *pool_data), {
    kern_printk("mempool_kfree is invoked.\n");
    PRE_WRAPPER_FUNC(element, pool_data);
    mempool_kfree(element, pool_data);
    POST_WRAPPER_FUNC(element, pool_data);
    kern_printk("mempool_kfree returned.\n");
})
#endif


#ifndef KERN_ADDR_mdio_bus_exit
#define APP_WRAPPER_FOR_mdio_bus_exit
#endif
 
#ifndef APP_WRAPPER_FOR_mdio_bus_exit
#define APP_WRAPPER_FOR_mdio_bus_exit
FUNCTION_WRAPPER_VOID(mdio_bus_exit, (), {
    kern_printk("mdio_bus_exit is invoked.\n");
    PRE_WRAPPER_FUNC();
    mdio_bus_exit();
    POST_WRAPPER_FUNC();
    kern_printk("mdio_bus_exit returned.\n");
})
#endif


#ifndef KERN_ADDR_mnt_drop_write
#define APP_WRAPPER_FOR_mnt_drop_write
#endif
 
#ifndef APP_WRAPPER_FOR_mnt_drop_write
#define APP_WRAPPER_FOR_mnt_drop_write
FUNCTION_WRAPPER_VOID(mnt_drop_write, (struct vfsmount *mnt), {
    WRAP_RECURSIVE(mnt);
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
    kern_printk("mnt_drop_write is invoked.\n");
    PRE_WRAPPER_FUNC(mnt);
    mnt_drop_write(mnt);
    POST_WRAPPER_FUNC(mnt);
    kern_printk("mnt_drop_write returned.\n");
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
})
#endif


#ifndef KERN_ADDR_mount_ns
#define APP_WRAPPER_FOR_mount_ns
#endif
 
#ifndef APP_WRAPPER_FOR_mount_ns
#define APP_WRAPPER_FOR_mount_ns
FUNCTION_WRAPPER(mount_ns, (struct file_system_type *fs_type, int flags, void *data, int (*fill_super)(struct super_block *, void *, int)), {
    WRAP_RECURSIVE(fs_type);
    TRACES_IF_WATCHPOINT(fs_type);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(fs_type)));
    WRAP_FUNCTION(fill_super);
    kern_printk("mount_ns is invoked.\n");
    PRE_WRAPPER_FUNC(fs_type, flags, data, fill_super);
    struct dentry *ret = mount_ns(fs_type, flags, data, fill_super);
    POST_WRAPPER_FUNC(fs_type, flags, data, fill_super);
    kern_printk("mount_ns returned.\n");
    TRACES_IF_WATCHPOINT(fs_type);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(fs_type)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sata_std_hardreset
#define APP_WRAPPER_FOR_sata_std_hardreset
#endif
 
#ifndef APP_WRAPPER_FOR_sata_std_hardreset
#define APP_WRAPPER_FOR_sata_std_hardreset
FUNCTION_WRAPPER(sata_std_hardreset, (struct ata_link *link, unsigned int *class_, unsigned long deadline), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    kern_printk("sata_std_hardreset is invoked.\n");
    PRE_WRAPPER_FUNC(link, class_, deadline);
    int ret = sata_std_hardreset(link, class_, deadline);
    POST_WRAPPER_FUNC(link, class_, deadline);
    kern_printk("sata_std_hardreset returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_clear_features
#define APP_WRAPPER_FOR_jbd2_journal_clear_features
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_clear_features
#define APP_WRAPPER_FOR_jbd2_journal_clear_features
FUNCTION_WRAPPER_VOID(jbd2_journal_clear_features, (journal_t *_arg1, unsigned long _arg2, unsigned long _arg3, unsigned long _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("jbd2_journal_clear_features is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    jbd2_journal_clear_features(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("jbd2_journal_clear_features returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_dm_consume_args
#define APP_WRAPPER_FOR_dm_consume_args
#endif
 
#ifndef APP_WRAPPER_FOR_dm_consume_args
#define APP_WRAPPER_FOR_dm_consume_args
FUNCTION_WRAPPER_VOID(dm_consume_args, (struct dm_arg_set *as, unsigned int num_args), {
    kern_printk("dm_consume_args is invoked.\n");
    PRE_WRAPPER_FUNC(as, num_args);
    dm_consume_args(as, num_args);
    POST_WRAPPER_FUNC(as, num_args);
    kern_printk("dm_consume_args returned.\n");
})
#endif


#ifndef KERN_ADDR_pvclock_resume
#define APP_WRAPPER_FOR_pvclock_resume
#endif
 
#ifndef APP_WRAPPER_FOR_pvclock_resume
#define APP_WRAPPER_FOR_pvclock_resume
FUNCTION_WRAPPER_VOID(pvclock_resume, (), {
    kern_printk("pvclock_resume is invoked.\n");
    PRE_WRAPPER_FUNC();
    pvclock_resume();
    POST_WRAPPER_FUNC();
    kern_printk("pvclock_resume returned.\n");
})
#endif


#ifndef KERN_ADDR_swiotlb_init_with_tbl
#define APP_WRAPPER_FOR_swiotlb_init_with_tbl
#endif
 
#ifndef APP_WRAPPER_FOR_swiotlb_init_with_tbl
#define APP_WRAPPER_FOR_swiotlb_init_with_tbl
FUNCTION_WRAPPER_VOID(swiotlb_init_with_tbl, (char *tlb, unsigned long nslabs, int verbose), {
    kern_printk("swiotlb_init_with_tbl is invoked.\n");
    PRE_WRAPPER_FUNC(tlb, nslabs, verbose);
    swiotlb_init_with_tbl(tlb, nslabs, verbose);
    POST_WRAPPER_FUNC(tlb, nslabs, verbose);
    kern_printk("swiotlb_init_with_tbl returned.\n");
})
#endif


#ifndef KERN_ADDR_proc_sched_autogroup_set_nice
#define APP_WRAPPER_FOR_proc_sched_autogroup_set_nice
#endif
 
#ifndef APP_WRAPPER_FOR_proc_sched_autogroup_set_nice
#define APP_WRAPPER_FOR_proc_sched_autogroup_set_nice
FUNCTION_WRAPPER(proc_sched_autogroup_set_nice, (struct task_struct *p, int nice), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("proc_sched_autogroup_set_nice is invoked.\n");
    PRE_WRAPPER_FUNC(p, nice);
    int ret = proc_sched_autogroup_set_nice(p, nice);
    POST_WRAPPER_FUNC(p, nice);
    kern_printk("proc_sched_autogroup_set_nice returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dst_init
#define APP_WRAPPER_FOR_dst_init
#endif
 
#ifndef APP_WRAPPER_FOR_dst_init
#define APP_WRAPPER_FOR_dst_init
FUNCTION_WRAPPER_VOID(dst_init, (), {
    kern_printk("dst_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    dst_init();
    POST_WRAPPER_FUNC();
    kern_printk("dst_init returned.\n");
})
#endif


#ifndef KERN_ADDR_compat_sys_timer_settime
#define APP_WRAPPER_FOR_compat_sys_timer_settime
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_timer_settime
#define APP_WRAPPER_FOR_compat_sys_timer_settime
FUNCTION_WRAPPER(compat_sys_timer_settime, (timer_t timer_id, int flags, struct compat_itimerspec *new_, struct compat_itimerspec *old), {
    kern_printk("compat_sys_timer_settime is invoked.\n");
    PRE_WRAPPER_FUNC(timer_id, flags, new_, old);
    long ret = compat_sys_timer_settime(timer_id, flags, new_, old);
    POST_WRAPPER_FUNC(timer_id, flags, new_, old);
    kern_printk("compat_sys_timer_settime returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_print_cfs_rq
#define APP_WRAPPER_FOR_print_cfs_rq
#endif
 
#ifndef APP_WRAPPER_FOR_print_cfs_rq
#define APP_WRAPPER_FOR_print_cfs_rq
FUNCTION_WRAPPER_VOID(print_cfs_rq, (struct seq_file *m, int cpu, struct cfs_rq *cfs_rq), {
    WRAP_RECURSIVE(m);
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
    kern_printk("print_cfs_rq is invoked.\n");
    PRE_WRAPPER_FUNC(m, cpu, cfs_rq);
    print_cfs_rq(m, cpu, cfs_rq);
    POST_WRAPPER_FUNC(m, cpu, cfs_rq);
    kern_printk("print_cfs_rq returned.\n");
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
})
#endif


#ifndef KERN_ADDR_is_early_ioremap_ptep
#define APP_WRAPPER_FOR_is_early_ioremap_ptep
#endif
 
#ifndef APP_WRAPPER_FOR_is_early_ioremap_ptep
#define APP_WRAPPER_FOR_is_early_ioremap_ptep
FUNCTION_WRAPPER(is_early_ioremap_ptep, (pte_t *ptep), {
    kern_printk("is_early_ioremap_ptep is invoked.\n");
    PRE_WRAPPER_FUNC(ptep);
    bool ret = is_early_ioremap_ptep(ptep);
    POST_WRAPPER_FUNC(ptep);
    kern_printk("is_early_ioremap_ptep returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_numa_set_node
#define APP_WRAPPER_FOR_numa_set_node
#endif
 
#ifndef APP_WRAPPER_FOR_numa_set_node
#define APP_WRAPPER_FOR_numa_set_node
FUNCTION_WRAPPER_VOID(numa_set_node, (int cpu, int node), {
    kern_printk("numa_set_node is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, node);
    numa_set_node(cpu, node);
    POST_WRAPPER_FUNC(cpu, node);
    kern_printk("numa_set_node returned.\n");
})
#endif


#ifndef KERN_ADDR_irq_reserve_irqs
#define APP_WRAPPER_FOR_irq_reserve_irqs
#endif
 
#ifndef APP_WRAPPER_FOR_irq_reserve_irqs
#define APP_WRAPPER_FOR_irq_reserve_irqs
FUNCTION_WRAPPER(irq_reserve_irqs, (unsigned int from, unsigned int cnt), {
    kern_printk("irq_reserve_irqs is invoked.\n");
    PRE_WRAPPER_FUNC(from, cnt);
    int ret = irq_reserve_irqs(from, cnt);
    POST_WRAPPER_FUNC(from, cnt);
    kern_printk("irq_reserve_irqs returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_try_to_del_timer_sync
#define APP_WRAPPER_FOR_try_to_del_timer_sync
#endif
 
#ifndef APP_WRAPPER_FOR_try_to_del_timer_sync
#define APP_WRAPPER_FOR_try_to_del_timer_sync
FUNCTION_WRAPPER(try_to_del_timer_sync, (struct timer_list *timer), {
    WRAP_RECURSIVE(timer);
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(timer)));
    kern_printk("try_to_del_timer_sync is invoked.\n");
    PRE_WRAPPER_FUNC(timer);
    int ret = try_to_del_timer_sync(timer);
    POST_WRAPPER_FUNC(timer);
    kern_printk("try_to_del_timer_sync returned.\n");
    TRACES_IF_WATCHPOINT(timer);
    SCAN_HEAD_FUNC(struct timer_list)(*(TO_UNWATCHED_ADDRESS(timer)));
    return ret;
})
#endif


#ifndef KERN_ADDR_arch_remove_reservations
#define APP_WRAPPER_FOR_arch_remove_reservations
#endif
 
#ifndef APP_WRAPPER_FOR_arch_remove_reservations
#define APP_WRAPPER_FOR_arch_remove_reservations
FUNCTION_WRAPPER_VOID(arch_remove_reservations, (struct resource *avail), {
    kern_printk("arch_remove_reservations is invoked.\n");
    PRE_WRAPPER_FUNC(avail);
    arch_remove_reservations(avail);
    POST_WRAPPER_FUNC(avail);
    kern_printk("arch_remove_reservations returned.\n");
})
#endif


#ifndef KERN_ADDR_gen_replace_estimator
#define APP_WRAPPER_FOR_gen_replace_estimator
#endif
 
#ifndef APP_WRAPPER_FOR_gen_replace_estimator
#define APP_WRAPPER_FOR_gen_replace_estimator
FUNCTION_WRAPPER(gen_replace_estimator, (struct gnet_stats_basic_packed *bstats, struct gnet_stats_rate_est *rate_est, spinlock_t *stats_lock, struct nlattr *opt), {
    kern_printk("gen_replace_estimator is invoked.\n");
    PRE_WRAPPER_FUNC(bstats, rate_est, stats_lock, opt);
    int ret = gen_replace_estimator(bstats, rate_est, stats_lock, opt);
    POST_WRAPPER_FUNC(bstats, rate_est, stats_lock, opt);
    kern_printk("gen_replace_estimator returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___skb_recv_datagram
#define APP_WRAPPER_FOR___skb_recv_datagram
#endif
 
#ifndef APP_WRAPPER_FOR___skb_recv_datagram
#define APP_WRAPPER_FOR___skb_recv_datagram
FUNCTION_WRAPPER(__skb_recv_datagram, (struct sock *sk, unsigned int flags, int *peeked, int *off, int *err), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("__skb_recv_datagram is invoked.\n");
    PRE_WRAPPER_FUNC(sk, flags, peeked, off, err);
    struct sk_buff *ret = __skb_recv_datagram(sk, flags, peeked, off, err);
    POST_WRAPPER_FUNC(sk, flags, peeked, off, err);
    kern_printk("__skb_recv_datagram returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_device_init_wakeup
#define APP_WRAPPER_FOR_device_init_wakeup
#endif
 
#ifndef APP_WRAPPER_FOR_device_init_wakeup
#define APP_WRAPPER_FOR_device_init_wakeup
FUNCTION_WRAPPER(device_init_wakeup, (struct device *dev, bool val), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("device_init_wakeup is invoked.\n");
    PRE_WRAPPER_FUNC(dev, val);
    int ret = device_init_wakeup(dev, val);
    POST_WRAPPER_FUNC(dev, val);
    kern_printk("device_init_wakeup returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_no_sendpage
#define APP_WRAPPER_FOR_sock_no_sendpage
#endif
 
#ifndef APP_WRAPPER_FOR_sock_no_sendpage
#define APP_WRAPPER_FOR_sock_no_sendpage
FUNCTION_WRAPPER(sock_no_sendpage, (struct socket *sock, struct page *page, int offset, size_t size, int flags), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("sock_no_sendpage is invoked.\n");
    PRE_WRAPPER_FUNC(sock, page, offset, size, flags);
    ssize_t ret = sock_no_sendpage(sock, page, offset, size, flags);
    POST_WRAPPER_FUNC(sock, page, offset, size, flags);
    kern_printk("sock_no_sendpage returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vzalloc
#define APP_WRAPPER_FOR_vzalloc
#endif
 
#ifndef APP_WRAPPER_FOR_vzalloc
#define APP_WRAPPER_FOR_vzalloc
FUNCTION_WRAPPER(vzalloc, (unsigned long size), {
    kern_printk("vzalloc is invoked.\n");
    PRE_WRAPPER_FUNC(size);
    void *ret = vzalloc(size);
    POST_WRAPPER_FUNC(size);
    kern_printk("vzalloc returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_do_sys_settimeofday
#define APP_WRAPPER_FOR_do_sys_settimeofday
#endif
 
#ifndef APP_WRAPPER_FOR_do_sys_settimeofday
#define APP_WRAPPER_FOR_do_sys_settimeofday
FUNCTION_WRAPPER(do_sys_settimeofday, (const struct timespec *tv, const struct timezone *tz), {
    kern_printk("do_sys_settimeofday is invoked.\n");
    PRE_WRAPPER_FUNC(tv, tz);
    int ret = do_sys_settimeofday(tv, tz);
    POST_WRAPPER_FUNC(tv, tz);
    kern_printk("do_sys_settimeofday returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR__raw_read_lock_bh
#define APP_WRAPPER_FOR__raw_read_lock_bh
#endif
 
#ifndef APP_WRAPPER_FOR__raw_read_lock_bh
#define APP_WRAPPER_FOR__raw_read_lock_bh
FUNCTION_WRAPPER_VOID(_raw_read_lock_bh, (rwlock_t *lock), {
    kern_printk("_raw_read_lock_bh is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    _raw_read_lock_bh(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("_raw_read_lock_bh returned.\n");
})
#endif


#ifndef KERN_ADDR_srcu_init_notifier_head
#define APP_WRAPPER_FOR_srcu_init_notifier_head
#endif
 
#ifndef APP_WRAPPER_FOR_srcu_init_notifier_head
#define APP_WRAPPER_FOR_srcu_init_notifier_head
FUNCTION_WRAPPER_VOID(srcu_init_notifier_head, (struct srcu_notifier_head *nh), {
    WRAP_RECURSIVE(nh);
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct srcu_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    kern_printk("srcu_init_notifier_head is invoked.\n");
    PRE_WRAPPER_FUNC(nh);
    srcu_init_notifier_head(nh);
    POST_WRAPPER_FUNC(nh);
    kern_printk("srcu_init_notifier_head returned.\n");
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct srcu_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
})
#endif


#ifndef KERN_ADDR_dev_set_alias
#define APP_WRAPPER_FOR_dev_set_alias
#endif
 
#ifndef APP_WRAPPER_FOR_dev_set_alias
#define APP_WRAPPER_FOR_dev_set_alias
FUNCTION_WRAPPER(dev_set_alias, (struct net_device *_arg1, const char *_arg2, size_t _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("dev_set_alias is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = dev_set_alias(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("dev_set_alias returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cap_capable
#define APP_WRAPPER_FOR_cap_capable
#endif
 
#ifndef APP_WRAPPER_FOR_cap_capable
#define APP_WRAPPER_FOR_cap_capable
FUNCTION_WRAPPER(cap_capable, (const struct cred *cred, struct user_namespace *ns, int cap, int audit), {
    WRAP_RECURSIVE(cred);
    TRACES_IF_WATCHPOINT(cred);
    SCAN_HEAD_FUNC(const struct cred)(*(TO_UNWATCHED_ADDRESS(cred)));
    kern_printk("cap_capable is invoked.\n");
    PRE_WRAPPER_FUNC(cred, ns, cap, audit);
    int ret = cap_capable(cred, ns, cap, audit);
    POST_WRAPPER_FUNC(cred, ns, cap, audit);
    kern_printk("cap_capable returned.\n");
    TRACES_IF_WATCHPOINT(cred);
    SCAN_HEAD_FUNC(const struct cred)(*(TO_UNWATCHED_ADDRESS(cred)));
    return ret;
})
#endif


#ifndef KERN_ADDR_update_e820
#define APP_WRAPPER_FOR_update_e820
#endif
 
#ifndef APP_WRAPPER_FOR_update_e820
#define APP_WRAPPER_FOR_update_e820
FUNCTION_WRAPPER_VOID(update_e820, (), {
    kern_printk("update_e820 is invoked.\n");
    PRE_WRAPPER_FUNC();
    update_e820();
    POST_WRAPPER_FUNC();
    kern_printk("update_e820 returned.\n");
})
#endif


#ifndef KERN_ADDR_netlink_ack
#define APP_WRAPPER_FOR_netlink_ack
#endif
 
#ifndef APP_WRAPPER_FOR_netlink_ack
#define APP_WRAPPER_FOR_netlink_ack
FUNCTION_WRAPPER_VOID(netlink_ack, (struct sk_buff *in_skb, struct nlmsghdr *nlh, int err), {
    WRAP_RECURSIVE(in_skb);
    TRACES_IF_WATCHPOINT(in_skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(in_skb)));
    kern_printk("netlink_ack is invoked.\n");
    PRE_WRAPPER_FUNC(in_skb, nlh, err);
    netlink_ack(in_skb, nlh, err);
    POST_WRAPPER_FUNC(in_skb, nlh, err);
    kern_printk("netlink_ack returned.\n");
    TRACES_IF_WATCHPOINT(in_skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(in_skb)));
})
#endif


#ifndef KERN_ADDR_ata_cable_80wire
#define APP_WRAPPER_FOR_ata_cable_80wire
#endif
 
#ifndef APP_WRAPPER_FOR_ata_cable_80wire
#define APP_WRAPPER_FOR_ata_cable_80wire
FUNCTION_WRAPPER(ata_cable_80wire, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_cable_80wire is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    int ret = ata_cable_80wire(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_cable_80wire returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blkdev_get_by_path
#define APP_WRAPPER_FOR_blkdev_get_by_path
#endif
 
#ifndef APP_WRAPPER_FOR_blkdev_get_by_path
#define APP_WRAPPER_FOR_blkdev_get_by_path
FUNCTION_WRAPPER(blkdev_get_by_path, (const char *path, fmode_t mode, void *holder), {
    kern_printk("blkdev_get_by_path is invoked.\n");
    PRE_WRAPPER_FUNC(path, mode, holder);
    struct block_device *ret = blkdev_get_by_path(path, mode, holder);
    POST_WRAPPER_FUNC(path, mode, holder);
    kern_printk("blkdev_get_by_path returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_disable_msi
#define APP_WRAPPER_FOR_pci_disable_msi
#endif
 
#ifndef APP_WRAPPER_FOR_pci_disable_msi
#define APP_WRAPPER_FOR_pci_disable_msi
FUNCTION_WRAPPER_VOID(pci_disable_msi, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_disable_msi is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pci_disable_msi(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_disable_msi returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_print_hex_dump
#define APP_WRAPPER_FOR_print_hex_dump
#endif
 
#ifndef APP_WRAPPER_FOR_print_hex_dump
#define APP_WRAPPER_FOR_print_hex_dump
FUNCTION_WRAPPER_VOID(print_hex_dump, (const char *level, const char *prefix_str, int prefix_type, int rowsize, int groupsize, const void *buf, size_t len, bool ascii), {
    kern_printk("print_hex_dump is invoked.\n");
    PRE_WRAPPER_FUNC(level, prefix_str, prefix_type, rowsize, groupsize, buf, len, ascii);
    print_hex_dump(level, prefix_str, prefix_type, rowsize, groupsize, buf, len, ascii);
    POST_WRAPPER_FUNC(level, prefix_str, prefix_type, rowsize, groupsize, buf, len, ascii);
    kern_printk("print_hex_dump returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_os_get_next_filename
#define APP_WRAPPER_FOR_acpi_os_get_next_filename
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_get_next_filename
#define APP_WRAPPER_FOR_acpi_os_get_next_filename
FUNCTION_WRAPPER(acpi_os_get_next_filename, (void *dir_handle), {
    kern_printk("acpi_os_get_next_filename is invoked.\n");
    PRE_WRAPPER_FUNC(dir_handle);
    char *ret = acpi_os_get_next_filename(dir_handle);
    POST_WRAPPER_FUNC(dir_handle);
    kern_printk("acpi_os_get_next_filename returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_lock_sock_fast
#define APP_WRAPPER_FOR_lock_sock_fast
#endif
 
#ifndef APP_WRAPPER_FOR_lock_sock_fast
#define APP_WRAPPER_FOR_lock_sock_fast
FUNCTION_WRAPPER(lock_sock_fast, (struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("lock_sock_fast is invoked.\n");
    PRE_WRAPPER_FUNC(sk);
    bool ret = lock_sock_fast(sk);
    POST_WRAPPER_FUNC(sk);
    kern_printk("lock_sock_fast returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mdiobus_unregister
#define APP_WRAPPER_FOR_mdiobus_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_mdiobus_unregister
#define APP_WRAPPER_FOR_mdiobus_unregister
FUNCTION_WRAPPER_VOID(mdiobus_unregister, (struct mii_bus *bus), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct mii_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("mdiobus_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(bus);
    mdiobus_unregister(bus);
    POST_WRAPPER_FUNC(bus);
    kern_printk("mdiobus_unregister returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct mii_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
})
#endif


#ifndef KERN_ADDR___devm_request_region
#define APP_WRAPPER_FOR___devm_request_region
#endif
 
#ifndef APP_WRAPPER_FOR___devm_request_region
#define APP_WRAPPER_FOR___devm_request_region
FUNCTION_WRAPPER(__devm_request_region, (struct device *dev, struct resource *parent, resource_size_t start, resource_size_t n, const char *name), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("__devm_request_region is invoked.\n");
    PRE_WRAPPER_FUNC(dev, parent, start, n, name);
    struct resource *ret = __devm_request_region(dev, parent, start, n, name);
    POST_WRAPPER_FUNC(dev, parent, start, n, name);
    kern_printk("__devm_request_region returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_alarm_setitimer
#define APP_WRAPPER_FOR_alarm_setitimer
#endif
 
#ifndef APP_WRAPPER_FOR_alarm_setitimer
#define APP_WRAPPER_FOR_alarm_setitimer
FUNCTION_WRAPPER(alarm_setitimer, (unsigned int seconds), {
    kern_printk("alarm_setitimer is invoked.\n");
    PRE_WRAPPER_FUNC(seconds);
    int ret = alarm_setitimer(seconds);
    POST_WRAPPER_FUNC(seconds);
    kern_printk("alarm_setitimer returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_remove_address_space_handler
#define APP_WRAPPER_FOR_acpi_remove_address_space_handler
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_remove_address_space_handler
#define APP_WRAPPER_FOR_acpi_remove_address_space_handler
FUNCTION_WRAPPER(acpi_remove_address_space_handler, (acpi_handle device, acpi_adr_space_type space_id, acpi_adr_space_handler handler), {
    WRAP_FUNCTION(handler);
    kern_printk("acpi_remove_address_space_handler is invoked.\n");
    PRE_WRAPPER_FUNC(device, space_id, handler);
    acpi_status ret = acpi_remove_address_space_handler(device, space_id, handler);
    POST_WRAPPER_FUNC(device, space_id, handler);
    kern_printk("acpi_remove_address_space_handler returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_clocksource_mark_unstable
#define APP_WRAPPER_FOR_clocksource_mark_unstable
#endif
 
#ifndef APP_WRAPPER_FOR_clocksource_mark_unstable
#define APP_WRAPPER_FOR_clocksource_mark_unstable
FUNCTION_WRAPPER_VOID(clocksource_mark_unstable, (struct clocksource *cs), {
    WRAP_RECURSIVE(cs);
    TRACES_IF_WATCHPOINT(cs);
    SCAN_HEAD_FUNC(struct clocksource)(*(TO_UNWATCHED_ADDRESS(cs)));
    kern_printk("clocksource_mark_unstable is invoked.\n");
    PRE_WRAPPER_FUNC(cs);
    clocksource_mark_unstable(cs);
    POST_WRAPPER_FUNC(cs);
    kern_printk("clocksource_mark_unstable returned.\n");
    TRACES_IF_WATCHPOINT(cs);
    SCAN_HEAD_FUNC(struct clocksource)(*(TO_UNWATCHED_ADDRESS(cs)));
})
#endif


#ifndef KERN_ADDR_acpi_pic_sci_set_trigger
#define APP_WRAPPER_FOR_acpi_pic_sci_set_trigger
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_pic_sci_set_trigger
#define APP_WRAPPER_FOR_acpi_pic_sci_set_trigger
FUNCTION_WRAPPER_VOID(acpi_pic_sci_set_trigger, (unsigned int _arg1, u16 _arg2), {
    kern_printk("acpi_pic_sci_set_trigger is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    acpi_pic_sci_set_trigger(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("acpi_pic_sci_set_trigger returned.\n");
})
#endif


#ifndef KERN_ADDR_netdev_boot_base
#define APP_WRAPPER_FOR_netdev_boot_base
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_boot_base
#define APP_WRAPPER_FOR_netdev_boot_base
FUNCTION_WRAPPER(netdev_boot_base, (const char *prefix, int unit), {
    kern_printk("netdev_boot_base is invoked.\n");
    PRE_WRAPPER_FUNC(prefix, unit);
    long ret = netdev_boot_base(prefix, unit);
    POST_WRAPPER_FUNC(prefix, unit);
    kern_printk("netdev_boot_base returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_strncasecmp
#define APP_WRAPPER_FOR_strncasecmp
#endif
 
#ifndef APP_WRAPPER_FOR_strncasecmp
#define APP_WRAPPER_FOR_strncasecmp
FUNCTION_WRAPPER(strncasecmp, (const char *s1, const char *s2, size_t n), {
    kern_printk("strncasecmp is invoked.\n");
    PRE_WRAPPER_FUNC(s1, s2, n);
    int ret = strncasecmp(s1, s2, n);
    POST_WRAPPER_FUNC(s1, s2, n);
    kern_printk("strncasecmp returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_locks_remove_flock
#define APP_WRAPPER_FOR_locks_remove_flock
#endif
 
#ifndef APP_WRAPPER_FOR_locks_remove_flock
#define APP_WRAPPER_FOR_locks_remove_flock
FUNCTION_WRAPPER_VOID(locks_remove_flock, (struct file *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("locks_remove_flock is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    locks_remove_flock(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("locks_remove_flock returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_simple_link
#define APP_WRAPPER_FOR_simple_link
#endif
 
#ifndef APP_WRAPPER_FOR_simple_link
#define APP_WRAPPER_FOR_simple_link
FUNCTION_WRAPPER(simple_link, (struct dentry *_arg1, struct inode *_arg2, struct dentry *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("simple_link is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = simple_link(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("simple_link returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kthread_park
#define APP_WRAPPER_FOR_kthread_park
#endif
 
#ifndef APP_WRAPPER_FOR_kthread_park
#define APP_WRAPPER_FOR_kthread_park
FUNCTION_WRAPPER(kthread_park, (struct task_struct *k), {
    WRAP_RECURSIVE(k);
    TRACES_IF_WATCHPOINT(k);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(k)));
    kern_printk("kthread_park is invoked.\n");
    PRE_WRAPPER_FUNC(k);
    int ret = kthread_park(k);
    POST_WRAPPER_FUNC(k);
    kern_printk("kthread_park returned.\n");
    TRACES_IF_WATCHPOINT(k);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(k)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_install_interface
#define APP_WRAPPER_FOR_acpi_install_interface
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_install_interface
#define APP_WRAPPER_FOR_acpi_install_interface
FUNCTION_WRAPPER(acpi_install_interface, (acpi_string interface_name), {
    kern_printk("acpi_install_interface is invoked.\n");
    PRE_WRAPPER_FUNC(interface_name);
    acpi_status ret = acpi_install_interface(interface_name);
    POST_WRAPPER_FUNC(interface_name);
    kern_printk("acpi_install_interface returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_set_irq_type
#define APP_WRAPPER_FOR_irq_set_irq_type
#endif
 
#ifndef APP_WRAPPER_FOR_irq_set_irq_type
#define APP_WRAPPER_FOR_irq_set_irq_type
FUNCTION_WRAPPER(irq_set_irq_type, (unsigned int irq, unsigned int type), {
    kern_printk("irq_set_irq_type is invoked.\n");
    PRE_WRAPPER_FUNC(irq, type);
    int ret = irq_set_irq_type(irq, type);
    POST_WRAPPER_FUNC(irq, type);
    kern_printk("irq_set_irq_type returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_scan_root_bus
#define APP_WRAPPER_FOR_pci_scan_root_bus
#endif
 
#ifndef APP_WRAPPER_FOR_pci_scan_root_bus
#define APP_WRAPPER_FOR_pci_scan_root_bus
FUNCTION_WRAPPER(pci_scan_root_bus, (struct device *parent, int bus, struct pci_ops *ops, void *sysdata, struct list_head *resources), {
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(parent)));
    WRAP_RECURSIVE(ops);
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct pci_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    kern_printk("pci_scan_root_bus is invoked.\n");
    PRE_WRAPPER_FUNC(parent, bus, ops, sysdata, resources);
    struct pci_bus *ret = pci_scan_root_bus(parent, bus, ops, sysdata, resources);
    POST_WRAPPER_FUNC(parent, bus, ops, sysdata, resources);
    kern_printk("pci_scan_root_bus returned.\n");
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(parent)));
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct pci_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_simple_open
#define APP_WRAPPER_FOR_simple_open
#endif
 
#ifndef APP_WRAPPER_FOR_simple_open
#define APP_WRAPPER_FOR_simple_open
FUNCTION_WRAPPER(simple_open, (struct inode *inode, struct file *file), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("simple_open is invoked.\n");
    PRE_WRAPPER_FUNC(inode, file);
    int ret = simple_open(inode, file);
    POST_WRAPPER_FUNC(inode, file);
    kern_printk("simple_open returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_hugepage_madvise
#define APP_WRAPPER_FOR_hugepage_madvise
#endif
 
#ifndef APP_WRAPPER_FOR_hugepage_madvise
#define APP_WRAPPER_FOR_hugepage_madvise
FUNCTION_WRAPPER(hugepage_madvise, (struct vm_area_struct *vma, unsigned long *vm_flags, int advice), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("hugepage_madvise is invoked.\n");
    PRE_WRAPPER_FUNC(vma, vm_flags, advice);
    int ret = hugepage_madvise(vma, vm_flags, advice);
    POST_WRAPPER_FUNC(vma, vm_flags, advice);
    kern_printk("hugepage_madvise returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_netfilter_init
#define APP_WRAPPER_FOR_netfilter_init
#endif
 
#ifndef APP_WRAPPER_FOR_netfilter_init
#define APP_WRAPPER_FOR_netfilter_init
FUNCTION_WRAPPER_VOID(netfilter_init, (), {
    kern_printk("netfilter_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    netfilter_init();
    POST_WRAPPER_FUNC();
    kern_printk("netfilter_init returned.\n");
})
#endif


#ifndef KERN_ADDR_mnt_unpin
#define APP_WRAPPER_FOR_mnt_unpin
#endif
 
#ifndef APP_WRAPPER_FOR_mnt_unpin
#define APP_WRAPPER_FOR_mnt_unpin
FUNCTION_WRAPPER_VOID(mnt_unpin, (struct vfsmount *mnt), {
    WRAP_RECURSIVE(mnt);
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
    kern_printk("mnt_unpin is invoked.\n");
    PRE_WRAPPER_FUNC(mnt);
    mnt_unpin(mnt);
    POST_WRAPPER_FUNC(mnt);
    kern_printk("mnt_unpin returned.\n");
    TRACES_IF_WATCHPOINT(mnt);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(mnt)));
})
#endif


#ifndef KERN_ADDR_mount_single
#define APP_WRAPPER_FOR_mount_single
#endif
 
#ifndef APP_WRAPPER_FOR_mount_single
#define APP_WRAPPER_FOR_mount_single
FUNCTION_WRAPPER(mount_single, (struct file_system_type *fs_type, int flags, void *data, int (*fill_super)(struct super_block *, void *, int)), {
    WRAP_RECURSIVE(fs_type);
    TRACES_IF_WATCHPOINT(fs_type);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(fs_type)));
    WRAP_FUNCTION(fill_super);
    kern_printk("mount_single is invoked.\n");
    PRE_WRAPPER_FUNC(fs_type, flags, data, fill_super);
    struct dentry *ret = mount_single(fs_type, flags, data, fill_super);
    POST_WRAPPER_FUNC(fs_type, flags, data, fill_super);
    kern_printk("mount_single returned.\n");
    TRACES_IF_WATCHPOINT(fs_type);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(fs_type)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_pnp_register_driver
#define APP_WRAPPER_FOR_pnp_register_driver
#endif
 
#ifndef APP_WRAPPER_FOR_pnp_register_driver
#define APP_WRAPPER_FOR_pnp_register_driver
FUNCTION_WRAPPER(pnp_register_driver, (struct pnp_driver *drv), {
    WRAP_RECURSIVE(drv);
    TRACES_IF_WATCHPOINT(drv);
    SCAN_HEAD_FUNC(struct pnp_driver)(*(TO_UNWATCHED_ADDRESS(drv)));
    kern_printk("pnp_register_driver is invoked.\n");
    PRE_WRAPPER_FUNC(drv);
    int ret = pnp_register_driver(drv);
    POST_WRAPPER_FUNC(drv);
    kern_printk("pnp_register_driver returned.\n");
    TRACES_IF_WATCHPOINT(drv);
    SCAN_HEAD_FUNC(struct pnp_driver)(*(TO_UNWATCHED_ADDRESS(drv)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_queue_make_request
#define APP_WRAPPER_FOR_blk_queue_make_request
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_make_request
#define APP_WRAPPER_FOR_blk_queue_make_request
FUNCTION_WRAPPER_VOID(blk_queue_make_request, (struct request_queue *_arg1, make_request_fn *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_FUNCTION(_arg2);
    kern_printk("blk_queue_make_request is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    blk_queue_make_request(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_queue_make_request returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_acpi_numa_processor_affinity_init
#define APP_WRAPPER_FOR_acpi_numa_processor_affinity_init
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_numa_processor_affinity_init
#define APP_WRAPPER_FOR_acpi_numa_processor_affinity_init
FUNCTION_WRAPPER_VOID(acpi_numa_processor_affinity_init, (struct acpi_srat_cpu_affinity *pa), {
    kern_printk("acpi_numa_processor_affinity_init is invoked.\n");
    PRE_WRAPPER_FUNC(pa);
    acpi_numa_processor_affinity_init(pa);
    POST_WRAPPER_FUNC(pa);
    kern_printk("acpi_numa_processor_affinity_init returned.\n");
})
#endif


#ifndef KERN_ADDR_nommu_shrink_inode_mappings
#define APP_WRAPPER_FOR_nommu_shrink_inode_mappings
#endif
 
#ifndef APP_WRAPPER_FOR_nommu_shrink_inode_mappings
#define APP_WRAPPER_FOR_nommu_shrink_inode_mappings
FUNCTION_WRAPPER(nommu_shrink_inode_mappings, (struct inode *_arg1, size_t _arg2, size_t _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("nommu_shrink_inode_mappings is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = nommu_shrink_inode_mappings(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("nommu_shrink_inode_mappings returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_populate_extra_pmd
#define APP_WRAPPER_FOR_populate_extra_pmd
#endif
 
#ifndef APP_WRAPPER_FOR_populate_extra_pmd
#define APP_WRAPPER_FOR_populate_extra_pmd
FUNCTION_WRAPPER(populate_extra_pmd, (unsigned long vaddr), {
    kern_printk("populate_extra_pmd is invoked.\n");
    PRE_WRAPPER_FUNC(vaddr);
    pmd_t *ret = populate_extra_pmd(vaddr);
    POST_WRAPPER_FUNC(vaddr);
    kern_printk("populate_extra_pmd returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_srcu_notifier_call_chain
#define APP_WRAPPER_FOR_srcu_notifier_call_chain
#endif
 
#ifndef APP_WRAPPER_FOR_srcu_notifier_call_chain
#define APP_WRAPPER_FOR_srcu_notifier_call_chain
FUNCTION_WRAPPER(srcu_notifier_call_chain, (struct srcu_notifier_head *nh, unsigned long val, void *v), {
    WRAP_RECURSIVE(nh);
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct srcu_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    kern_printk("srcu_notifier_call_chain is invoked.\n");
    PRE_WRAPPER_FUNC(nh, val, v);
    int ret = srcu_notifier_call_chain(nh, val, v);
    POST_WRAPPER_FUNC(nh, val, v);
    kern_printk("srcu_notifier_call_chain returned.\n");
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct srcu_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    return ret;
})
#endif


#ifndef KERN_ADDR___elv_add_request
#define APP_WRAPPER_FOR___elv_add_request
#endif
 
#ifndef APP_WRAPPER_FOR___elv_add_request
#define APP_WRAPPER_FOR___elv_add_request
FUNCTION_WRAPPER_VOID(__elv_add_request, (struct request_queue *_arg1, struct request *_arg2, int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("__elv_add_request is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    __elv_add_request(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("__elv_add_request returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_page_is_ram
#define APP_WRAPPER_FOR_page_is_ram
#endif
 
#ifndef APP_WRAPPER_FOR_page_is_ram
#define APP_WRAPPER_FOR_page_is_ram
FUNCTION_WRAPPER(page_is_ram, (unsigned long pfn), {
    kern_printk("page_is_ram is invoked.\n");
    PRE_WRAPPER_FUNC(pfn);
    int ret = page_is_ram(pfn);
    POST_WRAPPER_FUNC(pfn);
    kern_printk("page_is_ram returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_param_set_ushort
#define APP_WRAPPER_FOR_param_set_ushort
#endif
 
#ifndef APP_WRAPPER_FOR_param_set_ushort
#define APP_WRAPPER_FOR_param_set_ushort
FUNCTION_WRAPPER(param_set_ushort, (const char *val, const struct kernel_param *kp), {
    WRAP_RECURSIVE(kp);
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    kern_printk("param_set_ushort is invoked.\n");
    PRE_WRAPPER_FUNC(val, kp);
    int ret = param_set_ushort(val, kp);
    POST_WRAPPER_FUNC(val, kp);
    kern_printk("param_set_ushort returned.\n");
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_default_mpc_apic_id
#define APP_WRAPPER_FOR_default_mpc_apic_id
#endif
 
#ifndef APP_WRAPPER_FOR_default_mpc_apic_id
#define APP_WRAPPER_FOR_default_mpc_apic_id
FUNCTION_WRAPPER(default_mpc_apic_id, (struct mpc_cpu *m), {
    kern_printk("default_mpc_apic_id is invoked.\n");
    PRE_WRAPPER_FUNC(m);
    int ret = default_mpc_apic_id(m);
    POST_WRAPPER_FUNC(m);
    kern_printk("default_mpc_apic_id returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_min_free_kbytes_sysctl_handler
#define APP_WRAPPER_FOR_min_free_kbytes_sysctl_handler
#endif
 
#ifndef APP_WRAPPER_FOR_min_free_kbytes_sysctl_handler
#define APP_WRAPPER_FOR_min_free_kbytes_sysctl_handler
FUNCTION_WRAPPER(min_free_kbytes_sysctl_handler, (struct ctl_table *_arg1, int _arg2, void *_arg3, size_t *_arg4, loff_t *_arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("min_free_kbytes_sysctl_handler is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = min_free_kbytes_sysctl_handler(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("min_free_kbytes_sysctl_handler returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_paravirt_leave_lazy_mmu
#define APP_WRAPPER_FOR_paravirt_leave_lazy_mmu
#endif
 
#ifndef APP_WRAPPER_FOR_paravirt_leave_lazy_mmu
#define APP_WRAPPER_FOR_paravirt_leave_lazy_mmu
FUNCTION_WRAPPER_VOID(paravirt_leave_lazy_mmu, (), {
    kern_printk("paravirt_leave_lazy_mmu is invoked.\n");
    PRE_WRAPPER_FUNC();
    paravirt_leave_lazy_mmu();
    POST_WRAPPER_FUNC();
    kern_printk("paravirt_leave_lazy_mmu returned.\n");
})
#endif


#ifndef KERN_ADDR_seq_write
#define APP_WRAPPER_FOR_seq_write
#endif
 
#ifndef APP_WRAPPER_FOR_seq_write
#define APP_WRAPPER_FOR_seq_write
FUNCTION_WRAPPER(seq_write, (struct seq_file *seq, const void *data, size_t len), {
    WRAP_RECURSIVE(seq);
    TRACES_IF_WATCHPOINT(seq);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(seq)));
    kern_printk("seq_write is invoked.\n");
    PRE_WRAPPER_FUNC(seq, data, len);
    int ret = seq_write(seq, data, len);
    POST_WRAPPER_FUNC(seq, data, len);
    kern_printk("seq_write returned.\n");
    TRACES_IF_WATCHPOINT(seq);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(seq)));
    return ret;
})
#endif


#ifndef KERN_ADDR_radix_tree_insert
#define APP_WRAPPER_FOR_radix_tree_insert
#endif
 
#ifndef APP_WRAPPER_FOR_radix_tree_insert
#define APP_WRAPPER_FOR_radix_tree_insert
FUNCTION_WRAPPER(radix_tree_insert, (struct radix_tree_root *_arg1, unsigned long _arg2, void *_arg3), {
    kern_printk("radix_tree_insert is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = radix_tree_insert(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("radix_tree_insert returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_xfer_mode2mask
#define APP_WRAPPER_FOR_ata_xfer_mode2mask
#endif
 
#ifndef APP_WRAPPER_FOR_ata_xfer_mode2mask
#define APP_WRAPPER_FOR_ata_xfer_mode2mask
FUNCTION_WRAPPER(ata_xfer_mode2mask, (u8 xfer_mode), {
    kern_printk("ata_xfer_mode2mask is invoked.\n");
    PRE_WRAPPER_FUNC(xfer_mode);
    long ret = ata_xfer_mode2mask(xfer_mode);
    POST_WRAPPER_FUNC(xfer_mode);
    kern_printk("ata_xfer_mode2mask returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_strchr
#define APP_WRAPPER_FOR_strchr
#endif
 
#ifndef APP_WRAPPER_FOR_strchr
#define APP_WRAPPER_FOR_strchr
FUNCTION_WRAPPER(strchr, (const char *_arg1, int _arg2), {
    kern_printk("strchr is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    char *ret = strchr(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("strchr returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sg_free_table
#define APP_WRAPPER_FOR_sg_free_table
#endif
 
#ifndef APP_WRAPPER_FOR_sg_free_table
#define APP_WRAPPER_FOR_sg_free_table
FUNCTION_WRAPPER_VOID(sg_free_table, (struct sg_table *_arg1), {
    kern_printk("sg_free_table is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    sg_free_table(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("sg_free_table returned.\n");
})
#endif


#ifndef KERN_ADDR_vlan_ioctl_set
#define APP_WRAPPER_FOR_vlan_ioctl_set
#endif
 
#ifndef APP_WRAPPER_FOR_vlan_ioctl_set
#define APP_WRAPPER_FOR_vlan_ioctl_set
FUNCTION_WRAPPER_VOID(vlan_ioctl_set, (int (*hook)(struct net *, void *)), {
    WRAP_FUNCTION(hook);
    kern_printk("vlan_ioctl_set is invoked.\n");
    PRE_WRAPPER_FUNC(hook);
    vlan_ioctl_set(hook);
    POST_WRAPPER_FUNC(hook);
    kern_printk("vlan_ioctl_set returned.\n");
})
#endif


#ifndef KERN_ADDR_rtnetlink_send
#define APP_WRAPPER_FOR_rtnetlink_send
#endif
 
#ifndef APP_WRAPPER_FOR_rtnetlink_send
#define APP_WRAPPER_FOR_rtnetlink_send
FUNCTION_WRAPPER(rtnetlink_send, (struct sk_buff *skb, struct net *net, u32 pid, u32 group, int echo), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    kern_printk("rtnetlink_send is invoked.\n");
    PRE_WRAPPER_FUNC(skb, net, pid, group, echo);
    int ret = rtnetlink_send(skb, net, pid, group, echo);
    POST_WRAPPER_FUNC(skb, net, pid, group, echo);
    kern_printk("rtnetlink_send returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_rescan_bus_bridge_resize
#define APP_WRAPPER_FOR_pci_rescan_bus_bridge_resize
#endif
 
#ifndef APP_WRAPPER_FOR_pci_rescan_bus_bridge_resize
#define APP_WRAPPER_FOR_pci_rescan_bus_bridge_resize
FUNCTION_WRAPPER(pci_rescan_bus_bridge_resize, (struct pci_dev *bridge), {
    WRAP_RECURSIVE(bridge);
    TRACES_IF_WATCHPOINT(bridge);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(bridge)));
    kern_printk("pci_rescan_bus_bridge_resize is invoked.\n");
    PRE_WRAPPER_FUNC(bridge);
    int ret = pci_rescan_bus_bridge_resize(bridge);
    POST_WRAPPER_FUNC(bridge);
    kern_printk("pci_rescan_bus_bridge_resize returned.\n");
    TRACES_IF_WATCHPOINT(bridge);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(bridge)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_signalfd4
#define APP_WRAPPER_FOR_compat_sys_signalfd4
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_signalfd4
#define APP_WRAPPER_FOR_compat_sys_signalfd4
FUNCTION_WRAPPER(compat_sys_signalfd4, (int ufd, const compat_sigset_t *sigmask, compat_size_t sigsetsize, int flags), {
    kern_printk("compat_sys_signalfd4 is invoked.\n");
    PRE_WRAPPER_FUNC(ufd, sigmask, sigsetsize, flags);
    long ret = compat_sys_signalfd4(ufd, sigmask, sigsetsize, flags);
    POST_WRAPPER_FUNC(ufd, sigmask, sigsetsize, flags);
    kern_printk("compat_sys_signalfd4 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_dev_resource_ext_address_space
#define APP_WRAPPER_FOR_acpi_dev_resource_ext_address_space
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_dev_resource_ext_address_space
#define APP_WRAPPER_FOR_acpi_dev_resource_ext_address_space
FUNCTION_WRAPPER(acpi_dev_resource_ext_address_space, (struct acpi_resource *ares, struct resource *res), {
    kern_printk("acpi_dev_resource_ext_address_space is invoked.\n");
    PRE_WRAPPER_FUNC(ares, res);
    bool ret = acpi_dev_resource_ext_address_space(ares, res);
    POST_WRAPPER_FUNC(ares, res);
    kern_printk("acpi_dev_resource_ext_address_space returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_release_selected_regions
#define APP_WRAPPER_FOR_pci_release_selected_regions
#endif
 
#ifndef APP_WRAPPER_FOR_pci_release_selected_regions
#define APP_WRAPPER_FOR_pci_release_selected_regions
FUNCTION_WRAPPER_VOID(pci_release_selected_regions, (struct pci_dev *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("pci_release_selected_regions is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    pci_release_selected_regions(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("pci_release_selected_regions returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_jbd2_journal_refile_buffer
#define APP_WRAPPER_FOR_jbd2_journal_refile_buffer
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_refile_buffer
#define APP_WRAPPER_FOR_jbd2_journal_refile_buffer
FUNCTION_WRAPPER_VOID(jbd2_journal_refile_buffer, (journal_t *_arg1, struct journal_head *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("jbd2_journal_refile_buffer is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    jbd2_journal_refile_buffer(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("jbd2_journal_refile_buffer returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_f_delown
#define APP_WRAPPER_FOR_f_delown
#endif
 
#ifndef APP_WRAPPER_FOR_f_delown
#define APP_WRAPPER_FOR_f_delown
FUNCTION_WRAPPER_VOID(f_delown, (struct file *filp), {
    WRAP_RECURSIVE(filp);
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    kern_printk("f_delown is invoked.\n");
    PRE_WRAPPER_FUNC(filp);
    f_delown(filp);
    POST_WRAPPER_FUNC(filp);
    kern_printk("f_delown returned.\n");
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
})
#endif


#ifndef KERN_ADDR_kstrtouint
#define APP_WRAPPER_FOR_kstrtouint
#endif
 
#ifndef APP_WRAPPER_FOR_kstrtouint
#define APP_WRAPPER_FOR_kstrtouint
FUNCTION_WRAPPER(kstrtouint, (const char *s, unsigned int base, unsigned int *res), {
    kern_printk("kstrtouint is invoked.\n");
    PRE_WRAPPER_FUNC(s, base, res);
    int ret = kstrtouint(s, base, res);
    POST_WRAPPER_FUNC(s, base, res);
    kern_printk("kstrtouint returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_dev_classify
#define APP_WRAPPER_FOR_ata_dev_classify
#endif
 
#ifndef APP_WRAPPER_FOR_ata_dev_classify
#define APP_WRAPPER_FOR_ata_dev_classify
FUNCTION_WRAPPER(ata_dev_classify, (const struct ata_taskfile *tf), {
    kern_printk("ata_dev_classify is invoked.\n");
    PRE_WRAPPER_FUNC(tf);
    int ret = ata_dev_classify(tf);
    POST_WRAPPER_FUNC(tf);
    kern_printk("ata_dev_classify returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___page_file_index
#define APP_WRAPPER_FOR___page_file_index
#endif
 
#ifndef APP_WRAPPER_FOR___page_file_index
#define APP_WRAPPER_FOR___page_file_index
FUNCTION_WRAPPER(__page_file_index, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("__page_file_index is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    long ret = __page_file_index(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("__page_file_index returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_early_pfn_in_nid
#define APP_WRAPPER_FOR_early_pfn_in_nid
#endif
 
#ifndef APP_WRAPPER_FOR_early_pfn_in_nid
#define APP_WRAPPER_FOR_early_pfn_in_nid
FUNCTION_WRAPPER(early_pfn_in_nid, (unsigned long pfn, int nid), {
    kern_printk("early_pfn_in_nid is invoked.\n");
    PRE_WRAPPER_FUNC(pfn, nid);
    bool ret = early_pfn_in_nid(pfn, nid);
    POST_WRAPPER_FUNC(pfn, nid);
    kern_printk("early_pfn_in_nid returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_create_irq_nr
#define APP_WRAPPER_FOR_create_irq_nr
#endif
 
#ifndef APP_WRAPPER_FOR_create_irq_nr
#define APP_WRAPPER_FOR_create_irq_nr
FUNCTION_WRAPPER(create_irq_nr, (unsigned int irq_want, int node), {
    kern_printk("create_irq_nr is invoked.\n");
    PRE_WRAPPER_FUNC(irq_want, node);
    int ret = create_irq_nr(irq_want, node);
    POST_WRAPPER_FUNC(irq_want, node);
    kern_printk("create_irq_nr returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sata_link_debounce
#define APP_WRAPPER_FOR_sata_link_debounce
#endif
 
#ifndef APP_WRAPPER_FOR_sata_link_debounce
#define APP_WRAPPER_FOR_sata_link_debounce
FUNCTION_WRAPPER(sata_link_debounce, (struct ata_link *link, unsigned const long *params, unsigned long deadline), {
    WRAP_RECURSIVE(link);
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    kern_printk("sata_link_debounce is invoked.\n");
    PRE_WRAPPER_FUNC(link, params, deadline);
    int ret = sata_link_debounce(link, params, deadline);
    POST_WRAPPER_FUNC(link, params, deadline);
    kern_printk("sata_link_debounce returned.\n");
    TRACES_IF_WATCHPOINT(link);
    SCAN_HEAD_FUNC(struct ata_link)(*(TO_UNWATCHED_ADDRESS(link)));
    return ret;
})
#endif


#ifndef KERN_ADDR_eth_change_mtu
#define APP_WRAPPER_FOR_eth_change_mtu
#endif
 
#ifndef APP_WRAPPER_FOR_eth_change_mtu
#define APP_WRAPPER_FOR_eth_change_mtu
FUNCTION_WRAPPER(eth_change_mtu, (struct net_device *dev, int new_mtu), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("eth_change_mtu is invoked.\n");
    PRE_WRAPPER_FUNC(dev, new_mtu);
    int ret = eth_change_mtu(dev, new_mtu);
    POST_WRAPPER_FUNC(dev, new_mtu);
    kern_printk("eth_change_mtu returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_session_of_pgrp
#define APP_WRAPPER_FOR_session_of_pgrp
#endif
 
#ifndef APP_WRAPPER_FOR_session_of_pgrp
#define APP_WRAPPER_FOR_session_of_pgrp
FUNCTION_WRAPPER(session_of_pgrp, (struct pid *pgrp), {
    WRAP_RECURSIVE(pgrp);
    TRACES_IF_WATCHPOINT(pgrp);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pgrp)));
    kern_printk("session_of_pgrp is invoked.\n");
    PRE_WRAPPER_FUNC(pgrp);
    struct pid *ret = session_of_pgrp(pgrp);
    POST_WRAPPER_FUNC(pgrp);
    kern_printk("session_of_pgrp returned.\n");
    TRACES_IF_WATCHPOINT(pgrp);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pgrp)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_attach_data
#define APP_WRAPPER_FOR_acpi_attach_data
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_attach_data
#define APP_WRAPPER_FOR_acpi_attach_data
FUNCTION_WRAPPER(acpi_attach_data, (acpi_handle object, acpi_object_handler handler, void *data), {
    WRAP_FUNCTION(handler);
    kern_printk("acpi_attach_data is invoked.\n");
    PRE_WRAPPER_FUNC(object, handler, data);
    acpi_status ret = acpi_attach_data(object, handler, data);
    POST_WRAPPER_FUNC(object, handler, data);
    kern_printk("acpi_attach_data returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ioread8
#define APP_WRAPPER_FOR_ioread8
#endif
 
#ifndef APP_WRAPPER_FOR_ioread8
#define APP_WRAPPER_FOR_ioread8
FUNCTION_WRAPPER(ioread8, (void *_arg1), {
    kern_printk("ioread8 is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = ioread8(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("ioread8 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_initialize_objects
#define APP_WRAPPER_FOR_acpi_initialize_objects
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_initialize_objects
#define APP_WRAPPER_FOR_acpi_initialize_objects
FUNCTION_WRAPPER(acpi_initialize_objects, (u32 flags), {
    kern_printk("acpi_initialize_objects is invoked.\n");
    PRE_WRAPPER_FUNC(flags);
    acpi_status ret = acpi_initialize_objects(flags);
    POST_WRAPPER_FUNC(flags);
    kern_printk("acpi_initialize_objects returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_bus_register_notifier
#define APP_WRAPPER_FOR_bus_register_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_bus_register_notifier
#define APP_WRAPPER_FOR_bus_register_notifier
FUNCTION_WRAPPER(bus_register_notifier, (struct bus_type *bus, struct notifier_block *nb), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    WRAP_RECURSIVE(nb);
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    kern_printk("bus_register_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(bus, nb);
    int ret = bus_register_notifier(bus, nb);
    POST_WRAPPER_FUNC(bus, nb);
    kern_printk("bus_register_notifier returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(bus)));
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_enable_ltr
#define APP_WRAPPER_FOR_pci_enable_ltr
#endif
 
#ifndef APP_WRAPPER_FOR_pci_enable_ltr
#define APP_WRAPPER_FOR_pci_enable_ltr
FUNCTION_WRAPPER(pci_enable_ltr, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_enable_ltr is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pci_enable_ltr(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_enable_ltr returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_strnlen_user
#define APP_WRAPPER_FOR_strnlen_user
#endif
 
#ifndef APP_WRAPPER_FOR_strnlen_user
#define APP_WRAPPER_FOR_strnlen_user
FUNCTION_WRAPPER(strnlen_user, (const char *str, long n), {
    kern_printk("strnlen_user is invoked.\n");
    PRE_WRAPPER_FUNC(str, n);
    long ret = strnlen_user(str, n);
    POST_WRAPPER_FUNC(str, n);
    kern_printk("strnlen_user returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_devm_iounmap
#define APP_WRAPPER_FOR_devm_iounmap
#endif
 
#ifndef APP_WRAPPER_FOR_devm_iounmap
#define APP_WRAPPER_FOR_devm_iounmap
FUNCTION_WRAPPER_VOID(devm_iounmap, (struct device *dev, void *addr), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("devm_iounmap is invoked.\n");
    PRE_WRAPPER_FUNC(dev, addr);
    devm_iounmap(dev, addr);
    POST_WRAPPER_FUNC(dev, addr);
    kern_printk("devm_iounmap returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR___bad_ndelay
#define APP_WRAPPER_FOR___bad_ndelay
#endif
 
#ifndef APP_WRAPPER_FOR___bad_ndelay
#define APP_WRAPPER_FOR___bad_ndelay
FUNCTION_WRAPPER_VOID(__bad_ndelay, (), {
    kern_printk("__bad_ndelay is invoked.\n");
    PRE_WRAPPER_FUNC();
    __bad_ndelay();
    POST_WRAPPER_FUNC();
    kern_printk("__bad_ndelay returned.\n");
})
#endif


#ifndef KERN_ADDR_bdi_register_dev
#define APP_WRAPPER_FOR_bdi_register_dev
#endif
 
#ifndef APP_WRAPPER_FOR_bdi_register_dev
#define APP_WRAPPER_FOR_bdi_register_dev
FUNCTION_WRAPPER(bdi_register_dev, (struct backing_dev_info *bdi, dev_t dev), {
    WRAP_RECURSIVE(bdi);
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
    kern_printk("bdi_register_dev is invoked.\n");
    PRE_WRAPPER_FUNC(bdi, dev);
    int ret = bdi_register_dev(bdi, dev);
    POST_WRAPPER_FUNC(bdi, dev);
    kern_printk("bdi_register_dev returned.\n");
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_add_offload
#define APP_WRAPPER_FOR_dev_add_offload
#endif
 
#ifndef APP_WRAPPER_FOR_dev_add_offload
#define APP_WRAPPER_FOR_dev_add_offload
FUNCTION_WRAPPER_VOID(dev_add_offload, (struct packet_offload *po), {
    WRAP_RECURSIVE(po);
    TRACES_IF_WATCHPOINT(po);
    SCAN_HEAD_FUNC(struct packet_offload)(*(TO_UNWATCHED_ADDRESS(po)));
    kern_printk("dev_add_offload is invoked.\n");
    PRE_WRAPPER_FUNC(po);
    dev_add_offload(po);
    POST_WRAPPER_FUNC(po);
    kern_printk("dev_add_offload returned.\n");
    TRACES_IF_WATCHPOINT(po);
    SCAN_HEAD_FUNC(struct packet_offload)(*(TO_UNWATCHED_ADDRESS(po)));
})
#endif


#ifndef KERN_ADDR_smp_store_boot_cpu_info
#define APP_WRAPPER_FOR_smp_store_boot_cpu_info
#endif
 
#ifndef APP_WRAPPER_FOR_smp_store_boot_cpu_info
#define APP_WRAPPER_FOR_smp_store_boot_cpu_info
FUNCTION_WRAPPER_VOID(smp_store_boot_cpu_info, (), {
    kern_printk("smp_store_boot_cpu_info is invoked.\n");
    PRE_WRAPPER_FUNC();
    smp_store_boot_cpu_info();
    POST_WRAPPER_FUNC();
    kern_printk("smp_store_boot_cpu_info returned.\n");
})
#endif


#ifndef KERN_ADDR_netdev_resync_ops
#define APP_WRAPPER_FOR_netdev_resync_ops
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_resync_ops
#define APP_WRAPPER_FOR_netdev_resync_ops
FUNCTION_WRAPPER_VOID(netdev_resync_ops, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("netdev_resync_ops is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    netdev_resync_ops(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("netdev_resync_ops returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_blk_rq_map_kern
#define APP_WRAPPER_FOR_blk_rq_map_kern
#endif
 
#ifndef APP_WRAPPER_FOR_blk_rq_map_kern
#define APP_WRAPPER_FOR_blk_rq_map_kern
FUNCTION_WRAPPER(blk_rq_map_kern, (struct request_queue *_arg1, struct request *_arg2, void *_arg3, unsigned int _arg4, gfp_t _arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("blk_rq_map_kern is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = blk_rq_map_kern(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("blk_rq_map_kern returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_param_set_bint
#define APP_WRAPPER_FOR_param_set_bint
#endif
 
#ifndef APP_WRAPPER_FOR_param_set_bint
#define APP_WRAPPER_FOR_param_set_bint
FUNCTION_WRAPPER(param_set_bint, (const char *val, const struct kernel_param *kp), {
    WRAP_RECURSIVE(kp);
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    kern_printk("param_set_bint is invoked.\n");
    PRE_WRAPPER_FUNC(val, kp);
    int ret = param_set_bint(val, kp);
    POST_WRAPPER_FUNC(val, kp);
    kern_printk("param_set_bint returned.\n");
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_register_cdrom
#define APP_WRAPPER_FOR_register_cdrom
#endif
 
#ifndef APP_WRAPPER_FOR_register_cdrom
#define APP_WRAPPER_FOR_register_cdrom
FUNCTION_WRAPPER(register_cdrom, (struct cdrom_device_info *cdi), {
    WRAP_RECURSIVE(cdi);
    TRACES_IF_WATCHPOINT(cdi);
    SCAN_HEAD_FUNC(struct cdrom_device_info)(*(TO_UNWATCHED_ADDRESS(cdi)));
    kern_printk("register_cdrom is invoked.\n");
    PRE_WRAPPER_FUNC(cdi);
    int ret = register_cdrom(cdi);
    POST_WRAPPER_FUNC(cdi);
    kern_printk("register_cdrom returned.\n");
    TRACES_IF_WATCHPOINT(cdi);
    SCAN_HEAD_FUNC(struct cdrom_device_info)(*(TO_UNWATCHED_ADDRESS(cdi)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vm_insert_mixed
#define APP_WRAPPER_FOR_vm_insert_mixed
#endif
 
#ifndef APP_WRAPPER_FOR_vm_insert_mixed
#define APP_WRAPPER_FOR_vm_insert_mixed
FUNCTION_WRAPPER(vm_insert_mixed, (struct vm_area_struct *vma, unsigned long addr, unsigned long pfn), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("vm_insert_mixed is invoked.\n");
    PRE_WRAPPER_FUNC(vma, addr, pfn);
    int ret = vm_insert_mixed(vma, addr, pfn);
    POST_WRAPPER_FUNC(vma, addr, pfn);
    kern_printk("vm_insert_mixed returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_check_region
#define APP_WRAPPER_FOR_acpi_check_region
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_check_region
#define APP_WRAPPER_FOR_acpi_check_region
FUNCTION_WRAPPER(acpi_check_region, (resource_size_t start, resource_size_t n, const char *name), {
    kern_printk("acpi_check_region is invoked.\n");
    PRE_WRAPPER_FUNC(start, n, name);
    int ret = acpi_check_region(start, n, name);
    POST_WRAPPER_FUNC(start, n, name);
    kern_printk("acpi_check_region returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_radix_tree_gang_lookup_tag_slot
#define APP_WRAPPER_FOR_radix_tree_gang_lookup_tag_slot
#endif
 
#ifndef APP_WRAPPER_FOR_radix_tree_gang_lookup_tag_slot
#define APP_WRAPPER_FOR_radix_tree_gang_lookup_tag_slot
FUNCTION_WRAPPER(radix_tree_gang_lookup_tag_slot, (struct radix_tree_root *root, void ***results, unsigned long first_index, unsigned int max_items, unsigned int tag), {
    kern_printk("radix_tree_gang_lookup_tag_slot is invoked.\n");
    PRE_WRAPPER_FUNC(root, results, first_index, max_items, tag);
    int ret = radix_tree_gang_lookup_tag_slot(root, results, first_index, max_items, tag);
    POST_WRAPPER_FUNC(root, results, first_index, max_items, tag);
    kern_printk("radix_tree_gang_lookup_tag_slot returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_unregister_module_notifier
#define APP_WRAPPER_FOR_unregister_module_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_module_notifier
#define APP_WRAPPER_FOR_unregister_module_notifier
FUNCTION_WRAPPER(unregister_module_notifier, (struct notifier_block *nb), {
    WRAP_RECURSIVE(nb);
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    kern_printk("unregister_module_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(nb);
    int ret = unregister_module_notifier(nb);
    POST_WRAPPER_FUNC(nb);
    kern_printk("unregister_module_notifier returned.\n");
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dio_end_io
#define APP_WRAPPER_FOR_dio_end_io
#endif
 
#ifndef APP_WRAPPER_FOR_dio_end_io
#define APP_WRAPPER_FOR_dio_end_io
FUNCTION_WRAPPER_VOID(dio_end_io, (struct bio *bio, int error), {
    WRAP_RECURSIVE(bio);
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
    kern_printk("dio_end_io is invoked.\n");
    PRE_WRAPPER_FUNC(bio, error);
    dio_end_io(bio, error);
    POST_WRAPPER_FUNC(bio, error);
    kern_printk("dio_end_io returned.\n");
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
})
#endif


#ifndef KERN_ADDR_mm_take_all_locks
#define APP_WRAPPER_FOR_mm_take_all_locks
#endif
 
#ifndef APP_WRAPPER_FOR_mm_take_all_locks
#define APP_WRAPPER_FOR_mm_take_all_locks
FUNCTION_WRAPPER(mm_take_all_locks, (struct mm_struct *mm), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    kern_printk("mm_take_all_locks is invoked.\n");
    PRE_WRAPPER_FUNC(mm);
    int ret = mm_take_all_locks(mm);
    POST_WRAPPER_FUNC(mm);
    kern_printk("mm_take_all_locks returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    return ret;
})
#endif


#ifndef KERN_ADDR___jbd2_journal_clean_checkpoint_list
#define APP_WRAPPER_FOR___jbd2_journal_clean_checkpoint_list
#endif
 
#ifndef APP_WRAPPER_FOR___jbd2_journal_clean_checkpoint_list
#define APP_WRAPPER_FOR___jbd2_journal_clean_checkpoint_list
FUNCTION_WRAPPER(__jbd2_journal_clean_checkpoint_list, (journal_t *journal), {
    WRAP_RECURSIVE(journal);
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    kern_printk("__jbd2_journal_clean_checkpoint_list is invoked.\n");
    PRE_WRAPPER_FUNC(journal);
    int ret = __jbd2_journal_clean_checkpoint_list(journal);
    POST_WRAPPER_FUNC(journal);
    kern_printk("__jbd2_journal_clean_checkpoint_list returned.\n");
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cpu_idle
#define APP_WRAPPER_FOR_cpu_idle
#endif
 
#ifndef APP_WRAPPER_FOR_cpu_idle
#define APP_WRAPPER_FOR_cpu_idle
FUNCTION_WRAPPER_VOID(cpu_idle, (), {
    kern_printk("cpu_idle is invoked.\n");
    PRE_WRAPPER_FUNC();
    cpu_idle();
    POST_WRAPPER_FUNC();
    kern_printk("cpu_idle returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_msi_off
#define APP_WRAPPER_FOR_pci_msi_off
#endif
 
#ifndef APP_WRAPPER_FOR_pci_msi_off
#define APP_WRAPPER_FOR_pci_msi_off
FUNCTION_WRAPPER_VOID(pci_msi_off, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_msi_off is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pci_msi_off(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_msi_off returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_call_function_interrupt
#define APP_WRAPPER_FOR_call_function_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_call_function_interrupt
#define APP_WRAPPER_FOR_call_function_interrupt
FUNCTION_WRAPPER_VOID(call_function_interrupt, (), {
    kern_printk("call_function_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC();
    call_function_interrupt();
    POST_WRAPPER_FUNC();
    kern_printk("call_function_interrupt returned.\n");
})
#endif


#ifndef KERN_ADDR_account_page_redirty
#define APP_WRAPPER_FOR_account_page_redirty
#endif
 
#ifndef APP_WRAPPER_FOR_account_page_redirty
#define APP_WRAPPER_FOR_account_page_redirty
FUNCTION_WRAPPER_VOID(account_page_redirty, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("account_page_redirty is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    account_page_redirty(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("account_page_redirty returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR_acpi_irq_stats_init
#define APP_WRAPPER_FOR_acpi_irq_stats_init
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_irq_stats_init
#define APP_WRAPPER_FOR_acpi_irq_stats_init
FUNCTION_WRAPPER_VOID(acpi_irq_stats_init, (), {
    kern_printk("acpi_irq_stats_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_irq_stats_init();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_irq_stats_init returned.\n");
})
#endif


#ifndef KERN_ADDR_zap_page_range
#define APP_WRAPPER_FOR_zap_page_range
#endif
 
#ifndef APP_WRAPPER_FOR_zap_page_range
#define APP_WRAPPER_FOR_zap_page_range
FUNCTION_WRAPPER_VOID(zap_page_range, (struct vm_area_struct *vma, unsigned long address, unsigned long size, struct zap_details *_arg1), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct zap_details)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("zap_page_range is invoked.\n");
    PRE_WRAPPER_FUNC(vma, address, size, _arg1);
    zap_page_range(vma, address, size, _arg1);
    POST_WRAPPER_FUNC(vma, address, size, _arg1);
    kern_printk("zap_page_range returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct zap_details)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_add_taint
#define APP_WRAPPER_FOR_add_taint
#endif
 
#ifndef APP_WRAPPER_FOR_add_taint
#define APP_WRAPPER_FOR_add_taint
FUNCTION_WRAPPER_VOID(add_taint, (unsigned int flag), {
    kern_printk("add_taint is invoked.\n");
    PRE_WRAPPER_FUNC(flag);
    add_taint(flag);
    POST_WRAPPER_FUNC(flag);
    kern_printk("add_taint returned.\n");
})
#endif


#ifndef KERN_ADDR_ksize
#define APP_WRAPPER_FOR_ksize
#endif
 
#ifndef APP_WRAPPER_FOR_ksize
#define APP_WRAPPER_FOR_ksize
FUNCTION_WRAPPER(ksize, (const void *_arg1), {
    kern_printk("ksize is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    size_t ret = ksize(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("ksize returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_arch_add_memory
#define APP_WRAPPER_FOR_arch_add_memory
#endif
 
#ifndef APP_WRAPPER_FOR_arch_add_memory
#define APP_WRAPPER_FOR_arch_add_memory
FUNCTION_WRAPPER(arch_add_memory, (int nid, u64 start, u64 size), {
    kern_printk("arch_add_memory is invoked.\n");
    PRE_WRAPPER_FUNC(nid, start, size);
    int ret = arch_add_memory(nid, start, size);
    POST_WRAPPER_FUNC(nid, start, size);
    kern_printk("arch_add_memory returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_get_mp_bus_to_node
#define APP_WRAPPER_FOR_get_mp_bus_to_node
#endif
 
#ifndef APP_WRAPPER_FOR_get_mp_bus_to_node
#define APP_WRAPPER_FOR_get_mp_bus_to_node
FUNCTION_WRAPPER(get_mp_bus_to_node, (int busnum), {
    kern_printk("get_mp_bus_to_node is invoked.\n");
    PRE_WRAPPER_FUNC(busnum);
    int ret = get_mp_bus_to_node(busnum);
    POST_WRAPPER_FUNC(busnum);
    kern_printk("get_mp_bus_to_node returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_setup_per_cpu_pageset
#define APP_WRAPPER_FOR_setup_per_cpu_pageset
#endif
 
#ifndef APP_WRAPPER_FOR_setup_per_cpu_pageset
#define APP_WRAPPER_FOR_setup_per_cpu_pageset
FUNCTION_WRAPPER_VOID(setup_per_cpu_pageset, (), {
    kern_printk("setup_per_cpu_pageset is invoked.\n");
    PRE_WRAPPER_FUNC();
    setup_per_cpu_pageset();
    POST_WRAPPER_FUNC();
    kern_printk("setup_per_cpu_pageset returned.\n");
})
#endif


#ifndef KERN_ADDR_release_resource
#define APP_WRAPPER_FOR_release_resource
#endif
 
#ifndef APP_WRAPPER_FOR_release_resource
#define APP_WRAPPER_FOR_release_resource
FUNCTION_WRAPPER(release_resource, (struct resource *new_), {
    kern_printk("release_resource is invoked.\n");
    PRE_WRAPPER_FUNC(new_);
    int ret = release_resource(new_);
    POST_WRAPPER_FUNC(new_);
    kern_printk("release_resource returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___group_send_sig_info
#define APP_WRAPPER_FOR___group_send_sig_info
#endif
 
#ifndef APP_WRAPPER_FOR___group_send_sig_info
#define APP_WRAPPER_FOR___group_send_sig_info
FUNCTION_WRAPPER(__group_send_sig_info, (int _arg1, struct siginfo *_arg2, struct task_struct *_arg3), {
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("__group_send_sig_info is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = __group_send_sig_info(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("__group_send_sig_info returned.\n");
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_icmpv6_cleanup
#define APP_WRAPPER_FOR_icmpv6_cleanup
#endif
 
#ifndef APP_WRAPPER_FOR_icmpv6_cleanup
#define APP_WRAPPER_FOR_icmpv6_cleanup
FUNCTION_WRAPPER_VOID(icmpv6_cleanup, (), {
    kern_printk("icmpv6_cleanup is invoked.\n");
    PRE_WRAPPER_FUNC();
    icmpv6_cleanup();
    POST_WRAPPER_FUNC();
    kern_printk("icmpv6_cleanup returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_video_display_switch_support
#define APP_WRAPPER_FOR_acpi_video_display_switch_support
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_video_display_switch_support
#define APP_WRAPPER_FOR_acpi_video_display_switch_support
FUNCTION_WRAPPER(acpi_video_display_switch_support, (), {
    kern_printk("acpi_video_display_switch_support is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = acpi_video_display_switch_support();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_video_display_switch_support returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_reallocate_root_table
#define APP_WRAPPER_FOR_acpi_reallocate_root_table
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_reallocate_root_table
#define APP_WRAPPER_FOR_acpi_reallocate_root_table
FUNCTION_WRAPPER(acpi_reallocate_root_table, (), {
    kern_printk("acpi_reallocate_root_table is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_status ret = acpi_reallocate_root_table();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_reallocate_root_table returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_request_acs
#define APP_WRAPPER_FOR_pci_request_acs
#endif
 
#ifndef APP_WRAPPER_FOR_pci_request_acs
#define APP_WRAPPER_FOR_pci_request_acs
FUNCTION_WRAPPER_VOID(pci_request_acs, (), {
    kern_printk("pci_request_acs is invoked.\n");
    PRE_WRAPPER_FUNC();
    pci_request_acs();
    POST_WRAPPER_FUNC();
    kern_printk("pci_request_acs returned.\n");
})
#endif


#ifndef KERN_ADDR___wait_on_bit
#define APP_WRAPPER_FOR___wait_on_bit
#endif
 
#ifndef APP_WRAPPER_FOR___wait_on_bit
#define APP_WRAPPER_FOR___wait_on_bit
FUNCTION_WRAPPER(__wait_on_bit, (wait_queue_head_t *_arg1, struct wait_bit_queue *_arg2, int (*_arg3)(void *), unsigned int _arg4), {
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct wait_bit_queue)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_FUNCTION(_arg3);
    kern_printk("__wait_on_bit is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = __wait_on_bit(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("__wait_on_bit returned.\n");
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct wait_bit_queue)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_verify_local_APIC
#define APP_WRAPPER_FOR_verify_local_APIC
#endif
 
#ifndef APP_WRAPPER_FOR_verify_local_APIC
#define APP_WRAPPER_FOR_verify_local_APIC
FUNCTION_WRAPPER(verify_local_APIC, (), {
    kern_printk("verify_local_APIC is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = verify_local_APIC();
    POST_WRAPPER_FUNC();
    kern_printk("verify_local_APIC returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_integrity_merge_rq
#define APP_WRAPPER_FOR_blk_integrity_merge_rq
#endif
 
#ifndef APP_WRAPPER_FOR_blk_integrity_merge_rq
#define APP_WRAPPER_FOR_blk_integrity_merge_rq
FUNCTION_WRAPPER(blk_integrity_merge_rq, (struct request_queue *_arg1, struct request *_arg2, struct request *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("blk_integrity_merge_rq is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = blk_integrity_merge_rq(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("blk_integrity_merge_rq returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_put_timespec
#define APP_WRAPPER_FOR_compat_put_timespec
#endif
 
#ifndef APP_WRAPPER_FOR_compat_put_timespec
#define APP_WRAPPER_FOR_compat_put_timespec
FUNCTION_WRAPPER(compat_put_timespec, (const struct timespec *_arg1, void *_arg2), {
    kern_printk("compat_put_timespec is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = compat_put_timespec(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("compat_put_timespec returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_bio_get_nr_vecs
#define APP_WRAPPER_FOR_bio_get_nr_vecs
#endif
 
#ifndef APP_WRAPPER_FOR_bio_get_nr_vecs
#define APP_WRAPPER_FOR_bio_get_nr_vecs
FUNCTION_WRAPPER(bio_get_nr_vecs, (struct block_device *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("bio_get_nr_vecs is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = bio_get_nr_vecs(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("bio_get_nr_vecs returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_user_write_config_word
#define APP_WRAPPER_FOR_pci_user_write_config_word
#endif
 
#ifndef APP_WRAPPER_FOR_pci_user_write_config_word
#define APP_WRAPPER_FOR_pci_user_write_config_word
FUNCTION_WRAPPER(pci_user_write_config_word, (struct pci_dev *dev, int where, u16 val), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_user_write_config_word is invoked.\n");
    PRE_WRAPPER_FUNC(dev, where, val);
    int ret = pci_user_write_config_word(dev, where, val);
    POST_WRAPPER_FUNC(dev, where, val);
    kern_printk("pci_user_write_config_word returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_device_destroy
#define APP_WRAPPER_FOR_device_destroy
#endif
 
#ifndef APP_WRAPPER_FOR_device_destroy
#define APP_WRAPPER_FOR_device_destroy
FUNCTION_WRAPPER_VOID(device_destroy, (struct class_ *cls, dev_t devt), {
    WRAP_RECURSIVE(cls);
    TRACES_IF_WATCHPOINT(cls);
    SCAN_HEAD_FUNC(struct class_)(*(TO_UNWATCHED_ADDRESS(cls)));
    kern_printk("device_destroy is invoked.\n");
    PRE_WRAPPER_FUNC(cls, devt);
    device_destroy(cls, devt);
    POST_WRAPPER_FUNC(cls, devt);
    kern_printk("device_destroy returned.\n");
    TRACES_IF_WATCHPOINT(cls);
    SCAN_HEAD_FUNC(struct class_)(*(TO_UNWATCHED_ADDRESS(cls)));
})
#endif


#ifndef KERN_ADDR_ioremap_cache
#define APP_WRAPPER_FOR_ioremap_cache
#endif
 
#ifndef APP_WRAPPER_FOR_ioremap_cache
#define APP_WRAPPER_FOR_ioremap_cache
FUNCTION_WRAPPER(ioremap_cache, (resource_size_t offset, unsigned long size), {
    kern_printk("ioremap_cache is invoked.\n");
    PRE_WRAPPER_FUNC(offset, size);
    void *ret = ioremap_cache(offset, size);
    POST_WRAPPER_FUNC(offset, size);
    kern_printk("ioremap_cache returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_pm_qos_add_request
#define APP_WRAPPER_FOR_dev_pm_qos_add_request
#endif
 
#ifndef APP_WRAPPER_FOR_dev_pm_qos_add_request
#define APP_WRAPPER_FOR_dev_pm_qos_add_request
FUNCTION_WRAPPER(dev_pm_qos_add_request, (struct device *dev, struct dev_pm_qos_request *req, enum dev_pm_qos_req_type type, s32 value), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(req);
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct dev_pm_qos_request)(*(TO_UNWATCHED_ADDRESS(req)));
    kern_printk("dev_pm_qos_add_request is invoked.\n");
    PRE_WRAPPER_FUNC(dev, req, type, value);
    int ret = dev_pm_qos_add_request(dev, req, type, value);
    POST_WRAPPER_FUNC(dev, req, type, value);
    kern_printk("dev_pm_qos_add_request returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct dev_pm_qos_request)(*(TO_UNWATCHED_ADDRESS(req)));
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_force_commit_nested
#define APP_WRAPPER_FOR_jbd2_journal_force_commit_nested
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_force_commit_nested
#define APP_WRAPPER_FOR_jbd2_journal_force_commit_nested
FUNCTION_WRAPPER(jbd2_journal_force_commit_nested, (journal_t *journal), {
    WRAP_RECURSIVE(journal);
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    kern_printk("jbd2_journal_force_commit_nested is invoked.\n");
    PRE_WRAPPER_FUNC(journal);
    int ret = jbd2_journal_force_commit_nested(journal);
    POST_WRAPPER_FUNC(journal);
    kern_printk("jbd2_journal_force_commit_nested returned.\n");
    TRACES_IF_WATCHPOINT(journal);
    SCAN_HEAD_FUNC(journal_t)(*(TO_UNWATCHED_ADDRESS(journal)));
    return ret;
})
#endif


#ifndef KERN_ADDR_add_disk
#define APP_WRAPPER_FOR_add_disk
#endif
 
#ifndef APP_WRAPPER_FOR_add_disk
#define APP_WRAPPER_FOR_add_disk
FUNCTION_WRAPPER_VOID(add_disk, (struct gendisk *disk), {
    WRAP_RECURSIVE(disk);
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    kern_printk("add_disk is invoked.\n");
    PRE_WRAPPER_FUNC(disk);
    add_disk(disk);
    POST_WRAPPER_FUNC(disk);
    kern_printk("add_disk returned.\n");
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
})
#endif


#ifndef KERN_ADDR_pm_generic_suspend_late
#define APP_WRAPPER_FOR_pm_generic_suspend_late
#endif
 
#ifndef APP_WRAPPER_FOR_pm_generic_suspend_late
#define APP_WRAPPER_FOR_pm_generic_suspend_late
FUNCTION_WRAPPER(pm_generic_suspend_late, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pm_generic_suspend_late is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pm_generic_suspend_late(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pm_generic_suspend_late returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_groups_search
#define APP_WRAPPER_FOR_groups_search
#endif
 
#ifndef APP_WRAPPER_FOR_groups_search
#define APP_WRAPPER_FOR_groups_search
FUNCTION_WRAPPER(groups_search, (const struct group_info *_arg1, kgid_t _arg2), {
    kern_printk("groups_search is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = groups_search(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("groups_search returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_send_sigurg
#define APP_WRAPPER_FOR_send_sigurg
#endif
 
#ifndef APP_WRAPPER_FOR_send_sigurg
#define APP_WRAPPER_FOR_send_sigurg
FUNCTION_WRAPPER(send_sigurg, (struct fown_struct *fown), {
    WRAP_RECURSIVE(fown);
    TRACES_IF_WATCHPOINT(fown);
    SCAN_HEAD_FUNC(struct fown_struct)(*(TO_UNWATCHED_ADDRESS(fown)));
    kern_printk("send_sigurg is invoked.\n");
    PRE_WRAPPER_FUNC(fown);
    int ret = send_sigurg(fown);
    POST_WRAPPER_FUNC(fown);
    kern_printk("send_sigurg returned.\n");
    TRACES_IF_WATCHPOINT(fown);
    SCAN_HEAD_FUNC(struct fown_struct)(*(TO_UNWATCHED_ADDRESS(fown)));
    return ret;
})
#endif


#ifndef KERN_ADDR_current_fs_time
#define APP_WRAPPER_FOR_current_fs_time
#endif
 
#ifndef APP_WRAPPER_FOR_current_fs_time
#define APP_WRAPPER_FOR_current_fs_time
FUNCTION_WRAPPER(current_fs_time, (struct super_block *sb), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("current_fs_time is invoked.\n");
    PRE_WRAPPER_FUNC(sb);
    struct timespec ret = current_fs_time(sb);
    POST_WRAPPER_FUNC(sb);
    kern_printk("current_fs_time returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_paravirt_patch_call
#define APP_WRAPPER_FOR_paravirt_patch_call
#endif
 
#ifndef APP_WRAPPER_FOR_paravirt_patch_call
#define APP_WRAPPER_FOR_paravirt_patch_call
FUNCTION_WRAPPER(paravirt_patch_call, (void *insnbuf, const void *target, u16 tgt_clobbers, unsigned long addr, u16 site_clobbers, unsigned int len), {
    kern_printk("paravirt_patch_call is invoked.\n");
    PRE_WRAPPER_FUNC(insnbuf, target, tgt_clobbers, addr, site_clobbers, len);
    int ret = paravirt_patch_call(insnbuf, target, tgt_clobbers, addr, site_clobbers, len);
    POST_WRAPPER_FUNC(insnbuf, target, tgt_clobbers, addr, site_clobbers, len);
    kern_printk("paravirt_patch_call returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sock_prot_inuse_get
#define APP_WRAPPER_FOR_sock_prot_inuse_get
#endif
 
#ifndef APP_WRAPPER_FOR_sock_prot_inuse_get
#define APP_WRAPPER_FOR_sock_prot_inuse_get
FUNCTION_WRAPPER(sock_prot_inuse_get, (struct net *net, struct proto *proto), {
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    WRAP_RECURSIVE(proto);
    TRACES_IF_WATCHPOINT(proto);
    SCAN_HEAD_FUNC(struct proto)(*(TO_UNWATCHED_ADDRESS(proto)));
    kern_printk("sock_prot_inuse_get is invoked.\n");
    PRE_WRAPPER_FUNC(net, proto);
    int ret = sock_prot_inuse_get(net, proto);
    POST_WRAPPER_FUNC(net, proto);
    kern_printk("sock_prot_inuse_get returned.\n");
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    TRACES_IF_WATCHPOINT(proto);
    SCAN_HEAD_FUNC(struct proto)(*(TO_UNWATCHED_ADDRESS(proto)));
    return ret;
})
#endif


#ifndef KERN_ADDR_chrdev_show
#define APP_WRAPPER_FOR_chrdev_show
#endif
 
#ifndef APP_WRAPPER_FOR_chrdev_show
#define APP_WRAPPER_FOR_chrdev_show
FUNCTION_WRAPPER_VOID(chrdev_show, (struct seq_file *_arg1, off_t _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("chrdev_show is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    chrdev_show(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("chrdev_show returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_handle_nested_irq
#define APP_WRAPPER_FOR_handle_nested_irq
#endif
 
#ifndef APP_WRAPPER_FOR_handle_nested_irq
#define APP_WRAPPER_FOR_handle_nested_irq
FUNCTION_WRAPPER_VOID(handle_nested_irq, (unsigned int irq), {
    kern_printk("handle_nested_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq);
    handle_nested_irq(irq);
    POST_WRAPPER_FUNC(irq);
    kern_printk("handle_nested_irq returned.\n");
})
#endif


#ifndef KERN_ADDR_poll_schedule_timeout
#define APP_WRAPPER_FOR_poll_schedule_timeout
#endif
 
#ifndef APP_WRAPPER_FOR_poll_schedule_timeout
#define APP_WRAPPER_FOR_poll_schedule_timeout
FUNCTION_WRAPPER(poll_schedule_timeout, (struct poll_wqueues *pwq, int state, ktime_t *expires, unsigned long slack), {
    WRAP_RECURSIVE(pwq);
    TRACES_IF_WATCHPOINT(pwq);
    SCAN_HEAD_FUNC(struct poll_wqueues)(*(TO_UNWATCHED_ADDRESS(pwq)));
    kern_printk("poll_schedule_timeout is invoked.\n");
    PRE_WRAPPER_FUNC(pwq, state, expires, slack);
    int ret = poll_schedule_timeout(pwq, state, expires, slack);
    POST_WRAPPER_FUNC(pwq, state, expires, slack);
    kern_printk("poll_schedule_timeout returned.\n");
    TRACES_IF_WATCHPOINT(pwq);
    SCAN_HEAD_FUNC(struct poll_wqueues)(*(TO_UNWATCHED_ADDRESS(pwq)));
    return ret;
})
#endif


#ifndef KERN_ADDR_add_device_randomness
#define APP_WRAPPER_FOR_add_device_randomness
#endif
 
#ifndef APP_WRAPPER_FOR_add_device_randomness
#define APP_WRAPPER_FOR_add_device_randomness
FUNCTION_WRAPPER_VOID(add_device_randomness, (const void *_arg1, unsigned int _arg2), {
    kern_printk("add_device_randomness is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    add_device_randomness(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("add_device_randomness returned.\n");
})
#endif


#ifndef KERN_ADDR_rb_erase
#define APP_WRAPPER_FOR_rb_erase
#endif
 
#ifndef APP_WRAPPER_FOR_rb_erase
#define APP_WRAPPER_FOR_rb_erase
FUNCTION_WRAPPER_VOID(rb_erase, (struct rb_node *_arg1, struct rb_root *_arg2), {
    kern_printk("rb_erase is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    rb_erase(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("rb_erase returned.\n");
})
#endif


#ifndef KERN_ADDR_early_trap_init
#define APP_WRAPPER_FOR_early_trap_init
#endif
 
#ifndef APP_WRAPPER_FOR_early_trap_init
#define APP_WRAPPER_FOR_early_trap_init
FUNCTION_WRAPPER_VOID(early_trap_init, (), {
    kern_printk("early_trap_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    early_trap_init();
    POST_WRAPPER_FUNC();
    kern_printk("early_trap_init returned.\n");
})
#endif


#ifndef KERN_ADDR_input_free_device
#define APP_WRAPPER_FOR_input_free_device
#endif
 
#ifndef APP_WRAPPER_FOR_input_free_device
#define APP_WRAPPER_FOR_input_free_device
FUNCTION_WRAPPER_VOID(input_free_device, (struct input_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("input_free_device is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    input_free_device(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("input_free_device returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_syscall_trace_leave
#define APP_WRAPPER_FOR_syscall_trace_leave
#endif
 
#ifndef APP_WRAPPER_FOR_syscall_trace_leave
#define APP_WRAPPER_FOR_syscall_trace_leave
FUNCTION_WRAPPER_VOID(syscall_trace_leave, (struct pt_regs *_arg1), {
    kern_printk("syscall_trace_leave is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    syscall_trace_leave(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("syscall_trace_leave returned.\n");
})
#endif


#ifndef KERN_ADDR_input_unregister_handle
#define APP_WRAPPER_FOR_input_unregister_handle
#endif
 
#ifndef APP_WRAPPER_FOR_input_unregister_handle
#define APP_WRAPPER_FOR_input_unregister_handle
FUNCTION_WRAPPER_VOID(input_unregister_handle, (struct input_handle *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct input_handle)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("input_unregister_handle is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    input_unregister_handle(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("input_unregister_handle returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct input_handle)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_bitmap_parselist_user
#define APP_WRAPPER_FOR_bitmap_parselist_user
#endif
 
#ifndef APP_WRAPPER_FOR_bitmap_parselist_user
#define APP_WRAPPER_FOR_bitmap_parselist_user
FUNCTION_WRAPPER(bitmap_parselist_user, (const char *ubuf, unsigned int ulen, unsigned long *dst, int nbits), {
    kern_printk("bitmap_parselist_user is invoked.\n");
    PRE_WRAPPER_FUNC(ubuf, ulen, dst, nbits);
    int ret = bitmap_parselist_user(ubuf, ulen, dst, nbits);
    POST_WRAPPER_FUNC(ubuf, ulen, dst, nbits);
    kern_printk("bitmap_parselist_user returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_igrab
#define APP_WRAPPER_FOR_igrab
#endif
 
#ifndef APP_WRAPPER_FOR_igrab
#define APP_WRAPPER_FOR_igrab
FUNCTION_WRAPPER(igrab, (struct inode *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("igrab is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct inode *ret = igrab(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("igrab returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_idr_remove_all
#define APP_WRAPPER_FOR_idr_remove_all
#endif
 
#ifndef APP_WRAPPER_FOR_idr_remove_all
#define APP_WRAPPER_FOR_idr_remove_all
FUNCTION_WRAPPER_VOID(idr_remove_all, (struct idr *idp), {
    WRAP_RECURSIVE(idp);
    TRACES_IF_WATCHPOINT(idp);
    SCAN_HEAD_FUNC(struct idr)(*(TO_UNWATCHED_ADDRESS(idp)));
    kern_printk("idr_remove_all is invoked.\n");
    PRE_WRAPPER_FUNC(idp);
    idr_remove_all(idp);
    POST_WRAPPER_FUNC(idp);
    kern_printk("idr_remove_all returned.\n");
    TRACES_IF_WATCHPOINT(idp);
    SCAN_HEAD_FUNC(struct idr)(*(TO_UNWATCHED_ADDRESS(idp)));
})
#endif


#ifndef KERN_ADDR_ata_ehi_push_desc
#define APP_WRAPPER_FOR_ata_ehi_push_desc
#endif
 
#ifndef APP_WRAPPER_FOR_ata_ehi_push_desc
#define APP_WRAPPER_FOR_ata_ehi_push_desc
FUNCTION_WRAPPER_VOID(ata_ehi_push_desc, (struct ata_eh_info *ehi, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    WRAP_RECURSIVE(ehi);
    TRACES_IF_WATCHPOINT(ehi);
    SCAN_HEAD_FUNC(struct ata_eh_info)(*(TO_UNWATCHED_ADDRESS(ehi)));
    // TODO: variadic arguments
    kern_printk("ata_ehi_push_desc is invoked.\n");
    PRE_WRAPPER_FUNC(ehi, fmt);
    ata_ehi_push_desc(ehi, fmt);
    POST_WRAPPER_FUNC(ehi, fmt);
    kern_printk("ata_ehi_push_desc returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(ehi);
    SCAN_HEAD_FUNC(struct ata_eh_info)(*(TO_UNWATCHED_ADDRESS(ehi)));
})
#endif


#ifndef KERN_ADDR_dev_seq_start
#define APP_WRAPPER_FOR_dev_seq_start
#endif
 
#ifndef APP_WRAPPER_FOR_dev_seq_start
#define APP_WRAPPER_FOR_dev_seq_start
FUNCTION_WRAPPER(dev_seq_start, (struct seq_file *seq, loff_t *pos), {
    WRAP_RECURSIVE(seq);
    TRACES_IF_WATCHPOINT(seq);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(seq)));
    kern_printk("dev_seq_start is invoked.\n");
    PRE_WRAPPER_FUNC(seq, pos);
    void *ret = dev_seq_start(seq, pos);
    POST_WRAPPER_FUNC(seq, pos);
    kern_printk("dev_seq_start returned.\n");
    TRACES_IF_WATCHPOINT(seq);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(seq)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt1
#define APP_WRAPPER_FOR_invalidate_interrupt1
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt1
#define APP_WRAPPER_FOR_invalidate_interrupt1
FUNCTION_WRAPPER_VOID(invalidate_interrupt1, (), {
    kern_printk("invalidate_interrupt1 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt1();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt1 returned.\n");
})
#endif


#ifndef KERN_ADDR_bitmap_ord_to_pos
#define APP_WRAPPER_FOR_bitmap_ord_to_pos
#endif
 
#ifndef APP_WRAPPER_FOR_bitmap_ord_to_pos
#define APP_WRAPPER_FOR_bitmap_ord_to_pos
FUNCTION_WRAPPER(bitmap_ord_to_pos, (unsigned const long *bitmap, int n, int bits), {
    kern_printk("bitmap_ord_to_pos is invoked.\n");
    PRE_WRAPPER_FUNC(bitmap, n, bits);
    int ret = bitmap_ord_to_pos(bitmap, n, bits);
    POST_WRAPPER_FUNC(bitmap, n, bits);
    kern_printk("bitmap_ord_to_pos returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_param_get_charp
#define APP_WRAPPER_FOR_param_get_charp
#endif
 
#ifndef APP_WRAPPER_FOR_param_get_charp
#define APP_WRAPPER_FOR_param_get_charp
FUNCTION_WRAPPER(param_get_charp, (char *buffer, const struct kernel_param *kp), {
    WRAP_RECURSIVE(kp);
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    kern_printk("param_get_charp is invoked.\n");
    PRE_WRAPPER_FUNC(buffer, kp);
    int ret = param_get_charp(buffer, kp);
    POST_WRAPPER_FUNC(buffer, kp);
    kern_printk("param_get_charp returned.\n");
    TRACES_IF_WATCHPOINT(kp);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(kp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_debug_trace
#define APP_WRAPPER_FOR_acpi_debug_trace
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_debug_trace
#define APP_WRAPPER_FOR_acpi_debug_trace
FUNCTION_WRAPPER(acpi_debug_trace, (char *name, u32 debug_level, u32 debug_layer, u32 flags), {
    kern_printk("acpi_debug_trace is invoked.\n");
    PRE_WRAPPER_FUNC(name, debug_level, debug_layer, flags);
    acpi_status ret = acpi_debug_trace(name, debug_level, debug_layer, flags);
    POST_WRAPPER_FUNC(name, debug_level, debug_layer, flags);
    kern_printk("acpi_debug_trace returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_elevator_exit
#define APP_WRAPPER_FOR_elevator_exit
#endif
 
#ifndef APP_WRAPPER_FOR_elevator_exit
#define APP_WRAPPER_FOR_elevator_exit
FUNCTION_WRAPPER_VOID(elevator_exit, (struct elevator_queue *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct elevator_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("elevator_exit is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    elevator_exit(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("elevator_exit returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct elevator_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_blk_start_plug
#define APP_WRAPPER_FOR_blk_start_plug
#endif
 
#ifndef APP_WRAPPER_FOR_blk_start_plug
#define APP_WRAPPER_FOR_blk_start_plug
FUNCTION_WRAPPER_VOID(blk_start_plug, (struct blk_plug *_arg1), {
    kern_printk("blk_start_plug is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    blk_start_plug(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("blk_start_plug returned.\n");
})
#endif


#ifndef KERN_ADDR_plist_del
#define APP_WRAPPER_FOR_plist_del
#endif
 
#ifndef APP_WRAPPER_FOR_plist_del
#define APP_WRAPPER_FOR_plist_del
FUNCTION_WRAPPER_VOID(plist_del, (struct plist_node *node, struct plist_head *head), {
    kern_printk("plist_del is invoked.\n");
    PRE_WRAPPER_FUNC(node, head);
    plist_del(node, head);
    POST_WRAPPER_FUNC(node, head);
    kern_printk("plist_del returned.\n");
})
#endif


#ifndef KERN_ADDR_change_pid
#define APP_WRAPPER_FOR_change_pid
#endif
 
#ifndef APP_WRAPPER_FOR_change_pid
#define APP_WRAPPER_FOR_change_pid
FUNCTION_WRAPPER_VOID(change_pid, (struct task_struct *task, enum pid_type _arg1, struct pid *pid), {
    WRAP_RECURSIVE(task);
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    WRAP_RECURSIVE(pid);
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
    kern_printk("change_pid is invoked.\n");
    PRE_WRAPPER_FUNC(task, _arg1, pid);
    change_pid(task, _arg1, pid);
    POST_WRAPPER_FUNC(task, _arg1, pid);
    kern_printk("change_pid returned.\n");
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
})
#endif


#ifndef KERN_ADDR_detect_ht
#define APP_WRAPPER_FOR_detect_ht
#endif
 
#ifndef APP_WRAPPER_FOR_detect_ht
#define APP_WRAPPER_FOR_detect_ht
FUNCTION_WRAPPER_VOID(detect_ht, (struct cpuinfo_x86 *c), {
    kern_printk("detect_ht is invoked.\n");
    PRE_WRAPPER_FUNC(c);
    detect_ht(c);
    POST_WRAPPER_FUNC(c);
    kern_printk("detect_ht returned.\n");
})
#endif


#ifndef KERN_ADDR_mp_save_irq
#define APP_WRAPPER_FOR_mp_save_irq
#endif
 
#ifndef APP_WRAPPER_FOR_mp_save_irq
#define APP_WRAPPER_FOR_mp_save_irq
FUNCTION_WRAPPER_VOID(mp_save_irq, (struct mpc_intsrc *m), {
    kern_printk("mp_save_irq is invoked.\n");
    PRE_WRAPPER_FUNC(m);
    mp_save_irq(m);
    POST_WRAPPER_FUNC(m);
    kern_printk("mp_save_irq returned.\n");
})
#endif


#ifndef KERN_ADDR_alg_test
#define APP_WRAPPER_FOR_alg_test
#endif
 
#ifndef APP_WRAPPER_FOR_alg_test
#define APP_WRAPPER_FOR_alg_test
FUNCTION_WRAPPER(alg_test, (const char *driver, const char *alg, u32 type, u32 mask), {
    kern_printk("alg_test is invoked.\n");
    PRE_WRAPPER_FUNC(driver, alg, type, mask);
    int ret = alg_test(driver, alg, type, mask);
    POST_WRAPPER_FUNC(driver, alg, type, mask);
    kern_printk("alg_test returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_res_counter_charge_locked
#define APP_WRAPPER_FOR_res_counter_charge_locked
#endif
 
#ifndef APP_WRAPPER_FOR_res_counter_charge_locked
#define APP_WRAPPER_FOR_res_counter_charge_locked
FUNCTION_WRAPPER(res_counter_charge_locked, (struct res_counter *counter, unsigned long val, bool force), {
    kern_printk("res_counter_charge_locked is invoked.\n");
    PRE_WRAPPER_FUNC(counter, val, force);
    int ret = res_counter_charge_locked(counter, val, force);
    POST_WRAPPER_FUNC(counter, val, force);
    kern_printk("res_counter_charge_locked returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_assign_resource
#define APP_WRAPPER_FOR_pci_assign_resource
#endif
 
#ifndef APP_WRAPPER_FOR_pci_assign_resource
#define APP_WRAPPER_FOR_pci_assign_resource
FUNCTION_WRAPPER(pci_assign_resource, (struct pci_dev *dev, int i), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_assign_resource is invoked.\n");
    PRE_WRAPPER_FUNC(dev, i);
    int ret = pci_assign_resource(dev, i);
    POST_WRAPPER_FUNC(dev, i);
    kern_printk("pci_assign_resource returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_alloc_netdev_mqs
#define APP_WRAPPER_FOR_alloc_netdev_mqs
#endif
 
#ifndef APP_WRAPPER_FOR_alloc_netdev_mqs
#define APP_WRAPPER_FOR_alloc_netdev_mqs
FUNCTION_WRAPPER(alloc_netdev_mqs, (int sizeof_priv, const char *name, void (*setup)(struct net_device *), unsigned int txqs, unsigned int rxqs), {
    WRAP_FUNCTION(setup);
    kern_printk("alloc_netdev_mqs is invoked.\n");
    PRE_WRAPPER_FUNC(sizeof_priv, name, setup, txqs, rxqs);
    struct net_device *ret = alloc_netdev_mqs(sizeof_priv, name, setup, txqs, rxqs);
    POST_WRAPPER_FUNC(sizeof_priv, name, setup, txqs, rxqs);
    kern_printk("alloc_netdev_mqs returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_drop_collected_mounts
#define APP_WRAPPER_FOR_drop_collected_mounts
#endif
 
#ifndef APP_WRAPPER_FOR_drop_collected_mounts
#define APP_WRAPPER_FOR_drop_collected_mounts
FUNCTION_WRAPPER_VOID(drop_collected_mounts, (struct vfsmount *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("drop_collected_mounts is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    drop_collected_mounts(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("drop_collected_mounts returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_blk_recount_segments
#define APP_WRAPPER_FOR_blk_recount_segments
#endif
 
#ifndef APP_WRAPPER_FOR_blk_recount_segments
#define APP_WRAPPER_FOR_blk_recount_segments
FUNCTION_WRAPPER_VOID(blk_recount_segments, (struct request_queue *_arg1, struct bio *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("blk_recount_segments is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    blk_recount_segments(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("blk_recount_segments returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_skb_clone
#define APP_WRAPPER_FOR_skb_clone
#endif
 
#ifndef APP_WRAPPER_FOR_skb_clone
#define APP_WRAPPER_FOR_skb_clone
FUNCTION_WRAPPER(skb_clone, (struct sk_buff *skb, gfp_t priority), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_clone is invoked.\n");
    PRE_WRAPPER_FUNC(skb, priority);
    struct sk_buff *ret = skb_clone(skb, priority);
    POST_WRAPPER_FUNC(skb, priority);
    kern_printk("skb_clone returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_kthread_create_on_cpu
#define APP_WRAPPER_FOR_kthread_create_on_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_kthread_create_on_cpu
#define APP_WRAPPER_FOR_kthread_create_on_cpu
FUNCTION_WRAPPER(kthread_create_on_cpu, (int (*threadfn)(void *), void *data, unsigned int cpu, const char *namefmt), {
    WRAP_FUNCTION(threadfn);
    kern_printk("kthread_create_on_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(threadfn, data, cpu, namefmt);
    struct task_struct *ret = kthread_create_on_cpu(threadfn, data, cpu, namefmt);
    POST_WRAPPER_FUNC(threadfn, data, cpu, namefmt);
    kern_printk("kthread_create_on_cpu returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_delete_from_page_cache
#define APP_WRAPPER_FOR_delete_from_page_cache
#endif
 
#ifndef APP_WRAPPER_FOR_delete_from_page_cache
#define APP_WRAPPER_FOR_delete_from_page_cache
FUNCTION_WRAPPER_VOID(delete_from_page_cache, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("delete_from_page_cache is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    delete_from_page_cache(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("delete_from_page_cache returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
})
#endif


#ifndef KERN_ADDR__raw_write_unlock_bh
#define APP_WRAPPER_FOR__raw_write_unlock_bh
#endif
 
#ifndef APP_WRAPPER_FOR__raw_write_unlock_bh
#define APP_WRAPPER_FOR__raw_write_unlock_bh
FUNCTION_WRAPPER_VOID(_raw_write_unlock_bh, (rwlock_t *lock), {
    kern_printk("_raw_write_unlock_bh is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    _raw_write_unlock_bh(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("_raw_write_unlock_bh returned.\n");
})
#endif


#ifndef KERN_ADDR_read_boot_clock
#define APP_WRAPPER_FOR_read_boot_clock
#endif
 
#ifndef APP_WRAPPER_FOR_read_boot_clock
#define APP_WRAPPER_FOR_read_boot_clock
FUNCTION_WRAPPER_VOID(read_boot_clock, (struct timespec *ts), {
    kern_printk("read_boot_clock is invoked.\n");
    PRE_WRAPPER_FUNC(ts);
    read_boot_clock(ts);
    POST_WRAPPER_FUNC(ts);
    kern_printk("read_boot_clock returned.\n");
})
#endif


#ifndef KERN_ADDR___sw_hweight16
#define APP_WRAPPER_FOR___sw_hweight16
#endif
 
#ifndef APP_WRAPPER_FOR___sw_hweight16
#define APP_WRAPPER_FOR___sw_hweight16
FUNCTION_WRAPPER(__sw_hweight16, (unsigned int w), {
    kern_printk("__sw_hweight16 is invoked.\n");
    PRE_WRAPPER_FUNC(w);
    int ret = __sw_hweight16(w);
    POST_WRAPPER_FUNC(w);
    kern_printk("__sw_hweight16 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_atomic_notifier_call_chain
#define APP_WRAPPER_FOR_atomic_notifier_call_chain
#endif
 
#ifndef APP_WRAPPER_FOR_atomic_notifier_call_chain
#define APP_WRAPPER_FOR_atomic_notifier_call_chain
FUNCTION_WRAPPER(atomic_notifier_call_chain, (struct atomic_notifier_head *nh, unsigned long val, void *v), {
    WRAP_RECURSIVE(nh);
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct atomic_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    kern_printk("atomic_notifier_call_chain is invoked.\n");
    PRE_WRAPPER_FUNC(nh, val, v);
    int ret = atomic_notifier_call_chain(nh, val, v);
    POST_WRAPPER_FUNC(nh, val, v);
    kern_printk("atomic_notifier_call_chain returned.\n");
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct atomic_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    return ret;
})
#endif


#ifndef KERN_ADDR_unregister_dock_notifier
#define APP_WRAPPER_FOR_unregister_dock_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_dock_notifier
#define APP_WRAPPER_FOR_unregister_dock_notifier
FUNCTION_WRAPPER_VOID(unregister_dock_notifier, (struct notifier_block *nb), {
    WRAP_RECURSIVE(nb);
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    kern_printk("unregister_dock_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(nb);
    unregister_dock_notifier(nb);
    POST_WRAPPER_FUNC(nb);
    kern_printk("unregister_dock_notifier returned.\n");
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
})
#endif


#ifndef KERN_ADDR_ida_simple_get
#define APP_WRAPPER_FOR_ida_simple_get
#endif
 
#ifndef APP_WRAPPER_FOR_ida_simple_get
#define APP_WRAPPER_FOR_ida_simple_get
FUNCTION_WRAPPER(ida_simple_get, (struct ida *ida, unsigned int start, unsigned int end, gfp_t gfp_mask), {
    WRAP_RECURSIVE(ida);
    TRACES_IF_WATCHPOINT(ida);
    SCAN_HEAD_FUNC(struct ida)(*(TO_UNWATCHED_ADDRESS(ida)));
    kern_printk("ida_simple_get is invoked.\n");
    PRE_WRAPPER_FUNC(ida, start, end, gfp_mask);
    int ret = ida_simple_get(ida, start, end, gfp_mask);
    POST_WRAPPER_FUNC(ida, start, end, gfp_mask);
    kern_printk("ida_simple_get returned.\n");
    TRACES_IF_WATCHPOINT(ida);
    SCAN_HEAD_FUNC(struct ida)(*(TO_UNWATCHED_ADDRESS(ida)));
    return ret;
})
#endif


#ifndef KERN_ADDR_clock_was_set
#define APP_WRAPPER_FOR_clock_was_set
#endif
 
#ifndef APP_WRAPPER_FOR_clock_was_set
#define APP_WRAPPER_FOR_clock_was_set
FUNCTION_WRAPPER_VOID(clock_was_set, (), {
    kern_printk("clock_was_set is invoked.\n");
    PRE_WRAPPER_FUNC();
    clock_was_set();
    POST_WRAPPER_FUNC();
    kern_printk("clock_was_set returned.\n");
})
#endif


#ifndef KERN_ADDR_class_unregister
#define APP_WRAPPER_FOR_class_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_class_unregister
#define APP_WRAPPER_FOR_class_unregister
FUNCTION_WRAPPER_VOID(class_unregister, (struct class_ *class_), {
    WRAP_RECURSIVE(class_);
    TRACES_IF_WATCHPOINT(class_);
    SCAN_HEAD_FUNC(struct class_)(*(TO_UNWATCHED_ADDRESS(class_)));
    kern_printk("class_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(class_);
    class_unregister(class_);
    POST_WRAPPER_FUNC(class_);
    kern_printk("class_unregister returned.\n");
    TRACES_IF_WATCHPOINT(class_);
    SCAN_HEAD_FUNC(struct class_)(*(TO_UNWATCHED_ADDRESS(class_)));
})
#endif


#ifndef KERN_ADDR_kmem_cache_alloc
#define APP_WRAPPER_FOR_kmem_cache_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_kmem_cache_alloc
#define APP_WRAPPER_FOR_kmem_cache_alloc
FUNCTION_WRAPPER(kmem_cache_alloc, (struct kmem_cache *_arg1, gfp_t _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kmem_cache)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("kmem_cache_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    void *ret = kmem_cache_alloc(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("kmem_cache_alloc returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kmem_cache)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_phy_device_create
#define APP_WRAPPER_FOR_phy_device_create
#endif
 
#ifndef APP_WRAPPER_FOR_phy_device_create
#define APP_WRAPPER_FOR_phy_device_create
FUNCTION_WRAPPER(phy_device_create, (struct mii_bus *bus, int addr, int phy_id, bool is_c45, struct phy_c45_device_ids *c45_ids), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct mii_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("phy_device_create is invoked.\n");
    PRE_WRAPPER_FUNC(bus, addr, phy_id, is_c45, c45_ids);
    struct phy_device *ret = phy_device_create(bus, addr, phy_id, is_c45, c45_ids);
    POST_WRAPPER_FUNC(bus, addr, phy_id, is_c45, c45_ids);
    kern_printk("phy_device_create returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct mii_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_disk_name
#define APP_WRAPPER_FOR_disk_name
#endif
 
#ifndef APP_WRAPPER_FOR_disk_name
#define APP_WRAPPER_FOR_disk_name
FUNCTION_WRAPPER(disk_name, (struct gendisk *hd, int partno, char *buf), {
    WRAP_RECURSIVE(hd);
    TRACES_IF_WATCHPOINT(hd);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(hd)));
    kern_printk("disk_name is invoked.\n");
    PRE_WRAPPER_FUNC(hd, partno, buf);
    char *ret = disk_name(hd, partno, buf);
    POST_WRAPPER_FUNC(hd, partno, buf);
    kern_printk("disk_name returned.\n");
    TRACES_IF_WATCHPOINT(hd);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(hd)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_dcache_dir_lseek
#define APP_WRAPPER_FOR_dcache_dir_lseek
#endif
 
#ifndef APP_WRAPPER_FOR_dcache_dir_lseek
#define APP_WRAPPER_FOR_dcache_dir_lseek
FUNCTION_WRAPPER(dcache_dir_lseek, (struct file *_arg1, loff_t _arg2, int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("dcache_dir_lseek is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    loff_t ret = dcache_dir_lseek(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("dcache_dir_lseek returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vprintk
#define APP_WRAPPER_FOR_vprintk
#endif
 
#ifndef APP_WRAPPER_FOR_vprintk
#define APP_WRAPPER_FOR_vprintk
FUNCTION_WRAPPER(vprintk, (const char *fmt, va_list args), {
    kern_printk("vprintk is invoked.\n");
    PRE_WRAPPER_FUNC(fmt, args);
    int ret = vprintk(fmt, args);
    POST_WRAPPER_FUNC(fmt, args);
    kern_printk("vprintk returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_cap_inode_removexattr
#define APP_WRAPPER_FOR_cap_inode_removexattr
#endif
 
#ifndef APP_WRAPPER_FOR_cap_inode_removexattr
#define APP_WRAPPER_FOR_cap_inode_removexattr
FUNCTION_WRAPPER(cap_inode_removexattr, (struct dentry *dentry, const char *name), {
    WRAP_RECURSIVE(dentry);
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    kern_printk("cap_inode_removexattr is invoked.\n");
    PRE_WRAPPER_FUNC(dentry, name);
    int ret = cap_inode_removexattr(dentry, name);
    POST_WRAPPER_FUNC(dentry, name);
    kern_printk("cap_inode_removexattr returned.\n");
    TRACES_IF_WATCHPOINT(dentry);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(dentry)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cleanup_highmap
#define APP_WRAPPER_FOR_cleanup_highmap
#endif
 
#ifndef APP_WRAPPER_FOR_cleanup_highmap
#define APP_WRAPPER_FOR_cleanup_highmap
FUNCTION_WRAPPER_VOID(cleanup_highmap, (), {
    kern_printk("cleanup_highmap is invoked.\n");
    PRE_WRAPPER_FUNC();
    cleanup_highmap();
    POST_WRAPPER_FUNC();
    kern_printk("cleanup_highmap returned.\n");
})
#endif


#ifndef KERN_ADDR_arch_setup_additional_pages
#define APP_WRAPPER_FOR_arch_setup_additional_pages
#endif
 
#ifndef APP_WRAPPER_FOR_arch_setup_additional_pages
#define APP_WRAPPER_FOR_arch_setup_additional_pages
FUNCTION_WRAPPER(arch_setup_additional_pages, (struct linux_binprm *bprm, int uses_interp), {
    kern_printk("arch_setup_additional_pages is invoked.\n");
    PRE_WRAPPER_FUNC(bprm, uses_interp);
    int ret = arch_setup_additional_pages(bprm, uses_interp);
    POST_WRAPPER_FUNC(bprm, uses_interp);
    kern_printk("arch_setup_additional_pages returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_laptop_mode_timer_fn
#define APP_WRAPPER_FOR_laptop_mode_timer_fn
#endif
 
#ifndef APP_WRAPPER_FOR_laptop_mode_timer_fn
#define APP_WRAPPER_FOR_laptop_mode_timer_fn
FUNCTION_WRAPPER_VOID(laptop_mode_timer_fn, (unsigned long data), {
    kern_printk("laptop_mode_timer_fn is invoked.\n");
    PRE_WRAPPER_FUNC(data);
    laptop_mode_timer_fn(data);
    POST_WRAPPER_FUNC(data);
    kern_printk("laptop_mode_timer_fn returned.\n");
})
#endif


#ifndef KERN_ADDR_get_vm_area_caller
#define APP_WRAPPER_FOR_get_vm_area_caller
#endif
 
#ifndef APP_WRAPPER_FOR_get_vm_area_caller
#define APP_WRAPPER_FOR_get_vm_area_caller
FUNCTION_WRAPPER(get_vm_area_caller, (unsigned long size, unsigned long flags, const void *caller), {
    kern_printk("get_vm_area_caller is invoked.\n");
    PRE_WRAPPER_FUNC(size, flags, caller);
    struct vm_struct *ret = get_vm_area_caller(size, flags, caller);
    POST_WRAPPER_FUNC(size, flags, caller);
    kern_printk("get_vm_area_caller returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_sk_page_frag_refill
#define APP_WRAPPER_FOR_sk_page_frag_refill
#endif
 
#ifndef APP_WRAPPER_FOR_sk_page_frag_refill
#define APP_WRAPPER_FOR_sk_page_frag_refill
FUNCTION_WRAPPER(sk_page_frag_refill, (struct sock *sk, struct page_frag *pfrag), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(pfrag);
    TRACES_IF_WATCHPOINT(pfrag);
    SCAN_HEAD_FUNC(struct page_frag)(*(TO_UNWATCHED_ADDRESS(pfrag)));
    kern_printk("sk_page_frag_refill is invoked.\n");
    PRE_WRAPPER_FUNC(sk, pfrag);
    bool ret = sk_page_frag_refill(sk, pfrag);
    POST_WRAPPER_FUNC(sk, pfrag);
    kern_printk("sk_page_frag_refill returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(pfrag);
    SCAN_HEAD_FUNC(struct page_frag)(*(TO_UNWATCHED_ADDRESS(pfrag)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_device_set_power
#define APP_WRAPPER_FOR_acpi_device_set_power
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_device_set_power
#define APP_WRAPPER_FOR_acpi_device_set_power
FUNCTION_WRAPPER(acpi_device_set_power, (struct acpi_device *device, int state), {
    WRAP_RECURSIVE(device);
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(device)));
    kern_printk("acpi_device_set_power is invoked.\n");
    PRE_WRAPPER_FUNC(device, state);
    int ret = acpi_device_set_power(device, state);
    POST_WRAPPER_FUNC(device, state);
    kern_printk("acpi_device_set_power returned.\n");
    TRACES_IF_WATCHPOINT(device);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(device)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_uc_del
#define APP_WRAPPER_FOR_dev_uc_del
#endif
 
#ifndef APP_WRAPPER_FOR_dev_uc_del
#define APP_WRAPPER_FOR_dev_uc_del
FUNCTION_WRAPPER(dev_uc_del, (struct net_device *dev, unsigned const char *addr), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_uc_del is invoked.\n");
    PRE_WRAPPER_FUNC(dev, addr);
    int ret = dev_uc_del(dev, addr);
    POST_WRAPPER_FUNC(dev, addr);
    kern_printk("dev_uc_del returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_gc_ack_clr_bit
#define APP_WRAPPER_FOR_irq_gc_ack_clr_bit
#endif
 
#ifndef APP_WRAPPER_FOR_irq_gc_ack_clr_bit
#define APP_WRAPPER_FOR_irq_gc_ack_clr_bit
FUNCTION_WRAPPER_VOID(irq_gc_ack_clr_bit, (struct irq_data *d), {
    WRAP_RECURSIVE(d);
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(d)));
    kern_printk("irq_gc_ack_clr_bit is invoked.\n");
    PRE_WRAPPER_FUNC(d);
    irq_gc_ack_clr_bit(d);
    POST_WRAPPER_FUNC(d);
    kern_printk("irq_gc_ack_clr_bit returned.\n");
    TRACES_IF_WATCHPOINT(d);
    SCAN_HEAD_FUNC(struct irq_data)(*(TO_UNWATCHED_ADDRESS(d)));
})
#endif


#ifndef KERN_ADDR_native_io_apic_init_mappings
#define APP_WRAPPER_FOR_native_io_apic_init_mappings
#endif
 
#ifndef APP_WRAPPER_FOR_native_io_apic_init_mappings
#define APP_WRAPPER_FOR_native_io_apic_init_mappings
FUNCTION_WRAPPER_VOID(native_io_apic_init_mappings, (), {
    kern_printk("native_io_apic_init_mappings is invoked.\n");
    PRE_WRAPPER_FUNC();
    native_io_apic_init_mappings();
    POST_WRAPPER_FUNC();
    kern_printk("native_io_apic_init_mappings returned.\n");
})
#endif


#ifndef KERN_ADDR_blkdev_issue_flush
#define APP_WRAPPER_FOR_blkdev_issue_flush
#endif
 
#ifndef APP_WRAPPER_FOR_blkdev_issue_flush
#define APP_WRAPPER_FOR_blkdev_issue_flush
FUNCTION_WRAPPER(blkdev_issue_flush, (struct block_device *_arg1, gfp_t _arg2, sector_t *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blkdev_issue_flush is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = blkdev_issue_flush(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("blkdev_issue_flush returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_elevator_change
#define APP_WRAPPER_FOR_elevator_change
#endif
 
#ifndef APP_WRAPPER_FOR_elevator_change
#define APP_WRAPPER_FOR_elevator_change
FUNCTION_WRAPPER(elevator_change, (struct request_queue *_arg1, const char *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("elevator_change is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = elevator_change(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("elevator_change returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_d_path
#define APP_WRAPPER_FOR_d_path
#endif
 
#ifndef APP_WRAPPER_FOR_d_path
#define APP_WRAPPER_FOR_d_path
FUNCTION_WRAPPER(d_path, (const struct path *_arg1, char *_arg2, int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("d_path is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    char *ret = d_path(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("d_path returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(const struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___prop_inc_single
#define APP_WRAPPER_FOR___prop_inc_single
#endif
 
#ifndef APP_WRAPPER_FOR___prop_inc_single
#define APP_WRAPPER_FOR___prop_inc_single
FUNCTION_WRAPPER_VOID(__prop_inc_single, (struct prop_descriptor *pd, struct prop_local_single *pl), {
    WRAP_RECURSIVE(pd);
    TRACES_IF_WATCHPOINT(pd);
    SCAN_HEAD_FUNC(struct prop_descriptor)(*(TO_UNWATCHED_ADDRESS(pd)));
    kern_printk("__prop_inc_single is invoked.\n");
    PRE_WRAPPER_FUNC(pd, pl);
    __prop_inc_single(pd, pl);
    POST_WRAPPER_FUNC(pd, pl);
    kern_printk("__prop_inc_single returned.\n");
    TRACES_IF_WATCHPOINT(pd);
    SCAN_HEAD_FUNC(struct prop_descriptor)(*(TO_UNWATCHED_ADDRESS(pd)));
})
#endif


#ifndef KERN_ADDR___bad_size_call_parameter
#define APP_WRAPPER_FOR___bad_size_call_parameter
#endif
 
#ifndef APP_WRAPPER_FOR___bad_size_call_parameter
#define APP_WRAPPER_FOR___bad_size_call_parameter
FUNCTION_WRAPPER_VOID(__bad_size_call_parameter, (), {
    kern_printk("__bad_size_call_parameter is invoked.\n");
    PRE_WRAPPER_FUNC();
    __bad_size_call_parameter();
    POST_WRAPPER_FUNC();
    kern_printk("__bad_size_call_parameter returned.\n");
})
#endif


#ifndef KERN_ADDR_zap_vma_ptes
#define APP_WRAPPER_FOR_zap_vma_ptes
#endif
 
#ifndef APP_WRAPPER_FOR_zap_vma_ptes
#define APP_WRAPPER_FOR_zap_vma_ptes
FUNCTION_WRAPPER(zap_vma_ptes, (struct vm_area_struct *vma, unsigned long address, unsigned long size), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("zap_vma_ptes is invoked.\n");
    PRE_WRAPPER_FUNC(vma, address, size);
    int ret = zap_vma_ptes(vma, address, size);
    POST_WRAPPER_FUNC(vma, address, size);
    kern_printk("zap_vma_ptes returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kill_pgrp
#define APP_WRAPPER_FOR_kill_pgrp
#endif
 
#ifndef APP_WRAPPER_FOR_kill_pgrp
#define APP_WRAPPER_FOR_kill_pgrp
FUNCTION_WRAPPER(kill_pgrp, (struct pid *pid, int sig, int priv), {
    WRAP_RECURSIVE(pid);
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
    kern_printk("kill_pgrp is invoked.\n");
    PRE_WRAPPER_FUNC(pid, sig, priv);
    int ret = kill_pgrp(pid, sig, priv);
    POST_WRAPPER_FUNC(pid, sig, priv);
    kern_printk("kill_pgrp returned.\n");
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
    return ret;
})
#endif


#ifndef KERN_ADDR_proc_nr_inodes
#define APP_WRAPPER_FOR_proc_nr_inodes
#endif
 
#ifndef APP_WRAPPER_FOR_proc_nr_inodes
#define APP_WRAPPER_FOR_proc_nr_inodes
FUNCTION_WRAPPER(proc_nr_inodes, (struct ctl_table *table, int write, void *buffer, size_t *lenp, loff_t *ppos), {
    WRAP_RECURSIVE(table);
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    kern_printk("proc_nr_inodes is invoked.\n");
    PRE_WRAPPER_FUNC(table, write, buffer, lenp, ppos);
    int ret = proc_nr_inodes(table, write, buffer, lenp, ppos);
    POST_WRAPPER_FUNC(table, write, buffer, lenp, ppos);
    kern_printk("proc_nr_inodes returned.\n");
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dquot_file_open
#define APP_WRAPPER_FOR_dquot_file_open
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_file_open
#define APP_WRAPPER_FOR_dquot_file_open
FUNCTION_WRAPPER(dquot_file_open, (struct inode *inode, struct file *file), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    WRAP_RECURSIVE(file);
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    kern_printk("dquot_file_open is invoked.\n");
    PRE_WRAPPER_FUNC(inode, file);
    int ret = dquot_file_open(inode, file);
    POST_WRAPPER_FUNC(inode, file);
    kern_printk("dquot_file_open returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    TRACES_IF_WATCHPOINT(file);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(file)));
    return ret;
})
#endif


#ifndef KERN_ADDR_simple_strtoul
#define APP_WRAPPER_FOR_simple_strtoul
#endif
 
#ifndef APP_WRAPPER_FOR_simple_strtoul
#define APP_WRAPPER_FOR_simple_strtoul
FUNCTION_WRAPPER(simple_strtoul, (const char *_arg1, char **_arg2, unsigned int _arg3), {
    kern_printk("simple_strtoul is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    long ret = simple_strtoul(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("simple_strtoul returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_subsys_dev_iter_init
#define APP_WRAPPER_FOR_subsys_dev_iter_init
#endif
 
#ifndef APP_WRAPPER_FOR_subsys_dev_iter_init
#define APP_WRAPPER_FOR_subsys_dev_iter_init
FUNCTION_WRAPPER_VOID(subsys_dev_iter_init, (struct subsys_dev_iter *iter, struct bus_type *subsys, struct device *start, const struct device_type *type), {
    WRAP_RECURSIVE(iter);
    TRACES_IF_WATCHPOINT(iter);
    SCAN_HEAD_FUNC(struct subsys_dev_iter)(*(TO_UNWATCHED_ADDRESS(iter)));
    WRAP_RECURSIVE(subsys);
    TRACES_IF_WATCHPOINT(subsys);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(subsys)));
    WRAP_RECURSIVE(start);
    TRACES_IF_WATCHPOINT(start);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(start)));
    WRAP_RECURSIVE(type);
    TRACES_IF_WATCHPOINT(type);
    SCAN_HEAD_FUNC(const struct device_type)(*(TO_UNWATCHED_ADDRESS(type)));
    kern_printk("subsys_dev_iter_init is invoked.\n");
    PRE_WRAPPER_FUNC(iter, subsys, start, type);
    subsys_dev_iter_init(iter, subsys, start, type);
    POST_WRAPPER_FUNC(iter, subsys, start, type);
    kern_printk("subsys_dev_iter_init returned.\n");
    TRACES_IF_WATCHPOINT(iter);
    SCAN_HEAD_FUNC(struct subsys_dev_iter)(*(TO_UNWATCHED_ADDRESS(iter)));
    TRACES_IF_WATCHPOINT(subsys);
    SCAN_HEAD_FUNC(struct bus_type)(*(TO_UNWATCHED_ADDRESS(subsys)));
    TRACES_IF_WATCHPOINT(start);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(start)));
    TRACES_IF_WATCHPOINT(type);
    SCAN_HEAD_FUNC(const struct device_type)(*(TO_UNWATCHED_ADDRESS(type)));
})
#endif


#ifndef KERN_ADDR_vfs_getattr
#define APP_WRAPPER_FOR_vfs_getattr
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_getattr
#define APP_WRAPPER_FOR_vfs_getattr
FUNCTION_WRAPPER(vfs_getattr, (struct vfsmount *_arg1, struct dentry *_arg2, struct kstat *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("vfs_getattr is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = vfs_getattr(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("vfs_getattr returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vfsmount)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_tick_program_event
#define APP_WRAPPER_FOR_tick_program_event
#endif
 
#ifndef APP_WRAPPER_FOR_tick_program_event
#define APP_WRAPPER_FOR_tick_program_event
FUNCTION_WRAPPER(tick_program_event, (ktime_t expires, int force), {
    kern_printk("tick_program_event is invoked.\n");
    PRE_WRAPPER_FUNC(expires, force);
    int ret = tick_program_event(expires, force);
    POST_WRAPPER_FUNC(expires, force);
    kern_printk("tick_program_event returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_clocksource_suspend
#define APP_WRAPPER_FOR_clocksource_suspend
#endif
 
#ifndef APP_WRAPPER_FOR_clocksource_suspend
#define APP_WRAPPER_FOR_clocksource_suspend
FUNCTION_WRAPPER_VOID(clocksource_suspend, (), {
    kern_printk("clocksource_suspend is invoked.\n");
    PRE_WRAPPER_FUNC();
    clocksource_suspend();
    POST_WRAPPER_FUNC();
    kern_printk("clocksource_suspend returned.\n");
})
#endif


#ifndef KERN_ADDR_vmemmap_pgd_populate
#define APP_WRAPPER_FOR_vmemmap_pgd_populate
#endif
 
#ifndef APP_WRAPPER_FOR_vmemmap_pgd_populate
#define APP_WRAPPER_FOR_vmemmap_pgd_populate
FUNCTION_WRAPPER(vmemmap_pgd_populate, (unsigned long addr, int node), {
    kern_printk("vmemmap_pgd_populate is invoked.\n");
    PRE_WRAPPER_FUNC(addr, node);
    pgd_t *ret = vmemmap_pgd_populate(addr, node);
    POST_WRAPPER_FUNC(addr, node);
    kern_printk("vmemmap_pgd_populate returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_machine_halt
#define APP_WRAPPER_FOR_machine_halt
#endif
 
#ifndef APP_WRAPPER_FOR_machine_halt
#define APP_WRAPPER_FOR_machine_halt
FUNCTION_WRAPPER_VOID(machine_halt, (), {
    kern_printk("machine_halt is invoked.\n");
    PRE_WRAPPER_FUNC();
    machine_halt();
    POST_WRAPPER_FUNC();
    kern_printk("machine_halt returned.\n");
})
#endif


#ifndef KERN_ADDR_handle_percpu_devid_irq
#define APP_WRAPPER_FOR_handle_percpu_devid_irq
#endif
 
#ifndef APP_WRAPPER_FOR_handle_percpu_devid_irq
#define APP_WRAPPER_FOR_handle_percpu_devid_irq
FUNCTION_WRAPPER_VOID(handle_percpu_devid_irq, (unsigned int irq, struct irq_desc *desc), {
    WRAP_RECURSIVE(desc);
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct irq_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
    kern_printk("handle_percpu_devid_irq is invoked.\n");
    PRE_WRAPPER_FUNC(irq, desc);
    handle_percpu_devid_irq(irq, desc);
    POST_WRAPPER_FUNC(irq, desc);
    kern_printk("handle_percpu_devid_irq returned.\n");
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct irq_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
})
#endif


#ifndef KERN_ADDR_acpi_numa_x2apic_affinity_init
#define APP_WRAPPER_FOR_acpi_numa_x2apic_affinity_init
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_numa_x2apic_affinity_init
#define APP_WRAPPER_FOR_acpi_numa_x2apic_affinity_init
FUNCTION_WRAPPER_VOID(acpi_numa_x2apic_affinity_init, (struct acpi_srat_x2apic_cpu_affinity *pa), {
    kern_printk("acpi_numa_x2apic_affinity_init is invoked.\n");
    PRE_WRAPPER_FUNC(pa);
    acpi_numa_x2apic_affinity_init(pa);
    POST_WRAPPER_FUNC(pa);
    kern_printk("acpi_numa_x2apic_affinity_init returned.\n");
})
#endif


#ifndef KERN_ADDR_dev_addr_add
#define APP_WRAPPER_FOR_dev_addr_add
#endif
 
#ifndef APP_WRAPPER_FOR_dev_addr_add
#define APP_WRAPPER_FOR_dev_addr_add
FUNCTION_WRAPPER(dev_addr_add, (struct net_device *dev, unsigned const char *addr, unsigned char addr_type), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_addr_add is invoked.\n");
    PRE_WRAPPER_FUNC(dev, addr, addr_type);
    int ret = dev_addr_add(dev, addr, addr_type);
    POST_WRAPPER_FUNC(dev, addr, addr_type);
    kern_printk("dev_addr_add returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_irq_set_affinity_notifier
#define APP_WRAPPER_FOR_irq_set_affinity_notifier
#endif
 
#ifndef APP_WRAPPER_FOR_irq_set_affinity_notifier
#define APP_WRAPPER_FOR_irq_set_affinity_notifier
FUNCTION_WRAPPER(irq_set_affinity_notifier, (unsigned int irq, struct irq_affinity_notify *notify), {
    WRAP_RECURSIVE(notify);
    TRACES_IF_WATCHPOINT(notify);
    SCAN_HEAD_FUNC(struct irq_affinity_notify)(*(TO_UNWATCHED_ADDRESS(notify)));
    kern_printk("irq_set_affinity_notifier is invoked.\n");
    PRE_WRAPPER_FUNC(irq, notify);
    int ret = irq_set_affinity_notifier(irq, notify);
    POST_WRAPPER_FUNC(irq, notify);
    kern_printk("irq_set_affinity_notifier returned.\n");
    TRACES_IF_WATCHPOINT(notify);
    SCAN_HEAD_FUNC(struct irq_affinity_notify)(*(TO_UNWATCHED_ADDRESS(notify)));
    return ret;
})
#endif


#ifndef KERN_ADDR_setup_secondary_APIC_clock
#define APP_WRAPPER_FOR_setup_secondary_APIC_clock
#endif
 
#ifndef APP_WRAPPER_FOR_setup_secondary_APIC_clock
#define APP_WRAPPER_FOR_setup_secondary_APIC_clock
FUNCTION_WRAPPER_VOID(setup_secondary_APIC_clock, (), {
    kern_printk("setup_secondary_APIC_clock is invoked.\n");
    PRE_WRAPPER_FUNC();
    setup_secondary_APIC_clock();
    POST_WRAPPER_FUNC();
    kern_printk("setup_secondary_APIC_clock returned.\n");
})
#endif


#ifndef KERN_ADDR_unmap_kernel_range_noflush
#define APP_WRAPPER_FOR_unmap_kernel_range_noflush
#endif
 
#ifndef APP_WRAPPER_FOR_unmap_kernel_range_noflush
#define APP_WRAPPER_FOR_unmap_kernel_range_noflush
FUNCTION_WRAPPER_VOID(unmap_kernel_range_noflush, (unsigned long addr, unsigned long size), {
    kern_printk("unmap_kernel_range_noflush is invoked.\n");
    PRE_WRAPPER_FUNC(addr, size);
    unmap_kernel_range_noflush(addr, size);
    POST_WRAPPER_FUNC(addr, size);
    kern_printk("unmap_kernel_range_noflush returned.\n");
})
#endif


#ifndef KERN_ADDR_lease_get_mtime
#define APP_WRAPPER_FOR_lease_get_mtime
#endif
 
#ifndef APP_WRAPPER_FOR_lease_get_mtime
#define APP_WRAPPER_FOR_lease_get_mtime
FUNCTION_WRAPPER_VOID(lease_get_mtime, (struct inode *_arg1, struct timespec *time), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("lease_get_mtime is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, time);
    lease_get_mtime(_arg1, time);
    POST_WRAPPER_FUNC(_arg1, time);
    kern_printk("lease_get_mtime returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_elv_rb_del
#define APP_WRAPPER_FOR_elv_rb_del
#endif
 
#ifndef APP_WRAPPER_FOR_elv_rb_del
#define APP_WRAPPER_FOR_elv_rb_del
FUNCTION_WRAPPER_VOID(elv_rb_del, (struct rb_root *_arg1, struct request *_arg2), {
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("elv_rb_del is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    elv_rb_del(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("elv_rb_del returned.\n");
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
})
#endif


#ifndef KERN_ADDR_mp_register_ioapic
#define APP_WRAPPER_FOR_mp_register_ioapic
#endif
 
#ifndef APP_WRAPPER_FOR_mp_register_ioapic
#define APP_WRAPPER_FOR_mp_register_ioapic
FUNCTION_WRAPPER_VOID(mp_register_ioapic, (int id, u32 address, u32 gsi_base), {
    kern_printk("mp_register_ioapic is invoked.\n");
    PRE_WRAPPER_FUNC(id, address, gsi_base);
    mp_register_ioapic(id, address, gsi_base);
    POST_WRAPPER_FUNC(id, address, gsi_base);
    kern_printk("mp_register_ioapic returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_device_power_state
#define APP_WRAPPER_FOR_acpi_device_power_state
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_device_power_state
#define APP_WRAPPER_FOR_acpi_device_power_state
FUNCTION_WRAPPER(acpi_device_power_state, (struct device *dev, struct acpi_device *adev, u32 target_state, int d_max_in, int *d_min_p), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(adev);
    TRACES_IF_WATCHPOINT(adev);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(adev)));
    kern_printk("acpi_device_power_state is invoked.\n");
    PRE_WRAPPER_FUNC(dev, adev, target_state, d_max_in, d_min_p);
    int ret = acpi_device_power_state(dev, adev, target_state, d_max_in, d_min_p);
    POST_WRAPPER_FUNC(dev, adev, target_state, d_max_in, d_min_p);
    kern_printk("acpi_device_power_state returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(adev);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(adev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_is_bad_inode
#define APP_WRAPPER_FOR_is_bad_inode
#endif
 
#ifndef APP_WRAPPER_FOR_is_bad_inode
#define APP_WRAPPER_FOR_is_bad_inode
FUNCTION_WRAPPER(is_bad_inode, (struct inode *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("is_bad_inode is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = is_bad_inode(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("is_bad_inode returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mask_ioapic_entries
#define APP_WRAPPER_FOR_mask_ioapic_entries
#endif
 
#ifndef APP_WRAPPER_FOR_mask_ioapic_entries
#define APP_WRAPPER_FOR_mask_ioapic_entries
FUNCTION_WRAPPER_VOID(mask_ioapic_entries, (), {
    kern_printk("mask_ioapic_entries is invoked.\n");
    PRE_WRAPPER_FUNC();
    mask_ioapic_entries();
    POST_WRAPPER_FUNC();
    kern_printk("mask_ioapic_entries returned.\n");
})
#endif


#ifndef KERN_ADDR_tracepoint_iter_next
#define APP_WRAPPER_FOR_tracepoint_iter_next
#endif
 
#ifndef APP_WRAPPER_FOR_tracepoint_iter_next
#define APP_WRAPPER_FOR_tracepoint_iter_next
FUNCTION_WRAPPER_VOID(tracepoint_iter_next, (struct tracepoint_iter *iter), {
    WRAP_RECURSIVE(iter);
    TRACES_IF_WATCHPOINT(iter);
    SCAN_HEAD_FUNC(struct tracepoint_iter)(*(TO_UNWATCHED_ADDRESS(iter)));
    kern_printk("tracepoint_iter_next is invoked.\n");
    PRE_WRAPPER_FUNC(iter);
    tracepoint_iter_next(iter);
    POST_WRAPPER_FUNC(iter);
    kern_printk("tracepoint_iter_next returned.\n");
    TRACES_IF_WATCHPOINT(iter);
    SCAN_HEAD_FUNC(struct tracepoint_iter)(*(TO_UNWATCHED_ADDRESS(iter)));
})
#endif


#ifndef KERN_ADDR_class_compat_register
#define APP_WRAPPER_FOR_class_compat_register
#endif
 
#ifndef APP_WRAPPER_FOR_class_compat_register
#define APP_WRAPPER_FOR_class_compat_register
FUNCTION_WRAPPER(class_compat_register, (const char *name), {
    kern_printk("class_compat_register is invoked.\n");
    PRE_WRAPPER_FUNC(name);
    struct class_compat *ret = class_compat_register(name);
    POST_WRAPPER_FUNC(name);
    kern_printk("class_compat_register returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_pci_device_resume
#define APP_WRAPPER_FOR_ata_pci_device_resume
#endif
 
#ifndef APP_WRAPPER_FOR_ata_pci_device_resume
#define APP_WRAPPER_FOR_ata_pci_device_resume
FUNCTION_WRAPPER(ata_pci_device_resume, (struct pci_dev *pdev), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("ata_pci_device_resume is invoked.\n");
    PRE_WRAPPER_FUNC(pdev);
    int ret = ata_pci_device_resume(pdev);
    POST_WRAPPER_FUNC(pdev);
    kern_printk("ata_pci_device_resume returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_get_event_status
#define APP_WRAPPER_FOR_acpi_get_event_status
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_event_status
#define APP_WRAPPER_FOR_acpi_get_event_status
FUNCTION_WRAPPER(acpi_get_event_status, (u32 event, acpi_event_status *event_status), {
    kern_printk("acpi_get_event_status is invoked.\n");
    PRE_WRAPPER_FUNC(event, event_status);
    acpi_status ret = acpi_get_event_status(event, event_status);
    POST_WRAPPER_FUNC(event, event_status);
    kern_printk("acpi_get_event_status returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pcibios_disable_device
#define APP_WRAPPER_FOR_pcibios_disable_device
#endif
 
#ifndef APP_WRAPPER_FOR_pcibios_disable_device
#define APP_WRAPPER_FOR_pcibios_disable_device
FUNCTION_WRAPPER_VOID(pcibios_disable_device, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pcibios_disable_device is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    pcibios_disable_device(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pcibios_disable_device returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_acpi_create_dir
#define APP_WRAPPER_FOR_acpi_create_dir
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_create_dir
#define APP_WRAPPER_FOR_acpi_create_dir
FUNCTION_WRAPPER(acpi_create_dir, (struct acpi_device *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("acpi_create_dir is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = acpi_create_dir(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("acpi_create_dir returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct acpi_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sync_blockdev
#define APP_WRAPPER_FOR_sync_blockdev
#endif
 
#ifndef APP_WRAPPER_FOR_sync_blockdev
#define APP_WRAPPER_FOR_sync_blockdev
FUNCTION_WRAPPER(sync_blockdev, (struct block_device *bdev), {
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    kern_printk("sync_blockdev is invoked.\n");
    PRE_WRAPPER_FUNC(bdev);
    int ret = sync_blockdev(bdev);
    POST_WRAPPER_FUNC(bdev);
    kern_printk("sync_blockdev returned.\n");
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_memset
#define APP_WRAPPER_FOR_memset
#endif
 
#ifndef APP_WRAPPER_FOR_memset
#define APP_WRAPPER_FOR_memset
FUNCTION_WRAPPER(memset, (void *s, int c, size_t n), {
    kern_printk("memset is invoked.\n");
    PRE_WRAPPER_FUNC(s, c, n);
    void *ret = memset(s, c, n);
    POST_WRAPPER_FUNC(s, c, n);
    kern_printk("memset returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_clock_settime
#define APP_WRAPPER_FOR_compat_sys_clock_settime
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_clock_settime
#define APP_WRAPPER_FOR_compat_sys_clock_settime
FUNCTION_WRAPPER(compat_sys_clock_settime, (clockid_t which_clock, struct compat_timespec *tp), {
    kern_printk("compat_sys_clock_settime is invoked.\n");
    PRE_WRAPPER_FUNC(which_clock, tp);
    long ret = compat_sys_clock_settime(which_clock, tp);
    POST_WRAPPER_FUNC(which_clock, tp);
    kern_printk("compat_sys_clock_settime returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pmdp_clear_flush_young
#define APP_WRAPPER_FOR_pmdp_clear_flush_young
#endif
 
#ifndef APP_WRAPPER_FOR_pmdp_clear_flush_young
#define APP_WRAPPER_FOR_pmdp_clear_flush_young
FUNCTION_WRAPPER(pmdp_clear_flush_young, (struct vm_area_struct *vma, unsigned long address, pmd_t *pmdp), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("pmdp_clear_flush_young is invoked.\n");
    PRE_WRAPPER_FUNC(vma, address, pmdp);
    int ret = pmdp_clear_flush_young(vma, address, pmdp);
    POST_WRAPPER_FUNC(vma, address, pmdp);
    kern_printk("pmdp_clear_flush_young returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_groups_alloc
#define APP_WRAPPER_FOR_groups_alloc
#endif
 
#ifndef APP_WRAPPER_FOR_groups_alloc
#define APP_WRAPPER_FOR_groups_alloc
FUNCTION_WRAPPER(groups_alloc, (int _arg1), {
    kern_printk("groups_alloc is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct group_info *ret = groups_alloc(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("groups_alloc returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_iowrite8_rep
#define APP_WRAPPER_FOR_iowrite8_rep
#endif
 
#ifndef APP_WRAPPER_FOR_iowrite8_rep
#define APP_WRAPPER_FOR_iowrite8_rep
FUNCTION_WRAPPER_VOID(iowrite8_rep, (void *port, const void *buf, unsigned long count), {
    kern_printk("iowrite8_rep is invoked.\n");
    PRE_WRAPPER_FUNC(port, buf, count);
    iowrite8_rep(port, buf, count);
    POST_WRAPPER_FUNC(port, buf, count);
    kern_printk("iowrite8_rep returned.\n");
})
#endif


#ifndef KERN_ADDR_clockevents_set_mode
#define APP_WRAPPER_FOR_clockevents_set_mode
#endif
 
#ifndef APP_WRAPPER_FOR_clockevents_set_mode
#define APP_WRAPPER_FOR_clockevents_set_mode
FUNCTION_WRAPPER_VOID(clockevents_set_mode, (struct clock_event_device *dev, enum clock_event_mode mode), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct clock_event_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("clockevents_set_mode is invoked.\n");
    PRE_WRAPPER_FUNC(dev, mode);
    clockevents_set_mode(dev, mode);
    POST_WRAPPER_FUNC(dev, mode);
    kern_printk("clockevents_set_mode returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct clock_event_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_qdisc_reset
#define APP_WRAPPER_FOR_qdisc_reset
#endif
 
#ifndef APP_WRAPPER_FOR_qdisc_reset
#define APP_WRAPPER_FOR_qdisc_reset
FUNCTION_WRAPPER_VOID(qdisc_reset, (struct Qdisc *qdisc), {
    WRAP_RECURSIVE(qdisc);
    TRACES_IF_WATCHPOINT(qdisc);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(qdisc)));
    kern_printk("qdisc_reset is invoked.\n");
    PRE_WRAPPER_FUNC(qdisc);
    qdisc_reset(qdisc);
    POST_WRAPPER_FUNC(qdisc);
    kern_printk("qdisc_reset returned.\n");
    TRACES_IF_WATCHPOINT(qdisc);
    SCAN_HEAD_FUNC(struct Qdisc)(*(TO_UNWATCHED_ADDRESS(qdisc)));
})
#endif


#ifndef KERN_ADDR_mb_cache_entry_release
#define APP_WRAPPER_FOR_mb_cache_entry_release
#endif
 
#ifndef APP_WRAPPER_FOR_mb_cache_entry_release
#define APP_WRAPPER_FOR_mb_cache_entry_release
FUNCTION_WRAPPER_VOID(mb_cache_entry_release, (struct mb_cache_entry *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mb_cache_entry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("mb_cache_entry_release is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    mb_cache_entry_release(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("mb_cache_entry_release returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct mb_cache_entry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_cgroup_taskset_next
#define APP_WRAPPER_FOR_cgroup_taskset_next
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_taskset_next
#define APP_WRAPPER_FOR_cgroup_taskset_next
FUNCTION_WRAPPER(cgroup_taskset_next, (struct cgroup_taskset *tset), {
    kern_printk("cgroup_taskset_next is invoked.\n");
    PRE_WRAPPER_FUNC(tset);
    struct task_struct *ret = cgroup_taskset_next(tset);
    POST_WRAPPER_FUNC(tset);
    kern_printk("cgroup_taskset_next returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_copy_page_range
#define APP_WRAPPER_FOR_copy_page_range
#endif
 
#ifndef APP_WRAPPER_FOR_copy_page_range
#define APP_WRAPPER_FOR_copy_page_range
FUNCTION_WRAPPER(copy_page_range, (struct mm_struct *dst, struct mm_struct *src, struct vm_area_struct *vma), {
    WRAP_RECURSIVE(dst);
    TRACES_IF_WATCHPOINT(dst);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(dst)));
    WRAP_RECURSIVE(src);
    TRACES_IF_WATCHPOINT(src);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(src)));
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("copy_page_range is invoked.\n");
    PRE_WRAPPER_FUNC(dst, src, vma);
    int ret = copy_page_range(dst, src, vma);
    POST_WRAPPER_FUNC(dst, src, vma);
    kern_printk("copy_page_range returned.\n");
    TRACES_IF_WATCHPOINT(dst);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(dst)));
    TRACES_IF_WATCHPOINT(src);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(src)));
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sysfs_put
#define APP_WRAPPER_FOR_sysfs_put
#endif
 
#ifndef APP_WRAPPER_FOR_sysfs_put
#define APP_WRAPPER_FOR_sysfs_put
FUNCTION_WRAPPER_VOID(sysfs_put, (struct sysfs_dirent *sd), {
    kern_printk("sysfs_put is invoked.\n");
    PRE_WRAPPER_FUNC(sd);
    sysfs_put(sd);
    POST_WRAPPER_FUNC(sd);
    kern_printk("sysfs_put returned.\n");
})
#endif


#ifndef KERN_ADDR_kobject_uevent_env
#define APP_WRAPPER_FOR_kobject_uevent_env
#endif
 
#ifndef APP_WRAPPER_FOR_kobject_uevent_env
#define APP_WRAPPER_FOR_kobject_uevent_env
FUNCTION_WRAPPER(kobject_uevent_env, (struct kobject *kobj, enum kobject_action action, char * envp[]), {
    WRAP_RECURSIVE(kobj);
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    kern_printk("kobject_uevent_env is invoked.\n");
    PRE_WRAPPER_FUNC(kobj, action, envp);
    int ret = kobject_uevent_env(kobj, action, envp);
    POST_WRAPPER_FUNC(kobj, action, envp);
    kern_printk("kobject_uevent_env returned.\n");
    TRACES_IF_WATCHPOINT(kobj);
    SCAN_HEAD_FUNC(struct kobject)(*(TO_UNWATCHED_ADDRESS(kobj)));
    return ret;
})
#endif


#ifndef KERN_ADDR___netlink_dump_start
#define APP_WRAPPER_FOR___netlink_dump_start
#endif
 
#ifndef APP_WRAPPER_FOR___netlink_dump_start
#define APP_WRAPPER_FOR___netlink_dump_start
FUNCTION_WRAPPER(__netlink_dump_start, (struct sock *ssk, struct sk_buff *skb, const struct nlmsghdr *nlh, struct netlink_dump_control *control), {
    WRAP_RECURSIVE(ssk);
    TRACES_IF_WATCHPOINT(ssk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(ssk)));
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_RECURSIVE(control);
    TRACES_IF_WATCHPOINT(control);
    SCAN_HEAD_FUNC(struct netlink_dump_control)(*(TO_UNWATCHED_ADDRESS(control)));
    kern_printk("__netlink_dump_start is invoked.\n");
    PRE_WRAPPER_FUNC(ssk, skb, nlh, control);
    int ret = __netlink_dump_start(ssk, skb, nlh, control);
    POST_WRAPPER_FUNC(ssk, skb, nlh, control);
    kern_printk("__netlink_dump_start returned.\n");
    TRACES_IF_WATCHPOINT(ssk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(ssk)));
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    TRACES_IF_WATCHPOINT(control);
    SCAN_HEAD_FUNC(struct netlink_dump_control)(*(TO_UNWATCHED_ADDRESS(control)));
    return ret;
})
#endif


#ifndef KERN_ADDR_misc_deregister
#define APP_WRAPPER_FOR_misc_deregister
#endif
 
#ifndef APP_WRAPPER_FOR_misc_deregister
#define APP_WRAPPER_FOR_misc_deregister
FUNCTION_WRAPPER(misc_deregister, (struct miscdevice *misc), {
    WRAP_RECURSIVE(misc);
    TRACES_IF_WATCHPOINT(misc);
    SCAN_HEAD_FUNC(struct miscdevice)(*(TO_UNWATCHED_ADDRESS(misc)));
    kern_printk("misc_deregister is invoked.\n");
    PRE_WRAPPER_FUNC(misc);
    int ret = misc_deregister(misc);
    POST_WRAPPER_FUNC(misc);
    kern_printk("misc_deregister returned.\n");
    TRACES_IF_WATCHPOINT(misc);
    SCAN_HEAD_FUNC(struct miscdevice)(*(TO_UNWATCHED_ADDRESS(misc)));
    return ret;
})
#endif


#ifndef KERN_ADDR_fprop_fraction_percpu
#define APP_WRAPPER_FOR_fprop_fraction_percpu
#endif
 
#ifndef APP_WRAPPER_FOR_fprop_fraction_percpu
#define APP_WRAPPER_FOR_fprop_fraction_percpu
FUNCTION_WRAPPER_VOID(fprop_fraction_percpu, (struct fprop_global *p, struct fprop_local_percpu *pl, unsigned long *numerator, unsigned long *denominator), {
    kern_printk("fprop_fraction_percpu is invoked.\n");
    PRE_WRAPPER_FUNC(p, pl, numerator, denominator);
    fprop_fraction_percpu(p, pl, numerator, denominator);
    POST_WRAPPER_FUNC(p, pl, numerator, denominator);
    kern_printk("fprop_fraction_percpu returned.\n");
})
#endif


#ifndef KERN_ADDR_devm_ioremap_nocache
#define APP_WRAPPER_FOR_devm_ioremap_nocache
#endif
 
#ifndef APP_WRAPPER_FOR_devm_ioremap_nocache
#define APP_WRAPPER_FOR_devm_ioremap_nocache
FUNCTION_WRAPPER(devm_ioremap_nocache, (struct device *dev, resource_size_t offset, unsigned long size), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("devm_ioremap_nocache is invoked.\n");
    PRE_WRAPPER_FUNC(dev, offset, size);
    void *ret = devm_ioremap_nocache(dev, offset, size);
    POST_WRAPPER_FUNC(dev, offset, size);
    kern_printk("devm_ioremap_nocache returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_close_directory
#define APP_WRAPPER_FOR_acpi_os_close_directory
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_close_directory
#define APP_WRAPPER_FOR_acpi_os_close_directory
FUNCTION_WRAPPER_VOID(acpi_os_close_directory, (void *dir_handle), {
    kern_printk("acpi_os_close_directory is invoked.\n");
    PRE_WRAPPER_FUNC(dir_handle);
    acpi_os_close_directory(dir_handle);
    POST_WRAPPER_FUNC(dir_handle);
    kern_printk("acpi_os_close_directory returned.\n");
})
#endif


#ifndef KERN_ADDR_setup_ioapic_ids_from_mpc_nocheck
#define APP_WRAPPER_FOR_setup_ioapic_ids_from_mpc_nocheck
#endif
 
#ifndef APP_WRAPPER_FOR_setup_ioapic_ids_from_mpc_nocheck
#define APP_WRAPPER_FOR_setup_ioapic_ids_from_mpc_nocheck
FUNCTION_WRAPPER_VOID(setup_ioapic_ids_from_mpc_nocheck, (), {
    kern_printk("setup_ioapic_ids_from_mpc_nocheck is invoked.\n");
    PRE_WRAPPER_FUNC();
    setup_ioapic_ids_from_mpc_nocheck();
    POST_WRAPPER_FUNC();
    kern_printk("setup_ioapic_ids_from_mpc_nocheck returned.\n");
})
#endif


#ifndef KERN_ADDR_do_rt_tgsigqueueinfo
#define APP_WRAPPER_FOR_do_rt_tgsigqueueinfo
#endif
 
#ifndef APP_WRAPPER_FOR_do_rt_tgsigqueueinfo
#define APP_WRAPPER_FOR_do_rt_tgsigqueueinfo
FUNCTION_WRAPPER(do_rt_tgsigqueueinfo, (pid_t tgid, pid_t pid, int sig, siginfo_t *info), {
    kern_printk("do_rt_tgsigqueueinfo is invoked.\n");
    PRE_WRAPPER_FUNC(tgid, pid, sig, info);
    long ret = do_rt_tgsigqueueinfo(tgid, pid, sig, info);
    POST_WRAPPER_FUNC(tgid, pid, sig, info);
    kern_printk("do_rt_tgsigqueueinfo returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_crypto_shash_final
#define APP_WRAPPER_FOR_crypto_shash_final
#endif
 
#ifndef APP_WRAPPER_FOR_crypto_shash_final
#define APP_WRAPPER_FOR_crypto_shash_final
FUNCTION_WRAPPER(crypto_shash_final, (struct shash_desc *desc, u8 *out), {
    WRAP_RECURSIVE(desc);
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct shash_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
    kern_printk("crypto_shash_final is invoked.\n");
    PRE_WRAPPER_FUNC(desc, out);
    int ret = crypto_shash_final(desc, out);
    POST_WRAPPER_FUNC(desc, out);
    kern_printk("crypto_shash_final returned.\n");
    TRACES_IF_WATCHPOINT(desc);
    SCAN_HEAD_FUNC(struct shash_desc)(*(TO_UNWATCHED_ADDRESS(desc)));
    return ret;
})
#endif


#ifndef KERN_ADDR_unregister_acpi_bus_type
#define APP_WRAPPER_FOR_unregister_acpi_bus_type
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_acpi_bus_type
#define APP_WRAPPER_FOR_unregister_acpi_bus_type
FUNCTION_WRAPPER(unregister_acpi_bus_type, (struct acpi_bus_type *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct acpi_bus_type)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("unregister_acpi_bus_type is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = unregister_acpi_bus_type(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("unregister_acpi_bus_type returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct acpi_bus_type)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_store_bits
#define APP_WRAPPER_FOR_skb_store_bits
#endif
 
#ifndef APP_WRAPPER_FOR_skb_store_bits
#define APP_WRAPPER_FOR_skb_store_bits
FUNCTION_WRAPPER(skb_store_bits, (struct sk_buff *skb, int offset, const void *from, int len), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("skb_store_bits is invoked.\n");
    PRE_WRAPPER_FUNC(skb, offset, from, len);
    int ret = skb_store_bits(skb, offset, from, len);
    POST_WRAPPER_FUNC(skb, offset, from, len);
    kern_printk("skb_store_bits returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_misc_register
#define APP_WRAPPER_FOR_misc_register
#endif
 
#ifndef APP_WRAPPER_FOR_misc_register
#define APP_WRAPPER_FOR_misc_register
FUNCTION_WRAPPER(misc_register, (struct miscdevice *misc), {
    WRAP_RECURSIVE(misc);
    TRACES_IF_WATCHPOINT(misc);
    SCAN_HEAD_FUNC(struct miscdevice)(*(TO_UNWATCHED_ADDRESS(misc)));
    kern_printk("misc_register is invoked.\n");
    PRE_WRAPPER_FUNC(misc);
    int ret = misc_register(misc);
    POST_WRAPPER_FUNC(misc);
    kern_printk("misc_register returned.\n");
    TRACES_IF_WATCHPOINT(misc);
    SCAN_HEAD_FUNC(struct miscdevice)(*(TO_UNWATCHED_ADDRESS(misc)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pnp_start_dev
#define APP_WRAPPER_FOR_pnp_start_dev
#endif
 
#ifndef APP_WRAPPER_FOR_pnp_start_dev
#define APP_WRAPPER_FOR_pnp_start_dev
FUNCTION_WRAPPER(pnp_start_dev, (struct pnp_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pnp_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pnp_start_dev is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pnp_start_dev(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pnp_start_dev returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pnp_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_get_data
#define APP_WRAPPER_FOR_acpi_get_data
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_data
#define APP_WRAPPER_FOR_acpi_get_data
FUNCTION_WRAPPER(acpi_get_data, (acpi_handle object, acpi_object_handler handler, void **data), {
    WRAP_FUNCTION(handler);
    kern_printk("acpi_get_data is invoked.\n");
    PRE_WRAPPER_FUNC(object, handler, data);
    acpi_status ret = acpi_get_data(object, handler, data);
    POST_WRAPPER_FUNC(object, handler, data);
    kern_printk("acpi_get_data returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_skb_queue_tail
#define APP_WRAPPER_FOR_skb_queue_tail
#endif
 
#ifndef APP_WRAPPER_FOR_skb_queue_tail
#define APP_WRAPPER_FOR_skb_queue_tail
FUNCTION_WRAPPER_VOID(skb_queue_tail, (struct sk_buff_head *list, struct sk_buff *newsk), {
    WRAP_RECURSIVE(list);
    TRACES_IF_WATCHPOINT(list);
    SCAN_HEAD_FUNC(struct sk_buff_head)(*(TO_UNWATCHED_ADDRESS(list)));
    WRAP_RECURSIVE(newsk);
    TRACES_IF_WATCHPOINT(newsk);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(newsk)));
    kern_printk("skb_queue_tail is invoked.\n");
    PRE_WRAPPER_FUNC(list, newsk);
    skb_queue_tail(list, newsk);
    POST_WRAPPER_FUNC(list, newsk);
    kern_printk("skb_queue_tail returned.\n");
    TRACES_IF_WATCHPOINT(list);
    SCAN_HEAD_FUNC(struct sk_buff_head)(*(TO_UNWATCHED_ADDRESS(list)));
    TRACES_IF_WATCHPOINT(newsk);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(newsk)));
})
#endif


#ifndef KERN_ADDR_update_persistent_clock
#define APP_WRAPPER_FOR_update_persistent_clock
#endif
 
#ifndef APP_WRAPPER_FOR_update_persistent_clock
#define APP_WRAPPER_FOR_update_persistent_clock
FUNCTION_WRAPPER(update_persistent_clock, (struct timespec now), {
    kern_printk("update_persistent_clock is invoked.\n");
    PRE_WRAPPER_FUNC(now);
    int ret = update_persistent_clock(now);
    POST_WRAPPER_FUNC(now);
    kern_printk("update_persistent_clock returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_scnprintf
#define APP_WRAPPER_FOR_scnprintf
#endif
 
#ifndef APP_WRAPPER_FOR_scnprintf
#define APP_WRAPPER_FOR_scnprintf
FUNCTION_WRAPPER(scnprintf, (char *buf, size_t size, const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    // TODO: variadic arguments
    kern_printk("scnprintf is invoked.\n");
    PRE_WRAPPER_FUNC(buf, size, fmt);
    int ret = scnprintf(buf, size, fmt);
    POST_WRAPPER_FUNC(buf, size, fmt);
    kern_printk("scnprintf returned.\n");
    va_end(args__);
    return ret;
})
#endif


#ifndef KERN_ADDR___wake_up_parent
#define APP_WRAPPER_FOR___wake_up_parent
#endif
 
#ifndef APP_WRAPPER_FOR___wake_up_parent
#define APP_WRAPPER_FOR___wake_up_parent
FUNCTION_WRAPPER_VOID(__wake_up_parent, (struct task_struct *p, struct task_struct *parent), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(parent)));
    kern_printk("__wake_up_parent is invoked.\n");
    PRE_WRAPPER_FUNC(p, parent);
    __wake_up_parent(p, parent);
    POST_WRAPPER_FUNC(p, parent);
    kern_printk("__wake_up_parent returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(parent)));
})
#endif


#ifndef KERN_ADDR_mem_online_node
#define APP_WRAPPER_FOR_mem_online_node
#endif
 
#ifndef APP_WRAPPER_FOR_mem_online_node
#define APP_WRAPPER_FOR_mem_online_node
FUNCTION_WRAPPER(mem_online_node, (int nid), {
    kern_printk("mem_online_node is invoked.\n");
    PRE_WRAPPER_FUNC(nid);
    int ret = mem_online_node(nid);
    POST_WRAPPER_FUNC(nid);
    kern_printk("mem_online_node returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_evaluate_object
#define APP_WRAPPER_FOR_acpi_evaluate_object
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_evaluate_object
#define APP_WRAPPER_FOR_acpi_evaluate_object
FUNCTION_WRAPPER(acpi_evaluate_object, (acpi_handle object, acpi_string pathname, struct acpi_object_list *parameter_objects, struct acpi_buffer *return_object_buffer), {
    kern_printk("acpi_evaluate_object is invoked.\n");
    PRE_WRAPPER_FUNC(object, pathname, parameter_objects, return_object_buffer);
    acpi_status ret = acpi_evaluate_object(object, pathname, parameter_objects, return_object_buffer);
    POST_WRAPPER_FUNC(object, pathname, parameter_objects, return_object_buffer);
    kern_printk("acpi_evaluate_object returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_raw_notifier_chain_register
#define APP_WRAPPER_FOR_raw_notifier_chain_register
#endif
 
#ifndef APP_WRAPPER_FOR_raw_notifier_chain_register
#define APP_WRAPPER_FOR_raw_notifier_chain_register
FUNCTION_WRAPPER(raw_notifier_chain_register, (struct raw_notifier_head *nh, struct notifier_block *nb), {
    WRAP_RECURSIVE(nh);
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct raw_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    WRAP_RECURSIVE(nb);
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    kern_printk("raw_notifier_chain_register is invoked.\n");
    PRE_WRAPPER_FUNC(nh, nb);
    int ret = raw_notifier_chain_register(nh, nb);
    POST_WRAPPER_FUNC(nh, nb);
    kern_printk("raw_notifier_chain_register returned.\n");
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct raw_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_APIC_init_uniprocessor
#define APP_WRAPPER_FOR_APIC_init_uniprocessor
#endif
 
#ifndef APP_WRAPPER_FOR_APIC_init_uniprocessor
#define APP_WRAPPER_FOR_APIC_init_uniprocessor
FUNCTION_WRAPPER(APIC_init_uniprocessor, (), {
    kern_printk("APIC_init_uniprocessor is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = APIC_init_uniprocessor();
    POST_WRAPPER_FUNC();
    kern_printk("APIC_init_uniprocessor returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_proc_nr_dentry
#define APP_WRAPPER_FOR_proc_nr_dentry
#endif
 
#ifndef APP_WRAPPER_FOR_proc_nr_dentry
#define APP_WRAPPER_FOR_proc_nr_dentry
FUNCTION_WRAPPER(proc_nr_dentry, (struct ctl_table *table, int write, void *buffer, size_t *lenp, loff_t *ppos), {
    WRAP_RECURSIVE(table);
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    kern_printk("proc_nr_dentry is invoked.\n");
    PRE_WRAPPER_FUNC(table, write, buffer, lenp, ppos);
    int ret = proc_nr_dentry(table, write, buffer, lenp, ppos);
    POST_WRAPPER_FUNC(table, write, buffer, lenp, ppos);
    kern_printk("proc_nr_dentry returned.\n");
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    return ret;
})
#endif


#ifndef KERN_ADDR_wake_bit_function
#define APP_WRAPPER_FOR_wake_bit_function
#endif
 
#ifndef APP_WRAPPER_FOR_wake_bit_function
#define APP_WRAPPER_FOR_wake_bit_function
FUNCTION_WRAPPER(wake_bit_function, (wait_queue_t *wait, unsigned int mode, int sync, void *key), {
    WRAP_RECURSIVE(wait);
    TRACES_IF_WATCHPOINT(wait);
    SCAN_HEAD_FUNC(wait_queue_t)(*(TO_UNWATCHED_ADDRESS(wait)));
    kern_printk("wake_bit_function is invoked.\n");
    PRE_WRAPPER_FUNC(wait, mode, sync, key);
    int ret = wake_bit_function(wait, mode, sync, key);
    POST_WRAPPER_FUNC(wait, mode, sync, key);
    kern_printk("wake_bit_function returned.\n");
    TRACES_IF_WATCHPOINT(wait);
    SCAN_HEAD_FUNC(wait_queue_t)(*(TO_UNWATCHED_ADDRESS(wait)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_ptrace_request
#define APP_WRAPPER_FOR_compat_ptrace_request
#endif
 
#ifndef APP_WRAPPER_FOR_compat_ptrace_request
#define APP_WRAPPER_FOR_compat_ptrace_request
FUNCTION_WRAPPER(compat_ptrace_request, (struct task_struct *child, compat_long_t request, compat_ulong_t addr, compat_ulong_t data), {
    WRAP_RECURSIVE(child);
    TRACES_IF_WATCHPOINT(child);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(child)));
    kern_printk("compat_ptrace_request is invoked.\n");
    PRE_WRAPPER_FUNC(child, request, addr, data);
    int ret = compat_ptrace_request(child, request, addr, data);
    POST_WRAPPER_FUNC(child, request, addr, data);
    kern_printk("compat_ptrace_request returned.\n");
    TRACES_IF_WATCHPOINT(child);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(child)));
    return ret;
})
#endif


#ifndef KERN_ADDR_e820_mark_nosave_regions
#define APP_WRAPPER_FOR_e820_mark_nosave_regions
#endif
 
#ifndef APP_WRAPPER_FOR_e820_mark_nosave_regions
#define APP_WRAPPER_FOR_e820_mark_nosave_regions
FUNCTION_WRAPPER_VOID(e820_mark_nosave_regions, (unsigned long limit_pfn), {
    kern_printk("e820_mark_nosave_regions is invoked.\n");
    PRE_WRAPPER_FUNC(limit_pfn);
    e820_mark_nosave_regions(limit_pfn);
    POST_WRAPPER_FUNC(limit_pfn);
    kern_printk("e820_mark_nosave_regions returned.\n");
})
#endif


#ifndef KERN_ADDR_kstrtos16_from_user
#define APP_WRAPPER_FOR_kstrtos16_from_user
#endif
 
#ifndef APP_WRAPPER_FOR_kstrtos16_from_user
#define APP_WRAPPER_FOR_kstrtos16_from_user
FUNCTION_WRAPPER(kstrtos16_from_user, (const char *s, size_t count, unsigned int base, s16 *res), {
    kern_printk("kstrtos16_from_user is invoked.\n");
    PRE_WRAPPER_FUNC(s, count, base, res);
    int ret = kstrtos16_from_user(s, count, base, res);
    POST_WRAPPER_FUNC(s, count, base, res);
    kern_printk("kstrtos16_from_user returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dquot_drop
#define APP_WRAPPER_FOR_dquot_drop
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_drop
#define APP_WRAPPER_FOR_dquot_drop
FUNCTION_WRAPPER_VOID(dquot_drop, (struct inode *inode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("dquot_drop is invoked.\n");
    PRE_WRAPPER_FUNC(inode);
    dquot_drop(inode);
    POST_WRAPPER_FUNC(inode);
    kern_printk("dquot_drop returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
})
#endif


#ifndef KERN_ADDR___vma_adjust_trans_huge
#define APP_WRAPPER_FOR___vma_adjust_trans_huge
#endif
 
#ifndef APP_WRAPPER_FOR___vma_adjust_trans_huge
#define APP_WRAPPER_FOR___vma_adjust_trans_huge
FUNCTION_WRAPPER_VOID(__vma_adjust_trans_huge, (struct vm_area_struct *vma, unsigned long start, unsigned long end, long adjust_next), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("__vma_adjust_trans_huge is invoked.\n");
    PRE_WRAPPER_FUNC(vma, start, end, adjust_next);
    __vma_adjust_trans_huge(vma, start, end, adjust_next);
    POST_WRAPPER_FUNC(vma, start, end, adjust_next);
    kern_printk("__vma_adjust_trans_huge returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
})
#endif


#ifndef KERN_ADDR_task_nice
#define APP_WRAPPER_FOR_task_nice
#endif
 
#ifndef APP_WRAPPER_FOR_task_nice
#define APP_WRAPPER_FOR_task_nice
FUNCTION_WRAPPER(task_nice, (const struct task_struct *p), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(const struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("task_nice is invoked.\n");
    PRE_WRAPPER_FUNC(p);
    int ret = task_nice(p);
    POST_WRAPPER_FUNC(p);
    kern_printk("task_nice returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(const struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    return ret;
})
#endif


#ifndef KERN_ADDR_cdrom_check_events
#define APP_WRAPPER_FOR_cdrom_check_events
#endif
 
#ifndef APP_WRAPPER_FOR_cdrom_check_events
#define APP_WRAPPER_FOR_cdrom_check_events
FUNCTION_WRAPPER(cdrom_check_events, (struct cdrom_device_info *cdi, unsigned int clearing), {
    WRAP_RECURSIVE(cdi);
    TRACES_IF_WATCHPOINT(cdi);
    SCAN_HEAD_FUNC(struct cdrom_device_info)(*(TO_UNWATCHED_ADDRESS(cdi)));
    kern_printk("cdrom_check_events is invoked.\n");
    PRE_WRAPPER_FUNC(cdi, clearing);
    int ret = cdrom_check_events(cdi, clearing);
    POST_WRAPPER_FUNC(cdi, clearing);
    kern_printk("cdrom_check_events returned.\n");
    TRACES_IF_WATCHPOINT(cdi);
    SCAN_HEAD_FUNC(struct cdrom_device_info)(*(TO_UNWATCHED_ADDRESS(cdi)));
    return ret;
})
#endif


#ifndef KERN_ADDR_disk_part_iter_exit
#define APP_WRAPPER_FOR_disk_part_iter_exit
#endif
 
#ifndef APP_WRAPPER_FOR_disk_part_iter_exit
#define APP_WRAPPER_FOR_disk_part_iter_exit
FUNCTION_WRAPPER_VOID(disk_part_iter_exit, (struct disk_part_iter *piter), {
    WRAP_RECURSIVE(piter);
    TRACES_IF_WATCHPOINT(piter);
    SCAN_HEAD_FUNC(struct disk_part_iter)(*(TO_UNWATCHED_ADDRESS(piter)));
    kern_printk("disk_part_iter_exit is invoked.\n");
    PRE_WRAPPER_FUNC(piter);
    disk_part_iter_exit(piter);
    POST_WRAPPER_FUNC(piter);
    kern_printk("disk_part_iter_exit returned.\n");
    TRACES_IF_WATCHPOINT(piter);
    SCAN_HEAD_FUNC(struct disk_part_iter)(*(TO_UNWATCHED_ADDRESS(piter)));
})
#endif


#ifndef KERN_ADDR_tracepoint_probe_register_noupdate
#define APP_WRAPPER_FOR_tracepoint_probe_register_noupdate
#endif
 
#ifndef APP_WRAPPER_FOR_tracepoint_probe_register_noupdate
#define APP_WRAPPER_FOR_tracepoint_probe_register_noupdate
FUNCTION_WRAPPER(tracepoint_probe_register_noupdate, (const char *name, void *probe, void *data), {
    kern_printk("tracepoint_probe_register_noupdate is invoked.\n");
    PRE_WRAPPER_FUNC(name, probe, data);
    int ret = tracepoint_probe_register_noupdate(name, probe, data);
    POST_WRAPPER_FUNC(name, probe, data);
    kern_printk("tracepoint_probe_register_noupdate returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_csk_bind_conflict
#define APP_WRAPPER_FOR_inet_csk_bind_conflict
#endif
 
#ifndef APP_WRAPPER_FOR_inet_csk_bind_conflict
#define APP_WRAPPER_FOR_inet_csk_bind_conflict
FUNCTION_WRAPPER(inet_csk_bind_conflict, (const struct sock *sk, const struct inet_bind_bucket *tb, bool relax), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(const struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("inet_csk_bind_conflict is invoked.\n");
    PRE_WRAPPER_FUNC(sk, tb, relax);
    int ret = inet_csk_bind_conflict(sk, tb, relax);
    POST_WRAPPER_FUNC(sk, tb, relax);
    kern_printk("inet_csk_bind_conflict returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(const struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_input_register_device
#define APP_WRAPPER_FOR_input_register_device
#endif
 
#ifndef APP_WRAPPER_FOR_input_register_device
#define APP_WRAPPER_FOR_input_register_device
FUNCTION_WRAPPER(input_register_device, (struct input_dev *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("input_register_device is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = input_register_device(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("input_register_device returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_local_clock
#define APP_WRAPPER_FOR_local_clock
#endif
 
#ifndef APP_WRAPPER_FOR_local_clock
#define APP_WRAPPER_FOR_local_clock
FUNCTION_WRAPPER(local_clock, (), {
    kern_printk("local_clock is invoked.\n");
    PRE_WRAPPER_FUNC();
    u64 ret = local_clock();
    POST_WRAPPER_FUNC();
    kern_printk("local_clock returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_unprep_request
#define APP_WRAPPER_FOR_blk_unprep_request
#endif
 
#ifndef APP_WRAPPER_FOR_blk_unprep_request
#define APP_WRAPPER_FOR_blk_unprep_request
FUNCTION_WRAPPER_VOID(blk_unprep_request, (struct request *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_unprep_request is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    blk_unprep_request(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("blk_unprep_request returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_acpi_pci_osc_control_set
#define APP_WRAPPER_FOR_acpi_pci_osc_control_set
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_pci_osc_control_set
#define APP_WRAPPER_FOR_acpi_pci_osc_control_set
FUNCTION_WRAPPER(acpi_pci_osc_control_set, (acpi_handle handle, u32 *mask, u32 req), {
    kern_printk("acpi_pci_osc_control_set is invoked.\n");
    PRE_WRAPPER_FUNC(handle, mask, req);
    acpi_status ret = acpi_pci_osc_control_set(handle, mask, req);
    POST_WRAPPER_FUNC(handle, mask, req);
    kern_printk("acpi_pci_osc_control_set returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_clear_bdi_congested
#define APP_WRAPPER_FOR_clear_bdi_congested
#endif
 
#ifndef APP_WRAPPER_FOR_clear_bdi_congested
#define APP_WRAPPER_FOR_clear_bdi_congested
FUNCTION_WRAPPER_VOID(clear_bdi_congested, (struct backing_dev_info *bdi, int sync), {
    WRAP_RECURSIVE(bdi);
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
    kern_printk("clear_bdi_congested is invoked.\n");
    PRE_WRAPPER_FUNC(bdi, sync);
    clear_bdi_congested(bdi, sync);
    POST_WRAPPER_FUNC(bdi, sync);
    kern_printk("clear_bdi_congested returned.\n");
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
})
#endif


#ifndef KERN_ADDR_pci_sriov_get_totalvfs
#define APP_WRAPPER_FOR_pci_sriov_get_totalvfs
#endif
 
#ifndef APP_WRAPPER_FOR_pci_sriov_get_totalvfs
#define APP_WRAPPER_FOR_pci_sriov_get_totalvfs
FUNCTION_WRAPPER(pci_sriov_get_totalvfs, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_sriov_get_totalvfs is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pci_sriov_get_totalvfs(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_sriov_get_totalvfs returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_wbinvd_on_all_cpus
#define APP_WRAPPER_FOR_wbinvd_on_all_cpus
#endif
 
#ifndef APP_WRAPPER_FOR_wbinvd_on_all_cpus
#define APP_WRAPPER_FOR_wbinvd_on_all_cpus
FUNCTION_WRAPPER(wbinvd_on_all_cpus, (), {
    kern_printk("wbinvd_on_all_cpus is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = wbinvd_on_all_cpus();
    POST_WRAPPER_FUNC();
    kern_printk("wbinvd_on_all_cpus returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___set_personality
#define APP_WRAPPER_FOR___set_personality
#endif
 
#ifndef APP_WRAPPER_FOR___set_personality
#define APP_WRAPPER_FOR___set_personality
FUNCTION_WRAPPER(__set_personality, (unsigned int _arg1), {
    kern_printk("__set_personality is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = __set_personality(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("__set_personality returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_panic
#define APP_WRAPPER_FOR_panic
#endif
 
#ifndef APP_WRAPPER_FOR_panic
#define APP_WRAPPER_FOR_panic
FUNCTION_WRAPPER_VOID(panic, (const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    // TODO: variadic arguments
    kern_printk("panic is invoked.\n");
    PRE_WRAPPER_FUNC(fmt);
    panic(fmt);
    POST_WRAPPER_FUNC(fmt);
    kern_printk("panic returned.\n");
    va_end(args__);
})
#endif


#ifndef KERN_ADDR_pm_qos_remove_request
#define APP_WRAPPER_FOR_pm_qos_remove_request
#endif
 
#ifndef APP_WRAPPER_FOR_pm_qos_remove_request
#define APP_WRAPPER_FOR_pm_qos_remove_request
FUNCTION_WRAPPER_VOID(pm_qos_remove_request, (struct pm_qos_request *req), {
    WRAP_RECURSIVE(req);
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct pm_qos_request)(*(TO_UNWATCHED_ADDRESS(req)));
    kern_printk("pm_qos_remove_request is invoked.\n");
    PRE_WRAPPER_FUNC(req);
    pm_qos_remove_request(req);
    POST_WRAPPER_FUNC(req);
    kern_printk("pm_qos_remove_request returned.\n");
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct pm_qos_request)(*(TO_UNWATCHED_ADDRESS(req)));
})
#endif


#ifndef KERN_ADDR_bdi_wakeup_thread_delayed
#define APP_WRAPPER_FOR_bdi_wakeup_thread_delayed
#endif
 
#ifndef APP_WRAPPER_FOR_bdi_wakeup_thread_delayed
#define APP_WRAPPER_FOR_bdi_wakeup_thread_delayed
FUNCTION_WRAPPER_VOID(bdi_wakeup_thread_delayed, (struct backing_dev_info *bdi), {
    WRAP_RECURSIVE(bdi);
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
    kern_printk("bdi_wakeup_thread_delayed is invoked.\n");
    PRE_WRAPPER_FUNC(bdi);
    bdi_wakeup_thread_delayed(bdi);
    POST_WRAPPER_FUNC(bdi);
    kern_printk("bdi_wakeup_thread_delayed returned.\n");
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
})
#endif


#ifndef KERN_ADDR_acpi_free
#define APP_WRAPPER_FOR_acpi_free
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_free
#define APP_WRAPPER_FOR_acpi_free
FUNCTION_WRAPPER_VOID(acpi_free, (void *address), {
    kern_printk("acpi_free is invoked.\n");
    PRE_WRAPPER_FUNC(address);
    acpi_free(address);
    POST_WRAPPER_FUNC(address);
    kern_printk("acpi_free returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_bus_release_busn_res
#define APP_WRAPPER_FOR_pci_bus_release_busn_res
#endif
 
#ifndef APP_WRAPPER_FOR_pci_bus_release_busn_res
#define APP_WRAPPER_FOR_pci_bus_release_busn_res
FUNCTION_WRAPPER_VOID(pci_bus_release_busn_res, (struct pci_bus *b), {
    WRAP_RECURSIVE(b);
    TRACES_IF_WATCHPOINT(b);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(b)));
    kern_printk("pci_bus_release_busn_res is invoked.\n");
    PRE_WRAPPER_FUNC(b);
    pci_bus_release_busn_res(b);
    POST_WRAPPER_FUNC(b);
    kern_printk("pci_bus_release_busn_res returned.\n");
    TRACES_IF_WATCHPOINT(b);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(b)));
})
#endif


#ifndef KERN_ADDR_arch_report_meminfo
#define APP_WRAPPER_FOR_arch_report_meminfo
#endif
 
#ifndef APP_WRAPPER_FOR_arch_report_meminfo
#define APP_WRAPPER_FOR_arch_report_meminfo
FUNCTION_WRAPPER_VOID(arch_report_meminfo, (struct seq_file *m), {
    WRAP_RECURSIVE(m);
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
    kern_printk("arch_report_meminfo is invoked.\n");
    PRE_WRAPPER_FUNC(m);
    arch_report_meminfo(m);
    POST_WRAPPER_FUNC(m);
    kern_printk("arch_report_meminfo returned.\n");
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
})
#endif


#ifndef KERN_ADDR_devm_ioremap
#define APP_WRAPPER_FOR_devm_ioremap
#endif
 
#ifndef APP_WRAPPER_FOR_devm_ioremap
#define APP_WRAPPER_FOR_devm_ioremap
FUNCTION_WRAPPER(devm_ioremap, (struct device *dev, resource_size_t offset, unsigned long size), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("devm_ioremap is invoked.\n");
    PRE_WRAPPER_FUNC(dev, offset, size);
    void *ret = devm_ioremap(dev, offset, size);
    POST_WRAPPER_FUNC(dev, offset, size);
    kern_printk("devm_ioremap returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_kstrndup
#define APP_WRAPPER_FOR_kstrndup
#endif
 
#ifndef APP_WRAPPER_FOR_kstrndup
#define APP_WRAPPER_FOR_kstrndup
FUNCTION_WRAPPER(kstrndup, (const char *s, size_t len, gfp_t gfp), {
    kern_printk("kstrndup is invoked.\n");
    PRE_WRAPPER_FUNC(s, len, gfp);
    char *ret = kstrndup(s, len, gfp);
    POST_WRAPPER_FUNC(s, len, gfp);
    kern_printk("kstrndup returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_user_shm_unlock
#define APP_WRAPPER_FOR_user_shm_unlock
#endif
 
#ifndef APP_WRAPPER_FOR_user_shm_unlock
#define APP_WRAPPER_FOR_user_shm_unlock
FUNCTION_WRAPPER_VOID(user_shm_unlock, (size_t _arg1, struct user_struct *_arg2), {
    kern_printk("user_shm_unlock is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    user_shm_unlock(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("user_shm_unlock returned.\n");
})
#endif


#ifndef KERN_ADDR_tcp_sock_destruct
#define APP_WRAPPER_FOR_tcp_sock_destruct
#endif
 
#ifndef APP_WRAPPER_FOR_tcp_sock_destruct
#define APP_WRAPPER_FOR_tcp_sock_destruct
FUNCTION_WRAPPER_VOID(tcp_sock_destruct, (struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("tcp_sock_destruct is invoked.\n");
    PRE_WRAPPER_FUNC(sk);
    tcp_sock_destruct(sk);
    POST_WRAPPER_FUNC(sk);
    kern_printk("tcp_sock_destruct returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR_dm_set_target_max_io_len
#define APP_WRAPPER_FOR_dm_set_target_max_io_len
#endif
 
#ifndef APP_WRAPPER_FOR_dm_set_target_max_io_len
#define APP_WRAPPER_FOR_dm_set_target_max_io_len
FUNCTION_WRAPPER(dm_set_target_max_io_len, (struct dm_target *ti, sector_t len), {
    WRAP_RECURSIVE(ti);
    TRACES_IF_WATCHPOINT(ti);
    SCAN_HEAD_FUNC(struct dm_target)(*(TO_UNWATCHED_ADDRESS(ti)));
    kern_printk("dm_set_target_max_io_len is invoked.\n");
    PRE_WRAPPER_FUNC(ti, len);
    int ret = dm_set_target_max_io_len(ti, len);
    POST_WRAPPER_FUNC(ti, len);
    kern_printk("dm_set_target_max_io_len returned.\n");
    TRACES_IF_WATCHPOINT(ti);
    SCAN_HEAD_FUNC(struct dm_target)(*(TO_UNWATCHED_ADDRESS(ti)));
    return ret;
})
#endif


#ifndef KERN_ADDR_simple_rmdir
#define APP_WRAPPER_FOR_simple_rmdir
#endif
 
#ifndef APP_WRAPPER_FOR_simple_rmdir
#define APP_WRAPPER_FOR_simple_rmdir
FUNCTION_WRAPPER(simple_rmdir, (struct inode *_arg1, struct dentry *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("simple_rmdir is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = simple_rmdir(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("simple_rmdir returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_wait_for_completion_killable
#define APP_WRAPPER_FOR_wait_for_completion_killable
#endif
 
#ifndef APP_WRAPPER_FOR_wait_for_completion_killable
#define APP_WRAPPER_FOR_wait_for_completion_killable
FUNCTION_WRAPPER(wait_for_completion_killable, (struct completion *x), {
    kern_printk("wait_for_completion_killable is invoked.\n");
    PRE_WRAPPER_FUNC(x);
    int ret = wait_for_completion_killable(x);
    POST_WRAPPER_FUNC(x);
    kern_printk("wait_for_completion_killable returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_pm_get_subsys_data
#define APP_WRAPPER_FOR_dev_pm_get_subsys_data
#endif
 
#ifndef APP_WRAPPER_FOR_dev_pm_get_subsys_data
#define APP_WRAPPER_FOR_dev_pm_get_subsys_data
FUNCTION_WRAPPER(dev_pm_get_subsys_data, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_pm_get_subsys_data is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = dev_pm_get_subsys_data(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dev_pm_get_subsys_data returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_put_cmsg
#define APP_WRAPPER_FOR_put_cmsg
#endif
 
#ifndef APP_WRAPPER_FOR_put_cmsg
#define APP_WRAPPER_FOR_put_cmsg
FUNCTION_WRAPPER(put_cmsg, (struct msghdr *_arg1, int level, int type, int len, void *data), {
    kern_printk("put_cmsg is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, level, type, len, data);
    int ret = put_cmsg(_arg1, level, type, len, data);
    POST_WRAPPER_FUNC(_arg1, level, type, len, data);
    kern_printk("put_cmsg returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_mdiobus_write
#define APP_WRAPPER_FOR_mdiobus_write
#endif
 
#ifndef APP_WRAPPER_FOR_mdiobus_write
#define APP_WRAPPER_FOR_mdiobus_write
FUNCTION_WRAPPER(mdiobus_write, (struct mii_bus *bus, int addr, u32 regnum, u16 val), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct mii_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("mdiobus_write is invoked.\n");
    PRE_WRAPPER_FUNC(bus, addr, regnum, val);
    int ret = mdiobus_write(bus, addr, regnum, val);
    POST_WRAPPER_FUNC(bus, addr, regnum, val);
    kern_printk("mdiobus_write returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct mii_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    return ret;
})
#endif


#ifndef KERN_ADDR_work_on_cpu
#define APP_WRAPPER_FOR_work_on_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_work_on_cpu
#define APP_WRAPPER_FOR_work_on_cpu
FUNCTION_WRAPPER(work_on_cpu, (unsigned int cpu, long (*fn)(void *), void *arg), {
    WRAP_FUNCTION(fn);
    kern_printk("work_on_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, fn, arg);
    long ret = work_on_cpu(cpu, fn, arg);
    POST_WRAPPER_FUNC(cpu, fn, arg);
    kern_printk("work_on_cpu returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_do_setitimer
#define APP_WRAPPER_FOR_do_setitimer
#endif
 
#ifndef APP_WRAPPER_FOR_do_setitimer
#define APP_WRAPPER_FOR_do_setitimer
FUNCTION_WRAPPER(do_setitimer, (int which, struct itimerval *value, struct itimerval *ovalue), {
    kern_printk("do_setitimer is invoked.\n");
    PRE_WRAPPER_FUNC(which, value, ovalue);
    int ret = do_setitimer(which, value, ovalue);
    POST_WRAPPER_FUNC(which, value, ovalue);
    kern_printk("do_setitimer returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_elv_may_queue
#define APP_WRAPPER_FOR_elv_may_queue
#endif
 
#ifndef APP_WRAPPER_FOR_elv_may_queue
#define APP_WRAPPER_FOR_elv_may_queue
FUNCTION_WRAPPER(elv_may_queue, (struct request_queue *_arg1, int _arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("elv_may_queue is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = elv_may_queue(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("elv_may_queue returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_track_pfn_copy
#define APP_WRAPPER_FOR_track_pfn_copy
#endif
 
#ifndef APP_WRAPPER_FOR_track_pfn_copy
#define APP_WRAPPER_FOR_track_pfn_copy
FUNCTION_WRAPPER(track_pfn_copy, (struct vm_area_struct *vma), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("track_pfn_copy is invoked.\n");
    PRE_WRAPPER_FUNC(vma);
    int ret = track_pfn_copy(vma);
    POST_WRAPPER_FUNC(vma);
    kern_printk("track_pfn_copy returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kernel_listen
#define APP_WRAPPER_FOR_kernel_listen
#endif
 
#ifndef APP_WRAPPER_FOR_kernel_listen
#define APP_WRAPPER_FOR_kernel_listen
FUNCTION_WRAPPER(kernel_listen, (struct socket *sock, int backlog), {
    WRAP_RECURSIVE(sock);
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    kern_printk("kernel_listen is invoked.\n");
    PRE_WRAPPER_FUNC(sock, backlog);
    int ret = kernel_listen(sock, backlog);
    POST_WRAPPER_FUNC(sock, backlog);
    kern_printk("kernel_listen returned.\n");
    TRACES_IF_WATCHPOINT(sock);
    SCAN_HEAD_FUNC(struct socket)(*(TO_UNWATCHED_ADDRESS(sock)));
    return ret;
})
#endif


#ifndef KERN_ADDR_mutex_trylock
#define APP_WRAPPER_FOR_mutex_trylock
#endif
 
#ifndef APP_WRAPPER_FOR_mutex_trylock
#define APP_WRAPPER_FOR_mutex_trylock
FUNCTION_WRAPPER(mutex_trylock, (struct mutex *lock), {
    WRAP_RECURSIVE(lock);
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
    kern_printk("mutex_trylock is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    int ret = mutex_trylock(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("mutex_trylock returned.\n");
    TRACES_IF_WATCHPOINT(lock);
    SCAN_HEAD_FUNC(struct mutex)(*(TO_UNWATCHED_ADDRESS(lock)));
    return ret;
})
#endif


#ifndef KERN_ADDR_devres_get
#define APP_WRAPPER_FOR_devres_get
#endif
 
#ifndef APP_WRAPPER_FOR_devres_get
#define APP_WRAPPER_FOR_devres_get
FUNCTION_WRAPPER(devres_get, (struct device *dev, void *new_res, dr_match_t match, void *match_data), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_FUNCTION(match);
    kern_printk("devres_get is invoked.\n");
    PRE_WRAPPER_FUNC(dev, new_res, match, match_data);
    void *ret = devres_get(dev, new_res, match, match_data);
    POST_WRAPPER_FUNC(dev, new_res, match, match_data);
    kern_printk("devres_get returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_get_zeroed_page
#define APP_WRAPPER_FOR_get_zeroed_page
#endif
 
#ifndef APP_WRAPPER_FOR_get_zeroed_page
#define APP_WRAPPER_FOR_get_zeroed_page
FUNCTION_WRAPPER(get_zeroed_page, (gfp_t gfp_mask), {
    kern_printk("get_zeroed_page is invoked.\n");
    PRE_WRAPPER_FUNC(gfp_mask);
    long ret = get_zeroed_page(gfp_mask);
    POST_WRAPPER_FUNC(gfp_mask);
    kern_printk("get_zeroed_page returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_neigh_sysctl_unregister
#define APP_WRAPPER_FOR_neigh_sysctl_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_neigh_sysctl_unregister
#define APP_WRAPPER_FOR_neigh_sysctl_unregister
FUNCTION_WRAPPER_VOID(neigh_sysctl_unregister, (struct neigh_parms *p), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct neigh_parms)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("neigh_sysctl_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(p);
    neigh_sysctl_unregister(p);
    POST_WRAPPER_FUNC(p);
    kern_printk("neigh_sysctl_unregister returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct neigh_parms)(*(TO_UNWATCHED_ADDRESS(p)));
})
#endif


#ifndef KERN_ADDR_kthread_should_park
#define APP_WRAPPER_FOR_kthread_should_park
#endif
 
#ifndef APP_WRAPPER_FOR_kthread_should_park
#define APP_WRAPPER_FOR_kthread_should_park
FUNCTION_WRAPPER(kthread_should_park, (), {
    kern_printk("kthread_should_park is invoked.\n");
    PRE_WRAPPER_FUNC();
    bool ret = kthread_should_park();
    POST_WRAPPER_FUNC();
    kern_printk("kthread_should_park returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_write_metadata_buffer
#define APP_WRAPPER_FOR_jbd2_journal_write_metadata_buffer
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_write_metadata_buffer
#define APP_WRAPPER_FOR_jbd2_journal_write_metadata_buffer
FUNCTION_WRAPPER(jbd2_journal_write_metadata_buffer, (transaction_t *transaction, struct journal_head *jh_in, struct journal_head **jh_out, unsigned long long blocknr), {
    WRAP_RECURSIVE(transaction);
    TRACES_IF_WATCHPOINT(transaction);
    SCAN_HEAD_FUNC(transaction_t)(*(TO_UNWATCHED_ADDRESS(transaction)));
    WRAP_RECURSIVE(jh_in);
    TRACES_IF_WATCHPOINT(jh_in);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(jh_in)));
    WRAP_RECURSIVE(jh_out);
    TRACES_IF_WATCHPOINT(jh_out);
    SCAN_HEAD_FUNC(struct journal_head *)(*(TO_UNWATCHED_ADDRESS(jh_out)));
    kern_printk("jbd2_journal_write_metadata_buffer is invoked.\n");
    PRE_WRAPPER_FUNC(transaction, jh_in, jh_out, blocknr);
    int ret = jbd2_journal_write_metadata_buffer(transaction, jh_in, jh_out, blocknr);
    POST_WRAPPER_FUNC(transaction, jh_in, jh_out, blocknr);
    kern_printk("jbd2_journal_write_metadata_buffer returned.\n");
    TRACES_IF_WATCHPOINT(transaction);
    SCAN_HEAD_FUNC(transaction_t)(*(TO_UNWATCHED_ADDRESS(transaction)));
    TRACES_IF_WATCHPOINT(jh_in);
    SCAN_HEAD_FUNC(struct journal_head)(*(TO_UNWATCHED_ADDRESS(jh_in)));
    TRACES_IF_WATCHPOINT(jh_out);
    SCAN_HEAD_FUNC(struct journal_head *)(*(TO_UNWATCHED_ADDRESS(jh_out)));
    return ret;
})
#endif


#ifndef KERN_ADDR_print_cpu_info
#define APP_WRAPPER_FOR_print_cpu_info
#endif
 
#ifndef APP_WRAPPER_FOR_print_cpu_info
#define APP_WRAPPER_FOR_print_cpu_info
FUNCTION_WRAPPER_VOID(print_cpu_info, (struct cpuinfo_x86 *_arg1), {
    kern_printk("print_cpu_info is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    print_cpu_info(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("print_cpu_info returned.\n");
})
#endif


#ifndef KERN_ADDR___cpu_up
#define APP_WRAPPER_FOR___cpu_up
#endif
 
#ifndef APP_WRAPPER_FOR___cpu_up
#define APP_WRAPPER_FOR___cpu_up
FUNCTION_WRAPPER(__cpu_up, (unsigned int cpunum, struct task_struct *tidle), {
    WRAP_RECURSIVE(tidle);
    TRACES_IF_WATCHPOINT(tidle);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tidle)));
    kern_printk("__cpu_up is invoked.\n");
    PRE_WRAPPER_FUNC(cpunum, tidle);
    int ret = __cpu_up(cpunum, tidle);
    POST_WRAPPER_FUNC(cpunum, tidle);
    kern_printk("__cpu_up returned.\n");
    TRACES_IF_WATCHPOINT(tidle);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tidle)));
    return ret;
})
#endif


#ifndef KERN_ADDR___srcu_read_lock
#define APP_WRAPPER_FOR___srcu_read_lock
#endif
 
#ifndef APP_WRAPPER_FOR___srcu_read_lock
#define APP_WRAPPER_FOR___srcu_read_lock
FUNCTION_WRAPPER(__srcu_read_lock, (struct srcu_struct *sp), {
    WRAP_RECURSIVE(sp);
    TRACES_IF_WATCHPOINT(sp);
    SCAN_HEAD_FUNC(struct srcu_struct)(*(TO_UNWATCHED_ADDRESS(sp)));
    kern_printk("__srcu_read_lock is invoked.\n");
    PRE_WRAPPER_FUNC(sp);
    int ret = __srcu_read_lock(sp);
    POST_WRAPPER_FUNC(sp);
    kern_printk("__srcu_read_lock returned.\n");
    TRACES_IF_WATCHPOINT(sp);
    SCAN_HEAD_FUNC(struct srcu_struct)(*(TO_UNWATCHED_ADDRESS(sp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_set_mac_address
#define APP_WRAPPER_FOR_dev_set_mac_address
#endif
 
#ifndef APP_WRAPPER_FOR_dev_set_mac_address
#define APP_WRAPPER_FOR_dev_set_mac_address
FUNCTION_WRAPPER(dev_set_mac_address, (struct net_device *_arg1, struct sockaddr *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("dev_set_mac_address is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = dev_set_mac_address(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("dev_set_mac_address returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_disk_block_events
#define APP_WRAPPER_FOR_disk_block_events
#endif
 
#ifndef APP_WRAPPER_FOR_disk_block_events
#define APP_WRAPPER_FOR_disk_block_events
FUNCTION_WRAPPER_VOID(disk_block_events, (struct gendisk *disk), {
    WRAP_RECURSIVE(disk);
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
    kern_printk("disk_block_events is invoked.\n");
    PRE_WRAPPER_FUNC(disk);
    disk_block_events(disk);
    POST_WRAPPER_FUNC(disk);
    kern_printk("disk_block_events returned.\n");
    TRACES_IF_WATCHPOINT(disk);
    SCAN_HEAD_FUNC(struct gendisk)(*(TO_UNWATCHED_ADDRESS(disk)));
})
#endif


#ifndef KERN_ADDR_resource_alignment
#define APP_WRAPPER_FOR_resource_alignment
#endif
 
#ifndef APP_WRAPPER_FOR_resource_alignment
#define APP_WRAPPER_FOR_resource_alignment
FUNCTION_WRAPPER(resource_alignment, (struct resource *res), {
    kern_printk("resource_alignment is invoked.\n");
    PRE_WRAPPER_FUNC(res);
    resource_size_t ret = resource_alignment(res);
    POST_WRAPPER_FUNC(res);
    kern_printk("resource_alignment returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_wait_on_page_bit_killable
#define APP_WRAPPER_FOR_wait_on_page_bit_killable
#endif
 
#ifndef APP_WRAPPER_FOR_wait_on_page_bit_killable
#define APP_WRAPPER_FOR_wait_on_page_bit_killable
FUNCTION_WRAPPER(wait_on_page_bit_killable, (struct page *page, int bit_nr), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("wait_on_page_bit_killable is invoked.\n");
    PRE_WRAPPER_FUNC(page, bit_nr);
    int ret = wait_on_page_bit_killable(page, bit_nr);
    POST_WRAPPER_FUNC(page, bit_nr);
    kern_printk("wait_on_page_bit_killable returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_exit_io_context
#define APP_WRAPPER_FOR_exit_io_context
#endif
 
#ifndef APP_WRAPPER_FOR_exit_io_context
#define APP_WRAPPER_FOR_exit_io_context
FUNCTION_WRAPPER_VOID(exit_io_context, (struct task_struct *task), {
    WRAP_RECURSIVE(task);
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    kern_printk("exit_io_context is invoked.\n");
    PRE_WRAPPER_FUNC(task);
    exit_io_context(task);
    POST_WRAPPER_FUNC(task);
    kern_printk("exit_io_context returned.\n");
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
})
#endif


#ifndef KERN_ADDR_numa_remove_cpu
#define APP_WRAPPER_FOR_numa_remove_cpu
#endif
 
#ifndef APP_WRAPPER_FOR_numa_remove_cpu
#define APP_WRAPPER_FOR_numa_remove_cpu
FUNCTION_WRAPPER_VOID(numa_remove_cpu, (int cpu), {
    kern_printk("numa_remove_cpu is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    numa_remove_cpu(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("numa_remove_cpu returned.\n");
})
#endif


#ifndef KERN_ADDR_sched_clock_idle_wakeup_event
#define APP_WRAPPER_FOR_sched_clock_idle_wakeup_event
#endif
 
#ifndef APP_WRAPPER_FOR_sched_clock_idle_wakeup_event
#define APP_WRAPPER_FOR_sched_clock_idle_wakeup_event
FUNCTION_WRAPPER_VOID(sched_clock_idle_wakeup_event, (u64 delta_ns), {
    kern_printk("sched_clock_idle_wakeup_event is invoked.\n");
    PRE_WRAPPER_FUNC(delta_ns);
    sched_clock_idle_wakeup_event(delta_ns);
    POST_WRAPPER_FUNC(delta_ns);
    kern_printk("sched_clock_idle_wakeup_event returned.\n");
})
#endif


#ifndef KERN_ADDR_memscan
#define APP_WRAPPER_FOR_memscan
#endif
 
#ifndef APP_WRAPPER_FOR_memscan
#define APP_WRAPPER_FOR_memscan
FUNCTION_WRAPPER(memscan, (void *_arg1, int _arg2, __kernel_size_t _arg3), {
    kern_printk("memscan is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    void *ret = memscan(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("memscan returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_bdi_start_background_writeback
#define APP_WRAPPER_FOR_bdi_start_background_writeback
#endif
 
#ifndef APP_WRAPPER_FOR_bdi_start_background_writeback
#define APP_WRAPPER_FOR_bdi_start_background_writeback
FUNCTION_WRAPPER_VOID(bdi_start_background_writeback, (struct backing_dev_info *bdi), {
    WRAP_RECURSIVE(bdi);
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
    kern_printk("bdi_start_background_writeback is invoked.\n");
    PRE_WRAPPER_FUNC(bdi);
    bdi_start_background_writeback(bdi);
    POST_WRAPPER_FUNC(bdi);
    kern_printk("bdi_start_background_writeback returned.\n");
    TRACES_IF_WATCHPOINT(bdi);
    SCAN_HEAD_FUNC(struct backing_dev_info)(*(TO_UNWATCHED_ADDRESS(bdi)));
})
#endif


#ifndef KERN_ADDR_ata_sas_port_async_resume
#define APP_WRAPPER_FOR_ata_sas_port_async_resume
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sas_port_async_resume
#define APP_WRAPPER_FOR_ata_sas_port_async_resume
FUNCTION_WRAPPER(ata_sas_port_async_resume, (struct ata_port *ap, int *async), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_sas_port_async_resume is invoked.\n");
    PRE_WRAPPER_FUNC(ap, async);
    int ret = ata_sas_port_async_resume(ap, async);
    POST_WRAPPER_FUNC(ap, async);
    kern_printk("ata_sas_port_async_resume returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR_seq_open_private
#define APP_WRAPPER_FOR_seq_open_private
#endif
 
#ifndef APP_WRAPPER_FOR_seq_open_private
#define APP_WRAPPER_FOR_seq_open_private
FUNCTION_WRAPPER(seq_open_private, (struct file *_arg1, const struct seq_operations *_arg2, int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(const struct seq_operations)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("seq_open_private is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = seq_open_private(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("seq_open_private returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(const struct seq_operations)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_get_timer
#define APP_WRAPPER_FOR_acpi_os_get_timer
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_get_timer
#define APP_WRAPPER_FOR_acpi_os_get_timer
FUNCTION_WRAPPER(acpi_os_get_timer, (), {
    kern_printk("acpi_os_get_timer is invoked.\n");
    PRE_WRAPPER_FUNC();
    u64 ret = acpi_os_get_timer();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_os_get_timer returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___setup_vector_irq
#define APP_WRAPPER_FOR___setup_vector_irq
#endif
 
#ifndef APP_WRAPPER_FOR___setup_vector_irq
#define APP_WRAPPER_FOR___setup_vector_irq
FUNCTION_WRAPPER_VOID(__setup_vector_irq, (int cpu), {
    kern_printk("__setup_vector_irq is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    __setup_vector_irq(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("__setup_vector_irq returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_enter_sleep_state_prep
#define APP_WRAPPER_FOR_acpi_enter_sleep_state_prep
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_enter_sleep_state_prep
#define APP_WRAPPER_FOR_acpi_enter_sleep_state_prep
FUNCTION_WRAPPER(acpi_enter_sleep_state_prep, (u8 sleep_state), {
    kern_printk("acpi_enter_sleep_state_prep is invoked.\n");
    PRE_WRAPPER_FUNC(sleep_state);
    acpi_status ret = acpi_enter_sleep_state_prep(sleep_state);
    POST_WRAPPER_FUNC(sleep_state);
    kern_printk("acpi_enter_sleep_state_prep returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_device_show_ulong
#define APP_WRAPPER_FOR_device_show_ulong
#endif
 
#ifndef APP_WRAPPER_FOR_device_show_ulong
#define APP_WRAPPER_FOR_device_show_ulong
FUNCTION_WRAPPER(device_show_ulong, (struct device *dev, struct device_attribute *attr, char *buf), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_RECURSIVE(attr);
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(struct device_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    kern_printk("device_show_ulong is invoked.\n");
    PRE_WRAPPER_FUNC(dev, attr, buf);
    ssize_t ret = device_show_ulong(dev, attr, buf);
    POST_WRAPPER_FUNC(dev, attr, buf);
    kern_printk("device_show_ulong returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    TRACES_IF_WATCHPOINT(attr);
    SCAN_HEAD_FUNC(struct device_attribute)(*(TO_UNWATCHED_ADDRESS(attr)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_read
#define APP_WRAPPER_FOR_vfs_read
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_read
#define APP_WRAPPER_FOR_vfs_read
FUNCTION_WRAPPER(vfs_read, (struct file *_arg1, char *_arg2, size_t _arg3, loff_t *_arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("vfs_read is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    ssize_t ret = vfs_read(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("vfs_read returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pnp_get_resource
#define APP_WRAPPER_FOR_pnp_get_resource
#endif
 
#ifndef APP_WRAPPER_FOR_pnp_get_resource
#define APP_WRAPPER_FOR_pnp_get_resource
FUNCTION_WRAPPER(pnp_get_resource, (struct pnp_dev *dev, unsigned long type, unsigned int num), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pnp_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pnp_get_resource is invoked.\n");
    PRE_WRAPPER_FUNC(dev, type, num);
    struct resource *ret = pnp_get_resource(dev, type, num);
    POST_WRAPPER_FUNC(dev, type, num);
    kern_printk("pnp_get_resource returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pnp_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_seq_release
#define APP_WRAPPER_FOR_seq_release
#endif
 
#ifndef APP_WRAPPER_FOR_seq_release
#define APP_WRAPPER_FOR_seq_release
FUNCTION_WRAPPER(seq_release, (struct inode *_arg1, struct file *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("seq_release is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = seq_release(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("seq_release returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_parse_args
#define APP_WRAPPER_FOR_parse_args
#endif
 
#ifndef APP_WRAPPER_FOR_parse_args
#define APP_WRAPPER_FOR_parse_args
FUNCTION_WRAPPER(parse_args, (const char *name, char *args, const struct kernel_param *params, unsigned int num, s16 level_min, s16 level_max, int (*unknown)(char *, char *, const char *)), {
    WRAP_RECURSIVE(params);
    TRACES_IF_WATCHPOINT(params);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(params)));
    WRAP_FUNCTION(unknown);
    kern_printk("parse_args is invoked.\n");
    PRE_WRAPPER_FUNC(name, args, params, num, level_min, level_max, unknown);
    int ret = parse_args(name, args, params, num, level_min, level_max, unknown);
    POST_WRAPPER_FUNC(name, args, params, num, level_min, level_max, unknown);
    kern_printk("parse_args returned.\n");
    TRACES_IF_WATCHPOINT(params);
    SCAN_HEAD_FUNC(const struct kernel_param)(*(TO_UNWATCHED_ADDRESS(params)));
    return ret;
})
#endif


#ifndef KERN_ADDR_nla_put
#define APP_WRAPPER_FOR_nla_put
#endif
 
#ifndef APP_WRAPPER_FOR_nla_put
#define APP_WRAPPER_FOR_nla_put
FUNCTION_WRAPPER(nla_put, (struct sk_buff *skb, int attrtype, int attrlen, const void *data), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("nla_put is invoked.\n");
    PRE_WRAPPER_FUNC(skb, attrtype, attrlen, data);
    int ret = nla_put(skb, attrtype, attrlen, data);
    POST_WRAPPER_FUNC(skb, attrtype, attrlen, data);
    kern_printk("nla_put returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_clockevents_program_event
#define APP_WRAPPER_FOR_clockevents_program_event
#endif
 
#ifndef APP_WRAPPER_FOR_clockevents_program_event
#define APP_WRAPPER_FOR_clockevents_program_event
FUNCTION_WRAPPER(clockevents_program_event, (struct clock_event_device *dev, ktime_t expires, bool force), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct clock_event_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("clockevents_program_event is invoked.\n");
    PRE_WRAPPER_FUNC(dev, expires, force);
    int ret = clockevents_program_event(dev, expires, force);
    POST_WRAPPER_FUNC(dev, expires, force);
    kern_printk("clockevents_program_event returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct clock_event_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_print_modules
#define APP_WRAPPER_FOR_print_modules
#endif
 
#ifndef APP_WRAPPER_FOR_print_modules
#define APP_WRAPPER_FOR_print_modules
FUNCTION_WRAPPER_VOID(print_modules, (), {
    kern_printk("print_modules is invoked.\n");
    PRE_WRAPPER_FUNC();
    print_modules();
    POST_WRAPPER_FUNC();
    kern_printk("print_modules returned.\n");
})
#endif


#ifndef KERN_ADDR_ns_capable
#define APP_WRAPPER_FOR_ns_capable
#endif
 
#ifndef APP_WRAPPER_FOR_ns_capable
#define APP_WRAPPER_FOR_ns_capable
FUNCTION_WRAPPER(ns_capable, (struct user_namespace *ns, int cap), {
    kern_printk("ns_capable is invoked.\n");
    PRE_WRAPPER_FUNC(ns, cap);
    bool ret = ns_capable(ns, cap);
    POST_WRAPPER_FUNC(ns, cap);
    kern_printk("ns_capable returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blkdev_issue_zeroout
#define APP_WRAPPER_FOR_blkdev_issue_zeroout
#endif
 
#ifndef APP_WRAPPER_FOR_blkdev_issue_zeroout
#define APP_WRAPPER_FOR_blkdev_issue_zeroout
FUNCTION_WRAPPER(blkdev_issue_zeroout, (struct block_device *bdev, sector_t sector, sector_t nr_sects, gfp_t gfp_mask), {
    WRAP_RECURSIVE(bdev);
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    kern_printk("blkdev_issue_zeroout is invoked.\n");
    PRE_WRAPPER_FUNC(bdev, sector, nr_sects, gfp_mask);
    int ret = blkdev_issue_zeroout(bdev, sector, nr_sects, gfp_mask);
    POST_WRAPPER_FUNC(bdev, sector, nr_sects, gfp_mask);
    kern_printk("blkdev_issue_zeroout returned.\n");
    TRACES_IF_WATCHPOINT(bdev);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(bdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dquot_commit
#define APP_WRAPPER_FOR_dquot_commit
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_commit
#define APP_WRAPPER_FOR_dquot_commit
FUNCTION_WRAPPER(dquot_commit, (struct dquot *dquot), {
    WRAP_RECURSIVE(dquot);
    TRACES_IF_WATCHPOINT(dquot);
    SCAN_HEAD_FUNC(struct dquot)(*(TO_UNWATCHED_ADDRESS(dquot)));
    kern_printk("dquot_commit is invoked.\n");
    PRE_WRAPPER_FUNC(dquot);
    int ret = dquot_commit(dquot);
    POST_WRAPPER_FUNC(dquot);
    kern_printk("dquot_commit returned.\n");
    TRACES_IF_WATCHPOINT(dquot);
    SCAN_HEAD_FUNC(struct dquot)(*(TO_UNWATCHED_ADDRESS(dquot)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dma_get_required_mask
#define APP_WRAPPER_FOR_dma_get_required_mask
#endif
 
#ifndef APP_WRAPPER_FOR_dma_get_required_mask
#define APP_WRAPPER_FOR_dma_get_required_mask
FUNCTION_WRAPPER(dma_get_required_mask, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dma_get_required_mask is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    u64 ret = dma_get_required_mask(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("dma_get_required_mask returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_clock_was_set_delayed
#define APP_WRAPPER_FOR_clock_was_set_delayed
#endif
 
#ifndef APP_WRAPPER_FOR_clock_was_set_delayed
#define APP_WRAPPER_FOR_clock_was_set_delayed
FUNCTION_WRAPPER_VOID(clock_was_set_delayed, (), {
    kern_printk("clock_was_set_delayed is invoked.\n");
    PRE_WRAPPER_FUNC();
    clock_was_set_delayed();
    POST_WRAPPER_FUNC();
    kern_printk("clock_was_set_delayed returned.\n");
})
#endif


#ifndef KERN_ADDR_nla_parse
#define APP_WRAPPER_FOR_nla_parse
#endif
 
#ifndef APP_WRAPPER_FOR_nla_parse
#define APP_WRAPPER_FOR_nla_parse
FUNCTION_WRAPPER(nla_parse, (struct nlattr **tb, int maxtype, const struct nlattr *head, int len, const struct nla_policy *policy), {
    kern_printk("nla_parse is invoked.\n");
    PRE_WRAPPER_FUNC(tb, maxtype, head, len, policy);
    int ret = nla_parse(tb, maxtype, head, len, policy);
    POST_WRAPPER_FUNC(tb, maxtype, head, len, policy);
    kern_printk("nla_parse returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_in_lock_functions
#define APP_WRAPPER_FOR_in_lock_functions
#endif
 
#ifndef APP_WRAPPER_FOR_in_lock_functions
#define APP_WRAPPER_FOR_in_lock_functions
FUNCTION_WRAPPER(in_lock_functions, (unsigned long addr), {
    kern_printk("in_lock_functions is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    int ret = in_lock_functions(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("in_lock_functions returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_hrtimer_run_pending
#define APP_WRAPPER_FOR_hrtimer_run_pending
#endif
 
#ifndef APP_WRAPPER_FOR_hrtimer_run_pending
#define APP_WRAPPER_FOR_hrtimer_run_pending
FUNCTION_WRAPPER_VOID(hrtimer_run_pending, (), {
    kern_printk("hrtimer_run_pending is invoked.\n");
    PRE_WRAPPER_FUNC();
    hrtimer_run_pending();
    POST_WRAPPER_FUNC();
    kern_printk("hrtimer_run_pending returned.\n");
})
#endif


#ifndef KERN_ADDR_rtnl_notify
#define APP_WRAPPER_FOR_rtnl_notify
#endif
 
#ifndef APP_WRAPPER_FOR_rtnl_notify
#define APP_WRAPPER_FOR_rtnl_notify
FUNCTION_WRAPPER_VOID(rtnl_notify, (struct sk_buff *skb, struct net *net, u32 pid, u32 group, struct nlmsghdr *nlh, gfp_t flags), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    WRAP_RECURSIVE(net);
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
    kern_printk("rtnl_notify is invoked.\n");
    PRE_WRAPPER_FUNC(skb, net, pid, group, nlh, flags);
    rtnl_notify(skb, net, pid, group, nlh, flags);
    POST_WRAPPER_FUNC(skb, net, pid, group, nlh, flags);
    kern_printk("rtnl_notify returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    TRACES_IF_WATCHPOINT(net);
    SCAN_HEAD_FUNC(struct net)(*(TO_UNWATCHED_ADDRESS(net)));
})
#endif


#ifndef KERN_ADDR_emergency_remount
#define APP_WRAPPER_FOR_emergency_remount
#endif
 
#ifndef APP_WRAPPER_FOR_emergency_remount
#define APP_WRAPPER_FOR_emergency_remount
FUNCTION_WRAPPER_VOID(emergency_remount, (), {
    kern_printk("emergency_remount is invoked.\n");
    PRE_WRAPPER_FUNC();
    emergency_remount();
    POST_WRAPPER_FUNC();
    kern_printk("emergency_remount returned.\n");
})
#endif


#ifndef KERN_ADDR_cgroup_add_cftypes
#define APP_WRAPPER_FOR_cgroup_add_cftypes
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_add_cftypes
#define APP_WRAPPER_FOR_cgroup_add_cftypes
FUNCTION_WRAPPER(cgroup_add_cftypes, (struct cgroup_subsys *ss, struct cftype *cfts), {
    WRAP_RECURSIVE(ss);
    TRACES_IF_WATCHPOINT(ss);
    SCAN_HEAD_FUNC(struct cgroup_subsys)(*(TO_UNWATCHED_ADDRESS(ss)));
    WRAP_RECURSIVE(cfts);
    TRACES_IF_WATCHPOINT(cfts);
    SCAN_HEAD_FUNC(struct cftype)(*(TO_UNWATCHED_ADDRESS(cfts)));
    kern_printk("cgroup_add_cftypes is invoked.\n");
    PRE_WRAPPER_FUNC(ss, cfts);
    int ret = cgroup_add_cftypes(ss, cfts);
    POST_WRAPPER_FUNC(ss, cfts);
    kern_printk("cgroup_add_cftypes returned.\n");
    TRACES_IF_WATCHPOINT(ss);
    SCAN_HEAD_FUNC(struct cgroup_subsys)(*(TO_UNWATCHED_ADDRESS(ss)));
    TRACES_IF_WATCHPOINT(cfts);
    SCAN_HEAD_FUNC(struct cftype)(*(TO_UNWATCHED_ADDRESS(cfts)));
    return ret;
})
#endif


#ifndef KERN_ADDR_file_remove_suid
#define APP_WRAPPER_FOR_file_remove_suid
#endif
 
#ifndef APP_WRAPPER_FOR_file_remove_suid
#define APP_WRAPPER_FOR_file_remove_suid
FUNCTION_WRAPPER(file_remove_suid, (struct file *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("file_remove_suid is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = file_remove_suid(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("file_remove_suid returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_smp_error_interrupt
#define APP_WRAPPER_FOR_smp_error_interrupt
#endif
 
#ifndef APP_WRAPPER_FOR_smp_error_interrupt
#define APP_WRAPPER_FOR_smp_error_interrupt
FUNCTION_WRAPPER_VOID(smp_error_interrupt, (struct pt_regs *_arg1), {
    kern_printk("smp_error_interrupt is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    smp_error_interrupt(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("smp_error_interrupt returned.\n");
})
#endif


#ifndef KERN_ADDR_softirq_init
#define APP_WRAPPER_FOR_softirq_init
#endif
 
#ifndef APP_WRAPPER_FOR_softirq_init
#define APP_WRAPPER_FOR_softirq_init
FUNCTION_WRAPPER_VOID(softirq_init, (), {
    kern_printk("softirq_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    softirq_init();
    POST_WRAPPER_FUNC();
    kern_printk("softirq_init returned.\n");
})
#endif


#ifndef KERN_ADDR_proc_dointvec_userhz_jiffies
#define APP_WRAPPER_FOR_proc_dointvec_userhz_jiffies
#endif
 
#ifndef APP_WRAPPER_FOR_proc_dointvec_userhz_jiffies
#define APP_WRAPPER_FOR_proc_dointvec_userhz_jiffies
FUNCTION_WRAPPER(proc_dointvec_userhz_jiffies, (struct ctl_table *_arg1, int _arg2, void *_arg3, size_t *_arg4, loff_t *_arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("proc_dointvec_userhz_jiffies is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = proc_dointvec_userhz_jiffies(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("proc_dointvec_userhz_jiffies returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kobj_ns_initial
#define APP_WRAPPER_FOR_kobj_ns_initial
#endif
 
#ifndef APP_WRAPPER_FOR_kobj_ns_initial
#define APP_WRAPPER_FOR_kobj_ns_initial
FUNCTION_WRAPPER(kobj_ns_initial, (enum kobj_ns_type type), {
    kern_printk("kobj_ns_initial is invoked.\n");
    PRE_WRAPPER_FUNC(type);
    const void *ret = kobj_ns_initial(type);
    POST_WRAPPER_FUNC(type);
    kern_printk("kobj_ns_initial returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_crypto_ahash_setkey
#define APP_WRAPPER_FOR_crypto_ahash_setkey
#endif
 
#ifndef APP_WRAPPER_FOR_crypto_ahash_setkey
#define APP_WRAPPER_FOR_crypto_ahash_setkey
FUNCTION_WRAPPER(crypto_ahash_setkey, (struct crypto_ahash *tfm, const u8 *key, unsigned int keylen), {
    WRAP_RECURSIVE(tfm);
    TRACES_IF_WATCHPOINT(tfm);
    SCAN_HEAD_FUNC(struct crypto_ahash)(*(TO_UNWATCHED_ADDRESS(tfm)));
    kern_printk("crypto_ahash_setkey is invoked.\n");
    PRE_WRAPPER_FUNC(tfm, key, keylen);
    int ret = crypto_ahash_setkey(tfm, key, keylen);
    POST_WRAPPER_FUNC(tfm, key, keylen);
    kern_printk("crypto_ahash_setkey returned.\n");
    TRACES_IF_WATCHPOINT(tfm);
    SCAN_HEAD_FUNC(struct crypto_ahash)(*(TO_UNWATCHED_ADDRESS(tfm)));
    return ret;
})
#endif


#ifndef KERN_ADDR_scsi_rescan_device
#define APP_WRAPPER_FOR_scsi_rescan_device
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_rescan_device
#define APP_WRAPPER_FOR_scsi_rescan_device
FUNCTION_WRAPPER_VOID(scsi_rescan_device, (struct device *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("scsi_rescan_device is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    scsi_rescan_device(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("scsi_rescan_device returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_input_free_minor
#define APP_WRAPPER_FOR_input_free_minor
#endif
 
#ifndef APP_WRAPPER_FOR_input_free_minor
#define APP_WRAPPER_FOR_input_free_minor
FUNCTION_WRAPPER_VOID(input_free_minor, (unsigned int minor), {
    kern_printk("input_free_minor is invoked.\n");
    PRE_WRAPPER_FUNC(minor);
    input_free_minor(minor);
    POST_WRAPPER_FUNC(minor);
    kern_printk("input_free_minor returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_walk_namespace
#define APP_WRAPPER_FOR_acpi_walk_namespace
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_walk_namespace
#define APP_WRAPPER_FOR_acpi_walk_namespace
FUNCTION_WRAPPER(acpi_walk_namespace, (acpi_object_type type, acpi_handle start_object, u32 max_depth, acpi_walk_callback pre_order_visit, acpi_walk_callback post_order_visit, void *context, void **return_value), {
    WRAP_FUNCTION(pre_order_visit);
    WRAP_FUNCTION(post_order_visit);
    kern_printk("acpi_walk_namespace is invoked.\n");
    PRE_WRAPPER_FUNC(type, start_object, max_depth, pre_order_visit, post_order_visit, context, return_value);
    acpi_status ret = acpi_walk_namespace(type, start_object, max_depth, pre_order_visit, post_order_visit, context, return_value);
    POST_WRAPPER_FUNC(type, start_object, max_depth, pre_order_visit, post_order_visit, context, return_value);
    kern_printk("acpi_walk_namespace returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_send_sigtrap
#define APP_WRAPPER_FOR_send_sigtrap
#endif
 
#ifndef APP_WRAPPER_FOR_send_sigtrap
#define APP_WRAPPER_FOR_send_sigtrap
FUNCTION_WRAPPER_VOID(send_sigtrap, (struct task_struct *tsk, struct pt_regs *regs, int error_code, int si_code), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("send_sigtrap is invoked.\n");
    PRE_WRAPPER_FUNC(tsk, regs, error_code, si_code);
    send_sigtrap(tsk, regs, error_code, si_code);
    POST_WRAPPER_FUNC(tsk, regs, error_code, si_code);
    kern_printk("send_sigtrap returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
})
#endif


#ifndef KERN_ADDR_add_range
#define APP_WRAPPER_FOR_add_range
#endif
 
#ifndef APP_WRAPPER_FOR_add_range
#define APP_WRAPPER_FOR_add_range
FUNCTION_WRAPPER(add_range, (struct range *range, int az, int nr_range, u64 start, u64 end), {
    kern_printk("add_range is invoked.\n");
    PRE_WRAPPER_FUNC(range, az, nr_range, start, end);
    int ret = add_range(range, az, nr_range, start, end);
    POST_WRAPPER_FUNC(range, az, nr_range, start, end);
    kern_printk("add_range returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_arch_sd_sibiling_asym_packing
#define APP_WRAPPER_FOR_arch_sd_sibiling_asym_packing
#endif
 
#ifndef APP_WRAPPER_FOR_arch_sd_sibiling_asym_packing
#define APP_WRAPPER_FOR_arch_sd_sibiling_asym_packing
FUNCTION_WRAPPER(arch_sd_sibiling_asym_packing, (), {
    kern_printk("arch_sd_sibiling_asym_packing is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = arch_sd_sibiling_asym_packing();
    POST_WRAPPER_FUNC();
    kern_printk("arch_sd_sibiling_asym_packing returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_open_softirq
#define APP_WRAPPER_FOR_open_softirq
#endif
 
#ifndef APP_WRAPPER_FOR_open_softirq
#define APP_WRAPPER_FOR_open_softirq
FUNCTION_WRAPPER_VOID(open_softirq, (int nr, void (*action)(struct softirq_action *)), {
    WRAP_FUNCTION(action);
    kern_printk("open_softirq is invoked.\n");
    PRE_WRAPPER_FUNC(nr, action);
    open_softirq(nr, action);
    POST_WRAPPER_FUNC(nr, action);
    kern_printk("open_softirq returned.\n");
})
#endif


#ifndef KERN_ADDR_dma_memcpy_pg_to_iovec
#define APP_WRAPPER_FOR_dma_memcpy_pg_to_iovec
#endif
 
#ifndef APP_WRAPPER_FOR_dma_memcpy_pg_to_iovec
#define APP_WRAPPER_FOR_dma_memcpy_pg_to_iovec
FUNCTION_WRAPPER(dma_memcpy_pg_to_iovec, (struct dma_chan *chan, struct iovec *iov, struct dma_pinned_list *pinned_list, struct page *page, unsigned int offset, size_t len), {
    WRAP_RECURSIVE(chan);
    TRACES_IF_WATCHPOINT(chan);
    SCAN_HEAD_FUNC(struct dma_chan)(*(TO_UNWATCHED_ADDRESS(chan)));
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("dma_memcpy_pg_to_iovec is invoked.\n");
    PRE_WRAPPER_FUNC(chan, iov, pinned_list, page, offset, len);
    dma_cookie_t ret = dma_memcpy_pg_to_iovec(chan, iov, pinned_list, page, offset, len);
    POST_WRAPPER_FUNC(chan, iov, pinned_list, page, offset, len);
    kern_printk("dma_memcpy_pg_to_iovec returned.\n");
    TRACES_IF_WATCHPOINT(chan);
    SCAN_HEAD_FUNC(struct dma_chan)(*(TO_UNWATCHED_ADDRESS(chan)));
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_check_tsc_unstable
#define APP_WRAPPER_FOR_check_tsc_unstable
#endif
 
#ifndef APP_WRAPPER_FOR_check_tsc_unstable
#define APP_WRAPPER_FOR_check_tsc_unstable
FUNCTION_WRAPPER(check_tsc_unstable, (), {
    kern_printk("check_tsc_unstable is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = check_tsc_unstable();
    POST_WRAPPER_FUNC();
    kern_printk("check_tsc_unstable returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_netdev_run_todo
#define APP_WRAPPER_FOR_netdev_run_todo
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_run_todo
#define APP_WRAPPER_FOR_netdev_run_todo
FUNCTION_WRAPPER_VOID(netdev_run_todo, (), {
    kern_printk("netdev_run_todo is invoked.\n");
    PRE_WRAPPER_FUNC();
    netdev_run_todo();
    POST_WRAPPER_FUNC();
    kern_printk("netdev_run_todo returned.\n");
})
#endif


#ifndef KERN_ADDR_compat_sys_adjtimex
#define APP_WRAPPER_FOR_compat_sys_adjtimex
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_adjtimex
#define APP_WRAPPER_FOR_compat_sys_adjtimex
FUNCTION_WRAPPER(compat_sys_adjtimex, (struct compat_timex *utp), {
    kern_printk("compat_sys_adjtimex is invoked.\n");
    PRE_WRAPPER_FUNC(utp);
    long ret = compat_sys_adjtimex(utp);
    POST_WRAPPER_FUNC(utp);
    kern_printk("compat_sys_adjtimex returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pud_clear_bad
#define APP_WRAPPER_FOR_pud_clear_bad
#endif
 
#ifndef APP_WRAPPER_FOR_pud_clear_bad
#define APP_WRAPPER_FOR_pud_clear_bad
FUNCTION_WRAPPER_VOID(pud_clear_bad, (pud_t *_arg1), {
    kern_printk("pud_clear_bad is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    pud_clear_bad(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("pud_clear_bad returned.\n");
})
#endif


#ifndef KERN_ADDR_request_resource
#define APP_WRAPPER_FOR_request_resource
#endif
 
#ifndef APP_WRAPPER_FOR_request_resource
#define APP_WRAPPER_FOR_request_resource
FUNCTION_WRAPPER(request_resource, (struct resource *root, struct resource *new_), {
    kern_printk("request_resource is invoked.\n");
    PRE_WRAPPER_FUNC(root, new_);
    int ret = request_resource(root, new_);
    POST_WRAPPER_FUNC(root, new_);
    kern_printk("request_resource returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_netdev_emerg
#define APP_WRAPPER_FOR_netdev_emerg
#endif
 
#ifndef APP_WRAPPER_FOR_netdev_emerg
#define APP_WRAPPER_FOR_netdev_emerg
FUNCTION_WRAPPER(netdev_emerg, (const struct net_device *dev, const char *format, ...), {
    va_list args__;
    va_start(args__, format);
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    // TODO: variadic arguments
    kern_printk("netdev_emerg is invoked.\n");
    PRE_WRAPPER_FUNC(dev, format);
    int ret = netdev_emerg(dev, format);
    POST_WRAPPER_FUNC(dev, format);
    kern_printk("netdev_emerg returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_iomem_is_exclusive
#define APP_WRAPPER_FOR_iomem_is_exclusive
#endif
 
#ifndef APP_WRAPPER_FOR_iomem_is_exclusive
#define APP_WRAPPER_FOR_iomem_is_exclusive
FUNCTION_WRAPPER(iomem_is_exclusive, (u64 addr), {
    kern_printk("iomem_is_exclusive is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    int ret = iomem_is_exclusive(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("iomem_is_exclusive returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_sched_proc_update_handler
#define APP_WRAPPER_FOR_sched_proc_update_handler
#endif
 
#ifndef APP_WRAPPER_FOR_sched_proc_update_handler
#define APP_WRAPPER_FOR_sched_proc_update_handler
FUNCTION_WRAPPER(sched_proc_update_handler, (struct ctl_table *table, int write, void *buffer, size_t *length, loff_t *ppos), {
    WRAP_RECURSIVE(table);
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    kern_printk("sched_proc_update_handler is invoked.\n");
    PRE_WRAPPER_FUNC(table, write, buffer, length, ppos);
    int ret = sched_proc_update_handler(table, write, buffer, length, ppos);
    POST_WRAPPER_FUNC(table, write, buffer, length, ppos);
    kern_printk("sched_proc_update_handler returned.\n");
    TRACES_IF_WATCHPOINT(table);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(table)));
    return ret;
})
#endif


#ifndef KERN_ADDR_set_cpu_sibling_map
#define APP_WRAPPER_FOR_set_cpu_sibling_map
#endif
 
#ifndef APP_WRAPPER_FOR_set_cpu_sibling_map
#define APP_WRAPPER_FOR_set_cpu_sibling_map
FUNCTION_WRAPPER_VOID(set_cpu_sibling_map, (int cpu), {
    kern_printk("set_cpu_sibling_map is invoked.\n");
    PRE_WRAPPER_FUNC(cpu);
    set_cpu_sibling_map(cpu);
    POST_WRAPPER_FUNC(cpu);
    kern_printk("set_cpu_sibling_map returned.\n");
})
#endif


#ifndef KERN_ADDR_dm_table_create
#define APP_WRAPPER_FOR_dm_table_create
#endif
 
#ifndef APP_WRAPPER_FOR_dm_table_create
#define APP_WRAPPER_FOR_dm_table_create
FUNCTION_WRAPPER(dm_table_create, (struct dm_table **result, fmode_t mode, unsigned int num_targets, struct mapped_device *md), {
    kern_printk("dm_table_create is invoked.\n");
    PRE_WRAPPER_FUNC(result, mode, num_targets, md);
    int ret = dm_table_create(result, mode, num_targets, md);
    POST_WRAPPER_FUNC(result, mode, num_targets, md);
    kern_printk("dm_table_create returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_keyring_add_key
#define APP_WRAPPER_FOR_keyring_add_key
#endif
 
#ifndef APP_WRAPPER_FOR_keyring_add_key
#define APP_WRAPPER_FOR_keyring_add_key
FUNCTION_WRAPPER(keyring_add_key, (struct key *keyring, struct key *key), {
    kern_printk("keyring_add_key is invoked.\n");
    PRE_WRAPPER_FUNC(keyring, key);
    int ret = keyring_add_key(keyring, key);
    POST_WRAPPER_FUNC(keyring, key);
    kern_printk("keyring_add_key returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_native_io_apic_write
#define APP_WRAPPER_FOR_native_io_apic_write
#endif
 
#ifndef APP_WRAPPER_FOR_native_io_apic_write
#define APP_WRAPPER_FOR_native_io_apic_write
FUNCTION_WRAPPER_VOID(native_io_apic_write, (unsigned int apic, unsigned int reg, unsigned int val), {
    kern_printk("native_io_apic_write is invoked.\n");
    PRE_WRAPPER_FUNC(apic, reg, val);
    native_io_apic_write(apic, reg, val);
    POST_WRAPPER_FUNC(apic, reg, val);
    kern_printk("native_io_apic_write returned.\n");
})
#endif


#ifndef KERN_ADDR_get_user_pages
#define APP_WRAPPER_FOR_get_user_pages
#endif
 
#ifndef APP_WRAPPER_FOR_get_user_pages
#define APP_WRAPPER_FOR_get_user_pages
FUNCTION_WRAPPER(get_user_pages, (struct task_struct *tsk, struct mm_struct *mm, unsigned long start, int nr_pages, int write, int force, struct page **pages, struct vm_area_struct **vmas), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    WRAP_RECURSIVE(pages);
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    WRAP_RECURSIVE(vmas);
    TRACES_IF_WATCHPOINT(vmas);
    SCAN_HEAD_FUNC(struct vm_area_struct *)(*(TO_UNWATCHED_ADDRESS(vmas)));
    kern_printk("get_user_pages is invoked.\n");
    PRE_WRAPPER_FUNC(tsk, mm, start, nr_pages, write, force, pages, vmas);
    int ret = get_user_pages(tsk, mm, start, nr_pages, write, force, pages, vmas);
    POST_WRAPPER_FUNC(tsk, mm, start, nr_pages, write, force, pages, vmas);
    kern_printk("get_user_pages returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    TRACES_IF_WATCHPOINT(pages);
    SCAN_HEAD_FUNC(struct page *)(*(TO_UNWATCHED_ADDRESS(pages)));
    TRACES_IF_WATCHPOINT(vmas);
    SCAN_HEAD_FUNC(struct vm_area_struct *)(*(TO_UNWATCHED_ADDRESS(vmas)));
    return ret;
})
#endif


#ifndef KERN_ADDR_zone_grow_waitqueues
#define APP_WRAPPER_FOR_zone_grow_waitqueues
#endif
 
#ifndef APP_WRAPPER_FOR_zone_grow_waitqueues
#define APP_WRAPPER_FOR_zone_grow_waitqueues
FUNCTION_WRAPPER(zone_grow_waitqueues, (struct zone *zone, unsigned long nr_pages), {
    WRAP_RECURSIVE(zone);
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    kern_printk("zone_grow_waitqueues is invoked.\n");
    PRE_WRAPPER_FUNC(zone, nr_pages);
    int ret = zone_grow_waitqueues(zone, nr_pages);
    POST_WRAPPER_FUNC(zone, nr_pages);
    kern_printk("zone_grow_waitqueues returned.\n");
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    return ret;
})
#endif


#ifndef KERN_ADDR___alloc_percpu
#define APP_WRAPPER_FOR___alloc_percpu
#endif
 
#ifndef APP_WRAPPER_FOR___alloc_percpu
#define APP_WRAPPER_FOR___alloc_percpu
FUNCTION_WRAPPER(__alloc_percpu, (size_t size, size_t align), {
    kern_printk("__alloc_percpu is invoked.\n");
    PRE_WRAPPER_FUNC(size, align);
    void *ret = __alloc_percpu(size, align);
    POST_WRAPPER_FUNC(size, align);
    kern_printk("__alloc_percpu returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_posix_acl_valid
#define APP_WRAPPER_FOR_posix_acl_valid
#endif
 
#ifndef APP_WRAPPER_FOR_posix_acl_valid
#define APP_WRAPPER_FOR_posix_acl_valid
FUNCTION_WRAPPER(posix_acl_valid, (const struct posix_acl *_arg1), {
    kern_printk("posix_acl_valid is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = posix_acl_valid(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("posix_acl_valid returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_do_truncate
#define APP_WRAPPER_FOR_do_truncate
#endif
 
#ifndef APP_WRAPPER_FOR_do_truncate
#define APP_WRAPPER_FOR_do_truncate
FUNCTION_WRAPPER(do_truncate, (struct dentry *_arg1, loff_t start, unsigned int time_attrs, struct file *filp), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(filp);
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    kern_printk("do_truncate is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, start, time_attrs, filp);
    int ret = do_truncate(_arg1, start, time_attrs, filp);
    POST_WRAPPER_FUNC(_arg1, start, time_attrs, filp);
    kern_printk("do_truncate returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(filp);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(filp)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dev_pm_qos_expose_latency_limit
#define APP_WRAPPER_FOR_dev_pm_qos_expose_latency_limit
#endif
 
#ifndef APP_WRAPPER_FOR_dev_pm_qos_expose_latency_limit
#define APP_WRAPPER_FOR_dev_pm_qos_expose_latency_limit
FUNCTION_WRAPPER(dev_pm_qos_expose_latency_limit, (struct device *dev, s32 value), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("dev_pm_qos_expose_latency_limit is invoked.\n");
    PRE_WRAPPER_FUNC(dev, value);
    int ret = dev_pm_qos_expose_latency_limit(dev, value);
    POST_WRAPPER_FUNC(dev, value);
    kern_printk("dev_pm_qos_expose_latency_limit returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_attach_pid
#define APP_WRAPPER_FOR_attach_pid
#endif
 
#ifndef APP_WRAPPER_FOR_attach_pid
#define APP_WRAPPER_FOR_attach_pid
FUNCTION_WRAPPER_VOID(attach_pid, (struct task_struct *task, enum pid_type type, struct pid *pid), {
    WRAP_RECURSIVE(task);
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    WRAP_RECURSIVE(pid);
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
    kern_printk("attach_pid is invoked.\n");
    PRE_WRAPPER_FUNC(task, type, pid);
    attach_pid(task, type, pid);
    POST_WRAPPER_FUNC(task, type, pid);
    kern_printk("attach_pid returned.\n");
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
})
#endif


#ifndef KERN_ADDR__atomic_dec_and_lock
#define APP_WRAPPER_FOR__atomic_dec_and_lock
#endif
 
#ifndef APP_WRAPPER_FOR__atomic_dec_and_lock
#define APP_WRAPPER_FOR__atomic_dec_and_lock
FUNCTION_WRAPPER(_atomic_dec_and_lock, (atomic_t *atomic, spinlock_t *lock), {
    kern_printk("_atomic_dec_and_lock is invoked.\n");
    PRE_WRAPPER_FUNC(atomic, lock);
    int ret = _atomic_dec_and_lock(atomic, lock);
    POST_WRAPPER_FUNC(atomic, lock);
    kern_printk("_atomic_dec_and_lock returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_reqsk_fastopen_remove
#define APP_WRAPPER_FOR_reqsk_fastopen_remove
#endif
 
#ifndef APP_WRAPPER_FOR_reqsk_fastopen_remove
#define APP_WRAPPER_FOR_reqsk_fastopen_remove
FUNCTION_WRAPPER_VOID(reqsk_fastopen_remove, (struct sock *sk, struct request_sock *req, bool reset), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    WRAP_RECURSIVE(req);
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct request_sock)(*(TO_UNWATCHED_ADDRESS(req)));
    kern_printk("reqsk_fastopen_remove is invoked.\n");
    PRE_WRAPPER_FUNC(sk, req, reset);
    reqsk_fastopen_remove(sk, req, reset);
    POST_WRAPPER_FUNC(sk, req, reset);
    kern_printk("reqsk_fastopen_remove returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    TRACES_IF_WATCHPOINT(req);
    SCAN_HEAD_FUNC(struct request_sock)(*(TO_UNWATCHED_ADDRESS(req)));
})
#endif


#ifndef KERN_ADDR_arch_reserve_mem_area
#define APP_WRAPPER_FOR_arch_reserve_mem_area
#endif
 
#ifndef APP_WRAPPER_FOR_arch_reserve_mem_area
#define APP_WRAPPER_FOR_arch_reserve_mem_area
FUNCTION_WRAPPER_VOID(arch_reserve_mem_area, (acpi_physical_address addr, size_t size), {
    kern_printk("arch_reserve_mem_area is invoked.\n");
    PRE_WRAPPER_FUNC(addr, size);
    arch_reserve_mem_area(addr, size);
    POST_WRAPPER_FUNC(addr, size);
    kern_printk("arch_reserve_mem_area returned.\n");
})
#endif


#ifndef KERN_ADDR_compat_sys_process_vm_readv
#define APP_WRAPPER_FOR_compat_sys_process_vm_readv
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_process_vm_readv
#define APP_WRAPPER_FOR_compat_sys_process_vm_readv
FUNCTION_WRAPPER(compat_sys_process_vm_readv, (compat_pid_t pid, const struct compat_iovec *lvec, unsigned long liovcnt, const struct compat_iovec *rvec, unsigned long riovcnt, unsigned long flags), {
    kern_printk("compat_sys_process_vm_readv is invoked.\n");
    PRE_WRAPPER_FUNC(pid, lvec, liovcnt, rvec, riovcnt, flags);
    ssize_t ret = compat_sys_process_vm_readv(pid, lvec, liovcnt, rvec, riovcnt, flags);
    POST_WRAPPER_FUNC(pid, lvec, liovcnt, rvec, riovcnt, flags);
    kern_printk("compat_sys_process_vm_readv returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_kmem_cache_init_late
#define APP_WRAPPER_FOR_kmem_cache_init_late
#endif
 
#ifndef APP_WRAPPER_FOR_kmem_cache_init_late
#define APP_WRAPPER_FOR_kmem_cache_init_late
FUNCTION_WRAPPER_VOID(kmem_cache_init_late, (), {
    kern_printk("kmem_cache_init_late is invoked.\n");
    PRE_WRAPPER_FUNC();
    kmem_cache_init_late();
    POST_WRAPPER_FUNC();
    kern_printk("kmem_cache_init_late returned.\n");
})
#endif


#ifndef KERN_ADDR_pm_generic_restore_early
#define APP_WRAPPER_FOR_pm_generic_restore_early
#endif
 
#ifndef APP_WRAPPER_FOR_pm_generic_restore_early
#define APP_WRAPPER_FOR_pm_generic_restore_early
FUNCTION_WRAPPER(pm_generic_restore_early, (struct device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pm_generic_restore_early is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    int ret = pm_generic_restore_early(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pm_generic_restore_early returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_remove_inode_buffers
#define APP_WRAPPER_FOR_remove_inode_buffers
#endif
 
#ifndef APP_WRAPPER_FOR_remove_inode_buffers
#define APP_WRAPPER_FOR_remove_inode_buffers
FUNCTION_WRAPPER(remove_inode_buffers, (struct inode *inode), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    kern_printk("remove_inode_buffers is invoked.\n");
    PRE_WRAPPER_FUNC(inode);
    int ret = remove_inode_buffers(inode);
    POST_WRAPPER_FUNC(inode);
    kern_printk("remove_inode_buffers returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dmaengine_get
#define APP_WRAPPER_FOR_dmaengine_get
#endif
 
#ifndef APP_WRAPPER_FOR_dmaengine_get
#define APP_WRAPPER_FOR_dmaengine_get
FUNCTION_WRAPPER_VOID(dmaengine_get, (), {
    kern_printk("dmaengine_get is invoked.\n");
    PRE_WRAPPER_FUNC();
    dmaengine_get();
    POST_WRAPPER_FUNC();
    kern_printk("dmaengine_get returned.\n");
})
#endif


#ifndef KERN_ADDR_sched_destroy_group
#define APP_WRAPPER_FOR_sched_destroy_group
#endif
 
#ifndef APP_WRAPPER_FOR_sched_destroy_group
#define APP_WRAPPER_FOR_sched_destroy_group
FUNCTION_WRAPPER_VOID(sched_destroy_group, (struct task_group *tg), {
    kern_printk("sched_destroy_group is invoked.\n");
    PRE_WRAPPER_FUNC(tg);
    sched_destroy_group(tg);
    POST_WRAPPER_FUNC(tg);
    kern_printk("sched_destroy_group returned.\n");
})
#endif


#ifndef KERN_ADDR_compat_sys_fcntl64
#define APP_WRAPPER_FOR_compat_sys_fcntl64
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_fcntl64
#define APP_WRAPPER_FOR_compat_sys_fcntl64
FUNCTION_WRAPPER(compat_sys_fcntl64, (unsigned int fd, unsigned int cmd, unsigned long arg), {
    kern_printk("compat_sys_fcntl64 is invoked.\n");
    PRE_WRAPPER_FUNC(fd, cmd, arg);
    long ret = compat_sys_fcntl64(fd, cmd, arg);
    POST_WRAPPER_FUNC(fd, cmd, arg);
    kern_printk("compat_sys_fcntl64 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_next_pidmap
#define APP_WRAPPER_FOR_next_pidmap
#endif
 
#ifndef APP_WRAPPER_FOR_next_pidmap
#define APP_WRAPPER_FOR_next_pidmap
FUNCTION_WRAPPER(next_pidmap, (struct pid_namespace *pid_ns, unsigned int last), {
    kern_printk("next_pidmap is invoked.\n");
    PRE_WRAPPER_FUNC(pid_ns, last);
    int ret = next_pidmap(pid_ns, last);
    POST_WRAPPER_FUNC(pid_ns, last);
    kern_printk("next_pidmap returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_phy_ethtool_get_eee
#define APP_WRAPPER_FOR_phy_ethtool_get_eee
#endif
 
#ifndef APP_WRAPPER_FOR_phy_ethtool_get_eee
#define APP_WRAPPER_FOR_phy_ethtool_get_eee
FUNCTION_WRAPPER(phy_ethtool_get_eee, (struct phy_device *phydev, struct ethtool_eee *data), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    kern_printk("phy_ethtool_get_eee is invoked.\n");
    PRE_WRAPPER_FUNC(phydev, data);
    int ret = phy_ethtool_get_eee(phydev, data);
    POST_WRAPPER_FUNC(phydev, data);
    kern_printk("phy_ethtool_get_eee returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    return ret;
})
#endif


#ifndef KERN_ADDR___save_altstack
#define APP_WRAPPER_FOR___save_altstack
#endif
 
#ifndef APP_WRAPPER_FOR___save_altstack
#define APP_WRAPPER_FOR___save_altstack
FUNCTION_WRAPPER(__save_altstack, (stack_t *_arg1, unsigned long _arg2), {
    kern_printk("__save_altstack is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = __save_altstack(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("__save_altstack returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___get_user_8
#define APP_WRAPPER_FOR___get_user_8
#endif
 
#ifndef APP_WRAPPER_FOR___get_user_8
#define APP_WRAPPER_FOR___get_user_8
FUNCTION_WRAPPER(__get_user_8, (), {
    kern_printk("__get_user_8 is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = __get_user_8();
    POST_WRAPPER_FUNC();
    kern_printk("__get_user_8 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___get_user_4
#define APP_WRAPPER_FOR___get_user_4
#endif
 
#ifndef APP_WRAPPER_FOR___get_user_4
#define APP_WRAPPER_FOR___get_user_4
FUNCTION_WRAPPER(__get_user_4, (), {
    kern_printk("__get_user_4 is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = __get_user_4();
    POST_WRAPPER_FUNC();
    kern_printk("__get_user_4 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___get_user_1
#define APP_WRAPPER_FOR___get_user_1
#endif
 
#ifndef APP_WRAPPER_FOR___get_user_1
#define APP_WRAPPER_FOR___get_user_1
FUNCTION_WRAPPER(__get_user_1, (), {
    kern_printk("__get_user_1 is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = __get_user_1();
    POST_WRAPPER_FUNC();
    kern_printk("__get_user_1 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___get_user_2
#define APP_WRAPPER_FOR___get_user_2
#endif
 
#ifndef APP_WRAPPER_FOR___get_user_2
#define APP_WRAPPER_FOR___get_user_2
FUNCTION_WRAPPER(__get_user_2, (), {
    kern_printk("__get_user_2 is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = __get_user_2();
    POST_WRAPPER_FUNC();
    kern_printk("__get_user_2 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_get_avenrun
#define APP_WRAPPER_FOR_get_avenrun
#endif
 
#ifndef APP_WRAPPER_FOR_get_avenrun
#define APP_WRAPPER_FOR_get_avenrun
FUNCTION_WRAPPER_VOID(get_avenrun, (unsigned long *loads, unsigned long offset, int shift), {
    kern_printk("get_avenrun is invoked.\n");
    PRE_WRAPPER_FUNC(loads, offset, shift);
    get_avenrun(loads, offset, shift);
    POST_WRAPPER_FUNC(loads, offset, shift);
    kern_printk("get_avenrun returned.\n");
})
#endif


#ifndef KERN_ADDR_vfs_create
#define APP_WRAPPER_FOR_vfs_create
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_create
#define APP_WRAPPER_FOR_vfs_create
FUNCTION_WRAPPER(vfs_create, (struct inode *_arg1, struct dentry *_arg2, umode_t _arg3, bool _arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("vfs_create is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = vfs_create(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("vfs_create returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_dev_get
#define APP_WRAPPER_FOR_pci_dev_get
#endif
 
#ifndef APP_WRAPPER_FOR_pci_dev_get
#define APP_WRAPPER_FOR_pci_dev_get
FUNCTION_WRAPPER(pci_dev_get, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_dev_get is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    struct pci_dev *ret = pci_dev_get(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_dev_get returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_unregister_mem_sect_under_nodes
#define APP_WRAPPER_FOR_unregister_mem_sect_under_nodes
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_mem_sect_under_nodes
#define APP_WRAPPER_FOR_unregister_mem_sect_under_nodes
FUNCTION_WRAPPER(unregister_mem_sect_under_nodes, (struct memory_block *mem_blk, unsigned long phys_index), {
    kern_printk("unregister_mem_sect_under_nodes is invoked.\n");
    PRE_WRAPPER_FUNC(mem_blk, phys_index);
    int ret = unregister_mem_sect_under_nodes(mem_blk, phys_index);
    POST_WRAPPER_FUNC(mem_blk, phys_index);
    kern_printk("unregister_mem_sect_under_nodes returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_qdisc_lookup
#define APP_WRAPPER_FOR_qdisc_lookup
#endif
 
#ifndef APP_WRAPPER_FOR_qdisc_lookup
#define APP_WRAPPER_FOR_qdisc_lookup
FUNCTION_WRAPPER(qdisc_lookup, (struct net_device *dev, u32 handle), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("qdisc_lookup is invoked.\n");
    PRE_WRAPPER_FUNC(dev, handle);
    struct Qdisc *ret = qdisc_lookup(dev, handle);
    POST_WRAPPER_FUNC(dev, handle);
    kern_printk("qdisc_lookup returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_qtree_delete_dquot
#define APP_WRAPPER_FOR_qtree_delete_dquot
#endif
 
#ifndef APP_WRAPPER_FOR_qtree_delete_dquot
#define APP_WRAPPER_FOR_qtree_delete_dquot
FUNCTION_WRAPPER(qtree_delete_dquot, (struct qtree_mem_dqinfo *info, struct dquot *dquot), {
    WRAP_RECURSIVE(info);
    TRACES_IF_WATCHPOINT(info);
    SCAN_HEAD_FUNC(struct qtree_mem_dqinfo)(*(TO_UNWATCHED_ADDRESS(info)));
    WRAP_RECURSIVE(dquot);
    TRACES_IF_WATCHPOINT(dquot);
    SCAN_HEAD_FUNC(struct dquot)(*(TO_UNWATCHED_ADDRESS(dquot)));
    kern_printk("qtree_delete_dquot is invoked.\n");
    PRE_WRAPPER_FUNC(info, dquot);
    int ret = qtree_delete_dquot(info, dquot);
    POST_WRAPPER_FUNC(info, dquot);
    kern_printk("qtree_delete_dquot returned.\n");
    TRACES_IF_WATCHPOINT(info);
    SCAN_HEAD_FUNC(struct qtree_mem_dqinfo)(*(TO_UNWATCHED_ADDRESS(info)));
    TRACES_IF_WATCHPOINT(dquot);
    SCAN_HEAD_FUNC(struct dquot)(*(TO_UNWATCHED_ADDRESS(dquot)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_mode_string
#define APP_WRAPPER_FOR_ata_mode_string
#endif
 
#ifndef APP_WRAPPER_FOR_ata_mode_string
#define APP_WRAPPER_FOR_ata_mode_string
FUNCTION_WRAPPER(ata_mode_string, (unsigned long xfer_mask), {
    kern_printk("ata_mode_string is invoked.\n");
    PRE_WRAPPER_FUNC(xfer_mask);
    const char *ret = ata_mode_string(xfer_mask);
    POST_WRAPPER_FUNC(xfer_mask);
    kern_printk("ata_mode_string returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_jbd2_journal_dirty_metadata
#define APP_WRAPPER_FOR_jbd2_journal_dirty_metadata
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_dirty_metadata
#define APP_WRAPPER_FOR_jbd2_journal_dirty_metadata
FUNCTION_WRAPPER(jbd2_journal_dirty_metadata, (handle_t *_arg1, struct buffer_head *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(handle_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("jbd2_journal_dirty_metadata is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = jbd2_journal_dirty_metadata(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("jbd2_journal_dirty_metadata returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(handle_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_rq_unmap_user
#define APP_WRAPPER_FOR_blk_rq_unmap_user
#endif
 
#ifndef APP_WRAPPER_FOR_blk_rq_unmap_user
#define APP_WRAPPER_FOR_blk_rq_unmap_user
FUNCTION_WRAPPER(blk_rq_unmap_user, (struct bio *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("blk_rq_unmap_user is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = blk_rq_unmap_user(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("blk_rq_unmap_user returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sk_wait_data
#define APP_WRAPPER_FOR_sk_wait_data
#endif
 
#ifndef APP_WRAPPER_FOR_sk_wait_data
#define APP_WRAPPER_FOR_sk_wait_data
FUNCTION_WRAPPER(sk_wait_data, (struct sock *sk, long *timeo), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sk_wait_data is invoked.\n");
    PRE_WRAPPER_FUNC(sk, timeo);
    int ret = sk_wait_data(sk, timeo);
    POST_WRAPPER_FUNC(sk, timeo);
    kern_printk("sk_wait_data returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_unregister_netdevice_queue
#define APP_WRAPPER_FOR_unregister_netdevice_queue
#endif
 
#ifndef APP_WRAPPER_FOR_unregister_netdevice_queue
#define APP_WRAPPER_FOR_unregister_netdevice_queue
FUNCTION_WRAPPER_VOID(unregister_netdevice_queue, (struct net_device *dev, struct list_head *head), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("unregister_netdevice_queue is invoked.\n");
    PRE_WRAPPER_FUNC(dev, head);
    unregister_netdevice_queue(dev, head);
    POST_WRAPPER_FUNC(dev, head);
    kern_printk("unregister_netdevice_queue returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_pm_suspended_storage
#define APP_WRAPPER_FOR_pm_suspended_storage
#endif
 
#ifndef APP_WRAPPER_FOR_pm_suspended_storage
#define APP_WRAPPER_FOR_pm_suspended_storage
FUNCTION_WRAPPER(pm_suspended_storage, (), {
    kern_printk("pm_suspended_storage is invoked.\n");
    PRE_WRAPPER_FUNC();
    bool ret = pm_suspended_storage();
    POST_WRAPPER_FUNC();
    kern_printk("pm_suspended_storage returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_find_first_zero_bit
#define APP_WRAPPER_FOR_find_first_zero_bit
#endif
 
#ifndef APP_WRAPPER_FOR_find_first_zero_bit
#define APP_WRAPPER_FOR_find_first_zero_bit
FUNCTION_WRAPPER(find_first_zero_bit, (unsigned const long *addr, unsigned long size), {
    kern_printk("find_first_zero_bit is invoked.\n");
    PRE_WRAPPER_FUNC(addr, size);
    long ret = find_first_zero_bit(addr, size);
    POST_WRAPPER_FUNC(addr, size);
    kern_printk("find_first_zero_bit returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_seq_escape
#define APP_WRAPPER_FOR_seq_escape
#endif
 
#ifndef APP_WRAPPER_FOR_seq_escape
#define APP_WRAPPER_FOR_seq_escape
FUNCTION_WRAPPER(seq_escape, (struct seq_file *_arg1, const char *_arg2, const char *_arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("seq_escape is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    int ret = seq_escape(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("seq_escape returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_timerfd_gettime
#define APP_WRAPPER_FOR_compat_sys_timerfd_gettime
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_timerfd_gettime
#define APP_WRAPPER_FOR_compat_sys_timerfd_gettime
FUNCTION_WRAPPER(compat_sys_timerfd_gettime, (int ufd, struct compat_itimerspec *otmr), {
    kern_printk("compat_sys_timerfd_gettime is invoked.\n");
    PRE_WRAPPER_FUNC(ufd, otmr);
    long ret = compat_sys_timerfd_gettime(ufd, otmr);
    POST_WRAPPER_FUNC(ufd, otmr);
    kern_printk("compat_sys_timerfd_gettime returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_arch_pick_mmap_layout
#define APP_WRAPPER_FOR_arch_pick_mmap_layout
#endif
 
#ifndef APP_WRAPPER_FOR_arch_pick_mmap_layout
#define APP_WRAPPER_FOR_arch_pick_mmap_layout
FUNCTION_WRAPPER_VOID(arch_pick_mmap_layout, (struct mm_struct *mm), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    kern_printk("arch_pick_mmap_layout is invoked.\n");
    PRE_WRAPPER_FUNC(mm);
    arch_pick_mmap_layout(mm);
    POST_WRAPPER_FUNC(mm);
    kern_printk("arch_pick_mmap_layout returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
})
#endif


#ifndef KERN_ADDR_early_fixup_exception
#define APP_WRAPPER_FOR_early_fixup_exception
#endif
 
#ifndef APP_WRAPPER_FOR_early_fixup_exception
#define APP_WRAPPER_FOR_early_fixup_exception
FUNCTION_WRAPPER(early_fixup_exception, (unsigned long *ip), {
    kern_printk("early_fixup_exception is invoked.\n");
    PRE_WRAPPER_FUNC(ip);
    int ret = early_fixup_exception(ip);
    POST_WRAPPER_FUNC(ip);
    kern_printk("early_fixup_exception returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_find_user
#define APP_WRAPPER_FOR_find_user
#endif
 
#ifndef APP_WRAPPER_FOR_find_user
#define APP_WRAPPER_FOR_find_user
FUNCTION_WRAPPER(find_user, (kuid_t _arg1), {
    kern_printk("find_user is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct user_struct *ret = find_user(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("find_user returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR__raw_read_unlock_bh
#define APP_WRAPPER_FOR__raw_read_unlock_bh
#endif
 
#ifndef APP_WRAPPER_FOR__raw_read_unlock_bh
#define APP_WRAPPER_FOR__raw_read_unlock_bh
FUNCTION_WRAPPER_VOID(_raw_read_unlock_bh, (rwlock_t *lock), {
    kern_printk("_raw_read_unlock_bh is invoked.\n");
    PRE_WRAPPER_FUNC(lock);
    _raw_read_unlock_bh(lock);
    POST_WRAPPER_FUNC(lock);
    kern_printk("_raw_read_unlock_bh returned.\n");
})
#endif


#ifndef KERN_ADDR_blk_rq_map_user_iov
#define APP_WRAPPER_FOR_blk_rq_map_user_iov
#endif
 
#ifndef APP_WRAPPER_FOR_blk_rq_map_user_iov
#define APP_WRAPPER_FOR_blk_rq_map_user_iov
FUNCTION_WRAPPER(blk_rq_map_user_iov, (struct request_queue *_arg1, struct request *_arg2, struct rq_map_data *_arg3, struct sg_iovec *_arg4, int _arg5, unsigned int _arg6, gfp_t _arg7), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct rq_map_data)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    kern_printk("blk_rq_map_user_iov is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
    int ret = blk_rq_map_user_iov(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
    kern_printk("blk_rq_map_user_iov returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct rq_map_data)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    return ret;
})
#endif


#ifndef KERN_ADDR_have_submounts
#define APP_WRAPPER_FOR_have_submounts
#endif
 
#ifndef APP_WRAPPER_FOR_have_submounts
#define APP_WRAPPER_FOR_have_submounts
FUNCTION_WRAPPER(have_submounts, (struct dentry *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("have_submounts is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = have_submounts(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("have_submounts returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct dentry)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_throttle_vm_writeout
#define APP_WRAPPER_FOR_throttle_vm_writeout
#endif
 
#ifndef APP_WRAPPER_FOR_throttle_vm_writeout
#define APP_WRAPPER_FOR_throttle_vm_writeout
FUNCTION_WRAPPER_VOID(throttle_vm_writeout, (gfp_t gfp_mask), {
    kern_printk("throttle_vm_writeout is invoked.\n");
    PRE_WRAPPER_FUNC(gfp_mask);
    throttle_vm_writeout(gfp_mask);
    POST_WRAPPER_FUNC(gfp_mask);
    kern_printk("throttle_vm_writeout returned.\n");
})
#endif


#ifndef KERN_ADDR___hw_addr_sync
#define APP_WRAPPER_FOR___hw_addr_sync
#endif
 
#ifndef APP_WRAPPER_FOR___hw_addr_sync
#define APP_WRAPPER_FOR___hw_addr_sync
FUNCTION_WRAPPER(__hw_addr_sync, (struct netdev_hw_addr_list *to_list, struct netdev_hw_addr_list *from_list, int addr_len), {
    kern_printk("__hw_addr_sync is invoked.\n");
    PRE_WRAPPER_FUNC(to_list, from_list, addr_len);
    int ret = __hw_addr_sync(to_list, from_list, addr_len);
    POST_WRAPPER_FUNC(to_list, from_list, addr_len);
    kern_printk("__hw_addr_sync returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_blk_queue_bio
#define APP_WRAPPER_FOR_blk_queue_bio
#endif
 
#ifndef APP_WRAPPER_FOR_blk_queue_bio
#define APP_WRAPPER_FOR_blk_queue_bio
FUNCTION_WRAPPER_VOID(blk_queue_bio, (struct request_queue *q, struct bio *bio), {
    WRAP_RECURSIVE(q);
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    WRAP_RECURSIVE(bio);
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
    kern_printk("blk_queue_bio is invoked.\n");
    PRE_WRAPPER_FUNC(q, bio);
    blk_queue_bio(q, bio);
    POST_WRAPPER_FUNC(q, bio);
    kern_printk("blk_queue_bio returned.\n");
    TRACES_IF_WATCHPOINT(q);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(q)));
    TRACES_IF_WATCHPOINT(bio);
    SCAN_HEAD_FUNC(struct bio)(*(TO_UNWATCHED_ADDRESS(bio)));
})
#endif


#ifndef KERN_ADDR_proc_mkdir_mode
#define APP_WRAPPER_FOR_proc_mkdir_mode
#endif
 
#ifndef APP_WRAPPER_FOR_proc_mkdir_mode
#define APP_WRAPPER_FOR_proc_mkdir_mode
FUNCTION_WRAPPER(proc_mkdir_mode, (const char *name, umode_t mode, struct proc_dir_entry *parent), {
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct proc_dir_entry)(*(TO_UNWATCHED_ADDRESS(parent)));
    kern_printk("proc_mkdir_mode is invoked.\n");
    PRE_WRAPPER_FUNC(name, mode, parent);
    struct proc_dir_entry *ret = proc_mkdir_mode(name, mode, parent);
    POST_WRAPPER_FUNC(name, mode, parent);
    kern_printk("proc_mkdir_mode returned.\n");
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct proc_dir_entry)(*(TO_UNWATCHED_ADDRESS(parent)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_rtnl_unregister_all
#define APP_WRAPPER_FOR_rtnl_unregister_all
#endif
 
#ifndef APP_WRAPPER_FOR_rtnl_unregister_all
#define APP_WRAPPER_FOR_rtnl_unregister_all
FUNCTION_WRAPPER_VOID(rtnl_unregister_all, (int protocol), {
    kern_printk("rtnl_unregister_all is invoked.\n");
    PRE_WRAPPER_FUNC(protocol);
    rtnl_unregister_all(protocol);
    POST_WRAPPER_FUNC(protocol);
    kern_printk("rtnl_unregister_all returned.\n");
})
#endif


#ifndef KERN_ADDR_free_buffer_head
#define APP_WRAPPER_FOR_free_buffer_head
#endif
 
#ifndef APP_WRAPPER_FOR_free_buffer_head
#define APP_WRAPPER_FOR_free_buffer_head
FUNCTION_WRAPPER_VOID(free_buffer_head, (struct buffer_head *bh), {
    WRAP_RECURSIVE(bh);
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
    kern_printk("free_buffer_head is invoked.\n");
    PRE_WRAPPER_FUNC(bh);
    free_buffer_head(bh);
    POST_WRAPPER_FUNC(bh);
    kern_printk("free_buffer_head returned.\n");
    TRACES_IF_WATCHPOINT(bh);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(bh)));
})
#endif


#ifndef KERN_ADDR_prepare_to_wait_exclusive
#define APP_WRAPPER_FOR_prepare_to_wait_exclusive
#endif
 
#ifndef APP_WRAPPER_FOR_prepare_to_wait_exclusive
#define APP_WRAPPER_FOR_prepare_to_wait_exclusive
FUNCTION_WRAPPER_VOID(prepare_to_wait_exclusive, (wait_queue_head_t *q, wait_queue_t *wait, int state), {
    WRAP_RECURSIVE(wait);
    TRACES_IF_WATCHPOINT(wait);
    SCAN_HEAD_FUNC(wait_queue_t)(*(TO_UNWATCHED_ADDRESS(wait)));
    kern_printk("prepare_to_wait_exclusive is invoked.\n");
    PRE_WRAPPER_FUNC(q, wait, state);
    prepare_to_wait_exclusive(q, wait, state);
    POST_WRAPPER_FUNC(q, wait, state);
    kern_printk("prepare_to_wait_exclusive returned.\n");
    TRACES_IF_WATCHPOINT(wait);
    SCAN_HEAD_FUNC(wait_queue_t)(*(TO_UNWATCHED_ADDRESS(wait)));
})
#endif


#ifndef KERN_ADDR_clockevents_handle_noop
#define APP_WRAPPER_FOR_clockevents_handle_noop
#endif
 
#ifndef APP_WRAPPER_FOR_clockevents_handle_noop
#define APP_WRAPPER_FOR_clockevents_handle_noop
FUNCTION_WRAPPER_VOID(clockevents_handle_noop, (struct clock_event_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct clock_event_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("clockevents_handle_noop is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    clockevents_handle_noop(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("clockevents_handle_noop returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct clock_event_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_sk_detach_filter
#define APP_WRAPPER_FOR_sk_detach_filter
#endif
 
#ifndef APP_WRAPPER_FOR_sk_detach_filter
#define APP_WRAPPER_FOR_sk_detach_filter
FUNCTION_WRAPPER(sk_detach_filter, (struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sk_detach_filter is invoked.\n");
    PRE_WRAPPER_FUNC(sk);
    int ret = sk_detach_filter(sk);
    POST_WRAPPER_FUNC(sk);
    kern_printk("sk_detach_filter returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sg_next
#define APP_WRAPPER_FOR_sg_next
#endif
 
#ifndef APP_WRAPPER_FOR_sg_next
#define APP_WRAPPER_FOR_sg_next
FUNCTION_WRAPPER(sg_next, (struct scatterlist *_arg1), {
    kern_printk("sg_next is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    struct scatterlist *ret = sg_next(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("sg_next returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_mii_ethtool_sset
#define APP_WRAPPER_FOR_mii_ethtool_sset
#endif
 
#ifndef APP_WRAPPER_FOR_mii_ethtool_sset
#define APP_WRAPPER_FOR_mii_ethtool_sset
FUNCTION_WRAPPER(mii_ethtool_sset, (struct mii_if_info *mii, struct ethtool_cmd *ecmd), {
    WRAP_RECURSIVE(mii);
    TRACES_IF_WATCHPOINT(mii);
    SCAN_HEAD_FUNC(struct mii_if_info)(*(TO_UNWATCHED_ADDRESS(mii)));
    kern_printk("mii_ethtool_sset is invoked.\n");
    PRE_WRAPPER_FUNC(mii, ecmd);
    int ret = mii_ethtool_sset(mii, ecmd);
    POST_WRAPPER_FUNC(mii, ecmd);
    kern_printk("mii_ethtool_sset returned.\n");
    TRACES_IF_WATCHPOINT(mii);
    SCAN_HEAD_FUNC(struct mii_if_info)(*(TO_UNWATCHED_ADDRESS(mii)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_fstatfs64
#define APP_WRAPPER_FOR_compat_sys_fstatfs64
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_fstatfs64
#define APP_WRAPPER_FOR_compat_sys_fstatfs64
FUNCTION_WRAPPER(compat_sys_fstatfs64, (unsigned int fd, compat_size_t sz, struct compat_statfs64 *buf), {
    kern_printk("compat_sys_fstatfs64 is invoked.\n");
    PRE_WRAPPER_FUNC(fd, sz, buf);
    long ret = compat_sys_fstatfs64(fd, sz, buf);
    POST_WRAPPER_FUNC(fd, sz, buf);
    kern_printk("compat_sys_fstatfs64 returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_vm_area_register_early
#define APP_WRAPPER_FOR_vm_area_register_early
#endif
 
#ifndef APP_WRAPPER_FOR_vm_area_register_early
#define APP_WRAPPER_FOR_vm_area_register_early
FUNCTION_WRAPPER_VOID(vm_area_register_early, (struct vm_struct *vm, size_t align), {
    WRAP_RECURSIVE(vm);
    TRACES_IF_WATCHPOINT(vm);
    SCAN_HEAD_FUNC(struct vm_struct)(*(TO_UNWATCHED_ADDRESS(vm)));
    kern_printk("vm_area_register_early is invoked.\n");
    PRE_WRAPPER_FUNC(vm, align);
    vm_area_register_early(vm, align);
    POST_WRAPPER_FUNC(vm, align);
    kern_printk("vm_area_register_early returned.\n");
    TRACES_IF_WATCHPOINT(vm);
    SCAN_HEAD_FUNC(struct vm_struct)(*(TO_UNWATCHED_ADDRESS(vm)));
})
#endif


#ifndef KERN_ADDR_percpu_down_write
#define APP_WRAPPER_FOR_percpu_down_write
#endif
 
#ifndef APP_WRAPPER_FOR_percpu_down_write
#define APP_WRAPPER_FOR_percpu_down_write
FUNCTION_WRAPPER_VOID(percpu_down_write, (struct percpu_rw_semaphore *_arg1), {
    kern_printk("percpu_down_write is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    percpu_down_write(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("percpu_down_write returned.\n");
})
#endif


#ifndef KERN_ADDR_do_prlimit
#define APP_WRAPPER_FOR_do_prlimit
#endif
 
#ifndef APP_WRAPPER_FOR_do_prlimit
#define APP_WRAPPER_FOR_do_prlimit
FUNCTION_WRAPPER(do_prlimit, (struct task_struct *tsk, unsigned int resource, struct rlimit *new_rlim, struct rlimit *old_rlim), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("do_prlimit is invoked.\n");
    PRE_WRAPPER_FUNC(tsk, resource, new_rlim, old_rlim);
    int ret = do_prlimit(tsk, resource, new_rlim, old_rlim);
    POST_WRAPPER_FUNC(tsk, resource, new_rlim, old_rlim);
    kern_printk("do_prlimit returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_file_direct_write
#define APP_WRAPPER_FOR_generic_file_direct_write
#endif
 
#ifndef APP_WRAPPER_FOR_generic_file_direct_write
#define APP_WRAPPER_FOR_generic_file_direct_write
FUNCTION_WRAPPER(generic_file_direct_write, (struct kiocb *_arg1, const struct iovec *_arg2, unsigned long *_arg3, loff_t _arg4, loff_t *_arg5, size_t _arg6, size_t _arg7), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("generic_file_direct_write is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
    ssize_t ret = generic_file_direct_write(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
    kern_printk("generic_file_direct_write returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct kiocb)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_invalidate_interrupt9
#define APP_WRAPPER_FOR_invalidate_interrupt9
#endif
 
#ifndef APP_WRAPPER_FOR_invalidate_interrupt9
#define APP_WRAPPER_FOR_invalidate_interrupt9
FUNCTION_WRAPPER_VOID(invalidate_interrupt9, (), {
    kern_printk("invalidate_interrupt9 is invoked.\n");
    PRE_WRAPPER_FUNC();
    invalidate_interrupt9();
    POST_WRAPPER_FUNC();
    kern_printk("invalidate_interrupt9 returned.\n");
})
#endif


#ifndef KERN_ADDR_pci_user_read_config_dword
#define APP_WRAPPER_FOR_pci_user_read_config_dword
#endif
 
#ifndef APP_WRAPPER_FOR_pci_user_read_config_dword
#define APP_WRAPPER_FOR_pci_user_read_config_dword
FUNCTION_WRAPPER(pci_user_read_config_dword, (struct pci_dev *dev, int where, u32 *val), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_user_read_config_dword is invoked.\n");
    PRE_WRAPPER_FUNC(dev, where, val);
    int ret = pci_user_read_config_dword(dev, where, val);
    POST_WRAPPER_FUNC(dev, where, val);
    kern_printk("pci_user_read_config_dword returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_sched_clock_idle_sleep_event
#define APP_WRAPPER_FOR_sched_clock_idle_sleep_event
#endif
 
#ifndef APP_WRAPPER_FOR_sched_clock_idle_sleep_event
#define APP_WRAPPER_FOR_sched_clock_idle_sleep_event
FUNCTION_WRAPPER_VOID(sched_clock_idle_sleep_event, (), {
    kern_printk("sched_clock_idle_sleep_event is invoked.\n");
    PRE_WRAPPER_FUNC();
    sched_clock_idle_sleep_event();
    POST_WRAPPER_FUNC();
    kern_printk("sched_clock_idle_sleep_event returned.\n");
})
#endif


#ifndef KERN_ADDR_exportfs_encode_inode_fh
#define APP_WRAPPER_FOR_exportfs_encode_inode_fh
#endif
 
#ifndef APP_WRAPPER_FOR_exportfs_encode_inode_fh
#define APP_WRAPPER_FOR_exportfs_encode_inode_fh
FUNCTION_WRAPPER(exportfs_encode_inode_fh, (struct inode *inode, struct fid *fid, int *max_len, struct inode *parent), {
    WRAP_RECURSIVE(inode);
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    WRAP_RECURSIVE(parent);
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(parent)));
    kern_printk("exportfs_encode_inode_fh is invoked.\n");
    PRE_WRAPPER_FUNC(inode, fid, max_len, parent);
    int ret = exportfs_encode_inode_fh(inode, fid, max_len, parent);
    POST_WRAPPER_FUNC(inode, fid, max_len, parent);
    kern_printk("exportfs_encode_inode_fh returned.\n");
    TRACES_IF_WATCHPOINT(inode);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(inode)));
    TRACES_IF_WATCHPOINT(parent);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(parent)));
    return ret;
})
#endif


#ifndef KERN_ADDR_kstrtos8_from_user
#define APP_WRAPPER_FOR_kstrtos8_from_user
#endif
 
#ifndef APP_WRAPPER_FOR_kstrtos8_from_user
#define APP_WRAPPER_FOR_kstrtos8_from_user
FUNCTION_WRAPPER(kstrtos8_from_user, (const char *s, size_t count, unsigned int base, s8 *res), {
    kern_printk("kstrtos8_from_user is invoked.\n");
    PRE_WRAPPER_FUNC(s, count, base, res);
    int ret = kstrtos8_from_user(s, count, base, res);
    POST_WRAPPER_FUNC(s, count, base, res);
    kern_printk("kstrtos8_from_user returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_device_get_devnode
#define APP_WRAPPER_FOR_device_get_devnode
#endif
 
#ifndef APP_WRAPPER_FOR_device_get_devnode
#define APP_WRAPPER_FOR_device_get_devnode
FUNCTION_WRAPPER(device_get_devnode, (struct device *dev, umode_t *mode, const char **tmp), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("device_get_devnode is invoked.\n");
    PRE_WRAPPER_FUNC(dev, mode, tmp);
    const char *ret = device_get_devnode(dev, mode, tmp);
    POST_WRAPPER_FUNC(dev, mode, tmp);
    kern_printk("device_get_devnode returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_inet_csk_destroy_sock
#define APP_WRAPPER_FOR_inet_csk_destroy_sock
#endif
 
#ifndef APP_WRAPPER_FOR_inet_csk_destroy_sock
#define APP_WRAPPER_FOR_inet_csk_destroy_sock
FUNCTION_WRAPPER_VOID(inet_csk_destroy_sock, (struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("inet_csk_destroy_sock is invoked.\n");
    PRE_WRAPPER_FUNC(sk);
    inet_csk_destroy_sock(sk);
    POST_WRAPPER_FUNC(sk);
    kern_printk("inet_csk_destroy_sock returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR_sched_clock_init
#define APP_WRAPPER_FOR_sched_clock_init
#endif
 
#ifndef APP_WRAPPER_FOR_sched_clock_init
#define APP_WRAPPER_FOR_sched_clock_init
FUNCTION_WRAPPER_VOID(sched_clock_init, (), {
    kern_printk("sched_clock_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    sched_clock_init();
    POST_WRAPPER_FUNC();
    kern_printk("sched_clock_init returned.\n");
})
#endif


#ifndef KERN_ADDR_follow_down
#define APP_WRAPPER_FOR_follow_down
#endif
 
#ifndef APP_WRAPPER_FOR_follow_down
#define APP_WRAPPER_FOR_follow_down
FUNCTION_WRAPPER(follow_down, (struct path *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("follow_down is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    int ret = follow_down(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("follow_down returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_completion_done
#define APP_WRAPPER_FOR_completion_done
#endif
 
#ifndef APP_WRAPPER_FOR_completion_done
#define APP_WRAPPER_FOR_completion_done
FUNCTION_WRAPPER(completion_done, (struct completion *x), {
    kern_printk("completion_done is invoked.\n");
    PRE_WRAPPER_FUNC(x);
    bool ret = completion_done(x);
    POST_WRAPPER_FUNC(x);
    kern_printk("completion_done returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_usleep_range
#define APP_WRAPPER_FOR_usleep_range
#endif
 
#ifndef APP_WRAPPER_FOR_usleep_range
#define APP_WRAPPER_FOR_usleep_range
FUNCTION_WRAPPER_VOID(usleep_range, (unsigned long min, unsigned long max), {
    kern_printk("usleep_range is invoked.\n");
    PRE_WRAPPER_FUNC(min, max);
    usleep_range(min, max);
    POST_WRAPPER_FUNC(min, max);
    kern_printk("usleep_range returned.\n");
})
#endif


#ifndef KERN_ADDR_find_vma_prev
#define APP_WRAPPER_FOR_find_vma_prev
#endif
 
#ifndef APP_WRAPPER_FOR_find_vma_prev
#define APP_WRAPPER_FOR_find_vma_prev
FUNCTION_WRAPPER(find_vma_prev, (struct mm_struct *mm, unsigned long addr, struct vm_area_struct **pprev), {
    WRAP_RECURSIVE(mm);
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    WRAP_RECURSIVE(pprev);
    TRACES_IF_WATCHPOINT(pprev);
    SCAN_HEAD_FUNC(struct vm_area_struct *)(*(TO_UNWATCHED_ADDRESS(pprev)));
    kern_printk("find_vma_prev is invoked.\n");
    PRE_WRAPPER_FUNC(mm, addr, pprev);
    struct vm_area_struct *ret = find_vma_prev(mm, addr, pprev);
    POST_WRAPPER_FUNC(mm, addr, pprev);
    kern_printk("find_vma_prev returned.\n");
    TRACES_IF_WATCHPOINT(mm);
    SCAN_HEAD_FUNC(struct mm_struct)(*(TO_UNWATCHED_ADDRESS(mm)));
    TRACES_IF_WATCHPOINT(pprev);
    SCAN_HEAD_FUNC(struct vm_area_struct *)(*(TO_UNWATCHED_ADDRESS(pprev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_untrack_pfn
#define APP_WRAPPER_FOR_untrack_pfn
#endif
 
#ifndef APP_WRAPPER_FOR_untrack_pfn
#define APP_WRAPPER_FOR_untrack_pfn
FUNCTION_WRAPPER_VOID(untrack_pfn, (struct vm_area_struct *vma, unsigned long pfn, unsigned long size), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("untrack_pfn is invoked.\n");
    PRE_WRAPPER_FUNC(vma, pfn, size);
    untrack_pfn(vma, pfn, size);
    POST_WRAPPER_FUNC(vma, pfn, size);
    kern_printk("untrack_pfn returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
})
#endif


#ifndef KERN_ADDR_default_teardown_msi_irqs
#define APP_WRAPPER_FOR_default_teardown_msi_irqs
#endif
 
#ifndef APP_WRAPPER_FOR_default_teardown_msi_irqs
#define APP_WRAPPER_FOR_default_teardown_msi_irqs
FUNCTION_WRAPPER_VOID(default_teardown_msi_irqs, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("default_teardown_msi_irqs is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    default_teardown_msi_irqs(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("default_teardown_msi_irqs returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR___acpi_map_pxm_to_node
#define APP_WRAPPER_FOR___acpi_map_pxm_to_node
#endif
 
#ifndef APP_WRAPPER_FOR___acpi_map_pxm_to_node
#define APP_WRAPPER_FOR___acpi_map_pxm_to_node
FUNCTION_WRAPPER_VOID(__acpi_map_pxm_to_node, (int _arg1, int _arg2), {
    kern_printk("__acpi_map_pxm_to_node is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    __acpi_map_pxm_to_node(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("__acpi_map_pxm_to_node returned.\n");
})
#endif


#ifndef KERN_ADDR_dm_suspended
#define APP_WRAPPER_FOR_dm_suspended
#endif
 
#ifndef APP_WRAPPER_FOR_dm_suspended
#define APP_WRAPPER_FOR_dm_suspended
FUNCTION_WRAPPER(dm_suspended, (struct dm_target *ti), {
    WRAP_RECURSIVE(ti);
    TRACES_IF_WATCHPOINT(ti);
    SCAN_HEAD_FUNC(struct dm_target)(*(TO_UNWATCHED_ADDRESS(ti)));
    kern_printk("dm_suspended is invoked.\n");
    PRE_WRAPPER_FUNC(ti);
    int ret = dm_suspended(ti);
    POST_WRAPPER_FUNC(ti);
    kern_printk("dm_suspended returned.\n");
    TRACES_IF_WATCHPOINT(ti);
    SCAN_HEAD_FUNC(struct dm_target)(*(TO_UNWATCHED_ADDRESS(ti)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_get_gpe_status
#define APP_WRAPPER_FOR_acpi_get_gpe_status
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_gpe_status
#define APP_WRAPPER_FOR_acpi_get_gpe_status
FUNCTION_WRAPPER(acpi_get_gpe_status, (acpi_handle gpe_device, u32 gpe_number, acpi_event_status *event_status), {
    kern_printk("acpi_get_gpe_status is invoked.\n");
    PRE_WRAPPER_FUNC(gpe_device, gpe_number, event_status);
    acpi_status ret = acpi_get_gpe_status(gpe_device, gpe_number, event_status);
    POST_WRAPPER_FUNC(gpe_device, gpe_number, event_status);
    kern_printk("acpi_get_gpe_status returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_raw_notifier_chain_unregister
#define APP_WRAPPER_FOR_raw_notifier_chain_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_raw_notifier_chain_unregister
#define APP_WRAPPER_FOR_raw_notifier_chain_unregister
FUNCTION_WRAPPER(raw_notifier_chain_unregister, (struct raw_notifier_head *nh, struct notifier_block *nb), {
    WRAP_RECURSIVE(nh);
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct raw_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    WRAP_RECURSIVE(nb);
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    kern_printk("raw_notifier_chain_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(nh, nb);
    int ret = raw_notifier_chain_unregister(nh, nb);
    POST_WRAPPER_FUNC(nh, nb);
    kern_printk("raw_notifier_chain_unregister returned.\n");
    TRACES_IF_WATCHPOINT(nh);
    SCAN_HEAD_FUNC(struct raw_notifier_head)(*(TO_UNWATCHED_ADDRESS(nh)));
    TRACES_IF_WATCHPOINT(nb);
    SCAN_HEAD_FUNC(struct notifier_block)(*(TO_UNWATCHED_ADDRESS(nb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_scsi_device_type
#define APP_WRAPPER_FOR_scsi_device_type
#endif
 
#ifndef APP_WRAPPER_FOR_scsi_device_type
#define APP_WRAPPER_FOR_scsi_device_type
FUNCTION_WRAPPER(scsi_device_type, (unsigned int type), {
    kern_printk("scsi_device_type is invoked.\n");
    PRE_WRAPPER_FUNC(type);
    const char *ret = scsi_device_type(type);
    POST_WRAPPER_FUNC(type);
    kern_printk("scsi_device_type returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_terminate
#define APP_WRAPPER_FOR_acpi_os_terminate
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_terminate
#define APP_WRAPPER_FOR_acpi_os_terminate
FUNCTION_WRAPPER(acpi_os_terminate, (), {
    kern_printk("acpi_os_terminate is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_status ret = acpi_os_terminate();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_os_terminate returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_pci_irq_disable
#define APP_WRAPPER_FOR_acpi_pci_irq_disable
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_pci_irq_disable
#define APP_WRAPPER_FOR_acpi_pci_irq_disable
FUNCTION_WRAPPER_VOID(acpi_pci_irq_disable, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("acpi_pci_irq_disable is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    acpi_pci_irq_disable(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("acpi_pci_irq_disable returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_text_poke_early
#define APP_WRAPPER_FOR_text_poke_early
#endif
 
#ifndef APP_WRAPPER_FOR_text_poke_early
#define APP_WRAPPER_FOR_text_poke_early
FUNCTION_WRAPPER(text_poke_early, (void *addr, const void *opcode, size_t len), {
    kern_printk("text_poke_early is invoked.\n");
    PRE_WRAPPER_FUNC(addr, opcode, len);
    void *ret = text_poke_early(addr, opcode, len);
    POST_WRAPPER_FUNC(addr, opcode, len);
    kern_printk("text_poke_early returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_rcu_batches_completed_sched
#define APP_WRAPPER_FOR_rcu_batches_completed_sched
#endif
 
#ifndef APP_WRAPPER_FOR_rcu_batches_completed_sched
#define APP_WRAPPER_FOR_rcu_batches_completed_sched
FUNCTION_WRAPPER(rcu_batches_completed_sched, (), {
    kern_printk("rcu_batches_completed_sched is invoked.\n");
    PRE_WRAPPER_FUNC();
    long ret = rcu_batches_completed_sched();
    POST_WRAPPER_FUNC();
    kern_printk("rcu_batches_completed_sched returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_next_zone
#define APP_WRAPPER_FOR_next_zone
#endif
 
#ifndef APP_WRAPPER_FOR_next_zone
#define APP_WRAPPER_FOR_next_zone
FUNCTION_WRAPPER(next_zone, (struct zone *zone), {
    WRAP_RECURSIVE(zone);
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    kern_printk("next_zone is invoked.\n");
    PRE_WRAPPER_FUNC(zone);
    struct zone *ret = next_zone(zone);
    POST_WRAPPER_FUNC(zone);
    kern_printk("next_zone returned.\n");
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_kset_unregister
#define APP_WRAPPER_FOR_kset_unregister
#endif
 
#ifndef APP_WRAPPER_FOR_kset_unregister
#define APP_WRAPPER_FOR_kset_unregister
FUNCTION_WRAPPER_VOID(kset_unregister, (struct kset *kset), {
    WRAP_RECURSIVE(kset);
    TRACES_IF_WATCHPOINT(kset);
    SCAN_HEAD_FUNC(struct kset)(*(TO_UNWATCHED_ADDRESS(kset)));
    kern_printk("kset_unregister is invoked.\n");
    PRE_WRAPPER_FUNC(kset);
    kset_unregister(kset);
    POST_WRAPPER_FUNC(kset);
    kern_printk("kset_unregister returned.\n");
    TRACES_IF_WATCHPOINT(kset);
    SCAN_HEAD_FUNC(struct kset)(*(TO_UNWATCHED_ADDRESS(kset)));
})
#endif


#ifndef KERN_ADDR_acpi_gsi_to_irq
#define APP_WRAPPER_FOR_acpi_gsi_to_irq
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_gsi_to_irq
#define APP_WRAPPER_FOR_acpi_gsi_to_irq
FUNCTION_WRAPPER(acpi_gsi_to_irq, (u32 gsi, unsigned int *irq), {
    kern_printk("acpi_gsi_to_irq is invoked.\n");
    PRE_WRAPPER_FUNC(gsi, irq);
    int ret = acpi_gsi_to_irq(gsi, irq);
    POST_WRAPPER_FUNC(gsi, irq);
    kern_printk("acpi_gsi_to_irq returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_locks_free_lock
#define APP_WRAPPER_FOR_locks_free_lock
#endif
 
#ifndef APP_WRAPPER_FOR_locks_free_lock
#define APP_WRAPPER_FOR_locks_free_lock
FUNCTION_WRAPPER_VOID(locks_free_lock, (struct file_lock *fl), {
    WRAP_RECURSIVE(fl);
    TRACES_IF_WATCHPOINT(fl);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(fl)));
    kern_printk("locks_free_lock is invoked.\n");
    PRE_WRAPPER_FUNC(fl);
    locks_free_lock(fl);
    POST_WRAPPER_FUNC(fl);
    kern_printk("locks_free_lock returned.\n");
    TRACES_IF_WATCHPOINT(fl);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(fl)));
})
#endif


#ifndef KERN_ADDR_get_nr_irqs_gsi
#define APP_WRAPPER_FOR_get_nr_irqs_gsi
#endif
 
#ifndef APP_WRAPPER_FOR_get_nr_irqs_gsi
#define APP_WRAPPER_FOR_get_nr_irqs_gsi
FUNCTION_WRAPPER(get_nr_irqs_gsi, (), {
    kern_printk("get_nr_irqs_gsi is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = get_nr_irqs_gsi();
    POST_WRAPPER_FUNC();
    kern_printk("get_nr_irqs_gsi returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_elv_rb_latter_request
#define APP_WRAPPER_FOR_elv_rb_latter_request
#endif
 
#ifndef APP_WRAPPER_FOR_elv_rb_latter_request
#define APP_WRAPPER_FOR_elv_rb_latter_request
FUNCTION_WRAPPER(elv_rb_latter_request, (struct request_queue *_arg1, struct request *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("elv_rb_latter_request is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    struct request *ret = elv_rb_latter_request(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("elv_rb_latter_request returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct request_queue)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct request)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_native_cpu_up
#define APP_WRAPPER_FOR_native_cpu_up
#endif
 
#ifndef APP_WRAPPER_FOR_native_cpu_up
#define APP_WRAPPER_FOR_native_cpu_up
FUNCTION_WRAPPER(native_cpu_up, (unsigned int cpunum, struct task_struct *tidle), {
    WRAP_RECURSIVE(tidle);
    TRACES_IF_WATCHPOINT(tidle);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tidle)));
    kern_printk("native_cpu_up is invoked.\n");
    PRE_WRAPPER_FUNC(cpunum, tidle);
    int ret = native_cpu_up(cpunum, tidle);
    POST_WRAPPER_FUNC(cpunum, tidle);
    kern_printk("native_cpu_up returned.\n");
    TRACES_IF_WATCHPOINT(tidle);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tidle)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_get_handle
#define APP_WRAPPER_FOR_acpi_get_handle
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_get_handle
#define APP_WRAPPER_FOR_acpi_get_handle
FUNCTION_WRAPPER(acpi_get_handle, (acpi_handle parent, acpi_string pathname, acpi_handle *ret_handle), {
    kern_printk("acpi_get_handle is invoked.\n");
    PRE_WRAPPER_FUNC(parent, pathname, ret_handle);
    acpi_status ret = acpi_get_handle(parent, pathname, ret_handle);
    POST_WRAPPER_FUNC(parent, pathname, ret_handle);
    kern_printk("acpi_get_handle returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_emergency_restart
#define APP_WRAPPER_FOR_emergency_restart
#endif
 
#ifndef APP_WRAPPER_FOR_emergency_restart
#define APP_WRAPPER_FOR_emergency_restart
FUNCTION_WRAPPER_VOID(emergency_restart, (), {
    kern_printk("emergency_restart is invoked.\n");
    PRE_WRAPPER_FUNC();
    emergency_restart();
    POST_WRAPPER_FUNC();
    kern_printk("emergency_restart returned.\n");
})
#endif


#ifndef KERN_ADDR_skb_try_coalesce
#define APP_WRAPPER_FOR_skb_try_coalesce
#endif
 
#ifndef APP_WRAPPER_FOR_skb_try_coalesce
#define APP_WRAPPER_FOR_skb_try_coalesce
FUNCTION_WRAPPER(skb_try_coalesce, (struct sk_buff *to, struct sk_buff *from, bool *fragstolen, int *delta_truesize), {
    WRAP_RECURSIVE(to);
    TRACES_IF_WATCHPOINT(to);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(to)));
    WRAP_RECURSIVE(from);
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(from)));
    kern_printk("skb_try_coalesce is invoked.\n");
    PRE_WRAPPER_FUNC(to, from, fragstolen, delta_truesize);
    bool ret = skb_try_coalesce(to, from, fragstolen, delta_truesize);
    POST_WRAPPER_FUNC(to, from, fragstolen, delta_truesize);
    kern_printk("skb_try_coalesce returned.\n");
    TRACES_IF_WATCHPOINT(to);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(to)));
    TRACES_IF_WATCHPOINT(from);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(from)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_getrlimit
#define APP_WRAPPER_FOR_compat_sys_getrlimit
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_getrlimit
#define APP_WRAPPER_FOR_compat_sys_getrlimit
FUNCTION_WRAPPER(compat_sys_getrlimit, (unsigned int resource, struct compat_rlimit *rlim), {
    kern_printk("compat_sys_getrlimit is invoked.\n");
    PRE_WRAPPER_FUNC(resource, rlim);
    long ret = compat_sys_getrlimit(resource, rlim);
    POST_WRAPPER_FUNC(resource, rlim);
    kern_printk("compat_sys_getrlimit returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_dm_unregister_target
#define APP_WRAPPER_FOR_dm_unregister_target
#endif
 
#ifndef APP_WRAPPER_FOR_dm_unregister_target
#define APP_WRAPPER_FOR_dm_unregister_target
FUNCTION_WRAPPER_VOID(dm_unregister_target, (struct target_type *t), {
    WRAP_RECURSIVE(t);
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct target_type)(*(TO_UNWATCHED_ADDRESS(t)));
    kern_printk("dm_unregister_target is invoked.\n");
    PRE_WRAPPER_FUNC(t);
    dm_unregister_target(t);
    POST_WRAPPER_FUNC(t);
    kern_printk("dm_unregister_target returned.\n");
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct target_type)(*(TO_UNWATCHED_ADDRESS(t)));
})
#endif


#ifndef KERN_ADDR_rtnetlink_put_metrics
#define APP_WRAPPER_FOR_rtnetlink_put_metrics
#endif
 
#ifndef APP_WRAPPER_FOR_rtnetlink_put_metrics
#define APP_WRAPPER_FOR_rtnetlink_put_metrics
FUNCTION_WRAPPER(rtnetlink_put_metrics, (struct sk_buff *skb, u32 *metrics), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("rtnetlink_put_metrics is invoked.\n");
    PRE_WRAPPER_FUNC(skb, metrics);
    int ret = rtnetlink_put_metrics(skb, metrics);
    POST_WRAPPER_FUNC(skb, metrics);
    kern_printk("rtnetlink_put_metrics returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_lock_file
#define APP_WRAPPER_FOR_vfs_lock_file
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_lock_file
#define APP_WRAPPER_FOR_vfs_lock_file
FUNCTION_WRAPPER(vfs_lock_file, (struct file *_arg1, unsigned int _arg2, struct file_lock *_arg3, struct file_lock *_arg4), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg3);
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    WRAP_RECURSIVE(_arg4);
    TRACES_IF_WATCHPOINT(_arg4);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg4)));
    kern_printk("vfs_lock_file is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = vfs_lock_file(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("vfs_lock_file returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg3);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg3)));
    TRACES_IF_WATCHPOINT(_arg4);
    SCAN_HEAD_FUNC(struct file_lock)(*(TO_UNWATCHED_ADDRESS(_arg4)));
    return ret;
})
#endif


#ifndef KERN_ADDR___napi_schedule
#define APP_WRAPPER_FOR___napi_schedule
#endif
 
#ifndef APP_WRAPPER_FOR___napi_schedule
#define APP_WRAPPER_FOR___napi_schedule
FUNCTION_WRAPPER_VOID(__napi_schedule, (struct napi_struct *n), {
    WRAP_RECURSIVE(n);
    TRACES_IF_WATCHPOINT(n);
    SCAN_HEAD_FUNC(struct napi_struct)(*(TO_UNWATCHED_ADDRESS(n)));
    kern_printk("__napi_schedule is invoked.\n");
    PRE_WRAPPER_FUNC(n);
    __napi_schedule(n);
    POST_WRAPPER_FUNC(n);
    kern_printk("__napi_schedule returned.\n");
    TRACES_IF_WATCHPOINT(n);
    SCAN_HEAD_FUNC(struct napi_struct)(*(TO_UNWATCHED_ADDRESS(n)));
})
#endif


#ifndef KERN_ADDR_devres_find
#define APP_WRAPPER_FOR_devres_find
#endif
 
#ifndef APP_WRAPPER_FOR_devres_find
#define APP_WRAPPER_FOR_devres_find
FUNCTION_WRAPPER(devres_find, (struct device *dev, dr_release_t release, dr_match_t match, void *match_data), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_FUNCTION(release);
    WRAP_FUNCTION(match);
    kern_printk("devres_find is invoked.\n");
    PRE_WRAPPER_FUNC(dev, release, match, match_data);
    void *ret = devres_find(dev, release, match, match_data);
    POST_WRAPPER_FUNC(dev, release, match, match_data);
    kern_printk("devres_find returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_genphy_config_aneg
#define APP_WRAPPER_FOR_genphy_config_aneg
#endif
 
#ifndef APP_WRAPPER_FOR_genphy_config_aneg
#define APP_WRAPPER_FOR_genphy_config_aneg
FUNCTION_WRAPPER(genphy_config_aneg, (struct phy_device *phydev), {
    WRAP_RECURSIVE(phydev);
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    kern_printk("genphy_config_aneg is invoked.\n");
    PRE_WRAPPER_FUNC(phydev);
    int ret = genphy_config_aneg(phydev);
    POST_WRAPPER_FUNC(phydev);
    kern_printk("genphy_config_aneg returned.\n");
    TRACES_IF_WATCHPOINT(phydev);
    SCAN_HEAD_FUNC(struct phy_device)(*(TO_UNWATCHED_ADDRESS(phydev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_pci_irq_del_prt
#define APP_WRAPPER_FOR_acpi_pci_irq_del_prt
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_pci_irq_del_prt
#define APP_WRAPPER_FOR_acpi_pci_irq_del_prt
FUNCTION_WRAPPER_VOID(acpi_pci_irq_del_prt, (int segment, int bus), {
    kern_printk("acpi_pci_irq_del_prt is invoked.\n");
    PRE_WRAPPER_FUNC(segment, bus);
    acpi_pci_irq_del_prt(segment, bus);
    POST_WRAPPER_FUNC(segment, bus);
    kern_printk("acpi_pci_irq_del_prt returned.\n");
})
#endif


#ifndef KERN_ADDR_jbd2_journal_get_create_access
#define APP_WRAPPER_FOR_jbd2_journal_get_create_access
#endif
 
#ifndef APP_WRAPPER_FOR_jbd2_journal_get_create_access
#define APP_WRAPPER_FOR_jbd2_journal_get_create_access
FUNCTION_WRAPPER(jbd2_journal_get_create_access, (handle_t *_arg1, struct buffer_head *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(handle_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("jbd2_journal_get_create_access is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = jbd2_journal_get_create_access(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("jbd2_journal_get_create_access returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(handle_t)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct buffer_head)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_res_counter_uncharge
#define APP_WRAPPER_FOR_res_counter_uncharge
#endif
 
#ifndef APP_WRAPPER_FOR_res_counter_uncharge
#define APP_WRAPPER_FOR_res_counter_uncharge
FUNCTION_WRAPPER(res_counter_uncharge, (struct res_counter *counter, unsigned long val), {
    kern_printk("res_counter_uncharge is invoked.\n");
    PRE_WRAPPER_FUNC(counter, val);
    u64 ret = res_counter_uncharge(counter, val);
    POST_WRAPPER_FUNC(counter, val);
    kern_printk("res_counter_uncharge returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_scsi_cmd_error_handler
#define APP_WRAPPER_FOR_ata_scsi_cmd_error_handler
#endif
 
#ifndef APP_WRAPPER_FOR_ata_scsi_cmd_error_handler
#define APP_WRAPPER_FOR_ata_scsi_cmd_error_handler
FUNCTION_WRAPPER_VOID(ata_scsi_cmd_error_handler, (struct Scsi_Host *host, struct ata_port *ap, struct list_head *eh_q), {
    WRAP_RECURSIVE(host);
    TRACES_IF_WATCHPOINT(host);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(host)));
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_scsi_cmd_error_handler is invoked.\n");
    PRE_WRAPPER_FUNC(host, ap, eh_q);
    ata_scsi_cmd_error_handler(host, ap, eh_q);
    POST_WRAPPER_FUNC(host, ap, eh_q);
    kern_printk("ata_scsi_cmd_error_handler returned.\n");
    TRACES_IF_WATCHPOINT(host);
    SCAN_HEAD_FUNC(struct Scsi_Host)(*(TO_UNWATCHED_ADDRESS(host)));
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_dev_queue_xmit
#define APP_WRAPPER_FOR_dev_queue_xmit
#endif
 
#ifndef APP_WRAPPER_FOR_dev_queue_xmit
#define APP_WRAPPER_FOR_dev_queue_xmit
FUNCTION_WRAPPER(dev_queue_xmit, (struct sk_buff *skb), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("dev_queue_xmit is invoked.\n");
    PRE_WRAPPER_FUNC(skb);
    int ret = dev_queue_xmit(skb);
    POST_WRAPPER_FUNC(skb);
    kern_printk("dev_queue_xmit returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    return ret;
})
#endif


#ifndef KERN_ADDR___compat_save_altstack
#define APP_WRAPPER_FOR___compat_save_altstack
#endif
 
#ifndef APP_WRAPPER_FOR___compat_save_altstack
#define APP_WRAPPER_FOR___compat_save_altstack
FUNCTION_WRAPPER(__compat_save_altstack, (compat_stack_t *_arg1, unsigned long _arg2), {
    kern_printk("__compat_save_altstack is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = __compat_save_altstack(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("__compat_save_altstack returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_select_bars
#define APP_WRAPPER_FOR_pci_select_bars
#endif
 
#ifndef APP_WRAPPER_FOR_pci_select_bars
#define APP_WRAPPER_FOR_pci_select_bars
FUNCTION_WRAPPER(pci_select_bars, (struct pci_dev *dev, unsigned long flags), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_select_bars is invoked.\n");
    PRE_WRAPPER_FUNC(dev, flags);
    int ret = pci_select_bars(dev, flags);
    POST_WRAPPER_FUNC(dev, flags);
    kern_printk("pci_select_bars returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_klist_del
#define APP_WRAPPER_FOR_klist_del
#endif
 
#ifndef APP_WRAPPER_FOR_klist_del
#define APP_WRAPPER_FOR_klist_del
FUNCTION_WRAPPER_VOID(klist_del, (struct klist_node *n), {
    kern_printk("klist_del is invoked.\n");
    PRE_WRAPPER_FUNC(n);
    klist_del(n);
    POST_WRAPPER_FUNC(n);
    kern_printk("klist_del returned.\n");
})
#endif


#ifndef KERN_ADDR_pcibios_window_alignment
#define APP_WRAPPER_FOR_pcibios_window_alignment
#endif
 
#ifndef APP_WRAPPER_FOR_pcibios_window_alignment
#define APP_WRAPPER_FOR_pcibios_window_alignment
FUNCTION_WRAPPER(pcibios_window_alignment, (struct pci_bus *bus, unsigned long type), {
    WRAP_RECURSIVE(bus);
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    kern_printk("pcibios_window_alignment is invoked.\n");
    PRE_WRAPPER_FUNC(bus, type);
    resource_size_t ret = pcibios_window_alignment(bus, type);
    POST_WRAPPER_FUNC(bus, type);
    kern_printk("pcibios_window_alignment returned.\n");
    TRACES_IF_WATCHPOINT(bus);
    SCAN_HEAD_FUNC(struct pci_bus)(*(TO_UNWATCHED_ADDRESS(bus)));
    return ret;
})
#endif


#ifndef KERN_ADDR_file_ra_state_init
#define APP_WRAPPER_FOR_file_ra_state_init
#endif
 
#ifndef APP_WRAPPER_FOR_file_ra_state_init
#define APP_WRAPPER_FOR_file_ra_state_init
FUNCTION_WRAPPER_VOID(file_ra_state_init, (struct file_ra_state *ra, struct address_space *mapping), {
    WRAP_RECURSIVE(mapping);
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
    kern_printk("file_ra_state_init is invoked.\n");
    PRE_WRAPPER_FUNC(ra, mapping);
    file_ra_state_init(ra, mapping);
    POST_WRAPPER_FUNC(ra, mapping);
    kern_printk("file_ra_state_init returned.\n");
    TRACES_IF_WATCHPOINT(mapping);
    SCAN_HEAD_FUNC(struct address_space)(*(TO_UNWATCHED_ADDRESS(mapping)));
})
#endif


#ifndef KERN_ADDR_pnp_device_attach
#define APP_WRAPPER_FOR_pnp_device_attach
#endif
 
#ifndef APP_WRAPPER_FOR_pnp_device_attach
#define APP_WRAPPER_FOR_pnp_device_attach
FUNCTION_WRAPPER(pnp_device_attach, (struct pnp_dev *pnp_dev), {
    WRAP_RECURSIVE(pnp_dev);
    TRACES_IF_WATCHPOINT(pnp_dev);
    SCAN_HEAD_FUNC(struct pnp_dev)(*(TO_UNWATCHED_ADDRESS(pnp_dev)));
    kern_printk("pnp_device_attach is invoked.\n");
    PRE_WRAPPER_FUNC(pnp_dev);
    int ret = pnp_device_attach(pnp_dev);
    POST_WRAPPER_FUNC(pnp_dev);
    kern_printk("pnp_device_attach returned.\n");
    TRACES_IF_WATCHPOINT(pnp_dev);
    SCAN_HEAD_FUNC(struct pnp_dev)(*(TO_UNWATCHED_ADDRESS(pnp_dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_get_task_io_context
#define APP_WRAPPER_FOR_get_task_io_context
#endif
 
#ifndef APP_WRAPPER_FOR_get_task_io_context
#define APP_WRAPPER_FOR_get_task_io_context
FUNCTION_WRAPPER(get_task_io_context, (struct task_struct *task, gfp_t gfp_flags, int node), {
    WRAP_RECURSIVE(task);
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    kern_printk("get_task_io_context is invoked.\n");
    PRE_WRAPPER_FUNC(task, gfp_flags, node);
    struct io_context *ret = get_task_io_context(task, gfp_flags, node);
    POST_WRAPPER_FUNC(task, gfp_flags, node);
    kern_printk("get_task_io_context returned.\n");
    TRACES_IF_WATCHPOINT(task);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(task)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___bitmap_parse
#define APP_WRAPPER_FOR___bitmap_parse
#endif
 
#ifndef APP_WRAPPER_FOR___bitmap_parse
#define APP_WRAPPER_FOR___bitmap_parse
FUNCTION_WRAPPER(__bitmap_parse, (const char *buf, unsigned int buflen, int is_user, unsigned long *dst, int nbits), {
    kern_printk("__bitmap_parse is invoked.\n");
    PRE_WRAPPER_FUNC(buf, buflen, is_user, dst, nbits);
    int ret = __bitmap_parse(buf, buflen, is_user, dst, nbits);
    POST_WRAPPER_FUNC(buf, buflen, is_user, dst, nbits);
    kern_printk("__bitmap_parse returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_mpc_ioapic_addr
#define APP_WRAPPER_FOR_mpc_ioapic_addr
#endif
 
#ifndef APP_WRAPPER_FOR_mpc_ioapic_addr
#define APP_WRAPPER_FOR_mpc_ioapic_addr
FUNCTION_WRAPPER(mpc_ioapic_addr, (int ioapic), {
    kern_printk("mpc_ioapic_addr is invoked.\n");
    PRE_WRAPPER_FUNC(ioapic);
    int ret = mpc_ioapic_addr(ioapic);
    POST_WRAPPER_FUNC(ioapic);
    kern_printk("mpc_ioapic_addr returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pmdp_set_access_flags
#define APP_WRAPPER_FOR_pmdp_set_access_flags
#endif
 
#ifndef APP_WRAPPER_FOR_pmdp_set_access_flags
#define APP_WRAPPER_FOR_pmdp_set_access_flags
FUNCTION_WRAPPER(pmdp_set_access_flags, (struct vm_area_struct *vma, unsigned long address, pmd_t *pmdp, pmd_t entry, int dirty), {
    WRAP_RECURSIVE(vma);
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    kern_printk("pmdp_set_access_flags is invoked.\n");
    PRE_WRAPPER_FUNC(vma, address, pmdp, entry, dirty);
    int ret = pmdp_set_access_flags(vma, address, pmdp, entry, dirty);
    POST_WRAPPER_FUNC(vma, address, pmdp, entry, dirty);
    kern_printk("pmdp_set_access_flags returned.\n");
    TRACES_IF_WATCHPOINT(vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(vma)));
    return ret;
})
#endif


#ifndef KERN_ADDR_dma_issue_pending_all
#define APP_WRAPPER_FOR_dma_issue_pending_all
#endif
 
#ifndef APP_WRAPPER_FOR_dma_issue_pending_all
#define APP_WRAPPER_FOR_dma_issue_pending_all
FUNCTION_WRAPPER_VOID(dma_issue_pending_all, (), {
    kern_printk("dma_issue_pending_all is invoked.\n");
    PRE_WRAPPER_FUNC();
    dma_issue_pending_all();
    POST_WRAPPER_FUNC();
    kern_printk("dma_issue_pending_all returned.\n");
})
#endif


#ifndef KERN_ADDR_dev_set_name
#define APP_WRAPPER_FOR_dev_set_name
#endif
 
#ifndef APP_WRAPPER_FOR_dev_set_name
#define APP_WRAPPER_FOR_dev_set_name
FUNCTION_WRAPPER(dev_set_name, (struct device *dev, const char *name, ...), {
    va_list args__;
    va_start(args__, name);
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    // TODO: variadic arguments
    kern_printk("dev_set_name is invoked.\n");
    PRE_WRAPPER_FUNC(dev, name);
    int ret = dev_set_name(dev, name);
    POST_WRAPPER_FUNC(dev, name);
    kern_printk("dev_set_name returned.\n");
    va_end(args__);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct device)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR___kmalloc
#define APP_WRAPPER_FOR___kmalloc
#endif
 
#ifndef APP_WRAPPER_FOR___kmalloc
#define APP_WRAPPER_FOR___kmalloc
FUNCTION_WRAPPER(__kmalloc, (size_t size, gfp_t flags), {
    kern_printk("__kmalloc is invoked.\n");
    PRE_WRAPPER_FUNC(size, flags);
    void *ret = __kmalloc(size, flags);
    POST_WRAPPER_FUNC(size, flags);
    kern_printk("__kmalloc returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_seq_lseek
#define APP_WRAPPER_FOR_seq_lseek
#endif
 
#ifndef APP_WRAPPER_FOR_seq_lseek
#define APP_WRAPPER_FOR_seq_lseek
FUNCTION_WRAPPER(seq_lseek, (struct file *_arg1, loff_t _arg2, int _arg3), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("seq_lseek is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    loff_t ret = seq_lseek(_arg1, _arg2, _arg3);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3);
    kern_printk("seq_lseek returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR___cmpxchg_wrong_size
#define APP_WRAPPER_FOR___cmpxchg_wrong_size
#endif
 
#ifndef APP_WRAPPER_FOR___cmpxchg_wrong_size
#define APP_WRAPPER_FOR___cmpxchg_wrong_size
FUNCTION_WRAPPER_VOID(__cmpxchg_wrong_size, (), {
    kern_printk("__cmpxchg_wrong_size is invoked.\n");
    PRE_WRAPPER_FUNC();
    __cmpxchg_wrong_size();
    POST_WRAPPER_FUNC();
    kern_printk("__cmpxchg_wrong_size returned.\n");
})
#endif


#ifndef KERN_ADDR_mb_cache_entry_find_first
#define APP_WRAPPER_FOR_mb_cache_entry_find_first
#endif
 
#ifndef APP_WRAPPER_FOR_mb_cache_entry_find_first
#define APP_WRAPPER_FOR_mb_cache_entry_find_first
FUNCTION_WRAPPER(mb_cache_entry_find_first, (struct mb_cache *cache, struct block_device *_arg1, unsigned int _arg2), {
    WRAP_RECURSIVE(cache);
    TRACES_IF_WATCHPOINT(cache);
    SCAN_HEAD_FUNC(struct mb_cache)(*(TO_UNWATCHED_ADDRESS(cache)));
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("mb_cache_entry_find_first is invoked.\n");
    PRE_WRAPPER_FUNC(cache, _arg1, _arg2);
    struct mb_cache_entry *ret = mb_cache_entry_find_first(cache, _arg1, _arg2);
    POST_WRAPPER_FUNC(cache, _arg1, _arg2);
    kern_printk("mb_cache_entry_find_first returned.\n");
    TRACES_IF_WATCHPOINT(cache);
    SCAN_HEAD_FUNC(struct mb_cache)(*(TO_UNWATCHED_ADDRESS(cache)));
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct block_device)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_phy_driver_register
#define APP_WRAPPER_FOR_phy_driver_register
#endif
 
#ifndef APP_WRAPPER_FOR_phy_driver_register
#define APP_WRAPPER_FOR_phy_driver_register
FUNCTION_WRAPPER(phy_driver_register, (struct phy_driver *new_driver), {
    WRAP_RECURSIVE(new_driver);
    TRACES_IF_WATCHPOINT(new_driver);
    SCAN_HEAD_FUNC(struct phy_driver)(*(TO_UNWATCHED_ADDRESS(new_driver)));
    kern_printk("phy_driver_register is invoked.\n");
    PRE_WRAPPER_FUNC(new_driver);
    int ret = phy_driver_register(new_driver);
    POST_WRAPPER_FUNC(new_driver);
    kern_printk("phy_driver_register returned.\n");
    TRACES_IF_WATCHPOINT(new_driver);
    SCAN_HEAD_FUNC(struct phy_driver)(*(TO_UNWATCHED_ADDRESS(new_driver)));
    return ret;
})
#endif


#ifndef KERN_ADDR_early_printk
#define APP_WRAPPER_FOR_early_printk
#endif
 
#ifndef APP_WRAPPER_FOR_early_printk
#define APP_WRAPPER_FOR_early_printk
FUNCTION_WRAPPER_VOID(early_printk, (const char *fmt, ...), {
    va_list args__;
    va_start(args__, fmt);
    // TODO: variadic arguments
    kern_printk("early_printk is invoked.\n");
    PRE_WRAPPER_FUNC(fmt);
    early_printk(fmt);
    POST_WRAPPER_FUNC(fmt);
    kern_printk("early_printk returned.\n");
    va_end(args__);
})
#endif


#ifndef KERN_ADDR_seq_bitmap_list
#define APP_WRAPPER_FOR_seq_bitmap_list
#endif
 
#ifndef APP_WRAPPER_FOR_seq_bitmap_list
#define APP_WRAPPER_FOR_seq_bitmap_list
FUNCTION_WRAPPER(seq_bitmap_list, (struct seq_file *m, unsigned const long *bits, unsigned int nr_bits), {
    WRAP_RECURSIVE(m);
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
    kern_printk("seq_bitmap_list is invoked.\n");
    PRE_WRAPPER_FUNC(m, bits, nr_bits);
    int ret = seq_bitmap_list(m, bits, nr_bits);
    POST_WRAPPER_FUNC(m, bits, nr_bits);
    kern_printk("seq_bitmap_list returned.\n");
    TRACES_IF_WATCHPOINT(m);
    SCAN_HEAD_FUNC(struct seq_file)(*(TO_UNWATCHED_ADDRESS(m)));
    return ret;
})
#endif


#ifndef KERN_ADDR_user_path_at
#define APP_WRAPPER_FOR_user_path_at
#endif
 
#ifndef APP_WRAPPER_FOR_user_path_at
#define APP_WRAPPER_FOR_user_path_at
FUNCTION_WRAPPER(user_path_at, (int _arg1, const char *_arg2, unsigned int _arg3, struct path *_arg4), {
    WRAP_RECURSIVE(_arg4);
    TRACES_IF_WATCHPOINT(_arg4);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg4)));
    kern_printk("user_path_at is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    int ret = user_path_at(_arg1, _arg2, _arg3, _arg4);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4);
    kern_printk("user_path_at returned.\n");
    TRACES_IF_WATCHPOINT(_arg4);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg4)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pcie_capability_write_dword
#define APP_WRAPPER_FOR_pcie_capability_write_dword
#endif
 
#ifndef APP_WRAPPER_FOR_pcie_capability_write_dword
#define APP_WRAPPER_FOR_pcie_capability_write_dword
FUNCTION_WRAPPER(pcie_capability_write_dword, (struct pci_dev *dev, int pos, u32 val), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pcie_capability_write_dword is invoked.\n");
    PRE_WRAPPER_FUNC(dev, pos, val);
    int ret = pcie_capability_write_dword(dev, pos, val);
    POST_WRAPPER_FUNC(dev, pos, val);
    kern_printk("pcie_capability_write_dword returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_sff_error_handler
#define APP_WRAPPER_FOR_ata_sff_error_handler
#endif
 
#ifndef APP_WRAPPER_FOR_ata_sff_error_handler
#define APP_WRAPPER_FOR_ata_sff_error_handler
FUNCTION_WRAPPER_VOID(ata_sff_error_handler, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_sff_error_handler is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    ata_sff_error_handler(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_sff_error_handler returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
})
#endif


#ifndef KERN_ADDR_dm_shift_arg
#define APP_WRAPPER_FOR_dm_shift_arg
#endif
 
#ifndef APP_WRAPPER_FOR_dm_shift_arg
#define APP_WRAPPER_FOR_dm_shift_arg
FUNCTION_WRAPPER(dm_shift_arg, (struct dm_arg_set *as), {
    kern_printk("dm_shift_arg is invoked.\n");
    PRE_WRAPPER_FUNC(as);
    const char *ret = dm_shift_arg(as);
    POST_WRAPPER_FUNC(as);
    kern_printk("dm_shift_arg returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_buffer_init
#define APP_WRAPPER_FOR_buffer_init
#endif
 
#ifndef APP_WRAPPER_FOR_buffer_init
#define APP_WRAPPER_FOR_buffer_init
FUNCTION_WRAPPER_VOID(buffer_init, (), {
    kern_printk("buffer_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    buffer_init();
    POST_WRAPPER_FUNC();
    kern_printk("buffer_init returned.\n");
})
#endif


#ifndef KERN_ADDR_unmap_vmas
#define APP_WRAPPER_FOR_unmap_vmas
#endif
 
#ifndef APP_WRAPPER_FOR_unmap_vmas
#define APP_WRAPPER_FOR_unmap_vmas
FUNCTION_WRAPPER_VOID(unmap_vmas, (struct mmu_gather *tlb, struct vm_area_struct *start_vma, unsigned long start, unsigned long end), {
    WRAP_RECURSIVE(start_vma);
    TRACES_IF_WATCHPOINT(start_vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(start_vma)));
    kern_printk("unmap_vmas is invoked.\n");
    PRE_WRAPPER_FUNC(tlb, start_vma, start, end);
    unmap_vmas(tlb, start_vma, start, end);
    POST_WRAPPER_FUNC(tlb, start_vma, start, end);
    kern_printk("unmap_vmas returned.\n");
    TRACES_IF_WATCHPOINT(start_vma);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(start_vma)));
})
#endif


#ifndef KERN_ADDR_sk_stream_kill_queues
#define APP_WRAPPER_FOR_sk_stream_kill_queues
#endif
 
#ifndef APP_WRAPPER_FOR_sk_stream_kill_queues
#define APP_WRAPPER_FOR_sk_stream_kill_queues
FUNCTION_WRAPPER_VOID(sk_stream_kill_queues, (struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sk_stream_kill_queues is invoked.\n");
    PRE_WRAPPER_FUNC(sk);
    sk_stream_kill_queues(sk);
    POST_WRAPPER_FUNC(sk);
    kern_printk("sk_stream_kill_queues returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR_ata_cable_ignore
#define APP_WRAPPER_FOR_ata_cable_ignore
#endif
 
#ifndef APP_WRAPPER_FOR_ata_cable_ignore
#define APP_WRAPPER_FOR_ata_cable_ignore
FUNCTION_WRAPPER(ata_cable_ignore, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_cable_ignore is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    int ret = ata_cable_ignore(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_cable_ignore returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR_eth_header_cache_update
#define APP_WRAPPER_FOR_eth_header_cache_update
#endif
 
#ifndef APP_WRAPPER_FOR_eth_header_cache_update
#define APP_WRAPPER_FOR_eth_header_cache_update
FUNCTION_WRAPPER_VOID(eth_header_cache_update, (struct hh_cache *hh, const struct net_device *dev, unsigned const char *haddr), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("eth_header_cache_update is invoked.\n");
    PRE_WRAPPER_FUNC(hh, dev, haddr);
    eth_header_cache_update(hh, dev, haddr);
    POST_WRAPPER_FUNC(hh, dev, haddr);
    kern_printk("eth_header_cache_update returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(const struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR_set_pte_vaddr_pud
#define APP_WRAPPER_FOR_set_pte_vaddr_pud
#endif
 
#ifndef APP_WRAPPER_FOR_set_pte_vaddr_pud
#define APP_WRAPPER_FOR_set_pte_vaddr_pud
FUNCTION_WRAPPER_VOID(set_pte_vaddr_pud, (pud_t *pud_page, unsigned long vaddr, pte_t new_pte), {
    kern_printk("set_pte_vaddr_pud is invoked.\n");
    PRE_WRAPPER_FUNC(pud_page, vaddr, new_pte);
    set_pte_vaddr_pud(pud_page, vaddr, new_pte);
    POST_WRAPPER_FUNC(pud_page, vaddr, new_pte);
    kern_printk("set_pte_vaddr_pud returned.\n");
})
#endif


#ifndef KERN_ADDR_driver_probe_done
#define APP_WRAPPER_FOR_driver_probe_done
#endif
 
#ifndef APP_WRAPPER_FOR_driver_probe_done
#define APP_WRAPPER_FOR_driver_probe_done
FUNCTION_WRAPPER(driver_probe_done, (), {
    kern_printk("driver_probe_done is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = driver_probe_done();
    POST_WRAPPER_FUNC();
    kern_printk("driver_probe_done returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_default_acpi_madt_oem_check
#define APP_WRAPPER_FOR_default_acpi_madt_oem_check
#endif
 
#ifndef APP_WRAPPER_FOR_default_acpi_madt_oem_check
#define APP_WRAPPER_FOR_default_acpi_madt_oem_check
FUNCTION_WRAPPER(default_acpi_madt_oem_check, (char *_arg1, char *_arg2), {
    kern_printk("default_acpi_madt_oem_check is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = default_acpi_madt_oem_check(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("default_acpi_madt_oem_check returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_populate_extra_pte
#define APP_WRAPPER_FOR_populate_extra_pte
#endif
 
#ifndef APP_WRAPPER_FOR_populate_extra_pte
#define APP_WRAPPER_FOR_populate_extra_pte
FUNCTION_WRAPPER(populate_extra_pte, (unsigned long vaddr), {
    kern_printk("populate_extra_pte is invoked.\n");
    PRE_WRAPPER_FUNC(vaddr);
    pte_t *ret = populate_extra_pte(vaddr);
    POST_WRAPPER_FUNC(vaddr);
    kern_printk("populate_extra_pte returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_radix_tree_next_hole
#define APP_WRAPPER_FOR_radix_tree_next_hole
#endif
 
#ifndef APP_WRAPPER_FOR_radix_tree_next_hole
#define APP_WRAPPER_FOR_radix_tree_next_hole
FUNCTION_WRAPPER(radix_tree_next_hole, (struct radix_tree_root *root, unsigned long index, unsigned long max_scan), {
    kern_printk("radix_tree_next_hole is invoked.\n");
    PRE_WRAPPER_FUNC(root, index, max_scan);
    long ret = radix_tree_next_hole(root, index, max_scan);
    POST_WRAPPER_FUNC(root, index, max_scan);
    kern_printk("radix_tree_next_hole returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_ata_cable_unknown
#define APP_WRAPPER_FOR_ata_cable_unknown
#endif
 
#ifndef APP_WRAPPER_FOR_ata_cable_unknown
#define APP_WRAPPER_FOR_ata_cable_unknown
FUNCTION_WRAPPER(ata_cable_unknown, (struct ata_port *ap), {
    WRAP_RECURSIVE(ap);
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    kern_printk("ata_cable_unknown is invoked.\n");
    PRE_WRAPPER_FUNC(ap);
    int ret = ata_cable_unknown(ap);
    POST_WRAPPER_FUNC(ap);
    kern_printk("ata_cable_unknown returned.\n");
    TRACES_IF_WATCHPOINT(ap);
    SCAN_HEAD_FUNC(struct ata_port)(*(TO_UNWATCHED_ADDRESS(ap)));
    return ret;
})
#endif


#ifndef KERN_ADDR_thread_info_cache_init
#define APP_WRAPPER_FOR_thread_info_cache_init
#endif
 
#ifndef APP_WRAPPER_FOR_thread_info_cache_init
#define APP_WRAPPER_FOR_thread_info_cache_init
FUNCTION_WRAPPER_VOID(thread_info_cache_init, (), {
    kern_printk("thread_info_cache_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    thread_info_cache_init();
    POST_WRAPPER_FUNC();
    kern_printk("thread_info_cache_init returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_purge_cached_objects
#define APP_WRAPPER_FOR_acpi_purge_cached_objects
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_purge_cached_objects
#define APP_WRAPPER_FOR_acpi_purge_cached_objects
FUNCTION_WRAPPER(acpi_purge_cached_objects, (), {
    kern_printk("acpi_purge_cached_objects is invoked.\n");
    PRE_WRAPPER_FUNC();
    acpi_status ret = acpi_purge_cached_objects();
    POST_WRAPPER_FUNC();
    kern_printk("acpi_purge_cached_objects returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_detach_data
#define APP_WRAPPER_FOR_acpi_detach_data
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_detach_data
#define APP_WRAPPER_FOR_acpi_detach_data
FUNCTION_WRAPPER(acpi_detach_data, (acpi_handle object, acpi_object_handler handler), {
    WRAP_FUNCTION(handler);
    kern_printk("acpi_detach_data is invoked.\n");
    PRE_WRAPPER_FUNC(object, handler);
    acpi_status ret = acpi_detach_data(object, handler);
    POST_WRAPPER_FUNC(object, handler);
    kern_printk("acpi_detach_data returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_segment_checks
#define APP_WRAPPER_FOR_generic_segment_checks
#endif
 
#ifndef APP_WRAPPER_FOR_generic_segment_checks
#define APP_WRAPPER_FOR_generic_segment_checks
FUNCTION_WRAPPER(generic_segment_checks, (const struct iovec *iov, unsigned long *nr_segs, size_t *count, int access_flags), {
    kern_printk("generic_segment_checks is invoked.\n");
    PRE_WRAPPER_FUNC(iov, nr_segs, count, access_flags);
    int ret = generic_segment_checks(iov, nr_segs, count, access_flags);
    POST_WRAPPER_FUNC(iov, nr_segs, count, access_flags);
    kern_printk("generic_segment_checks returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_set_create_files_as
#define APP_WRAPPER_FOR_set_create_files_as
#endif
 
#ifndef APP_WRAPPER_FOR_set_create_files_as
#define APP_WRAPPER_FOR_set_create_files_as
FUNCTION_WRAPPER(set_create_files_as, (struct cred *_arg1, struct inode *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct cred)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    WRAP_RECURSIVE(_arg2);
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    kern_printk("set_create_files_as is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = set_create_files_as(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("set_create_files_as returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct cred)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    TRACES_IF_WATCHPOINT(_arg2);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg2)));
    return ret;
})
#endif


#ifndef KERN_ADDR_swiotlb_nr_tbl
#define APP_WRAPPER_FOR_swiotlb_nr_tbl
#endif
 
#ifndef APP_WRAPPER_FOR_swiotlb_nr_tbl
#define APP_WRAPPER_FOR_swiotlb_nr_tbl
FUNCTION_WRAPPER(swiotlb_nr_tbl, (), {
    kern_printk("swiotlb_nr_tbl is invoked.\n");
    PRE_WRAPPER_FUNC();
    long ret = swiotlb_nr_tbl();
    POST_WRAPPER_FUNC();
    kern_printk("swiotlb_nr_tbl returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_clocksource_i8253_init
#define APP_WRAPPER_FOR_clocksource_i8253_init
#endif
 
#ifndef APP_WRAPPER_FOR_clocksource_i8253_init
#define APP_WRAPPER_FOR_clocksource_i8253_init
FUNCTION_WRAPPER(clocksource_i8253_init, (), {
    kern_printk("clocksource_i8253_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    int ret = clocksource_i8253_init();
    POST_WRAPPER_FUNC();
    kern_printk("clocksource_i8253_init returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___sb_start_write
#define APP_WRAPPER_FOR___sb_start_write
#endif
 
#ifndef APP_WRAPPER_FOR___sb_start_write
#define APP_WRAPPER_FOR___sb_start_write
FUNCTION_WRAPPER(__sb_start_write, (struct super_block *sb, int level, bool wait), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("__sb_start_write is invoked.\n");
    PRE_WRAPPER_FUNC(sb, level, wait);
    int ret = __sb_start_write(sb, level, wait);
    POST_WRAPPER_FUNC(sb, level, wait);
    kern_printk("__sb_start_write returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_part_round_stats
#define APP_WRAPPER_FOR_part_round_stats
#endif
 
#ifndef APP_WRAPPER_FOR_part_round_stats
#define APP_WRAPPER_FOR_part_round_stats
FUNCTION_WRAPPER_VOID(part_round_stats, (int cpu, struct hd_struct *part), {
    WRAP_RECURSIVE(part);
    TRACES_IF_WATCHPOINT(part);
    SCAN_HEAD_FUNC(struct hd_struct)(*(TO_UNWATCHED_ADDRESS(part)));
    kern_printk("part_round_stats is invoked.\n");
    PRE_WRAPPER_FUNC(cpu, part);
    part_round_stats(cpu, part);
    POST_WRAPPER_FUNC(cpu, part);
    kern_printk("part_round_stats returned.\n");
    TRACES_IF_WATCHPOINT(part);
    SCAN_HEAD_FUNC(struct hd_struct)(*(TO_UNWATCHED_ADDRESS(part)));
})
#endif


#ifndef KERN_ADDR_kern_mount_data
#define APP_WRAPPER_FOR_kern_mount_data
#endif
 
#ifndef APP_WRAPPER_FOR_kern_mount_data
#define APP_WRAPPER_FOR_kern_mount_data
FUNCTION_WRAPPER(kern_mount_data, (struct file_system_type *_arg1, void *data), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("kern_mount_data is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, data);
    struct vfsmount *ret = kern_mount_data(_arg1, data);
    POST_WRAPPER_FUNC(_arg1, data);
    kern_printk("kern_mount_data returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct file_system_type)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_autoremove_wake_function
#define APP_WRAPPER_FOR_autoremove_wake_function
#endif
 
#ifndef APP_WRAPPER_FOR_autoremove_wake_function
#define APP_WRAPPER_FOR_autoremove_wake_function
FUNCTION_WRAPPER(autoremove_wake_function, (wait_queue_t *wait, unsigned int mode, int sync, void *key), {
    WRAP_RECURSIVE(wait);
    TRACES_IF_WATCHPOINT(wait);
    SCAN_HEAD_FUNC(wait_queue_t)(*(TO_UNWATCHED_ADDRESS(wait)));
    kern_printk("autoremove_wake_function is invoked.\n");
    PRE_WRAPPER_FUNC(wait, mode, sync, key);
    int ret = autoremove_wake_function(wait, mode, sync, key);
    POST_WRAPPER_FUNC(wait, mode, sync, key);
    kern_printk("autoremove_wake_function returned.\n");
    TRACES_IF_WATCHPOINT(wait);
    SCAN_HEAD_FUNC(wait_queue_t)(*(TO_UNWATCHED_ADDRESS(wait)));
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_request_regions_exclusive
#define APP_WRAPPER_FOR_pci_request_regions_exclusive
#endif
 
#ifndef APP_WRAPPER_FOR_pci_request_regions_exclusive
#define APP_WRAPPER_FOR_pci_request_regions_exclusive
FUNCTION_WRAPPER(pci_request_regions_exclusive, (struct pci_dev *_arg1, const char *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("pci_request_regions_exclusive is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = pci_request_regions_exclusive(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("pci_request_regions_exclusive returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_signal_semaphore
#define APP_WRAPPER_FOR_acpi_os_signal_semaphore
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_signal_semaphore
#define APP_WRAPPER_FOR_acpi_os_signal_semaphore
FUNCTION_WRAPPER(acpi_os_signal_semaphore, (void *handle, u32 units), {
    kern_printk("acpi_os_signal_semaphore is invoked.\n");
    PRE_WRAPPER_FUNC(handle, units);
    acpi_status ret = acpi_os_signal_semaphore(handle, units);
    POST_WRAPPER_FUNC(handle, units);
    kern_printk("acpi_os_signal_semaphore returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_input_ff_create_memless
#define APP_WRAPPER_FOR_input_ff_create_memless
#endif
 
#ifndef APP_WRAPPER_FOR_input_ff_create_memless
#define APP_WRAPPER_FOR_input_ff_create_memless
FUNCTION_WRAPPER(input_ff_create_memless, (struct input_dev *dev, void *data, int (*play_effect)(struct input_dev *, void *, struct ff_effect *)), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    WRAP_FUNCTION(play_effect);
    kern_printk("input_ff_create_memless is invoked.\n");
    PRE_WRAPPER_FUNC(dev, data, play_effect);
    int ret = input_ff_create_memless(dev, data, play_effect);
    POST_WRAPPER_FUNC(dev, data, play_effect);
    kern_printk("input_ff_create_memless returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct input_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    return ret;
})
#endif


#ifndef KERN_ADDR___tasklet_hi_schedule
#define APP_WRAPPER_FOR___tasklet_hi_schedule
#endif
 
#ifndef APP_WRAPPER_FOR___tasklet_hi_schedule
#define APP_WRAPPER_FOR___tasklet_hi_schedule
FUNCTION_WRAPPER_VOID(__tasklet_hi_schedule, (struct tasklet_struct *t), {
    WRAP_RECURSIVE(t);
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct tasklet_struct)(*(TO_UNWATCHED_ADDRESS(t)));
    kern_printk("__tasklet_hi_schedule is invoked.\n");
    PRE_WRAPPER_FUNC(t);
    __tasklet_hi_schedule(t);
    POST_WRAPPER_FUNC(t);
    kern_printk("__tasklet_hi_schedule returned.\n");
    TRACES_IF_WATCHPOINT(t);
    SCAN_HEAD_FUNC(struct tasklet_struct)(*(TO_UNWATCHED_ADDRESS(t)));
})
#endif


#ifndef KERN_ADDR_zap_other_threads
#define APP_WRAPPER_FOR_zap_other_threads
#endif
 
#ifndef APP_WRAPPER_FOR_zap_other_threads
#define APP_WRAPPER_FOR_zap_other_threads
FUNCTION_WRAPPER(zap_other_threads, (struct task_struct *p), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("zap_other_threads is invoked.\n");
    PRE_WRAPPER_FUNC(p);
    int ret = zap_other_threads(p);
    POST_WRAPPER_FUNC(p);
    kern_printk("zap_other_threads returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    return ret;
})
#endif


#ifndef KERN_ADDR_x86_init_rdrand
#define APP_WRAPPER_FOR_x86_init_rdrand
#endif
 
#ifndef APP_WRAPPER_FOR_x86_init_rdrand
#define APP_WRAPPER_FOR_x86_init_rdrand
FUNCTION_WRAPPER_VOID(x86_init_rdrand, (struct cpuinfo_x86 *c), {
    kern_printk("x86_init_rdrand is invoked.\n");
    PRE_WRAPPER_FUNC(c);
    x86_init_rdrand(c);
    POST_WRAPPER_FUNC(c);
    kern_printk("x86_init_rdrand returned.\n");
})
#endif


#ifndef KERN_ADDR_icmpv6_flow_init
#define APP_WRAPPER_FOR_icmpv6_flow_init
#endif
 
#ifndef APP_WRAPPER_FOR_icmpv6_flow_init
#define APP_WRAPPER_FOR_icmpv6_flow_init
FUNCTION_WRAPPER_VOID(icmpv6_flow_init, (struct sock *sk, struct flowi6 *fl6, u8 type, const struct in6_addr *saddr, const struct in6_addr *daddr, int oif), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("icmpv6_flow_init is invoked.\n");
    PRE_WRAPPER_FUNC(sk, fl6, type, saddr, daddr, oif);
    icmpv6_flow_init(sk, fl6, type, saddr, daddr, oif);
    POST_WRAPPER_FUNC(sk, fl6, type, saddr, daddr, oif);
    kern_printk("icmpv6_flow_init returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
})
#endif


#ifndef KERN_ADDR_unlink_file_vma
#define APP_WRAPPER_FOR_unlink_file_vma
#endif
 
#ifndef APP_WRAPPER_FOR_unlink_file_vma
#define APP_WRAPPER_FOR_unlink_file_vma
FUNCTION_WRAPPER_VOID(unlink_file_vma, (struct vm_area_struct *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("unlink_file_vma is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    unlink_file_vma(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("unlink_file_vma returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct vm_area_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_ioremap_page_range
#define APP_WRAPPER_FOR_ioremap_page_range
#endif
 
#ifndef APP_WRAPPER_FOR_ioremap_page_range
#define APP_WRAPPER_FOR_ioremap_page_range
FUNCTION_WRAPPER(ioremap_page_range, (unsigned long addr, unsigned long end, phys_addr_t phys_addr, pgprot_t prot), {
    kern_printk("ioremap_page_range is invoked.\n");
    PRE_WRAPPER_FUNC(addr, end, phys_addr, prot);
    int ret = ioremap_page_range(addr, end, phys_addr, prot);
    POST_WRAPPER_FUNC(addr, end, phys_addr, prot);
    kern_printk("ioremap_page_range returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_get_pid_task
#define APP_WRAPPER_FOR_get_pid_task
#endif
 
#ifndef APP_WRAPPER_FOR_get_pid_task
#define APP_WRAPPER_FOR_get_pid_task
FUNCTION_WRAPPER(get_pid_task, (struct pid *pid, enum pid_type _arg1), {
    WRAP_RECURSIVE(pid);
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
    kern_printk("get_pid_task is invoked.\n");
    PRE_WRAPPER_FUNC(pid, _arg1);
    struct task_struct *ret = get_pid_task(pid, _arg1);
    POST_WRAPPER_FUNC(pid, _arg1);
    kern_printk("get_pid_task returned.\n");
    TRACES_IF_WATCHPOINT(pid);
    SCAN_HEAD_FUNC(struct pid)(*(TO_UNWATCHED_ADDRESS(pid)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_csum_partial
#define APP_WRAPPER_FOR_csum_partial
#endif
 
#ifndef APP_WRAPPER_FOR_csum_partial
#define APP_WRAPPER_FOR_csum_partial
FUNCTION_WRAPPER(csum_partial, (const void *buff, int len, __wsum sum), {
    kern_printk("csum_partial is invoked.\n");
    PRE_WRAPPER_FUNC(buff, len, sum);
    __wsum ret = csum_partial(buff, len, sum);
    POST_WRAPPER_FUNC(buff, len, sum);
    kern_printk("csum_partial returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_pci_sriov_migration
#define APP_WRAPPER_FOR_pci_sriov_migration
#endif
 
#ifndef APP_WRAPPER_FOR_pci_sriov_migration
#define APP_WRAPPER_FOR_pci_sriov_migration
FUNCTION_WRAPPER(pci_sriov_migration, (struct pci_dev *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("pci_sriov_migration is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    irqreturn_t ret = pci_sriov_migration(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("pci_sriov_migration returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(dev)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_drop_caches_sysctl_handler
#define APP_WRAPPER_FOR_drop_caches_sysctl_handler
#endif
 
#ifndef APP_WRAPPER_FOR_drop_caches_sysctl_handler
#define APP_WRAPPER_FOR_drop_caches_sysctl_handler
FUNCTION_WRAPPER(drop_caches_sysctl_handler, (struct ctl_table *_arg1, int _arg2, void *_arg3, size_t *_arg4, loff_t *_arg5), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("drop_caches_sysctl_handler is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    int ret = drop_caches_sysctl_handler(_arg1, _arg2, _arg3, _arg4, _arg5);
    POST_WRAPPER_FUNC(_arg1, _arg2, _arg3, _arg4, _arg5);
    kern_printk("drop_caches_sysctl_handler returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct ctl_table)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_rcu_sched_force_quiescent_state
#define APP_WRAPPER_FOR_rcu_sched_force_quiescent_state
#endif
 
#ifndef APP_WRAPPER_FOR_rcu_sched_force_quiescent_state
#define APP_WRAPPER_FOR_rcu_sched_force_quiescent_state
FUNCTION_WRAPPER_VOID(rcu_sched_force_quiescent_state, (), {
    kern_printk("rcu_sched_force_quiescent_state is invoked.\n");
    PRE_WRAPPER_FUNC();
    rcu_sched_force_quiescent_state();
    POST_WRAPPER_FUNC();
    kern_printk("rcu_sched_force_quiescent_state returned.\n");
})
#endif


#ifndef KERN_ADDR_pcim_enable_device
#define APP_WRAPPER_FOR_pcim_enable_device
#endif
 
#ifndef APP_WRAPPER_FOR_pcim_enable_device
#define APP_WRAPPER_FOR_pcim_enable_device
FUNCTION_WRAPPER(pcim_enable_device, (struct pci_dev *pdev), {
    WRAP_RECURSIVE(pdev);
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    kern_printk("pcim_enable_device is invoked.\n");
    PRE_WRAPPER_FUNC(pdev);
    int ret = pcim_enable_device(pdev);
    POST_WRAPPER_FUNC(pdev);
    kern_printk("pcim_enable_device returned.\n");
    TRACES_IF_WATCHPOINT(pdev);
    SCAN_HEAD_FUNC(struct pci_dev)(*(TO_UNWATCHED_ADDRESS(pdev)));
    return ret;
})
#endif


#ifndef KERN_ADDR_zone_grow_free_lists
#define APP_WRAPPER_FOR_zone_grow_free_lists
#endif
 
#ifndef APP_WRAPPER_FOR_zone_grow_free_lists
#define APP_WRAPPER_FOR_zone_grow_free_lists
FUNCTION_WRAPPER(zone_grow_free_lists, (struct zone *zone, unsigned long new_nr_pages), {
    WRAP_RECURSIVE(zone);
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    kern_printk("zone_grow_free_lists is invoked.\n");
    PRE_WRAPPER_FUNC(zone, new_nr_pages);
    int ret = zone_grow_free_lists(zone, new_nr_pages);
    POST_WRAPPER_FUNC(zone, new_nr_pages);
    kern_printk("zone_grow_free_lists returned.\n");
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    return ret;
})
#endif


#ifndef KERN_ADDR___round_jiffies
#define APP_WRAPPER_FOR___round_jiffies
#endif
 
#ifndef APP_WRAPPER_FOR___round_jiffies
#define APP_WRAPPER_FOR___round_jiffies
FUNCTION_WRAPPER(__round_jiffies, (unsigned long j, int cpu), {
    kern_printk("__round_jiffies is invoked.\n");
    PRE_WRAPPER_FUNC(j, cpu);
    long ret = __round_jiffies(j, cpu);
    POST_WRAPPER_FUNC(j, cpu);
    kern_printk("__round_jiffies returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_linkwatch_fire_event
#define APP_WRAPPER_FOR_linkwatch_fire_event
#endif
 
#ifndef APP_WRAPPER_FOR_linkwatch_fire_event
#define APP_WRAPPER_FOR_linkwatch_fire_event
FUNCTION_WRAPPER_VOID(linkwatch_fire_event, (struct net_device *dev), {
    WRAP_RECURSIVE(dev);
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
    kern_printk("linkwatch_fire_event is invoked.\n");
    PRE_WRAPPER_FUNC(dev);
    linkwatch_fire_event(dev);
    POST_WRAPPER_FUNC(dev);
    kern_printk("linkwatch_fire_event returned.\n");
    TRACES_IF_WATCHPOINT(dev);
    SCAN_HEAD_FUNC(struct net_device)(*(TO_UNWATCHED_ADDRESS(dev)));
})
#endif


#ifndef KERN_ADDR__kstrtoul
#define APP_WRAPPER_FOR__kstrtoul
#endif
 
#ifndef APP_WRAPPER_FOR__kstrtoul
#define APP_WRAPPER_FOR__kstrtoul
FUNCTION_WRAPPER(_kstrtoul, (const char *s, unsigned int base, unsigned long *res), {
    kern_printk("_kstrtoul is invoked.\n");
    PRE_WRAPPER_FUNC(s, base, res);
    int ret = _kstrtoul(s, base, res);
    POST_WRAPPER_FUNC(s, base, res);
    kern_printk("_kstrtoul returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR___nla_reserve
#define APP_WRAPPER_FOR___nla_reserve
#endif
 
#ifndef APP_WRAPPER_FOR___nla_reserve
#define APP_WRAPPER_FOR___nla_reserve
FUNCTION_WRAPPER(__nla_reserve, (struct sk_buff *skb, int attrtype, int attrlen), {
    WRAP_RECURSIVE(skb);
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    kern_printk("__nla_reserve is invoked.\n");
    PRE_WRAPPER_FUNC(skb, attrtype, attrlen);
    struct nlattr *ret = __nla_reserve(skb, attrtype, attrlen);
    POST_WRAPPER_FUNC(skb, attrtype, attrlen);
    kern_printk("__nla_reserve returned.\n");
    TRACES_IF_WATCHPOINT(skb);
    SCAN_HEAD_FUNC(struct sk_buff)(*(TO_UNWATCHED_ADDRESS(skb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_generic_fh_to_parent
#define APP_WRAPPER_FOR_generic_fh_to_parent
#endif
 
#ifndef APP_WRAPPER_FOR_generic_fh_to_parent
#define APP_WRAPPER_FOR_generic_fh_to_parent
FUNCTION_WRAPPER(generic_fh_to_parent, (struct super_block *sb, struct fid *fid, int fh_len, int fh_type, struct inode *(*get_inode)(struct super_block *, u64, u32)), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    WRAP_FUNCTION(get_inode);
    kern_printk("generic_fh_to_parent is invoked.\n");
    PRE_WRAPPER_FUNC(sb, fid, fh_len, fh_type, get_inode);
    struct dentry *ret = generic_fh_to_parent(sb, fid, fh_len, fh_type, get_inode);
    POST_WRAPPER_FUNC(sb, fid, fh_len, fh_type, get_inode);
    kern_printk("generic_fh_to_parent returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR___percpu_counter_sum
#define APP_WRAPPER_FOR___percpu_counter_sum
#endif
 
#ifndef APP_WRAPPER_FOR___percpu_counter_sum
#define APP_WRAPPER_FOR___percpu_counter_sum
FUNCTION_WRAPPER(__percpu_counter_sum, (struct percpu_counter *fbc), {
    kern_printk("__percpu_counter_sum is invoked.\n");
    PRE_WRAPPER_FUNC(fbc);
    s64 ret = __percpu_counter_sum(fbc);
    POST_WRAPPER_FUNC(fbc);
    kern_printk("__percpu_counter_sum returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_vfs_follow_link
#define APP_WRAPPER_FOR_vfs_follow_link
#endif
 
#ifndef APP_WRAPPER_FOR_vfs_follow_link
#define APP_WRAPPER_FOR_vfs_follow_link
FUNCTION_WRAPPER(vfs_follow_link, (struct nameidata *_arg1, const char *_arg2), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct nameidata)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("vfs_follow_link is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1, _arg2);
    int ret = vfs_follow_link(_arg1, _arg2);
    POST_WRAPPER_FUNC(_arg1, _arg2);
    kern_printk("vfs_follow_link returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct nameidata)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    return ret;
})
#endif


#ifndef KERN_ADDR_d_prune_aliases
#define APP_WRAPPER_FOR_d_prune_aliases
#endif
 
#ifndef APP_WRAPPER_FOR_d_prune_aliases
#define APP_WRAPPER_FOR_d_prune_aliases
FUNCTION_WRAPPER_VOID(d_prune_aliases, (struct inode *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("d_prune_aliases is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    d_prune_aliases(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("d_prune_aliases returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct inode)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_smp_cpus_done
#define APP_WRAPPER_FOR_smp_cpus_done
#endif
 
#ifndef APP_WRAPPER_FOR_smp_cpus_done
#define APP_WRAPPER_FOR_smp_cpus_done
FUNCTION_WRAPPER_VOID(smp_cpus_done, (unsigned int max_cpus), {
    kern_printk("smp_cpus_done is invoked.\n");
    PRE_WRAPPER_FUNC(max_cpus);
    smp_cpus_done(max_cpus);
    POST_WRAPPER_FUNC(max_cpus);
    kern_printk("smp_cpus_done returned.\n");
})
#endif


#ifndef KERN_ADDR_reserve_top_address
#define APP_WRAPPER_FOR_reserve_top_address
#endif
 
#ifndef APP_WRAPPER_FOR_reserve_top_address
#define APP_WRAPPER_FOR_reserve_top_address
FUNCTION_WRAPPER_VOID(reserve_top_address, (unsigned long reserve), {
    kern_printk("reserve_top_address is invoked.\n");
    PRE_WRAPPER_FUNC(reserve);
    reserve_top_address(reserve);
    POST_WRAPPER_FUNC(reserve);
    kern_printk("reserve_top_address returned.\n");
})
#endif


#ifndef KERN_ADDR_kern_addr_valid
#define APP_WRAPPER_FOR_kern_addr_valid
#endif
 
#ifndef APP_WRAPPER_FOR_kern_addr_valid
#define APP_WRAPPER_FOR_kern_addr_valid
FUNCTION_WRAPPER(kern_addr_valid, (unsigned long addr), {
    kern_printk("kern_addr_valid is invoked.\n");
    PRE_WRAPPER_FUNC(addr);
    int ret = kern_addr_valid(addr);
    POST_WRAPPER_FUNC(addr);
    kern_printk("kern_addr_valid returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_netlink_table_grab
#define APP_WRAPPER_FOR_netlink_table_grab
#endif
 
#ifndef APP_WRAPPER_FOR_netlink_table_grab
#define APP_WRAPPER_FOR_netlink_table_grab
FUNCTION_WRAPPER_VOID(netlink_table_grab, (), {
    kern_printk("netlink_table_grab is invoked.\n");
    PRE_WRAPPER_FUNC();
    netlink_table_grab();
    POST_WRAPPER_FUNC();
    kern_printk("netlink_table_grab returned.\n");
})
#endif


#ifndef KERN_ADDR_get_seccomp_filter
#define APP_WRAPPER_FOR_get_seccomp_filter
#endif
 
#ifndef APP_WRAPPER_FOR_get_seccomp_filter
#define APP_WRAPPER_FOR_get_seccomp_filter
FUNCTION_WRAPPER_VOID(get_seccomp_filter, (struct task_struct *tsk), {
    WRAP_RECURSIVE(tsk);
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
    kern_printk("get_seccomp_filter is invoked.\n");
    PRE_WRAPPER_FUNC(tsk);
    get_seccomp_filter(tsk);
    POST_WRAPPER_FUNC(tsk);
    kern_printk("get_seccomp_filter returned.\n");
    TRACES_IF_WATCHPOINT(tsk);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(tsk)));
})
#endif


#ifndef KERN_ADDR___get_page_tail
#define APP_WRAPPER_FOR___get_page_tail
#endif
 
#ifndef APP_WRAPPER_FOR___get_page_tail
#define APP_WRAPPER_FOR___get_page_tail
FUNCTION_WRAPPER(__get_page_tail, (struct page *page), {
    WRAP_RECURSIVE(page);
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    kern_printk("__get_page_tail is invoked.\n");
    PRE_WRAPPER_FUNC(page);
    bool ret = __get_page_tail(page);
    POST_WRAPPER_FUNC(page);
    kern_printk("__get_page_tail returned.\n");
    TRACES_IF_WATCHPOINT(page);
    SCAN_HEAD_FUNC(struct page)(*(TO_UNWATCHED_ADDRESS(page)));
    return ret;
})
#endif


#ifndef KERN_ADDR_ioapic_insert_resources
#define APP_WRAPPER_FOR_ioapic_insert_resources
#endif
 
#ifndef APP_WRAPPER_FOR_ioapic_insert_resources
#define APP_WRAPPER_FOR_ioapic_insert_resources
FUNCTION_WRAPPER_VOID(ioapic_insert_resources, (), {
    kern_printk("ioapic_insert_resources is invoked.\n");
    PRE_WRAPPER_FUNC();
    ioapic_insert_resources();
    POST_WRAPPER_FUNC();
    kern_printk("ioapic_insert_resources returned.\n");
})
#endif


#ifndef KERN_ADDR_sock_i_ino
#define APP_WRAPPER_FOR_sock_i_ino
#endif
 
#ifndef APP_WRAPPER_FOR_sock_i_ino
#define APP_WRAPPER_FOR_sock_i_ino
FUNCTION_WRAPPER(sock_i_ino, (struct sock *sk), {
    WRAP_RECURSIVE(sk);
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    kern_printk("sock_i_ino is invoked.\n");
    PRE_WRAPPER_FUNC(sk);
    long ret = sock_i_ino(sk);
    POST_WRAPPER_FUNC(sk);
    kern_printk("sock_i_ino returned.\n");
    TRACES_IF_WATCHPOINT(sk);
    SCAN_HEAD_FUNC(struct sock)(*(TO_UNWATCHED_ADDRESS(sk)));
    return ret;
})
#endif


#ifndef KERN_ADDR_compat_sys_execve
#define APP_WRAPPER_FOR_compat_sys_execve
#endif
 
#ifndef APP_WRAPPER_FOR_compat_sys_execve
#define APP_WRAPPER_FOR_compat_sys_execve
FUNCTION_WRAPPER(compat_sys_execve, (const char *filename, const compat_uptr_t *argv, const compat_uptr_t *envp), {
    kern_printk("compat_sys_execve is invoked.\n");
    PRE_WRAPPER_FUNC(filename, argv, envp);
    long ret = compat_sys_execve(filename, argv, envp);
    POST_WRAPPER_FUNC(filename, argv, envp);
    kern_printk("compat_sys_execve returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_acpi_os_signal
#define APP_WRAPPER_FOR_acpi_os_signal
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_os_signal
#define APP_WRAPPER_FOR_acpi_os_signal
FUNCTION_WRAPPER(acpi_os_signal, (u32 function, void *info), {
    kern_printk("acpi_os_signal is invoked.\n");
    PRE_WRAPPER_FUNC(function, info);
    acpi_status ret = acpi_os_signal(function, info);
    POST_WRAPPER_FUNC(function, info);
    kern_printk("acpi_os_signal returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_rtnetlink_init
#define APP_WRAPPER_FOR_rtnetlink_init
#endif
 
#ifndef APP_WRAPPER_FOR_rtnetlink_init
#define APP_WRAPPER_FOR_rtnetlink_init
FUNCTION_WRAPPER_VOID(rtnetlink_init, (), {
    kern_printk("rtnetlink_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    rtnetlink_init();
    POST_WRAPPER_FUNC();
    kern_printk("rtnetlink_init returned.\n");
})
#endif


#ifndef KERN_ADDR_fasync_free
#define APP_WRAPPER_FOR_fasync_free
#endif
 
#ifndef APP_WRAPPER_FOR_fasync_free
#define APP_WRAPPER_FOR_fasync_free
FUNCTION_WRAPPER_VOID(fasync_free, (struct fasync_struct *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct fasync_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("fasync_free is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    fasync_free(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("fasync_free returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct fasync_struct)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR___rtnl_af_register
#define APP_WRAPPER_FOR___rtnl_af_register
#endif
 
#ifndef APP_WRAPPER_FOR___rtnl_af_register
#define APP_WRAPPER_FOR___rtnl_af_register
FUNCTION_WRAPPER(__rtnl_af_register, (struct rtnl_af_ops *ops), {
    WRAP_RECURSIVE(ops);
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct rtnl_af_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    kern_printk("__rtnl_af_register is invoked.\n");
    PRE_WRAPPER_FUNC(ops);
    int ret = __rtnl_af_register(ops);
    POST_WRAPPER_FUNC(ops);
    kern_printk("__rtnl_af_register returned.\n");
    TRACES_IF_WATCHPOINT(ops);
    SCAN_HEAD_FUNC(struct rtnl_af_ops)(*(TO_UNWATCHED_ADDRESS(ops)));
    return ret;
})
#endif


#ifndef KERN_ADDR_hrtimers_init
#define APP_WRAPPER_FOR_hrtimers_init
#endif
 
#ifndef APP_WRAPPER_FOR_hrtimers_init
#define APP_WRAPPER_FOR_hrtimers_init
FUNCTION_WRAPPER_VOID(hrtimers_init, (), {
    kern_printk("hrtimers_init is invoked.\n");
    PRE_WRAPPER_FUNC();
    hrtimers_init();
    POST_WRAPPER_FUNC();
    kern_printk("hrtimers_init returned.\n");
})
#endif


#ifndef KERN_ADDR_path_put
#define APP_WRAPPER_FOR_path_put
#endif
 
#ifndef APP_WRAPPER_FOR_path_put
#define APP_WRAPPER_FOR_path_put
FUNCTION_WRAPPER_VOID(path_put, (struct path *_arg1), {
    WRAP_RECURSIVE(_arg1);
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
    kern_printk("path_put is invoked.\n");
    PRE_WRAPPER_FUNC(_arg1);
    path_put(_arg1);
    POST_WRAPPER_FUNC(_arg1);
    kern_printk("path_put returned.\n");
    TRACES_IF_WATCHPOINT(_arg1);
    SCAN_HEAD_FUNC(struct path)(*(TO_UNWATCHED_ADDRESS(_arg1)));
})
#endif


#ifndef KERN_ADDR_percpu_init_late
#define APP_WRAPPER_FOR_percpu_init_late
#endif
 
#ifndef APP_WRAPPER_FOR_percpu_init_late
#define APP_WRAPPER_FOR_percpu_init_late
FUNCTION_WRAPPER_VOID(percpu_init_late, (), {
    kern_printk("percpu_init_late is invoked.\n");
    PRE_WRAPPER_FUNC();
    percpu_init_late();
    POST_WRAPPER_FUNC();
    kern_printk("percpu_init_late returned.\n");
})
#endif


#ifndef KERN_ADDR_acpi_paddr_to_node
#define APP_WRAPPER_FOR_acpi_paddr_to_node
#endif
 
#ifndef APP_WRAPPER_FOR_acpi_paddr_to_node
#define APP_WRAPPER_FOR_acpi_paddr_to_node
FUNCTION_WRAPPER(acpi_paddr_to_node, (u64 start_addr, u64 size), {
    kern_printk("acpi_paddr_to_node is invoked.\n");
    PRE_WRAPPER_FUNC(start_addr, size);
    int ret = acpi_paddr_to_node(start_addr, size);
    POST_WRAPPER_FUNC(start_addr, size);
    kern_printk("acpi_paddr_to_node returned.\n");
    return ret;
})
#endif


#ifndef KERN_ADDR_cgroup_fork
#define APP_WRAPPER_FOR_cgroup_fork
#endif
 
#ifndef APP_WRAPPER_FOR_cgroup_fork
#define APP_WRAPPER_FOR_cgroup_fork
FUNCTION_WRAPPER_VOID(cgroup_fork, (struct task_struct *p), {
    WRAP_RECURSIVE(p);
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
    kern_printk("cgroup_fork is invoked.\n");
    PRE_WRAPPER_FUNC(p);
    cgroup_fork(p);
    POST_WRAPPER_FUNC(p);
    kern_printk("cgroup_fork returned.\n");
    TRACES_IF_WATCHPOINT(p);
    SCAN_HEAD_FUNC(struct task_struct)(*(TO_UNWATCHED_ADDRESS(p)));
})
#endif


#ifndef KERN_ADDR_dquot_writeback_dquots
#define APP_WRAPPER_FOR_dquot_writeback_dquots
#endif
 
#ifndef APP_WRAPPER_FOR_dquot_writeback_dquots
#define APP_WRAPPER_FOR_dquot_writeback_dquots
FUNCTION_WRAPPER(dquot_writeback_dquots, (struct super_block *sb, int type), {
    WRAP_RECURSIVE(sb);
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    kern_printk("dquot_writeback_dquots is invoked.\n");
    PRE_WRAPPER_FUNC(sb, type);
    int ret = dquot_writeback_dquots(sb, type);
    POST_WRAPPER_FUNC(sb, type);
    kern_printk("dquot_writeback_dquots returned.\n");
    TRACES_IF_WATCHPOINT(sb);
    SCAN_HEAD_FUNC(struct super_block)(*(TO_UNWATCHED_ADDRESS(sb)));
    return ret;
})
#endif


#ifndef KERN_ADDR_alloc_pages_exact_nid
#define APP_WRAPPER_FOR_alloc_pages_exact_nid
#endif
 
#ifndef APP_WRAPPER_FOR_alloc_pages_exact_nid
#define APP_WRAPPER_FOR_alloc_pages_exact_nid
FUNCTION_WRAPPER(alloc_pages_exact_nid, (int nid, size_t size, gfp_t gfp_mask), {
    kern_printk("alloc_pages_exact_nid is invoked.\n");
    PRE_WRAPPER_FUNC(nid, size, gfp_mask);
    void *ret = alloc_pages_exact_nid(nid, size, gfp_mask);
    POST_WRAPPER_FUNC(nid, size, gfp_mask);
    kern_printk("alloc_pages_exact_nid returned.\n");
    RETURN_IN_WRAP(ret);
    return ret;
})
#endif


#ifndef KERN_ADDR_wakeup_kswapd
#define APP_WRAPPER_FOR_wakeup_kswapd
#endif
 
#ifndef APP_WRAPPER_FOR_wakeup_kswapd
#define APP_WRAPPER_FOR_wakeup_kswapd
FUNCTION_WRAPPER_VOID(wakeup_kswapd, (struct zone *zone, int order, enum zone_type classzone_idx), {
    WRAP_RECURSIVE(zone);
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
    kern_printk("wakeup_kswapd is invoked.\n");
    PRE_WRAPPER_FUNC(zone, order, classzone_idx);
    wakeup_kswapd(zone, order, classzone_idx);
    POST_WRAPPER_FUNC(zone, order, classzone_idx);
    kern_printk("wakeup_kswapd returned.\n");
    TRACES_IF_WATCHPOINT(zone);
    SCAN_HEAD_FUNC(struct zone)(*(TO_UNWATCHED_ADDRESS(zone)));
})
#endif


#ifndef KERN_ADDR_down_read_trylock
#define APP_WRAPPER_FOR_down_read_trylock
#endif
 
#ifndef APP_WRAPPER_FOR_down_read_trylock
#define APP_WRAPPER_FOR_down_read_trylock
FUNCTION_WRAPPER(down_read_trylock, (struct rw_semaphore *sem), {
    kern_printk("down_read_trylock is invoked.\n");
    PRE_WRAPPER_FUNC(sem);
    int ret = down_read_trylock(sem);
    POST_WRAPPER_FUNC(sem);
    kern_printk("down_read_trylock returned.\n");
    return ret;
})
#endif


